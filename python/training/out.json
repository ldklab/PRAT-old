[["3.1.  Header Format\n\n  TCP segments are sent as internet datagrams.  The Internet Protocol\n  header carries several information fields, including the source and\n  destination host addresses [2].  A TCP header follows the internet\n  header, supplying information specific to the TCP protocol.  This\n  division allows for the existence of host level protocols other than\n  TCP.\n\n  TCP Header Format\n\n\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |          Source Port          |       Destination Port        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                        Sequence Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                    Acknowledgment Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Data |           |U|A|P|R|S|F|                               |\n   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |\n   |       |           |G|K|H|T|N|N|                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |           Checksum            |         Urgent Pointer        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                    Options                    |    Padding    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                             data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n                            TCP Header Format\n\n          Note that one tick mark represents one bit position.\n\n                               Figure 3.\n\n  Source Port:  16 bits\n\n    The source port number.\n\n  Destination Port:  16 bits\n\n    The destination port number.\n\n\n\n\n                                                               [Page 15]\n \n                                                          September 1981\nTransmission Control Protocol\nFunctional Specification\n\n\n\n  Sequence Number:  32 bits\n\n    The sequence number of the first data octet in this segment (except\n    when SYN is present). If SYN is present the sequence number is the\n    initial sequence number (ISN) and the first data octet is ISN+1.\n\n  Acknowledgment Number:  32 bits\n\n    If the ACK control bit is set this field contains the value of the\n    next sequence number the sender of the segment is expecting to\n    receive.  Once a connection is established this is always sent.\n\n  Data Offset:  4 bits\n\n    The number of 32 bit words in the TCP Header.  This indicates where\n    the data begins.  The TCP header (even one including options) is an\n    integral number of 32 bits long.\n\n  Reserved:  6 bits\n\n    Reserved for future use.  Must be zero.\n\n  Control Bits:  6 bits (from left to right):\n\n    URG:  Urgent Pointer field significant\n    ACK:  Acknowledgment field significant\n    PSH:  Push Function\n    RST:  Reset the connection\n    SYN:  Synchronize sequence numbers\n    FIN:  No more data from sender\n\n  Window:  16 bits\n\n    The number of data octets beginning with the one indicated in the\n    acknowledgment field which the sender of this segment is willing to\n    accept.\n\n  Checksum:  16 bits\n\n    The checksum field is the 16 bit one's complement of the one's\n    complement sum of all 16 bit words in the header and text.  If a\n    segment contains an odd number of header and text octets to be\n    checksummed, the last octet is padded on the right with zeros to\n    form a 16 bit word for checksum purposes.  The pad is not\n    transmitted as part of the segment.  While computing the checksum,\n    the checksum field itself is replaced with zeros.\n\n    The checksum also covers a 96 bit pseudo header conceptually\n\n\n[Page 16]\n \nSeptember 1981\n                                           Transmission Control Protocol\n                                                Functional Specification\n\n\n\n    prefixed to the TCP header.  This pseudo header contains the Source\n    Address, the Destination Address, the Protocol, and TCP length.\n    This gives the TCP protection against misrouted segments.  This\n    information is carried in the Internet Protocol and is transferred\n    across the TCP/Network interface in the arguments or results of\n    calls by the TCP on the IP.\n\n                     +--------+--------+--------+--------+\n                     |           Source Address          |\n                     +--------+--------+--------+--------+\n                     |         Destination Address       |\n                     +--------+--------+--------+--------+\n                     |  zero  |  PTCL  |    TCP Length   |\n                     +--------+--------+--------+--------+\n\n      The TCP Length is the TCP header length plus the data length in\n      octets (this is not an explicitly transmitted quantity, but is\n      computed), and it does not count the 12 octets of the pseudo\n      header.\n\n  Urgent Pointer:  16 bits\n\n    This field communicates the current value of the urgent pointer as a\n    positive offset from the sequence number in this segment.  The\n    urgent pointer points to the sequence number of the octet following\n    the urgent data.  This field is only be interpreted in segments with\n    the URG control bit set.\n\n  Options:  variable\n\n    Options may occupy space at the end of the TCP header and are a\n    multiple of 8 bits in length.  All options are included in the\n    checksum.  An option may begin on any octet boundary.  There are two\n    cases for the format of an option:\n\n      Case 1:  A single octet of option-kind.\n\n      Case 2:  An octet of option-kind, an octet of option-length, and\n               the actual option-data octets.\n\n    The option-length counts the two octets of option-kind and\n    option-length as well as the option-data octets.\n\n    Note that the list of options may be shorter than the data offset\n    field might imply.  The content of the header beyond the\n    End-of-Option option must be header padding (i.e., zero).\n\n    A TCP must implement all options.\n\n\n                                                               [Page 17]\n \n                                                          September 1981\nTransmission Control Protocol\nFunctional Specification\n\n\n\n    Currently defined options include (kind indicated in octal):\n\n      Kind     Length    Meaning\n      ----     ------    -------\n       0         -       End of option list.\n       1         -       No-Operation.\n       2         4       Maximum Segment Size.\n\n\n    Specific Option Definitions\n\n      End of Option List\n\n        +--------+\n        |00000000|\n        +--------+\n         Kind=0\n\n        This option code indicates the end of the option list.  This\n        might not coincide with the end of the TCP header according to\n        the Data Offset field.  This is used at the end of all options,\n        not the end of each option, and need only be used if the end of\n        the options would not otherwise coincide with the end of the TCP\n        header.\n\n      No-Operation\n\n        +--------+\n        |00000001|\n        +--------+\n         Kind=1\n\n        This option code may be used between options, for example, to\n        align the beginning of a subsequent option on a word boundary.\n        There is no guarantee that senders will use this option, so\n        receivers must be prepared to process options even if they do\n        not begin on a word boundary.\n\n      Maximum Segment Size\n\n        +--------+--------+---------+--------+\n        |00000010|00000100|   max seg size   |\n        +--------+--------+---------+--------+\n         Kind=2   Length=4\n\n\n\n\n\n\n[Page 18]\n \nSeptember 1981\n                                           Transmission Control Protocol\n                                                Functional Specification\n\n\n\n        Maximum Segment Size Option Data:  16 bits\n\n          If this option is present, then it communicates the maximum\n          receive segment size at the TCP which sends this segment.\n          This field must only be sent in the initial connection request\n          (i.e., in segments with the SYN control bit set).  If this\n          option is not used, any segment size is allowed.\n\n  Padding:  variable\n\n    The TCP header padding is used to ensure that the TCP header ends\n    and data begins on a 32 bit boundary.  The padding is composed of\n    zeros.\n\n3.2.  Terminology\n\n  Before we can discuss very much about the operation of the TCP we need\n  to introduce some detailed terminology.  The maintenance of a TCP\n  connection requires the remembering of several variables.  We conceive\n  of these variables being stored in a connection record called a\n  Transmission Control Block or TCB.  Among the variables stored in the\n  TCB are the local and remote socket numbers, the security and\n  precedence of the connection, pointers to the user's send and receive\n  buffers, pointers to the retransmit queue and to the current segment.\n  In addition several variables relating to the send and receive\n  sequence numbers are stored in the TCB.\n\n    Send Sequence Variables\n\n      SND.UNA - send unacknowledged\n      SND.NXT - send next\n      SND.WND - send window\n      SND.UP  - send urgent pointer\n      SND.WL1 - segment sequence number used for last window update\n      SND.WL2 - segment acknowledgment number used for last window\n                update\n      ISS     - initial send sequence number\n\n    Receive Sequence Variables\n\n      RCV.NXT - receive next\n      RCV.WND - receive window\n      RCV.UP  - receive urgent pointer\n      IRS     - initial receive sequence number\n\n\n\n\n\n\n                                                               [Page 19]\n \n                                                          September 1981\nTransmission Control Protocol\nFunctional Specification\n\n\n\n  The following diagrams may help to relate some of these variables to\n  the sequence space.\n\n  Send Sequence Space\n\n                   1         2          3          4\n              ----------|----------|----------|----------\n                     SND.UNA    SND.NXT    SND.UNA\n                                          +SND.WND\n\n        1 - old sequence numbers which have been acknowledged\n        2 - sequence numbers of unacknowledged data\n        3 - sequence numbers allowed for new data transmission\n        4 - future sequence numbers which are not yet allowed\n\n                          Send Sequence Space\n\n                               Figure 4.\n\n\n\n  The send window is the portion of the sequence space labeled 3 in\n  figure 4.\n\n  Receive Sequence Space\n\n                       1          2          3\n                   ----------|----------|----------\n                          RCV.NXT    RCV.NXT\n                                    +RCV.WND\n\n        1 - old sequence numbers which have been acknowledged\n        2 - sequence numbers allowed for new reception\n        3 - future sequence numbers which are not yet allowed\n\n                         Receive Sequence Space\n\n                               Figure 5.\n\n\n\n  The receive window is the portion of the sequence space labeled 2 in\n  figure 5.\n\n  There are also some variables used frequently in the discussion that\n  take their values from the fields of the current segment.\n\n\n\n\n[Page 20]\n \nSeptember 1981\n                                           Transmission Control Protocol\n                                                Functional Specification\n\n\n\n    Current Segment Variables\n\n      SEG.SEQ - segment sequence number\n      SEG.ACK - segment acknowledgment number\n      SEG.LEN - segment length\n      SEG.WND - segment window\n      SEG.UP  - segment urgent pointer\n      SEG.PRC - segment precedence value\n\n  A connection progresses through a series of states during its\n  lifetime.  The states are:  LISTEN, SYN-SENT, SYN-RECEIVED,\n  ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK,\n  TIME-WAIT, and the fictional state CLOSED.  CLOSED is fictional\n  because it represents the state when there is no TCB, and therefore,\n  no connection.  Briefly the meanings of the states are:\n\n    LISTEN - represents waiting for a connection request from any remote\n    TCP and port.\n\n    SYN-SENT - represents waiting for a matching connection request\n    after having sent a connection request.\n\n    SYN-RECEIVED - represents waiting for a confirming connection\n    request acknowledgment after having both received and sent a\n    connection request.\n\n    ESTABLISHED - represents an open connection, data received can be\n    delivered to the user.  The normal state for the data transfer phase\n    of the connection.\n\n    FIN-WAIT-1 - represents waiting for a connection termination request\n    from the remote TCP, or an acknowledgment of the connection\n    termination request previously sent.\n\n    FIN-WAIT-2 - represents waiting for a connection termination request\n    from the remote TCP.\n\n    CLOSE-WAIT - represents waiting for a connection termination request\n    from the local user.\n\n    CLOSING - represents waiting for a connection termination request\n    acknowledgment from the remote TCP.\n\n    LAST-ACK - represents waiting for an acknowledgment of the\n    connection termination request previously sent to the remote TCP\n    (which includes an acknowledgment of its connection termination\n    request).\n\n\n\n                                                               [Page 21]\n \n                                                          September 1981\nTransmission Control Protocol\nFunctional Specification\n\n\n\n    TIME-WAIT - represents waiting for enough time to pass to be sure\n    the remote TCP received the acknowledgment of its connection\n    termination request.\n\n    CLOSED - represents no connection state at all.\n\n  A TCP connection progresses from one state to another in response to\n  events.  The events are the user calls, OPEN, SEND, RECEIVE, CLOSE,\n  ABORT, and STATUS; the incoming segments, particularly those\n  containing the SYN, ACK, RST and FIN flags; and timeouts.\n\n  The state diagram in figure 6 illustrates only state changes, together\n  with the causing events and resulting actions, but addresses neither\n  error conditions nor actions which are not connected with state\n  changes.  In a later section, more detail is offered with respect to\n  the reaction of the TCP to events.", {"entities": [[14179, 14182, "Operational Behavior"], [13325, 13328, "Operational Behavior"], [12665, 12676, "Operational Behavior"], [12099, 12102, "Operational Behavior"], [12036, 12047, "Operational Behavior"], [11729, 11732, "Operational Behavior"], [8490, 8496, "Operational Behavior"], [8444, 8450, "Operational Behavior"], [7219, 7225, "Operational Behavior"], [6974, 6980, "Operational Behavior"], [6180, 6186, "Operational Behavior"], [6129, 6135, "Operational Behavior"], [5537, 5543, "Operational Behavior"], [5112, 5118, "Operational Behavior"], [4932, 4938, "Operational Behavior"], [4151, 4157, "Operational Behavior"], [4130, 4136, "Operational Behavior"], [3908, 3914, "Operational Behavior"], [3577, 3583, "Operational Behavior"], [3516, 3522, "Operational Behavior"], [3037, 3040, "Operational Behavior"], [2797, 2803, "Operational Behavior"], [2475, 2478, "Operational Behavior"], [1952, 1963, "Network Transport"], [1893, 1899, "Network Transport"], [232, 238, "Operational Behavior"], [202, 208, "Operational Behavior"], [163, 174, "Network Transport"], [150, 156, "Network Transport"], [93, 99, "Operational Behavior"]]}]]