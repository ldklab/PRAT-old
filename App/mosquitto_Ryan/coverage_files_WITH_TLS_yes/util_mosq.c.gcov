        -:    0:Source:../lib/util_mosq.c
        -:    0:Graph:util_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <ctype.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#ifdef WIN32
        -:   24:#  include <winsock2.h>
        -:   25:#  include <aclapi.h>
        -:   26:#  include <io.h>
        -:   27:#  include <lmcons.h>
        -:   28:#else
        -:   29:#  include <sys/stat.h>
        -:   30:#endif
        -:   31:
        -:   32:#if !defined(WITH_TLS) && defined(__linux__) && defined(__GLIBC__)
        -:   33:#  if __GLIBC_PREREQ(2, 25)
        -:   34:#    include <sys/random.h>
        -:   35:#    define HAVE_GETRANDOM 1
        -:   36:#  endif
        -:   37:#endif
        -:   38:
        -:   39:#ifdef WITH_TLS
        -:   40:#  include <openssl/bn.h>
        -:   41:#  include <openssl/rand.h>
        -:   42:#endif
        -:   43:
        -:   44:#ifdef WITH_BROKER
        -:   45:#include "mosquitto_broker_internal.h"
        -:   46:#endif
        -:   47:
        -:   48:#include "mosquitto.h"
        -:   49:#include "memory_mosq.h"
        -:   50:#include "net_mosq.h"
        -:   51:#include "send_mosq.h"
        -:   52:#include "time_mosq.h"
        -:   53:#include "tls_mosq.h"
        -:   54:#include "util_mosq.h"
        -:   55:
        -:   56:#ifdef WITH_WEBSOCKETS
        -:   57:#include <libwebsockets.h>
        -:   58:#endif
        -:   59:
        -:   60:#ifdef WITH_BROKER
    #####:   61:int mosquitto__check_keepalive(struct mosquitto_db *db, struct mosquitto *mosq)
        -:   62:#else
        -:   63:int mosquitto__check_keepalive(struct mosquitto *mosq)
        -:   64:#endif
        -:   65:{
        -:   66:	time_t next_msg_out;
        -:   67:	time_t last_msg_in;
    #####:   68:	time_t now = mosquitto_time();
        -:   69:#ifndef WITH_BROKER
        -:   70:	int rc;
        -:   71:#endif
        -:   72:	int state;
        -:   73:
    #####:   74:	assert(mosq);
        -:   75:#if defined(WITH_BROKER) && defined(WITH_BRIDGE)
        -:   76:	/* Check if a lazy bridge should be timed out due to idle. */
        -:   77:	if(mosq->bridge && mosq->bridge->start_type == bst_lazy
        -:   78:				&& mosq->sock != INVALID_SOCKET
        -:   79:				&& now - mosq->next_msg_out - mosq->keepalive >= mosq->bridge->idle_timeout){
        -:   80:
        -:   81:		log__printf(NULL, MOSQ_LOG_NOTICE, "Bridge connection %s has exceeded idle timeout, disconnecting.", mosq->id);
        -:   82:		net__socket_close(db, mosq);
        -:   83:		return MOSQ_ERR_SUCCESS;
        -:   84:	}
        -:   85:#endif
        -:   86:	pthread_mutex_lock(&mosq->msgtime_mutex);
    #####:   87:	next_msg_out = mosq->next_msg_out;
    #####:   88:	last_msg_in = mosq->last_msg_in;
        -:   89:	pthread_mutex_unlock(&mosq->msgtime_mutex);
    #####:   90:	if(mosq->keepalive && mosq->sock != INVALID_SOCKET &&
    #####:   91:			(now >= next_msg_out || now - last_msg_in >= mosq->keepalive)){
        -:   92:
    #####:   93:		state = mosquitto__get_state(mosq);
    #####:   94:		if(state == mosq_cs_active && mosq->ping_t == 0){
    #####:   95:			send__pingreq(mosq);
        -:   96:			/* Reset last msg times to give the server time to send a pingresp */
        -:   97:			pthread_mutex_lock(&mosq->msgtime_mutex);
    #####:   98:			mosq->last_msg_in = now;
    #####:   99:			mosq->next_msg_out = now + mosq->keepalive;
        -:  100:			pthread_mutex_unlock(&mosq->msgtime_mutex);
    #####:  101:		}else{
        -:  102:#ifdef WITH_BROKER
    #####:  103:			net__socket_close(db, mosq);
        -:  104:#else
        -:  105:			net__socket_close(mosq);
        -:  106:			state = mosquitto__get_state(mosq);
        -:  107:			if(state == mosq_cs_disconnecting){
        -:  108:				rc = MOSQ_ERR_SUCCESS;
        -:  109:			}else{
        -:  110:				rc = MOSQ_ERR_KEEPALIVE;
        -:  111:			}
        -:  112:			pthread_mutex_lock(&mosq->callback_mutex);
        -:  113:			if(mosq->on_disconnect){
        -:  114:				mosq->in_callback = true;
        -:  115:				mosq->on_disconnect(mosq, mosq->userdata, rc);
        -:  116:				mosq->in_callback = false;
        -:  117:			}
        -:  118:			if(mosq->on_disconnect_v5){
        -:  119:				mosq->in_callback = true;
        -:  120:				mosq->on_disconnect_v5(mosq, mosq->userdata, rc, NULL);
        -:  121:				mosq->in_callback = false;
        -:  122:			}
        -:  123:			pthread_mutex_unlock(&mosq->callback_mutex);
        -:  124:
        -:  125:			return rc;
        -:  126:#endif
        -:  127:		}
    #####:  128:	}
    #####:  129:	return MOSQ_ERR_SUCCESS;
        -:  130:}
        -:  131:
    #####:  132:uint16_t mosquitto__mid_generate(struct mosquitto *mosq)
        -:  133:{
        -:  134:	/* FIXME - this would be better with atomic increment, but this is safer
        -:  135:	 * for now for a bug fix release.
        -:  136:	 *
        -:  137:	 * If this is changed to use atomic increment, callers of this function
        -:  138:	 * will have to be aware that they may receive a 0 result, which may not be
        -:  139:	 * used as a mid.
        -:  140:	 */
        -:  141:	uint16_t mid;
    #####:  142:	assert(mosq);
        -:  143:
        -:  144:	pthread_mutex_lock(&mosq->mid_mutex);
    #####:  145:	mosq->last_mid++;
    #####:  146:	if(mosq->last_mid == 0) mosq->last_mid++;
    #####:  147:	mid = mosq->last_mid;
        -:  148:	pthread_mutex_unlock(&mosq->mid_mutex);
        -:  149:
    #####:  150:	return mid;
        -:  151:}
        -:  152:
        -:  153:
        -:  154:#ifdef WITH_TLS
    #####:  155:int mosquitto__hex2bin_sha1(const char *hex, unsigned char **bin)
        -:  156:{
        -:  157:	unsigned char *sha, tmp[SHA_DIGEST_LENGTH];
        -:  158:
    #####:  159:	if(mosquitto__hex2bin(hex, tmp, SHA_DIGEST_LENGTH) != SHA_DIGEST_LENGTH){
    #####:  160:		return MOSQ_ERR_INVAL;
        -:  161:	}
        -:  162:
    #####:  163:	sha = mosquitto__malloc(SHA_DIGEST_LENGTH);
    #####:  164:	if(!sha){
    #####:  165:		return MOSQ_ERR_NOMEM;
        -:  166:	}
    #####:  167:	memcpy(sha, tmp, SHA_DIGEST_LENGTH);
    #####:  168:	*bin = sha;
    #####:  169:	return MOSQ_ERR_SUCCESS;
    #####:  170:}
        -:  171:
    #####:  172:int mosquitto__hex2bin(const char *hex, unsigned char *bin, int bin_max_len)
        -:  173:{
    #####:  174:	BIGNUM *bn = NULL;
        -:  175:	int len;
    #####:  176:	int leading_zero = 0;
    #####:  177:	int start = 0;
    #####:  178:	size_t i = 0;
        -:  179:
        -:  180:	/* Count the number of leading zero */
    #####:  181:	for(i=0; i<strlen(hex); i=i+2) {
    #####:  182:		if(strncmp(hex + i, "00", 2) == 0) {
    #####:  183:			leading_zero++;
        -:  184:			/* output leading zero to bin */
    #####:  185:			bin[start++] = 0;
    #####:  186:		}else{
    #####:  187:			break;
        -:  188:		}
    #####:  189:	}
        -:  190:
    #####:  191:	if(BN_hex2bn(&bn, hex) == 0){
    #####:  192:		if(bn) BN_free(bn);
    #####:  193:		return 0;
        -:  194:	}
    #####:  195:	if(BN_num_bytes(bn) + leading_zero > bin_max_len){
    #####:  196:		BN_free(bn);
    #####:  197:		return 0;
        -:  198:	}
        -:  199:
    #####:  200:	len = BN_bn2bin(bn, bin + leading_zero);
    #####:  201:	BN_free(bn);
    #####:  202:	return len + leading_zero;
    #####:  203:}
        -:  204:#endif
        -:  205:
    #####:  206:void util__increment_receive_quota(struct mosquitto *mosq)
        -:  207:{
    #####:  208:	if(mosq->msgs_in.inflight_quota < mosq->msgs_in.inflight_maximum){
    #####:  209:		mosq->msgs_in.inflight_quota++;
    #####:  210:	}
    #####:  211:}
        -:  212:
    #####:  213:void util__increment_send_quota(struct mosquitto *mosq)
        -:  214:{
    #####:  215:	if(mosq->msgs_out.inflight_quota < mosq->msgs_out.inflight_maximum){
    #####:  216:		mosq->msgs_out.inflight_quota++;
    #####:  217:	}
    #####:  218:}
        -:  219:
        -:  220:
    #####:  221:void util__decrement_receive_quota(struct mosquitto *mosq)
        -:  222:{
    #####:  223:	if(mosq->msgs_in.inflight_quota > 0){
    #####:  224:		mosq->msgs_in.inflight_quota--;
    #####:  225:	}
    #####:  226:}
        -:  227:
    #####:  228:void util__decrement_send_quota(struct mosquitto *mosq)
        -:  229:{
    #####:  230:	if(mosq->msgs_out.inflight_quota > 0){
    #####:  231:		mosq->msgs_out.inflight_quota--;
    #####:  232:	}
    #####:  233:}
        -:  234:
        -:  235:
    #####:  236:int util__random_bytes(void *bytes, int count)
        -:  237:{
    #####:  238:	int rc = MOSQ_ERR_UNKNOWN;
        -:  239:
        -:  240:#ifdef WITH_TLS
    #####:  241:	if(RAND_bytes(bytes, count) == 1){
    #####:  242:		rc = MOSQ_ERR_SUCCESS;
    #####:  243:	}
        -:  244:#elif defined(HAVE_GETRANDOM)
        -:  245:	if(getrandom(bytes, count, 0) == count){
        -:  246:		rc = MOSQ_ERR_SUCCESS;
        -:  247:	}
        -:  248:#elif defined(WIN32)
        -:  249:	HCRYPTPROV provider;
        -:  250:
        -:  251:	if(!CryptAcquireContext(&provider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)){
        -:  252:		return MOSQ_ERR_UNKNOWN;
        -:  253:	}
        -:  254:
        -:  255:	if(CryptGenRandom(provider, count, bytes)){
        -:  256:		rc = MOSQ_ERR_SUCCESS;
        -:  257:	}
        -:  258:
        -:  259:	CryptReleaseContext(provider, 0);
        -:  260:#else
        -:  261:	int i;
        -:  262:
        -:  263:	for(i=0; i<count; i++){
        -:  264:		((uint8_t *)bytes)[i] = (uint8_t )(random()&0xFF);
        -:  265:	}
        -:  266:	rc = MOSQ_ERR_SUCCESS;
        -:  267:#endif
    #####:  268:	return rc;
        -:  269:}
        -:  270:
        -:  271:
    #####:  272:int mosquitto__set_state(struct mosquitto *mosq, enum mosquitto_client_state state)
        -:  273:{
        -:  274:	pthread_mutex_lock(&mosq->state_mutex);
        -:  275:#ifdef WITH_BROKER
    #####:  276:	if(mosq->state != mosq_cs_disused)
        -:  277:#endif
        -:  278:	{
    #####:  279:		mosq->state = state;
        -:  280:		#ifdef WITH_RPW_DBG
        -:  281:		log__printf(NULL, MOSQ_LOG_NOTICE, "State: %u", state);
        -:  282:		#endif
    #####:  283:	}
        -:  284:	pthread_mutex_unlock(&mosq->state_mutex);
        -:  285:
    #####:  286:	return MOSQ_ERR_SUCCESS;
        -:  287:}
        -:  288:
    #####:  289:enum mosquitto_client_state mosquitto__get_state(struct mosquitto *mosq)
        -:  290:{
        -:  291:	enum mosquitto_client_state state;
        -:  292:
        -:  293:	pthread_mutex_lock(&mosq->state_mutex);
    #####:  294:	state = mosq->state;
        -:  295:	pthread_mutex_unlock(&mosq->state_mutex);
        -:  296:
    #####:  297:	return state;
        -:  298:}
