        -:    0:Source:../lib/handle_pubackcomp.c
        -:    0:Graph:handle_pubackcomp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <stdio.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#ifdef WITH_BROKER
        -:   24:#  include "mosquitto_broker_internal.h"
        -:   25:#endif
        -:   26:
        -:   27:#include "mosquitto.h"
        -:   28:#include "logging_mosq.h"
        -:   29:#include "memory_mosq.h"
        -:   30:#include "messages_mosq.h"
        -:   31:#include "mqtt_protocol.h"
        -:   32:#include "net_mosq.h"
        -:   33:#include "packet_mosq.h"
        -:   34:#include "read_handle.h"
        -:   35:#include "send_mosq.h"
        -:   36:#include "util_mosq.h"
        -:   37:
        -:   38:
        -:   39:#ifdef WITH_BROKER
    #####:   40:int handle__pubackcomp(struct mosquitto_db *db, struct mosquitto *mosq, const char *type)
        -:   41:#else
        -:   42:int handle__pubackcomp(struct mosquitto *mosq, const char *type)
        -:   43:#endif
        -:   44:{
    #####:   45:	uint8_t reason_code = 0;
        -:   46:	uint16_t mid;
        -:   47:	int rc;
    #####:   48:	mosquitto_property *properties = NULL;
        -:   49:	int qos;
        -:   50:	int state;
        -:   51:
    #####:   52:	assert(mosq);
        -:   53:
    #####:   54:	state = mosquitto__get_state(mosq);
    #####:   55:	if(state != mosq_cs_active){
    #####:   56:		return MOSQ_ERR_PROTOCOL;
        -:   57:	}
        -:   58:
        -:   59:	pthread_mutex_lock(&mosq->msgs_out.mutex);
    #####:   60:	util__increment_send_quota(mosq);
        -:   61:	pthread_mutex_unlock(&mosq->msgs_out.mutex);
        -:   62:
    #####:   63:	rc = packet__read_uint16(&mosq->in_packet, &mid);
    #####:   64:	if(rc) return rc;
    #####:   65:	qos = type[3] == 'A'?1:2; /* pubAck or pubComp */
    #####:   66:	if(mid == 0) return MOSQ_ERR_PROTOCOL;
        -:   67:
    #####:   68:	if(mosq->protocol == mosq_p_mqtt5 && mosq->in_packet.remaining_length > 2){
    #####:   69:		rc = packet__read_byte(&mosq->in_packet, &reason_code);
    #####:   70:		if(rc) return rc;
        -:   71:
    #####:   72:		if(mosq->in_packet.remaining_length > 3){
    #####:   73:			rc = property__read_all(CMD_PUBACK, &mosq->in_packet, &properties);
    #####:   74:			if(rc) return rc;
    #####:   75:		}
    #####:   76:	}
        -:   77:
        -:   78:#ifdef WITH_BROKER
    #####:   79:	log__printf(NULL, MOSQ_LOG_DEBUG, "Received %s from %s (Mid: %d, RC:%d)", type, mosq->id, mid, reason_code);
        -:   80:
        -:   81:	/* Immediately free, we don't do anything with Reason String or User Property at the moment */
    #####:   82:	mosquitto_property_free_all(&properties);
        -:   83:
    #####:   84:	rc = db__message_delete_outgoing(db, mosq, mid, mosq_ms_wait_for_pubcomp, qos);
    #####:   85:	if(rc == MOSQ_ERR_NOT_FOUND){
    #####:   86:		log__printf(mosq, MOSQ_LOG_WARNING, "Warning: Received %s from %s for an unknown packet identifier %d.", type, mosq->id, mid);
    #####:   87:		return MOSQ_ERR_SUCCESS;
        -:   88:	}else{
    #####:   89:		return rc;
        -:   90:	}
        -:   91:#else
        -:   92:	log__printf(mosq, MOSQ_LOG_DEBUG, "Client %s received %s (Mid: %d, RC:%d)", mosq->id, type, mid, reason_code);
        -:   93:
        -:   94:	rc = message__delete(mosq, mid, mosq_md_out, qos);
        -:   95:	if(rc){
        -:   96:		return rc;
        -:   97:	}else{
        -:   98:		/* Only inform the client the message has been sent once. */
        -:   99:		pthread_mutex_lock(&mosq->callback_mutex);
        -:  100:		if(mosq->on_publish){
        -:  101:			mosq->in_callback = true;
        -:  102:			mosq->on_publish(mosq, mosq->userdata, mid);
        -:  103:			mosq->in_callback = false;
        -:  104:		}
        -:  105:		if(mosq->on_publish_v5){
        -:  106:			mosq->in_callback = true;
        -:  107:			mosq->on_publish_v5(mosq, mosq->userdata, mid, reason_code, properties);
        -:  108:			mosq->in_callback = false;
        -:  109:		}
        -:  110:		pthread_mutex_unlock(&mosq->callback_mutex);
        -:  111:		mosquitto_property_free_all(&properties);
        -:  112:	}
        -:  113:	pthread_mutex_lock(&mosq->msgs_out.mutex);
        -:  114:	message__release_to_inflight(mosq, mosq_md_out);
        -:  115:	pthread_mutex_unlock(&mosq->msgs_out.mutex);
        -:  116:
        -:  117:	return MOSQ_ERR_SUCCESS;
        -:  118:#endif
    #####:  119:}
        -:  120:
