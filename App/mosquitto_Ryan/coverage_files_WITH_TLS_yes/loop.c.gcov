        -:    0:Source:loop.c
        -:    0:Graph:loop.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:   Tatsuzo Osawa - Add epoll.
        -:   16:*/
        -:   17:
        -:   18:#include "config.h"
        -:   19:
        -:   20:#ifndef WIN32
        -:   21:#  define _GNU_SOURCE
        -:   22:#endif
        -:   23:
        -:   24:#include <assert.h>
        -:   25:#ifndef WIN32
        -:   26:#ifdef WITH_EPOLL
        -:   27:#include <sys/epoll.h>
        -:   28:#define MAX_EVENTS 1000
        -:   29:#endif
        -:   30:#include <poll.h>
        -:   31:#include <unistd.h>
        -:   32:#else
        -:   33:#include <process.h>
        -:   34:#include <winsock2.h>
        -:   35:#include <ws2tcpip.h>
        -:   36:#endif
        -:   37:
        -:   38:#include <errno.h>
        -:   39:#include <signal.h>
        -:   40:#include <stdio.h>
        -:   41:#include <string.h>
        -:   42:#ifndef WIN32
        -:   43:#  include <sys/socket.h>
        -:   44:#endif
        -:   45:#include <time.h>
        -:   46:
        -:   47:#ifdef WITH_WEBSOCKETS
        -:   48:#  include <libwebsockets.h>
        -:   49:#endif
        -:   50:
        -:   51:#include "mosquitto_broker_internal.h"
        -:   52:#include "memory_mosq.h"
        -:   53:#include "packet_mosq.h"
        -:   54:#include "send_mosq.h"
        -:   55:#include "sys_tree.h"
        -:   56:#include "time_mosq.h"
        -:   57:#include "util_mosq.h"
        -:   58:
        -:   59:extern bool flag_reload;
        -:   60:#ifdef WITH_PERSISTENCE
        -:   61:extern bool flag_db_backup;
        -:   62:#endif
        -:   63:extern bool flag_tree_print;
        -:   64:extern int run;
        -:   65:
        -:   66:#ifdef WITH_RPW_DBG
        -:   67:int tc = 0;
        -:   68:#endif
        -:   69:
        -:   70:#ifdef WITH_EPOLL
        -:   71:static void loop_handle_reads_writes(struct mosquitto_db *db, mosq_sock_t sock, uint32_t events);
        -:   72:#else
        -:   73:static void loop_handle_reads_writes(struct mosquitto_db *db, struct pollfd *pollfds);
        -:   74:#endif
        -:   75:
        -:   76:#ifdef WITH_WEBSOCKETS
        -:   77:static void temp__expire_websockets_clients(struct mosquitto_db *db)
        -:   78:{
        -:   79:	struct mosquitto *context, *ctxt_tmp;
        -:   80:	static time_t last_check = 0;
        -:   81:	time_t now = mosquitto_time();
        -:   82:	char *id;
        -:   83:
        -:   84:	if(now - last_check > 60){
        -:   85:		HASH_ITER(hh_id, db->contexts_by_id, context, ctxt_tmp){
        -:   86:			if(context->wsi && context->sock != INVALID_SOCKET){
        -:   87:				if(context->keepalive && now - context->last_msg_in > (time_t)(context->keepalive)*3/2){
        -:   88:					if(db->config->connection_messages == true){
        -:   89:						if(context->id){
        -:   90:							id = context->id;
        -:   91:						}else{
        -:   92:							id = "<unknown>";
        -:   93:						}
        -:   94:						if(db->config->connection_messages == true){
        -:   95:							log__printf(NULL, MOSQ_LOG_NOTICE, "Client %s has exceeded timeout, disconnecting.", id);
        -:   96:						}
        -:   97:					}
        -:   98:					/* Client has exceeded keepalive*1.5 */
        -:   99:					do_disconnect(db, context, MOSQ_ERR_KEEPALIVE);
        -:  100:				}
        -:  101:			}
        -:  102:		}
        -:  103:		last_check = mosquitto_time();
        -:  104:	}
        -:  105:}
        -:  106:#endif
        -:  107:
        -:  108:#if defined(WITH_WEBSOCKETS) && LWS_LIBRARY_VERSION_NUMBER == 3002000
        -:  109:void lws__sul_callback(struct lws_sorted_usec_list *l)
        -:  110:{
        -:  111:}
        -:  112:
        -:  113:static struct lws_sorted_usec_list sul;
        -:  114:#endif
        -:  115:
    #####:  116:int mosquitto_main_loop(struct mosquitto_db *db, mosq_sock_t *listensock, int listensock_count)
        -:  117:{
        -:  118:#ifdef WITH_SYS_TREE
        -:  119:	time_t start_time = mosquitto_time();
        -:  120:#endif
        -:  121:#ifdef WITH_PERSISTENCE
        -:  122:	time_t last_backup = mosquitto_time();
        -:  123:#endif
    #####:  124:	time_t now = 0;
        -:  125:	int time_count;
        -:  126:	int fdcount;
        -:  127:	struct mosquitto *context, *ctxt_tmp;
        -:  128:#ifndef WIN32
        -:  129:	sigset_t sigblock, origsig;
        -:  130:#endif
        -:  131:	int i;
        -:  132:#ifdef WITH_EPOLL
        -:  133:	int j;
        -:  134:	struct epoll_event ev, events[MAX_EVENTS];
        -:  135:#else
    #####:  136:	struct pollfd *pollfds = NULL;
        -:  137:	int pollfd_index;
        -:  138:	int pollfd_max;
        -:  139:#endif
        -:  140:#ifdef WITH_BRIDGE
        -:  141:	int rc;
        -:  142:	int err;
        -:  143:	socklen_t len;
        -:  144:#endif
        -:  145:
        -:  146:
        -:  147:#if defined(WITH_WEBSOCKETS) && LWS_LIBRARY_VERSION_NUMBER == 3002000
        -:  148:	memset(&sul, 0, sizeof(struct lws_sorted_usec_list));
        -:  149:#endif
        -:  150:
        -:  151:#ifndef WIN32
    #####:  152:	sigemptyset(&sigblock);
    #####:  153:	sigaddset(&sigblock, SIGINT);
    #####:  154:	sigaddset(&sigblock, SIGTERM);
    #####:  155:	sigaddset(&sigblock, SIGUSR1);
    #####:  156:	sigaddset(&sigblock, SIGUSR2);
    #####:  157:	sigaddset(&sigblock, SIGHUP);
        -:  158:#endif
        -:  159:
        -:  160:#ifndef WITH_EPOLL
        -:  161:#ifdef WIN32
        -:  162:	pollfd_max = _getmaxstdio();
        -:  163:#else
    #####:  164:	pollfd_max = sysconf(_SC_OPEN_MAX);
        -:  165:#endif
        -:  166:
    #####:  167:	pollfds = mosquitto__malloc(sizeof(struct pollfd)*pollfd_max);
    #####:  168:	if(!pollfds){
    #####:  169:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
    #####:  170:		return MOSQ_ERR_NOMEM;
        -:  171:	}
        -:  172:#endif
        -:  173:
        -:  174:#ifdef WITH_EPOLL
        -:  175:	db->epollfd = 0;
        -:  176:	if ((db->epollfd = epoll_create(MAX_EVENTS)) == -1) {
        -:  177:		log__printf(NULL, MOSQ_LOG_ERR, "Error in epoll creating: %s", strerror(errno));
        -:  178:		return MOSQ_ERR_UNKNOWN;
        -:  179:	}
        -:  180:	memset(&ev, 0, sizeof(struct epoll_event));
        -:  181:	memset(&events, 0, sizeof(struct epoll_event)*MAX_EVENTS);
        -:  182:	for(i=0; i<listensock_count; i++){
        -:  183:		ev.data.fd = listensock[i];
        -:  184:		ev.events = EPOLLIN;
        -:  185:		if (epoll_ctl(db->epollfd, EPOLL_CTL_ADD, listensock[i], &ev) == -1) {
        -:  186:			log__printf(NULL, MOSQ_LOG_ERR, "Error in epoll initial registering: %s", strerror(errno));
        -:  187:			(void)close(db->epollfd);
        -:  188:			db->epollfd = 0;
        -:  189:			return MOSQ_ERR_UNKNOWN;
        -:  190:		}
        -:  191:	}
        -:  192:#ifdef WITH_BRIDGE
        -:  193:	HASH_ITER(hh_sock, db->contexts_by_sock, context, ctxt_tmp){
        -:  194:		if(context->bridge){
        -:  195:			ev.data.fd = context->sock;
        -:  196:			ev.events = EPOLLIN;
        -:  197:			context->events = EPOLLIN;
        -:  198:			if (epoll_ctl(db->epollfd, EPOLL_CTL_ADD, context->sock, &ev) == -1) {
        -:  199:				log__printf(NULL, MOSQ_LOG_ERR, "Error in epoll initial registering bridge: %s", strerror(errno));
        -:  200:				(void)close(db->epollfd);
        -:  201:				db->epollfd = 0;
        -:  202:				return MOSQ_ERR_UNKNOWN;
        -:  203:			}
        -:  204:		}
        -:  205:	}
        -:  206:#endif
        -:  207:#endif
        -:  208:
    #####:  209:	while(run){
        -:  210:#ifdef WITH_RPW_DBG
        -:  211:		if (tc > 20) break;
        -:  212:#endif
    #####:  213:		context__free_disused(db);
        -:  214:#ifdef WITH_SYS_TREE
        -:  215:		if(db->config->sys_interval > 0){
        -:  216:			sys_tree__update(db, db->config->sys_interval, start_time);
        -:  217:		}
        -:  218:#endif
        -:  219:
        -:  220:#ifndef WITH_EPOLL
    #####:  221:		memset(pollfds, -1, sizeof(struct pollfd)*pollfd_max);
    #####:  222:		pollfd_index = 0;
    #####:  223:		for(i=0; i<listensock_count; i++){
    #####:  224:			pollfds[pollfd_index].fd = listensock[i];
    #####:  225:			pollfds[pollfd_index].events = POLLIN;
    #####:  226:			pollfds[pollfd_index].revents = 0;
    #####:  227:			pollfd_index++;
    #####:  228:		}
        -:  229:#endif
        -:  230:
    #####:  231:		time_count = 0;
    #####:  232:		HASH_ITER(hh_sock, db->contexts_by_sock, context, ctxt_tmp){
    #####:  233:			if(time_count > 0){
    #####:  234:				time_count--;
    #####:  235:			}else{
    #####:  236:				time_count = 1000;
    #####:  237:				now = mosquitto_time();
        -:  238:			}
    #####:  239:			context->pollfd_index = -1;
        -:  240:
    #####:  241:			if(context->sock != INVALID_SOCKET){
        -:  242:#ifdef WITH_BRIDGE
        -:  243:				if(context->bridge){
        -:  244:					mosquitto__check_keepalive(db, context);
        -:  245:					if(context->bridge->round_robin == false
        -:  246:							&& context->bridge->cur_address != 0
        -:  247:							&& context->bridge->primary_retry
        -:  248:							&& now > context->bridge->primary_retry){
        -:  249:
        -:  250:						if(context->bridge->primary_retry_sock == INVALID_SOCKET){
        -:  251:							rc = net__try_connect(context->bridge->addresses[0].address,
        -:  252:									context->bridge->addresses[0].port,
        -:  253:									&context->bridge->primary_retry_sock, NULL, false);
        -:  254:
        -:  255:							if(rc == 0){
        -:  256:								COMPAT_CLOSE(context->bridge->primary_retry_sock);
        -:  257:								context->bridge->primary_retry_sock = INVALID_SOCKET;
        -:  258:								context->bridge->primary_retry = 0;
        -:  259:								net__socket_close(db, context);
        -:  260:								context->bridge->cur_address = 0;
        -:  261:							}
        -:  262:						}else{
        -:  263:							len = sizeof(int);
        -:  264:							if(!getsockopt(context->bridge->primary_retry_sock, SOL_SOCKET, SO_ERROR, (char *)&err, &len)){
        -:  265:								if(err == 0){
        -:  266:									COMPAT_CLOSE(context->bridge->primary_retry_sock);
        -:  267:									context->bridge->primary_retry_sock = INVALID_SOCKET;
        -:  268:									context->bridge->primary_retry = 0;
        -:  269:									net__socket_close(db, context);
        -:  270:									context->bridge->cur_address = context->bridge->address_count-1;
        -:  271:								}else{
        -:  272:									COMPAT_CLOSE(context->bridge->primary_retry_sock);
        -:  273:									context->bridge->primary_retry_sock = INVALID_SOCKET;
        -:  274:									context->bridge->primary_retry = now+5;
        -:  275:								}
        -:  276:							}else{
        -:  277:								COMPAT_CLOSE(context->bridge->primary_retry_sock);
        -:  278:								context->bridge->primary_retry_sock = INVALID_SOCKET;
        -:  279:								context->bridge->primary_retry = now+5;
        -:  280:							}
        -:  281:						}
        -:  282:					}
        -:  283:				}
        -:  284:#endif
        -:  285:
        -:  286:				/* Local bridges never time out in this fashion. */
    #####:  287:				if(!(context->keepalive)
    #####:  288:						|| context->bridge
    #####:  289:						|| now - context->last_msg_in <= (time_t)(context->keepalive)*3/2){
        -:  290:
    #####:  291:					if(db__message_write(db, context) == MOSQ_ERR_SUCCESS){
        -:  292:#ifdef WITH_EPOLL
        -:  293:						if(context->current_out_packet || context->state == mosq_cs_connect_pending || context->ws_want_write){
        -:  294:							if(!(context->events & EPOLLOUT)) {
        -:  295:								ev.data.fd = context->sock;
        -:  296:								ev.events = EPOLLIN | EPOLLOUT;
        -:  297:								if(epoll_ctl(db->epollfd, EPOLL_CTL_ADD, context->sock, &ev) == -1) {
        -:  298:									if((errno != EEXIST)||(epoll_ctl(db->epollfd, EPOLL_CTL_MOD, context->sock, &ev) == -1)) {
        -:  299:											log__printf(NULL, MOSQ_LOG_DEBUG, "Error in epoll re-registering to EPOLLOUT: %s", strerror(errno));
        -:  300:									}
        -:  301:								}
        -:  302:								context->events = EPOLLIN | EPOLLOUT;
        -:  303:							}
        -:  304:							context->ws_want_write = false;
        -:  305:						}
        -:  306:						else{
        -:  307:							if(context->events & EPOLLOUT) {
        -:  308:								ev.data.fd = context->sock;
        -:  309:								ev.events = EPOLLIN;
        -:  310:								if(epoll_ctl(db->epollfd, EPOLL_CTL_ADD, context->sock, &ev) == -1) {
        -:  311:									if((errno != EEXIST)||(epoll_ctl(db->epollfd, EPOLL_CTL_MOD, context->sock, &ev) == -1)) {
        -:  312:											log__printf(NULL, MOSQ_LOG_DEBUG, "Error in epoll re-registering to EPOLLIN: %s", strerror(errno));
        -:  313:									}
        -:  314:								}
        -:  315:								context->events = EPOLLIN;
        -:  316:							}
        -:  317:						}
        -:  318:#else
    #####:  319:						pollfds[pollfd_index].fd = context->sock;
    #####:  320:						pollfds[pollfd_index].events = POLLIN;
    #####:  321:						pollfds[pollfd_index].revents = 0;
    #####:  322:						if(context->current_out_packet || context->state == mosq_cs_connect_pending || context->ws_want_write){
    #####:  323:							pollfds[pollfd_index].events |= POLLOUT;
    #####:  324:							context->ws_want_write = false;
    #####:  325:						}
    #####:  326:						context->pollfd_index = pollfd_index;
    #####:  327:						pollfd_index++;
        -:  328:#endif
    #####:  329:					}else{
    #####:  330:						do_disconnect(db, context, MOSQ_ERR_CONN_LOST);
        -:  331:					}
    #####:  332:				}else{
        -:  333:					/* Client has exceeded keepalive*1.5 */
    #####:  334:					do_disconnect(db, context, MOSQ_ERR_KEEPALIVE);
        -:  335:				}
    #####:  336:			}
    #####:  337:		}
        -:  338:
        -:  339:#ifdef WITH_BRIDGE
        -:  340:		time_count = 0;
        -:  341:		for(i=0; i<db->bridge_count; i++){
        -:  342:			if(!db->bridges[i]) continue;
        -:  343:
        -:  344:			context = db->bridges[i];
        -:  345:
        -:  346:			if(context->sock == INVALID_SOCKET){
        -:  347:				if(time_count > 0){
        -:  348:					time_count--;
        -:  349:				}else{
        -:  350:					time_count = 1000;
        -:  351:					now = mosquitto_time();
        -:  352:				}
        -:  353:				/* Want to try to restart the bridge connection */
        -:  354:				if(!context->bridge->restart_t){
        -:  355:					context->bridge->restart_t = now+context->bridge->restart_timeout;
        -:  356:					context->bridge->cur_address++;
        -:  357:					if(context->bridge->cur_address == context->bridge->address_count){
        -:  358:						context->bridge->cur_address = 0;
        -:  359:					}
        -:  360:				}else{
        -:  361:					if((context->bridge->start_type == bst_lazy && context->bridge->lazy_reconnect)
        -:  362:							|| (context->bridge->start_type == bst_automatic && now > context->bridge->restart_t)){
        -:  363:
        -:  364:#if defined(__GLIBC__) && defined(WITH_ADNS)
        -:  365:						if(context->adns){
        -:  366:							/* Connection attempted, waiting on DNS lookup */
        -:  367:							rc = gai_error(context->adns);
        -:  368:							if(rc == EAI_INPROGRESS){
        -:  369:								/* Just keep on waiting */
        -:  370:							}else if(rc == 0){
        -:  371:								rc = bridge__connect_step2(db, context);
        -:  372:								if(rc == MOSQ_ERR_SUCCESS){
        -:  373:#ifdef WITH_EPOLL
        -:  374:									ev.data.fd = context->sock;
        -:  375:									ev.events = EPOLLIN;
        -:  376:									if(context->current_out_packet){
        -:  377:										ev.events |= EPOLLOUT;
        -:  378:									}
        -:  379:									if(epoll_ctl(db->epollfd, EPOLL_CTL_ADD, context->sock, &ev) == -1) {
        -:  380:										if((errno != EEXIST)||(epoll_ctl(db->epollfd, EPOLL_CTL_MOD, context->sock, &ev) == -1)) {
        -:  381:												log__printf(NULL, MOSQ_LOG_DEBUG, "Error in epoll re-registering bridge: %s", strerror(errno));
        -:  382:										}
        -:  383:									}else{
        -:  384:										context->events = ev.events;
        -:  385:									}
        -:  386:#else
        -:  387:									pollfds[pollfd_index].fd = context->sock;
        -:  388:									pollfds[pollfd_index].events = POLLIN;
        -:  389:									pollfds[pollfd_index].revents = 0;
        -:  390:									if(context->current_out_packet){
        -:  391:										pollfds[pollfd_index].events |= POLLOUT;
        -:  392:									}
        -:  393:									context->pollfd_index = pollfd_index;
        -:  394:									pollfd_index++;
        -:  395:#endif
        -:  396:								}else if(rc == MOSQ_ERR_CONN_PENDING){
        -:  397:									context->bridge->restart_t = 0;
        -:  398:								}else{
        -:  399:									context->bridge->cur_address++;
        -:  400:									if(context->bridge->cur_address == context->bridge->address_count){
        -:  401:										context->bridge->cur_address = 0;
        -:  402:									}
        -:  403:									context->bridge->restart_t = 0;
        -:  404:								}
        -:  405:							}else{
        -:  406:								/* Need to retry */
        -:  407:								if(context->adns->ar_result){
        -:  408:									freeaddrinfo(context->adns->ar_result);
        -:  409:								}
        -:  410:								mosquitto__free(context->adns);
        -:  411:								context->adns = NULL;
        -:  412:								context->bridge->restart_t = 0;
        -:  413:							}
        -:  414:						}else{
        -:  415:#ifdef WITH_EPOLL
        -:  416:							/* clean any events triggered in previous connection */
        -:  417:							context->events = 0;
        -:  418:#endif
        -:  419:							rc = bridge__connect_step1(db, context);
        -:  420:							if(rc){
        -:  421:								context->bridge->cur_address++;
        -:  422:								if(context->bridge->cur_address == context->bridge->address_count){
        -:  423:									context->bridge->cur_address = 0;
        -:  424:								}
        -:  425:							}else{
        -:  426:								/* Short wait for ADNS lookup */
        -:  427:								context->bridge->restart_t = 1;
        -:  428:							}
        -:  429:						}
        -:  430:#else
        -:  431:						{
        -:  432:							rc = bridge__connect(db, context);
        -:  433:							context->bridge->restart_t = 0;
        -:  434:							if(rc == MOSQ_ERR_SUCCESS){
        -:  435:								if(context->bridge->round_robin == false && context->bridge->cur_address != 0){
        -:  436:									context->bridge->primary_retry = now + 5;
        -:  437:								}
        -:  438:#ifdef WITH_EPOLL
        -:  439:								ev.data.fd = context->sock;
        -:  440:								ev.events = EPOLLIN;
        -:  441:								if(context->current_out_packet){
        -:  442:									ev.events |= EPOLLOUT;
        -:  443:								}
        -:  444:								if(epoll_ctl(db->epollfd, EPOLL_CTL_ADD, context->sock, &ev) == -1) {
        -:  445:									if((errno != EEXIST)||(epoll_ctl(db->epollfd, EPOLL_CTL_MOD, context->sock, &ev) == -1)) {
        -:  446:											log__printf(NULL, MOSQ_LOG_DEBUG, "Error in epoll re-registering bridge: %s", strerror(errno));
        -:  447:									}
        -:  448:								}else{
        -:  449:									context->events = ev.events;
        -:  450:								}
        -:  451:#else
        -:  452:								pollfds[pollfd_index].fd = context->sock;
        -:  453:								pollfds[pollfd_index].events = POLLIN;
        -:  454:								pollfds[pollfd_index].revents = 0;
        -:  455:								if(context->current_out_packet){
        -:  456:									pollfds[pollfd_index].events |= POLLOUT;
        -:  457:								}
        -:  458:								context->pollfd_index = pollfd_index;
        -:  459:								pollfd_index++;
        -:  460:#endif
        -:  461:							}else{
        -:  462:								context->bridge->cur_address++;
        -:  463:								if(context->bridge->cur_address == context->bridge->address_count){
        -:  464:									context->bridge->cur_address = 0;
        -:  465:								}
        -:  466:							}
        -:  467:						}
        -:  468:#endif
        -:  469:					}
        -:  470:				}
        -:  471:			}
        -:  472:		}
        -:  473:#endif
        -:  474:
        -:  475:#ifndef WIN32
    #####:  476:		sigprocmask(SIG_SETMASK, &sigblock, &origsig);
        -:  477:#ifdef WITH_EPOLL
        -:  478:		fdcount = epoll_wait(db->epollfd, events, MAX_EVENTS, 100);
        -:  479:#else
    #####:  480:		fdcount = poll(pollfds, pollfd_index, 100);
        -:  481:#endif
    #####:  482:		sigprocmask(SIG_SETMASK, &origsig, NULL);
        -:  483:#else
        -:  484:		fdcount = WSAPoll(pollfds, pollfd_index, 100);
        -:  485:#endif
        -:  486:#ifdef WITH_EPOLL
        -:  487:		switch(fdcount){
        -:  488:		case -1:
        -:  489:			if(errno != EINTR){
        -:  490:				log__printf(NULL, MOSQ_LOG_ERR, "Error in epoll waiting: %s.", strerror(errno));
        -:  491:			}
        -:  492:			break;
        -:  493:		case 0:
        -:  494:			break;
        -:  495:		default:
        -:  496:			for(i=0; i<fdcount; i++){
        -:  497:				for(j=0; j<listensock_count; j++){
        -:  498:					if (events[i].data.fd == listensock[j]) {
        -:  499:						if (events[i].events & (EPOLLIN | EPOLLPRI)){
        -:  500:							while((ev.data.fd = net__socket_accept(db, listensock[j])) != -1){
        -:  501:								ev.events = EPOLLIN;
        -:  502:								if (epoll_ctl(db->epollfd, EPOLL_CTL_ADD, ev.data.fd, &ev) == -1) {
        -:  503:									log__printf(NULL, MOSQ_LOG_ERR, "Error in epoll accepting: %s", strerror(errno));
        -:  504:								}
        -:  505:								context = NULL;
        -:  506:								HASH_FIND(hh_sock, db->contexts_by_sock, &(ev.data.fd), sizeof(mosq_sock_t), context);
        -:  507:								if(context){
        -:  508:									context->events = EPOLLIN;
        -:  509:								}else{
        -:  510:									log__printf(NULL, MOSQ_LOG_ERR, "Error in epoll accepting: no context");
        -:  511:								}
        -:  512:							}
        -:  513:						}
        -:  514:						break;
        -:  515:					}
        -:  516:				}
        -:  517:				if (j == listensock_count) {
        -:  518:					loop_handle_reads_writes(db, events[i].data.fd, events[i].events);
        -:  519:				}
        -:  520:			}
        -:  521:		}
        -:  522:#else
    #####:  523:		if(fdcount == -1){
        -:  524:#  ifdef WIN32
        -:  525:			if(pollfd_index == 0 && WSAGetLastError() == WSAEINVAL){
        -:  526:				/* WSAPoll() immediately returns an error if it is not given
        -:  527:				 * any sockets to wait on. This can happen if we only have
        -:  528:				 * websockets listeners. Sleep a little to prevent a busy loop.
        -:  529:				 */
        -:  530:				Sleep(10);
        -:  531:			}else
        -:  532:#  endif
        -:  533:			{
    #####:  534:				log__printf(NULL, MOSQ_LOG_ERR, "Error in poll: %s.", strerror(errno));
        -:  535:			}
    #####:  536:		}else{
    #####:  537:			loop_handle_reads_writes(db, pollfds);
        -:  538:
    #####:  539:			for(i=0; i<listensock_count; i++){
    #####:  540:				if(pollfds[i].revents & (POLLIN | POLLPRI)){
    #####:  541:					while(net__socket_accept(db, listensock[i]) != -1){
        -:  542:					}
    #####:  543:				}
    #####:  544:			}
        -:  545:		}
        -:  546:#endif
    #####:  547:		now = time(NULL);
    #####:  548:		session_expiry__check(db, now);
    #####:  549:		will_delay__check(db, now);
        -:  550:#ifdef WITH_PERSISTENCE
        -:  551:		if(db->config->persistence && db->config->autosave_interval){
        -:  552:			if(db->config->autosave_on_changes){
        -:  553:				if(db->persistence_changes >= db->config->autosave_interval){
        -:  554:					persist__backup(db, false);
        -:  555:					db->persistence_changes = 0;
        -:  556:				}
        -:  557:			}else{
        -:  558:				if(last_backup + db->config->autosave_interval < mosquitto_time()){
        -:  559:					persist__backup(db, false);
        -:  560:					last_backup = mosquitto_time();
        -:  561:				}
        -:  562:			}
        -:  563:		}
        -:  564:#endif
        -:  565:
        -:  566:#ifdef WITH_PERSISTENCE
        -:  567:		if(flag_db_backup){
        -:  568:			persist__backup(db, false);
        -:  569:			flag_db_backup = false;
        -:  570:		}
        -:  571:#endif
    #####:  572:		if(flag_reload){
    #####:  573:			log__printf(NULL, MOSQ_LOG_INFO, "Reloading config.");
    #####:  574:			config__read(db, db->config, true);
    #####:  575:			mosquitto_security_cleanup(db, true);
    #####:  576:			mosquitto_security_init(db, true);
    #####:  577:			mosquitto_security_apply(db);
    #####:  578:			log__close(db->config);
    #####:  579:			log__init(db->config);
    #####:  580:			flag_reload = false;
    #####:  581:		}
    #####:  582:		if(flag_tree_print){
    #####:  583:			sub__tree_print(db->subs, 0);
    #####:  584:			flag_tree_print = false;
    #####:  585:		}
        -:  586:#ifdef WITH_WEBSOCKETS
        -:  587:		for(i=0; i<db->config->listener_count; i++){
        -:  588:			/* Extremely hacky, should be using the lws provided external poll
        -:  589:			 * interface, but their interface has changed recently and ours
        -:  590:			 * will soon, so for now websockets clients are second class
        -:  591:			 * citizens. */
        -:  592:			if(db->config->listeners[i].ws_context){
        -:  593:#if LWS_LIBRARY_VERSION_NUMBER > 3002000
        -:  594:				libwebsocket_service(db->config->listeners[i].ws_context, -1);
        -:  595:#elif LWS_LIBRARY_VERSION_NUMBER == 3002000
        -:  596:				lws_sul_schedule(db->config->listeners[i].ws_context, 0, &sul, lws__sul_callback, 10);
        -:  597:				libwebsocket_service(db->config->listeners[i].ws_context, 0);
        -:  598:#else
        -:  599:				libwebsocket_service(db->config->listeners[i].ws_context, 0);
        -:  600:#endif
        -:  601:
        -:  602:			}
        -:  603:		}
        -:  604:		if(db->config->have_websockets_listener){
        -:  605:			temp__expire_websockets_clients(db);
        -:  606:		}
        -:  607:#endif
        -:  608:#ifdef WITH_RPW_DBG
        -:  609:		log__printf(NULL, MOSQ_LOG_NOTICE, "Exiting in: %d iterations", (20-tc));
        -:  610:		tc++;
        -:  611:#endif
        -:  612:	}
        -:  613:
        -:  614:#ifdef WITH_EPOLL
        -:  615:	(void) close(db->epollfd);
        -:  616:	db->epollfd = 0;
        -:  617:#else
    #####:  618:	mosquitto__free(pollfds);
        -:  619:#endif
    #####:  620:	return MOSQ_ERR_SUCCESS;
    #####:  621:}
        -:  622:
    #####:  623:void do_disconnect(struct mosquitto_db *db, struct mosquitto *context, int reason)
        -:  624:{
        -:  625:	char *id;
        -:  626:#ifdef WITH_EPOLL
        -:  627:	struct epoll_event ev;
        -:  628:#endif
        -:  629:#ifdef WITH_WEBSOCKETS
        -:  630:	bool is_duplicate = false;
        -:  631:#endif
        -:  632:
    #####:  633:	if(context->state == mosq_cs_disconnected){
    #####:  634:		return;
        -:  635:	}
        -:  636:#ifdef WITH_WEBSOCKETS
        -:  637:	if(context->wsi){
        -:  638:		if(context->state == mosq_cs_duplicate){
        -:  639:			is_duplicate = true;
        -:  640:		}
        -:  641:
        -:  642:		if(context->state != mosq_cs_disconnecting && context->state != mosq_cs_disconnect_with_will){
        -:  643:			mosquitto__set_state(context, mosq_cs_disconnect_ws);
        -:  644:		}
        -:  645:		if(context->wsi){
        -:  646:			libwebsocket_callback_on_writable(context->ws_context, context->wsi);
        -:  647:		}
        -:  648:		if(context->sock != INVALID_SOCKET){
        -:  649:			HASH_DELETE(hh_sock, db->contexts_by_sock, context);
        -:  650:#ifdef WITH_EPOLL
        -:  651:			if (epoll_ctl(db->epollfd, EPOLL_CTL_DEL, context->sock, &ev) == -1) {
        -:  652:				log__printf(NULL, MOSQ_LOG_DEBUG, "Error in epoll disconnecting websockets: %s", strerror(errno));
        -:  653:			}
        -:  654:#endif		
        -:  655:			context->sock = INVALID_SOCKET;
        -:  656:			context->pollfd_index = -1;
        -:  657:		}
        -:  658:		if(is_duplicate){
        -:  659:			/* This occurs if another client is taking over the same client id.
        -:  660:			 * It is important to remove this from the by_id hash here, so it
        -:  661:			 * doesn't leave us with multiple clients in the hash with the same
        -:  662:			 * id. Websockets doesn't actually close the connection here,
        -:  663:			 * unlike for normal clients, which means there is extra time when
        -:  664:			 * there could be two clients with the same id in the hash. */
        -:  665:			context__remove_from_by_id(db, context);
        -:  666:		}
        -:  667:	}else
        -:  668:#endif
        -:  669:	{
    #####:  670:		if(db->config->connection_messages == true){
    #####:  671:			if(context->id){
    #####:  672:				id = context->id;
    #####:  673:			}else{
    #####:  674:				id = "<unknown>";
        -:  675:			}
    #####:  676:			if(context->state != mosq_cs_disconnecting && context->state != mosq_cs_disconnect_with_will){
    #####:  677:				switch(reason){
        -:  678:					case MOSQ_ERR_SUCCESS:
    #####:  679:						break;
        -:  680:					case MOSQ_ERR_PROTOCOL:
    #####:  681:						log__printf(NULL, MOSQ_LOG_NOTICE, "Client %s disconnected due to protocol error.", id);
    #####:  682:						break;
        -:  683:					case MOSQ_ERR_CONN_LOST:
    #####:  684:						log__printf(NULL, MOSQ_LOG_NOTICE, "Socket error on client %s, disconnecting.", id);
    #####:  685:						break;
        -:  686:					case MOSQ_ERR_AUTH:
    #####:  687:						log__printf(NULL, MOSQ_LOG_NOTICE, "Client %s disconnected, no longer authorised.", id);
    #####:  688:						break;
        -:  689:					case MOSQ_ERR_KEEPALIVE:
    #####:  690:						log__printf(NULL, MOSQ_LOG_NOTICE, "Client %s has exceeded timeout, disconnecting.", id);
    #####:  691:						break;
        -:  692:					default:
    #####:  693:						log__printf(NULL, MOSQ_LOG_NOTICE, "Socket error on client %s, disconnecting.", id);
    #####:  694:						break;
        -:  695:				}
    #####:  696:			}else{
    #####:  697:				log__printf(NULL, MOSQ_LOG_NOTICE, "Client %s disconnected.", id);
        -:  698:			}
    #####:  699:		}
        -:  700:#ifdef WITH_EPOLL
        -:  701:		if (context->sock != INVALID_SOCKET && epoll_ctl(db->epollfd, EPOLL_CTL_DEL, context->sock, &ev) == -1) {
        -:  702:			if(db->config->connection_messages == true){
        -:  703:				log__printf(NULL, MOSQ_LOG_DEBUG, "Error in epoll disconnecting: %s", strerror(errno));
        -:  704:			}
        -:  705:		}
        -:  706:#endif		
    #####:  707:		context__disconnect(db, context);
        -:  708:	}
    #####:  709:}
        -:  710:
        -:  711:
        -:  712:#ifdef WITH_EPOLL
        -:  713:static void loop_handle_reads_writes(struct mosquitto_db *db, mosq_sock_t sock, uint32_t events)
        -:  714:#else
    #####:  715:static void loop_handle_reads_writes(struct mosquitto_db *db, struct pollfd *pollfds)
        -:  716:#endif
        -:  717:{
        -:  718:	struct mosquitto *context;
        -:  719:#ifndef WITH_EPOLL
        -:  720:	struct mosquitto *ctxt_tmp;
        -:  721:#endif
        -:  722:	int err;
        -:  723:	socklen_t len;
        -:  724:	int rc;
        -:  725:
        -:  726:#ifdef WITH_EPOLL
        -:  727:	int i;
        -:  728:	context = NULL;
        -:  729:	HASH_FIND(hh_sock, db->contexts_by_sock, &sock, sizeof(mosq_sock_t), context);
        -:  730:	if(!context) {
        -:  731:		return;
        -:  732:	}
        -:  733:	for (i=0;i<1;i++) {
        -:  734:#else
    #####:  735:	HASH_ITER(hh_sock, db->contexts_by_sock, context, ctxt_tmp){
    #####:  736:		if(context->pollfd_index < 0){
    #####:  737:			continue;
        -:  738:		}
        -:  739:
    #####:  740:		assert(pollfds[context->pollfd_index].fd == context->sock);
        -:  741:#endif
        -:  742:
        -:  743:#ifdef WITH_WEBSOCKETS
        -:  744:		if(context->wsi){
        -:  745:			struct lws_pollfd wspoll;
        -:  746:#ifdef WITH_EPOLL
        -:  747:			wspoll.fd = context->sock;
        -:  748:			wspoll.events = context->events;
        -:  749:			wspoll.revents = events;
        -:  750:#else
        -:  751:			wspoll.fd = pollfds[context->pollfd_index].fd;
        -:  752:			wspoll.events = pollfds[context->pollfd_index].events;
        -:  753:			wspoll.revents = pollfds[context->pollfd_index].revents;
        -:  754:#endif
        -:  755:#ifdef LWS_LIBRARY_VERSION_NUMBER
        -:  756:			lws_service_fd(lws_get_context(context->wsi), &wspoll);
        -:  757:#else
        -:  758:			lws_service_fd(context->ws_context, &wspoll);
        -:  759:#endif
        -:  760:			continue;
        -:  761:		}
        -:  762:#endif
        -:  763:
        -:  764:#ifdef WITH_TLS
        -:  765:#ifdef WITH_EPOLL
        -:  766:		if(events & EPOLLOUT ||
        -:  767:#else
    #####:  768:		if(pollfds[context->pollfd_index].revents & POLLOUT ||
        -:  769:#endif
    #####:  770:				context->want_write ||
    #####:  771:				(context->ssl && context->state == mosq_cs_new)){
        -:  772:#else
        -:  773:#ifdef WITH_EPOLL
        -:  774:		if(events & EPOLLOUT){
        -:  775:#else			
        -:  776:		if(pollfds[context->pollfd_index].revents & POLLOUT){
        -:  777:#endif
        -:  778:#endif
    #####:  779:			if(context->state == mosq_cs_connect_pending){
    #####:  780:				len = sizeof(int);
    #####:  781:				if(!getsockopt(context->sock, SOL_SOCKET, SO_ERROR, (char *)&err, &len)){
    #####:  782:					if(err == 0){
    #####:  783:						mosquitto__set_state(context, mosq_cs_new);
        -:  784:#if defined(WITH_ADNS) && defined(WITH_BRIDGE)
        -:  785:						if(context->bridge){
        -:  786:							bridge__connect_step3(db, context);
        -:  787:							continue;
        -:  788:						}
        -:  789:#endif
    #####:  790:					}
    #####:  791:				}else{
    #####:  792:					do_disconnect(db, context, MOSQ_ERR_CONN_LOST);
    #####:  793:					continue;
        -:  794:				}
    #####:  795:			}
    #####:  796:			rc = packet__write(context);
    #####:  797:			if(rc){
    #####:  798:				do_disconnect(db, context, rc);
    #####:  799:				continue;
        -:  800:			}
    #####:  801:		}
    #####:  802:	}
        -:  803:
        -:  804:#ifdef WITH_EPOLL
        -:  805:	context = NULL;
        -:  806:	HASH_FIND(hh_sock, db->contexts_by_sock, &sock, sizeof(mosq_sock_t), context);
        -:  807:	if(!context) {
        -:  808:		return;
        -:  809:	}
        -:  810:	for (i=0;i<1;i++) {
        -:  811:#else
    #####:  812:	HASH_ITER(hh_sock, db->contexts_by_sock, context, ctxt_tmp){
    #####:  813:		if(context->pollfd_index < 0){
    #####:  814:			continue;
        -:  815:		}
        -:  816:#endif
        -:  817:#ifdef WITH_WEBSOCKETS
        -:  818:		if(context->wsi){
        -:  819:			// Websocket are already handled above
        -:  820:			continue;
        -:  821:		}
        -:  822:#endif
        -:  823:
        -:  824:#ifdef WITH_TLS
        -:  825:#ifdef WITH_EPOLL
        -:  826:		if(events & EPOLLIN ||
        -:  827:#else
    #####:  828:		if(pollfds[context->pollfd_index].revents & POLLIN ||
        -:  829:#endif
    #####:  830:				(context->ssl && context->state == mosq_cs_new)){
        -:  831:#else
        -:  832:#ifdef WITH_EPOLL
        -:  833:		if(events & EPOLLIN){
        -:  834:#else
        -:  835:		if(pollfds[context->pollfd_index].revents & POLLIN){
        -:  836:#endif
        -:  837:#endif
    #####:  838:			do{
    #####:  839:				rc = packet__read(db, context);
    #####:  840:				if(rc){
    #####:  841:					do_disconnect(db, context, rc);
    #####:  842:					continue;
        -:  843:				}
    #####:  844:			}while(SSL_DATA_PENDING(context));
    #####:  845:		}else{
        -:  846:#ifdef WITH_EPOLL
        -:  847:			if(events & (EPOLLERR | EPOLLHUP)){
        -:  848:#else
    #####:  849:			if(context->pollfd_index >= 0 && pollfds[context->pollfd_index].revents & (POLLERR | POLLNVAL | POLLHUP)){
        -:  850:#endif
    #####:  851:				do_disconnect(db, context, MOSQ_ERR_CONN_LOST);
    #####:  852:				continue;
        -:  853:			}
        -:  854:		}
    #####:  855:	}
    #####:  856:}
        -:  857:
        -:  858:
        -:  859:
