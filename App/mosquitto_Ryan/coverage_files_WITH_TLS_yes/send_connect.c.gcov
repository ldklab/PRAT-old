        -:    0:Source:../lib/send_connect.c
        -:    0:Graph:send_connect.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#ifdef WITH_BROKER
        -:   23:#  include "mosquitto_broker_internal.h"
        -:   24:#endif
        -:   25:
        -:   26:#include "logging_mosq.h"
        -:   27:#include "memory_mosq.h"
        -:   28:#include "mosquitto.h"
        -:   29:#include "mosquitto_internal.h"
        -:   30:#include "mqtt_protocol.h"
        -:   31:#include "packet_mosq.h"
        -:   32:#include "property_mosq.h"
        -:   33:
    #####:   34:int send__connect(struct mosquitto *mosq, uint16_t keepalive, bool clean_session, const mosquitto_property *properties)
        -:   35:{
    #####:   36:	struct mosquitto__packet *packet = NULL;
        -:   37:	int payloadlen;
    #####:   38:	uint8_t will = 0;
        -:   39:	uint8_t byte;
        -:   40:	int rc;
        -:   41:	uint8_t version;
        -:   42:	char *clientid, *username, *password;
        -:   43:	int headerlen;
    #####:   44:	int proplen = 0, will_proplen, varbytes;
    #####:   45:	mosquitto_property *local_props = NULL;
        -:   46:	uint16_t receive_maximum;
        -:   47:
        -:   48:    // TEST - RPW.
    #####:   49:    int nonce = 1337;
    #####:   50:    mosq->nonce = 1337;
        -:   51:    //assert(mosq->nonce);
        -:   52:    // END TEST - RPW.
        -:   53:
    #####:   54:	assert(mosq);
        -:   55:
    #####:   56:	if(mosq->protocol == mosq_p_mqtt31 && !mosq->id) return MOSQ_ERR_PROTOCOL;
        -:   57:
        -:   58:#if defined(WITH_BROKER) && defined(WITH_BRIDGE)
        -:   59:	if(mosq->bridge){
        -:   60:		clientid = mosq->bridge->remote_clientid;
        -:   61:		username = mosq->bridge->remote_username;
        -:   62:		password = mosq->bridge->remote_password;
        -:   63:	}else{
        -:   64:		clientid = mosq->id;
        -:   65:		username = mosq->username;
        -:   66:		password = mosq->password;
        -:   67:	}
        -:   68:#else
    #####:   69:	clientid = mosq->id;
    #####:   70:	username = mosq->username;
    #####:   71:	password = mosq->password;
        -:   72:#endif
        -:   73:
    #####:   74:	if(mosq->protocol == mosq_p_mqtt5){
        -:   75:		/* Generate properties from options */
    #####:   76:		if(!mosquitto_property_read_int16(properties, MQTT_PROP_RECEIVE_MAXIMUM, &receive_maximum, false)){
    #####:   77:			rc = mosquitto_property_add_int16(&local_props, MQTT_PROP_RECEIVE_MAXIMUM, mosq->msgs_in.inflight_maximum);
    #####:   78:			if(rc) return rc;
    #####:   79:		}else{
    #####:   80:			mosq->msgs_in.inflight_maximum = receive_maximum;
    #####:   81:			mosq->msgs_in.inflight_quota = receive_maximum;
        -:   82:		}
        -:   83:
    #####:   84:		version = MQTT_PROTOCOL_V5;
    #####:   85:		headerlen = 10;
    #####:   86:		proplen = 0;
    #####:   87:		proplen += property__get_length_all(properties);
    #####:   88:		proplen += property__get_length_all(local_props);
    #####:   89:		varbytes = packet__varint_bytes(proplen);
    #####:   90:		headerlen += proplen + varbytes;
    #####:   91:	}else if(mosq->protocol == mosq_p_mqtt311){
    #####:   92:		version = MQTT_PROTOCOL_V311;
    #####:   93:		headerlen = 10;
    #####:   94:	}else if(mosq->protocol == mosq_p_mqtt31){
    #####:   95:		version = MQTT_PROTOCOL_V31;
    #####:   96:		headerlen = 12;
    #####:   97:	}else{
    #####:   98:		return MOSQ_ERR_INVAL;
        -:   99:	}
        -:  100:
    #####:  101:	packet = mosquitto__calloc(1, sizeof(struct mosquitto__packet));
    #####:  102:	if(!packet) return MOSQ_ERR_NOMEM;
        -:  103:
    #####:  104:	if(clientid){
    #####:  105:		payloadlen = 2+strlen(clientid);
    #####:  106:	}else{
    #####:  107:		payloadlen = 2;
        -:  108:	}
    #####:  109:	if(mosq->will){
    #####:  110:		will = 1;
    #####:  111:		assert(mosq->will->msg.topic);
        -:  112:
    #####:  113:		payloadlen += 2+strlen(mosq->will->msg.topic) + 2+mosq->will->msg.payloadlen;
    #####:  114:		if(mosq->protocol == mosq_p_mqtt5){
    #####:  115:			will_proplen = property__get_length_all(mosq->will->properties);
    #####:  116:			varbytes = packet__varint_bytes(will_proplen);
    #####:  117:			payloadlen += will_proplen + varbytes;
    #####:  118:		}
    #####:  119:	}
        -:  120:
        -:  121:	/* After this check we can be sure that the username and password are
        -:  122:	 * always valid for the current protocol, so there is no need to check
        -:  123:	 * username before checking password. */
    #####:  124:	if(mosq->protocol == mosq_p_mqtt31 || mosq->protocol == mosq_p_mqtt311){
    #####:  125:		if(password != NULL && username == NULL){
    #####:  126:			return MOSQ_ERR_INVAL;
        -:  127:		}
    #####:  128:	}
        -:  129:
    #####:  130:	if(username){
    #####:  131:		payloadlen += 2+strlen(username);
    #####:  132:	}
    #####:  133:	if(password){
    #####:  134:		payloadlen += 2+strlen(password);
    #####:  135:	}
        -:  136:
    #####:  137:	packet->command = CMD_CONNECT;
    #####:  138:	packet->remaining_length = headerlen + payloadlen;
    #####:  139:	rc = packet__alloc(packet);
    #####:  140:	if(rc){
    #####:  141:		mosquitto__free(packet);
    #####:  142:		return rc;
        -:  143:	}
        -:  144:
        -:  145:	/* Variable header */
    #####:  146:	if(version == MQTT_PROTOCOL_V31){
    #####:  147:		packet__write_string(packet, PROTOCOL_NAME_v31, strlen(PROTOCOL_NAME_v31));
    #####:  148:	}else{
    #####:  149:		packet__write_string(packet, PROTOCOL_NAME, strlen(PROTOCOL_NAME));
        -:  150:	}
        -:  151:#if defined(WITH_BROKER) && defined(WITH_BRIDGE)
        -:  152:	if(mosq->bridge && mosq->bridge->try_private && mosq->bridge->try_private_accepted){
        -:  153:		version |= 0x80;
        -:  154:	}else{
        -:  155:	}
        -:  156:#endif
    #####:  157:	packet__write_byte(packet, version);
    #####:  158:	byte = (clean_session&0x1)<<1;
    #####:  159:	if(will){
    #####:  160:		byte = byte | ((mosq->will->msg.retain&0x1)<<5) | ((mosq->will->msg.qos&0x3)<<3) | ((will&0x1)<<2);
    #####:  161:	}
    #####:  162:	if(username){
    #####:  163:		byte = byte | 0x1<<7;
    #####:  164:	}
    #####:  165:	if(mosq->password){
    #####:  166:		byte = byte | 0x1<<6;
    #####:  167:	}
    #####:  168:	packet__write_byte(packet, byte);
    #####:  169:	packet__write_uint16(packet, keepalive);
        -:  170:
    #####:  171:	if(mosq->protocol == mosq_p_mqtt5){
        -:  172:		/* Write properties */
    #####:  173:		packet__write_varint(packet, proplen);
    #####:  174:		property__write_all(packet, properties, false);
    #####:  175:		property__write_all(packet, local_props, false);
    #####:  176:	}
    #####:  177:	mosquitto_property_free_all(&local_props);
        -:  178:
        -:  179:	/* Payload */
    #####:  180:	if(clientid){
    #####:  181:		packet__write_string(packet, clientid, strlen(clientid));
    #####:  182:	}else{
    #####:  183:		packet__write_uint16(packet, 0);
        -:  184:	}
    #####:  185:	if(will){
    #####:  186:		if(mosq->protocol == mosq_p_mqtt5){
        -:  187:			/* Write will properties */
    #####:  188:			property__write_all(packet, mosq->will->properties, true);
    #####:  189:		}
    #####:  190:		packet__write_string(packet, mosq->will->msg.topic, strlen(mosq->will->msg.topic));
    #####:  191:		packet__write_string(packet, (const char *)mosq->will->msg.payload, mosq->will->msg.payloadlen);
    #####:  192:	}
        -:  193:
    #####:  194:	if(username){
    #####:  195:		packet__write_string(packet, username, strlen(username));
    #####:  196:	}
    #####:  197:	if(password){
    #####:  198:		packet__write_string(packet, password, strlen(password));
    #####:  199:	}
        -:  200:
    #####:  201:	mosq->keepalive = keepalive;
        -:  202:#ifdef WITH_BROKER
        -:  203:# ifdef WITH_BRIDGE
        -:  204:	log__printf(mosq, MOSQ_LOG_NOTICE, "Bridge %s sending CONNECT", clientid);
        -:  205:# endif
        -:  206:#else
        -:  207:	log__printf(mosq, MOSQ_LOG_NOTICE, "Client %s sending CONNECT", clientid);
        -:  208:#endif
    #####:  209:	return packet__queue(mosq, packet);
    #####:  210:}
        -:  211:
