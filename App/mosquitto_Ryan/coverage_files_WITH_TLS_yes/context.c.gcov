        -:    0:Source:context.c
        -:    0:Graph:context.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <time.h>
        -:   21:
        -:   22:#include "mosquitto_broker_internal.h"
        -:   23:#include "alias_mosq.h"
        -:   24:#include "memory_mosq.h"
        -:   25:#include "packet_mosq.h"
        -:   26:#include "property_mosq.h"
        -:   27:#include "time_mosq.h"
        -:   28:#include "util_mosq.h"
        -:   29:#include "will_mosq.h"
        -:   30:
        -:   31:#include "uthash.h"
        -:   32:
    #####:   33:struct mosquitto *context__init(struct mosquitto_db *db, mosq_sock_t sock)
        -:   34:{
        -:   35:	struct mosquitto *context;
        -:   36:	char address[1024];
        -:   37:
    #####:   38:	context = mosquitto__calloc(1, sizeof(struct mosquitto));
    #####:   39:	if(!context) return NULL;
        -:   40:	
    #####:   41:	context->pollfd_index = -1;
    #####:   42:	mosquitto__set_state(context, mosq_cs_new);
    #####:   43:	context->sock = sock;
    #####:   44:	context->last_msg_in = mosquitto_time();
    #####:   45:	context->next_msg_out = mosquitto_time() + 60;
    #####:   46:	context->keepalive = 60; /* Default to 60s */
    #####:   47:	context->clean_start = true;
    #####:   48:	context->id = NULL;
    #####:   49:	context->last_mid = 0;
    #####:   50:	context->will = NULL;
    #####:   51:	context->username = NULL;
    #####:   52:	context->password = NULL;
    #####:   53:	context->listener = NULL;
    #####:   54:	context->acl_list = NULL;
        -:   55:
        -:   56:	/* is_bridge records whether this client is a bridge or not. This could be
        -:   57:	 * done by looking at context->bridge for bridges that we create ourself,
        -:   58:	 * but incoming bridges need some other way of being recorded. */
    #####:   59:	context->is_bridge = false;
        -:   60:
    #####:   61:	context->in_packet.payload = NULL;
    #####:   62:	packet__cleanup(&context->in_packet);
    #####:   63:	context->out_packet = NULL;
    #####:   64:	context->current_out_packet = NULL;
        -:   65:
    #####:   66:	context->address = NULL;
    #####:   67:	if((int)sock >= 0){
    #####:   68:		if(!net__socket_get_address(sock, address, 1024)){
    #####:   69:			context->address = mosquitto__strdup(address);
    #####:   70:		}
    #####:   71:		if(!context->address){
        -:   72:			/* getpeername and inet_ntop failed and not a bridge */
    #####:   73:			mosquitto__free(context);
    #####:   74:			return NULL;
        -:   75:		}
    #####:   76:	}
    #####:   77:	context->bridge = NULL;
    #####:   78:	context->msgs_in.inflight_maximum = db->config->max_inflight_messages;
    #####:   79:	context->msgs_out.inflight_maximum = db->config->max_inflight_messages;
    #####:   80:	context->msgs_in.inflight_quota = db->config->max_inflight_messages;
    #####:   81:	context->msgs_out.inflight_quota = db->config->max_inflight_messages;
    #####:   82:	context->maximum_qos = 2;
        -:   83:#ifdef WITH_TLS
    #####:   84:	context->ssl = NULL;
        -:   85:#endif
        -:   86:
    #####:   87:	if((int)context->sock >= 0){
    #####:   88:		HASH_ADD(hh_sock, db->contexts_by_sock, sock, sizeof(context->sock), context);
    #####:   89:	}
    #####:   90:	return context;
    #####:   91:}
        -:   92:
        -:   93:/*
        -:   94: * This will result in any outgoing packets going unsent. If we're disconnected
        -:   95: * forcefully then it is usually an error condition and shouldn't be a problem,
        -:   96: * but it will mean that CONNACK messages will never get sent for bad protocol
        -:   97: * versions for example.
        -:   98: */
    #####:   99:void context__cleanup(struct mosquitto_db *db, struct mosquitto *context, bool do_free)
        -:  100:{
        -:  101:	struct mosquitto__packet *packet;
        -:  102:#ifdef WITH_BRIDGE
        -:  103:	int i;
        -:  104:#endif
        -:  105:
    #####:  106:	if(!context) return;
        -:  107:
        -:  108:#ifdef WITH_BRIDGE
        -:  109:	if(context->bridge){
        -:  110:		for(i=0; i<db->bridge_count; i++){
        -:  111:			if(db->bridges[i] == context){
        -:  112:				db->bridges[i] = NULL;
        -:  113:			}
        -:  114:		}
        -:  115:		mosquitto__free(context->bridge->local_clientid);
        -:  116:		context->bridge->local_clientid = NULL;
        -:  117:
        -:  118:		mosquitto__free(context->bridge->local_username);
        -:  119:		context->bridge->local_username = NULL;
        -:  120:
        -:  121:		mosquitto__free(context->bridge->local_password);
        -:  122:		context->bridge->local_password = NULL;
        -:  123:
        -:  124:		if(context->bridge->remote_clientid != context->id){
        -:  125:			mosquitto__free(context->bridge->remote_clientid);
        -:  126:		}
        -:  127:		context->bridge->remote_clientid = NULL;
        -:  128:
        -:  129:		if(context->bridge->remote_username != context->username){
        -:  130:			mosquitto__free(context->bridge->remote_username);
        -:  131:		}
        -:  132:		context->bridge->remote_username = NULL;
        -:  133:
        -:  134:		if(context->bridge->remote_password != context->password){
        -:  135:			mosquitto__free(context->bridge->remote_password);
        -:  136:		}
        -:  137:		context->bridge->remote_password = NULL;
        -:  138:	}
        -:  139:#endif
        -:  140:
    #####:  141:	alias__free_all(context);
        -:  142:
    #####:  143:	mosquitto__free(context->auth_method);
    #####:  144:	context->auth_method = NULL;
        -:  145:
    #####:  146:	mosquitto__free(context->username);
    #####:  147:	context->username = NULL;
        -:  148:
    #####:  149:	mosquitto__free(context->password);
    #####:  150:	context->password = NULL;
        -:  151:
    #####:  152:	net__socket_close(db, context);
    #####:  153:	if(do_free || context->clean_start){
    #####:  154:		sub__clean_session(db, context);
    #####:  155:		db__messages_delete(db, context);
    #####:  156:	}
        -:  157:
    #####:  158:	mosquitto__free(context->address);
    #####:  159:	context->address = NULL;
        -:  160:
    #####:  161:	context__send_will(db, context);
        -:  162:
    #####:  163:	if(context->id){
    #####:  164:		context__remove_from_by_id(db, context);
    #####:  165:		mosquitto__free(context->id);
    #####:  166:		context->id = NULL;
    #####:  167:	}
    #####:  168:	packet__cleanup(&(context->in_packet));
    #####:  169:	if(context->current_out_packet){
    #####:  170:		packet__cleanup(context->current_out_packet);
    #####:  171:		mosquitto__free(context->current_out_packet);
    #####:  172:		context->current_out_packet = NULL;
    #####:  173:	}
    #####:  174:	while(context->out_packet){
    #####:  175:		packet__cleanup(context->out_packet);
    #####:  176:		packet = context->out_packet;
    #####:  177:		context->out_packet = context->out_packet->next;
    #####:  178:		mosquitto__free(packet);
        -:  179:	}
    #####:  180:	if(do_free || context->clean_start){
    #####:  181:		db__messages_delete(db, context);
    #####:  182:	}
        -:  183:#if defined(WITH_BROKER) && defined(__GLIBC__) && defined(WITH_ADNS)
        -:  184:	if(context->adns){
        -:  185:		gai_cancel(context->adns);
        -:  186:		mosquitto__free((struct addrinfo *)context->adns->ar_request);
        -:  187:		mosquitto__free(context->adns);
        -:  188:	}
        -:  189:#endif
    #####:  190:	if(do_free){
    #####:  191:		mosquitto__free(context);
    #####:  192:	}
    #####:  193:}
        -:  194:
        -:  195:
    #####:  196:void context__send_will(struct mosquitto_db *db, struct mosquitto *ctxt)
        -:  197:{
    #####:  198:	if(ctxt->state != mosq_cs_disconnecting && ctxt->will){
    #####:  199:		if(ctxt->will_delay_interval > 0){
    #####:  200:			will_delay__add(ctxt);
    #####:  201:			return;
        -:  202:		}
        -:  203:
    #####:  204:		if(mosquitto_acl_check(db, ctxt,
    #####:  205:					ctxt->will->msg.topic,
    #####:  206:					ctxt->will->msg.payloadlen,
    #####:  207:					ctxt->will->msg.payload,
    #####:  208:					ctxt->will->msg.qos,
    #####:  209:					ctxt->will->msg.retain,
    #####:  210:					MOSQ_ACL_WRITE) == MOSQ_ERR_SUCCESS){
        -:  211:
        -:  212:			/* Unexpected disconnect, queue the client will. */
    #####:  213:			db__messages_easy_queue(db, ctxt,
    #####:  214:					ctxt->will->msg.topic,
    #####:  215:					ctxt->will->msg.qos,
    #####:  216:					ctxt->will->msg.payloadlen,
    #####:  217:					ctxt->will->msg.payload,
    #####:  218:					ctxt->will->msg.retain,
    #####:  219:					ctxt->will->expiry_interval,
    #####:  220:					&ctxt->will->properties);
    #####:  221:		}
    #####:  222:	}
    #####:  223:	will__clear(ctxt);
    #####:  224:}
        -:  225:
        -:  226:
    #####:  227:void context__disconnect(struct mosquitto_db *db, struct mosquitto *context)
        -:  228:{
    #####:  229:	net__socket_close(db, context);
        -:  230:
    #####:  231:	context__send_will(db, context);
    #####:  232:	if(context->session_expiry_interval == 0){
        -:  233:		/* Client session is due to be expired now */
        -:  234:#ifdef WITH_BRIDGE
        -:  235:		if(!context->bridge)
        -:  236:#endif
        -:  237:		{
        -:  238:
    #####:  239:			if(context->will_delay_interval == 0){
        -:  240:				/* This will be done later, after the will is published for delay>0. */
    #####:  241:				context__add_to_disused(db, context);
    #####:  242:			}
        -:  243:		}
    #####:  244:	}else{
    #####:  245:		session_expiry__add(db, context);
        -:  246:	}
    #####:  247:	mosquitto__set_state(context, mosq_cs_disconnected);
    #####:  248:}
        -:  249:
    #####:  250:void context__add_to_disused(struct mosquitto_db *db, struct mosquitto *context)
        -:  251:{
    #####:  252:	if(context->state == mosq_cs_disused) return;
        -:  253:
    #####:  254:	mosquitto__set_state(context, mosq_cs_disused);
        -:  255:
    #####:  256:	if(context->id){
    #####:  257:		context__remove_from_by_id(db, context);
    #####:  258:		mosquitto__free(context->id);
    #####:  259:		context->id = NULL;
    #####:  260:	}
        -:  261:
    #####:  262:	if(db->ll_for_free){
    #####:  263:		context->for_free_next = db->ll_for_free;
    #####:  264:		db->ll_for_free = context;
    #####:  265:	}else{
    #####:  266:		db->ll_for_free = context;
        -:  267:	}
    #####:  268:}
        -:  269:
    #####:  270:void context__free_disused(struct mosquitto_db *db)
        -:  271:{
        -:  272:	struct mosquitto *context, *next;
        -:  273:#ifdef WITH_WEBSOCKETS
        -:  274:	struct mosquitto *last = NULL;
        -:  275:#endif
    #####:  276:	assert(db);
        -:  277:
    #####:  278:	context = db->ll_for_free;
    #####:  279:	while(context){
        -:  280:#ifdef WITH_WEBSOCKETS
        -:  281:		if(context->wsi){
        -:  282:			/* Don't delete yet, lws hasn't finished with it */
        -:  283:			if(last){
        -:  284:				last->for_free_next = context;
        -:  285:			}else{
        -:  286:				db->ll_for_free = context;
        -:  287:			}
        -:  288:			next = context->for_free_next;
        -:  289:			context->for_free_next = NULL;
        -:  290:			last = context;
        -:  291:			context = next;
        -:  292:		}else
        -:  293:#endif
        -:  294:		{
    #####:  295:			next = context->for_free_next;
    #####:  296:			context__cleanup(db, context, true);
    #####:  297:			context = next;
        -:  298:		}
        -:  299:	}
    #####:  300:	db->ll_for_free = NULL;
    #####:  301:}
        -:  302:
        -:  303:
    #####:  304:void context__remove_from_by_id(struct mosquitto_db *db, struct mosquitto *context)
        -:  305:{
    #####:  306:	if(context->removed_from_by_id == false && context->id){
    #####:  307:		HASH_DELETE(hh_id, db->contexts_by_id, context);
    #####:  308:		context->removed_from_by_id = true;
    #####:  309:	}
    #####:  310:}
        -:  311:
