        -:    0:Source:../lib/property_mosq.c
        -:    0:Graph:property_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2018-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <errno.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#ifndef WIN32
        -:   24:#  include <strings.h>
        -:   25:#endif
        -:   26:
        -:   27:#include "logging_mosq.h"
        -:   28:#include "memory_mosq.h"
        -:   29:#include "mqtt_protocol.h"
        -:   30:#include "packet_mosq.h"
        -:   31:#include "property_mosq.h"
        -:   32:
        -:   33:
    #####:   34:int property__read(struct mosquitto__packet *packet, int32_t *len, mosquitto_property *property)
        -:   35:{
        -:   36:	int rc;
        -:   37:	int32_t property_identifier;
        -:   38:	uint8_t byte;
        -:   39:	int8_t byte_count;
        -:   40:	uint16_t uint16;
        -:   41:	uint32_t uint32;
        -:   42:	int32_t varint;
        -:   43:	char *str1, *str2;
        -:   44:	int slen1, slen2;
        -:   45:
    #####:   46:	if(!property) return MOSQ_ERR_INVAL;
        -:   47:
    #####:   48:	rc = packet__read_varint(packet, &property_identifier, NULL);
    #####:   49:	if(rc) return rc;
    #####:   50:	*len -= 1;
        -:   51:
    #####:   52:	memset(property, 0, sizeof(mosquitto_property));
        -:   53:
    #####:   54:	property->identifier = property_identifier;
        -:   55:
    #####:   56:	switch(property_identifier){
        -:   57:		case MQTT_PROP_PAYLOAD_FORMAT_INDICATOR:
        -:   58:		case MQTT_PROP_REQUEST_PROBLEM_INFORMATION:
        -:   59:		case MQTT_PROP_REQUEST_RESPONSE_INFORMATION:
        -:   60:		case MQTT_PROP_MAXIMUM_QOS:
        -:   61:		case MQTT_PROP_RETAIN_AVAILABLE:
        -:   62:		case MQTT_PROP_WILDCARD_SUB_AVAILABLE:
        -:   63:		case MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE:
        -:   64:		case MQTT_PROP_SHARED_SUB_AVAILABLE:
    #####:   65:			rc = packet__read_byte(packet, &byte);
    #####:   66:			if(rc) return rc;
    #####:   67:			*len -= 1; /* byte */
    #####:   68:			property->value.i8 = byte;
    #####:   69:			break;
        -:   70:
        -:   71:		case MQTT_PROP_SERVER_KEEP_ALIVE:
        -:   72:		case MQTT_PROP_RECEIVE_MAXIMUM:
        -:   73:		case MQTT_PROP_TOPIC_ALIAS_MAXIMUM:
        -:   74:		case MQTT_PROP_TOPIC_ALIAS:
    #####:   75:			rc = packet__read_uint16(packet, &uint16);
    #####:   76:			if(rc) return rc;
    #####:   77:			*len -= 2; /* uint16 */
    #####:   78:			property->value.i16 = uint16;
    #####:   79:			break;
        -:   80:
        -:   81:		case MQTT_PROP_MESSAGE_EXPIRY_INTERVAL:
        -:   82:		case MQTT_PROP_SESSION_EXPIRY_INTERVAL:
        -:   83:		case MQTT_PROP_WILL_DELAY_INTERVAL:
        -:   84:		case MQTT_PROP_MAXIMUM_PACKET_SIZE:
    #####:   85:			rc = packet__read_uint32(packet, &uint32);
    #####:   86:			if(rc) return rc;
    #####:   87:			*len -= 4; /* uint32 */
    #####:   88:			property->value.i32 = uint32;
    #####:   89:			break;
        -:   90:
        -:   91:		case MQTT_PROP_SUBSCRIPTION_IDENTIFIER:
    #####:   92:			rc = packet__read_varint(packet, &varint, &byte_count);
    #####:   93:			if(rc) return rc;
    #####:   94:			*len -= byte_count;
    #####:   95:			property->value.varint = varint;
    #####:   96:			break;
        -:   97:
        -:   98:		case MQTT_PROP_CONTENT_TYPE:
        -:   99:		case MQTT_PROP_RESPONSE_TOPIC:
        -:  100:		case MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER:
        -:  101:		case MQTT_PROP_AUTHENTICATION_METHOD:
        -:  102:		case MQTT_PROP_RESPONSE_INFORMATION:
        -:  103:		case MQTT_PROP_SERVER_REFERENCE:
        -:  104:		case MQTT_PROP_REASON_STRING:
    #####:  105:			rc = packet__read_string(packet, &str1, &slen1);
    #####:  106:			if(rc) return rc;
    #####:  107:			*len = (*len) - 2 - slen1; /* uint16, string len */
    #####:  108:			property->value.s.v = str1;
    #####:  109:			property->value.s.len = slen1;
    #####:  110:			break;
        -:  111:
        -:  112:		case MQTT_PROP_AUTHENTICATION_DATA:
        -:  113:		case MQTT_PROP_CORRELATION_DATA:
    #####:  114:			rc = packet__read_binary(packet, (uint8_t **)&str1, &slen1);
    #####:  115:			if(rc) return rc;
    #####:  116:			*len = (*len) - 2 - slen1; /* uint16, binary len */
    #####:  117:			property->value.bin.v = str1;
    #####:  118:			property->value.bin.len = slen1;
    #####:  119:			break;
        -:  120:
        -:  121:		case MQTT_PROP_USER_PROPERTY:
    #####:  122:			rc = packet__read_string(packet, &str1, &slen1);
    #####:  123:			if(rc) return rc;
    #####:  124:			*len = (*len) - 2 - slen1; /* uint16, string len */
        -:  125:
    #####:  126:			rc = packet__read_string(packet, &str2, &slen2);
    #####:  127:			if(rc){
    #####:  128:				mosquitto__free(str1);
    #####:  129:				return rc;
        -:  130:			}
    #####:  131:			*len = (*len) - 2 - slen2; /* uint16, string len */
        -:  132:
    #####:  133:			property->name.v = str1;
    #####:  134:			property->name.len = slen1;
    #####:  135:			property->value.s.v = str2;
    #####:  136:			property->value.s.len = slen2;
    #####:  137:			break;
        -:  138:
        -:  139:		default:
    #####:  140:			log__printf(NULL, MOSQ_LOG_DEBUG, "Unsupported property type: %d", property_identifier);
    #####:  141:			return MOSQ_ERR_MALFORMED_PACKET;
        -:  142:	}
        -:  143:
    #####:  144:	return MOSQ_ERR_SUCCESS;
    #####:  145:}
        -:  146:
        -:  147:
    #####:  148:int property__read_all(int command, struct mosquitto__packet *packet, mosquitto_property **properties)
        -:  149:{
        -:  150:	int rc;
        -:  151:	int32_t proplen;
    #####:  152:	mosquitto_property *p, *tail = NULL;
        -:  153:
    #####:  154:	rc = packet__read_varint(packet, &proplen, NULL);
    #####:  155:	if(rc) return rc;
        -:  156:
    #####:  157:	*properties = NULL;
        -:  158:
        -:  159:	/* The order of properties must be preserved for some types, so keep the
        -:  160:	 * same order for all */
    #####:  161:	while(proplen > 0){
    #####:  162:		p = mosquitto__calloc(1, sizeof(mosquitto_property));
    #####:  163:		if(!p){
    #####:  164:			mosquitto_property_free_all(properties);
    #####:  165:			return MOSQ_ERR_NOMEM;
        -:  166:		}
        -:  167:
    #####:  168:		rc = property__read(packet, &proplen, p); 
    #####:  169:		if(rc){
    #####:  170:			mosquitto__free(p);
    #####:  171:			mosquitto_property_free_all(properties);
    #####:  172:			return rc;
        -:  173:		}
        -:  174:
    #####:  175:		if(!(*properties)){
    #####:  176:			*properties = p;
    #####:  177:		}else{
    #####:  178:			tail->next = p;
        -:  179:		}
    #####:  180:		tail = p;
        -:  181:
        -:  182:	}
        -:  183:
    #####:  184:	rc = mosquitto_property_check_all(command, *properties);
    #####:  185:	if(rc){
    #####:  186:		mosquitto_property_free_all(properties);
    #####:  187:		return rc;
        -:  188:	}
    #####:  189:	return MOSQ_ERR_SUCCESS;
    #####:  190:}
        -:  191:
        -:  192:
    #####:  193:void property__free(mosquitto_property **property)
        -:  194:{
    #####:  195:	if(!property || !(*property)) return;
        -:  196:
    #####:  197:	switch((*property)->identifier){
        -:  198:		case MQTT_PROP_CONTENT_TYPE:
        -:  199:		case MQTT_PROP_RESPONSE_TOPIC:
        -:  200:		case MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER:
        -:  201:		case MQTT_PROP_AUTHENTICATION_METHOD:
        -:  202:		case MQTT_PROP_RESPONSE_INFORMATION:
        -:  203:		case MQTT_PROP_SERVER_REFERENCE:
        -:  204:		case MQTT_PROP_REASON_STRING:
    #####:  205:			mosquitto__free((*property)->value.s.v);
    #####:  206:			break;
        -:  207:
        -:  208:		case MQTT_PROP_AUTHENTICATION_DATA:
        -:  209:		case MQTT_PROP_CORRELATION_DATA:
    #####:  210:			mosquitto__free((*property)->value.bin.v);
    #####:  211:			break;
        -:  212:
        -:  213:		case MQTT_PROP_USER_PROPERTY:
    #####:  214:			mosquitto__free((*property)->name.v);
    #####:  215:			mosquitto__free((*property)->value.s.v);
    #####:  216:			break;
        -:  217:
        -:  218:		case MQTT_PROP_PAYLOAD_FORMAT_INDICATOR:
        -:  219:		case MQTT_PROP_MESSAGE_EXPIRY_INTERVAL:
        -:  220:		case MQTT_PROP_SUBSCRIPTION_IDENTIFIER:
        -:  221:		case MQTT_PROP_SESSION_EXPIRY_INTERVAL:
        -:  222:		case MQTT_PROP_SERVER_KEEP_ALIVE:
        -:  223:		case MQTT_PROP_REQUEST_PROBLEM_INFORMATION:
        -:  224:		case MQTT_PROP_WILL_DELAY_INTERVAL:
        -:  225:		case MQTT_PROP_REQUEST_RESPONSE_INFORMATION:
        -:  226:		case MQTT_PROP_RECEIVE_MAXIMUM:
        -:  227:		case MQTT_PROP_TOPIC_ALIAS_MAXIMUM:
        -:  228:		case MQTT_PROP_TOPIC_ALIAS:
        -:  229:		case MQTT_PROP_MAXIMUM_QOS:
        -:  230:		case MQTT_PROP_RETAIN_AVAILABLE:
        -:  231:		case MQTT_PROP_MAXIMUM_PACKET_SIZE:
        -:  232:		case MQTT_PROP_WILDCARD_SUB_AVAILABLE:
        -:  233:		case MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE:
        -:  234:		case MQTT_PROP_SHARED_SUB_AVAILABLE:
        -:  235:			/* Nothing to free */
    #####:  236:			break;
        -:  237:	}
        -:  238:
    #####:  239:	free(*property);
    #####:  240:	*property = NULL;
    #####:  241:}
        -:  242:
        -:  243:
    #####:  244:void mosquitto_property_free_all(mosquitto_property **property)
        -:  245:{
        -:  246:	mosquitto_property *p, *next;
        -:  247:
    #####:  248:	if(!property) return;
        -:  249:
    #####:  250:	p = *property;
    #####:  251:	while(p){
    #####:  252:		next = p->next;
    #####:  253:		property__free(&p);
    #####:  254:		p = next;
        -:  255:	}
    #####:  256:	*property = NULL;
    #####:  257:}
        -:  258:
        -:  259:
    #####:  260:int property__get_length(const mosquitto_property *property)
        -:  261:{
    #####:  262:	if(!property) return 0;
        -:  263:
    #####:  264:	switch(property->identifier){
        -:  265:		/* Byte */
        -:  266:		case MQTT_PROP_PAYLOAD_FORMAT_INDICATOR:
        -:  267:		case MQTT_PROP_REQUEST_PROBLEM_INFORMATION:
        -:  268:		case MQTT_PROP_REQUEST_RESPONSE_INFORMATION:
        -:  269:		case MQTT_PROP_MAXIMUM_QOS:
        -:  270:		case MQTT_PROP_RETAIN_AVAILABLE:
        -:  271:		case MQTT_PROP_WILDCARD_SUB_AVAILABLE:
        -:  272:		case MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE:
        -:  273:		case MQTT_PROP_SHARED_SUB_AVAILABLE:
    #####:  274:			return 2; /* 1 (identifier) + 1 byte */
        -:  275:
        -:  276:		/* uint16 */
        -:  277:		case MQTT_PROP_SERVER_KEEP_ALIVE:
        -:  278:		case MQTT_PROP_RECEIVE_MAXIMUM:
        -:  279:		case MQTT_PROP_TOPIC_ALIAS_MAXIMUM:
        -:  280:		case MQTT_PROP_TOPIC_ALIAS:
    #####:  281:			return 3; /* 1 (identifier) + 2 bytes */
        -:  282:
        -:  283:		/* uint32 */
        -:  284:		case MQTT_PROP_MESSAGE_EXPIRY_INTERVAL:
        -:  285:		case MQTT_PROP_WILL_DELAY_INTERVAL:
        -:  286:		case MQTT_PROP_MAXIMUM_PACKET_SIZE:
        -:  287:		case MQTT_PROP_SESSION_EXPIRY_INTERVAL:
    #####:  288:			return 5; /* 1 (identifier) + 4 bytes */
        -:  289:
        -:  290:		/* varint */
        -:  291:		case MQTT_PROP_SUBSCRIPTION_IDENTIFIER:
    #####:  292:			if(property->value.varint < 128){
    #####:  293:				return 2;
    #####:  294:			}else if(property->value.varint < 16384){
    #####:  295:				return 3;
    #####:  296:			}else if(property->value.varint < 2097152){
    #####:  297:				return 4;
    #####:  298:			}else if(property->value.varint < 268435456){
    #####:  299:				return 5;
        -:  300:			}else{
    #####:  301:				return 0;
        -:  302:			}
        -:  303:
        -:  304:		/* binary */
        -:  305:		case MQTT_PROP_CORRELATION_DATA:
        -:  306:		case MQTT_PROP_AUTHENTICATION_DATA:
    #####:  307:			return 3 + property->value.bin.len; /* 1 + 2 bytes (len) + X bytes (payload) */
        -:  308:
        -:  309:		/* string */
        -:  310:		case MQTT_PROP_CONTENT_TYPE:
        -:  311:		case MQTT_PROP_RESPONSE_TOPIC:
        -:  312:		case MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER:
        -:  313:		case MQTT_PROP_AUTHENTICATION_METHOD:
        -:  314:		case MQTT_PROP_RESPONSE_INFORMATION:
        -:  315:		case MQTT_PROP_SERVER_REFERENCE:
        -:  316:		case MQTT_PROP_REASON_STRING:
    #####:  317:			return 3 + property->value.s.len; /* 1 + 2 bytes (len) + X bytes (string) */
        -:  318:
        -:  319:		/* string pair */
        -:  320:		case MQTT_PROP_USER_PROPERTY:
    #####:  321:			return 5 + property->value.s.len + property->name.len; /* 1 + 2*(2 bytes (len) + X bytes (string))*/
        -:  322:
        -:  323:		default:
    #####:  324:			return 0;
        -:  325:	}
        -:  326:	return 0;
    #####:  327:}
        -:  328:
        -:  329:
    #####:  330:int property__get_length_all(const mosquitto_property *property)
        -:  331:{
        -:  332:	const mosquitto_property *p;
    #####:  333:	int len = 0;
        -:  334:
    #####:  335:	p = property;
    #####:  336:	while(p){
    #####:  337:		len += property__get_length(p);
    #####:  338:		p = p->next;
        -:  339:	}
    #####:  340:	return len;
        -:  341:}
        -:  342:
        -:  343:
    #####:  344:int property__write(struct mosquitto__packet *packet, const mosquitto_property *property)
        -:  345:{
        -:  346:	int rc;
        -:  347:
    #####:  348:	rc = packet__write_varint(packet, property->identifier);
    #####:  349:	if(rc) return rc;
        -:  350:
    #####:  351:	switch(property->identifier){
        -:  352:		case MQTT_PROP_PAYLOAD_FORMAT_INDICATOR:
        -:  353:		case MQTT_PROP_REQUEST_PROBLEM_INFORMATION:
        -:  354:		case MQTT_PROP_REQUEST_RESPONSE_INFORMATION:
        -:  355:		case MQTT_PROP_MAXIMUM_QOS:
        -:  356:		case MQTT_PROP_RETAIN_AVAILABLE:
        -:  357:		case MQTT_PROP_WILDCARD_SUB_AVAILABLE:
        -:  358:		case MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE:
        -:  359:		case MQTT_PROP_SHARED_SUB_AVAILABLE:
    #####:  360:			packet__write_byte(packet, property->value.i8);
    #####:  361:			break;
        -:  362:
        -:  363:		case MQTT_PROP_SERVER_KEEP_ALIVE:
        -:  364:		case MQTT_PROP_RECEIVE_MAXIMUM:
        -:  365:		case MQTT_PROP_TOPIC_ALIAS_MAXIMUM:
        -:  366:		case MQTT_PROP_TOPIC_ALIAS:
    #####:  367:			packet__write_uint16(packet, property->value.i16);
    #####:  368:			break;
        -:  369:
        -:  370:		case MQTT_PROP_MESSAGE_EXPIRY_INTERVAL:
        -:  371:		case MQTT_PROP_SESSION_EXPIRY_INTERVAL:
        -:  372:		case MQTT_PROP_WILL_DELAY_INTERVAL:
        -:  373:		case MQTT_PROP_MAXIMUM_PACKET_SIZE:
    #####:  374:			packet__write_uint32(packet, property->value.i32);
    #####:  375:			break;
        -:  376:
        -:  377:		case MQTT_PROP_SUBSCRIPTION_IDENTIFIER:
    #####:  378:			return packet__write_varint(packet, property->value.varint);
        -:  379:
        -:  380:		case MQTT_PROP_CONTENT_TYPE:
        -:  381:		case MQTT_PROP_RESPONSE_TOPIC:
        -:  382:		case MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER:
        -:  383:		case MQTT_PROP_AUTHENTICATION_METHOD:
        -:  384:		case MQTT_PROP_RESPONSE_INFORMATION:
        -:  385:		case MQTT_PROP_SERVER_REFERENCE:
        -:  386:		case MQTT_PROP_REASON_STRING:
    #####:  387:			packet__write_string(packet, property->value.s.v, property->value.s.len);
    #####:  388:			break;
        -:  389:
        -:  390:		case MQTT_PROP_AUTHENTICATION_DATA:
        -:  391:		case MQTT_PROP_CORRELATION_DATA:
    #####:  392:			packet__write_uint16(packet, property->value.bin.len);
    #####:  393:			packet__write_bytes(packet, property->value.bin.v, property->value.bin.len);
    #####:  394:			break;
        -:  395:
        -:  396:		case MQTT_PROP_USER_PROPERTY:
    #####:  397:			packet__write_string(packet, property->name.v, property->name.len);
    #####:  398:			packet__write_string(packet, property->value.s.v, property->value.s.len);
    #####:  399:			break;
        -:  400:
        -:  401:		default:
    #####:  402:			log__printf(NULL, MOSQ_LOG_DEBUG, "Unsupported property type: %d", property->identifier);
    #####:  403:			return MOSQ_ERR_INVAL;
        -:  404:	}
        -:  405:
    #####:  406:	return MOSQ_ERR_SUCCESS;
    #####:  407:}
        -:  408:
        -:  409:
    #####:  410:int property__write_all(struct mosquitto__packet *packet, const mosquitto_property *properties, bool write_len)
        -:  411:{
        -:  412:	int rc;
        -:  413:	const mosquitto_property *p;
        -:  414:
    #####:  415:	if(write_len){
    #####:  416:		rc = packet__write_varint(packet, property__get_length_all(properties));
    #####:  417:		if(rc) return rc;
    #####:  418:	}
        -:  419:
    #####:  420:	p = properties;
    #####:  421:	while(p){
    #####:  422:		rc = property__write(packet, p);
    #####:  423:		if(rc) return rc;
    #####:  424:		p = p->next;
        -:  425:	}
        -:  426:
    #####:  427:	return MOSQ_ERR_SUCCESS;
    #####:  428:}
        -:  429:
        -:  430:
    #####:  431:int mosquitto_property_check_command(int command, int identifier)
        -:  432:{
    #####:  433:	switch(identifier){
        -:  434:		case MQTT_PROP_PAYLOAD_FORMAT_INDICATOR:
        -:  435:		case MQTT_PROP_MESSAGE_EXPIRY_INTERVAL:
        -:  436:		case MQTT_PROP_CONTENT_TYPE:
        -:  437:		case MQTT_PROP_RESPONSE_TOPIC:
        -:  438:		case MQTT_PROP_CORRELATION_DATA:
    #####:  439:			if(command != CMD_PUBLISH && command != CMD_WILL){
    #####:  440:				return MOSQ_ERR_PROTOCOL;
        -:  441:			}
    #####:  442:			break;
        -:  443:
        -:  444:		case MQTT_PROP_SUBSCRIPTION_IDENTIFIER:
    #####:  445:			if(command != CMD_PUBLISH && command != CMD_SUBSCRIBE){
    #####:  446:				return MOSQ_ERR_PROTOCOL;
        -:  447:			}
    #####:  448:			break;
        -:  449:
        -:  450:		case MQTT_PROP_SESSION_EXPIRY_INTERVAL:
    #####:  451:			if(command != CMD_CONNECT && command != CMD_CONNACK && command != CMD_DISCONNECT){
    #####:  452:				return MOSQ_ERR_PROTOCOL;
        -:  453:			}
    #####:  454:			break;
        -:  455:
        -:  456:		case MQTT_PROP_AUTHENTICATION_METHOD:
        -:  457:		case MQTT_PROP_AUTHENTICATION_DATA:
    #####:  458:			if(command != CMD_CONNECT && command != CMD_CONNACK && command != CMD_AUTH){
    #####:  459:				return MOSQ_ERR_PROTOCOL;
        -:  460:			}
    #####:  461:			break;
        -:  462:
        -:  463:		case MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER:
        -:  464:		case MQTT_PROP_SERVER_KEEP_ALIVE:
        -:  465:		case MQTT_PROP_RESPONSE_INFORMATION:
        -:  466:		case MQTT_PROP_MAXIMUM_QOS:
        -:  467:		case MQTT_PROP_RETAIN_AVAILABLE:
        -:  468:		case MQTT_PROP_WILDCARD_SUB_AVAILABLE:
        -:  469:		case MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE:
        -:  470:		case MQTT_PROP_SHARED_SUB_AVAILABLE:
    #####:  471:			if(command != CMD_CONNACK){
    #####:  472:				return MOSQ_ERR_PROTOCOL;
        -:  473:			}
    #####:  474:			break;
        -:  475:
        -:  476:		case MQTT_PROP_WILL_DELAY_INTERVAL:
    #####:  477:			if(command != CMD_WILL){
    #####:  478:				return MOSQ_ERR_PROTOCOL;
        -:  479:			}
    #####:  480:			break;
        -:  481:
        -:  482:		case MQTT_PROP_REQUEST_PROBLEM_INFORMATION:
        -:  483:		case MQTT_PROP_REQUEST_RESPONSE_INFORMATION:
    #####:  484:			if(command != CMD_CONNECT){
    #####:  485:				return MOSQ_ERR_PROTOCOL;
        -:  486:			}
    #####:  487:			break;
        -:  488:
        -:  489:		case MQTT_PROP_SERVER_REFERENCE:
    #####:  490:			if(command != CMD_CONNACK && command != CMD_DISCONNECT){
    #####:  491:				return MOSQ_ERR_PROTOCOL;
        -:  492:			}
    #####:  493:			break;
        -:  494:
        -:  495:		case MQTT_PROP_REASON_STRING:
    #####:  496:			if(command == CMD_CONNECT || command == CMD_PUBLISH || command == CMD_SUBSCRIBE || command == CMD_UNSUBSCRIBE){
    #####:  497:				return MOSQ_ERR_PROTOCOL;
        -:  498:			}
    #####:  499:			break;
        -:  500:
        -:  501:		case MQTT_PROP_RECEIVE_MAXIMUM:
        -:  502:		case MQTT_PROP_TOPIC_ALIAS_MAXIMUM:
        -:  503:		case MQTT_PROP_MAXIMUM_PACKET_SIZE:
    #####:  504:			if(command != CMD_CONNECT && command != CMD_CONNACK){
    #####:  505:				return MOSQ_ERR_PROTOCOL;
        -:  506:			}
    #####:  507:			break;
        -:  508:
        -:  509:		case MQTT_PROP_TOPIC_ALIAS:
    #####:  510:			if(command != CMD_PUBLISH){
    #####:  511:				return MOSQ_ERR_PROTOCOL;
        -:  512:			}
    #####:  513:			break;
        -:  514:
        -:  515:		case MQTT_PROP_USER_PROPERTY:
    #####:  516:			break;
        -:  517:
        -:  518:		default:
    #####:  519:			return MOSQ_ERR_PROTOCOL;
        -:  520:	}
    #####:  521:	return MOSQ_ERR_SUCCESS;
    #####:  522:}
        -:  523:
        -:  524:
    #####:  525:int mosquitto_string_to_property_info(const char *propname, int *identifier, int *type)
        -:  526:{
    #####:  527:	if(!propname) return MOSQ_ERR_INVAL;
        -:  528:
    #####:  529:	if(!strcasecmp(propname, "payload-format-indicator")){
    #####:  530:		*identifier = MQTT_PROP_PAYLOAD_FORMAT_INDICATOR;
    #####:  531:		*type = MQTT_PROP_TYPE_BYTE;
    #####:  532:	}else if(!strcasecmp(propname, "message-expiry-interval")){
    #####:  533:		*identifier = MQTT_PROP_MESSAGE_EXPIRY_INTERVAL;
    #####:  534:		*type = MQTT_PROP_TYPE_INT32;
    #####:  535:	}else if(!strcasecmp(propname, "content-type")){
    #####:  536:		*identifier = MQTT_PROP_CONTENT_TYPE;
    #####:  537:		*type = MQTT_PROP_TYPE_STRING;
    #####:  538:	}else if(!strcasecmp(propname, "response-topic")){
    #####:  539:		*identifier = MQTT_PROP_RESPONSE_TOPIC;
    #####:  540:		*type = MQTT_PROP_TYPE_STRING;
    #####:  541:	}else if(!strcasecmp(propname, "correlation-data")){
    #####:  542:		*identifier = MQTT_PROP_CORRELATION_DATA;
    #####:  543:		*type = MQTT_PROP_TYPE_BINARY;
    #####:  544:	}else if(!strcasecmp(propname, "subscription-identifier")){
    #####:  545:		*identifier = MQTT_PROP_SUBSCRIPTION_IDENTIFIER;
    #####:  546:		*type = MQTT_PROP_TYPE_VARINT;
    #####:  547:	}else if(!strcasecmp(propname, "session-expiry-interval")){
    #####:  548:		*identifier = MQTT_PROP_SESSION_EXPIRY_INTERVAL;
    #####:  549:		*type = MQTT_PROP_TYPE_INT32;
    #####:  550:	}else if(!strcasecmp(propname, "assigned-client-identifier")){
    #####:  551:		*identifier = MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER;
    #####:  552:		*type = MQTT_PROP_TYPE_STRING;
    #####:  553:	}else if(!strcasecmp(propname, "server-keep-alive")){
    #####:  554:		*identifier = MQTT_PROP_SERVER_KEEP_ALIVE;
    #####:  555:		*type = MQTT_PROP_TYPE_INT16;
    #####:  556:	}else if(!strcasecmp(propname, "authentication-method")){
    #####:  557:		*identifier = MQTT_PROP_AUTHENTICATION_METHOD;
    #####:  558:		*type = MQTT_PROP_TYPE_STRING;
    #####:  559:	}else if(!strcasecmp(propname, "authentication-data")){
    #####:  560:		*identifier = MQTT_PROP_AUTHENTICATION_DATA;
    #####:  561:		*type = MQTT_PROP_TYPE_BINARY;
    #####:  562:	}else if(!strcasecmp(propname, "request-problem-information")){
    #####:  563:		*identifier = MQTT_PROP_REQUEST_PROBLEM_INFORMATION;
    #####:  564:		*type = MQTT_PROP_TYPE_BYTE;
    #####:  565:	}else if(!strcasecmp(propname, "will-delay-interval")){
    #####:  566:		*identifier = MQTT_PROP_WILL_DELAY_INTERVAL;
    #####:  567:		*type = MQTT_PROP_TYPE_INT32;
    #####:  568:	}else if(!strcasecmp(propname, "request-response-information")){
    #####:  569:		*identifier = MQTT_PROP_REQUEST_RESPONSE_INFORMATION;
    #####:  570:		*type = MQTT_PROP_TYPE_BYTE;
    #####:  571:	}else if(!strcasecmp(propname, "response-information")){
    #####:  572:		*identifier = MQTT_PROP_RESPONSE_INFORMATION;
    #####:  573:		*type = MQTT_PROP_TYPE_STRING;
    #####:  574:	}else if(!strcasecmp(propname, "server-reference")){
    #####:  575:		*identifier = MQTT_PROP_SERVER_REFERENCE;
    #####:  576:		*type = MQTT_PROP_TYPE_STRING;
    #####:  577:	}else if(!strcasecmp(propname, "reason-string")){
    #####:  578:		*identifier = MQTT_PROP_REASON_STRING;
    #####:  579:		*type = MQTT_PROP_TYPE_STRING;
    #####:  580:	}else if(!strcasecmp(propname, "receive-maximum")){
    #####:  581:		*identifier = MQTT_PROP_RECEIVE_MAXIMUM;
    #####:  582:		*type = MQTT_PROP_TYPE_INT16;
    #####:  583:	}else if(!strcasecmp(propname, "topic-alias-maximum")){
    #####:  584:		*identifier = MQTT_PROP_TOPIC_ALIAS_MAXIMUM;
    #####:  585:		*type = MQTT_PROP_TYPE_INT16;
    #####:  586:	}else if(!strcasecmp(propname, "topic-alias")){
    #####:  587:		*identifier = MQTT_PROP_TOPIC_ALIAS;
    #####:  588:		*type = MQTT_PROP_TYPE_INT16;
    #####:  589:	}else if(!strcasecmp(propname, "maximum-qos")){
    #####:  590:		*identifier = MQTT_PROP_MAXIMUM_QOS;
    #####:  591:		*type = MQTT_PROP_TYPE_BYTE;
    #####:  592:	}else if(!strcasecmp(propname, "retain-available")){
    #####:  593:		*identifier = MQTT_PROP_RETAIN_AVAILABLE;
    #####:  594:		*type = MQTT_PROP_TYPE_BYTE;
    #####:  595:	}else if(!strcasecmp(propname, "user-property")){
    #####:  596:		*identifier = MQTT_PROP_USER_PROPERTY;
    #####:  597:		*type = MQTT_PROP_TYPE_STRING_PAIR;
    #####:  598:	}else if(!strcasecmp(propname, "maximum-packet-size")){
    #####:  599:		*identifier = MQTT_PROP_MAXIMUM_PACKET_SIZE;
    #####:  600:		*type = MQTT_PROP_TYPE_INT32;
    #####:  601:	}else if(!strcasecmp(propname, "wildcard-subscription-available")){
    #####:  602:		*identifier = MQTT_PROP_WILDCARD_SUB_AVAILABLE;
    #####:  603:		*type = MQTT_PROP_TYPE_BYTE;
    #####:  604:	}else if(!strcasecmp(propname, "subscription-identifier-available")){
    #####:  605:		*identifier = MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE;
    #####:  606:		*type = MQTT_PROP_TYPE_BYTE;
    #####:  607:	}else if(!strcasecmp(propname, "shared-subscription-available")){
    #####:  608:		*identifier = MQTT_PROP_SHARED_SUB_AVAILABLE;
    #####:  609:		*type = MQTT_PROP_TYPE_BYTE;
    #####:  610:	}else{
    #####:  611:		return MOSQ_ERR_INVAL;
        -:  612:	}
    #####:  613:	return MOSQ_ERR_SUCCESS;
    #####:  614:}
        -:  615:
        -:  616:
    #####:  617:static void property__add(mosquitto_property **proplist, struct mqtt5__property *prop)
        -:  618:{
        -:  619:	mosquitto_property *p;
        -:  620:
    #####:  621:	if(!(*proplist)){
    #####:  622:		*proplist = prop;
    #####:  623:	}
        -:  624:
    #####:  625:	p = *proplist;
    #####:  626:	while(p->next){
    #####:  627:		p = p->next;
        -:  628:	}
    #####:  629:	p->next = prop;
    #####:  630:	prop->next = NULL;
    #####:  631:}
        -:  632:
        -:  633:
    #####:  634:int mosquitto_property_add_byte(mosquitto_property **proplist, int identifier, uint8_t value)
        -:  635:{
        -:  636:	mosquitto_property *prop;
        -:  637:
    #####:  638:	if(!proplist) return MOSQ_ERR_INVAL;
    #####:  639:	if(identifier != MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
    #####:  640:			&& identifier != MQTT_PROP_REQUEST_PROBLEM_INFORMATION
    #####:  641:			&& identifier != MQTT_PROP_REQUEST_RESPONSE_INFORMATION
    #####:  642:			&& identifier != MQTT_PROP_MAXIMUM_QOS
    #####:  643:			&& identifier != MQTT_PROP_RETAIN_AVAILABLE
    #####:  644:			&& identifier != MQTT_PROP_WILDCARD_SUB_AVAILABLE
    #####:  645:			&& identifier != MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
    #####:  646:			&& identifier != MQTT_PROP_SHARED_SUB_AVAILABLE){
    #####:  647:		return MOSQ_ERR_INVAL;
        -:  648:	}
        -:  649:
    #####:  650:	prop = mosquitto__calloc(1, sizeof(mosquitto_property));
    #####:  651:	if(!prop) return MOSQ_ERR_NOMEM;
        -:  652:
    #####:  653:	prop->client_generated = true;
    #####:  654:	prop->identifier = identifier;
    #####:  655:	prop->value.i8 = value;
        -:  656:
    #####:  657:	property__add(proplist, prop);
    #####:  658:	return MOSQ_ERR_SUCCESS;
    #####:  659:}
        -:  660:
        -:  661:
    #####:  662:int mosquitto_property_add_int16(mosquitto_property **proplist, int identifier, uint16_t value)
        -:  663:{
        -:  664:	mosquitto_property *prop;
        -:  665:
    #####:  666:	if(!proplist) return MOSQ_ERR_INVAL;
    #####:  667:	if(identifier != MQTT_PROP_SERVER_KEEP_ALIVE
    #####:  668:			&& identifier != MQTT_PROP_RECEIVE_MAXIMUM
    #####:  669:			&& identifier != MQTT_PROP_TOPIC_ALIAS_MAXIMUM
    #####:  670:			&& identifier != MQTT_PROP_TOPIC_ALIAS){
    #####:  671:		return MOSQ_ERR_INVAL;
        -:  672:	}
        -:  673:
    #####:  674:	prop = mosquitto__calloc(1, sizeof(mosquitto_property));
    #####:  675:	if(!prop) return MOSQ_ERR_NOMEM;
        -:  676:
    #####:  677:	prop->client_generated = true;
    #####:  678:	prop->identifier = identifier;
    #####:  679:	prop->value.i16 = value;
        -:  680:
    #####:  681:	property__add(proplist, prop);
    #####:  682:	return MOSQ_ERR_SUCCESS;
    #####:  683:}
        -:  684:
        -:  685:
    #####:  686:int mosquitto_property_add_int32(mosquitto_property **proplist, int identifier, uint32_t value)
        -:  687:{
        -:  688:	mosquitto_property *prop;
        -:  689:
    #####:  690:	if(!proplist) return MOSQ_ERR_INVAL;
    #####:  691:	if(identifier != MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
    #####:  692:			&& identifier != MQTT_PROP_SESSION_EXPIRY_INTERVAL
    #####:  693:			&& identifier != MQTT_PROP_WILL_DELAY_INTERVAL
    #####:  694:			&& identifier != MQTT_PROP_MAXIMUM_PACKET_SIZE){
        -:  695:
    #####:  696:		return MOSQ_ERR_INVAL;
        -:  697:	}
        -:  698:
    #####:  699:	prop = mosquitto__calloc(1, sizeof(mosquitto_property));
    #####:  700:	if(!prop) return MOSQ_ERR_NOMEM;
        -:  701:
    #####:  702:	prop->client_generated = true;
    #####:  703:	prop->identifier = identifier;
    #####:  704:	prop->value.i32 = value;
        -:  705:
    #####:  706:	property__add(proplist, prop);
    #####:  707:	return MOSQ_ERR_SUCCESS;
    #####:  708:}
        -:  709:
        -:  710:
    #####:  711:int mosquitto_property_add_varint(mosquitto_property **proplist, int identifier, uint32_t value)
        -:  712:{
        -:  713:	mosquitto_property *prop;
        -:  714:
    #####:  715:	if(!proplist || value > 268435455) return MOSQ_ERR_INVAL;
    #####:  716:	if(identifier != MQTT_PROP_SUBSCRIPTION_IDENTIFIER) return MOSQ_ERR_INVAL;
        -:  717:
    #####:  718:	prop = mosquitto__calloc(1, sizeof(mosquitto_property));
    #####:  719:	if(!prop) return MOSQ_ERR_NOMEM;
        -:  720:
    #####:  721:	prop->client_generated = true;
    #####:  722:	prop->identifier = identifier;
    #####:  723:	prop->value.varint = value;
        -:  724:
    #####:  725:	property__add(proplist, prop);
    #####:  726:	return MOSQ_ERR_SUCCESS;
    #####:  727:}
        -:  728:
        -:  729:
    #####:  730:int mosquitto_property_add_binary(mosquitto_property **proplist, int identifier, const void *value, uint16_t len)
        -:  731:{
        -:  732:	mosquitto_property *prop;
        -:  733:
    #####:  734:	if(!proplist) return MOSQ_ERR_INVAL;
    #####:  735:	if(identifier != MQTT_PROP_CORRELATION_DATA
    #####:  736:			&& identifier != MQTT_PROP_AUTHENTICATION_DATA){
        -:  737:
    #####:  738:		return MOSQ_ERR_INVAL;
        -:  739:	}
        -:  740:
    #####:  741:	prop = mosquitto__calloc(1, sizeof(mosquitto_property));
    #####:  742:	if(!prop) return MOSQ_ERR_NOMEM;
        -:  743:
    #####:  744:	prop->client_generated = true;
    #####:  745:	prop->identifier = identifier;
        -:  746:
    #####:  747:	if(len){
    #####:  748:		prop->value.bin.v = mosquitto__malloc(len);
    #####:  749:		if(!prop->value.bin.v){
    #####:  750:			mosquitto__free(prop);
    #####:  751:			return MOSQ_ERR_NOMEM;
        -:  752:		}
        -:  753:
    #####:  754:		memcpy(prop->value.bin.v, value, len);
    #####:  755:		prop->value.bin.len = len;
    #####:  756:	}
        -:  757:
    #####:  758:	property__add(proplist, prop);
    #####:  759:	return MOSQ_ERR_SUCCESS;
    #####:  760:}
        -:  761:
        -:  762:
    #####:  763:int mosquitto_property_add_string(mosquitto_property **proplist, int identifier, const char *value)
        -:  764:{
        -:  765:	mosquitto_property *prop;
        -:  766:
    #####:  767:	if(!proplist) return MOSQ_ERR_INVAL;
    #####:  768:	if(value){
    #####:  769:		if(mosquitto_validate_utf8(value, strlen(value))) return MOSQ_ERR_MALFORMED_UTF8;
    #####:  770:	}
        -:  771:
    #####:  772:	if(identifier != MQTT_PROP_CONTENT_TYPE
    #####:  773:			&& identifier != MQTT_PROP_RESPONSE_TOPIC
    #####:  774:			&& identifier != MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
    #####:  775:			&& identifier != MQTT_PROP_AUTHENTICATION_METHOD
    #####:  776:			&& identifier != MQTT_PROP_RESPONSE_INFORMATION
    #####:  777:			&& identifier != MQTT_PROP_SERVER_REFERENCE
    #####:  778:			&& identifier != MQTT_PROP_REASON_STRING){
        -:  779:
    #####:  780:		return MOSQ_ERR_INVAL;
        -:  781:	}
        -:  782:
    #####:  783:	prop = mosquitto__calloc(1, sizeof(mosquitto_property));
    #####:  784:	if(!prop) return MOSQ_ERR_NOMEM;
        -:  785:
    #####:  786:	prop->client_generated = true;
    #####:  787:	prop->identifier = identifier;
    #####:  788:	if(value && strlen(value)){
    #####:  789:		prop->value.s.v = mosquitto__strdup(value);
    #####:  790:		if(!prop->value.s.v){
    #####:  791:			mosquitto__free(prop);
    #####:  792:			return MOSQ_ERR_NOMEM;
        -:  793:		}
    #####:  794:		prop->value.s.len = strlen(value);
    #####:  795:	}
        -:  796:
    #####:  797:	property__add(proplist, prop);
    #####:  798:	return MOSQ_ERR_SUCCESS;
    #####:  799:}
        -:  800:
        -:  801:
    #####:  802:int mosquitto_property_add_string_pair(mosquitto_property **proplist, int identifier, const char *name, const char *value)
        -:  803:{
        -:  804:	mosquitto_property *prop;
        -:  805:
    #####:  806:	if(!proplist) return MOSQ_ERR_INVAL;
    #####:  807:	if(identifier != MQTT_PROP_USER_PROPERTY) return MOSQ_ERR_INVAL;
    #####:  808:	if(name){
    #####:  809:		if(mosquitto_validate_utf8(name, strlen(name))) return MOSQ_ERR_MALFORMED_UTF8;
    #####:  810:	}
    #####:  811:	if(value){
    #####:  812:		if(mosquitto_validate_utf8(value, strlen(value))) return MOSQ_ERR_MALFORMED_UTF8;
    #####:  813:	}
        -:  814:
    #####:  815:	prop = mosquitto__calloc(1, sizeof(mosquitto_property));
    #####:  816:	if(!prop) return MOSQ_ERR_NOMEM;
        -:  817:
    #####:  818:	prop->client_generated = true;
    #####:  819:	prop->identifier = identifier;
        -:  820:
    #####:  821:	if(name && strlen(name)){
    #####:  822:		prop->name.v = mosquitto__strdup(name);
    #####:  823:		if(!prop->name.v){
    #####:  824:			mosquitto__free(prop);
    #####:  825:			return MOSQ_ERR_NOMEM;
        -:  826:		}
    #####:  827:		prop->name.len = strlen(name);
    #####:  828:	}
        -:  829:
    #####:  830:	if(value && strlen(value)){
    #####:  831:		prop->value.s.v = mosquitto__strdup(value);
    #####:  832:		if(!prop->value.s.v){
    #####:  833:			mosquitto__free(prop->name.v);
    #####:  834:			mosquitto__free(prop);
    #####:  835:			return MOSQ_ERR_NOMEM;
        -:  836:		}
    #####:  837:		prop->value.s.len = strlen(value);
    #####:  838:	}
        -:  839:
    #####:  840:	property__add(proplist, prop);
    #####:  841:	return MOSQ_ERR_SUCCESS;
    #####:  842:}
        -:  843:
    #####:  844:int mosquitto_property_check_all(int command, const mosquitto_property *properties)
        -:  845:{
        -:  846:	const mosquitto_property *p, *tail;
        -:  847:	int rc;
        -:  848:
    #####:  849:	p = properties;
        -:  850:
    #####:  851:	while(p){
        -:  852:		/* Validity checks */
    #####:  853:		if(p->identifier == MQTT_PROP_REQUEST_PROBLEM_INFORMATION
    #####:  854:				|| p->identifier == MQTT_PROP_REQUEST_RESPONSE_INFORMATION
    #####:  855:				|| p->identifier == MQTT_PROP_MAXIMUM_QOS
    #####:  856:				|| p->identifier == MQTT_PROP_RETAIN_AVAILABLE
    #####:  857:				|| p->identifier == MQTT_PROP_WILDCARD_SUB_AVAILABLE
    #####:  858:				|| p->identifier == MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
    #####:  859:				|| p->identifier == MQTT_PROP_SHARED_SUB_AVAILABLE){
        -:  860:
    #####:  861:			if(p->value.i8 > 1){
    #####:  862:				return MOSQ_ERR_PROTOCOL;
        -:  863:			}
    #####:  864:		}else if(p->identifier == MQTT_PROP_MAXIMUM_PACKET_SIZE){
    #####:  865:			if( p->value.i32 == 0){
    #####:  866:				return MOSQ_ERR_PROTOCOL;
        -:  867:			}
    #####:  868:		}else if(p->identifier == MQTT_PROP_RECEIVE_MAXIMUM
    #####:  869:				|| p->identifier == MQTT_PROP_TOPIC_ALIAS){
        -:  870:
    #####:  871:			if(p->value.i16 == 0){
    #####:  872:				return MOSQ_ERR_PROTOCOL;
        -:  873:			}
    #####:  874:		}
        -:  875:
        -:  876:		/* Check for properties on incorrect commands */
    #####:  877:		rc = mosquitto_property_check_command(command, p->identifier);
    #####:  878:		if(rc) return rc;
        -:  879:
        -:  880:		/* Check for duplicates */
    #####:  881:		tail = p->next;
    #####:  882:		while(tail){
    #####:  883:			if(p->identifier == tail->identifier
    #####:  884:					&& p->identifier != MQTT_PROP_USER_PROPERTY){
        -:  885:
    #####:  886:				return MOSQ_ERR_DUPLICATE_PROPERTY;
        -:  887:			}
    #####:  888:			tail = tail->next;
        -:  889:		}
        -:  890:
    #####:  891:		p = p->next;
        -:  892:	}
        -:  893:
    #####:  894:	return MOSQ_ERR_SUCCESS;
    #####:  895:}
        -:  896:
    #####:  897:const mosquitto_property *property__get_property(const mosquitto_property *proplist, int identifier, bool skip_first)
        -:  898:{
        -:  899:	const mosquitto_property *p;
    #####:  900:	bool is_first = true;
        -:  901:
    #####:  902:	p = proplist;
        -:  903:
    #####:  904:	while(p){
    #####:  905:		if(p->identifier == identifier){
    #####:  906:			if(!is_first || !skip_first){
    #####:  907:				return p;
        -:  908:			}
    #####:  909:			is_first = false;
    #####:  910:		}
    #####:  911:		p = p->next;
        -:  912:	}
    #####:  913:	return NULL;
    #####:  914:}
        -:  915:
        -:  916:
    #####:  917:const mosquitto_property *mosquitto_property_read_byte(const mosquitto_property *proplist, int identifier, uint8_t *value, bool skip_first)
        -:  918:{
        -:  919:	const mosquitto_property *p;
    #####:  920:	if(!proplist) return NULL;
        -:  921:
    #####:  922:	p = property__get_property(proplist, identifier, skip_first);
    #####:  923:	if(!p) return NULL;
    #####:  924:	if(p->identifier != MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
    #####:  925:			&& p->identifier != MQTT_PROP_REQUEST_PROBLEM_INFORMATION
    #####:  926:			&& p->identifier != MQTT_PROP_REQUEST_RESPONSE_INFORMATION
    #####:  927:			&& p->identifier != MQTT_PROP_MAXIMUM_QOS
    #####:  928:			&& p->identifier != MQTT_PROP_RETAIN_AVAILABLE
    #####:  929:			&& p->identifier != MQTT_PROP_WILDCARD_SUB_AVAILABLE
    #####:  930:			&& p->identifier != MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE
    #####:  931:			&& p->identifier != MQTT_PROP_SHARED_SUB_AVAILABLE){
    #####:  932:		return NULL;
        -:  933:	}
        -:  934:
    #####:  935:	if(value) *value = p->value.i8;
        -:  936:
    #####:  937:	return p;
    #####:  938:}
        -:  939:
        -:  940:
    #####:  941:const mosquitto_property *mosquitto_property_read_int16(const mosquitto_property *proplist, int identifier, uint16_t *value, bool skip_first)
        -:  942:{
        -:  943:	const mosquitto_property *p;
    #####:  944:	if(!proplist) return NULL;
        -:  945:
    #####:  946:	p = property__get_property(proplist, identifier, skip_first);
    #####:  947:	if(!p) return NULL;
    #####:  948:	if(p->identifier != MQTT_PROP_SERVER_KEEP_ALIVE
    #####:  949:			&& p->identifier != MQTT_PROP_RECEIVE_MAXIMUM
    #####:  950:			&& p->identifier != MQTT_PROP_TOPIC_ALIAS_MAXIMUM
    #####:  951:			&& p->identifier != MQTT_PROP_TOPIC_ALIAS){
    #####:  952:		return NULL;
        -:  953:	}
        -:  954:
    #####:  955:	if(value) *value = p->value.i16;
        -:  956:
    #####:  957:	return p;
    #####:  958:}
        -:  959:
        -:  960:
    #####:  961:const mosquitto_property *mosquitto_property_read_int32(const mosquitto_property *proplist, int identifier, uint32_t *value, bool skip_first)
        -:  962:{
        -:  963:	const mosquitto_property *p;
    #####:  964:	if(!proplist) return NULL;
        -:  965:
    #####:  966:	p = property__get_property(proplist, identifier, skip_first);
    #####:  967:	if(!p) return NULL;
    #####:  968:	if(p->identifier != MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
    #####:  969:			&& p->identifier != MQTT_PROP_SESSION_EXPIRY_INTERVAL
    #####:  970:			&& p->identifier != MQTT_PROP_WILL_DELAY_INTERVAL
    #####:  971:			&& p->identifier != MQTT_PROP_MAXIMUM_PACKET_SIZE){
        -:  972:
    #####:  973:		return NULL;
        -:  974:	}
        -:  975:
    #####:  976:	if(value) *value = p->value.i32;
        -:  977:
    #####:  978:	return p;
    #####:  979:}
        -:  980:
        -:  981:
    #####:  982:const mosquitto_property *mosquitto_property_read_varint(const mosquitto_property *proplist, int identifier, uint32_t *value, bool skip_first)
        -:  983:{
        -:  984:	const mosquitto_property *p;
    #####:  985:	if(!proplist) return NULL;
        -:  986:
    #####:  987:	p = property__get_property(proplist, identifier, skip_first);
    #####:  988:	if(!p) return NULL;
    #####:  989:	if(p->identifier != MQTT_PROP_SUBSCRIPTION_IDENTIFIER){
    #####:  990:		return NULL;
        -:  991:	}
        -:  992:
    #####:  993:	if(value) *value = p->value.varint;
        -:  994:
    #####:  995:	return p;
    #####:  996:}
        -:  997:
        -:  998:
    #####:  999:const mosquitto_property *mosquitto_property_read_binary(const mosquitto_property *proplist, int identifier, void **value, uint16_t *len, bool skip_first)
        -: 1000:{
        -: 1001:	const mosquitto_property *p;
    #####: 1002:	if(!proplist || (value && !len) || (!value && len)) return NULL;
        -: 1003:
    #####: 1004:	p = property__get_property(proplist, identifier, skip_first);
    #####: 1005:	if(!p) return NULL;
    #####: 1006:	if(p->identifier != MQTT_PROP_CORRELATION_DATA
    #####: 1007:			&& p->identifier != MQTT_PROP_AUTHENTICATION_DATA){
        -: 1008:
    #####: 1009:		return NULL;
        -: 1010:	}
        -: 1011:
    #####: 1012:	if(value){
    #####: 1013:		*len = p->value.bin.len;
    #####: 1014:		*value = malloc(*len);
    #####: 1015:		if(!(*value)) return NULL;
        -: 1016:
    #####: 1017:		memcpy(*value, p->value.bin.v, *len);
    #####: 1018:	}
        -: 1019:
    #####: 1020:	return p;
    #####: 1021:}
        -: 1022:
        -: 1023:
    #####: 1024:const mosquitto_property *mosquitto_property_read_string(const mosquitto_property *proplist, int identifier, char **value, bool skip_first)
        -: 1025:{
        -: 1026:	const mosquitto_property *p;
    #####: 1027:	if(!proplist) return NULL;
        -: 1028:
    #####: 1029:	p = property__get_property(proplist, identifier, skip_first);
    #####: 1030:	if(!p) return NULL;
    #####: 1031:	if(p->identifier != MQTT_PROP_CONTENT_TYPE
    #####: 1032:			&& p->identifier != MQTT_PROP_RESPONSE_TOPIC
    #####: 1033:			&& p->identifier != MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER
    #####: 1034:			&& p->identifier != MQTT_PROP_AUTHENTICATION_METHOD
    #####: 1035:			&& p->identifier != MQTT_PROP_RESPONSE_INFORMATION
    #####: 1036:			&& p->identifier != MQTT_PROP_SERVER_REFERENCE
    #####: 1037:			&& p->identifier != MQTT_PROP_REASON_STRING){
        -: 1038:
    #####: 1039:		return NULL;
        -: 1040:	}
        -: 1041:
    #####: 1042:	if(value){
    #####: 1043:		*value = calloc(1, p->value.s.len+1);
    #####: 1044:		if(!(*value)) return NULL;
        -: 1045:
    #####: 1046:		memcpy(*value, p->value.s.v, p->value.s.len);
    #####: 1047:	}
        -: 1048:
    #####: 1049:	return p;
    #####: 1050:}
        -: 1051:
        -: 1052:
    #####: 1053:const mosquitto_property *mosquitto_property_read_string_pair(const mosquitto_property *proplist, int identifier, char **name, char **value, bool skip_first)
        -: 1054:{
        -: 1055:	const mosquitto_property *p;
    #####: 1056:	if(!proplist) return NULL;
        -: 1057:
    #####: 1058:	p = property__get_property(proplist, identifier, skip_first);
    #####: 1059:	if(!p) return NULL;
    #####: 1060:	if(p->identifier != MQTT_PROP_USER_PROPERTY) return NULL;
        -: 1061:
    #####: 1062:	if(name){
    #####: 1063:		*name = calloc(1, p->name.len+1);
    #####: 1064:		if(!(*name)) return NULL;
    #####: 1065:		memcpy(*name, p->name.v, p->name.len);
    #####: 1066:	}
        -: 1067:
    #####: 1068:	if(value){
    #####: 1069:		*value = calloc(1, p->value.s.len+1);
    #####: 1070:		if(!(*value)){
    #####: 1071:			if(name){
    #####: 1072:				free(*name);
    #####: 1073:				*name = NULL;
    #####: 1074:			}
    #####: 1075:			return NULL;
        -: 1076:		}
    #####: 1077:		memcpy(*value, p->value.s.v, p->value.s.len);
    #####: 1078:	}
        -: 1079:
    #####: 1080:	return p;
    #####: 1081:}
        -: 1082:
        -: 1083:
    #####: 1084:int mosquitto_property_copy_all(mosquitto_property **dest, const mosquitto_property *src)
        -: 1085:{
    #####: 1086:	mosquitto_property *pnew, *plast = NULL;
        -: 1087:
    #####: 1088:	if(!src) return MOSQ_ERR_SUCCESS;
    #####: 1089:	if(!dest) return MOSQ_ERR_INVAL;
        -: 1090:
    #####: 1091:	*dest = NULL;
        -: 1092:
    #####: 1093:	while(src){
    #####: 1094:		pnew = calloc(1, sizeof(mosquitto_property));
    #####: 1095:		if(!pnew){
    #####: 1096:			mosquitto_property_free_all(dest);
    #####: 1097:			return MOSQ_ERR_NOMEM;
        -: 1098:		}
    #####: 1099:		if(plast){
    #####: 1100:			plast->next = pnew;
    #####: 1101:		}else{
    #####: 1102:			*dest = pnew;
        -: 1103:		}
    #####: 1104:		plast = pnew;
        -: 1105:
    #####: 1106:		pnew->identifier = src->identifier;
    #####: 1107:		switch(pnew->identifier){
        -: 1108:			case MQTT_PROP_PAYLOAD_FORMAT_INDICATOR:
        -: 1109:			case MQTT_PROP_REQUEST_PROBLEM_INFORMATION:
        -: 1110:			case MQTT_PROP_REQUEST_RESPONSE_INFORMATION:
        -: 1111:			case MQTT_PROP_MAXIMUM_QOS:
        -: 1112:			case MQTT_PROP_RETAIN_AVAILABLE:
        -: 1113:			case MQTT_PROP_WILDCARD_SUB_AVAILABLE:
        -: 1114:			case MQTT_PROP_SUBSCRIPTION_ID_AVAILABLE:
        -: 1115:			case MQTT_PROP_SHARED_SUB_AVAILABLE:
    #####: 1116:				pnew->value.i8 = src->value.i8;
    #####: 1117:				break;
        -: 1118:
        -: 1119:			case MQTT_PROP_SERVER_KEEP_ALIVE:
        -: 1120:			case MQTT_PROP_RECEIVE_MAXIMUM:
        -: 1121:			case MQTT_PROP_TOPIC_ALIAS_MAXIMUM:
        -: 1122:			case MQTT_PROP_TOPIC_ALIAS:
    #####: 1123:				pnew->value.i16 = src->value.i16;
    #####: 1124:				break;
        -: 1125:
        -: 1126:			case MQTT_PROP_MESSAGE_EXPIRY_INTERVAL:
        -: 1127:			case MQTT_PROP_SESSION_EXPIRY_INTERVAL:
        -: 1128:			case MQTT_PROP_WILL_DELAY_INTERVAL:
        -: 1129:			case MQTT_PROP_MAXIMUM_PACKET_SIZE:
    #####: 1130:				pnew->value.i32 = src->value.i32;
    #####: 1131:				break;
        -: 1132:
        -: 1133:			case MQTT_PROP_SUBSCRIPTION_IDENTIFIER:
    #####: 1134:				pnew->value.varint = src->value.varint;
    #####: 1135:				break;
        -: 1136:
        -: 1137:			case MQTT_PROP_CONTENT_TYPE:
        -: 1138:			case MQTT_PROP_RESPONSE_TOPIC:
        -: 1139:			case MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER:
        -: 1140:			case MQTT_PROP_AUTHENTICATION_METHOD:
        -: 1141:			case MQTT_PROP_RESPONSE_INFORMATION:
        -: 1142:			case MQTT_PROP_SERVER_REFERENCE:
        -: 1143:			case MQTT_PROP_REASON_STRING:
    #####: 1144:				pnew->value.s.len = src->value.s.len;
    #####: 1145:				pnew->value.s.v = strdup(src->value.s.v);
    #####: 1146:				if(!pnew->value.s.v){
    #####: 1147:					mosquitto_property_free_all(dest);
    #####: 1148:					return MOSQ_ERR_NOMEM;
        -: 1149:				}
    #####: 1150:				break;
        -: 1151:
        -: 1152:			case MQTT_PROP_AUTHENTICATION_DATA:
        -: 1153:			case MQTT_PROP_CORRELATION_DATA:
    #####: 1154:				pnew->value.bin.len = src->value.bin.len;
    #####: 1155:				pnew->value.bin.v = malloc(pnew->value.bin.len);
    #####: 1156:				if(!pnew->value.bin.v){
    #####: 1157:					mosquitto_property_free_all(dest);
    #####: 1158:					return MOSQ_ERR_NOMEM;
        -: 1159:				}
    #####: 1160:				memcpy(pnew->value.bin.v, src->value.bin.v, pnew->value.bin.len);
    #####: 1161:				break;
        -: 1162:
        -: 1163:			case MQTT_PROP_USER_PROPERTY:
    #####: 1164:				pnew->value.s.len = src->value.s.len;
    #####: 1165:				pnew->value.s.v = strdup(src->value.s.v);
    #####: 1166:				if(!pnew->value.s.v){
    #####: 1167:					mosquitto_property_free_all(dest);
    #####: 1168:					return MOSQ_ERR_NOMEM;
        -: 1169:				}
        -: 1170:
    #####: 1171:				pnew->name.len = src->name.len;
    #####: 1172:				pnew->name.v = strdup(src->name.v);
    #####: 1173:				if(!pnew->name.v){
    #####: 1174:					mosquitto_property_free_all(dest);
    #####: 1175:					return MOSQ_ERR_NOMEM;
        -: 1176:				}
    #####: 1177:				break;
        -: 1178:
        -: 1179:			default:
    #####: 1180:				mosquitto_property_free_all(dest);
    #####: 1181:				return MOSQ_ERR_INVAL;
        -: 1182:		}
        -: 1183:
    #####: 1184:		src = src->next;
        -: 1185:	}
        -: 1186:
    #####: 1187:	return MOSQ_ERR_SUCCESS;
    #####: 1188:}
