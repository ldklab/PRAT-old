        -:    0:Source:../lib/send_unsubscribe.c
        -:    0:Graph:send_unsubscribe.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#ifdef WITH_BROKER
        -:   23:#  include "mosquitto_broker_internal.h"
        -:   24:#endif
        -:   25:
        -:   26:#include "mosquitto.h"
        -:   27:#include "logging_mosq.h"
        -:   28:#include "memory_mosq.h"
        -:   29:#include "mqtt_protocol.h"
        -:   30:#include "packet_mosq.h"
        -:   31:#include "property_mosq.h"
        -:   32:#include "send_mosq.h"
        -:   33:#include "util_mosq.h"
        -:   34:
        -:   35:
    #####:   36:int send__unsubscribe(struct mosquitto *mosq, int *mid, int topic_count, char *const *const topic, const mosquitto_property *properties)
        -:   37:{
        -:   38:	/* FIXME - only deals with a single topic */
    #####:   39:	struct mosquitto__packet *packet = NULL;
        -:   40:	uint32_t packetlen;
        -:   41:	uint16_t local_mid;
        -:   42:	int rc;
        -:   43:	int proplen, varbytes;
        -:   44:	int i;
        -:   45:
    #####:   46:	assert(mosq);
    #####:   47:	assert(topic);
        -:   48:
    #####:   49:	packet = mosquitto__calloc(1, sizeof(struct mosquitto__packet));
    #####:   50:	if(!packet) return MOSQ_ERR_NOMEM;
        -:   51:
    #####:   52:	packetlen = 2;
        -:   53:
    #####:   54:	for(i=0; i<topic_count; i++){
    #####:   55:		packetlen += 2+strlen(topic[i]);
    #####:   56:	}
    #####:   57:	if(mosq->protocol == mosq_p_mqtt5){
    #####:   58:		proplen = property__get_length_all(properties);
    #####:   59:		varbytes = packet__varint_bytes(proplen);
    #####:   60:		packetlen += proplen + varbytes;
    #####:   61:	}
        -:   62:
    #####:   63:	packet->command = CMD_UNSUBSCRIBE | (1<<1);
    #####:   64:	packet->remaining_length = packetlen;
    #####:   65:	rc = packet__alloc(packet);
    #####:   66:	if(rc){
    #####:   67:		mosquitto__free(packet);
    #####:   68:		return rc;
        -:   69:	}
        -:   70:
        -:   71:	/* Variable header */
    #####:   72:	local_mid = mosquitto__mid_generate(mosq);
    #####:   73:	if(mid) *mid = (int)local_mid;
    #####:   74:	packet__write_uint16(packet, local_mid);
        -:   75:
    #####:   76:	if(mosq->protocol == mosq_p_mqtt5){
        -:   77:		/* We don't use User Property yet. */
    #####:   78:		property__write_all(packet, properties, true);
    #####:   79:	}
        -:   80:
        -:   81:	/* Payload */
    #####:   82:	for(i=0; i<topic_count; i++){
    #####:   83:		packet__write_string(packet, topic[i], strlen(topic[i]));
    #####:   84:	}
        -:   85:
        -:   86:#ifdef WITH_BROKER
        -:   87:# ifdef WITH_BRIDGE
        -:   88:	for(i=0; i<topic_count; i++){
        -:   89:		log__printf(mosq, MOSQ_LOG_DEBUG, "Bridge %s sending UNSUBSCRIBE (Mid: %d, Topic: %s)", mosq->id, local_mid, topic[i]);
        -:   90:	}
        -:   91:# endif
        -:   92:#else
        -:   93:	for(i=0; i<topic_count; i++){
        -:   94:		log__printf(mosq, MOSQ_LOG_DEBUG, "Client %s sending UNSUBSCRIBE (Mid: %d, Topic: %s)", mosq->id, local_mid, topic[i]);
        -:   95:	}
        -:   96:#endif
    #####:   97:	return packet__queue(mosq, packet);
    #####:   98:}
        -:   99:
