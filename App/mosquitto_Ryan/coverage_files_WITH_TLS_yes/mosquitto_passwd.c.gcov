        -:    0:Source:mosquitto_passwd.c
        -:    0:Graph:mosquitto_passwd.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2012-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <errno.h>
        -:   20:#include <openssl/opensslv.h>
        -:   21:#include <openssl/evp.h>
        -:   22:#include <openssl/rand.h>
        -:   23:#include <openssl/buffer.h>
        -:   24:#include <signal.h>
        -:   25:#include <stdio.h>
        -:   26:#include <stdlib.h>
        -:   27:#include <string.h>
        -:   28:
        -:   29:
        -:   30:#ifdef WIN32
        -:   31:#  include <windows.h>
        -:   32:#  include <process.h>
        -:   33:#	ifndef __cplusplus
        -:   34:#		if defined(_MSC_VER) && _MSC_VER < 1900
        -:   35:#			define bool char
        -:   36:#			define true 1
        -:   37:#			define false 0
        -:   38:#		else
        -:   39:#			include <stdbool.h>
        -:   40:#		endif
        -:   41:#	endif
        -:   42:#   define snprintf sprintf_s
        -:   43:#	include <io.h>
        -:   44:#	include <windows.h>
        -:   45:#else
        -:   46:#  include <stdbool.h>
        -:   47:#  include <unistd.h>
        -:   48:#  include <termios.h>
        -:   49:#  include <sys/stat.h>
        -:   50:#endif
        -:   51:
        -:   52:#define MAX_BUFFER_LEN 65536
        -:   53:#define SALT_LEN 12
        -:   54:
        -:   55:#include "misc_mosq.h"
        -:   56:
        -:   57:struct cb_helper {
        -:   58:	const char *line;
        -:   59:	const char *username;
        -:   60:	const char *password;
        -:   61:	bool found;
        -:   62:};
        -:   63:
        -:   64:#ifdef WIN32
        -:   65:static FILE *mpw_tmpfile(void)
        -:   66:{
        -:   67:	return tmpfile();
        -:   68:}
        -:   69:#else
        -:   70:
        -:   71:static char alphanum[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        -:   72:
        -:   73:static unsigned char tmpfile_path[36];
    #####:   74:static FILE *mpw_tmpfile(void)
        -:   75:{
        -:   76:	int fd;
        -:   77:	size_t i;
        -:   78:
    #####:   79:	if(RAND_bytes(tmpfile_path, sizeof(tmpfile_path)) != 1){
    #####:   80:		return NULL;
        -:   81:	}
        -:   82:
    #####:   83:	strcpy((char *)tmpfile_path, "/tmp/");
        -:   84:
    #####:   85:	for(i=strlen((char *)tmpfile_path); i<sizeof(tmpfile_path)-8; i++){
    #####:   86:		tmpfile_path[i] = alphanum[tmpfile_path[i]%(sizeof(alphanum)-1)];
    #####:   87:	}
    #####:   88:	tmpfile_path[sizeof(tmpfile_path)-8] = '-';
    #####:   89:	for(i=sizeof(tmpfile_path)-7; i<sizeof(tmpfile_path)-1; i++){
    #####:   90:		tmpfile_path[i] = 'X';
    #####:   91:	}
    #####:   92:	tmpfile_path[sizeof(tmpfile_path)-1] = '\0';
        -:   93:
    #####:   94:	umask(077);
    #####:   95:	fd = mkstemp((char *)tmpfile_path);
    #####:   96:	if(fd < 0) return NULL;
    #####:   97:	unlink((char *)tmpfile_path);
        -:   98:
    #####:   99:	return fdopen(fd, "w+");
    #####:  100:}
        -:  101:#endif
        -:  102:
        -:  103:
    #####:  104:int base64_encode(unsigned char *in, unsigned int in_len, char **encoded)
        -:  105:{
        -:  106:	BIO *bmem, *b64;
        -:  107:	BUF_MEM *bptr;
        -:  108:
    #####:  109:	b64 = BIO_new(BIO_f_base64());
    #####:  110:	BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
    #####:  111:	bmem = BIO_new(BIO_s_mem());
    #####:  112:	b64 = BIO_push(b64, bmem);
    #####:  113:	BIO_write(b64, in, in_len);
    #####:  114:	if(BIO_flush(b64) != 1){
    #####:  115:		BIO_free_all(b64);
    #####:  116:		return 1;
        -:  117:	}
    #####:  118:	BIO_get_mem_ptr(b64, &bptr);
    #####:  119:	*encoded = malloc(bptr->length+1);
    #####:  120:	if(!(*encoded)){
    #####:  121:		BIO_free_all(b64);
    #####:  122:		return 1;
        -:  123:	}
    #####:  124:	memcpy(*encoded, bptr->data, bptr->length);
    #####:  125:	(*encoded)[bptr->length] = '\0';
    #####:  126:	BIO_free_all(b64);
        -:  127:
    #####:  128:	return 0;
    #####:  129:}
        -:  130:
        -:  131:
    #####:  132:void print_usage(void)
        -:  133:{
    #####:  134:	printf("mosquitto_passwd is a tool for managing password files for mosquitto.\n\n");
    #####:  135:	printf("Usage: mosquitto_passwd [-c | -D] passwordfile username\n");
    #####:  136:	printf("       mosquitto_passwd -b passwordfile username password\n");
    #####:  137:	printf("       mosquitto_passwd -U passwordfile\n");
    #####:  138:	printf(" -b : run in batch mode to allow passing passwords on the command line.\n");
    #####:  139:	printf(" -c : create a new password file. This will overwrite existing files.\n");
    #####:  140:	printf(" -D : delete the username rather than adding/updating its password.\n");
    #####:  141:	printf(" -U : update a plain text password file to use hashed passwords.\n");
    #####:  142:	printf("\nSee https://mosquitto.org/ for more information.\n\n");
    #####:  143:}
        -:  144:
    #####:  145:int output_new_password(FILE *fptr, const char *username, const char *password)
        -:  146:{
        -:  147:	int rc;
        -:  148:	unsigned char salt[SALT_LEN];
    #####:  149:	char *salt64 = NULL, *hash64 = NULL;
        -:  150:	unsigned char hash[EVP_MAX_MD_SIZE];
        -:  151:	unsigned int hash_len;
        -:  152:	const EVP_MD *digest;
        -:  153:#if OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  154:	EVP_MD_CTX context;
        -:  155:#else
        -:  156:	EVP_MD_CTX *context;
        -:  157:#endif
        -:  158:
    #####:  159:	rc = RAND_bytes(salt, SALT_LEN);
    #####:  160:	if(!rc){
    #####:  161:		fprintf(stderr, "Error: Insufficient entropy available to perform password generation.\n");
    #####:  162:		return 1;
        -:  163:	}
        -:  164:
    #####:  165:	rc = base64_encode(salt, SALT_LEN, &salt64);
    #####:  166:	if(rc){
    #####:  167:		free(salt64);
    #####:  168:		fprintf(stderr, "Error: Unable to encode salt.\n");
    #####:  169:		return 1;
        -:  170:	}
        -:  171:
        -:  172:
    #####:  173:	digest = EVP_get_digestbyname("sha512");
    #####:  174:	if(!digest){
    #####:  175:		free(salt64);
    #####:  176:		fprintf(stderr, "Error: Unable to create openssl digest.\n");
    #####:  177:		return 1;
        -:  178:	}
        -:  179:
        -:  180:#if OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  181:	EVP_MD_CTX_init(&context);
        -:  182:	EVP_DigestInit_ex(&context, digest, NULL);
        -:  183:	EVP_DigestUpdate(&context, password, strlen(password));
        -:  184:	EVP_DigestUpdate(&context, salt, SALT_LEN);
        -:  185:	EVP_DigestFinal_ex(&context, hash, &hash_len);
        -:  186:	EVP_MD_CTX_cleanup(&context);
        -:  187:#else
    #####:  188:	context = EVP_MD_CTX_new();
    #####:  189:	EVP_DigestInit_ex(context, digest, NULL);
    #####:  190:	EVP_DigestUpdate(context, password, strlen(password));
    #####:  191:	EVP_DigestUpdate(context, salt, SALT_LEN);
    #####:  192:	EVP_DigestFinal_ex(context, hash, &hash_len);
    #####:  193:	EVP_MD_CTX_free(context);
        -:  194:#endif
        -:  195:
    #####:  196:	rc = base64_encode(hash, hash_len, &hash64);
    #####:  197:	if(rc){
    #####:  198:		free(salt64);
    #####:  199:		free(hash64);
    #####:  200:		fprintf(stderr, "Error: Unable to encode hash.\n");
    #####:  201:		return 1;
        -:  202:	}
        -:  203:
    #####:  204:	fprintf(fptr, "%s:$6$%s$%s\n", username, salt64, hash64);
    #####:  205:	free(salt64);
    #####:  206:	free(hash64);
        -:  207:
    #####:  208:	return 0;
    #####:  209:}
        -:  210:
        -:  211:
    #####:  212:static int pwfile_iterate(FILE *fptr, FILE *ftmp,
        -:  213:		int (*cb)(FILE *, FILE *, const char *, const char *, const char *, struct cb_helper *),
        -:  214:		struct cb_helper *helper)
        -:  215:{
        -:  216:	char *buf;
    #####:  217:	int buflen = 1024;
        -:  218:	char *lbuf;
        -:  219:	int lbuflen;
    #####:  220:	int rc = 1;
    #####:  221:	int line = 0;
        -:  222:	char *username, *password;
        -:  223:
    #####:  224:	buf = malloc(buflen);
    #####:  225:	if(buf == NULL){
    #####:  226:		fprintf(stderr, "Error: Out of memory.\n");
    #####:  227:		return 1;
        -:  228:	}
    #####:  229:	lbuflen = buflen;
    #####:  230:	lbuf = malloc(lbuflen);
    #####:  231:	if(lbuf == NULL){
    #####:  232:		fprintf(stderr, "Error: Out of memory.\n");
    #####:  233:		free(buf);
    #####:  234:		return 1;
        -:  235:	}
        -:  236:
    #####:  237:	while(!feof(fptr) && fgets_extending(&buf, &buflen, fptr)){
    #####:  238:		if(lbuflen != buflen){
    #####:  239:			free(lbuf);
    #####:  240:			lbuflen = buflen;
    #####:  241:			lbuf = malloc(lbuflen);
    #####:  242:			if(lbuf == NULL){
    #####:  243:				fprintf(stderr, "Error: Out of memory.\n");
    #####:  244:				free(buf);
    #####:  245:				return 1;
        -:  246:			}
    #####:  247:		}
    #####:  248:		memcpy(lbuf, buf, buflen);
    #####:  249:		line++;
    #####:  250:		username = strtok(buf, ":");
    #####:  251:		password = strtok(NULL, ":");
    #####:  252:		if(username == NULL || password == NULL){
    #####:  253:			fprintf(stderr, "Error: Corrupt password file at line %d.\n", line);
    #####:  254:			free(lbuf);
    #####:  255:			free(buf);
    #####:  256:			return 1;
        -:  257:		}
    #####:  258:		username = misc__trimblanks(username);
    #####:  259:		password = misc__trimblanks(password);
        -:  260:
    #####:  261:		if(strlen(username) == 0 || strlen(password) == 0){
    #####:  262:			fprintf(stderr, "Error: Corrupt password file at line %d.\n", line);
    #####:  263:			free(lbuf);
    #####:  264:			free(buf);
    #####:  265:			return 1;
        -:  266:		}
        -:  267:
    #####:  268:		rc = cb(fptr, ftmp, username, password, lbuf, helper);
    #####:  269:		if(rc){
    #####:  270:			break;
        -:  271:		}
        -:  272:	}
    #####:  273:	free(lbuf);
    #####:  274:	free(buf);
        -:  275:
    #####:  276:	return rc;
    #####:  277:}
        -:  278:
        -:  279:
        -:  280:/* ======================================================================
        -:  281: * Delete a user from the password file
        -:  282: * ====================================================================== */
    #####:  283:static int delete_pwuser_cb(FILE *fptr, FILE *ftmp, const char *username, const char *password, const char *line, struct cb_helper *helper)
        -:  284:{
    #####:  285:	if(strcmp(username, helper->username)){
        -:  286:		/* If this isn't the username to delete, write it to the new file */
    #####:  287:		fprintf(ftmp, "%s", line);
    #####:  288:	}else{
        -:  289:		/* Don't write the matching username to the file. */
    #####:  290:		helper->found = true;
        -:  291:	}
    #####:  292:	return 0;
        -:  293:}
        -:  294:
    #####:  295:int delete_pwuser(FILE *fptr, FILE *ftmp, const char *username)
        -:  296:{
        -:  297:	struct cb_helper helper;
        -:  298:	int rc;
        -:  299:
    #####:  300:	memset(&helper, 0, sizeof(helper));
    #####:  301:	helper.username = username;
    #####:  302:	rc = pwfile_iterate(fptr, ftmp, delete_pwuser_cb, &helper);
        -:  303:
    #####:  304:	if(helper.found == false){
    #####:  305:		fprintf(stderr, "Warning: User %s not found in password file.\n", username);
    #####:  306:		return 1;
        -:  307:	}
    #####:  308:	return rc;
    #####:  309:}
        -:  310:
        -:  311:
        -:  312:
        -:  313:/* ======================================================================
        -:  314: * Update a plain text password file to use hashes
        -:  315: * ====================================================================== */
    #####:  316:static int update_file_cb(FILE *fptr, FILE *ftmp, const char *username, const char *password, const char *line, struct cb_helper *helper)
        -:  317:{
    #####:  318:	return output_new_password(ftmp, username, password);
        -:  319:}
        -:  320:
    #####:  321:int update_file(FILE *fptr, FILE *ftmp)
        -:  322:{
    #####:  323:	return pwfile_iterate(fptr, ftmp, update_file_cb, NULL);
        -:  324:}
        -:  325:
        -:  326:
        -:  327:/* ======================================================================
        -:  328: * Update an existing user password / create a new password
        -:  329: * ====================================================================== */
    #####:  330:static int update_pwuser_cb(FILE *fptr, FILE *ftmp, const char *username, const char *password, const char *line, struct cb_helper *helper)
        -:  331:{
    #####:  332:	int rc = 0;
        -:  333:
    #####:  334:	printf("%s\n", username);
    #####:  335:	if(strcmp(username, helper->username)){
        -:  336:		/* If this isn't the matching user, then writing out the exiting line */
    #####:  337:		printf("%s\n", line);
    #####:  338:		fprintf(ftmp, "%s", line);
    #####:  339:	}else{
        -:  340:		/* Write out a new line for our matching username */
    #####:  341:		helper->found = true;
    #####:  342:		rc = output_new_password(ftmp, username, password);
        -:  343:	}
    #####:  344:	return rc;
        -:  345:}
        -:  346:
    #####:  347:int update_pwuser(FILE *fptr, FILE *ftmp, const char *username, const char *password)
        -:  348:{
        -:  349:	struct cb_helper helper;
        -:  350:	int rc;
        -:  351:
    #####:  352:	memset(&helper, 0, sizeof(helper));
    #####:  353:	helper.username = username;
    #####:  354:	rc = pwfile_iterate(fptr, ftmp, update_pwuser_cb, &helper);
        -:  355:
    #####:  356:	if(helper.found){
    #####:  357:		return rc;
        -:  358:	}else{
    #####:  359:		return output_new_password(ftmp, username, password);
        -:  360:	}
    #####:  361:}
        -:  362:
        -:  363:
    #####:  364:int gets_quiet(char *s, int len)
        -:  365:{
        -:  366:#ifdef WIN32
        -:  367:	HANDLE h;
        -:  368:	DWORD con_orig, con_quiet = 0;
        -:  369:	DWORD read_len = 0;
        -:  370:
        -:  371:	memset(s, 0, len);
        -:  372:	h  = GetStdHandle(STD_INPUT_HANDLE);
        -:  373:	GetConsoleMode(h, &con_orig);
        -:  374:	con_quiet = con_orig;
        -:  375:	con_quiet &= ~ENABLE_ECHO_INPUT;
        -:  376:	con_quiet |= ENABLE_LINE_INPUT;
        -:  377:	SetConsoleMode(h, con_quiet);
        -:  378:	if(!ReadConsole(h, s, len, &read_len, NULL)){
        -:  379:		SetConsoleMode(h, con_orig);
        -:  380:		return 1;
        -:  381:	}
        -:  382:	while(s[strlen(s)-1] == 10 || s[strlen(s)-1] == 13){
        -:  383:		s[strlen(s)-1] = 0;
        -:  384:	}
        -:  385:	if(strlen(s) == 0){
        -:  386:		return 1;
        -:  387:	}
        -:  388:	SetConsoleMode(h, con_orig);
        -:  389:
        -:  390:	return 0;
        -:  391:#else
        -:  392:	struct termios ts_quiet, ts_orig;
        -:  393:	char *rs;
        -:  394:
    #####:  395:	memset(s, 0, len);
    #####:  396:	tcgetattr(0, &ts_orig);
    #####:  397:	ts_quiet = ts_orig;
    #####:  398:	ts_quiet.c_lflag &= ~(ECHO | ICANON);
    #####:  399:	tcsetattr(0, TCSANOW, &ts_quiet);
        -:  400:
    #####:  401:	rs = fgets(s, len, stdin);
    #####:  402:	tcsetattr(0, TCSANOW, &ts_orig);
        -:  403:
    #####:  404:	if(!rs){
    #####:  405:		return 1;
        -:  406:	}else{
    #####:  407:		while(s[strlen(s)-1] == 10 || s[strlen(s)-1] == 13){
    #####:  408:			s[strlen(s)-1] = 0;
        -:  409:		}
    #####:  410:		if(strlen(s) == 0){
    #####:  411:			return 1;
        -:  412:		}
        -:  413:	}
    #####:  414:	return 0;
        -:  415:#endif
    #####:  416:}
        -:  417:
    #####:  418:int get_password(char *password, size_t len)
        -:  419:{
        -:  420:	char pw1[MAX_BUFFER_LEN], pw2[MAX_BUFFER_LEN];
        -:  421:	size_t minLen;
    #####:  422:	minLen = len < MAX_BUFFER_LEN ? len : MAX_BUFFER_LEN;
        -:  423:
    #####:  424:	printf("Password: ");
    #####:  425:	fflush(stdout);
    #####:  426:	if(gets_quiet(pw1, minLen)){
    #####:  427:		fprintf(stderr, "Error: Empty password.\n");
    #####:  428:		return 1;
        -:  429:	}
    #####:  430:	printf("\n");
        -:  431:
    #####:  432:	printf("Reenter password: ");
    #####:  433:	fflush(stdout);
    #####:  434:	if(gets_quiet(pw2, minLen)){
    #####:  435:		fprintf(stderr, "Error: Empty password.\n");
    #####:  436:		return 1;
        -:  437:	}
    #####:  438:	printf("\n");
        -:  439:
    #####:  440:	if(strcmp(pw1, pw2)){
    #####:  441:		fprintf(stderr, "Error: Passwords do not match.\n");
    #####:  442:		return 1;
        -:  443:	}
        -:  444:
    #####:  445:	strncpy(password, pw1, minLen);
    #####:  446:	return 0;
    #####:  447:}
        -:  448:
    #####:  449:int copy_contents(FILE *src, FILE *dest)
        -:  450:{
        -:  451:	char buf[MAX_BUFFER_LEN];
        -:  452:	size_t len;
        -:  453:
    #####:  454:	rewind(src);
    #####:  455:	rewind(dest);
        -:  456:	
        -:  457:#ifdef WIN32
        -:  458:	_chsize(fileno(dest), 0);
        -:  459:#else
    #####:  460:	if(ftruncate(fileno(dest), 0)) return 1;
        -:  461:#endif
        -:  462:
    #####:  463:	while(!feof(src)){
    #####:  464:		len = fread(buf, 1, MAX_BUFFER_LEN, src);
    #####:  465:		if(len > 0){
    #####:  466:			if(fwrite(buf, 1, len, dest) != len){
    #####:  467:				return 1;
        -:  468:			}
    #####:  469:		}else{
    #####:  470:			return !feof(src);
        -:  471:		}
        -:  472:	}
    #####:  473:	return 0;
    #####:  474:}
        -:  475:
    #####:  476:int create_backup(const char *backup_file, FILE *fptr)
        -:  477:{
        -:  478:	FILE *fbackup;
        -:  479:
    #####:  480:	fbackup = fopen(backup_file, "wt");
    #####:  481:	if(!fbackup){
    #####:  482:		fprintf(stderr, "Error creating backup password file \"%s\", not continuing.\n", backup_file);
    #####:  483:		return 1;
        -:  484:	}
    #####:  485:	if(copy_contents(fptr, fbackup)){
    #####:  486:		fprintf(stderr, "Error copying data to backup password file \"%s\", not continuing.\n", backup_file);
    #####:  487:		fclose(fbackup);
    #####:  488:		return 1;
        -:  489:	}
    #####:  490:	fclose(fbackup);
    #####:  491:	rewind(fptr);
    #####:  492:	return 0;
    #####:  493:}
    #####:  494:void handle_sigint(int signal)
        -:  495:{
        -:  496:#ifndef WIN32
        -:  497:	struct termios ts;
        -:  498:
    #####:  499:	tcgetattr(0, &ts);
    #####:  500:	ts.c_lflag |= ECHO | ICANON;
    #####:  501:	tcsetattr(0, TCSANOW, &ts);
        -:  502:#endif
        -:  503:
    #####:  504:	UNUSED(signal);
        -:  505:
    #####:  506:	exit(0);
        -:  507:}
        -:  508:
    #####:  509:int main(int argc, char *argv[])
        -:  510:{
    #####:  511:	char *password_file_tmp = NULL;
    #####:  512:	char *password_file = NULL;
    #####:  513:	char *username = NULL;
    #####:  514:	char *password_cmd = NULL;
    #####:  515:	bool batch_mode = false;
    #####:  516:	bool create_new = false;
    #####:  517:	bool delete_user = false;
        -:  518:	FILE *fptr, *ftmp;
        -:  519:	char password[MAX_BUFFER_LEN];
        -:  520:	int rc;
    #####:  521:	bool do_update_file = false;
        -:  522:	char *backup_file;
        -:  523:
    #####:  524:	signal(SIGINT, handle_sigint);
    #####:  525:	signal(SIGTERM, handle_sigint);
        -:  526:
        -:  527:#if OPENSSL_VERSION_NUMBER < 0x10100000L || OPENSSL_API_COMPAT < 0x10100000L
    #####:  528:	OpenSSL_add_all_digests();
        -:  529:#else
        -:  530:	OPENSSL_init_crypto(OPENSSL_INIT_ADD_ALL_CIPHERS \
        -:  531:			| OPENSSL_INIT_ADD_ALL_DIGESTS \
        -:  532:			| OPENSSL_INIT_LOAD_CONFIG, NULL);
        -:  533:#endif
        -:  534:
    #####:  535:	if(argc == 1){
    #####:  536:		print_usage();
    #####:  537:		return 1;
        -:  538:	}
        -:  539:
    #####:  540:	if(!strcmp(argv[1], "-c")){
    #####:  541:		create_new = true;
    #####:  542:		if(argc != 4){
    #####:  543:			fprintf(stderr, "Error: -c argument given but password file or username missing.\n");
    #####:  544:			return 1;
        -:  545:		}else{
    #####:  546:			password_file_tmp = argv[2];
    #####:  547:			username = argv[3];
        -:  548:		}
    #####:  549:	}else if(!strcmp(argv[1], "-D")){
    #####:  550:		delete_user = true;
    #####:  551:		if(argc != 4){
    #####:  552:			fprintf(stderr, "Error: -D argument given but password file or username missing.\n");
    #####:  553:			return 1;
        -:  554:		}else{
    #####:  555:			password_file_tmp = argv[2];
    #####:  556:			username = argv[3];
        -:  557:		}
    #####:  558:	}else if(!strcmp(argv[1], "-b")){
    #####:  559:		batch_mode = true;
    #####:  560:		if(argc != 5){
    #####:  561:			fprintf(stderr, "Error: -b argument given but password file, username or password missing.\n");
    #####:  562:			return 1;
        -:  563:		}else{
    #####:  564:			password_file_tmp = argv[2];
    #####:  565:			username = argv[3];
    #####:  566:			password_cmd = argv[4];
        -:  567:		}
    #####:  568:	}else if(!strcmp(argv[1], "-U")){
    #####:  569:		if(argc != 3){
    #####:  570:			fprintf(stderr, "Error: -U argument given but password file missing.\n");
    #####:  571:			return 1;
        -:  572:		}else{
    #####:  573:			do_update_file = true;
    #####:  574:			password_file_tmp = argv[2];
        -:  575:		}
    #####:  576:	}else if(argc == 3){
    #####:  577:		password_file_tmp = argv[1];
    #####:  578:		username = argv[2];
    #####:  579:	}else{
    #####:  580:		print_usage();
    #####:  581:		return 1;
        -:  582:	}
    #####:  583:	if(username && strlen(username) > 65535){
    #####:  584:		fprintf(stderr, "Error: Username must be less than 65536 characters long.\n");
    #####:  585:		return 1;
        -:  586:	}
    #####:  587:	if(password_cmd && strlen(password_cmd) > 65535){
    #####:  588:		fprintf(stderr, "Error: Password must be less than 65536 characters long.\n");
    #####:  589:		return 1;
        -:  590:	}
        -:  591:
        -:  592:#ifdef WIN32
        -:  593:	password_file = _fullpath(NULL, password_file_tmp, 0);
        -:  594:	if(!password_file){
        -:  595:		fprintf(stderr, "Error getting full path for password file.\n");
        -:  596:		return 1;
        -:  597:	}
        -:  598:#else
    #####:  599:	password_file = realpath(password_file_tmp, NULL);
    #####:  600:	if(!password_file){
    #####:  601:		if(errno == ENOENT){
    #####:  602:			password_file = strdup(password_file_tmp);
    #####:  603:			if(!password_file){
    #####:  604:				fprintf(stderr, "Error: Out of memory.\n");
    #####:  605:				return 1;
        -:  606:			}
    #####:  607:		}else{
    #####:  608:			fprintf(stderr, "Error reading password file: %s\n", strerror(errno));
    #####:  609:			return 1;
        -:  610:		}
    #####:  611:	}
        -:  612:#endif
        -:  613:
    #####:  614:	if(create_new){
    #####:  615:		rc = get_password(password, MAX_BUFFER_LEN);
    #####:  616:		if(rc){
    #####:  617:			free(password_file);
    #####:  618:			return rc;
        -:  619:		}
    #####:  620:		fptr = fopen(password_file, "wt");
    #####:  621:		if(!fptr){
    #####:  622:			fprintf(stderr, "Error: Unable to open file %s for writing. %s.\n", password_file, strerror(errno));
    #####:  623:			free(password_file);
    #####:  624:			return 1;
        -:  625:		}
    #####:  626:		free(password_file);
    #####:  627:		rc = output_new_password(fptr, username, password);
    #####:  628:		fclose(fptr);
    #####:  629:		return rc;
        -:  630:	}else{
    #####:  631:		fptr = fopen(password_file, "r+t");
    #####:  632:		if(!fptr){
    #####:  633:			fprintf(stderr, "Error: Unable to open password file %s. %s.\n", password_file, strerror(errno));
    #####:  634:			free(password_file);
    #####:  635:			return 1;
        -:  636:		}
        -:  637:
    #####:  638:		backup_file = malloc(strlen(password_file)+5);
    #####:  639:		if(!backup_file){
    #####:  640:			fprintf(stderr, "Error: Out of memory.\n");
    #####:  641:			free(password_file);
    #####:  642:			return 1;
        -:  643:		}
    #####:  644:		snprintf(backup_file, strlen(password_file)+5, "%s.tmp", password_file);
    #####:  645:		free(password_file);
    #####:  646:		password_file = NULL;
        -:  647:
    #####:  648:		if(create_backup(backup_file, fptr)){
    #####:  649:			fclose(fptr);
    #####:  650:			free(backup_file);
    #####:  651:			return 1;
        -:  652:		}
        -:  653:
    #####:  654:		ftmp = mpw_tmpfile();
    #####:  655:		if(!ftmp){
    #####:  656:			fprintf(stderr, "Error: Unable to open temporary file. %s.\n", strerror(errno));
    #####:  657:			fclose(fptr);
    #####:  658:			free(backup_file);
    #####:  659:			return 1;
        -:  660:		}
    #####:  661:		if(delete_user){
    #####:  662:			rc = delete_pwuser(fptr, ftmp, username);
    #####:  663:		}else if(do_update_file){
    #####:  664:			rc = update_file(fptr, ftmp);
    #####:  665:		}else{
    #####:  666:			if(batch_mode){
        -:  667:				/* Update password for individual user */
    #####:  668:				rc = update_pwuser(fptr, ftmp, username, password_cmd);
    #####:  669:			}else{
    #####:  670:				rc = get_password(password, MAX_BUFFER_LEN);
    #####:  671:				if(rc){
    #####:  672:					fclose(fptr);
    #####:  673:					fclose(ftmp);
    #####:  674:					unlink(backup_file);
    #####:  675:					free(backup_file);
    #####:  676:					return rc;
        -:  677:				}
        -:  678:				/* Update password for individual user */
    #####:  679:				rc = update_pwuser(fptr, ftmp, username, password);
        -:  680:			}
        -:  681:		}
    #####:  682:		if(rc){
    #####:  683:			fclose(fptr);
    #####:  684:			fclose(ftmp);
    #####:  685:			unlink(backup_file);
    #####:  686:			free(backup_file);
    #####:  687:			return rc;
        -:  688:		}
        -:  689:
    #####:  690:		if(copy_contents(ftmp, fptr)){
    #####:  691:			fclose(fptr);
    #####:  692:			fclose(ftmp);
    #####:  693:			fprintf(stderr, "Error occurred updating password file.\n");
    #####:  694:			fprintf(stderr, "Password file may be corrupt, check the backup file: %s.\n", backup_file);
    #####:  695:			free(backup_file);
    #####:  696:			return 1;
        -:  697:		}
    #####:  698:		fclose(fptr);
    #####:  699:		fclose(ftmp);
        -:  700:
        -:  701:		/* Everything was ok so backup no longer needed. May contain old
        -:  702:		 * passwords so shouldn't be kept around. */
    #####:  703:		unlink(backup_file);
    #####:  704:		free(backup_file);
        -:  705:	}
        -:  706:
    #####:  707:	return 0;
    #####:  708:}
