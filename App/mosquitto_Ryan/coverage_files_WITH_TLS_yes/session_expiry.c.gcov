        -:    0:Source:session_expiry.c
        -:    0:Graph:session_expiry.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2019-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <math.h>
        -:   20:#include <stdio.h>
        -:   21:#include <utlist.h>
        -:   22:
        -:   23:#include "mosquitto_broker_internal.h"
        -:   24:#include "memory_mosq.h"
        -:   25:#include "sys_tree.h"
        -:   26:#include "time_mosq.h"
        -:   27:
        -:   28:static struct session_expiry_list *expiry_list = NULL;
        -:   29:static time_t last_check = 0;
        -:   30:
        -:   31:
    #####:   32:static int session_expiry__cmp(struct session_expiry_list *i1, struct session_expiry_list *i2)
        -:   33:{
    #####:   34:	if(i1->context->session_expiry_time == i2->context->session_expiry_time){
    #####:   35:		return 0;
    #####:   36:	}else if(i1->context->session_expiry_time > i2->context->session_expiry_time){
    #####:   37:		return 1;
        -:   38:	}else{
    #####:   39:		return -1;
        -:   40:	}
    #####:   41:}
        -:   42:
        -:   43:
    #####:   44:int session_expiry__add(struct mosquitto_db *db, struct mosquitto *context)
        -:   45:{
        -:   46:	struct session_expiry_list *item;
        -:   47:
    #####:   48:	if(db->config->persistent_client_expiration == 0){
    #####:   49:		if(context->session_expiry_interval == UINT32_MAX){
        -:   50:			/* There isn't a global expiry set, and the client has asked to
        -:   51:			 * never expire, so we don't add it to the list. */
    #####:   52:			return MOSQ_ERR_SUCCESS;
        -:   53:		}
    #####:   54:	}
        -:   55:
    #####:   56:	item = mosquitto__calloc(1, sizeof(struct session_expiry_list));
    #####:   57:	if(!item) return MOSQ_ERR_NOMEM;
        -:   58:
    #####:   59:	item->context = context;
    #####:   60:	item->context->session_expiry_time = time(NULL);
        -:   61:
    #####:   62:	if(db->config->persistent_client_expiration == 0){
        -:   63:		/* No global expiry, so use the client expiration interval */
    #####:   64:		item->context->session_expiry_time += item->context->session_expiry_interval;
    #####:   65:	}else{
        -:   66:		/* We have a global expiry interval */
    #####:   67:		if(db->config->persistent_client_expiration < item->context->session_expiry_interval){
        -:   68:			/* The client expiry is longer than the global expiry, so use the global */
    #####:   69:			item->context->session_expiry_time += db->config->persistent_client_expiration;
    #####:   70:		}else{
        -:   71:			/* The global expiry is longer than the client expiry, so use the client */
    #####:   72:			item->context->session_expiry_time += item->context->session_expiry_interval;
        -:   73:		}
        -:   74:	}
    #####:   75:	context->expiry_list_item = item;
        -:   76:
    #####:   77:	DL_INSERT_INORDER(expiry_list, item, session_expiry__cmp);
        -:   78:
    #####:   79:	return MOSQ_ERR_SUCCESS;
    #####:   80:}
        -:   81:
        -:   82:
    #####:   83:void session_expiry__remove(struct mosquitto *context)
        -:   84:{
    #####:   85:	if(context->expiry_list_item){
    #####:   86:		DL_DELETE(expiry_list, context->expiry_list_item);
    #####:   87:		mosquitto__free(context->expiry_list_item);
    #####:   88:		context->expiry_list_item = NULL;
    #####:   89:	}
    #####:   90:}
        -:   91:
        -:   92:
        -:   93:/* Call on broker shutdown only */
    #####:   94:void session_expiry__remove_all(struct mosquitto_db *db)
        -:   95:{
        -:   96:	struct session_expiry_list *item, *tmp;
        -:   97:	struct mosquitto *context;
        -:   98:
    #####:   99:	DL_FOREACH_SAFE(expiry_list, item, tmp){
    #####:  100:		context = item->context;
    #####:  101:		session_expiry__remove(context);
    #####:  102:		context->session_expiry_interval = 0;
    #####:  103:		context->will_delay_interval = 0;
    #####:  104:		will_delay__remove(context);
    #####:  105:		context__disconnect(db, context);
    #####:  106:	}
        -:  107:	
    #####:  108:}
        -:  109:
    #####:  110:void session_expiry__check(struct mosquitto_db *db, time_t now)
        -:  111:{
        -:  112:	struct session_expiry_list *item, *tmp;
        -:  113:	struct mosquitto *context;
        -:  114:
    #####:  115:	if(now <= last_check) return;
        -:  116:
    #####:  117:	last_check = now;
        -:  118:
    #####:  119:	DL_FOREACH_SAFE(expiry_list, item, tmp){
    #####:  120:		if(item->context->session_expiry_time < now){
        -:  121:
    #####:  122:			context = item->context;
    #####:  123:			session_expiry__remove(context);
        -:  124:
    #####:  125:			if(context->id){
    #####:  126:				log__printf(NULL, MOSQ_LOG_NOTICE, "Expiring client %s due to timeout.", context->id);
    #####:  127:			}
        -:  128:			G_CLIENTS_EXPIRED_INC();
        -:  129:
        -:  130:			/* Session has now expired, so clear interval */
    #####:  131:			context->session_expiry_interval = 0;
        -:  132:			/* Session has expired, so will delay should be cleared. */
    #####:  133:			context->will_delay_interval = 0;
    #####:  134:			will_delay__remove(context);
    #####:  135:			context__send_will(db, context);
    #####:  136:			context__add_to_disused(db, context);
    #####:  137:		}else{
    #####:  138:			return;
        -:  139:		}
    #####:  140:	}
        -:  141:	
    #####:  142:}
        -:  143:
