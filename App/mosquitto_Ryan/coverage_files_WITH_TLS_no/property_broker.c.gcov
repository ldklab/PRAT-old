        -:    0:Source:property_broker.c
        -:    0:Graph:property_broker.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2018-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <stdio.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#include "mosquitto_broker_internal.h"
        -:   24:#include "mqtt_protocol.h"
        -:   25:#include "property_mosq.h"
        -:   26:
        -:   27:/* Process the incoming properties, we should be able to assume that only valid
        -:   28: * properties for CONNECT are present here. */
    #####:   29:int property__process_connect(struct mosquitto *context, mosquitto_property **props)
        -:   30:{
        -:   31:	mosquitto_property *p;
        -:   32:
    #####:   33:	p = *props;
        -:   34:
    #####:   35:	while(p){
    #####:   36:		if(p->identifier == MQTT_PROP_SESSION_EXPIRY_INTERVAL){
    #####:   37:			context->session_expiry_interval = p->value.i32;
    #####:   38:		}else if(p->identifier == MQTT_PROP_RECEIVE_MAXIMUM){
    #####:   39:			if(p->value.i16 == 0){
    #####:   40:				return MOSQ_ERR_PROTOCOL;
        -:   41:			}
        -:   42:
    #####:   43:			context->msgs_out.inflight_maximum = p->value.i16;
    #####:   44:			context->msgs_out.inflight_quota = context->msgs_out.inflight_maximum;
    #####:   45:		}else if(p->identifier == MQTT_PROP_MAXIMUM_PACKET_SIZE){
    #####:   46:			if(p->value.i32 == 0){
    #####:   47:				return MOSQ_ERR_PROTOCOL;
        -:   48:			}
    #####:   49:			context->maximum_packet_size = p->value.i32;
    #####:   50:		}
    #####:   51:		p = p->next;
        -:   52:	}
        -:   53:
    #####:   54:	return MOSQ_ERR_SUCCESS;
    #####:   55:}
        -:   56:
        -:   57:
    #####:   58:int property__process_will(struct mosquitto *context, struct mosquitto_message_all *msg, mosquitto_property **props)
        -:   59:{
        -:   60:	mosquitto_property *p, *p_prev;
        -:   61:	mosquitto_property *msg_properties, *msg_properties_last;
        -:   62:
    #####:   63:	p = *props;
    #####:   64:	p_prev = NULL;
    #####:   65:	msg_properties = NULL;
    #####:   66:	msg_properties_last = NULL;
    #####:   67:	while(p){
    #####:   68:		switch(p->identifier){
        -:   69:			case MQTT_PROP_CONTENT_TYPE:
        -:   70:			case MQTT_PROP_CORRELATION_DATA:
        -:   71:			case MQTT_PROP_PAYLOAD_FORMAT_INDICATOR:
        -:   72:			case MQTT_PROP_RESPONSE_TOPIC:
        -:   73:			case MQTT_PROP_USER_PROPERTY:
    #####:   74:				if(msg_properties){
    #####:   75:					msg_properties_last->next = p;
    #####:   76:					msg_properties_last = p;
    #####:   77:				}else{
    #####:   78:					msg_properties = p;
    #####:   79:					msg_properties_last = p;
        -:   80:				}
    #####:   81:				if(p_prev){
    #####:   82:					p_prev->next = p->next;
    #####:   83:					p = p_prev->next;
    #####:   84:				}else{
    #####:   85:					*props = p->next;
    #####:   86:					p = *props;
        -:   87:				}
    #####:   88:				msg_properties_last->next = NULL;
    #####:   89:				break;
        -:   90:
        -:   91:			case MQTT_PROP_WILL_DELAY_INTERVAL:
    #####:   92:				context->will_delay_interval = p->value.i32;
    #####:   93:				p_prev = p;
    #####:   94:				p = p->next;
    #####:   95:				break;
        -:   96:
        -:   97:			case MQTT_PROP_MESSAGE_EXPIRY_INTERVAL:
    #####:   98:				msg->expiry_interval = p->value.i32;
    #####:   99:				p_prev = p;
    #####:  100:				p = p->next;
    #####:  101:				break;
        -:  102:
        -:  103:			default:
    #####:  104:				return MOSQ_ERR_PROTOCOL;
        -:  105:				break;
        -:  106:		}
        -:  107:	}
        -:  108:
    #####:  109:	msg->properties = msg_properties;
    #####:  110:	return MOSQ_ERR_SUCCESS;
    #####:  111:}
        -:  112:
        -:  113:
        -:  114:/* Process the incoming properties, we should be able to assume that only valid
        -:  115: * properties for DISCONNECT are present here. */
    #####:  116:int property__process_disconnect(struct mosquitto *context, mosquitto_property **props)
        -:  117:{
        -:  118:	mosquitto_property *p;
        -:  119:
    #####:  120:	p = *props;
        -:  121:
    #####:  122:	while(p){
    #####:  123:		if(p->identifier == MQTT_PROP_SESSION_EXPIRY_INTERVAL){
    #####:  124:			if(context->session_expiry_interval == 0 && p->value.i32 != 0){
    #####:  125:				return MOSQ_ERR_PROTOCOL;
        -:  126:			}
    #####:  127:			context->session_expiry_interval = p->value.i32;
    #####:  128:		}
    #####:  129:		p = p->next;
        -:  130:	}
    #####:  131:	return MOSQ_ERR_SUCCESS;
    #####:  132:}
        -:  133:
