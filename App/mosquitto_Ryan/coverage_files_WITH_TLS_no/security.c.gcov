        -:    0:Source:security.c
        -:    0:Graph:security.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2011-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#include "mosquitto_broker_internal.h"
        -:   23:#include "mosquitto_plugin.h"
        -:   24:#include "memory_mosq.h"
        -:   25:#include "lib_load.h"
        -:   26:
        -:   27:typedef int (*FUNC_auth_plugin_version)(void);
        -:   28:
        -:   29:static int security__cleanup_single(struct mosquitto__security_options *opts, bool reload);
        -:   30:
    #####:   31:void LIB_ERROR(void)
        -:   32:{
        -:   33:#ifdef WIN32
        -:   34:	char *buf;
        -:   35:	FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_STRING,
        -:   36:			NULL, GetLastError(), LANG_NEUTRAL, &buf, 0, NULL);
        -:   37:	log__printf(NULL, MOSQ_LOG_ERR, "Load error: %s", buf);
        -:   38:	LocalFree(buf);
        -:   39:#else
    #####:   40:	log__printf(NULL, MOSQ_LOG_ERR, "Load error: %s", dlerror());
        -:   41:#endif
    #####:   42:}
        -:   43:
        -:   44:
    #####:   45:int security__load_v2(struct mosquitto__auth_plugin *plugin, struct mosquitto_auth_opt *auth_options, int auth_option_count, void *lib)
        -:   46:{
        -:   47:	int rc;
        -:   48:
    #####:   49:	if(!(plugin->plugin_init_v2 = (FUNC_auth_plugin_init_v2)LIB_SYM(lib, "mosquitto_auth_plugin_init"))){
    #####:   50:		log__printf(NULL, MOSQ_LOG_ERR,
        -:   51:				"Error: Unable to load auth plugin function mosquitto_auth_plugin_init().");
    #####:   52:		LIB_ERROR();
    #####:   53:		LIB_CLOSE(lib);
    #####:   54:		return 1;
        -:   55:	}
    #####:   56:	if(!(plugin->plugin_cleanup_v2 = (FUNC_auth_plugin_cleanup_v2)LIB_SYM(lib, "mosquitto_auth_plugin_cleanup"))){
    #####:   57:		log__printf(NULL, MOSQ_LOG_ERR,
        -:   58:				"Error: Unable to load auth plugin function mosquitto_auth_plugin_cleanup().");
    #####:   59:		LIB_ERROR();
    #####:   60:		LIB_CLOSE(lib);
    #####:   61:		return 1;
        -:   62:	}
        -:   63:
    #####:   64:	if(!(plugin->security_init_v2 = (FUNC_auth_plugin_security_init_v2)LIB_SYM(lib, "mosquitto_auth_security_init"))){
    #####:   65:		log__printf(NULL, MOSQ_LOG_ERR,
        -:   66:				"Error: Unable to load auth plugin function mosquitto_auth_security_init().");
    #####:   67:		LIB_ERROR();
    #####:   68:		LIB_CLOSE(lib);
    #####:   69:		return 1;
        -:   70:	}
        -:   71:
    #####:   72:	if(!(plugin->security_cleanup_v2 = (FUNC_auth_plugin_security_cleanup_v2)LIB_SYM(lib, "mosquitto_auth_security_cleanup"))){
    #####:   73:		log__printf(NULL, MOSQ_LOG_ERR,
        -:   74:				"Error: Unable to load auth plugin function mosquitto_auth_security_cleanup().");
    #####:   75:		LIB_ERROR();
    #####:   76:		LIB_CLOSE(lib);
    #####:   77:		return 1;
        -:   78:	}
        -:   79:
    #####:   80:	if(!(plugin->acl_check_v2 = (FUNC_auth_plugin_acl_check_v2)LIB_SYM(lib, "mosquitto_auth_acl_check"))){
    #####:   81:		log__printf(NULL, MOSQ_LOG_ERR,
        -:   82:				"Error: Unable to load auth plugin function mosquitto_auth_acl_check().");
    #####:   83:		LIB_ERROR();
    #####:   84:		LIB_CLOSE(lib);
    #####:   85:		return 1;
        -:   86:	}
        -:   87:
    #####:   88:	if(!(plugin->unpwd_check_v2 = (FUNC_auth_plugin_unpwd_check_v2)LIB_SYM(lib, "mosquitto_auth_unpwd_check"))){
    #####:   89:		log__printf(NULL, MOSQ_LOG_ERR,
        -:   90:				"Error: Unable to load auth plugin function mosquitto_auth_unpwd_check().");
    #####:   91:		LIB_ERROR();
    #####:   92:		LIB_CLOSE(lib);
    #####:   93:		return 1;
        -:   94:	}
        -:   95:
    #####:   96:	if(!(plugin->psk_key_get_v2 = (FUNC_auth_plugin_psk_key_get_v2)LIB_SYM(lib, "mosquitto_auth_psk_key_get"))){
    #####:   97:		log__printf(NULL, MOSQ_LOG_ERR,
        -:   98:				"Error: Unable to load auth plugin function mosquitto_auth_psk_key_get().");
    #####:   99:		LIB_ERROR();
    #####:  100:		LIB_CLOSE(lib);
    #####:  101:		return 1;
        -:  102:	}
        -:  103:
    #####:  104:	plugin->lib = lib;
    #####:  105:	plugin->user_data = NULL;
        -:  106:
    #####:  107:	if(plugin->plugin_init_v2){
    #####:  108:		rc = plugin->plugin_init_v2(&plugin->user_data, auth_options, auth_option_count);
    #####:  109:		if(rc){
    #####:  110:			log__printf(NULL, MOSQ_LOG_ERR,
    #####:  111:					"Error: Authentication plugin returned %d when initialising.", rc);
    #####:  112:			return rc;
        -:  113:		}
    #####:  114:	}
    #####:  115:	return 0;
    #####:  116:}
        -:  117:
        -:  118:
    #####:  119:int security__load_v3(struct mosquitto__auth_plugin *plugin, struct mosquitto_opt *auth_options, int auth_option_count, void *lib)
        -:  120:{
        -:  121:	int rc;
        -:  122:
    #####:  123:	if(!(plugin->plugin_init_v3 = (FUNC_auth_plugin_init_v3)LIB_SYM(lib, "mosquitto_auth_plugin_init"))){
    #####:  124:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  125:				"Error: Unable to load auth plugin function mosquitto_auth_plugin_init().");
    #####:  126:		LIB_ERROR();
    #####:  127:		LIB_CLOSE(lib);
    #####:  128:		return 1;
        -:  129:	}
    #####:  130:	if(!(plugin->plugin_cleanup_v3 = (FUNC_auth_plugin_cleanup_v3)LIB_SYM(lib, "mosquitto_auth_plugin_cleanup"))){
    #####:  131:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  132:				"Error: Unable to load auth plugin function mosquitto_auth_plugin_cleanup().");
    #####:  133:		LIB_ERROR();
    #####:  134:		LIB_CLOSE(lib);
    #####:  135:		return 1;
        -:  136:	}
        -:  137:
    #####:  138:	if(!(plugin->security_init_v3 = (FUNC_auth_plugin_security_init_v3)LIB_SYM(lib, "mosquitto_auth_security_init"))){
    #####:  139:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  140:				"Error: Unable to load auth plugin function mosquitto_auth_security_init().");
    #####:  141:		LIB_ERROR();
    #####:  142:		LIB_CLOSE(lib);
    #####:  143:		return 1;
        -:  144:	}
        -:  145:
    #####:  146:	if(!(plugin->security_cleanup_v3 = (FUNC_auth_plugin_security_cleanup_v3)LIB_SYM(lib, "mosquitto_auth_security_cleanup"))){
    #####:  147:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  148:				"Error: Unable to load auth plugin function mosquitto_auth_security_cleanup().");
    #####:  149:		LIB_ERROR();
    #####:  150:		LIB_CLOSE(lib);
    #####:  151:		return 1;
        -:  152:	}
        -:  153:
    #####:  154:	if(!(plugin->acl_check_v3 = (FUNC_auth_plugin_acl_check_v3)LIB_SYM(lib, "mosquitto_auth_acl_check"))){
    #####:  155:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  156:				"Error: Unable to load auth plugin function mosquitto_auth_acl_check().");
    #####:  157:		LIB_ERROR();
    #####:  158:		LIB_CLOSE(lib);
    #####:  159:		return 1;
        -:  160:	}
        -:  161:
    #####:  162:	if(!(plugin->unpwd_check_v3 = (FUNC_auth_plugin_unpwd_check_v3)LIB_SYM(lib, "mosquitto_auth_unpwd_check"))){
    #####:  163:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  164:				"Error: Unable to load auth plugin function mosquitto_auth_unpwd_check().");
    #####:  165:		LIB_ERROR();
    #####:  166:		LIB_CLOSE(lib);
    #####:  167:		return 1;
        -:  168:	}
        -:  169:
    #####:  170:	if(!(plugin->psk_key_get_v3 = (FUNC_auth_plugin_psk_key_get_v3)LIB_SYM(lib, "mosquitto_auth_psk_key_get"))){
    #####:  171:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  172:				"Error: Unable to load auth plugin function mosquitto_auth_psk_key_get().");
    #####:  173:		LIB_ERROR();
    #####:  174:		LIB_CLOSE(lib);
    #####:  175:		return 1;
        -:  176:	}
        -:  177:
    #####:  178:	plugin->lib = lib;
    #####:  179:	plugin->user_data = NULL;
    #####:  180:	if(plugin->plugin_init_v3){
    #####:  181:		rc = plugin->plugin_init_v3(&plugin->user_data, auth_options, auth_option_count);
    #####:  182:		if(rc){
    #####:  183:			log__printf(NULL, MOSQ_LOG_ERR,
    #####:  184:					"Error: Authentication plugin returned %d when initialising.", rc);
    #####:  185:			return rc;
        -:  186:		}
    #####:  187:	}
    #####:  188:	return 0;
    #####:  189:}
        -:  190:
        -:  191:
    #####:  192:int security__load_v4(struct mosquitto__auth_plugin *plugin, struct mosquitto_opt *auth_options, int auth_option_count, void *lib)
        -:  193:{
        -:  194:	int rc;
        -:  195:
    #####:  196:	if(!(plugin->plugin_init_v4 = (FUNC_auth_plugin_init_v4)LIB_SYM(lib, "mosquitto_auth_plugin_init"))){
    #####:  197:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  198:				"Error: Unable to load auth plugin function mosquitto_auth_plugin_init().");
    #####:  199:		LIB_ERROR();
    #####:  200:		LIB_CLOSE(lib);
    #####:  201:		return 1;
        -:  202:	}
    #####:  203:	if(!(plugin->plugin_cleanup_v4 = (FUNC_auth_plugin_cleanup_v4)LIB_SYM(lib, "mosquitto_auth_plugin_cleanup"))){
    #####:  204:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  205:				"Error: Unable to load auth plugin function mosquitto_auth_plugin_cleanup().");
    #####:  206:		LIB_ERROR();
    #####:  207:		LIB_CLOSE(lib);
    #####:  208:		return 1;
        -:  209:	}
        -:  210:
    #####:  211:	if(!(plugin->security_init_v4 = (FUNC_auth_plugin_security_init_v4)LIB_SYM(lib, "mosquitto_auth_security_init"))){
    #####:  212:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  213:				"Error: Unable to load auth plugin function mosquitto_auth_security_init().");
    #####:  214:		LIB_ERROR();
    #####:  215:		LIB_CLOSE(lib);
    #####:  216:		return 1;
        -:  217:	}
        -:  218:
    #####:  219:	if(!(plugin->security_cleanup_v4 = (FUNC_auth_plugin_security_cleanup_v4)LIB_SYM(lib, "mosquitto_auth_security_cleanup"))){
    #####:  220:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  221:				"Error: Unable to load auth plugin function mosquitto_auth_security_cleanup().");
    #####:  222:		LIB_ERROR();
    #####:  223:		LIB_CLOSE(lib);
    #####:  224:		return 1;
        -:  225:	}
        -:  226:
    #####:  227:	if(!(plugin->acl_check_v4 = (FUNC_auth_plugin_acl_check_v4)LIB_SYM(lib, "mosquitto_auth_acl_check"))){
    #####:  228:		log__printf(NULL, MOSQ_LOG_ERR,
        -:  229:				"Error: Unable to load auth plugin function mosquitto_auth_acl_check().");
    #####:  230:		LIB_ERROR();
    #####:  231:		LIB_CLOSE(lib);
    #####:  232:		return 1;
        -:  233:	}
        -:  234:
    #####:  235:	plugin->unpwd_check_v4 = (FUNC_auth_plugin_unpwd_check_v4)LIB_SYM(lib, "mosquitto_auth_unpwd_check");
    #####:  236:	if(plugin->unpwd_check_v4){
    #####:  237:		log__printf(NULL, MOSQ_LOG_INFO,
        -:  238:				" ├── Username/password checking enabled.");
    #####:  239:	}else{
    #####:  240:		log__printf(NULL, MOSQ_LOG_INFO,
        -:  241:				" ├── Username/password checking not enabled.");
        -:  242:	}
        -:  243:
    #####:  244:	plugin->psk_key_get_v4 = (FUNC_auth_plugin_psk_key_get_v4)LIB_SYM(lib, "mosquitto_auth_psk_key_get");
    #####:  245:	if(plugin->psk_key_get_v4){
    #####:  246:		log__printf(NULL, MOSQ_LOG_INFO,
        -:  247:				" ├── TLS-PSK checking enabled.");
    #####:  248:	}else{
    #####:  249:		log__printf(NULL, MOSQ_LOG_INFO,
        -:  250:				" ├── TLS-PSK checking not enabled.");
        -:  251:	}
        -:  252:
    #####:  253:	plugin->auth_start_v4 = (FUNC_auth_plugin_auth_start_v4)LIB_SYM(lib, "mosquitto_auth_start");
    #####:  254:	plugin->auth_continue_v4 = (FUNC_auth_plugin_auth_continue_v4)LIB_SYM(lib, "mosquitto_auth_continue");
        -:  255:	
    #####:  256:	if(plugin->auth_start_v4){
    #####:  257:		if(plugin->auth_continue_v4){
    #####:  258:			log__printf(NULL, MOSQ_LOG_INFO,
        -:  259:					" └── Extended authentication enabled.");
    #####:  260:		}else{
    #####:  261:			log__printf(NULL, MOSQ_LOG_ERR,
        -:  262:					"Error: Plugin has missing mosquitto_auth_continue() function.");
    #####:  263:			LIB_CLOSE(lib);
    #####:  264:			return 1;
        -:  265:		}
    #####:  266:	}else{
    #####:  267:		log__printf(NULL, MOSQ_LOG_INFO,
        -:  268:				" └── Extended authentication not enabled.");
        -:  269:	}
        -:  270:
    #####:  271:	plugin->lib = lib;
    #####:  272:	plugin->user_data = NULL;
    #####:  273:	if(plugin->plugin_init_v4){
    #####:  274:		rc = plugin->plugin_init_v4(&plugin->user_data, auth_options, auth_option_count);
    #####:  275:		if(rc){
    #####:  276:			log__printf(NULL, MOSQ_LOG_ERR,
    #####:  277:					"Error: Authentication plugin returned %d when initialising.", rc);
    #####:  278:			return rc;
        -:  279:		}
    #####:  280:	}
    #####:  281:	return 0;
    #####:  282:}
        -:  283:
        -:  284:
    #####:  285:static int security__module_init_single(struct mosquitto__security_options *opts)
        -:  286:{
        -:  287:	void *lib;
    #####:  288:	int (*plugin_version)(void) = NULL;
        -:  289:	int version;
        -:  290:	int i;
        -:  291:	int rc;
        -:  292:
    #####:  293:	if(opts->auth_plugin_config_count == 0){
    #####:  294:		return MOSQ_ERR_SUCCESS;
        -:  295:	}
        -:  296:
    #####:  297:	for(i=0; i<opts->auth_plugin_config_count; i++){
    #####:  298:		if(opts->auth_plugin_configs[i].path){
    #####:  299:			memset(&opts->auth_plugin_configs[i].plugin, 0, sizeof(struct mosquitto__auth_plugin));
        -:  300:
    #####:  301:			log__printf(NULL, MOSQ_LOG_INFO, "Loading plugin: %s", opts->auth_plugin_configs[i].path);
        -:  302:
    #####:  303:			lib = LIB_LOAD(opts->auth_plugin_configs[i].path);
    #####:  304:			if(!lib){
    #####:  305:				log__printf(NULL, MOSQ_LOG_ERR,
    #####:  306:						"Error: Unable to load auth plugin \"%s\".", opts->auth_plugin_configs[i].path);
    #####:  307:				LIB_ERROR();
    #####:  308:				return 1;
        -:  309:			}
        -:  310:
    #####:  311:			opts->auth_plugin_configs[i].plugin.lib = NULL;
    #####:  312:			if(!(plugin_version = (FUNC_auth_plugin_version)LIB_SYM(lib, "mosquitto_auth_plugin_version"))){
    #####:  313:				log__printf(NULL, MOSQ_LOG_ERR,
        -:  314:						"Error: Unable to load auth plugin function mosquitto_auth_plugin_version().");
    #####:  315:				LIB_ERROR();
    #####:  316:				LIB_CLOSE(lib);
    #####:  317:				return 1;
        -:  318:			}
    #####:  319:			version = plugin_version();
    #####:  320:			opts->auth_plugin_configs[i].plugin.version = version;
    #####:  321:			if(version == 4){
    #####:  322:				rc = security__load_v4(
    #####:  323:						&opts->auth_plugin_configs[i].plugin,
    #####:  324:						opts->auth_plugin_configs[i].options,
    #####:  325:						opts->auth_plugin_configs[i].option_count,
    #####:  326:						lib);
        -:  327:
    #####:  328:				if(rc){
    #####:  329:					return rc;
        -:  330:				}
    #####:  331:			}else if(version == 3){
    #####:  332:				rc = security__load_v3(
    #####:  333:						&opts->auth_plugin_configs[i].plugin,
    #####:  334:						opts->auth_plugin_configs[i].options,
    #####:  335:						opts->auth_plugin_configs[i].option_count,
    #####:  336:						lib);
        -:  337:
    #####:  338:				if(rc){
    #####:  339:					return rc;
        -:  340:				}
    #####:  341:			}else if(version == 2){
    #####:  342:				rc = security__load_v2(
    #####:  343:						&opts->auth_plugin_configs[i].plugin,
    #####:  344:						(struct mosquitto_auth_opt *)opts->auth_plugin_configs[i].options,
    #####:  345:						opts->auth_plugin_configs[i].option_count,
    #####:  346:						lib);
        -:  347:
    #####:  348:				if(rc){
    #####:  349:					return rc;
        -:  350:				}
    #####:  351:			}else{
    #####:  352:				log__printf(NULL, MOSQ_LOG_ERR,
        -:  353:						"Error: Incorrect auth plugin version (got %d, expected %d).",
    #####:  354:						version, MOSQ_AUTH_PLUGIN_VERSION);
    #####:  355:				LIB_ERROR();
        -:  356:
    #####:  357:				LIB_CLOSE(lib);
    #####:  358:				return 1;
        -:  359:			}
    #####:  360:		}
    #####:  361:	}
    #####:  362:	return MOSQ_ERR_SUCCESS;
    #####:  363:}
        -:  364:
        -:  365:
    #####:  366:int mosquitto_security_module_init(struct mosquitto_db *db)
        -:  367:{
    #####:  368:	int rc = MOSQ_ERR_SUCCESS;
        -:  369:	int i;
        -:  370:
    #####:  371:	if(db->config->per_listener_settings){
    #####:  372:		for(i=0; i<db->config->listener_count; i++){
    #####:  373:			rc = security__module_init_single(&db->config->listeners[i].security_options);
    #####:  374:			if(rc) return rc;
    #####:  375:		}
    #####:  376:	}else{
    #####:  377:		rc = security__module_init_single(&db->config->security_options);
        -:  378:	}
    #####:  379:	return rc;
    #####:  380:}
        -:  381:
        -:  382:
    #####:  383:static void security__module_cleanup_single(struct mosquitto__security_options *opts)
        -:  384:{
        -:  385:	int i;
        -:  386:
    #####:  387:	for(i=0; i<opts->auth_plugin_config_count; i++){
        -:  388:		/* Run plugin cleanup function */
    #####:  389:		if(opts->auth_plugin_configs[i].plugin.version == 4){
    #####:  390:			opts->auth_plugin_configs[i].plugin.plugin_cleanup_v4(
    #####:  391:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  392:					opts->auth_plugin_configs[i].options,
    #####:  393:					opts->auth_plugin_configs[i].option_count);
        -:  394:
    #####:  395:		}else if(opts->auth_plugin_configs[i].plugin.version == 3){
    #####:  396:			opts->auth_plugin_configs[i].plugin.plugin_cleanup_v3(
    #####:  397:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  398:					opts->auth_plugin_configs[i].options,
    #####:  399:					opts->auth_plugin_configs[i].option_count);
        -:  400:
    #####:  401:		}else if(opts->auth_plugin_configs[i].plugin.version == 2){
    #####:  402:			opts->auth_plugin_configs[i].plugin.plugin_cleanup_v2(
    #####:  403:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  404:					(struct mosquitto_auth_opt *)opts->auth_plugin_configs[i].options,
    #####:  405:					opts->auth_plugin_configs[i].option_count);
    #####:  406:		}
        -:  407:
    #####:  408:		if(opts->auth_plugin_configs[i].plugin.lib){
    #####:  409:			LIB_CLOSE(opts->auth_plugin_configs[i].plugin.lib);
    #####:  410:		}
    #####:  411:		memset(&opts->auth_plugin_configs[i].plugin, 0, sizeof(struct mosquitto__auth_plugin));
    #####:  412:	}
    #####:  413:}
        -:  414:
        -:  415:
    #####:  416:int mosquitto_security_module_cleanup(struct mosquitto_db *db)
        -:  417:{
        -:  418:	int i;
        -:  419:
    #####:  420:	mosquitto_security_cleanup(db, false);
        -:  421:
    #####:  422:	security__module_cleanup_single(&db->config->security_options);
        -:  423:
    #####:  424:	for(i=0; i<db->config->listener_count; i++){
    #####:  425:		security__module_cleanup_single(&db->config->listeners[i].security_options);
    #####:  426:	}
        -:  427:
    #####:  428:	return MOSQ_ERR_SUCCESS;
        -:  429:}
        -:  430:
        -:  431:
    #####:  432:static int security__init_single(struct mosquitto__security_options *opts, bool reload)
        -:  433:{
        -:  434:	int i;
        -:  435:	int rc;
        -:  436:
    #####:  437:	for(i=0; i<opts->auth_plugin_config_count; i++){
    #####:  438:		if(opts->auth_plugin_configs[i].plugin.version == 4){
    #####:  439:			rc = opts->auth_plugin_configs[i].plugin.security_init_v4(
    #####:  440:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  441:					opts->auth_plugin_configs[i].options,
    #####:  442:					opts->auth_plugin_configs[i].option_count,
    #####:  443:					reload);
        -:  444:
    #####:  445:		}else if(opts->auth_plugin_configs[i].plugin.version == 3){
    #####:  446:			rc = opts->auth_plugin_configs[i].plugin.security_init_v3(
    #####:  447:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  448:					opts->auth_plugin_configs[i].options,
    #####:  449:					opts->auth_plugin_configs[i].option_count,
    #####:  450:					reload);
        -:  451:
    #####:  452:		}else if(opts->auth_plugin_configs[i].plugin.version == 2){
    #####:  453:			rc = opts->auth_plugin_configs[i].plugin.security_init_v2(
    #####:  454:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  455:					(struct mosquitto_auth_opt *)opts->auth_plugin_configs[i].options,
    #####:  456:					opts->auth_plugin_configs[i].option_count,
    #####:  457:					reload);
    #####:  458:		}else{
    #####:  459:			rc = MOSQ_ERR_INVAL;
        -:  460:		}
    #####:  461:		if(rc != MOSQ_ERR_SUCCESS){
    #####:  462:			return rc;
        -:  463:		}
    #####:  464:	}
    #####:  465:	return MOSQ_ERR_SUCCESS;
    #####:  466:}
        -:  467:
        -:  468:
    #####:  469:int mosquitto_security_init(struct mosquitto_db *db, bool reload)
        -:  470:{
        -:  471:	int i;
        -:  472:	int rc;
        -:  473:
    #####:  474:	if(db->config->per_listener_settings){
    #####:  475:		for(i=0; i<db->config->listener_count; i++){
    #####:  476:			rc = security__init_single(&db->config->listeners[i].security_options, reload);
    #####:  477:			if(rc != MOSQ_ERR_SUCCESS) return rc;
    #####:  478:		}
    #####:  479:	}else{
    #####:  480:		rc = security__init_single(&db->config->security_options, reload);
    #####:  481:		if(rc != MOSQ_ERR_SUCCESS) return rc;
        -:  482:	}
    #####:  483:	return mosquitto_security_init_default(db, reload);
    #####:  484:}
        -:  485:
        -:  486:/* Apply security settings after a reload.
        -:  487: * Includes:
        -:  488: * - Disconnecting anonymous users if appropriate
        -:  489: * - Disconnecting users with invalid passwords
        -:  490: * - Reapplying ACLs
        -:  491: */
    #####:  492:int mosquitto_security_apply(struct mosquitto_db *db)
        -:  493:{
    #####:  494:	return mosquitto_security_apply_default(db);
        -:  495:}
        -:  496:
        -:  497:
    #####:  498:static int security__cleanup_single(struct mosquitto__security_options *opts, bool reload)
        -:  499:{
        -:  500:	int i;
        -:  501:	int rc;
        -:  502:
    #####:  503:	for(i=0; i<opts->auth_plugin_config_count; i++){
    #####:  504:		if(opts->auth_plugin_configs[i].plugin.version == 4){
    #####:  505:			rc = opts->auth_plugin_configs[i].plugin.security_cleanup_v4(
    #####:  506:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  507:					opts->auth_plugin_configs[i].options,
    #####:  508:					opts->auth_plugin_configs[i].option_count,
    #####:  509:					reload);
        -:  510:
    #####:  511:		}else if(opts->auth_plugin_configs[i].plugin.version == 3){
    #####:  512:			rc = opts->auth_plugin_configs[i].plugin.security_cleanup_v3(
    #####:  513:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  514:					opts->auth_plugin_configs[i].options,
    #####:  515:					opts->auth_plugin_configs[i].option_count,
    #####:  516:					reload);
        -:  517:
    #####:  518:		}else if(opts->auth_plugin_configs[i].plugin.version == 2){
    #####:  519:			rc = opts->auth_plugin_configs[i].plugin.security_cleanup_v2(
    #####:  520:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  521:					(struct mosquitto_auth_opt *)opts->auth_plugin_configs[i].options,
    #####:  522:					opts->auth_plugin_configs[i].option_count,
    #####:  523:					reload);
    #####:  524:		}else{
    #####:  525:			rc = MOSQ_ERR_INVAL;
        -:  526:		}
    #####:  527:		if(rc != MOSQ_ERR_SUCCESS){
    #####:  528:			return rc;
        -:  529:		}
    #####:  530:	}
        -:  531:
    #####:  532:	return MOSQ_ERR_SUCCESS;
    #####:  533:}
        -:  534:
        -:  535:
    #####:  536:int mosquitto_security_cleanup(struct mosquitto_db *db, bool reload)
        -:  537:{
        -:  538:	int i;
        -:  539:	int rc;
        -:  540:
    #####:  541:	rc = security__cleanup_single(&db->config->security_options, reload);
    #####:  542:	if(rc != MOSQ_ERR_SUCCESS) return rc;
        -:  543:
    #####:  544:	for(i=0; i<db->config->listener_count; i++){
    #####:  545:		rc = security__cleanup_single(&db->config->listeners[i].security_options, reload);
    #####:  546:		if(rc != MOSQ_ERR_SUCCESS) return rc;
    #####:  547:	}
    #####:  548:	return mosquitto_security_cleanup_default(db, reload);
    #####:  549:}
        -:  550:
        -:  551:
        -:  552://int mosquitto_acl_check(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int access)
    #####:  553:static int acl__check_single(struct mosquitto__auth_plugin_config *auth_plugin, struct mosquitto *context, struct mosquitto_acl_msg *msg, int access)
        -:  554:{
        -:  555:	const char *username;
    #####:  556:	const char *topic = msg->topic;
        -:  557:
    #####:  558:	username = mosquitto_client_username(context);
    #####:  559:	if(auth_plugin->deny_special_chars == true){
        -:  560:		/* Check whether the client id or username contains a +, # or / and if
        -:  561:		* so deny access.
        -:  562:		*
        -:  563:		* Do this check for every message regardless, we have to protect the
        -:  564:		* plugins against possible pattern based attacks.
        -:  565:		*/
    #####:  566:		if(username && strpbrk(username, "+#")){
    #####:  567:			log__printf(NULL, MOSQ_LOG_NOTICE, "ACL denying access to client with dangerous username \"%s\"", username);
    #####:  568:			return MOSQ_ERR_ACL_DENIED;
        -:  569:		}
    #####:  570:		if(context->id && strpbrk(context->id, "+#")){
    #####:  571:			log__printf(NULL, MOSQ_LOG_NOTICE, "ACL denying access to client with dangerous client id \"%s\"", context->id);
    #####:  572:			return MOSQ_ERR_ACL_DENIED;
        -:  573:		}
    #####:  574:	}
        -:  575:
    #####:  576:	if(auth_plugin->plugin.version == 4){
    #####:  577:		return auth_plugin->plugin.acl_check_v4(auth_plugin->plugin.user_data, access, context, msg);
    #####:  578:	}else if(auth_plugin->plugin.version == 3){
    #####:  579:		return auth_plugin->plugin.acl_check_v3(auth_plugin->plugin.user_data, access, context, msg);
    #####:  580:	}else if(auth_plugin->plugin.version == 2){
    #####:  581:		if(access == MOSQ_ACL_SUBSCRIBE){
    #####:  582:			return MOSQ_ERR_SUCCESS;
        -:  583:		}
    #####:  584:		return auth_plugin->plugin.acl_check_v2(auth_plugin->plugin.user_data, context->id, username, topic, access);
        -:  585:	}else{
    #####:  586:		return MOSQ_ERR_INVAL;
        -:  587:	}
    #####:  588:}
        -:  589:
        -:  590:
    #####:  591:static int acl__check_dollar(const char *topic, int access)
        -:  592:{
        -:  593:	int rc;
    #####:  594:	bool match = false;
        -:  595:
    #####:  596:	if(topic[0] != '$') return MOSQ_ERR_SUCCESS;
        -:  597:
    #####:  598:	if(!strncmp(topic, "$SYS", 4)){
    #####:  599:		if(access == MOSQ_ACL_WRITE){
        -:  600:			/* Potentially allow write access for bridge status, otherwise explicitly deny. */
    #####:  601:			rc = mosquitto_topic_matches_sub("$SYS/broker/connection/+/state", topic, &match);
    #####:  602:			if(rc == MOSQ_ERR_SUCCESS && match == true){
    #####:  603:				return MOSQ_ERR_SUCCESS;
        -:  604:			}else{
    #####:  605:				return MOSQ_ERR_ACL_DENIED;
        -:  606:			}
        -:  607:		}else{
    #####:  608:			return MOSQ_ERR_SUCCESS;
        -:  609:		}
    #####:  610:	}else if(!strncmp(topic, "$share", 6)){
        -:  611:		/* Only allow sub/unsub to shared subscriptions */
    #####:  612:		if(access == MOSQ_ACL_SUBSCRIBE){
        -:  613:		//FIXME if(access == MOSQ_ACL_SUBSCRIBE || access == MOSQ_ACL_UNSUBSCRIBE){
    #####:  614:			return MOSQ_ERR_SUCCESS;
        -:  615:		}else{
    #####:  616:			return MOSQ_ERR_ACL_DENIED;
        -:  617:		}
        -:  618:	}else{
        -:  619:		/* This is an unknown $ topic, for the moment just defer to actual tests. */
    #####:  620:		return MOSQ_ERR_SUCCESS;
        -:  621:	}
    #####:  622:}
        -:  623:
        -:  624:
    #####:  625:int mosquitto_acl_check(struct mosquitto_db *db, struct mosquitto *context, const char *topic, long payloadlen, void* payload, int qos, bool retain, int access)
        -:  626:{
        -:  627:	int rc;
        -:  628:	int i;
        -:  629:	struct mosquitto__security_options *opts;
        -:  630:	struct mosquitto_acl_msg msg;
        -:  631:
    #####:  632:	if(!context->id){
    #####:  633:		return MOSQ_ERR_ACL_DENIED;
        -:  634:	}
        -:  635:
    #####:  636:	rc = acl__check_dollar(topic, access);
    #####:  637:	if(rc) return rc;
        -:  638:
    #####:  639:	rc = mosquitto_acl_check_default(db, context, topic, access);
    #####:  640:	if(rc != MOSQ_ERR_PLUGIN_DEFER){
    #####:  641:		return rc;
        -:  642:	}
        -:  643:	/* Default check has accepted or deferred at this point.
        -:  644:	 * If no plugins exist we should accept at this point so set rc to success.
        -:  645:	 */
    #####:  646:	rc = MOSQ_ERR_SUCCESS;
        -:  647:
    #####:  648:	if(db->config->per_listener_settings){
    #####:  649:		opts = &context->listener->security_options;
    #####:  650:	}else{
    #####:  651:		opts = &db->config->security_options;
        -:  652:	}
        -:  653:
    #####:  654:	memset(&msg, 0, sizeof(msg));
    #####:  655:	msg.topic = topic;
    #####:  656:	msg.payloadlen = payloadlen;
    #####:  657:	msg.payload = payload;
    #####:  658:	msg.qos = qos;
    #####:  659:	msg.retain = retain;
        -:  660:
    #####:  661:	for(i=0; i<opts->auth_plugin_config_count; i++){
    #####:  662:		rc = acl__check_single(&opts->auth_plugin_configs[i], context, &msg, access);
    #####:  663:		if(rc != MOSQ_ERR_PLUGIN_DEFER){
    #####:  664:			return rc;
        -:  665:		}
    #####:  666:	}
        -:  667:
        -:  668:	/* If all plugins deferred, this is a denial. If rc == MOSQ_ERR_SUCCESS
        -:  669:	 * here, then no plugins were configured. */
    #####:  670:	if(rc == MOSQ_ERR_PLUGIN_DEFER){
    #####:  671:		rc = MOSQ_ERR_ACL_DENIED;
    #####:  672:	}
    #####:  673:	return rc;
    #####:  674:}
        -:  675:
    #####:  676:int mosquitto_unpwd_check(struct mosquitto_db *db, struct mosquitto *context, const char *username, const char *password)
        -:  677:{
        -:  678:	int rc;
        -:  679:	int i;
        -:  680:	struct mosquitto__security_options *opts;
        -:  681:
    #####:  682:	rc = mosquitto_unpwd_check_default(db, context, username, password);
    #####:  683:	if(rc != MOSQ_ERR_PLUGIN_DEFER){
    #####:  684:		return rc;
        -:  685:	}
        -:  686:	/* Default check has accepted or deferred at this point.
        -:  687:	 * If no plugins exist we should accept at this point so set rc to success.
        -:  688:	 */
    #####:  689:	if(db->config->per_listener_settings){
    #####:  690:		opts = &context->listener->security_options;
    #####:  691:	}else{
    #####:  692:		opts = &db->config->security_options;
        -:  693:	}
        -:  694:
    #####:  695:	rc = MOSQ_ERR_SUCCESS;
    #####:  696:	for(i=0; i<opts->auth_plugin_config_count; i++){
    #####:  697:		if(opts->auth_plugin_configs[i].plugin.version == 4 
    #####:  698:				&& opts->auth_plugin_configs[i].plugin.unpwd_check_v4){
        -:  699:
    #####:  700:			rc = opts->auth_plugin_configs[i].plugin.unpwd_check_v4(
    #####:  701:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  702:					context,
    #####:  703:					username,
    #####:  704:					password);
        -:  705:
    #####:  706:		}else if(opts->auth_plugin_configs[i].plugin.version == 3){
    #####:  707:			rc = opts->auth_plugin_configs[i].plugin.unpwd_check_v3(
    #####:  708:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  709:					context,
    #####:  710:					username,
    #####:  711:					password);
        -:  712:
    #####:  713:		}else if(opts->auth_plugin_configs[i].plugin.version == 2){
    #####:  714:			rc = opts->auth_plugin_configs[i].plugin.unpwd_check_v2(
    #####:  715:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  716:					username,
    #####:  717:					password);
    #####:  718:		}else{
    #####:  719:			rc = MOSQ_ERR_INVAL;
        -:  720:		}
    #####:  721:		if(rc != MOSQ_ERR_PLUGIN_DEFER){
    #####:  722:			return rc;
        -:  723:		}
    #####:  724:	}
        -:  725:	/* If all plugins deferred, this is a denial. If rc == MOSQ_ERR_SUCCESS
        -:  726:	 * here, then no plugins were configured. */
    #####:  727:	if(rc == MOSQ_ERR_PLUGIN_DEFER){
    #####:  728:		rc = MOSQ_ERR_AUTH;
    #####:  729:	}
    #####:  730:	return rc;
    #####:  731:}
        -:  732:
    #####:  733:int mosquitto_psk_key_get(struct mosquitto_db *db, struct mosquitto *context, const char *hint, const char *identity, char *key, int max_key_len)
        -:  734:{
        -:  735:	int rc;
        -:  736:	int i;
        -:  737:	struct mosquitto__security_options *opts;
        -:  738:
    #####:  739:	rc = mosquitto_psk_key_get_default(db, context, hint, identity, key, max_key_len);
    #####:  740:	if(rc != MOSQ_ERR_PLUGIN_DEFER){
    #####:  741:		return rc;
        -:  742:	}
        -:  743:
        -:  744:	/* Default check has accepted or deferred at this point.
        -:  745:	 * If no plugins exist we should accept at this point so set rc to success.
        -:  746:	 */
        -:  747:
    #####:  748:	if(db->config->per_listener_settings){
    #####:  749:		opts = &context->listener->security_options;
    #####:  750:	}else{
    #####:  751:		opts = &db->config->security_options;
        -:  752:	}
        -:  753:
    #####:  754:	for(i=0; i<opts->auth_plugin_config_count; i++){
    #####:  755:		if(opts->auth_plugin_configs[i].plugin.version == 4
    #####:  756:				&& opts->auth_plugin_configs[i].plugin.psk_key_get_v4){
        -:  757:
    #####:  758:			rc = opts->auth_plugin_configs[i].plugin.psk_key_get_v4(
    #####:  759:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  760:					context,
    #####:  761:					hint,
    #####:  762:					identity,
    #####:  763:					key,
    #####:  764:					max_key_len);
        -:  765:
    #####:  766:		}else if(opts->auth_plugin_configs[i].plugin.version == 3){
    #####:  767:			rc = opts->auth_plugin_configs[i].plugin.psk_key_get_v3(
    #####:  768:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  769:					context,
    #####:  770:					hint,
    #####:  771:					identity,
    #####:  772:					key,
    #####:  773:					max_key_len);
        -:  774:
    #####:  775:		}else if(opts->auth_plugin_configs[i].plugin.version == 2){
    #####:  776:			rc = opts->auth_plugin_configs[i].plugin.psk_key_get_v2(
    #####:  777:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  778:					hint,
    #####:  779:					identity,
    #####:  780:					key,
    #####:  781:					max_key_len);
    #####:  782:		}else{
    #####:  783:			rc = MOSQ_ERR_INVAL;
        -:  784:		}
    #####:  785:		if(rc != MOSQ_ERR_PLUGIN_DEFER){
    #####:  786:			return rc;
        -:  787:		}
    #####:  788:	}
        -:  789:
        -:  790:	/* If all plugins deferred, this is a denial. If rc == MOSQ_ERR_SUCCESS
        -:  791:	 * here, then no plugins were configured. */
    #####:  792:	if(rc == MOSQ_ERR_PLUGIN_DEFER){
    #####:  793:		rc = MOSQ_ERR_AUTH;
    #####:  794:	}
    #####:  795:	return rc;
    #####:  796:}
        -:  797:
        -:  798:
    #####:  799:int mosquitto_security_auth_start(struct mosquitto_db *db, struct mosquitto *context, bool reauth, const void *data_in, uint16_t data_in_len, void **data_out, uint16_t *data_out_len)
        -:  800:{
    #####:  801:	int rc = MOSQ_ERR_PLUGIN_DEFER;
        -:  802:	int i;
        -:  803:	struct mosquitto__security_options *opts;
        -:  804:
    #####:  805:	if(!context || !context->listener || !context->auth_method) return MOSQ_ERR_INVAL;
    #####:  806:	if(!data_out || !data_out_len) return MOSQ_ERR_INVAL;
        -:  807:
    #####:  808:	if(db->config->per_listener_settings){
    #####:  809:		opts = &context->listener->security_options;
    #####:  810:	}else{
    #####:  811:		opts = &db->config->security_options;
        -:  812:	}
        -:  813:
    #####:  814:	for(i=0; i<opts->auth_plugin_config_count; i++){
    #####:  815:		if(opts->auth_plugin_configs[i].plugin.auth_start_v4){
    #####:  816:			*data_out = NULL;
    #####:  817:			*data_out_len = 0;
        -:  818:
    #####:  819:			rc = opts->auth_plugin_configs[i].plugin.auth_start_v4(
    #####:  820:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  821:					context,
    #####:  822:					context->auth_method,
    #####:  823:					reauth,
    #####:  824:					data_in, data_in_len,
    #####:  825:					data_out, data_out_len);
        -:  826:
    #####:  827:			if(rc == MOSQ_ERR_SUCCESS){
    #####:  828:				return MOSQ_ERR_SUCCESS;
    #####:  829:			}else if(rc == MOSQ_ERR_AUTH_CONTINUE){
    #####:  830:				return MOSQ_ERR_AUTH_CONTINUE;
    #####:  831:			}else if(rc != MOSQ_ERR_NOT_SUPPORTED){
    #####:  832:				return rc;
        -:  833:			}
    #####:  834:		}
    #####:  835:	}
        -:  836:
    #####:  837:	return MOSQ_ERR_NOT_SUPPORTED;
    #####:  838:}
        -:  839:
        -:  840:
    #####:  841:int mosquitto_security_auth_continue(struct mosquitto_db *db, struct mosquitto *context, const void *data_in, uint16_t data_in_len, void **data_out, uint16_t *data_out_len)
        -:  842:{
    #####:  843:	int rc = MOSQ_ERR_PLUGIN_DEFER;
        -:  844:	int i;
        -:  845:	struct mosquitto__security_options *opts;
        -:  846:
    #####:  847:	if(!context || !context->listener || !context->auth_method) return MOSQ_ERR_INVAL;
    #####:  848:	if(!data_out || !data_out_len) return MOSQ_ERR_INVAL;
        -:  849:
    #####:  850:	if(db->config->per_listener_settings){
    #####:  851:		opts = &context->listener->security_options;
    #####:  852:	}else{
    #####:  853:		opts = &db->config->security_options;
        -:  854:	}
        -:  855:
    #####:  856:	for(i=0; i<opts->auth_plugin_config_count; i++){
    #####:  857:		if(opts->auth_plugin_configs[i].plugin.auth_start_v4){
    #####:  858:			*data_out = NULL;
    #####:  859:			*data_out_len = 0;
        -:  860:
    #####:  861:			rc = opts->auth_plugin_configs[i].plugin.auth_continue_v4(
    #####:  862:					opts->auth_plugin_configs[i].plugin.user_data,
    #####:  863:					context,
    #####:  864:					context->auth_method,
    #####:  865:					data_in, data_in_len,
    #####:  866:					data_out, data_out_len);
        -:  867:
    #####:  868:			if(rc == MOSQ_ERR_SUCCESS){
    #####:  869:				return MOSQ_ERR_SUCCESS;
    #####:  870:			}else if(rc == MOSQ_ERR_AUTH_CONTINUE){
    #####:  871:				return MOSQ_ERR_AUTH_CONTINUE;
    #####:  872:			}else if(rc != MOSQ_ERR_NOT_SUPPORTED){
    #####:  873:				return rc;
        -:  874:			}
    #####:  875:		}
    #####:  876:	}
        -:  877:
    #####:  878:	return MOSQ_ERR_NOT_SUPPORTED;
    #####:  879:}
