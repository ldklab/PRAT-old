        -:    0:Source:handle_unsubscribe.c
        -:    0:Graph:handle_unsubscribe.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#include "mosquitto_broker_internal.h"
        -:   23:#include "memory_mosq.h"
        -:   24:#include "mqtt_protocol.h"
        -:   25:#include "packet_mosq.h"
        -:   26:#include "send_mosq.h"
        -:   27:
    #####:   28:int handle__unsubscribe(struct mosquitto_db *db, struct mosquitto *context)
        -:   29:{
        -:   30:	uint16_t mid;
        -:   31:	char *sub;
        -:   32:	int slen;
        -:   33:	int rc;
        -:   34:	uint8_t reason;
    #####:   35:	int reason_code_count = 0;
        -:   36:	int reason_code_max;
    #####:   37:	uint8_t *reason_codes = NULL, *reason_tmp;
    #####:   38:	mosquitto_property *properties = NULL;
        -:   39:
    #####:   40:	if(!context) return MOSQ_ERR_INVAL;
        -:   41:
    #####:   42:	if(context->state != mosq_cs_active){
    #####:   43:		return MOSQ_ERR_PROTOCOL;
        -:   44:	}
    #####:   45:	log__printf(NULL, MOSQ_LOG_DEBUG, "Received UNSUBSCRIBE from %s", context->id);
        -:   46:
    #####:   47:	if(context->protocol != mosq_p_mqtt31){
    #####:   48:		if((context->in_packet.command&0x0F) != 0x02){
    #####:   49:			return MOSQ_ERR_PROTOCOL;
        -:   50:		}
    #####:   51:	}
    #####:   52:	if(packet__read_uint16(&context->in_packet, &mid)) return 1;
    #####:   53:	if(mid == 0) return MOSQ_ERR_PROTOCOL;
        -:   54:
    #####:   55:	if(context->protocol == mosq_p_mqtt5){
    #####:   56:		rc = property__read_all(CMD_UNSUBSCRIBE, &context->in_packet, &properties);
    #####:   57:		if(rc) return rc;
        -:   58:		/* Immediately free, we don't do anything with User Property at the moment */
    #####:   59:		mosquitto_property_free_all(&properties);
    #####:   60:	}
        -:   61:
    #####:   62:	if(context->protocol == mosq_p_mqtt311 || context->protocol == mosq_p_mqtt5){
    #####:   63:		if(context->in_packet.pos == context->in_packet.remaining_length){
        -:   64:			/* No topic specified, protocol error. */
    #####:   65:			return MOSQ_ERR_PROTOCOL;
        -:   66:		}
    #####:   67:	}
        -:   68:
    #####:   69:	reason_code_max = 10;
    #####:   70:	reason_codes = mosquitto__malloc(reason_code_max);
    #####:   71:	if(!reason_codes){
    #####:   72:		return MOSQ_ERR_NOMEM;
        -:   73:	}
        -:   74:
    #####:   75:	while(context->in_packet.pos < context->in_packet.remaining_length){
    #####:   76:		sub = NULL;
    #####:   77:		if(packet__read_string(&context->in_packet, &sub, &slen)){
    #####:   78:			mosquitto__free(reason_codes);
    #####:   79:			return 1;
        -:   80:		}
        -:   81:
    #####:   82:		if(!slen){
    #####:   83:			log__printf(NULL, MOSQ_LOG_INFO,
        -:   84:					"Empty unsubscription string from %s, disconnecting.",
    #####:   85:					context->id);
    #####:   86:			mosquitto__free(sub);
    #####:   87:			mosquitto__free(reason_codes);
    #####:   88:			return 1;
        -:   89:		}
    #####:   90:		if(mosquitto_sub_topic_check(sub)){
    #####:   91:			log__printf(NULL, MOSQ_LOG_INFO,
        -:   92:					"Invalid unsubscription string from %s, disconnecting.",
    #####:   93:					context->id);
    #####:   94:			mosquitto__free(sub);
    #####:   95:			mosquitto__free(reason_codes);
    #####:   96:			return 1;
        -:   97:		}
        -:   98:
    #####:   99:		log__printf(NULL, MOSQ_LOG_DEBUG, "\t%s", sub);
    #####:  100:		rc = sub__remove(db, context, sub, db->subs, &reason);
    #####:  101:		log__printf(NULL, MOSQ_LOG_UNSUBSCRIBE, "%s %s", context->id, sub);
    #####:  102:		mosquitto__free(sub);
    #####:  103:		if(rc){
    #####:  104:			mosquitto__free(reason_codes);
    #####:  105:			return rc;
        -:  106:		}
        -:  107:
    #####:  108:		reason_codes[reason_code_count] = reason;
    #####:  109:		reason_code_count++;
    #####:  110:		if(reason_code_count == reason_code_max){
    #####:  111:			reason_tmp = mosquitto__realloc(reason_codes, reason_code_max*2);
    #####:  112:			if(!reason_tmp){
    #####:  113:				mosquitto__free(reason_codes);
    #####:  114:				return MOSQ_ERR_NOMEM;
        -:  115:			}
    #####:  116:			reason_codes = reason_tmp;
    #####:  117:			reason_code_max *= 2;
    #####:  118:		}
        -:  119:	}
        -:  120:#ifdef WITH_PERSISTENCE
        -:  121:	db->persistence_changes++;
        -:  122:#endif
        -:  123:
    #####:  124:	log__printf(NULL, MOSQ_LOG_DEBUG, "Sending UNSUBACK to %s", context->id);
        -:  125:
        -:  126:	/* We don't use Reason String or User Property yet. */
    #####:  127:	rc = send__unsuback(context, mid, reason_code_count, reason_codes, NULL);
    #####:  128:	mosquitto__free(reason_codes);
    #####:  129:	return rc;
    #####:  130:}
