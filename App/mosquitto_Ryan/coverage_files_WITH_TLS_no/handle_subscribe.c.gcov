        -:    0:Source:handle_subscribe.c
        -:    0:Graph:handle_subscribe.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#include "mosquitto_broker_internal.h"
        -:   23:#include "memory_mosq.h"
        -:   24:#include "mqtt_protocol.h"
        -:   25:#include "packet_mosq.h"
        -:   26:#include "property_mosq.h"
        -:   27:
        -:   28:
        -:   29:
    #####:   30:int handle__subscribe(struct mosquitto_db *db, struct mosquitto *context)
        -:   31:{
    #####:   32:	int rc = 0;
        -:   33:	int rc2;
        -:   34:	uint16_t mid;
        -:   35:	char *sub;
        -:   36:	uint8_t subscription_options;
    #####:   37:	uint32_t subscription_identifier = 0;
        -:   38:	uint8_t qos;
    #####:   39:	uint8_t retain_handling = 0;
    #####:   40:	uint8_t *payload = NULL, *tmp_payload;
    #####:   41:	uint32_t payloadlen = 0;
        -:   42:	int len;
        -:   43:	int slen;
        -:   44:	char *sub_mount;
    #####:   45:	mosquitto_property *properties = NULL;
        -:   46:
    #####:   47:	if(!context) return MOSQ_ERR_INVAL;
        -:   48:
    #####:   49:	if(context->state != mosq_cs_active){
    #####:   50:		return MOSQ_ERR_PROTOCOL;
        -:   51:	}
        -:   52:
    #####:   53:	log__printf(NULL, MOSQ_LOG_DEBUG, "Received SUBSCRIBE from %s", context->id);
        -:   54:
    #####:   55:	if(context->protocol != mosq_p_mqtt31){
    #####:   56:		if((context->in_packet.command&0x0F) != 0x02){
    #####:   57:			return MOSQ_ERR_PROTOCOL;
        -:   58:		}
    #####:   59:	}
    #####:   60:	if(packet__read_uint16(&context->in_packet, &mid)) return 1;
    #####:   61:	if(mid == 0) return MOSQ_ERR_PROTOCOL;
        -:   62:
    #####:   63:	if(context->protocol == mosq_p_mqtt5){
    #####:   64:		rc = property__read_all(CMD_SUBSCRIBE, &context->in_packet, &properties);
    #####:   65:		if(rc) return rc;
        -:   66:
    #####:   67:		if(mosquitto_property_read_varint(properties, MQTT_PROP_SUBSCRIPTION_IDENTIFIER,
        -:   68:					&subscription_identifier, false)){
        -:   69:
        -:   70:			/* If the identifier was force set to 0, this is an error */
    #####:   71:			if(subscription_identifier == 0){
    #####:   72:				mosquitto_property_free_all(&properties);
    #####:   73:				return MOSQ_ERR_PROTOCOL;
        -:   74:			}
    #####:   75:		}
        -:   76:
    #####:   77:		mosquitto_property_free_all(&properties);
        -:   78:		/* Note - User Property not handled */
    #####:   79:	}
        -:   80:
    #####:   81:	while(context->in_packet.pos < context->in_packet.remaining_length){
    #####:   82:		sub = NULL;
    #####:   83:		if(packet__read_string(&context->in_packet, &sub, &slen)){
    #####:   84:			mosquitto__free(payload);
    #####:   85:			return 1;
        -:   86:		}
        -:   87:
    #####:   88:		if(sub){
    #####:   89:			if(!slen){
    #####:   90:				log__printf(NULL, MOSQ_LOG_INFO,
        -:   91:						"Empty subscription string from %s, disconnecting.",
    #####:   92:						context->address);
    #####:   93:				mosquitto__free(sub);
    #####:   94:				mosquitto__free(payload);
    #####:   95:				return 1;
        -:   96:			}
    #####:   97:			if(mosquitto_sub_topic_check(sub)){
    #####:   98:				log__printf(NULL, MOSQ_LOG_INFO,
        -:   99:						"Invalid subscription string from %s, disconnecting.",
    #####:  100:						context->address);
    #####:  101:				mosquitto__free(sub);
    #####:  102:				mosquitto__free(payload);
    #####:  103:				return 1;
        -:  104:			}
        -:  105:
    #####:  106:			if(packet__read_byte(&context->in_packet, &subscription_options)){
    #####:  107:				mosquitto__free(sub);
    #####:  108:				mosquitto__free(payload);
    #####:  109:				return 1;
        -:  110:			}
    #####:  111:			if(context->protocol == mosq_p_mqtt31 || context->protocol == mosq_p_mqtt311){
    #####:  112:				qos = subscription_options;
    #####:  113:				if(context->is_bridge){
    #####:  114:					subscription_options = MQTT_SUB_OPT_RETAIN_AS_PUBLISHED | MQTT_SUB_OPT_NO_LOCAL;
    #####:  115:				}
    #####:  116:			}else{
    #####:  117:				qos = subscription_options & 0x03;
    #####:  118:				subscription_options &= 0xFC;
        -:  119:
    #####:  120:				retain_handling = (subscription_options & 0x30);
    #####:  121:				if(retain_handling == 0x30 || (subscription_options & 0xC0) != 0){
    #####:  122:					return MOSQ_ERR_PROTOCOL;
        -:  123:				}
        -:  124:			}
    #####:  125:			if(qos > 2){
    #####:  126:				log__printf(NULL, MOSQ_LOG_INFO,
        -:  127:						"Invalid QoS in subscription command from %s, disconnecting.",
    #####:  128:						context->address);
    #####:  129:				mosquitto__free(sub);
    #####:  130:				mosquitto__free(payload);
    #####:  131:				return 1;
        -:  132:			}
        -:  133:
        -:  134:
    #####:  135:			if(context->listener && context->listener->mount_point){
    #####:  136:				len = strlen(context->listener->mount_point) + slen + 1;
    #####:  137:				sub_mount = mosquitto__malloc(len+1);
    #####:  138:				if(!sub_mount){
    #####:  139:					mosquitto__free(sub);
    #####:  140:					mosquitto__free(payload);
    #####:  141:					return MOSQ_ERR_NOMEM;
        -:  142:				}
    #####:  143:				snprintf(sub_mount, len, "%s%s", context->listener->mount_point, sub);
    #####:  144:				sub_mount[len] = '\0';
        -:  145:
    #####:  146:				mosquitto__free(sub);
    #####:  147:				sub = sub_mount;
        -:  148:
    #####:  149:			}
    #####:  150:			log__printf(NULL, MOSQ_LOG_DEBUG, "\t%s (QoS %d)", sub, qos);
        -:  151:
    #####:  152:			if(context->protocol != mosq_p_mqtt31){
    #####:  153:				rc2 = mosquitto_acl_check(db, context, sub, 0, NULL, qos, false, MOSQ_ACL_SUBSCRIBE);
    #####:  154:				switch(rc2){
        -:  155:					case MOSQ_ERR_SUCCESS:
    #####:  156:						break;
        -:  157:					case MOSQ_ERR_ACL_DENIED:
    #####:  158:						qos = 0x80;
    #####:  159:						break;
        -:  160:					default:
    #####:  161:						mosquitto__free(sub);
    #####:  162:						return rc2;
        -:  163:				}
    #####:  164:			}
        -:  165:
    #####:  166:			if(qos != 0x80){
    #####:  167:				rc2 = sub__add(db, context, sub, qos, subscription_identifier, subscription_options, &db->subs);
    #####:  168:				if(rc2 > 0){
    #####:  169:					mosquitto__free(sub);
    #####:  170:					return rc2;
        -:  171:				}
    #####:  172:				if(context->protocol == mosq_p_mqtt311 || context->protocol == mosq_p_mqtt31){
    #####:  173:					if(rc2 == MOSQ_ERR_SUCCESS || rc2 == MOSQ_ERR_SUB_EXISTS){
    #####:  174:						if(sub__retain_queue(db, context, sub, qos, 0)) rc = 1;
    #####:  175:					}
    #####:  176:				}else{
    #####:  177:					if((retain_handling == MQTT_SUB_OPT_SEND_RETAIN_ALWAYS)
    #####:  178:							|| (rc2 == MOSQ_ERR_SUCCESS && retain_handling == MQTT_SUB_OPT_SEND_RETAIN_NEW)){
        -:  179:
    #####:  180:						if(sub__retain_queue(db, context, sub, qos, subscription_identifier)) rc = 1;
    #####:  181:					}
        -:  182:				}
        -:  183:
    #####:  184:				log__printf(NULL, MOSQ_LOG_SUBSCRIBE, "%s %d %s", context->id, qos, sub);
    #####:  185:			}
    #####:  186:			mosquitto__free(sub);
        -:  187:
    #####:  188:			tmp_payload = mosquitto__realloc(payload, payloadlen + 1);
    #####:  189:			if(tmp_payload){
    #####:  190:				payload = tmp_payload;
    #####:  191:				payload[payloadlen] = qos;
    #####:  192:				payloadlen++;
    #####:  193:			}else{
    #####:  194:				mosquitto__free(payload);
        -:  195:
    #####:  196:				return MOSQ_ERR_NOMEM;
        -:  197:			}
    #####:  198:		}
        -:  199:	}
        -:  200:
    #####:  201:	if(context->protocol != mosq_p_mqtt31){
    #####:  202:		if(payloadlen == 0){
        -:  203:			/* No subscriptions specified, protocol error. */
    #####:  204:			return MOSQ_ERR_PROTOCOL;
        -:  205:		}
    #####:  206:	}
    #####:  207:	if(send__suback(context, mid, payloadlen, payload)) rc = 1;
    #####:  208:	mosquitto__free(payload);
        -:  209:
        -:  210:#ifdef WITH_PERSISTENCE
        -:  211:	db->persistence_changes++;
        -:  212:#endif
        -:  213:
    #####:  214:	return rc;
    #####:  215:}
        -:  216:
        -:  217:
