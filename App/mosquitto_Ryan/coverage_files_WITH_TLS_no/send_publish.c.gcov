        -:    0:Source:../lib/send_publish.c
        -:    0:Graph:send_publish.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#ifdef WITH_BROKER
        -:   23:#  include "mosquitto_broker_internal.h"
        -:   24:#  include "sys_tree.h"
        -:   25:#else
        -:   26:#  define G_PUB_BYTES_SENT_INC(A)
        -:   27:#endif
        -:   28:
        -:   29:#include "mosquitto.h"
        -:   30:#include "mosquitto_internal.h"
        -:   31:#include "logging_mosq.h"
        -:   32:#include "mqtt_protocol.h"
        -:   33:#include "memory_mosq.h"
        -:   34:#include "net_mosq.h"
        -:   35:#include "packet_mosq.h"
        -:   36:#include "property_mosq.h"
        -:   37:#include "send_mosq.h"
        -:   38:
        -:   39:
    #####:   40:int send__publish(struct mosquitto *mosq, uint16_t mid, const char *topic, uint32_t payloadlen, const void *payload, int qos, bool retain, bool dup, const mosquitto_property *cmsg_props, const mosquitto_property *store_props, uint32_t expiry_interval)
        -:   41:{
        -:   42:#ifdef WITH_BROKER
        -:   43:	size_t len;
        -:   44:#ifdef WITH_BRIDGE
        -:   45:	int i;
        -:   46:	struct mosquitto__bridge_topic *cur_topic;
        -:   47:	bool match;
        -:   48:	int rc;
        -:   49:	char *mapped_topic = NULL;
        -:   50:	char *topic_temp = NULL;
        -:   51:#endif
        -:   52:#endif
    #####:   53:	assert(mosq);
        -:   54:
        -:   55:#if defined(WITH_BROKER) && defined(WITH_WEBSOCKETS)
        -:   56:	if(mosq->sock == INVALID_SOCKET && !mosq->wsi) return MOSQ_ERR_NO_CONN;
        -:   57:#else
    #####:   58:	if(mosq->sock == INVALID_SOCKET) return MOSQ_ERR_NO_CONN;
        -:   59:#endif
        -:   60:
        -:   61:#ifdef WITH_BROKER
    #####:   62:	if(mosq->listener && mosq->listener->mount_point){
    #####:   63:		len = strlen(mosq->listener->mount_point);
    #####:   64:		if(len < strlen(topic)){
    #####:   65:			topic += len;
    #####:   66:		}else{
        -:   67:			/* Invalid topic string. Should never happen, but silently swallow the message anyway. */
    #####:   68:			return MOSQ_ERR_SUCCESS;
        -:   69:		}
    #####:   70:	}
        -:   71:#ifdef WITH_BRIDGE
        -:   72:	if(mosq->bridge && mosq->bridge->topics && mosq->bridge->topic_remapping){
        -:   73:		for(i=0; i<mosq->bridge->topic_count; i++){
        -:   74:			cur_topic = &mosq->bridge->topics[i];
        -:   75:			if((cur_topic->direction == bd_both || cur_topic->direction == bd_out)
        -:   76:					&& (cur_topic->remote_prefix || cur_topic->local_prefix)){
        -:   77:				/* Topic mapping required on this topic if the message matches */
        -:   78:
        -:   79:				rc = mosquitto_topic_matches_sub(cur_topic->local_topic, topic, &match);
        -:   80:				if(rc){
        -:   81:					return rc;
        -:   82:				}
        -:   83:				if(match){
        -:   84:					mapped_topic = mosquitto__strdup(topic);
        -:   85:					if(!mapped_topic) return MOSQ_ERR_NOMEM;
        -:   86:					if(cur_topic->local_prefix){
        -:   87:						/* This prefix needs removing. */
        -:   88:						if(!strncmp(cur_topic->local_prefix, mapped_topic, strlen(cur_topic->local_prefix))){
        -:   89:							topic_temp = mosquitto__strdup(mapped_topic+strlen(cur_topic->local_prefix));
        -:   90:							mosquitto__free(mapped_topic);
        -:   91:							if(!topic_temp){
        -:   92:								return MOSQ_ERR_NOMEM;
        -:   93:							}
        -:   94:							mapped_topic = topic_temp;
        -:   95:						}
        -:   96:					}
        -:   97:
        -:   98:					if(cur_topic->remote_prefix){
        -:   99:						/* This prefix needs adding. */
        -:  100:						len = strlen(mapped_topic) + strlen(cur_topic->remote_prefix)+1;
        -:  101:						topic_temp = mosquitto__malloc(len+1);
        -:  102:						if(!topic_temp){
        -:  103:							mosquitto__free(mapped_topic);
        -:  104:							return MOSQ_ERR_NOMEM;
        -:  105:						}
        -:  106:						snprintf(topic_temp, len, "%s%s", cur_topic->remote_prefix, mapped_topic);
        -:  107:						topic_temp[len] = '\0';
        -:  108:						mosquitto__free(mapped_topic);
        -:  109:						mapped_topic = topic_temp;
        -:  110:					}
        -:  111:					log__printf(NULL, MOSQ_LOG_DEBUG, "Sending PUBLISH to %s (d%d, q%d, r%d, m%d, '%s', ... (%ld bytes))", mosq->id, dup, qos, retain, mid, mapped_topic, (long)payloadlen);
        -:  112:					G_PUB_BYTES_SENT_INC(payloadlen);
        -:  113:					rc =  send__real_publish(mosq, mid, mapped_topic, payloadlen, payload, qos, retain, dup, cmsg_props, store_props, expiry_interval);
        -:  114:					mosquitto__free(mapped_topic);
        -:  115:					return rc;
        -:  116:				}
        -:  117:			}
        -:  118:		}
        -:  119:	}
        -:  120:#endif
    #####:  121:	log__printf(NULL, MOSQ_LOG_DEBUG, "Sending PUBLISH to %s (d%d, q%d, r%d, m%d, '%s', ... (%ld bytes))", mosq->id, dup, qos, retain, mid, topic, (long)payloadlen);
        -:  122:	G_PUB_BYTES_SENT_INC(payloadlen);
        -:  123:#else
        -:  124:	log__printf(mosq, MOSQ_LOG_DEBUG, "Client %s sending PUBLISH (d%d, q%d, r%d, m%d, '%s', ... (%ld bytes))", mosq->id, dup, qos, retain, mid, topic, (long)payloadlen);
        -:  125:#endif
        -:  126:
    #####:  127:	return send__real_publish(mosq, mid, topic, payloadlen, payload, qos, retain, dup, cmsg_props, store_props, expiry_interval);
    #####:  128:}
        -:  129:
        -:  130:
    #####:  131:int send__real_publish(struct mosquitto *mosq, uint16_t mid, const char *topic, uint32_t payloadlen, const void *payload, int qos, bool retain, bool dup, const mosquitto_property *cmsg_props, const mosquitto_property *store_props, uint32_t expiry_interval)
        -:  132:{
    #####:  133:	struct mosquitto__packet *packet = NULL;
        -:  134:	int packetlen;
    #####:  135:	int proplen = 0, varbytes;
        -:  136:	int rc;
        -:  137:	mosquitto_property expiry_prop;
        -:  138:
    #####:  139:	assert(mosq);
        -:  140:
    #####:  141:	if(topic){
    #####:  142:		packetlen = 2+strlen(topic) + payloadlen;
    #####:  143:	}else{
    #####:  144:		packetlen = 2 + payloadlen;
        -:  145:	}
    #####:  146:	if(qos > 0) packetlen += 2; /* For message id */
    #####:  147:	if(mosq->protocol == mosq_p_mqtt5){
    #####:  148:		proplen = 0;
    #####:  149:		proplen += property__get_length_all(cmsg_props);
    #####:  150:		proplen += property__get_length_all(store_props);
    #####:  151:		if(expiry_interval > 0){
    #####:  152:			expiry_prop.next = NULL;
    #####:  153:			expiry_prop.value.i32 = expiry_interval;
    #####:  154:			expiry_prop.identifier = MQTT_PROP_MESSAGE_EXPIRY_INTERVAL;
    #####:  155:			expiry_prop.client_generated = false;
        -:  156:
    #####:  157:			proplen += property__get_length_all(&expiry_prop);
    #####:  158:		}
        -:  159:
    #####:  160:		varbytes = packet__varint_bytes(proplen);
    #####:  161:		if(varbytes > 4){
        -:  162:			/* FIXME - Properties too big, don't publish any - should remove some first really */
    #####:  163:			cmsg_props = NULL;
    #####:  164:			store_props = NULL;
    #####:  165:			expiry_interval = 0;
    #####:  166:		}else{
    #####:  167:			packetlen += proplen + varbytes;
        -:  168:		}
    #####:  169:	}
    #####:  170:	if(packet__check_oversize(mosq, packetlen)){
        -:  171:#ifdef WITH_BROKER
    #####:  172:		log__printf(NULL, MOSQ_LOG_NOTICE, "Dropping too large outgoing PUBLISH for %s (%d bytes)", mosq->id, packetlen);
        -:  173:#else
        -:  174:		log__printf(NULL, MOSQ_LOG_NOTICE, "Dropping too large outgoing PUBLISH (%d bytes)", packetlen);
        -:  175:#endif
    #####:  176:		return MOSQ_ERR_OVERSIZE_PACKET;
        -:  177:	}
        -:  178:
    #####:  179:	packet = mosquitto__calloc(1, sizeof(struct mosquitto__packet));
    #####:  180:	if(!packet) return MOSQ_ERR_NOMEM;
        -:  181:
    #####:  182:	packet->mid = mid;
    #####:  183:	packet->command = CMD_PUBLISH | ((dup&0x1)<<3) | (qos<<1) | retain;
    #####:  184:	packet->remaining_length = packetlen;
    #####:  185:	rc = packet__alloc(packet);
    #####:  186:	if(rc){
    #####:  187:		mosquitto__free(packet);
    #####:  188:		return rc;
        -:  189:	}
        -:  190:	/* Variable header (topic string) */
    #####:  191:	if(topic){
    #####:  192:		packet__write_string(packet, topic, strlen(topic));
    #####:  193:	}else{
    #####:  194:		packet__write_uint16(packet, 0);
        -:  195:	}
    #####:  196:	if(qos > 0){
    #####:  197:		packet__write_uint16(packet, mid);
    #####:  198:	}
        -:  199:
    #####:  200:	if(mosq->protocol == mosq_p_mqtt5){
    #####:  201:		packet__write_varint(packet, proplen);
    #####:  202:		property__write_all(packet, cmsg_props, false);
    #####:  203:		property__write_all(packet, store_props, false);
    #####:  204:		if(expiry_interval > 0){
    #####:  205:			property__write_all(packet, &expiry_prop, false);
    #####:  206:		}
    #####:  207:	}
        -:  208:
        -:  209:	/* Payload */
    #####:  210:	if(payloadlen){
    #####:  211:		packet__write_bytes(packet, payload, payloadlen);
    #####:  212:	}
        -:  213:
    #####:  214:	return packet__queue(mosq, packet);
    #####:  215:}
