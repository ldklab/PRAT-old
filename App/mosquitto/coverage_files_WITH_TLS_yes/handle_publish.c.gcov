        -:    0:Source:handle_publish.c
        -:    0:Graph:handle_publish.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <stdio.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#include "mosquitto_broker_internal.h"
        -:   24:#include "alias_mosq.h"
        -:   25:#include "mqtt_protocol.h"
        -:   26:#include "memory_mosq.h"
        -:   27:#include "packet_mosq.h"
        -:   28:#include "property_mosq.h"
        -:   29:#include "read_handle.h"
        -:   30:#include "send_mosq.h"
        -:   31:#include "sys_tree.h"
        -:   32:#include "util_mosq.h"
        -:   33:
        -:   34:
    #####:   35:int handle__publish(struct mosquitto_db *db, struct mosquitto *context)
        -:   36:{
        -:   37:	char *topic;
        -:   38:	mosquitto__payload_uhpa payload;
        -:   39:	uint32_t payloadlen;
        -:   40:	uint8_t dup, qos, retain;
    #####:   41:	uint16_t mid = 0;
    #####:   42:	int rc = 0;
        -:   43:	int rc2;
    #####:   44:	uint8_t header = context->in_packet.command;
    #####:   45:	int res = 0;
    #####:   46:	struct mosquitto_msg_store *stored = NULL;
        -:   47:	int len;
        -:   48:	int slen;
        -:   49:	char *topic_mount;
    #####:   50:	mosquitto_property *properties = NULL;
        -:   51:	mosquitto_property *p, *p_prev;
    #####:   52:	mosquitto_property *msg_properties = NULL, *msg_properties_last;
    #####:   53:	uint32_t message_expiry_interval = 0;
    #####:   54:	int topic_alias = -1;
    #####:   55:	uint8_t reason_code = 0;
        -:   56:
        -:   57:#ifdef WITH_BRIDGE
        -:   58:	char *topic_temp;
        -:   59:	int i;
        -:   60:	struct mosquitto__bridge_topic *cur_topic;
        -:   61:	bool match;
        -:   62:#endif
        -:   63:
    #####:   64:	if(context->state != mosq_cs_active){
    #####:   65:		return MOSQ_ERR_PROTOCOL;
        -:   66:	}
        -:   67:
    #####:   68:	payload.ptr = NULL;
        -:   69:
    #####:   70:	dup = (header & 0x08)>>3;
    #####:   71:	qos = (header & 0x06)>>1;
    #####:   72:	if(qos == 3){
    #####:   73:		log__printf(NULL, MOSQ_LOG_INFO,
    #####:   74:				"Invalid QoS in PUBLISH from %s, disconnecting.", context->id);
    #####:   75:		return 1;
        -:   76:	}
    #####:   77:	if(qos > context->maximum_qos){
    #####:   78:		log__printf(NULL, MOSQ_LOG_INFO,
    #####:   79:				"Too high QoS in PUBLISH from %s, disconnecting.", context->id);
    #####:   80:		return 1;
        -:   81:	}
    #####:   82:	retain = (header & 0x01);
        -:   83:
    #####:   84:	if(retain && db->config->retain_available == false){
    #####:   85:		if(context->protocol == mosq_p_mqtt5){
    #####:   86:			send__disconnect(context, MQTT_RC_RETAIN_NOT_SUPPORTED, NULL);
    #####:   87:		}
    #####:   88:		return 1;
        -:   89:	}
        -:   90:
    #####:   91:	if(packet__read_string(&context->in_packet, &topic, &slen)) return 1;
    #####:   92:	if(!slen && context->protocol != mosq_p_mqtt5){
        -:   93:		/* Invalid publish topic, disconnect client. */
    #####:   94:		mosquitto__free(topic);
    #####:   95:		return 1;
        -:   96:	}
        -:   97:
    #####:   98:	if(qos > 0){
    #####:   99:		if(packet__read_uint16(&context->in_packet, &mid)){
    #####:  100:			mosquitto__free(topic);
    #####:  101:			return 1;
        -:  102:		}
    #####:  103:		if(mid == 0){
    #####:  104:			mosquitto__free(topic);
    #####:  105:			return MOSQ_ERR_PROTOCOL;
        -:  106:		}
    #####:  107:	}
        -:  108:
        -:  109:	/* Handle properties */
    #####:  110:	if(context->protocol == mosq_p_mqtt5){
    #####:  111:		rc = property__read_all(CMD_PUBLISH, &context->in_packet, &properties);
    #####:  112:		if(rc) return rc;
        -:  113:
    #####:  114:		p = properties;
    #####:  115:		p_prev = NULL;
    #####:  116:		msg_properties = NULL;
    #####:  117:		msg_properties_last = NULL;
    #####:  118:		while(p){
    #####:  119:			switch(p->identifier){
        -:  120:				case MQTT_PROP_CONTENT_TYPE:
        -:  121:				case MQTT_PROP_CORRELATION_DATA:
        -:  122:				case MQTT_PROP_PAYLOAD_FORMAT_INDICATOR:
        -:  123:				case MQTT_PROP_RESPONSE_TOPIC:
        -:  124:				case MQTT_PROP_USER_PROPERTY:
    #####:  125:					if(msg_properties){
    #####:  126:						msg_properties_last->next = p;
    #####:  127:						msg_properties_last = p;
    #####:  128:					}else{
    #####:  129:						msg_properties = p;
    #####:  130:						msg_properties_last = p;
        -:  131:					}
    #####:  132:					if(p_prev){
    #####:  133:						p_prev->next = p->next;
    #####:  134:						p = p_prev->next;
    #####:  135:					}else{
    #####:  136:						properties = p->next;
    #####:  137:						p = properties;
        -:  138:					}
    #####:  139:					msg_properties_last->next = NULL;
    #####:  140:					break;
        -:  141:
        -:  142:				case MQTT_PROP_TOPIC_ALIAS:
    #####:  143:					topic_alias = p->value.i16;
    #####:  144:					p_prev = p;
    #####:  145:					p = p->next;
    #####:  146:					break;
        -:  147:
        -:  148:				case MQTT_PROP_MESSAGE_EXPIRY_INTERVAL:
    #####:  149:					message_expiry_interval = p->value.i32;
    #####:  150:					p_prev = p;
    #####:  151:					p = p->next;
    #####:  152:					break;
        -:  153:
        -:  154:				case MQTT_PROP_SUBSCRIPTION_IDENTIFIER:
    #####:  155:					p_prev = p;
    #####:  156:					p = p->next;
    #####:  157:					break;
        -:  158:
        -:  159:				default:
    #####:  160:					p = p->next;
    #####:  161:					break;
        -:  162:			}
        -:  163:		}
    #####:  164:	}
    #####:  165:	mosquitto_property_free_all(&properties);
        -:  166:
    #####:  167:	if(topic_alias == 0 || (context->listener && topic_alias > context->listener->max_topic_alias)){
    #####:  168:		mosquitto__free(topic);
    #####:  169:		send__disconnect(context, MQTT_RC_TOPIC_ALIAS_INVALID, NULL);
    #####:  170:		return MOSQ_ERR_PROTOCOL;
    #####:  171:	}else if(topic_alias > 0){
    #####:  172:		if(topic){
    #####:  173:			rc = alias__add(context, topic, topic_alias);
    #####:  174:			if(rc){
    #####:  175:				mosquitto__free(topic);
    #####:  176:				return rc;
        -:  177:			}
    #####:  178:		}else{
    #####:  179:			rc = alias__find(context, &topic, topic_alias);
    #####:  180:			if(rc){
    #####:  181:				send__disconnect(context, MQTT_RC_TOPIC_ALIAS_INVALID, NULL);
    #####:  182:				mosquitto__free(topic);
    #####:  183:				return rc;
        -:  184:			}
        -:  185:		}
    #####:  186:	}
    #####:  187:	if(mosquitto_validate_utf8(topic, slen) != MOSQ_ERR_SUCCESS){
    #####:  188:		log__printf(NULL, MOSQ_LOG_INFO, "Client %s sent topic with invalid UTF-8, disconnecting.", context->id);
    #####:  189:		mosquitto__free(topic);
    #####:  190:		return 1;
        -:  191:	}
        -:  192:
        -:  193:#ifdef WITH_BRIDGE
        -:  194:	if(context->bridge && context->bridge->topics && context->bridge->topic_remapping){
        -:  195:		for(i=0; i<context->bridge->topic_count; i++){
        -:  196:			cur_topic = &context->bridge->topics[i];
        -:  197:			if((cur_topic->direction == bd_both || cur_topic->direction == bd_in)
        -:  198:					&& (cur_topic->remote_prefix || cur_topic->local_prefix)){
        -:  199:
        -:  200:				/* Topic mapping required on this topic if the message matches */
        -:  201:
        -:  202:				rc = mosquitto_topic_matches_sub(cur_topic->remote_topic, topic, &match);
        -:  203:				if(rc){
        -:  204:					mosquitto__free(topic);
        -:  205:					return rc;
        -:  206:				}
        -:  207:				if(match){
        -:  208:					if(cur_topic->remote_prefix){
        -:  209:						/* This prefix needs removing. */
        -:  210:						if(!strncmp(cur_topic->remote_prefix, topic, strlen(cur_topic->remote_prefix))){
        -:  211:							topic_temp = mosquitto__strdup(topic+strlen(cur_topic->remote_prefix));
        -:  212:							if(!topic_temp){
        -:  213:								mosquitto__free(topic);
        -:  214:								return MOSQ_ERR_NOMEM;
        -:  215:							}
        -:  216:							mosquitto__free(topic);
        -:  217:							topic = topic_temp;
        -:  218:						}
        -:  219:					}
        -:  220:
        -:  221:					if(cur_topic->local_prefix){
        -:  222:						/* This prefix needs adding. */
        -:  223:						len = strlen(topic) + strlen(cur_topic->local_prefix)+1;
        -:  224:						topic_temp = mosquitto__malloc(len+1);
        -:  225:						if(!topic_temp){
        -:  226:							mosquitto__free(topic);
        -:  227:							return MOSQ_ERR_NOMEM;
        -:  228:						}
        -:  229:						snprintf(topic_temp, len, "%s%s", cur_topic->local_prefix, topic);
        -:  230:						topic_temp[len] = '\0';
        -:  231:
        -:  232:						mosquitto__free(topic);
        -:  233:						topic = topic_temp;
        -:  234:					}
        -:  235:					break;
        -:  236:				}
        -:  237:			}
        -:  238:		}
        -:  239:	}
        -:  240:#endif
    #####:  241:	if(mosquitto_pub_topic_check(topic) != MOSQ_ERR_SUCCESS){
        -:  242:		/* Invalid publish topic, just swallow it. */
    #####:  243:		mosquitto__free(topic);
    #####:  244:		return 1;
        -:  245:	}
        -:  246:
    #####:  247:	payloadlen = context->in_packet.remaining_length - context->in_packet.pos;
        -:  248:	G_PUB_BYTES_RECEIVED_INC(payloadlen);
    #####:  249:	if(context->listener && context->listener->mount_point){
    #####:  250:		len = strlen(context->listener->mount_point) + strlen(topic) + 1;
    #####:  251:		topic_mount = mosquitto__malloc(len+1);
    #####:  252:		if(!topic_mount){
    #####:  253:			mosquitto__free(topic);
    #####:  254:			mosquitto_property_free_all(&msg_properties);
    #####:  255:			return MOSQ_ERR_NOMEM;
        -:  256:		}
    #####:  257:		snprintf(topic_mount, len, "%s%s", context->listener->mount_point, topic);
    #####:  258:		topic_mount[len] = '\0';
        -:  259:
    #####:  260:		mosquitto__free(topic);
    #####:  261:		topic = topic_mount;
    #####:  262:	}
        -:  263:
    #####:  264:	if(payloadlen){
    #####:  265:		if(db->config->message_size_limit && payloadlen > db->config->message_size_limit){
    #####:  266:			log__printf(NULL, MOSQ_LOG_DEBUG, "Dropped too large PUBLISH from %s (d%d, q%d, r%d, m%d, '%s', ... (%ld bytes))", context->id, dup, qos, retain, mid, topic, (long)payloadlen);
    #####:  267:			reason_code = MQTT_RC_IMPLEMENTATION_SPECIFIC;
    #####:  268:			goto process_bad_message;
        -:  269:		}
    #####:  270:		if(UHPA_ALLOC(payload, payloadlen) == 0){
    #####:  271:			mosquitto__free(topic);
    #####:  272:			mosquitto_property_free_all(&msg_properties);
    #####:  273:			return MOSQ_ERR_NOMEM;
        -:  274:		}
        -:  275:
    #####:  276:		if(packet__read_bytes(&context->in_packet, UHPA_ACCESS(payload, payloadlen), payloadlen)){
    #####:  277:			mosquitto__free(topic);
    #####:  278:			UHPA_FREE(payload, payloadlen);
    #####:  279:			mosquitto_property_free_all(&msg_properties);
    #####:  280:			return 1;
        -:  281:		}
    #####:  282:	}
        -:  283:
        -:  284:	/* Check for topic access */
    #####:  285:	rc = mosquitto_acl_check(db, context, topic, payloadlen, UHPA_ACCESS(payload, payloadlen), qos, retain, MOSQ_ACL_WRITE);
    #####:  286:	if(rc == MOSQ_ERR_ACL_DENIED){
    #####:  287:		log__printf(NULL, MOSQ_LOG_DEBUG, "Denied PUBLISH from %s (d%d, q%d, r%d, m%d, '%s', ... (%ld bytes))", context->id, dup, qos, retain, mid, topic, (long)payloadlen);
    #####:  288:			reason_code = MQTT_RC_NOT_AUTHORIZED;
    #####:  289:		goto process_bad_message;
    #####:  290:	}else if(rc != MOSQ_ERR_SUCCESS){
    #####:  291:		mosquitto__free(topic);
    #####:  292:		UHPA_FREE(payload, payloadlen);
    #####:  293:		mosquitto_property_free_all(&msg_properties);
    #####:  294:		return rc;
        -:  295:	}
        -:  296:
    #####:  297:	log__printf(NULL, MOSQ_LOG_DEBUG, "Received PUBLISH from %s (d%d, q%d, r%d, m%d, '%s', ... (%ld bytes))", context->id, dup, qos, retain, mid, topic, (long)payloadlen);
    #####:  298:	if(qos > 0){
    #####:  299:		db__message_store_find(context, mid, &stored);
    #####:  300:	}
    #####:  301:	if(!stored){
    #####:  302:		dup = 0;
    #####:  303:		if(db__message_store(db, context, mid, topic, qos, payloadlen, &payload, retain, &stored, message_expiry_interval, msg_properties, 0, mosq_mo_client)){
    #####:  304:			mosquitto_property_free_all(&msg_properties);
    #####:  305:			return 1;
        -:  306:		}
    #####:  307:		msg_properties = NULL; /* Now belongs to db__message_store() */
    #####:  308:	}else{
    #####:  309:		mosquitto__free(topic);
    #####:  310:		topic = stored->topic;
    #####:  311:		dup = 1;
    #####:  312:		mosquitto_property_free_all(&msg_properties);
    #####:  313:		UHPA_FREE(payload, payloadlen);
        -:  314:	}
        -:  315:
    #####:  316:	switch(qos){
        -:  317:		case 0:
    #####:  318:			rc2 = sub__messages_queue(db, context->id, topic, qos, retain, &stored);
    #####:  319:			if(rc2 > 0) rc = 1;
    #####:  320:			break;
        -:  321:		case 1:
    #####:  322:			util__decrement_receive_quota(context);
    #####:  323:			rc2 = sub__messages_queue(db, context->id, topic, qos, retain, &stored);
    #####:  324:			if(rc2 == MOSQ_ERR_SUCCESS || context->protocol != mosq_p_mqtt5){
    #####:  325:				if(send__puback(context, mid, 0)) rc = 1;
    #####:  326:			}else if(rc2 == MOSQ_ERR_NO_SUBSCRIBERS){
    #####:  327:				if(send__puback(context, mid, MQTT_RC_NO_MATCHING_SUBSCRIBERS)) rc = 1;
    #####:  328:			}else{
    #####:  329:				rc = rc2;
        -:  330:			}
    #####:  331:			break;
        -:  332:		case 2:
    #####:  333:			if(dup == 0){
    #####:  334:				res = db__message_insert(db, context, mid, mosq_md_in, qos, retain, stored, NULL);
    #####:  335:			}else{
    #####:  336:				res = 0;
        -:  337:			}
        -:  338:			/* db__message_insert() returns 2 to indicate dropped message
        -:  339:			 * due to queue. This isn't an error so don't disconnect them. */
    #####:  340:			if(!res){
    #####:  341:				if(send__pubrec(context, mid, 0)) rc = 1;
    #####:  342:			}else if(res == 1){
    #####:  343:				rc = 1;
    #####:  344:			}
    #####:  345:			break;
        -:  346:	}
        -:  347:
    #####:  348:	return rc;
        -:  349:process_bad_message:
    #####:  350:	mosquitto__free(topic);
    #####:  351:	UHPA_FREE(payload, payloadlen);
    #####:  352:	switch(qos){
        -:  353:		case 0:
    #####:  354:			return MOSQ_ERR_SUCCESS;
        -:  355:		case 1:
    #####:  356:			return send__puback(context, mid, reason_code);
        -:  357:		case 2:
    #####:  358:			if(context->protocol == mosq_p_mqtt5){
    #####:  359:				return send__pubrec(context, mid, reason_code);
        -:  360:			}else{
    #####:  361:				return send__pubrec(context, mid, 0);
        -:  362:			}
        -:  363:	}
    #####:  364:	return 1;
    #####:  365:}
        -:  366:
