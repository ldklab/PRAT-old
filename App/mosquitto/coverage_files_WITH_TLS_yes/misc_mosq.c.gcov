        -:    0:Source:../lib/misc_mosq.c
        -:    0:Graph:misc_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:/* This contains general purpose utility functions that are not specific to
        -:   18: * Mosquitto/MQTT features. */
        -:   19:
        -:   20:#include "config.h"
        -:   21:
        -:   22:#include <ctype.h>
        -:   23:#include <stdbool.h>
        -:   24:#include <stdio.h>
        -:   25:#include <stdlib.h>
        -:   26:#include <string.h>
        -:   27:
        -:   28:#ifdef WIN32
        -:   29:#  include <winsock2.h>
        -:   30:#  include <aclapi.h>
        -:   31:#  include <io.h>
        -:   32:#  include <lmcons.h>
        -:   33:#else
        -:   34:#  include <sys/stat.h>
        -:   35:#endif
        -:   36:
        -:   37:
    #####:   38:FILE *mosquitto__fopen(const char *path, const char *mode, bool restrict_read)
        -:   39:{
        -:   40:#ifdef WIN32
        -:   41:	char buf[4096];
        -:   42:	int rc;
        -:   43:	rc = ExpandEnvironmentStrings(path, buf, 4096);
        -:   44:	if(rc == 0 || rc > 4096){
        -:   45:		return NULL;
        -:   46:	}else{
        -:   47:		if (restrict_read) {
        -:   48:			HANDLE hfile;
        -:   49:			SECURITY_ATTRIBUTES sec;
        -:   50:			EXPLICIT_ACCESS ea;
        -:   51:			PACL pacl = NULL;
        -:   52:			char username[UNLEN + 1];
        -:   53:			int ulen = UNLEN;
        -:   54:			SECURITY_DESCRIPTOR sd;
        -:   55:			DWORD dwCreationDisposition;
        -:   56:
        -:   57:			switch(mode[0]){
        -:   58:				case 'a':
        -:   59:					dwCreationDisposition = OPEN_ALWAYS;
        -:   60:					break;
        -:   61:				case 'r':
        -:   62:					dwCreationDisposition = OPEN_EXISTING;
        -:   63:					break;
        -:   64:				case 'w':
        -:   65:					dwCreationDisposition = CREATE_ALWAYS;
        -:   66:					break;
        -:   67:				default:
        -:   68:					return NULL;
        -:   69:			}
        -:   70:
        -:   71:			GetUserName(username, &ulen);
        -:   72:			if (!InitializeSecurityDescriptor(&sd, SECURITY_DESCRIPTOR_REVISION)) {
        -:   73:				return NULL;
        -:   74:			}
        -:   75:			BuildExplicitAccessWithName(&ea, username, GENERIC_ALL, SET_ACCESS, NO_INHERITANCE);
        -:   76:			if (SetEntriesInAcl(1, &ea, NULL, &pacl) != ERROR_SUCCESS) {
        -:   77:				return NULL;
        -:   78:			}
        -:   79:			if (!SetSecurityDescriptorDacl(&sd, TRUE, pacl, FALSE)) {
        -:   80:				LocalFree(pacl);
        -:   81:				return NULL;
        -:   82:			}
        -:   83:
        -:   84:			sec.nLength = sizeof(SECURITY_ATTRIBUTES);
        -:   85:			sec.bInheritHandle = FALSE;
        -:   86:			sec.lpSecurityDescriptor = &sd;
        -:   87:
        -:   88:			hfile = CreateFile(buf, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ,
        -:   89:				&sec,
        -:   90:				dwCreationDisposition,
        -:   91:				FILE_ATTRIBUTE_NORMAL,
        -:   92:				NULL);
        -:   93:
        -:   94:			LocalFree(pacl);
        -:   95:
        -:   96:			int fd = _open_osfhandle((intptr_t)hfile, 0);
        -:   97:			if (fd < 0) {
        -:   98:				return NULL;
        -:   99:			}
        -:  100:
        -:  101:			FILE *fptr = _fdopen(fd, mode);
        -:  102:			if (!fptr) {
        -:  103:				_close(fd);
        -:  104:				return NULL;
        -:  105:			}
        -:  106:			return fptr;
        -:  107:
        -:  108:		}else {
        -:  109:			return fopen(buf, mode);
        -:  110:		}
        -:  111:	}
        -:  112:#else
    #####:  113:	if (restrict_read) {
        -:  114:		FILE *fptr;
        -:  115:		mode_t old_mask;
        -:  116:
    #####:  117:		old_mask = umask(0077);
    #####:  118:		fptr = fopen(path, mode);
    #####:  119:		umask(old_mask);
        -:  120:
    #####:  121:		return fptr;
        -:  122:	}else{
    #####:  123:		return fopen(path, mode);
        -:  124:	}
        -:  125:#endif
    #####:  126:}
        -:  127:
        -:  128:
    #####:  129:char *misc__trimblanks(char *str)
        -:  130:{
        -:  131:	char *endptr;
        -:  132:
    #####:  133:	if(str == NULL) return NULL;
        -:  134:
    #####:  135:	while(isspace(str[0])){
    #####:  136:		str++;
        -:  137:	}
    #####:  138:	endptr = &str[strlen(str)-1];
    #####:  139:	while(endptr > str && isspace(endptr[0])){
    #####:  140:		endptr[0] = '\0';
    #####:  141:		endptr--;
        -:  142:	}
    #####:  143:	return str;
    #####:  144:}
        -:  145:
        -:  146:
    #####:  147:char *fgets_extending(char **buf, int *buflen, FILE *stream)
        -:  148:{
        -:  149:	char *rc;
        -:  150:	char endchar;
    #####:  151:	int offset = 0;
        -:  152:	char *newbuf;
        -:  153:
    #####:  154:	if(stream == NULL || buf == NULL || buflen == NULL || *buflen < 1){
    #####:  155:		return NULL;
        -:  156:	}
        -:  157:
    #####:  158:	do{
    #####:  159:		rc = fgets(&((*buf)[offset]), (*buflen)-offset, stream);
    #####:  160:		if(feof(stream)){
    #####:  161:			return rc;
        -:  162:		}
        -:  163:
    #####:  164:		endchar = (*buf)[strlen(*buf)-1];
    #####:  165:		if(endchar == '\n'){
    #####:  166:			return rc;
        -:  167:		}
        -:  168:		/* No EOL char found, so extend buffer */
    #####:  169:		offset = (*buflen)-1;
    #####:  170:		*buflen += 1000;
    #####:  171:		newbuf = realloc(*buf, *buflen);
    #####:  172:		if(!newbuf){
    #####:  173:			return NULL;
        -:  174:		}
    #####:  175:		*buf = newbuf;
    #####:  176:	}while(1);
    #####:  177:}
