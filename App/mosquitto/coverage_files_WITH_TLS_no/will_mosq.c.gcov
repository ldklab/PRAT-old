        -:    0:Source:../lib/will_mosq.c
        -:    0:Graph:will_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2010-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#ifdef WITH_BROKER
        -:   23:#  include "mosquitto_broker_internal.h"
        -:   24:#endif
        -:   25:
        -:   26:#include "mosquitto.h"
        -:   27:#include "mosquitto_internal.h"
        -:   28:#include "logging_mosq.h"
        -:   29:#include "messages_mosq.h"
        -:   30:#include "memory_mosq.h"
        -:   31:#include "mqtt_protocol.h"
        -:   32:#include "net_mosq.h"
        -:   33:#include "read_handle.h"
        -:   34:#include "send_mosq.h"
        -:   35:#include "util_mosq.h"
        -:   36:#include "will_mosq.h"
        -:   37:
    #####:   38:int will__set(struct mosquitto *mosq, const char *topic, int payloadlen, const void *payload, int qos, bool retain, mosquitto_property *properties)
        -:   39:{
    #####:   40:	int rc = MOSQ_ERR_SUCCESS;
        -:   41:	mosquitto_property *p;
        -:   42:
    #####:   43:	if(!mosq || !topic) return MOSQ_ERR_INVAL;
    #####:   44:	if(payloadlen < 0 || payloadlen > MQTT_MAX_PAYLOAD) return MOSQ_ERR_PAYLOAD_SIZE;
    #####:   45:	if(payloadlen > 0 && !payload) return MOSQ_ERR_INVAL;
        -:   46:
    #####:   47:	if(mosquitto_pub_topic_check(topic)) return MOSQ_ERR_INVAL;
    #####:   48:	if(mosquitto_validate_utf8(topic, strlen(topic))) return MOSQ_ERR_MALFORMED_UTF8;
        -:   49:
    #####:   50:	if(properties){
    #####:   51:		if(mosq->protocol != mosq_p_mqtt5){
    #####:   52:			return MOSQ_ERR_NOT_SUPPORTED;
        -:   53:		}
    #####:   54:		p = properties;
    #####:   55:		while(p){
    #####:   56:			rc = mosquitto_property_check_command(CMD_WILL, p->identifier);
    #####:   57:			if(rc) return rc;
    #####:   58:			p = p->next;
        -:   59:		}
    #####:   60:	}
        -:   61:
    #####:   62:	if(mosq->will){
    #####:   63:		mosquitto__free(mosq->will->msg.topic);
    #####:   64:		mosquitto__free(mosq->will->msg.payload);
    #####:   65:		mosquitto_property_free_all(&mosq->will->properties);
    #####:   66:		mosquitto__free(mosq->will);
    #####:   67:	}
        -:   68:
    #####:   69:	mosq->will = mosquitto__calloc(1, sizeof(struct mosquitto_message_all));
    #####:   70:	if(!mosq->will) return MOSQ_ERR_NOMEM;
    #####:   71:	mosq->will->msg.topic = mosquitto__strdup(topic);
    #####:   72:	if(!mosq->will->msg.topic){
    #####:   73:		rc = MOSQ_ERR_NOMEM;
    #####:   74:		goto cleanup;
        -:   75:	}
    #####:   76:	mosq->will->msg.payloadlen = payloadlen;
    #####:   77:	if(mosq->will->msg.payloadlen > 0){
    #####:   78:		if(!payload){
    #####:   79:			rc = MOSQ_ERR_INVAL;
    #####:   80:			goto cleanup;
        -:   81:		}
    #####:   82:		mosq->will->msg.payload = mosquitto__malloc(sizeof(char)*mosq->will->msg.payloadlen);
    #####:   83:		if(!mosq->will->msg.payload){
    #####:   84:			rc = MOSQ_ERR_NOMEM;
    #####:   85:			goto cleanup;
        -:   86:		}
        -:   87:
    #####:   88:		memcpy(mosq->will->msg.payload, payload, payloadlen);
    #####:   89:	}
    #####:   90:	mosq->will->msg.qos = qos;
    #####:   91:	mosq->will->msg.retain = retain;
        -:   92:
    #####:   93:	mosq->will->properties = properties;
        -:   94:
    #####:   95:	return MOSQ_ERR_SUCCESS;
        -:   96:
        -:   97:cleanup:
    #####:   98:	if(mosq->will){
    #####:   99:		mosquitto__free(mosq->will->msg.topic);
    #####:  100:		mosquitto__free(mosq->will->msg.payload);
        -:  101:
    #####:  102:		mosquitto__free(mosq->will);
    #####:  103:		mosq->will = NULL;
    #####:  104:	}
        -:  105:
    #####:  106:	return rc;
    #####:  107:}
        -:  108:
    #####:  109:int will__clear(struct mosquitto *mosq)
        -:  110:{
    #####:  111:	if(!mosq->will) return MOSQ_ERR_SUCCESS;
        -:  112:
    #####:  113:	mosquitto__free(mosq->will->msg.topic);
    #####:  114:	mosq->will->msg.topic = NULL;
        -:  115:
    #####:  116:	mosquitto__free(mosq->will->msg.payload);
    #####:  117:	mosq->will->msg.payload = NULL;
        -:  118:
    #####:  119:	mosquitto_property_free_all(&mosq->will->properties);
        -:  120:
    #####:  121:	mosquitto__free(mosq->will);
    #####:  122:	mosq->will = NULL;
        -:  123:
    #####:  124:	return MOSQ_ERR_SUCCESS;
    #####:  125:}
        -:  126:
