        -:    0:Source:logging.c
        -:    0:Graph:logging.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:#include "config.h"
        -:   17:
        -:   18:#include <stdarg.h>
        -:   19:#include <stdio.h>
        -:   20:#include <string.h>
        -:   21:#ifndef WIN32
        -:   22:#include <syslog.h>
        -:   23:#endif
        -:   24:#include <time.h>
        -:   25:
        -:   26:#ifdef WITH_DLT
        -:   27:#include <dlt/dlt.h>
        -:   28:#endif
        -:   29:
        -:   30:#include "mosquitto_broker_internal.h"
        -:   31:#include "memory_mosq.h"
        -:   32:#include "misc_mosq.h"
        -:   33:#include "util_mosq.h"
        -:   34:
        -:   35:extern struct mosquitto_db int_db;
        -:   36:
        -:   37:#ifdef WIN32
        -:   38:HANDLE syslog_h;
        -:   39:#endif
        -:   40:
        -:   41:/* Options for logging should be:
        -:   42: *
        -:   43: * A combination of:
        -:   44: * Via syslog
        -:   45: * To a file
        -:   46: * To stdout/stderr
        -:   47: * To topics
        -:   48: */
        -:   49:
        -:   50:/* Give option of logging timestamp.
        -:   51: * Logging pid.
        -:   52: */
        -:   53:static int log_destinations = MQTT3_LOG_STDERR;
        -:   54:static int log_priorities = MOSQ_LOG_ERR | MOSQ_LOG_WARNING | MOSQ_LOG_NOTICE | MOSQ_LOG_INFO;
        -:   55:
        -:   56:#ifdef WITH_DLT
        -:   57:static DltContext dltContext;
        -:   58:#endif
        -:   59:
    #####:   60:static int get_time(struct tm **ti)
        -:   61:{
        -:   62:#if defined(__APPLE__)
        -:   63:	struct timeval tv;
        -:   64:#else
        -:   65:	struct timespec ts;
        -:   66:#endif
        -:   67:	time_t s;
        -:   68:
        -:   69:#ifdef WIN32
        -:   70:	s = time(NULL);
        -:   71:
        -:   72:#elif defined(__APPLE__)
        -:   73:	gettimeofday(&tv, NULL);
        -:   74:	s = tv.tv_sec;
        -:   75:#else
    #####:   76:	if(clock_gettime(CLOCK_REALTIME, &ts) != 0){
    #####:   77:		fprintf(stderr, "Error obtaining system time.\n");
    #####:   78:		return 1;
        -:   79:	}
    #####:   80:	s = ts.tv_sec;
        -:   81:#endif
        -:   82:
    #####:   83:	*ti = localtime(&s);
    #####:   84:	if(!(*ti)){
    #####:   85:		fprintf(stderr, "Error obtaining system time.\n");
    #####:   86:		return 1;
        -:   87:	}
        -:   88:
    #####:   89:	return 0;
    #####:   90:}
        -:   91:
        -:   92:
    #####:   93:int log__init(struct mosquitto__config *config)
        -:   94:{
    #####:   95:	int rc = 0;
        -:   96:
    #####:   97:	log_priorities = config->log_type;
    #####:   98:	log_destinations = config->log_dest;
        -:   99:
    #####:  100:	if(log_destinations & MQTT3_LOG_SYSLOG){
        -:  101:#ifndef WIN32
    #####:  102:		openlog("mosquitto", LOG_PID|LOG_CONS, config->log_facility);
        -:  103:#else
        -:  104:		syslog_h = OpenEventLog(NULL, "mosquitto");
        -:  105:#endif
    #####:  106:	}
        -:  107:
    #####:  108:	if(log_destinations & MQTT3_LOG_FILE){
    #####:  109:		if(drop_privileges(config, true)){
    #####:  110:			return 1;
        -:  111:		}
    #####:  112:		config->log_fptr = mosquitto__fopen(config->log_file, "at", true);
    #####:  113:		if(!config->log_fptr){
    #####:  114:			log_destinations = MQTT3_LOG_STDERR;
    #####:  115:			log_priorities = MOSQ_LOG_ERR;
    #####:  116:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to open log file %s for writing.", config->log_file);
    #####:  117:			return MOSQ_ERR_INVAL;
        -:  118:		}
    #####:  119:		restore_privileges();
    #####:  120:	}
        -:  121:#ifdef WITH_DLT
        -:  122:	DLT_REGISTER_APP("MQTT","mosquitto log");
        -:  123:	dlt_register_context(&dltContext, "MQTT", "mosquitto DLT context");
        -:  124:#endif
    #####:  125:	return rc;
    #####:  126:}
        -:  127:
    #####:  128:int log__close(struct mosquitto__config *config)
        -:  129:{
    #####:  130:	if(log_destinations & MQTT3_LOG_SYSLOG){
        -:  131:#ifndef WIN32
    #####:  132:		closelog();
        -:  133:#else
        -:  134:		CloseEventLog(syslog_h);
        -:  135:#endif
    #####:  136:	}
    #####:  137:	if(log_destinations & MQTT3_LOG_FILE){
    #####:  138:		if(config->log_fptr){
    #####:  139:			fclose(config->log_fptr);
    #####:  140:			config->log_fptr = NULL;
    #####:  141:		}
    #####:  142:	}
        -:  143:
        -:  144:#ifdef WITH_DLT
        -:  145:	dlt_unregister_context(&dltContext);
        -:  146:	DLT_UNREGISTER_APP();
        -:  147:#endif
        -:  148:	/* FIXME - do something for all destinations! */
    #####:  149:	return MOSQ_ERR_SUCCESS;
        -:  150:}
        -:  151:
        -:  152:#ifdef WITH_DLT
        -:  153:DltLogLevelType get_dlt_level(int priority)
        -:  154:{
        -:  155:	switch (priority) {
        -:  156:		case MOSQ_LOG_ERR:
        -:  157:			return DLT_LOG_ERROR;
        -:  158:		case MOSQ_LOG_WARNING:
        -:  159:			return DLT_LOG_WARN;
        -:  160:		case MOSQ_LOG_INFO:
        -:  161:			return DLT_LOG_INFO;
        -:  162:		case MOSQ_LOG_DEBUG:
        -:  163:			return DLT_LOG_DEBUG;
        -:  164:		case MOSQ_LOG_NOTICE:
        -:  165:		case MOSQ_LOG_SUBSCRIBE:
        -:  166:		case MOSQ_LOG_UNSUBSCRIBE:
        -:  167:			return DLT_LOG_VERBOSE;
        -:  168:		default:
        -:  169:			return DLT_LOG_DEFAULT;
        -:  170:	}
        -:  171:}
        -:  172:#endif
        -:  173:
    #####:  174:int log__vprintf(int priority, const char *fmt, va_list va)
        -:  175:{
        -:  176:	char *s;
        -:  177:	char *st;
        -:  178:	int len;
        -:  179:#ifdef WIN32
        -:  180:	char *sp;
        -:  181:#endif
        -:  182:	const char *topic;
        -:  183:	int syslog_priority;
    #####:  184:	time_t now = time(NULL);
        -:  185:	static time_t last_flush = 0;
        -:  186:	char time_buf[50];
    #####:  187:	bool log_timestamp = true;
    #####:  188:	char *log_timestamp_format = NULL;
    #####:  189:	FILE *log_fptr = NULL;
        -:  190:
    #####:  191:	if(int_db.config){
    #####:  192:		log_timestamp = int_db.config->log_timestamp;
    #####:  193:		log_timestamp_format = int_db.config->log_timestamp_format;
    #####:  194:		log_fptr = int_db.config->log_fptr;
    #####:  195:	}
        -:  196:
    #####:  197:	if((log_priorities & priority) && log_destinations != MQTT3_LOG_NONE){
    #####:  198:		switch(priority){
        -:  199:			case MOSQ_LOG_SUBSCRIBE:
    #####:  200:				topic = "$SYS/broker/log/M/subscribe";
        -:  201:#ifndef WIN32
    #####:  202:				syslog_priority = LOG_NOTICE;
        -:  203:#else
        -:  204:				syslog_priority = EVENTLOG_INFORMATION_TYPE;
        -:  205:#endif
    #####:  206:				break;
        -:  207:			case MOSQ_LOG_UNSUBSCRIBE:
    #####:  208:				topic = "$SYS/broker/log/M/unsubscribe";
        -:  209:#ifndef WIN32
    #####:  210:				syslog_priority = LOG_NOTICE;
        -:  211:#else
        -:  212:				syslog_priority = EVENTLOG_INFORMATION_TYPE;
        -:  213:#endif
    #####:  214:				break;
        -:  215:			case MOSQ_LOG_DEBUG:
    #####:  216:				topic = "$SYS/broker/log/D";
        -:  217:#ifndef WIN32
    #####:  218:				syslog_priority = LOG_DEBUG;
        -:  219:#else
        -:  220:				syslog_priority = EVENTLOG_INFORMATION_TYPE;
        -:  221:#endif
    #####:  222:				break;
        -:  223:			case MOSQ_LOG_ERR:
    #####:  224:				topic = "$SYS/broker/log/E";
        -:  225:#ifndef WIN32
    #####:  226:				syslog_priority = LOG_ERR;
        -:  227:#else
        -:  228:				syslog_priority = EVENTLOG_ERROR_TYPE;
        -:  229:#endif
    #####:  230:				break;
        -:  231:			case MOSQ_LOG_WARNING:
    #####:  232:				topic = "$SYS/broker/log/W";
        -:  233:#ifndef WIN32
    #####:  234:				syslog_priority = LOG_WARNING;
        -:  235:#else
        -:  236:				syslog_priority = EVENTLOG_WARNING_TYPE;
        -:  237:#endif
    #####:  238:				break;
        -:  239:			case MOSQ_LOG_NOTICE:
    #####:  240:				topic = "$SYS/broker/log/N";
        -:  241:#ifndef WIN32
    #####:  242:				syslog_priority = LOG_NOTICE;
        -:  243:#else
        -:  244:				syslog_priority = EVENTLOG_INFORMATION_TYPE;
        -:  245:#endif
    #####:  246:				break;
        -:  247:			case MOSQ_LOG_INFO:
    #####:  248:				topic = "$SYS/broker/log/I";
        -:  249:#ifndef WIN32
    #####:  250:				syslog_priority = LOG_INFO;
        -:  251:#else
        -:  252:				syslog_priority = EVENTLOG_INFORMATION_TYPE;
        -:  253:#endif
    #####:  254:				break;
        -:  255:#ifdef WITH_WEBSOCKETS
        -:  256:			case MOSQ_LOG_WEBSOCKETS:
        -:  257:				topic = "$SYS/broker/log/WS";
        -:  258:#ifndef WIN32
        -:  259:				syslog_priority = LOG_DEBUG;
        -:  260:#else
        -:  261:				syslog_priority = EVENTLOG_INFORMATION_TYPE;
        -:  262:#endif
        -:  263:				break;
        -:  264:#endif
        -:  265:			default:
    #####:  266:				topic = "$SYS/broker/log/E";
        -:  267:#ifndef WIN32
    #####:  268:				syslog_priority = LOG_ERR;
        -:  269:#else
        -:  270:				syslog_priority = EVENTLOG_ERROR_TYPE;
        -:  271:#endif
    #####:  272:		}
    #####:  273:		len = strlen(fmt) + 500;
    #####:  274:		s = mosquitto__malloc(len*sizeof(char));
    #####:  275:		if(!s) return MOSQ_ERR_NOMEM;
        -:  276:
    #####:  277:		vsnprintf(s, len, fmt, va);
    #####:  278:		s[len-1] = '\0'; /* Ensure string is null terminated. */
        -:  279:
    #####:  280:		if(log_timestamp && log_timestamp_format){
    #####:  281:			struct tm *ti = NULL;
    #####:  282:			get_time(&ti);
    #####:  283:			if(strftime(time_buf, 50, log_timestamp_format, ti) == 0){
    #####:  284:				snprintf(time_buf, 50, "Time error");
    #####:  285:			}
    #####:  286:		}
    #####:  287:		if(log_destinations & MQTT3_LOG_STDOUT){
    #####:  288:			if(log_timestamp){
    #####:  289:				if(log_timestamp_format){
    #####:  290:					fprintf(stdout, "%s: %s\n", time_buf, s);
    #####:  291:				}else{
    #####:  292:					fprintf(stdout, "%d: %s\n", (int)now, s);
        -:  293:				}
    #####:  294:			}else{
    #####:  295:				fprintf(stdout, "%s\n", s);
        -:  296:			}
    #####:  297:			fflush(stdout);
    #####:  298:		}
    #####:  299:		if(log_destinations & MQTT3_LOG_STDERR){
    #####:  300:			if(log_timestamp){
    #####:  301:				if(log_timestamp_format){
    #####:  302:					fprintf(stderr, "%s: %s\n", time_buf, s);
    #####:  303:				}else{
    #####:  304:					fprintf(stderr, "%d: %s\n", (int)now, s);
        -:  305:				}
    #####:  306:			}else{
    #####:  307:				fprintf(stderr, "%s\n", s);
        -:  308:			}
    #####:  309:			fflush(stderr);
    #####:  310:		}
    #####:  311:		if(log_destinations & MQTT3_LOG_FILE && log_fptr){
    #####:  312:			if(log_timestamp){
    #####:  313:				if(log_timestamp_format){
    #####:  314:					fprintf(log_fptr, "%s: %s\n", time_buf, s);
    #####:  315:				}else{
    #####:  316:					fprintf(log_fptr, "%d: %s\n", (int)now, s);
        -:  317:				}
    #####:  318:			}else{
    #####:  319:				fprintf(log_fptr, "%s\n", s);
        -:  320:			}
    #####:  321:			if(now - last_flush > 1){
    #####:  322:				fflush(log_fptr);
    #####:  323:				last_flush = now;
    #####:  324:			}
    #####:  325:		}
    #####:  326:		if(log_destinations & MQTT3_LOG_SYSLOG){
        -:  327:#ifndef WIN32
    #####:  328:			syslog(syslog_priority, "%s", s);
        -:  329:#else
        -:  330:			sp = (char *)s;
        -:  331:			ReportEvent(syslog_h, syslog_priority, 0, 0, NULL, 1, 0, &sp, NULL);
        -:  332:#endif
    #####:  333:		}
    #####:  334:		if(log_destinations & MQTT3_LOG_TOPIC && priority != MOSQ_LOG_DEBUG && priority != MOSQ_LOG_INTERNAL){
    #####:  335:			if(log_timestamp){
    #####:  336:				len += 30;
    #####:  337:				st = mosquitto__malloc(len*sizeof(char));
    #####:  338:				if(!st){
    #####:  339:					mosquitto__free(s);
    #####:  340:					return MOSQ_ERR_NOMEM;
        -:  341:				}
    #####:  342:				snprintf(st, len, "%d: %s", (int)now, s);
    #####:  343:				db__messages_easy_queue(&int_db, NULL, topic, 2, strlen(st), st, 0, 20, NULL);
    #####:  344:				mosquitto__free(st);
    #####:  345:			}else{
    #####:  346:				db__messages_easy_queue(&int_db, NULL, topic, 2, strlen(s), s, 0, 20, NULL);
        -:  347:			}
    #####:  348:		}
        -:  349:#ifdef WITH_DLT
        -:  350:		if(priority != MOSQ_LOG_INTERNAL){
        -:  351:			DLT_LOG_STRING(dltContext, get_dlt_level(priority), s);
        -:  352:		}
        -:  353:#endif
    #####:  354:		mosquitto__free(s);
    #####:  355:	}
        -:  356:
    #####:  357:	return MOSQ_ERR_SUCCESS;
    #####:  358:}
        -:  359:
    #####:  360:int log__printf(struct mosquitto *mosq, int priority, const char *fmt, ...)
        -:  361:{
        -:  362:	va_list va;
        -:  363:	int rc;
        -:  364:
    #####:  365:	UNUSED(mosq);
        -:  366:
    #####:  367:	va_start(va, fmt);
    #####:  368:	rc = log__vprintf(priority, fmt, va);
    #####:  369:	va_end(va);
        -:  370:
    #####:  371:	return rc;
        -:  372:}
        -:  373:
    #####:  374:void log__internal(const char *fmt, ...)
        -:  375:{
        -:  376:	va_list va;
        -:  377:	char buf[200];
        -:  378:	int len;
        -:  379:
    #####:  380:	va_start(va, fmt);
    #####:  381:	len = vsnprintf(buf, 200, fmt, va);
    #####:  382:	va_end(va);
        -:  383:
    #####:  384:	if(len >= 200){
    #####:  385:		log__printf(NULL, MOSQ_LOG_INTERNAL, "Internal log buffer too short (%d)", len);
    #####:  386:		return;
        -:  387:	}
        -:  388:
    #####:  389:	log__printf(NULL, MOSQ_LOG_INTERNAL, "%s%s%s", "\e[32m", buf, "\e[0m");
    #####:  390:}
        -:  391:
    #####:  392:int mosquitto_log_vprintf(int level, const char *fmt, va_list va)
        -:  393:{
    #####:  394:	return log__vprintf(level, fmt, va);
        -:  395:}
        -:  396:
    #####:  397:void mosquitto_log_printf(int level, const char *fmt, ...)
        -:  398:{
        -:  399:	va_list va;
        -:  400:
    #####:  401:	va_start(va, fmt);
    #####:  402:	log__vprintf(level, fmt, va);
    #####:  403:	va_end(va);
    #####:  404:}
        -:  405:
