        -:    0:Source:../lib/packet_datatypes.c
        -:    0:Graph:packet_datatypes.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <errno.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#ifdef WITH_BROKER
        -:   24:#  include "mosquitto_broker_internal.h"
        -:   25:#  ifdef WITH_WEBSOCKETS
        -:   26:#    include <libwebsockets.h>
        -:   27:#  endif
        -:   28:#else
        -:   29:#  include "read_handle.h"
        -:   30:#endif
        -:   31:
        -:   32:#include "memory_mosq.h"
        -:   33:#include "mqtt_protocol.h"
        -:   34:#include "net_mosq.h"
        -:   35:#include "packet_mosq.h"
        -:   36:#include "read_handle.h"
        -:   37:#ifdef WITH_BROKER
        -:   38:#  include "sys_tree.h"
        -:   39:#else
        -:   40:#  define G_BYTES_RECEIVED_INC(A)
        -:   41:#  define G_BYTES_SENT_INC(A)
        -:   42:#  define G_MSGS_SENT_INC(A)
        -:   43:#  define G_PUB_MSGS_SENT_INC(A)
        -:   44:#endif
        -:   45:
        -:   46:
    #####:   47:int packet__read_byte(struct mosquitto__packet *packet, uint8_t *byte)
        -:   48:{
    #####:   49:	assert(packet);
    #####:   50:	if(packet->pos+1 > packet->remaining_length) return MOSQ_ERR_PROTOCOL;
        -:   51:
    #####:   52:	*byte = packet->payload[packet->pos];
    #####:   53:	packet->pos++;
        -:   54:
        -:   55:	//log__printf(NULL, MOSQ_LOG_NOTICE, "Packet byte: %s", byte);
        -:   56:
    #####:   57:	return MOSQ_ERR_SUCCESS;
    #####:   58:}
        -:   59:
        -:   60:
    #####:   61:void packet__write_byte(struct mosquitto__packet *packet, uint8_t byte)
        -:   62:{
    #####:   63:	assert(packet);
    #####:   64:	assert(packet->pos+1 <= packet->packet_length);
        -:   65:
    #####:   66:	packet->payload[packet->pos] = byte;
    #####:   67:	packet->pos++;
    #####:   68:}
        -:   69:
        -:   70:
    #####:   71:int packet__read_bytes(struct mosquitto__packet *packet, void *bytes, uint32_t count)
        -:   72:{
    #####:   73:	assert(packet);
    #####:   74:	if(packet->pos+count > packet->remaining_length) return MOSQ_ERR_PROTOCOL;
        -:   75:
    #####:   76:	memcpy(bytes, &(packet->payload[packet->pos]), count);
    #####:   77:	packet->pos += count;
        -:   78:
    #####:   79:	return MOSQ_ERR_SUCCESS;
    #####:   80:}
        -:   81:
        -:   82:
    #####:   83:void packet__write_bytes(struct mosquitto__packet *packet, const void *bytes, uint32_t count)
        -:   84:{
    #####:   85:	assert(packet);
    #####:   86:	assert(packet->pos+count <= packet->packet_length);
        -:   87:
    #####:   88:	memcpy(&(packet->payload[packet->pos]), bytes, count);
    #####:   89:	packet->pos += count;
    #####:   90:}
        -:   91:
        -:   92:
    #####:   93:int packet__read_binary(struct mosquitto__packet *packet, uint8_t **data, int *length)
        -:   94:{
        -:   95:	uint16_t slen;
        -:   96:	int rc;
        -:   97:
    #####:   98:	assert(packet);
    #####:   99:	rc = packet__read_uint16(packet, &slen);
    #####:  100:	if(rc) return rc;
        -:  101:
    #####:  102:	if(slen == 0){
    #####:  103:		*data = NULL;
    #####:  104:		*length = 0;
    #####:  105:		return MOSQ_ERR_SUCCESS;
        -:  106:	}
        -:  107:
    #####:  108:	if(packet->pos+slen > packet->remaining_length) return MOSQ_ERR_PROTOCOL;
        -:  109:
    #####:  110:	*data = mosquitto__malloc(slen+1);
    #####:  111:	if(*data){
    #####:  112:		memcpy(*data, &(packet->payload[packet->pos]), slen);
    #####:  113:		((uint8_t *)(*data))[slen] = '\0';
    #####:  114:		packet->pos += slen;
        -:  115:
        -:  116:		// Tests - RPW.
        -:  117:		#ifdef WITH_RPW_DBG
        -:  118:		log__printf(NULL, MOSQ_LOG_NOTICE, "Read packet: %s", *data);
        -:  119:		#endif
        -:  120:		// End tests.
    #####:  121:	}else{
    #####:  122:		return MOSQ_ERR_NOMEM;
        -:  123:	}
        -:  124:
    #####:  125:	*length = slen;
    #####:  126:	return MOSQ_ERR_SUCCESS;
    #####:  127:}
        -:  128:
        -:  129:
    #####:  130:int packet__read_string(struct mosquitto__packet *packet, char **str, int *length)
        -:  131:{
        -:  132:	int rc;
        -:  133:
    #####:  134:	rc = packet__read_binary(packet, (uint8_t **)str, length);
    #####:  135:	if(rc) return rc;
    #####:  136:	if(*length == 0) return MOSQ_ERR_SUCCESS;
        -:  137:
    #####:  138:	if(mosquitto_validate_utf8(*str, *length)){
    #####:  139:		mosquitto__free(*str);
    #####:  140:		*str = NULL;
    #####:  141:		*length = -1;
    #####:  142:		return MOSQ_ERR_MALFORMED_UTF8;
        -:  143:	}
        -:  144:
    #####:  145:	return MOSQ_ERR_SUCCESS;
    #####:  146:}
        -:  147:
        -:  148:
    #####:  149:void packet__write_string(struct mosquitto__packet *packet, const char *str, uint16_t length)
        -:  150:{
    #####:  151:	assert(packet);
    #####:  152:	packet__write_uint16(packet, length);
    #####:  153:	packet__write_bytes(packet, str, length);
    #####:  154:}
        -:  155:
        -:  156:
    #####:  157:int packet__read_uint16(struct mosquitto__packet *packet, uint16_t *word)
        -:  158:{
        -:  159:	uint8_t msb, lsb;
        -:  160:
    #####:  161:	assert(packet);
    #####:  162:	if(packet->pos+2 > packet->remaining_length) return MOSQ_ERR_PROTOCOL;
        -:  163:
    #####:  164:	msb = packet->payload[packet->pos];
    #####:  165:	packet->pos++;
    #####:  166:	lsb = packet->payload[packet->pos];
    #####:  167:	packet->pos++;
        -:  168:
    #####:  169:	*word = (msb<<8) + lsb;
        -:  170:
    #####:  171:	return MOSQ_ERR_SUCCESS;
    #####:  172:}
        -:  173:
        -:  174:
    #####:  175:void packet__write_uint16(struct mosquitto__packet *packet, uint16_t word)
        -:  176:{
    #####:  177:	packet__write_byte(packet, MOSQ_MSB(word));
    #####:  178:	packet__write_byte(packet, MOSQ_LSB(word));
    #####:  179:}
        -:  180:
        -:  181:
    #####:  182:int packet__read_uint32(struct mosquitto__packet *packet, uint32_t *word)
        -:  183:{
    #####:  184:	uint32_t val = 0;
        -:  185:	int i;
        -:  186:
    #####:  187:	assert(packet);
    #####:  188:	if(packet->pos+4 > packet->remaining_length) return MOSQ_ERR_PROTOCOL;
        -:  189:
    #####:  190:	for(i=0; i<4; i++){
    #####:  191:		val = (val << 8) + packet->payload[packet->pos];
    #####:  192:		packet->pos++;
    #####:  193:	}
        -:  194:
    #####:  195:	*word = val;
        -:  196:
    #####:  197:	return MOSQ_ERR_SUCCESS;
    #####:  198:}
        -:  199:
        -:  200:
    #####:  201:void packet__write_uint32(struct mosquitto__packet *packet, uint32_t word)
        -:  202:{
    #####:  203:	packet__write_byte(packet, (word & 0xFF000000) >> 24);
    #####:  204:	packet__write_byte(packet, (word & 0x00FF0000) >> 16);
    #####:  205:	packet__write_byte(packet, (word & 0x0000FF00) >> 8);
    #####:  206:	packet__write_byte(packet, (word & 0x000000FF));
    #####:  207:}
        -:  208:
        -:  209:
    #####:  210:int packet__read_varint(struct mosquitto__packet *packet, int32_t *word, int8_t *bytes)
        -:  211:{
        -:  212:	int i;
        -:  213:	uint8_t byte;
    #####:  214:	int remaining_mult = 1;
    #####:  215:	int32_t lword = 0;
    #####:  216:	uint8_t lbytes = 0;
        -:  217:
    #####:  218:	for(i=0; i<4; i++){
    #####:  219:		if(packet->pos < packet->remaining_length){
    #####:  220:			lbytes++;
    #####:  221:			byte = packet->payload[packet->pos];
    #####:  222:			lword += (byte & 127) * remaining_mult;
    #####:  223:			remaining_mult *= 128;
    #####:  224:			packet->pos++;
    #####:  225:			if((byte & 128) == 0){
    #####:  226:				if(lbytes > 1 && byte == 0){
        -:  227:					/* Catch overlong encodings */
    #####:  228:					return MOSQ_ERR_PROTOCOL;
        -:  229:				}else{
    #####:  230:					*word = lword;
    #####:  231:					if(bytes) (*bytes) = lbytes;
    #####:  232:					return MOSQ_ERR_SUCCESS;
        -:  233:				}
        -:  234:			}
    #####:  235:		}else{
    #####:  236:			return MOSQ_ERR_PROTOCOL;
        -:  237:		}
    #####:  238:	}
    #####:  239:	return MOSQ_ERR_PROTOCOL;
    #####:  240:}
        -:  241:
        -:  242:
    #####:  243:int packet__write_varint(struct mosquitto__packet *packet, int32_t word)
        -:  244:{
        -:  245:	uint8_t byte;
    #####:  246:	int count = 0;
        -:  247:
    #####:  248:	do{
    #####:  249:		byte = word % 128;
    #####:  250:		word = word / 128;
        -:  251:		/* If there are more digits to encode, set the top bit of this digit */
    #####:  252:		if(word > 0){
    #####:  253:			byte = byte | 0x80;
    #####:  254:		}
    #####:  255:		packet__write_byte(packet, byte);
    #####:  256:		count++;
    #####:  257:	}while(word > 0 && count < 5);
        -:  258:
    #####:  259:	if(count == 5){
    #####:  260:		return MOSQ_ERR_PROTOCOL;
        -:  261:	}
    #####:  262:	return MOSQ_ERR_SUCCESS;
    #####:  263:}
        -:  264:
        -:  265:
    #####:  266:int packet__varint_bytes(int32_t word)
        -:  267:{
    #####:  268:	if(word < 128){
    #####:  269:		return 1;
    #####:  270:	}else if(word < 16384){
    #####:  271:		return 2;
    #####:  272:	}else if(word < 2097152){
    #####:  273:		return 3;
    #####:  274:	}else if(word < 268435456){
    #####:  275:		return 4;
        -:  276:	}else{
    #####:  277:		return 5;
        -:  278:	}
    #####:  279:}
