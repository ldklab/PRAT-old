        -:    0:Source:../lib/memory_mosq.c
        -:    0:Graph:memory_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#include "memory_mosq.h"
        -:   23:
        -:   24:#ifdef REAL_WITH_MEMORY_TRACKING
        -:   25:#  if defined(__APPLE__)
        -:   26:#    include <malloc/malloc.h>
        -:   27:#    define malloc_usable_size malloc_size
        -:   28:#  elif defined(__FreeBSD__)
        -:   29:#    include <malloc_np.h>
        -:   30:#  else
        -:   31:#    include <malloc.h>
        -:   32:#  endif
        -:   33:#endif
        -:   34:
        -:   35:#ifdef REAL_WITH_MEMORY_TRACKING
        -:   36:static unsigned long memcount = 0;
        -:   37:static unsigned long max_memcount = 0;
        -:   38:#endif
        -:   39:
        -:   40:#ifdef WITH_BROKER
        -:   41:static size_t mem_limit = 0;
    #####:   42:void memory__set_limit(size_t lim)
        -:   43:{
    #####:   44:	mem_limit = lim;
    #####:   45:}
        -:   46:#endif
        -:   47:
    #####:   48:void *mosquitto__calloc(size_t nmemb, size_t size)
        -:   49:{
        -:   50:#ifdef REAL_WITH_MEMORY_TRACKING
        -:   51:	if(mem_limit && memcount + size > mem_limit){
        -:   52:		return NULL;
        -:   53:	}
        -:   54:#endif
    #####:   55:	void *mem = calloc(nmemb, size);
        -:   56:
        -:   57:#ifdef REAL_WITH_MEMORY_TRACKING
        -:   58:	if(mem){
        -:   59:		memcount += malloc_usable_size(mem);
        -:   60:		if(memcount > max_memcount){
        -:   61:			max_memcount = memcount;
        -:   62:		}
        -:   63:	}
        -:   64:#endif
        -:   65:
    #####:   66:	return mem;
        -:   67:}
        -:   68:
    #####:   69:void mosquitto__free(void *mem)
        -:   70:{
        -:   71:#ifdef REAL_WITH_MEMORY_TRACKING
        -:   72:	if(!mem){
        -:   73:		return;
        -:   74:	}
        -:   75:	memcount -= malloc_usable_size(mem);
        -:   76:#endif
    #####:   77:	free(mem);
    #####:   78:}
        -:   79:
    #####:   80:void *mosquitto__malloc(size_t size)
        -:   81:{
        -:   82:#ifdef REAL_WITH_MEMORY_TRACKING
        -:   83:	if(mem_limit && memcount + size > mem_limit){
        -:   84:		return NULL;
        -:   85:	}
        -:   86:#endif
    #####:   87:	void *mem = malloc(size);
        -:   88:
        -:   89:#ifdef REAL_WITH_MEMORY_TRACKING
        -:   90:	if(mem){
        -:   91:		memcount += malloc_usable_size(mem);
        -:   92:		if(memcount > max_memcount){
        -:   93:			max_memcount = memcount;
        -:   94:		}
        -:   95:	}
        -:   96:#endif
        -:   97:
    #####:   98:	return mem;
        -:   99:}
        -:  100:
        -:  101:#ifdef REAL_WITH_MEMORY_TRACKING
        -:  102:unsigned long mosquitto__memory_used(void)
        -:  103:{
        -:  104:	return memcount;
        -:  105:}
        -:  106:
        -:  107:unsigned long mosquitto__max_memory_used(void)
        -:  108:{
        -:  109:	return max_memcount;
        -:  110:}
        -:  111:#endif
        -:  112:
    #####:  113:void *mosquitto__realloc(void *ptr, size_t size)
        -:  114:{
        -:  115:#ifdef REAL_WITH_MEMORY_TRACKING
        -:  116:	if(mem_limit && memcount + size > mem_limit){
        -:  117:		return NULL;
        -:  118:	}
        -:  119:#endif
        -:  120:	void *mem;
        -:  121:#ifdef REAL_WITH_MEMORY_TRACKING
        -:  122:	if(ptr){
        -:  123:		memcount -= malloc_usable_size(ptr);
        -:  124:	}
        -:  125:#endif
    #####:  126:	mem = realloc(ptr, size);
        -:  127:
        -:  128:#ifdef REAL_WITH_MEMORY_TRACKING
        -:  129:	if(mem){
        -:  130:		memcount += malloc_usable_size(mem);
        -:  131:		if(memcount > max_memcount){
        -:  132:			max_memcount = memcount;
        -:  133:		}
        -:  134:	}
        -:  135:#endif
        -:  136:
    #####:  137:	return mem;
        -:  138:}
        -:  139:
    #####:  140:char *mosquitto__strdup(const char *s)
        -:  141:{
        -:  142:#ifdef REAL_WITH_MEMORY_TRACKING
        -:  143:	if(mem_limit && memcount + strlen(s) > mem_limit){
        -:  144:		return NULL;
        -:  145:	}
        -:  146:#endif
    #####:  147:	char *str = strdup(s);
        -:  148:
        -:  149:#ifdef REAL_WITH_MEMORY_TRACKING
        -:  150:	if(str){
        -:  151:		memcount += malloc_usable_size(str);
        -:  152:		if(memcount > max_memcount){
        -:  153:			max_memcount = memcount;
        -:  154:		}
        -:  155:	}
        -:  156:#endif
        -:  157:
    #####:  158:	return str;
        -:  159:}
        -:  160:
