        -:    0:Source:signals.c
        -:    0:Graph:signals.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2016-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:   Dmitry Kaukov - windows named events implementation.
        -:   16:*/
        -:   17:
        -:   18:#include "config.h"
        -:   19:
        -:   20:#ifndef WIN32
        -:   21:#  include <unistd.h>
        -:   22:#  include <grp.h>
        -:   23:#  include <assert.h>
        -:   24:#endif
        -:   25:
        -:   26:#ifndef WIN32
        -:   27:#include <pwd.h>
        -:   28:#else
        -:   29:#include <process.h>
        -:   30:#include <winsock2.h>
        -:   31:#include <ws2tcpip.h>
        -:   32:#endif
        -:   33:
        -:   34:#ifndef WIN32
        -:   35:#  include <sys/time.h>
        -:   36:#endif
        -:   37:
        -:   38:#include <errno.h>
        -:   39:#include <signal.h>
        -:   40:#include <stdio.h>
        -:   41:#include <string.h>
        -:   42:#ifdef WITH_SYSTEMD
        -:   43:#  include <systemd/sd-daemon.h>
        -:   44:#endif
        -:   45:#ifdef WITH_WRAP
        -:   46:#include <tcpd.h>
        -:   47:#endif
        -:   48:#ifdef WITH_WEBSOCKETS
        -:   49:#  include <libwebsockets.h>
        -:   50:#endif
        -:   51:
        -:   52:#include "mosquitto_broker_internal.h"
        -:   53:#include "memory_mosq.h"
        -:   54:#include "util_mosq.h"
        -:   55:
        -:   56:extern bool flag_reload;
        -:   57:#ifdef WITH_PERSISTENCE
        -:   58:extern bool flag_db_backup;
        -:   59:#endif
        -:   60:extern bool flag_tree_print;
        -:   61:extern int run;
        -:   62:
        -:   63:#ifdef SIGHUP
        -:   64:/* Signal handler for SIGHUP - flag a config reload. */
    #####:   65:void handle_sighup(int signal)
        -:   66:{
    #####:   67:	UNUSED(signal);
        -:   68:
    #####:   69:	flag_reload = true;
    #####:   70:}
        -:   71:#endif
        -:   72:
        -:   73:/* Signal handler for SIGINT and SIGTERM - just stop gracefully. */
    #####:   74:void handle_sigint(int signal)
        -:   75:{
    #####:   76:	UNUSED(signal);
        -:   77:
    #####:   78:	run = 0;
    #####:   79:}
        -:   80:
        -:   81:/* Signal handler for SIGUSR1 - backup the db. */
    #####:   82:void handle_sigusr1(int signal)
        -:   83:{
    #####:   84:	UNUSED(signal);
        -:   85:
        -:   86:#ifdef WITH_PERSISTENCE
        -:   87:	flag_db_backup = true;
        -:   88:#endif
    #####:   89:}
        -:   90:
        -:   91:/* Signal handler for SIGUSR2 - print subscription / retained tree. */
    #####:   92:void handle_sigusr2(int signal)
        -:   93:{
    #####:   94:	UNUSED(signal);
        -:   95:
    #####:   96:	flag_tree_print = true;
    #####:   97:}
        -:   98:
        -:   99:/*
        -:  100: *
        -:  101: * Signalling mosquitto process on Win32.
        -:  102: *
        -:  103: *  On Windows we we can use named events to pass signals to the mosquitto process.
        -:  104: *  List of events :
        -:  105: *
        -:  106: *    mosqPID_shutdown
        -:  107: *    mosqPID_reload
        -:  108: *    mosqPID_backup
        -:  109: *
        -:  110: * (where PID is the PID of the mosquitto process).
        -:  111: */
        -:  112:#ifdef WIN32
        -:  113:DWORD WINAPI SigThreadProc(void* data)
        -:  114:{
        -:  115:	TCHAR evt_name[MAX_PATH];
        -:  116:	static HANDLE evt[3];
        -:  117:	int pid = GetCurrentProcessId();
        -:  118:
        -:  119:	sprintf_s(evt_name, MAX_PATH, "mosq%d_shutdown", pid);
        -:  120:	evt[0] = CreateEvent(NULL, TRUE, FALSE, evt_name);
        -:  121:	sprintf_s(evt_name, MAX_PATH, "mosq%d_reload", pid);
        -:  122:	evt[1] = CreateEvent(NULL, FALSE, FALSE, evt_name);
        -:  123:	sprintf_s(evt_name, MAX_PATH, "mosq%d_backup", pid);
        -:  124:	evt[2] = CreateEvent(NULL, FALSE, FALSE, evt_name);
        -:  125:
        -:  126:	while (true) {
        -:  127:		int wr = WaitForMultipleObjects(sizeof(evt) / sizeof(HANDLE), evt, FALSE, INFINITE);
        -:  128:		switch (wr) {
        -:  129:			case WAIT_OBJECT_0 + 0:
        -:  130:				handle_sigint(SIGINT);
        -:  131:				break;
        -:  132:			case WAIT_OBJECT_0 + 1:
        -:  133:				flag_reload = true;
        -:  134:				continue;
        -:  135:			case WAIT_OBJECT_0 + 2:
        -:  136:				handle_sigusr1(0);
        -:  137:				continue;
        -:  138:				break;
        -:  139:		}
        -:  140:	}
        -:  141:	CloseHandle(evt[0]);
        -:  142:	CloseHandle(evt[1]);
        -:  143:	CloseHandle(evt[2]);
        -:  144:	return 0;
        -:  145:}
        -:  146:#endif
        -:  147:
