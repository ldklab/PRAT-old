        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/sasl_anonymous.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include "azure_macro_utils/macro_utils.h"
        -:    7:#include "azure_c_shared_utility/gballoc.h"
        -:    8:#include "azure_c_shared_utility/xlogging.h"
        -:    9:#include "azure_uamqp_c/sasl_anonymous.h"
        -:   10:
        -:   11:typedef struct SASL_ANONYMOUS_INSTANCE_TAG
        -:   12:{
        -:   13:    unsigned char dummy;
        -:   14:} SASL_ANONYMOUS_INSTANCE;
        -:   15:
        -:   16:/* Codes_SRS_SASL_ANONYMOUS_01_001: [`saslanonymous_create` shall return on success a non-NULL handle to a new SASL anonymous mechanism.]*/
    #####:   17:static CONCRETE_SASL_MECHANISM_HANDLE saslanonymous_create(void* config)
        -:   18:{
        -:   19:    CONCRETE_SASL_MECHANISM_HANDLE result;
        -:   20:
        -:   21:    /* Codes_SRS_SASL_ANONYMOUS_01_003: [Since this is the ANONYMOUS SASL mechanism, `config` shall be ignored.]*/
        -:   22:    (void)config;
        -:   23:
    #####:   24:    result = malloc(sizeof(SASL_ANONYMOUS_INSTANCE));
    #####:   25:    if (result == NULL)
        -:   26:    {
        -:   27:        /* Codes_SRS_SASL_ANONYMOUS_01_002: [If allocating the memory needed for the SASL anonymous instance fails then `saslanonymous_create` shall return NULL.] */
    #####:   28:        LogError("Cannot allocate memory for SASL anonymous instance");
        -:   29:    }
        -:   30:
    #####:   31:    return result;
        -:   32:}
        -:   33:
    #####:   34:static void saslanonymous_destroy(CONCRETE_SASL_MECHANISM_HANDLE sasl_mechanism_concrete_handle)
        -:   35:{
        -:   36:    /* Codes_SRS_SASL_ANONYMOUS_01_005: [If the argument `concrete_sasl_mechanism` is NULL, `saslanonymous_destroy` shall do nothing.]*/
    #####:   37:    if (sasl_mechanism_concrete_handle == NULL)
        -:   38:    {
    #####:   39:        LogError("NULL sasl_mechanism_concrete_handle");
        -:   40:    }
        -:   41:    else
        -:   42:    {
        -:   43:        /* Codes_SRS_SASL_ANONYMOUS_01_004: [`saslanonymous_destroy` shall free all resources associated with the SASL mechanism.] */
    #####:   44:        free(sasl_mechanism_concrete_handle);
        -:   45:    }
    #####:   46:}
        -:   47:
    #####:   48:static int saslanonymous_get_init_bytes(CONCRETE_SASL_MECHANISM_HANDLE sasl_mechanism_concrete_handle, SASL_MECHANISM_BYTES* init_bytes)
        -:   49:{
        -:   50:    int result;
        -:   51:
        -:   52:    /* Codes_SRS_SASL_ANONYMOUS_01_007: [If any argument is NULL, `saslanonymous_get_init_bytes` shall return a non-zero value.]*/
    #####:   53:    if ((sasl_mechanism_concrete_handle == NULL) ||
        -:   54:        (init_bytes == NULL))
        -:   55:    {
    #####:   56:        LogError("Bad arguments: sasl_mechanism_concrete_handle = %p, init_bytes = %p",
        -:   57:            sasl_mechanism_concrete_handle, init_bytes);
    #####:   58:        result = MU_FAILURE;
        -:   59:    }
        -:   60:    else
        -:   61:    {
        -:   62:        /* Codes_SRS_SASL_ANONYMOUS_01_012: [The bytes field of `init_buffer` shall be set to NULL.] */
    #####:   63:        init_bytes->bytes = NULL;
        -:   64:        /* Codes_SRS_SASL_ANONYMOUS_01_006: [`saslanonymous_get_init_bytes` shall validate the `concrete_sasl_mechanism` argument and set the length of the `init_bytes` argument to be zero.] */
    #####:   65:        init_bytes->length = 0;
        -:   66:
        -:   67:        /* Codes_SRS_SASL_ANONYMOUS_01_011: [On success `saslanonymous_get_init_bytes` shall return zero.] */
    #####:   68:        result = 0;
        -:   69:    }
        -:   70:
    #####:   71:    return result;
        -:   72:}
        -:   73:
    #####:   74:static const char* saslanonymous_get_mechanism_name(CONCRETE_SASL_MECHANISM_HANDLE sasl_mechanism)
        -:   75:{
        -:   76:    const char* result;
        -:   77:
        -:   78:    /* Codes_SRS_SASL_ANONYMOUS_01_009: [If the argument `concrete_sasl_mechanism` is NULL, `saslanonymous_get_mechanism_name` shall return NULL.] */
    #####:   79:    if (sasl_mechanism == NULL)
        -:   80:    {
    #####:   81:        LogError("NULL sasl_mechanism");
    #####:   82:        result = NULL;
        -:   83:    }
        -:   84:    else
        -:   85:    {
        -:   86:        /* Codes_SRS_SASL_ANONYMOUS_01_008: [`saslanonymous_get_mechanism_name` shall validate the argument `concrete_sasl_mechanism` and on success it shall return a pointer to the string `ANONYMOUS`.] */
    #####:   87:        result = "ANONYMOUS";
        -:   88:    }
        -:   89:
    #####:   90:    return result;
        -:   91:}
        -:   92:
    #####:   93:static int saslanonymous_challenge(CONCRETE_SASL_MECHANISM_HANDLE concrete_sasl_mechanism, const SASL_MECHANISM_BYTES* challenge_bytes, SASL_MECHANISM_BYTES* response_bytes)
        -:   94:{
        -:   95:    int result;
        -:   96:
        -:   97:    (void)challenge_bytes;
        -:   98:
        -:   99:    /* Codes_SRS_SASL_ANONYMOUS_01_015: [If the `concrete_sasl_mechanism` or `response_bytes` argument is NULL then `saslanonymous_challenge` shall fail and return a non-zero value.] */
    #####:  100:    if ((concrete_sasl_mechanism == NULL) ||
        -:  101:        (response_bytes == NULL))
        -:  102:    {
    #####:  103:        LogError("Bad arguments: concrete_sasl_mechanism = %p, response_bytes = %p",
        -:  104:            concrete_sasl_mechanism, response_bytes);
    #####:  105:        result = MU_FAILURE;
        -:  106:    }
        -:  107:    else
        -:  108:    {
        -:  109:        /* Codes_SRS_SASL_ANONYMOUS_01_013: [`saslanonymous_challenge` shall set the `buffer` field to NULL and `size` to 0 in the `response_bytes` argument as the ANONYMOUS SASL mechanism does not implement challenge/response.] */
    #####:  110:        response_bytes->bytes = NULL;
    #####:  111:        response_bytes->length = 0;
        -:  112:
        -:  113:        /* Codes_SRS_SASL_ANONYMOUS_01_014: [On success, `saslanonymous_challenge` shall return 0.] */
    #####:  114:        result = 0;
        -:  115:    }
        -:  116:
    #####:  117:    return result;
        -:  118:}
        -:  119:
        -:  120:/* Codes_SRS_SASL_ANONYMOUS_01_010: [`saslanonymous_get_interface` shall return a pointer to a `SASL_MECHANISM_INTERFACE_DESCRIPTION` structure that contains pointers to the functions: `saslanonymous_create`, `saslanonymous_destroy`, `saslanonymous_get_init_bytes`, `saslanonymous_get_mechanism_name`, `saslanonymous_challenge`.] */
        -:  121:static const SASL_MECHANISM_INTERFACE_DESCRIPTION saslanonymous_interface =
        -:  122:{
        -:  123:    saslanonymous_create,
        -:  124:    saslanonymous_destroy,
        -:  125:    saslanonymous_get_init_bytes,
        -:  126:    saslanonymous_get_mechanism_name,
        -:  127:    saslanonymous_challenge
        -:  128:};
        -:  129:
    #####:  130:const SASL_MECHANISM_INTERFACE_DESCRIPTION* saslanonymous_get_interface(void)
        -:  131:{
    #####:  132:    return &saslanonymous_interface;
        -:  133:}
