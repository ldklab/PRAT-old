        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/async_operation.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <stdint.h>
        -:    6:#include <stddef.h>
        -:    7:#include <string.h>
        -:    8:#include "azure_macro_utils/macro_utils.h"
        -:    9:#include "azure_c_shared_utility/gballoc.h"
        -:   10:#include "azure_c_shared_utility/xlogging.h"
        -:   11:#include "azure_uamqp_c/async_operation.h"
        -:   12:
        -:   13:typedef struct ASYNC_OPERATION_INSTANCE_TAG
        -:   14:{
        -:   15:    ASYNC_OPERATION_CANCEL_HANDLER_FUNC async_operation_cancel_handler;
        -:   16:} ASYNC_OPERATION_INSTANCE;
        -:   17:
    #####:   18:ASYNC_OPERATION_HANDLE async_operation_create(ASYNC_OPERATION_CANCEL_HANDLER_FUNC async_operation_cancel_handler, size_t context_size)
        -:   19:{
        -:   20:    ASYNC_OPERATION_INSTANCE* async_operation;
        -:   21:
    #####:   22:    if (async_operation_cancel_handler == NULL)
        -:   23:    {
        -:   24:        /* Codes_SRS_ASYNC_OPERATION_01_002: [ If `async_operation_cancel_handler` is NULL, `async_operation_create` shall fail and return NULL.]*/
    #####:   25:        LogError("Cannot allocate memory for async operation");
    #####:   26:        async_operation = NULL;
        -:   27:    }
    #####:   28:    else if (context_size < sizeof(ASYNC_OPERATION_INSTANCE))
        -:   29:    {
        -:   30:        /* Codes_SRS_ASYNC_OPERATION_01_003: [ If `context_size` is less than the size of the `async_operation_cancel_handler` argument, `async_operation_create` shall fail and return NULL.]*/
    #####:   31:        LogError("Context size too small");
    #####:   32:        async_operation = NULL;
        -:   33:    }
        -:   34:    else
        -:   35:    {
    #####:   36:        async_operation = (ASYNC_OPERATION_INSTANCE*)malloc(context_size);
    #####:   37:        if (async_operation == NULL)
        -:   38:        {
        -:   39:            /* Codes_SRS_ASYNC_OPERATION_01_004: [ If allocating memory for the new asynchronous operation instance fails, `async_operation_create` shall fail and return NULL.]*/
    #####:   40:            LogError("Cannot allocate memory for async operation");
        -:   41:        }
        -:   42:        else
        -:   43:        {
        -:   44:            /* Codes_SRS_ASYNC_OPERATION_01_001: [ `async_operation_create` shall return a non-NULL handle to a newly created asynchronous operation instance.]*/
    #####:   45:            async_operation->async_operation_cancel_handler = async_operation_cancel_handler;
        -:   46:        }
        -:   47:    }
        -:   48:
    #####:   49:    return async_operation;
        -:   50:}
        -:   51:
    #####:   52:void async_operation_destroy(ASYNC_OPERATION_HANDLE async_operation)
        -:   53:{
    #####:   54:    if (async_operation == NULL)
        -:   55:    {
        -:   56:        /* Codes_SRS_ASYNC_OPERATION_01_006: [ If `async_operation` is NULL, `async_operation_destroy` shall do nothing.]*/
    #####:   57:        LogError("NULL async_operation");
        -:   58:    }
        -:   59:    else
        -:   60:    {
        -:   61:        /* Codes_SRS_ASYNC_OPERATION_01_005: [ `async_operation_destroy` shall free all recources associated with the asyncronous operation instance.]*/
    #####:   62:        free(async_operation);
        -:   63:    }
    #####:   64:}
        -:   65:
    #####:   66:int async_operation_cancel(ASYNC_OPERATION_HANDLE async_operation)
        -:   67:{
        -:   68:    int result;
        -:   69:
    #####:   70:    if (async_operation == NULL)
        -:   71:    {
    #####:   72:        LogError("NULL async_operation");
    #####:   73:        result = MU_FAILURE;
        -:   74:    }
        -:   75:    else
        -:   76:    {
        -:   77:        /* Codes_SRS_ASYNC_OPERATION_01_007: [ `async_operation_cancel` shall cancel the operation by calling the cancel handler function passed to `async_operation_create`.]*/
    #####:   78:        async_operation->async_operation_cancel_handler(async_operation);
        -:   79:
        -:   80:        /* Codes_SRS_ASYNC_OPERATION_01_008: [ On success `async_operation_cancel` shall return 0.]*/
    #####:   81:        result = 0;
        -:   82:    }
        -:   83:
    #####:   84:    return result;
        -:   85:}
