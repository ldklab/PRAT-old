        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/deps/azure-c-shared-utility/src/constmap.c
        -:    0:Programs:80
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <stdbool.h>
        -:    6:#include "azure_c_shared_utility/gballoc.h"
        -:    7:#include "azure_c_shared_utility/map.h"
        -:    8:#include "azure_c_shared_utility/constmap.h"
        -:    9:#include "azure_c_shared_utility/xlogging.h"
        -:   10:#include "azure_c_shared_utility/refcount.h"
        -:   11:
    #####:   12:MU_DEFINE_ENUM_STRINGS(CONSTMAP_RESULT, CONSTMAP_RESULT_VALUES);
------------------
CONSTMAP_RESULT_FromString:
    #####:   12:MU_DEFINE_ENUM_STRINGS(CONSTMAP_RESULT, CONSTMAP_RESULT_VALUES);
------------------
CONSTMAP_RESULTStrings:
    #####:   12:MU_DEFINE_ENUM_STRINGS(CONSTMAP_RESULT, CONSTMAP_RESULT_VALUES);
------------------
        -:   13:
        -:   14:typedef struct CONSTMAP_HANDLE_DATA_TAG
        -:   15:{
        -:   16:    MAP_HANDLE map;
        -:   17:} CONSTMAP_HANDLE_DATA;
        -:   18:
    #####:   19:DEFINE_REFCOUNT_TYPE(CONSTMAP_HANDLE_DATA);
------------------
REFCOUNT_CONSTMAP_HANDLE_DATA_Destroy:
    #####:   19:DEFINE_REFCOUNT_TYPE(CONSTMAP_HANDLE_DATA);
------------------
REFCOUNT_CONSTMAP_HANDLE_DATA_Create:
    #####:   19:DEFINE_REFCOUNT_TYPE(CONSTMAP_HANDLE_DATA);
------------------
REFCOUNT_CONSTMAP_HANDLE_DATA_Create_With_Extra_Size:
    #####:   19:DEFINE_REFCOUNT_TYPE(CONSTMAP_HANDLE_DATA);
------------------
        -:   20:
        -:   21:#define LOG_CONSTMAP_ERROR(result) LogError("result = %s", MU_ENUM_TO_STRING(CONSTMAP_RESULT, (result)));
        -:   22:
    #####:   23:CONSTMAP_HANDLE ConstMap_Create(MAP_HANDLE sourceMap)
        -:   24:{
    #####:   25:    CONSTMAP_HANDLE_DATA* result = REFCOUNT_TYPE_CREATE(CONSTMAP_HANDLE_DATA);
        -:   26:
    #####:   27:    if (result == NULL)
        -:   28:    {
    #####:   29:        LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:   30:    }
        -:   31:    else
        -:   32:    {
        -:   33:        /*Codes_SRS_CONSTMAP_17_048: [ConstMap_Create shall accept any non-NULL MAP_HANDLE as input.]*/
        -:   34:        /*Codes_SRS_CONSTMAP_17_001: [ConstMap_Create shall create an immutable map, populated by the key, value pairs in the source map.]*/
    #####:   35:        result->map = Map_Clone(sourceMap);
    #####:   36:        if (result->map == NULL)
        -:   37:        {
    #####:   38:            LOG_CONSTMAP_ERROR(CONSTMAP_ERROR);
    #####:   39:            REFCOUNT_TYPE_DESTROY(CONSTMAP_HANDLE_DATA, result);
        -:   40:            /*Codes_SRS_CONSTMAP_17_002: [If during creation there are any errors, then ConstMap_Create shall return NULL.]*/
    #####:   41:            result = NULL;
        -:   42:        }
        -:   43:    }
        -:   44:    /*Codes_SRS_CONSTMAP_17_003: [Otherwise, it shall return a non-NULL handle that can be used in subsequent calls.]*/
    #####:   45:    return (CONSTMAP_HANDLE)result;
        -:   46:}
        -:   47:
    #####:   48:void ConstMap_Destroy(CONSTMAP_HANDLE handle)
        -:   49:{
        -:   50:    /*Codes_SRS_CONSTMAP_17_005: [If parameter handle is NULL then ConstMap_Destroy shall take no action.]*/
    #####:   51:    if (handle == NULL)
        -:   52:    {
    #####:   53:        LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:   54:    }
        -:   55:    else
        -:   56:    {
        -:   57:        /*Codes_SRS_CONSTMAP_17_049: [ConstMap_Destroy shall decrement the internal reference count of the immutable map.]*/
    #####:   58:        if (DEC_REF(CONSTMAP_HANDLE_DATA, handle) == DEC_RETURN_ZERO)
        -:   59:        {
        -:   60:            /*Codes_SRS_CONSTMAP_17_004: [If the reference count is zero, ConstMap_Destroy shall release all resources associated with the immutable map.]*/
    #####:   61:            Map_Destroy(((CONSTMAP_HANDLE_DATA *)handle)->map);
    #####:   62:            REFCOUNT_TYPE_DESTROY(CONSTMAP_HANDLE_DATA, handle);
        -:   63:        }
        -:   64:
        -:   65:    }
    #####:   66:}
        -:   67:
    #####:   68:CONSTMAP_HANDLE ConstMap_Clone(CONSTMAP_HANDLE handle)
        -:   69:{
        -:   70:    /*Codes_SRS_CONSTMAP_17_038: [ConstMap_Clone returns NULL if parameter handle is NULL.] */
    #####:   71:    if (handle == NULL)
        -:   72:    {
    #####:   73:        LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:   74:    }
        -:   75:    else
        -:   76:    {
        -:   77:        /*Codes_SRS_CONSTMAP_17_039: [ConstMap_Clone shall increase the internal reference count of the immutable map indicated by parameter handle]*/
        -:   78:        /*Codes_SRS_CONSTMAP_17_050: [ConstMap_Clone shall return the non-NULL handle. ]*/
    #####:   79:        INC_REF(CONSTMAP_HANDLE_DATA, handle);
        -:   80:    }
    #####:   81:    return (handle);
        -:   82:}
        -:   83:
    #####:   84:static CONSTMAP_RESULT ConstMap_ErrorConvert(MAP_RESULT mapResult)
        -:   85:{
        -:   86:    CONSTMAP_RESULT result;
    #####:   87:    switch (mapResult)
        -:   88:    {
    #####:   89:        case MAP_OK:
    #####:   90:            result = CONSTMAP_OK;
    #####:   91:            break;
    #####:   92:        case MAP_INVALIDARG:
    #####:   93:            result = CONSTMAP_INVALIDARG;
    #####:   94:            break;
    #####:   95:        case MAP_KEYNOTFOUND:
    #####:   96:            result = CONSTMAP_KEYNOTFOUND;
    #####:   97:            break;
    #####:   98:        default:
    #####:   99:            result = CONSTMAP_ERROR;
    #####:  100:            break;
        -:  101:    }
    #####:  102:    return result;
        -:  103:}
        -:  104:
    #####:  105:MAP_HANDLE ConstMap_CloneWriteable(CONSTMAP_HANDLE handle)
        -:  106:{
    #####:  107:    MAP_HANDLE result = NULL;
    #####:  108:    if (handle == NULL)
        -:  109:    {
        -:  110:        /*Codes_SRS_CONSTMAP_17_051: [ConstMap_CloneWriteable returns NULL if parameter handle is NULL. ]*/
    #####:  111:        LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:  112:    }
        -:  113:    else
        -:  114:    {
        -:  115:        /*Codes_SRS_CONSTMAP_17_052: [ConstMap_CloneWriteable shall create a new, writeable map, populated by the key, value pairs in the parameter defined by handle.]*/
        -:  116:        /*Codes_SRS_CONSTMAP_17_053: [If during cloning, any operation fails, then ConstMap_CloneWriteableap_Clone shall return NULL.]*/
        -:  117:        /*Codes_SRS_CONSTMAP_17_054: [Otherwise, ConstMap_CloneWriteable shall return a non-NULL handle that can be used in subsequent calls.]*/
    #####:  118:        result = Map_Clone(((CONSTMAP_HANDLE_DATA *)handle)->map);
        -:  119:    }
    #####:  120:    return result;
        -:  121:}
        -:  122:
    #####:  123:bool ConstMap_ContainsKey(CONSTMAP_HANDLE handle, const char* key )
        -:  124:{
    #####:  125:    bool keyExists = false;
    #####:  126:    if (handle == NULL)
        -:  127:    {
        -:  128:        /*Codes_SRS_CONSTMAP_17_024: [If parameter handle or key are NULL then ConstMap_ContainsKey shall return false.]*/
    #####:  129:        LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:  130:    }
        -:  131:    else
        -:  132:    {
    #####:  133:        if (key == NULL)
        -:  134:        {
    #####:  135:            LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:  136:        }
        -:  137:        else
        -:  138:        {
        -:  139:            /*Codes_SRS_CONSTMAP_17_025: [Otherwise if a key exists then ConstMap_ContainsKey shall return true.]*/
    #####:  140:            MAP_RESULT mapResult = Map_ContainsKey(((CONSTMAP_HANDLE_DATA *)handle)->map, key, &keyExists);
    #####:  141:            if (mapResult != MAP_OK)
        -:  142:            {
        -:  143:                /*Codes_SRS_CONSTMAP_17_026: [If a key doesn't exist, then ConstMap_ContainsKey shall return false.]*/
    #####:  144:                keyExists = false;
    #####:  145:                LOG_CONSTMAP_ERROR(ConstMap_ErrorConvert(mapResult));
        -:  146:            }
        -:  147:        }
        -:  148:    }
    #####:  149:    return keyExists;
        -:  150:}
        -:  151:
    #####:  152:bool ConstMap_ContainsValue(CONSTMAP_HANDLE handle, const char* value)
        -:  153:{
    #####:  154:    bool valueExists = false;
    #####:  155:    if (handle == NULL)
        -:  156:    {
        -:  157:        /*Codes_SRS_CONSTMAP_17_027: [If parameter handle or value is NULL then ConstMap_ContainsValue shall return false.]*/
    #####:  158:        LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:  159:    }
        -:  160:    else
        -:  161:    {
    #####:  162:        if (value == NULL)
        -:  163:        {
    #####:  164:            LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:  165:        }
        -:  166:        else
        -:  167:        {
        -:  168:            /*Codes_SRS_CONSTMAP_17_028: [Otherwise, if a pair has its value equal to the parameter value, the ConstMap_ContainsValue shall return true.]*/
    #####:  169:            MAP_RESULT mapResult = Map_ContainsValue(((CONSTMAP_HANDLE_DATA *)handle)->map, value, &valueExists);
    #####:  170:            if (mapResult != MAP_OK)
        -:  171:            {
        -:  172:                /*Codes_SRS_CONSTMAP_17_029: [Otherwise, if such a does not exist, then ConstMap_ContainsValue shall return false.]*/
    #####:  173:                LOG_CONSTMAP_ERROR(ConstMap_ErrorConvert(mapResult));
        -:  174:            }
        -:  175:        }
        -:  176:    }
    #####:  177:    return valueExists;
        -:  178:}
        -:  179:
    #####:  180:const char* ConstMap_GetValue(CONSTMAP_HANDLE handle, const char* key)
        -:  181:{
    #####:  182:    const char* value = NULL;
        -:  183:
    #####:  184:    if (handle == NULL)
        -:  185:    {
        -:  186:        /*Codes_SRS_CONSTMAP_17_040: [If parameter handle or key is NULL then ConstMap_GetValue returns NULL.]*/
    #####:  187:        LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:  188:    }
        -:  189:    else
        -:  190:    {
    #####:  191:        if (key == NULL)
        -:  192:        {
        -:  193:            /*Codes_SRS_CONSTMAP_17_040: [If parameter handle or key is NULL then ConstMap_GetValue returns NULL.]*/
    #####:  194:            LOG_CONSTMAP_ERROR(CONSTMAP_INVALIDARG);
        -:  195:        }
        -:  196:        else
        -:  197:        {
        -:  198:            /*Codes_SRS_CONSTMAP_17_041: [If the key is not found, then ConstMap_GetValue returns NULL.]*/
        -:  199:            /*Codes_SRS_CONSTMAP_17_042: [Otherwise, ConstMap_GetValue returns the key's value.]*/
    #####:  200:            value = Map_GetValueFromKey(((CONSTMAP_HANDLE_DATA *)handle)->map, key);
        -:  201:        }
        -:  202:    }
    #####:  203:    return value;
        -:  204:}
        -:  205:
    #####:  206:CONSTMAP_RESULT ConstMap_GetInternals(CONSTMAP_HANDLE handle, const char*const** keys, const char*const** values, size_t* count)
        -:  207:{
        -:  208:    CONSTMAP_RESULT result;
    #####:  209:    if (handle == NULL)
        -:  210:    {
        -:  211:        /*Codes_SRS_CONSTMAP_17_046: [If parameter handle, keys, values or count is NULL then ConstMap_GetInternals shall return CONSTMAP_INVALIDARG.]*/
    #####:  212:        result = CONSTMAP_INVALIDARG;
    #####:  213:        LOG_CONSTMAP_ERROR(result);
        -:  214:    }
        -:  215:    else
        -:  216:    {
        -:  217:        /*Codes_SRS_CONSTMAP_17_043: [ConstMap_GetInternals shall produce in *keys a pointer to an array of const char* having all the keys stored so far by the map.]
        -:  218:         *Codes_SRS_CONSTMAP_17_044: [ConstMap_GetInternals shall produce in *values a pointer to an array of const char* having all the values stored so far by the map.]
        -:  219:         *Codes_SRS_CONSTMAP_17_045: [ ConstMap_GetInternals shall produce in *count the number of stored keys and values.]
        -:  220:         */
    #####:  221:        MAP_RESULT mapResult = Map_GetInternals(((CONSTMAP_HANDLE_DATA *)handle)->map, keys, values, count);
    #####:  222:        result = ConstMap_ErrorConvert(mapResult);
        -:  223:    }
    #####:  224:    return result;
        -:  225:}
