        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/message.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <stdint.h>
        -:    7:#include "azure_macro_utils/macro_utils.h"
        -:    8:#include "azure_c_shared_utility/gballoc.h"
        -:    9:#include "azure_c_shared_utility/xlogging.h"
        -:   10:#include "azure_uamqp_c/amqp_definitions.h"
        -:   11:#include "azure_uamqp_c/message.h"
        -:   12:#include "azure_uamqp_c/amqpvalue.h"
        -:   13:
        -:   14:typedef struct BODY_AMQP_DATA_TAG
        -:   15:{
        -:   16:    unsigned char* body_data_section_bytes;
        -:   17:    size_t body_data_section_length;
        -:   18:} BODY_AMQP_DATA;
        -:   19:
        -:   20:typedef struct MESSAGE_INSTANCE_TAG
        -:   21:{
        -:   22:    BODY_AMQP_DATA* body_amqp_data_items;
        -:   23:    size_t body_amqp_data_count;
        -:   24:    AMQP_VALUE* body_amqp_sequence_items;
        -:   25:    size_t body_amqp_sequence_count;
        -:   26:    AMQP_VALUE body_amqp_value;
        -:   27:    HEADER_HANDLE header;
        -:   28:    delivery_annotations delivery_annotations;
        -:   29:    message_annotations message_annotations;
        -:   30:    PROPERTIES_HANDLE properties;
        -:   31:    application_properties application_properties;
        -:   32:    annotations footer;
        -:   33:    uint32_t message_format;
        -:   34:} MESSAGE_INSTANCE;
        -:   35:
        5:   36:MESSAGE_BODY_TYPE internal_get_body_type(MESSAGE_HANDLE message)
        -:   37:{
        -:   38:    MESSAGE_BODY_TYPE result;
        -:   39:
        5:   40:    if (message->body_amqp_value != NULL)
        -:   41:    {
    #####:   42:        result = MESSAGE_BODY_TYPE_VALUE;
        -:   43:    }
        5:   44:    else if (message->body_amqp_data_count > 0)
        -:   45:    {
    #####:   46:        result = MESSAGE_BODY_TYPE_DATA;
        -:   47:    }
        5:   48:    else if (message->body_amqp_sequence_count > 0)
        -:   49:    {
    #####:   50:        result = MESSAGE_BODY_TYPE_SEQUENCE;
        -:   51:    }
        -:   52:    else
        -:   53:    {
        5:   54:        result = MESSAGE_BODY_TYPE_NONE;
        -:   55:    }
        -:   56:
        5:   57:    return result;
        -:   58:}
        -:   59:
        3:   60:static void free_all_body_data_items(MESSAGE_HANDLE message)
        -:   61:{
        -:   62:    size_t i;
        -:   63:
        6:   64:    for (i = 0; i < message->body_amqp_data_count; i++)
        -:   65:    {
        3:   66:        if (message->body_amqp_data_items[i].body_data_section_bytes != NULL)
        -:   67:        {
        3:   68:            free(message->body_amqp_data_items[i].body_data_section_bytes);
        -:   69:        }
        -:   70:    }
        -:   71:
        3:   72:    if (message->body_amqp_data_items != NULL)
        -:   73:    {
        3:   74:        free(message->body_amqp_data_items);
        -:   75:    }
        3:   76:    message->body_amqp_data_count = 0;
        3:   77:    message->body_amqp_data_items = NULL;
        3:   78:}
        -:   79:
        3:   80:static void free_all_body_sequence_items(MESSAGE_HANDLE message)
        -:   81:{
        -:   82:    size_t i;
        -:   83:
       3*:   84:    for (i = 0; i < message->body_amqp_sequence_count; i++)
        -:   85:    {
    #####:   86:        if (message->body_amqp_sequence_items[i] != NULL)
        -:   87:        {
        -:   88:            /* Codes_SRS_MESSAGE_01_137: [ Each sequence shall be freed by calling `amqpvalue_destroy`. ]*/
    #####:   89:            amqpvalue_destroy(message->body_amqp_sequence_items[i]);
        -:   90:        }
        -:   91:    }
        -:   92:
        3:   93:    if (message->body_amqp_sequence_items != NULL)
        -:   94:    {
    #####:   95:        free(message->body_amqp_sequence_items);
        -:   96:    }
        3:   97:    message->body_amqp_sequence_count = 0;
        3:   98:    message->body_amqp_sequence_items = NULL;
        3:   99:}
        -:  100:
        5:  101:MESSAGE_HANDLE message_create(void)
        -:  102:{
        5:  103:    MESSAGE_HANDLE result = (MESSAGE_HANDLE)malloc(sizeof(MESSAGE_INSTANCE));
        5:  104:    if (result == NULL)
        -:  105:    {
        -:  106:        /* Codes_SRS_MESSAGE_01_002: [If allocating memory for the message fails, `message_create` shall fail and return NULL.] */
    #####:  107:        LogError("Cannot allocate memory for message");
        -:  108:    }
        -:  109:    else
        -:  110:    {
        5:  111:        result->header = NULL;
        5:  112:        result->delivery_annotations = NULL;
        5:  113:        result->message_annotations = NULL;
        5:  114:        result->properties = NULL;
        5:  115:        result->application_properties = NULL;
        5:  116:        result->footer = NULL;
        5:  117:        result->body_amqp_data_items = NULL;
        5:  118:        result->body_amqp_data_count = 0;
        5:  119:        result->body_amqp_value = NULL;
        5:  120:        result->body_amqp_sequence_items = NULL;
        5:  121:        result->body_amqp_sequence_count = 0;
        -:  122:
        -:  123:        /* Codes_SRS_MESSAGE_01_135: [ By default a message on which `message_set_message_format` was not called shall have message format set to 0. ]*/
        5:  124:        result->message_format = 0;
        -:  125:    }
        -:  126:
        -:  127:    /* Codes_SRS_MESSAGE_01_001: [`message_create` shall create a new AMQP message instance and on success it shall return a non-NULL handle for the newly created message instance.] */
        5:  128:    return result;
        -:  129:}
        -:  130:
    #####:  131:MESSAGE_HANDLE message_clone(MESSAGE_HANDLE source_message)
        -:  132:{
        -:  133:    MESSAGE_HANDLE result;
        -:  134:
    #####:  135:    if (source_message == NULL)
        -:  136:    {
        -:  137:        /* Codes_SRS_MESSAGE_01_062: [If `source_message` is NULL, `message_clone` shall fail and return NULL.] */
    #####:  138:        LogError("NULL source_message");
    #####:  139:        result = NULL;
        -:  140:    }
        -:  141:    else
        -:  142:    {
        -:  143:        /* Codes_SRS_MESSAGE_01_003: [`message_clone` shall clone a message entirely and on success return a non-NULL handle to the cloned message.] */
    #####:  144:        result = (MESSAGE_HANDLE)message_create();
    #####:  145:        if (result == NULL)
        -:  146:        {
        -:  147:            /* Codes_SRS_MESSAGE_01_004: [If allocating memory for the new cloned message fails, `message_clone` shall fail and return NULL.] */
    #####:  148:            LogError("Cannot clone message");
        -:  149:        }
        -:  150:        else
        -:  151:        {
    #####:  152:            result->message_format = source_message->message_format;
        -:  153:
    #####:  154:            if (source_message->header != NULL)
        -:  155:            {
        -:  156:                /* Codes_SRS_MESSAGE_01_005: [If a header exists on the source message it shall be cloned by using `header_clone`.] */
    #####:  157:                result->header = header_clone(source_message->header);
    #####:  158:                if (result->header == NULL)
        -:  159:                {
        -:  160:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  161:                    LogError("Cannot clone message header");
    #####:  162:                    message_destroy(result);
    #####:  163:                    result = NULL;
        -:  164:                }
        -:  165:            }
        -:  166:
    #####:  167:            if ((result != NULL) && (source_message->delivery_annotations != NULL))
        -:  168:            {
        -:  169:                /* Codes_SRS_MESSAGE_01_006: [If delivery annotations exist on the source message they shall be cloned by using `annotations_clone`.] */
    #####:  170:                result->delivery_annotations = annotations_clone(source_message->delivery_annotations);
    #####:  171:                if (result->delivery_annotations == NULL)
        -:  172:                {
        -:  173:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  174:                    LogError("Cannot clone delivery annotations");
    #####:  175:                    message_destroy(result);
    #####:  176:                    result = NULL;
        -:  177:                }
        -:  178:            }
        -:  179:
    #####:  180:            if ((result != NULL) && (source_message->message_annotations != NULL))
        -:  181:            {
        -:  182:                /* Codes_SRS_MESSAGE_01_007: [If message annotations exist on the source message they shall be cloned by using `annotations_clone`.] */
    #####:  183:                result->message_annotations = annotations_clone(source_message->message_annotations);
    #####:  184:                if (result->message_annotations == NULL)
        -:  185:                {
        -:  186:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  187:                    LogError("Cannot clone message annotations");
    #####:  188:                    message_destroy(result);
    #####:  189:                    result = NULL;
        -:  190:                }
        -:  191:            }
        -:  192:
    #####:  193:            if ((result != NULL) && (source_message->properties != NULL))
        -:  194:            {
        -:  195:                /* Codes_SRS_MESSAGE_01_008: [If message properties exist on the source message they shall be cloned by using `properties_clone`.] */
    #####:  196:                result->properties = properties_clone(source_message->properties);
    #####:  197:                if (result->properties == NULL)
        -:  198:                {
        -:  199:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  200:                    LogError("Cannot clone message properties");
    #####:  201:                    message_destroy(result);
    #####:  202:                    result = NULL;
        -:  203:                }
        -:  204:            }
        -:  205:
    #####:  206:            if ((result != NULL) && (source_message->application_properties != NULL))
        -:  207:            {
        -:  208:                /* Codes_SRS_MESSAGE_01_009: [If application properties exist on the source message they shall be cloned by using `amqpvalue_clone`.] */
    #####:  209:                result->application_properties = amqpvalue_clone(source_message->application_properties);
    #####:  210:                if (result->application_properties == NULL)
        -:  211:                {
        -:  212:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  213:                    LogError("Cannot clone application annotations");
    #####:  214:                    message_destroy(result);
    #####:  215:                    result = NULL;
        -:  216:                }
        -:  217:            }
        -:  218:
    #####:  219:            if ((result != NULL) && (source_message->footer != NULL))
        -:  220:            {
        -:  221:                /* Codes_SRS_MESSAGE_01_010: [If a footer exists on the source message it shall be cloned by using `annotations_clone`.] */
    #####:  222:                result->footer = amqpvalue_clone(source_message->footer);
    #####:  223:                if (result->footer == NULL)
        -:  224:                {
        -:  225:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  226:                    LogError("Cannot clone message footer");
    #####:  227:                    message_destroy(result);
    #####:  228:                    result = NULL;
        -:  229:                }
        -:  230:            }
        -:  231:
    #####:  232:            if ((result != NULL) && (source_message->body_amqp_data_count > 0))
        -:  233:            {
        -:  234:                size_t i;
        -:  235:
    #####:  236:                result->body_amqp_data_items = (BODY_AMQP_DATA*)malloc(source_message->body_amqp_data_count * sizeof(BODY_AMQP_DATA));
    #####:  237:                if (result->body_amqp_data_items == NULL)
        -:  238:                {
        -:  239:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  240:                    LogError("Cannot allocate memory for body data sections");
    #####:  241:                    message_destroy(result);
    #####:  242:                    result = NULL;
        -:  243:                }
        -:  244:                else
        -:  245:                {
    #####:  246:                    for (i = 0; i < source_message->body_amqp_data_count; i++)
        -:  247:                    {
    #####:  248:                        result->body_amqp_data_items[i].body_data_section_length = source_message->body_amqp_data_items[i].body_data_section_length;
        -:  249:
        -:  250:                        /* Codes_SRS_MESSAGE_01_011: [If an AMQP data has been set as message body on the source message it shall be cloned by allocating memory for the binary payload.] */
    #####:  251:                        result->body_amqp_data_items[i].body_data_section_bytes = (unsigned char*)malloc(source_message->body_amqp_data_items[i].body_data_section_length);
    #####:  252:                        if (result->body_amqp_data_items[i].body_data_section_bytes == NULL)
        -:  253:                        {
    #####:  254:                            LogError("Cannot allocate memory for body data section %u", (unsigned int)i);
    #####:  255:                            break;
        -:  256:                        }
        -:  257:                        else
        -:  258:                        {
    #####:  259:                            (void)memcpy(result->body_amqp_data_items[i].body_data_section_bytes, source_message->body_amqp_data_items[i].body_data_section_bytes, result->body_amqp_data_items[i].body_data_section_length);
        -:  260:                        }
        -:  261:                    }
        -:  262:
    #####:  263:                    result->body_amqp_data_count = i;
    #####:  264:                    if (i < source_message->body_amqp_data_count)
        -:  265:                    {
        -:  266:                        /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  267:                        message_destroy(result);
    #####:  268:                        result = NULL;
        -:  269:                    }
        -:  270:                }
        -:  271:            }
        -:  272:
    #####:  273:            if ((result != NULL) && (source_message->body_amqp_sequence_count > 0))
        -:  274:            {
        -:  275:                size_t i;
        -:  276:
    #####:  277:                result->body_amqp_sequence_items = (AMQP_VALUE*)malloc(source_message->body_amqp_sequence_count * sizeof(AMQP_VALUE));
    #####:  278:                if (result->body_amqp_sequence_items == NULL)
        -:  279:                {
        -:  280:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  281:                    LogError("Cannot allocate memory for body AMQP sequences");
    #####:  282:                    message_destroy(result);
    #####:  283:                    result = NULL;
        -:  284:                }
        -:  285:                else
        -:  286:                {
    #####:  287:                    for (i = 0; i < source_message->body_amqp_sequence_count; i++)
        -:  288:                    {
        -:  289:                        /* Codes_SRS_MESSAGE_01_160: [ If AMQP sequences are set as AMQP body they shall be cloned by calling `amqpvalue_clone`. ] */
    #####:  290:                        result->body_amqp_sequence_items[i] = amqpvalue_clone(source_message->body_amqp_sequence_items[i]);
    #####:  291:                        if (result->body_amqp_sequence_items[i] == NULL)
        -:  292:                        {
    #####:  293:                            LogError("Cannot clone AMQP sequence %u", (unsigned int)i);
    #####:  294:                            break;
        -:  295:                        }
        -:  296:                    }
        -:  297:
    #####:  298:                    result->body_amqp_sequence_count = i;
    #####:  299:                    if (i < source_message->body_amqp_sequence_count)
        -:  300:                    {
        -:  301:                        /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  302:                        message_destroy(result);
    #####:  303:                        result = NULL;
        -:  304:                    }
        -:  305:                }
        -:  306:            }
        -:  307:
    #####:  308:            if ((result != NULL) && (source_message->body_amqp_value != NULL))
        -:  309:            {
        -:  310:                /* Codes_SRS_MESSAGE_01_159: [If an AMQP value has been set as message body on the source message it shall be cloned by calling `amqpvalue_clone`. ]*/
    #####:  311:                result->body_amqp_value = amqpvalue_clone(source_message->body_amqp_value);
    #####:  312:                if (result->body_amqp_value == NULL)
        -:  313:                {
        -:  314:                    /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/
    #####:  315:                    LogError("Cannot clone body AMQP value");
    #####:  316:                    message_destroy(result);
    #####:  317:                    result = NULL;
        -:  318:                }
        -:  319:            }
        -:  320:        }
        -:  321:    }
        -:  322:
    #####:  323:    return result;
        -:  324:}
        -:  325:
        3:  326:void message_destroy(MESSAGE_HANDLE message)
        -:  327:{
        3:  328:    if (message == NULL)
        -:  329:    {
        -:  330:        /* Codes_SRS_MESSAGE_01_014: [ If `message` is NULL, `message_destroy` shall do nothing. ]*/
    #####:  331:        LogError("NULL message");
        -:  332:    }
        -:  333:    else
        -:  334:    {
        -:  335:        /* Codes_SRS_MESSAGE_01_013: [ `message_destroy` shall free all resources allocated by the message instance identified by the `message` argument. ]*/
        3:  336:        if (message->header != NULL)
        -:  337:        {
        -:  338:            /* Codes_SRS_MESSAGE_01_015: [ The message header shall be freed by calling `header_destroy`. ]*/
    #####:  339:            header_destroy(message->header);
        -:  340:        }
        -:  341:
        3:  342:        if (message->delivery_annotations != NULL)
        -:  343:        {
        -:  344:            /* Codes_SRS_MESSAGE_01_016: [ The delivery annotations shall be freed by calling `annotations_destroy`. ]*/
    #####:  345:            annotations_destroy(message->delivery_annotations);
        -:  346:        }
        -:  347:
        3:  348:        if (message->message_annotations != NULL)
        -:  349:        {
        -:  350:            /* Codes_SRS_MESSAGE_01_017: [ The message annotations shall be freed by calling `annotations_destroy`. ]*/
    #####:  351:            annotations_destroy(message->message_annotations);
        -:  352:        }
        -:  353:
        3:  354:        if (message->properties != NULL)
        -:  355:        {
        -:  356:            /* Codes_SRS_MESSAGE_01_018: [ The message properties shall be freed by calling `properties_destroy`. ]*/
    #####:  357:            properties_destroy(message->properties);
        -:  358:        }
        -:  359:
        3:  360:        if (message->application_properties != NULL)
        -:  361:        {
        -:  362:            /* Codes_SRS_MESSAGE_01_019: [ The application properties shall be freed by calling `amqpvalue_destroy`. ]*/
    #####:  363:            application_properties_destroy(message->application_properties);
        -:  364:        }
        -:  365:
        3:  366:        if (message->footer != NULL)
        -:  367:        {
        -:  368:            /* Codes_SRS_MESSAGE_01_020: [ The message footer shall be freed by calling `annotations_destroy`. ]*/
    #####:  369:            annotations_destroy(message->footer);
        -:  370:        }
        -:  371:
        3:  372:        if (message->body_amqp_value != NULL)
        -:  373:        {
        -:  374:            /* Codes_SRS_MESSAGE_01_021: [ If the message body is made of an AMQP value, the value shall be freed by calling `amqpvalue_destroy`. ]*/
    #####:  375:            amqpvalue_destroy(message->body_amqp_value);
        -:  376:        }
        -:  377:
        -:  378:        /* Codes_SRS_MESSAGE_01_136: [ If the message body is made of several AMQP data items, they shall all be freed. ]*/
        3:  379:        free_all_body_data_items(message);
        -:  380:
        -:  381:        /* Codes_SRS_MESSAGE_01_136: [ If the message body is made of several AMQP sequences, they shall all be freed. ]*/
        3:  382:        free_all_body_sequence_items(message);
        3:  383:        free(message);
        -:  384:    }
        3:  385:}
        -:  386:
    #####:  387:int message_set_header(MESSAGE_HANDLE message, HEADER_HANDLE header)
        -:  388:{
        -:  389:    int result;
        -:  390:
    #####:  391:    if (message == NULL)
        -:  392:    {
        -:  393:        /* Codes_SRS_MESSAGE_01_024: [ If `message` is NULL, `message_set_header` shall fail and return a non-zero value. ]*/
    #####:  394:        LogError("NULL message");
    #####:  395:        result = MU_FAILURE;
        -:  396:    }
        -:  397:    else
        -:  398:    {
        -:  399:        HEADER_HANDLE new_header;
        -:  400:
    #####:  401:        if (header == NULL)
        -:  402:        {
        -:  403:            /* Codes_SRS_MESSAGE_01_139: [ If `message_header` is NULL, the previously stored header associated with `message` shall be freed. ]*/
    #####:  404:            if (message->header != NULL)
        -:  405:            {
    #####:  406:                header_destroy(message->header);
    #####:  407:                message->header = NULL;
        -:  408:            }
        -:  409:
        -:  410:            /* Codes_SRS_MESSAGE_01_023: [ On success it shall return 0. ]*/
    #####:  411:            result = 0;
        -:  412:        }
        -:  413:        else
        -:  414:        {
        -:  415:            /* Codes_SRS_MESSAGE_01_022: [ `message_set_header` shall copy the contents of `message_header` as the header for the message instance identified by message. ]*/
        -:  416:            /* Codes_SRS_MESSAGE_01_025: [ Cloning the header shall be done by calling `header_clone`. ]*/
    #####:  417:            new_header = header_clone(header);
    #####:  418:            if (new_header == NULL)
        -:  419:            {
        -:  420:                /* Codes_SRS_MESSAGE_01_026: [ If `header_clone` fails, `message_set_header` shall fail and return a non-zero value. ]*/
    #####:  421:                LogError("Cannot clone message header");
    #####:  422:                result = MU_FAILURE;
        -:  423:            }
        -:  424:            else
        -:  425:            {
        -:  426:                /* Codes_SRS_MESSAGE_01_138: [ If setting the header fails, the previous value shall be preserved. ]*/
        -:  427:                /* Only do the free of the previous value if we could clone the new one*/
    #####:  428:                if (message->header != NULL)
        -:  429:                {
    #####:  430:                    header_destroy(message->header);
        -:  431:                }
        -:  432:
    #####:  433:                message->header = new_header;
        -:  434:
        -:  435:                /* Codes_SRS_MESSAGE_01_023: [ On success it shall return 0. ]*/
    #####:  436:                result = 0;
        -:  437:            }
        -:  438:        }
        -:  439:    }
        -:  440:
    #####:  441:    return result;
        -:  442:}
        -:  443:
    #####:  444:int message_get_header(MESSAGE_HANDLE message, HEADER_HANDLE* header)
        -:  445:{
        -:  446:    int result;
        -:  447:
    #####:  448:    if ((message == NULL) ||
        -:  449:        (header == NULL))
        -:  450:    {
        -:  451:        /* Codes_SRS_MESSAGE_01_029: [ If `message` or `message_header` is NULL, `message_get_header` shall fail and return a non-zero value. ]*/
    #####:  452:        LogError("Bad arguments: message = %p, header = %p",
        -:  453:            message, header);
    #####:  454:        result = MU_FAILURE;
        -:  455:    }
        -:  456:    else
        -:  457:    {
    #####:  458:        if (message->header == NULL)
        -:  459:        {
        -:  460:            /* Codes_SRS_MESSAGE_01_143: [ If no header has been set, `message_get_header` shall set `message_header` to NULL. ]*/
    #####:  461:            *header = NULL;
        -:  462:
        -:  463:            /* Codes_SRS_MESSAGE_01_028: [ On success, `message_get_header` shall return 0.]*/
    #####:  464:            result = 0;
        -:  465:        }
        -:  466:        else
        -:  467:        {
        -:  468:            /* Codes_SRS_MESSAGE_01_027: [ `message_get_header` shall copy the contents of header for the message instance identified by `message` into the argument `message_header`. ]*/
        -:  469:            /* Codes_SRS_MESSAGE_01_030: [ Cloning the header shall be done by calling `header_clone`. ]*/
    #####:  470:            *header = header_clone(message->header);
    #####:  471:            if (*header == NULL)
        -:  472:            {
        -:  473:                /* Codes_SRS_MESSAGE_01_031: [ If `header_clone` fails, `message_get_header` shall fail and return a non-zero value. ]*/
    #####:  474:                LogError("Cannot clone message header");
    #####:  475:                result = MU_FAILURE;
        -:  476:            }
        -:  477:            else
        -:  478:            {
        -:  479:                /* Codes_SRS_MESSAGE_01_028: [ On success, `message_get_header` shall return 0.]*/
    #####:  480:                result = 0;
        -:  481:            }
        -:  482:        }
        -:  483:    }
        -:  484:
    #####:  485:    return result;
        -:  486:}
        -:  487:
    #####:  488:int message_set_delivery_annotations(MESSAGE_HANDLE message, delivery_annotations annotations)
        -:  489:{
        -:  490:    int result;
        -:  491:
    #####:  492:    if (message == NULL)
        -:  493:    {
        -:  494:        /* Codes_SRS_MESSAGE_01_034: [ If `message` is NULL, `message_set_delivery_annotations` shall fail and return a non-zero value. ]*/
    #####:  495:        LogError("NULL message");
    #####:  496:        result = MU_FAILURE;
        -:  497:    }
        -:  498:    else
        -:  499:    {
        -:  500:        delivery_annotations new_delivery_annotations;
        -:  501:
    #####:  502:        if (annotations == NULL)
        -:  503:        {
        -:  504:            /* Codes_SRS_MESSAGE_01_141: [ If `annotations` is NULL, the previously stored delivery annotations associated with `message` shall be freed. ]*/
    #####:  505:            if (message->delivery_annotations != NULL)
        -:  506:            {
    #####:  507:                annotations_destroy(message->delivery_annotations);
    #####:  508:                message->delivery_annotations = NULL;
        -:  509:            }
        -:  510:
        -:  511:            /* Codes_SRS_MESSAGE_01_033: [ On success it shall return 0. ]*/
    #####:  512:            result = 0;
        -:  513:        }
        -:  514:        else
        -:  515:        {
        -:  516:            /* Codes_SRS_MESSAGE_01_032: [ `message_set_delivery_annotations` shall copy the contents of `annotations` as the delivery annotations for the message instance identified by `message`. ]*/
        -:  517:            /* Codes_SRS_MESSAGE_01_035: [ Cloning the delivery annotations shall be done by calling `annotations_clone`. ]*/
    #####:  518:            new_delivery_annotations = annotations_clone(annotations);
    #####:  519:            if (new_delivery_annotations == NULL)
        -:  520:            {
        -:  521:                /* Codes_SRS_MESSAGE_01_036: [ If `annotations_clone` fails, `message_set_delivery_annotations` shall fail and return a non-zero value. ]*/
    #####:  522:                LogError("Cannot clone delivery annotations");
    #####:  523:                result = MU_FAILURE;
        -:  524:            }
        -:  525:            else
        -:  526:            {
        -:  527:                /* Codes_SRS_MESSAGE_01_140: [** If setting the delivery annotations fails, the previous value shall be preserved. ]*/
        -:  528:                /* Only do the free of the previous value if we could clone the new one*/
    #####:  529:                if (message->delivery_annotations != NULL)
        -:  530:                {
    #####:  531:                    annotations_destroy(message->delivery_annotations);
        -:  532:                }
        -:  533:
    #####:  534:                message->delivery_annotations = new_delivery_annotations;
        -:  535:
        -:  536:                /* Codes_SRS_MESSAGE_01_033: [ On success it shall return 0. ]*/
    #####:  537:                result = 0;
        -:  538:            }
        -:  539:        }
        -:  540:    }
        -:  541:
    #####:  542:    return result;
        -:  543:}
        -:  544:
    #####:  545:int message_get_delivery_annotations(MESSAGE_HANDLE message, delivery_annotations* annotations)
        -:  546:{
        -:  547:    int result;
        -:  548:
    #####:  549:    if ((message == NULL) ||
        -:  550:        (annotations == NULL))
        -:  551:    {
        -:  552:        /* Codes_SRS_MESSAGE_01_039: [ If `message` or `annotations` is NULL, `message_get_delivery_annotations` shall fail and return a non-zero value. ]*/
    #####:  553:        LogError("Bad arguments: message = %p, annotations = %p",
        -:  554:            message, annotations);
    #####:  555:        result = MU_FAILURE;
        -:  556:    }
        -:  557:    else
        -:  558:    {
    #####:  559:        if (message->delivery_annotations == NULL)
        -:  560:        {
        -:  561:            /* Codes_SRS_MESSAGE_01_142: [ If no delivery annotations have been set, `message_get_delivery_annotations` shall set `annotations` to NULL. ]*/
    #####:  562:            *annotations = NULL;
        -:  563:
        -:  564:            /* Codes_SRS_MESSAGE_01_038: [ On success, `message_get_delivery_annotations` shall return 0. ]*/
    #####:  565:            result = 0;
        -:  566:        }
        -:  567:        else
        -:  568:        {
        -:  569:            /* Codes_SRS_MESSAGE_01_037: [ `message_get_delivery_annotations` shall copy the contents of delivery annotations for the message instance identified by `message` into the argument `annotations`. ]*/
        -:  570:            /* Codes_SRS_MESSAGE_01_040: [ Cloning the delivery annotations shall be done by calling `annotations_clone`. ]*/
    #####:  571:            *annotations = annotations_clone(message->delivery_annotations);
    #####:  572:            if (*annotations == NULL)
        -:  573:            {
        -:  574:                /* Codes_SRS_MESSAGE_01_041: [ If `annotations_clone` fails, `message_get_delivery_annotations` shall fail and return a non-zero value. ]*/
    #####:  575:                LogError("Cannot clone delivery annotations");
    #####:  576:                result = MU_FAILURE;
        -:  577:            }
        -:  578:            else
        -:  579:            {
        -:  580:                /* Codes_SRS_MESSAGE_01_038: [ On success, `message_get_delivery_annotations` shall return 0. ]*/
    #####:  581:                result = 0;
        -:  582:            }
        -:  583:        }
        -:  584:    }
        -:  585:
    #####:  586:    return result;
        -:  587:}
        -:  588:
    #####:  589:int message_set_message_annotations(MESSAGE_HANDLE message, message_annotations annotations)
        -:  590:{
        -:  591:    int result;
        -:  592:
    #####:  593:    if (message == NULL)
        -:  594:    {
        -:  595:        /* Codes_SRS_MESSAGE_01_044: [ If `message` is NULL, `message_set_message_annotations` shall fail and return a non-zero value. ]*/
    #####:  596:        LogError("NULL message");
    #####:  597:        result = MU_FAILURE;
        -:  598:    }
        -:  599:    else
        -:  600:    {
    #####:  601:        if (annotations == NULL)
        -:  602:        {
        -:  603:            /* Codes_SRS_MESSAGE_01_145: [ If `annotations` is NULL, the previously stored message annotations associated with `message` shall be freed. ]*/
    #####:  604:            if (message->message_annotations != NULL)
        -:  605:            {
    #####:  606:                annotations_destroy(message->message_annotations);
    #####:  607:                message->message_annotations = NULL;
        -:  608:            }
        -:  609:
        -:  610:            /* Codes_SRS_MESSAGE_01_043: [ On success it shall return 0. ]*/
    #####:  611:            result = 0;
        -:  612:        }
        -:  613:        else
        -:  614:        {
        -:  615:            message_annotations new_message_annotations;
        -:  616:
        -:  617:            /* Codes_SRS_MESSAGE_01_042: [ `message_set_message_annotations` shall copy the contents of `annotations` as the message annotations for the message instance identified by `message`. ]*/
        -:  618:            /* Codes_SRS_MESSAGE_01_045: [ Cloning the message annotations shall be done by calling `annotations_clone`. ]*/
    #####:  619:            new_message_annotations = annotations_clone(annotations);
    #####:  620:            if (new_message_annotations == NULL)
        -:  621:            {
        -:  622:                /* Codes_SRS_MESSAGE_01_046: [ If `annotations_clone` fails, `message_set_message_annotations` shall fail and return a non-zero value. ]*/
    #####:  623:                LogError("Cannot clone message annotations");
    #####:  624:                result = MU_FAILURE;
        -:  625:            }
        -:  626:            else
        -:  627:            {
        -:  628:                /* Codes_SRS_MESSAGE_01_144: [ If setting the message annotations fails, the previous value shall be preserved. ]*/
        -:  629:                /* Only do the free of the previous value if we could clone the new one*/
    #####:  630:                if (message->message_annotations != NULL)
        -:  631:                {
    #####:  632:                    annotations_destroy(message->message_annotations);
        -:  633:                }
        -:  634:
    #####:  635:                message->message_annotations = new_message_annotations;
        -:  636:
        -:  637:                /* Codes_SRS_MESSAGE_01_043: [ On success it shall return 0. ]*/
    #####:  638:                result = 0;
        -:  639:            }
        -:  640:        }
        -:  641:    }
        -:  642:
    #####:  643:    return result;
        -:  644:}
        -:  645:
    #####:  646:int message_get_message_annotations(MESSAGE_HANDLE message, annotations* message_annotations)
        -:  647:{
        -:  648:    int result;
        -:  649:
    #####:  650:    if ((message == NULL) ||
        -:  651:        (message_annotations == NULL))
        -:  652:    {
        -:  653:        /* Codes_SRS_MESSAGE_01_049: [ If `message` or `annotations` is NULL, `message_get_message_annotations` shall fail and return a non-zero value. ]*/
    #####:  654:        LogError("Bad arguments: message = %p, message_annotations = %p",
        -:  655:            message, message_annotations);
    #####:  656:        result = MU_FAILURE;
        -:  657:    }
        -:  658:    else
        -:  659:    {
    #####:  660:        if (message->message_annotations == NULL)
        -:  661:        {
        -:  662:            /* Codes_SRS_MESSAGE_01_146: [ If no message annotations have been set, `message_get_message_annotations` shall set `annotations` to NULL. ]*/
    #####:  663:            *message_annotations = NULL;
        -:  664:
        -:  665:            /* Codes_SRS_MESSAGE_01_048: [ On success, `message_get_message_annotations` shall return 0. ]*/
    #####:  666:            result = 0;
        -:  667:        }
        -:  668:        else
        -:  669:        {
        -:  670:            /* Codes_SRS_MESSAGE_01_047: [ `message_get_message_annotations` shall copy the contents of message annotations for the message instance identified by `message` into the argument `annotations`. ]*/
        -:  671:            /* Codes_SRS_MESSAGE_01_050: [ Cloning the message annotations shall be done by calling `annotations_clone`. ]*/
    #####:  672:            *message_annotations = annotations_clone(message->message_annotations);
    #####:  673:            if (*message_annotations == NULL)
        -:  674:            {
        -:  675:                /* Codes_SRS_MESSAGE_01_051: [ If `annotations_clone` fails, `message_get_message_annotations` shall fail and return a non-zero value. ]*/
    #####:  676:                LogError("Cannot clone message annotations");
    #####:  677:                result = MU_FAILURE;
        -:  678:            }
        -:  679:            else
        -:  680:            {
        -:  681:                /* Codes_SRS_MESSAGE_01_048: [ On success, `message_get_message_annotations` shall return 0. ]*/
    #####:  682:                result = 0;
        -:  683:            }
        -:  684:        }
        -:  685:    }
        -:  686:
    #####:  687:    return result;
        -:  688:}
        -:  689:
    #####:  690:int message_set_properties(MESSAGE_HANDLE message, PROPERTIES_HANDLE properties)
        -:  691:{
        -:  692:    int result;
        -:  693:
    #####:  694:    if (message == NULL)
        -:  695:    {
        -:  696:        /* Codes_SRS_MESSAGE_01_054: [ If `message` is NULL, `message_set_properties` shall fail and return a non-zero value. ]*/
    #####:  697:        LogError("NULL message");
    #####:  698:        result = MU_FAILURE;
        -:  699:    }
        -:  700:    else
        -:  701:    {
    #####:  702:        if (properties == NULL)
        -:  703:        {
        -:  704:            /* Codes_SRS_MESSAGE_01_147: [ If `properties` is NULL, the previously stored message properties associated with `message` shall be freed. ]*/
    #####:  705:            if (message->properties != NULL)
        -:  706:            {
    #####:  707:                properties_destroy(message->properties);
    #####:  708:                message->properties = NULL;
        -:  709:            }
        -:  710:
        -:  711:            /* Codes_SRS_MESSAGE_01_053: [ On success it shall return 0. ]*/
    #####:  712:            result = 0;
        -:  713:        }
        -:  714:        else
        -:  715:        {
        -:  716:            PROPERTIES_HANDLE new_properties;
        -:  717:
        -:  718:            /* Codes_SRS_MESSAGE_01_052: [ `message_set_properties` shall copy the contents of `properties` as the message properties for the message instance identified by `message`. ]*/
        -:  719:            /* Codes_SRS_MESSAGE_01_055: [ Cloning the message properties shall be done by calling `properties_clone`. ]*/
    #####:  720:            new_properties = properties_clone(properties);
    #####:  721:            if (new_properties == NULL)
        -:  722:            {
        -:  723:                /* Codes_SRS_MESSAGE_01_056: [ If `properties_clone` fails, `message_set_properties` shall fail and return a non-zero value. ]*/
    #####:  724:                LogError("Cannot clone message properties");
    #####:  725:                result = MU_FAILURE;
        -:  726:            }
        -:  727:            else
        -:  728:            {
        -:  729:                /* Codes_SRS_MESSAGE_01_063: [ If setting the message properties fails, the previous value shall be preserved. ]*/
        -:  730:                /* Only do the free of the previous value if we could clone the new one*/
    #####:  731:                if (message->properties != NULL)
        -:  732:                {
    #####:  733:                    properties_destroy(message->properties);
        -:  734:                }
        -:  735:
    #####:  736:                message->properties = new_properties;
        -:  737:
        -:  738:                /* Codes_SRS_MESSAGE_01_053: [ On success it shall return 0. ]*/
    #####:  739:                result = 0;
        -:  740:            }
        -:  741:        }
        -:  742:    }
        -:  743:
    #####:  744:    return result;
        -:  745:}
        -:  746:
    #####:  747:int message_get_properties(MESSAGE_HANDLE message, PROPERTIES_HANDLE* properties)
        -:  748:{
        -:  749:    int result;
        -:  750:
    #####:  751:    if ((message == NULL) ||
        -:  752:        (properties == NULL))
        -:  753:    {
        -:  754:        /* Codes_SRS_MESSAGE_01_059: [ If `message` or `properties` is NULL, `message_get_properties` shall fail and return a non-zero value. ]*/
    #####:  755:        LogError("Bad arguments: message = %p, properties = %p",
        -:  756:            message, properties);
    #####:  757:        result = MU_FAILURE;
        -:  758:    }
        -:  759:    else
        -:  760:    {
    #####:  761:        if (message->properties == NULL)
        -:  762:        {
        -:  763:            /* Codes_SRS_MESSAGE_01_148: [ If no message properties have been set, `message_get_properties` shall set `properties` to NULL. ]*/
    #####:  764:            *properties = NULL;
        -:  765:
        -:  766:            /* Codes_SRS_MESSAGE_01_058: [ On success, `message_get_properties` shall return 0. ]*/
    #####:  767:            result = 0;
        -:  768:        }
        -:  769:        else
        -:  770:        {
        -:  771:            /* Codes_SRS_MESSAGE_01_057: [ `message_get_properties` shall copy the contents of message properties for the message instance identified by `message` into the argument `properties`. ]*/
        -:  772:            /* Codes_SRS_MESSAGE_01_060: [ Cloning the message properties shall be done by calling `properties_clone`. ]*/
    #####:  773:            *properties = properties_clone(message->properties);
    #####:  774:            if (*properties == NULL)
        -:  775:            {
        -:  776:                /* Codes_SRS_MESSAGE_01_061: [ If `properties_clone` fails, `message_get_properties` shall fail and return a non-zero value. ]*/
    #####:  777:                LogError("Cannot clone message properties");
    #####:  778:                result = MU_FAILURE;
        -:  779:            }
        -:  780:            else
        -:  781:            {
        -:  782:                /* Codes_SRS_MESSAGE_01_058: [ On success, `message_get_properties` shall return 0. ]*/
    #####:  783:                result = 0;
        -:  784:            }
        -:  785:        }
        -:  786:    }
        -:  787:
    #####:  788:    return result;
        -:  789:}
        -:  790:
    #####:  791:int message_set_application_properties(MESSAGE_HANDLE message, AMQP_VALUE application_properties)
        -:  792:{
        -:  793:    int result;
        -:  794:
    #####:  795:    if (message == NULL)
        -:  796:    {
        -:  797:        /* Codes_SRS_MESSAGE_01_066: [ If `message` is NULL, `message_set_application_properties` shall fail and return a non-zero value. ]*/
    #####:  798:        LogError("NULL message");
    #####:  799:        result = MU_FAILURE;
        -:  800:    }
        -:  801:    else
        -:  802:    {
        -:  803:        AMQP_VALUE new_application_properties;
        -:  804:
        -:  805:        /* Tests_SRS_MESSAGE_01_149: [ If `application_properties` is NULL, the previously stored application properties associated with `message` shall be freed. ]*/
    #####:  806:        if (application_properties == NULL)
        -:  807:        {
    #####:  808:            if (message->application_properties != NULL)
        -:  809:            {
    #####:  810:                amqpvalue_destroy(message->application_properties);
    #####:  811:                message->application_properties = NULL;
        -:  812:            }
        -:  813:
        -:  814:            /* Codes_SRS_MESSAGE_01_065: [ On success it shall return 0. ]*/
    #####:  815:            result = 0;
        -:  816:        }
        -:  817:        else
        -:  818:        {
        -:  819:            /* Codes_SRS_MESSAGE_01_064: [ `message_set_application_properties` shall copy the contents of `application_properties` as the application properties for the message instance identified by `message`. ]*/
        -:  820:            /* Codes_SRS_MESSAGE_01_067: [ Cloning the message properties shall be done by calling `application_properties_clone`. ]*/
    #####:  821:            new_application_properties = application_properties_clone(application_properties);
    #####:  822:            if (new_application_properties == NULL)
        -:  823:            {
        -:  824:                /* Codes_SRS_MESSAGE_01_068: [ If `application_properties_clone` fails, `message_set_application_properties` shall fail and return a non-zero value. ]*/
    #####:  825:                LogError("Cannot clone application properties");
    #####:  826:                result = MU_FAILURE;
        -:  827:            }
        -:  828:            else
        -:  829:            {
        -:  830:                /* Codes_SRS_MESSAGE_01_069: [ If setting the application properties fails, the previous value shall be preserved. ]*/
        -:  831:                /* Only do the free of the previous value if we could clone the new one*/
    #####:  832:                if (message->application_properties != NULL)
        -:  833:                {
    #####:  834:                    amqpvalue_destroy(message->application_properties);
        -:  835:                }
        -:  836:
    #####:  837:                message->application_properties = new_application_properties;
        -:  838:
        -:  839:                /* Codes_SRS_MESSAGE_01_065: [ On success it shall return 0. ]*/
    #####:  840:                result = 0;
        -:  841:            }
        -:  842:        }
        -:  843:    }
        -:  844:
    #####:  845:    return result;
        -:  846:}
        -:  847:
    #####:  848:int message_get_application_properties(MESSAGE_HANDLE message, AMQP_VALUE* application_properties)
        -:  849:{
        -:  850:    int result;
        -:  851:
    #####:  852:    if ((message == NULL) ||
        -:  853:        (application_properties == NULL))
        -:  854:    {
        -:  855:        /* Codes_SRS_MESSAGE_01_072: [ If `message` or `application_properties` is NULL, `message_get_application_properties` shall fail and return a non-zero value. ]*/
    #####:  856:        LogError("Bad arguments: message = %p, application_properties = %p",
        -:  857:            message, application_properties);
    #####:  858:        result = MU_FAILURE;
        -:  859:    }
        -:  860:    else
        -:  861:    {
    #####:  862:        if (message->application_properties == NULL)
        -:  863:        {
        -:  864:            /* Codes_SRS_MESSAGE_01_150: [ If no application properties have been set, `message_get_application_properties` shall set `application_properties` to NULL. ]*/
    #####:  865:            *application_properties = NULL;
        -:  866:
        -:  867:            /* Codes_SRS_MESSAGE_01_071: [ On success, `message_get_application_properties` shall return 0. ]*/
    #####:  868:            result = 0;
        -:  869:        }
        -:  870:        else
        -:  871:        {
        -:  872:            /* Codes_SRS_MESSAGE_01_070: [ `message_get_application_properties` shall copy the contents of application message properties for the message instance identified by `message` into the argument `application_properties`. ]*/
        -:  873:            /* Codes_SRS_MESSAGE_01_073: [ Cloning the application properties shall be done by calling `application_properties_clone`. ]*/
    #####:  874:            *application_properties = application_properties_clone(message->application_properties);
    #####:  875:            if (*application_properties == NULL)
        -:  876:            {
        -:  877:                /* Codes_SRS_MESSAGE_01_074: [ If `application_properties_clone` fails, `message_get_application_properties` shall fail and return a non-zero value. ]*/
    #####:  878:                LogError("Cannot clone application properties");
    #####:  879:                result = MU_FAILURE;
        -:  880:            }
        -:  881:            else
        -:  882:            {
        -:  883:                /* Codes_SRS_MESSAGE_01_071: [ On success, `message_get_application_properties` shall return 0. ]*/
    #####:  884:                result = 0;
        -:  885:            }
        -:  886:        }
        -:  887:    }
        -:  888:
    #####:  889:    return result;
        -:  890:}
        -:  891:
    #####:  892:int message_set_footer(MESSAGE_HANDLE message, annotations footer)
        -:  893:{
        -:  894:    int result;
        -:  895:
    #####:  896:    if (message == NULL)
        -:  897:    {
        -:  898:        /* Codes_SRS_MESSAGE_01_077: [ If `message` is NULL, `message_set_footer` shall fail and return a non-zero value. ]*/
    #####:  899:        LogError("NULL message");
    #####:  900:        result = MU_FAILURE;
        -:  901:    }
        -:  902:    else
        -:  903:    {
    #####:  904:        if (footer == NULL)
        -:  905:        {
        -:  906:            /* Codes_SRS_MESSAGE_01_151: [ If `footer` is NULL, the previously stored footer associated with `message` shall be freed. ]*/
    #####:  907:            if (message->footer != NULL)
        -:  908:            {
    #####:  909:                annotations_destroy(message->footer);
    #####:  910:                message->footer = NULL;
        -:  911:            }
        -:  912:
        -:  913:            /* Codes_SRS_MESSAGE_01_076: [ On success it shall return 0. ]*/
    #####:  914:            result = 0;
        -:  915:        }
        -:  916:        else
        -:  917:        {
        -:  918:            annotations new_footer;
        -:  919:
        -:  920:            /* Codes_SRS_MESSAGE_01_075: [ `message_set_footer` shall copy the contents of `footer` as the footer contents for the message instance identified by `message`. ]*/
        -:  921:            /* Codes_SRS_MESSAGE_01_078: [ Cloning the footer shall be done by calling `annotations_clone`. ]*/
    #####:  922:            new_footer = annotations_clone(footer);
    #####:  923:            if (new_footer == NULL)
        -:  924:            {
        -:  925:                /* Codes_SRS_MESSAGE_01_079: [ If `annotations_clone` fails, `message_set_footer` shall fail and return a non-zero value. ]*/
    #####:  926:                LogError("Cannot clone message footer");
    #####:  927:                result = MU_FAILURE;
        -:  928:            }
        -:  929:            else
        -:  930:            {
        -:  931:                /* Codes_SRS_MESSAGE_01_080: [ If setting the footer fails, the previous value shall be preserved. ]*/
        -:  932:                /* Only do the free of the previous value if we could clone the new one*/
    #####:  933:                if (message->footer != NULL)
        -:  934:                {
    #####:  935:                    annotations_destroy(message->footer);
        -:  936:                }
        -:  937:
    #####:  938:                message->footer = new_footer;
        -:  939:
        -:  940:                /* Codes_SRS_MESSAGE_01_076: [ On success it shall return 0. ]*/
    #####:  941:                result = 0;
        -:  942:            }
        -:  943:        }
        -:  944:    }
        -:  945:
    #####:  946:    return result;
        -:  947:}
        -:  948:
    #####:  949:int message_get_footer(MESSAGE_HANDLE message, annotations* footer)
        -:  950:{
        -:  951:    int result;
        -:  952:
    #####:  953:    if ((message == NULL) ||
        -:  954:        (footer == NULL))
        -:  955:    {
        -:  956:        /* Codes_SRS_MESSAGE_01_083: [ If `message` or `footer` is NULL, `message_get_footer` shall fail and return a non-zero value. ]*/
    #####:  957:        LogError("Bad arguments: message = %p, footer = %p",
        -:  958:            message, footer);
    #####:  959:        result = MU_FAILURE;
        -:  960:    }
        -:  961:    else
        -:  962:    {
    #####:  963:        if (message->footer == NULL)
        -:  964:        {
        -:  965:            /* Codes_SRS_MESSAGE_01_152: [ If no footer has been set, `message_get_footer` shall set `footer` to NULL. ]*/
    #####:  966:            *footer = NULL;
        -:  967:
        -:  968:            /* Codes_SRS_MESSAGE_01_082: [ On success, `message_get_footer` shall return 0. ]*/
    #####:  969:            result = 0;
        -:  970:        }
        -:  971:        else
        -:  972:        {
        -:  973:            /* Codes_SRS_MESSAGE_01_081: [ `message_get_footer` shall copy the contents of footer for the message instance identified by `message` into the argument `footer`. ]*/
        -:  974:            /* Codes_SRS_MESSAGE_01_084: [ Cloning the footer shall be done by calling `annotations_clone`. ]*/
    #####:  975:            *footer = annotations_clone(message->footer);
    #####:  976:            if (*footer == NULL)
        -:  977:            {
        -:  978:                /* Codes_SRS_MESSAGE_01_085: [ If `annotations_clone` fails, `message_get_footer` shall fail and return a non-zero value. ]*/
    #####:  979:                LogError("Cannot clone message footer");
    #####:  980:                result = MU_FAILURE;
        -:  981:            }
        -:  982:            else
        -:  983:            {
        -:  984:                /* Codes_SRS_MESSAGE_01_082: [ On success, `message_get_footer` shall return 0. ]*/
    #####:  985:                result = 0;
        -:  986:            }
        -:  987:        }
        -:  988:    }
        -:  989:
    #####:  990:    return result;
        -:  991:}
        -:  992:
        5:  993:int message_add_body_amqp_data(MESSAGE_HANDLE message, BINARY_DATA amqp_data)
        -:  994:{
        -:  995:    int result;
        -:  996:
        -:  997:    /* Codes_SRS_MESSAGE_01_088: [ If `message` is NULL, `message_add_body_amqp_data` shall fail and return a non-zero value. ]*/
        5:  998:    if ((message == NULL) ||
        -:  999:        /* Tests_SRS_MESSAGE_01_089: [ If the `bytes` member of `amqp_data` is NULL and the `size` member is non-zero, `message_add_body_amqp_data` shall fail and return a non-zero value. ]*/
       5*: 1000:        ((amqp_data.bytes == NULL) &&
    #####: 1001:         (amqp_data.length != 0)))
        -: 1002:    {
    #####: 1003:        LogError("Bad arguments: message = %p, bytes = %p, length = %u",
        -: 1004:            message, amqp_data.bytes, (unsigned int)amqp_data.length);
    #####: 1005:        result = MU_FAILURE;
        -: 1006:    }
        -: 1007:    else
        -: 1008:    {
        5: 1009:        MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);
        5: 1010:        if ((body_type == MESSAGE_BODY_TYPE_SEQUENCE) ||
        -: 1011:            (body_type == MESSAGE_BODY_TYPE_VALUE))
        -: 1012:        {
        -: 1013:            /* Codes_SRS_MESSAGE_01_091: [ If the body was already set to an AMQP value or a list of AMQP sequences, `message_add_body_amqp_data` shall fail and return a non-zero value. ]*/
    #####: 1014:            LogError("Body type already set");
    #####: 1015:            result = MU_FAILURE;
        -: 1016:        }
        -: 1017:        else
        -: 1018:        {
        -: 1019:            /* Codes_SRS_MESSAGE_01_086: [ `message_add_body_amqp_data` shall add the contents of `amqp_data` to the list of AMQP data values for the body of the message identified by `message`. ]*/
        5: 1020:            BODY_AMQP_DATA* new_body_amqp_data_items = (BODY_AMQP_DATA*)realloc(message->body_amqp_data_items, sizeof(BODY_AMQP_DATA) * (message->body_amqp_data_count + 1));
        5: 1021:            if (new_body_amqp_data_items == NULL)
        -: 1022:            {
        -: 1023:                /* Codes_SRS_MESSAGE_01_153: [ If allocating memory to store the added AMQP data fails, `message_add_body_amqp_data` shall fail and return a non-zero value. ]*/
    #####: 1024:                LogError("Cannot allocate memory for body AMQP data items");
    #####: 1025:                result = MU_FAILURE;
        -: 1026:            }
        -: 1027:            else
        -: 1028:            {
        5: 1029:                message->body_amqp_data_items = new_body_amqp_data_items;
        -: 1030:
        5: 1031:                if (amqp_data.length == 0)
        -: 1032:                {
    #####: 1033:                    message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes = NULL;
    #####: 1034:                    message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_length = 0;
    #####: 1035:                    message->body_amqp_data_count++;
        -: 1036:
        -: 1037:                    /* Codes_SRS_MESSAGE_01_087: [ On success it shall return 0. ]*/
    #####: 1038:                    result = 0;
        -: 1039:                }
        -: 1040:                else
        -: 1041:                {
        5: 1042:                    message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes = (unsigned char*)malloc(amqp_data.length);
        5: 1043:                    if (message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes == NULL)
        -: 1044:                    {
        -: 1045:                        /* Codes_SRS_MESSAGE_01_153: [ If allocating memory to store the added AMQP data fails, `message_add_body_amqp_data` shall fail and return a non-zero value. ]*/
    #####: 1046:                        LogError("Cannot allocate memory for body AMQP data to be added");
    #####: 1047:                        result = MU_FAILURE;
        -: 1048:                    }
        -: 1049:                    else
        -: 1050:                    {
        5: 1051:                        message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_length = amqp_data.length;
        5: 1052:                        (void)memcpy(message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes, amqp_data.bytes, amqp_data.length);
        5: 1053:                        message->body_amqp_data_count++;
        -: 1054:
        -: 1055:                        /* Codes_SRS_MESSAGE_01_087: [ On success it shall return 0. ]*/
        5: 1056:                        result = 0;
        -: 1057:                    }
        -: 1058:                }
        -: 1059:            }
        -: 1060:        }
        -: 1061:    }
        -: 1062:
        5: 1063:    return result;
        -: 1064:}
        -: 1065:
    #####: 1066:int message_get_body_amqp_data_in_place(MESSAGE_HANDLE message, size_t index, BINARY_DATA* amqp_data)
        -: 1067:{
        -: 1068:    int result;
        -: 1069:
    #####: 1070:    if ((message == NULL) ||
        -: 1071:        (amqp_data == NULL))
        -: 1072:    {
        -: 1073:        /* Codes_SRS_MESSAGE_01_094: [ If `message` or `amqp_data` is NULL, `message_get_body_amqp_data_in_place` shall fail and return a non-zero value. ]*/
    #####: 1074:        LogError("Bad arguments: message = %p, amqp_data = %p",
        -: 1075:            message, amqp_data);
    #####: 1076:        result = MU_FAILURE;
        -: 1077:    }
        -: 1078:    else
        -: 1079:    {
    #####: 1080:        MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);
    #####: 1081:        if (body_type != MESSAGE_BODY_TYPE_DATA)
        -: 1082:        {
        -: 1083:            /* Codes_SRS_MESSAGE_01_096: [ If the body for `message` is not of type `MESSAGE_BODY_TYPE_DATA`, `message_get_body_amqp_data_in_place` shall fail and return a non-zero value. ]*/
    #####: 1084:            LogError("Body type is not AMQP data");
    #####: 1085:            result = MU_FAILURE;
        -: 1086:        }
    #####: 1087:        else if (index >= message->body_amqp_data_count)
        -: 1088:        {
        -: 1089:            /* Codes_SRS_MESSAGE_01_095: [ If `index` indicates an AMQP data entry that is out of bounds, `message_get_body_amqp_data_in_place` shall fail and return a non-zero value. ]*/
    #####: 1090:            LogError("Index too high for AMQP data (%lu), number of AMQP data entries is %lu",
        -: 1091:                (unsigned long)index, (unsigned long)message->body_amqp_data_count);
    #####: 1092:            result = MU_FAILURE;
        -: 1093:        }
        -: 1094:        else
        -: 1095:        {
        -: 1096:            /* Codes_SRS_MESSAGE_01_092: [ `message_get_body_amqp_data_in_place` shall place the contents of the `index`th AMQP data for the message instance identified by `message` into the argument `amqp_data`, without copying the binary payload memory. ]*/
    #####: 1097:            amqp_data->bytes = message->body_amqp_data_items[index].body_data_section_bytes;
    #####: 1098:            amqp_data->length = message->body_amqp_data_items[index].body_data_section_length;
        -: 1099:
        -: 1100:            /* Codes_SRS_MESSAGE_01_093: [ On success, `message_get_body_amqp_data_in_place` shall return 0. ]*/
    #####: 1101:            result = 0;
        -: 1102:        }
        -: 1103:    }
        -: 1104:
    #####: 1105:    return result;
        -: 1106:}
        -: 1107:
    #####: 1108:int message_get_body_amqp_data_count(MESSAGE_HANDLE message, size_t* count)
        -: 1109:{
        -: 1110:    int result;
        -: 1111:
    #####: 1112:    if ((message == NULL) ||
        -: 1113:        (count == NULL))
        -: 1114:    {
        -: 1115:        /* Codes_SRS_MESSAGE_01_099: [ If `message` or `count` is NULL, `message_get_body_amqp_data_count` shall fail and return a non-zero value. ]*/
    #####: 1116:        LogError("Bad arguments: message = %p, count = %p",
        -: 1117:            message, count);
    #####: 1118:        result = MU_FAILURE;
        -: 1119:    }
        -: 1120:    else
        -: 1121:    {
    #####: 1122:        MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);
    #####: 1123:        if (body_type != MESSAGE_BODY_TYPE_DATA)
        -: 1124:        {
        -: 1125:            /* Codes_SRS_MESSAGE_01_100: [ If the body for `message` is not of type `MESSAGE_BODY_TYPE_DATA`, `message_get_body_amqp_data_count` shall fail and return a non-zero value. ]*/
    #####: 1126:            LogError("Body type is not AMQP data");
    #####: 1127:            result = MU_FAILURE;
        -: 1128:        }
        -: 1129:        else
        -: 1130:        {
        -: 1131:            /* Codes_SRS_MESSAGE_01_097: [ `message_get_body_amqp_data_count` shall fill in `count` the number of AMQP data chunks that are stored by the message identified by `message`. ]*/
    #####: 1132:            *count = message->body_amqp_data_count;
        -: 1133:
        -: 1134:            /* Codes_SRS_MESSAGE_01_098: [ On success, `message_get_body_amqp_data_count` shall return 0. ]*/
    #####: 1135:            result = 0;
        -: 1136:        }
        -: 1137:    }
        -: 1138:
    #####: 1139:    return result;
        -: 1140:}
        -: 1141:
    #####: 1142:int message_set_body_amqp_value(MESSAGE_HANDLE message, AMQP_VALUE body_amqp_value)
        -: 1143:{
        -: 1144:    int result;
        -: 1145:
    #####: 1146:    if ((message == NULL) ||
        -: 1147:        (body_amqp_value == NULL))
        -: 1148:    {
        -: 1149:        /* Codes_SRS_MESSAGE_01_103: [ If `message` or `body_amqp_value` is NULL, `message_set_body_amqp_value` shall fail and return a non-zero value. ]*/
    #####: 1150:        LogError("Bad arguments: message = %p, body_amqp_value = %p",
        -: 1151:            message, body_amqp_value);
    #####: 1152:        result = MU_FAILURE;
        -: 1153:    }
        -: 1154:    else
        -: 1155:    {
    #####: 1156:        MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);
    #####: 1157:        if ((body_type == MESSAGE_BODY_TYPE_DATA) ||
        -: 1158:            (body_type == MESSAGE_BODY_TYPE_SEQUENCE))
        -: 1159:        {
        -: 1160:            /* Codes_SRS_MESSAGE_01_105: [ If the body was already set to an AMQP data list or a list of AMQP sequences, `message_set_body_amqp_value` shall fail and return a non-zero value. ]*/
    #####: 1161:            LogError("Body is already set to another body type");
    #####: 1162:            result = MU_FAILURE;
        -: 1163:        }
        -: 1164:        else
        -: 1165:        {
        -: 1166:            /* Codes_SRS_MESSAGE_01_154: [ Cloning the amqp value shall be done by calling `amqpvalue_clone`. ]*/
    #####: 1167:            AMQP_VALUE new_amqp_value = amqpvalue_clone(body_amqp_value);
    #####: 1168:            if (new_amqp_value == NULL)
        -: 1169:            {
    #####: 1170:                LogError("Cannot clone body AMQP value");
    #####: 1171:                result = MU_FAILURE;
        -: 1172:            }
        -: 1173:            else
        -: 1174:            {
        -: 1175:                /* Codes_SRS_MESSAGE_01_104: [ If setting the body AMQP value fails, the previous value shall be preserved. ]*/
        -: 1176:                /* Only free the previous value when cloning is succesfull */
    #####: 1177:                if (message->body_amqp_value != NULL)
        -: 1178:                {
    #####: 1179:                    amqpvalue_destroy(body_amqp_value);
        -: 1180:                }
        -: 1181:
        -: 1182:                /* Codes_SRS_MESSAGE_01_101: [ `message_set_body_amqp_value` shall set the contents of body as being the AMQP value indicate by `body_amqp_value`. ]*/
    #####: 1183:                message->body_amqp_value = new_amqp_value;
        -: 1184:
        -: 1185:                /* Codes_SRS_MESSAGE_01_102: [ On success it shall return 0. ]*/
    #####: 1186:                result = 0;
        -: 1187:            }
        -: 1188:        }
        -: 1189:    }
        -: 1190:
    #####: 1191:    return result;
        -: 1192:}
        -: 1193:
    #####: 1194:int message_get_body_amqp_value_in_place(MESSAGE_HANDLE message, AMQP_VALUE* body_amqp_value)
        -: 1195:{
        -: 1196:    int result;
        -: 1197:
    #####: 1198:    if ((message == NULL) ||
        -: 1199:        (body_amqp_value == NULL))
        -: 1200:    {
        -: 1201:        /* Codes_SRS_MESSAGE_01_108: [ If `message` or `body_amqp_value` is NULL, `message_get_body_amqp_value_in_place` shall fail and return a non-zero value. ]*/
    #####: 1202:        LogError("Bad arguments: message = %p, body_amqp_value = %p",
        -: 1203:            message, body_amqp_value);
    #####: 1204:        result = MU_FAILURE;
        -: 1205:    }
        -: 1206:    else
        -: 1207:    {
    #####: 1208:        MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);
    #####: 1209:        if (body_type != MESSAGE_BODY_TYPE_VALUE)
        -: 1210:        {
        -: 1211:            /* Codes_SRS_MESSAGE_01_109: [ If the body for `message` is not of type `MESSAGE_BODY_TYPE_VALUE`, `message_get_body_amqp_value_in_place` shall fail and return a non-zero value. ]*/
    #####: 1212:            LogError("Body is not of type AMQP value");
    #####: 1213:            result = MU_FAILURE;
        -: 1214:        }
        -: 1215:        else
        -: 1216:        {
        -: 1217:            /* Codes_SRS_MESSAGE_01_106: [ `message_get_body_amqp_value_in_place` shall get the body AMQP value for the message instance identified by `message` in place (not cloning) into the `body_amqp_value` argument. ]*/
    #####: 1218:            *body_amqp_value = message->body_amqp_value;
        -: 1219:
        -: 1220:            /* Codes_SRS_MESSAGE_01_107: [ On success, `message_get_body_amqp_value_in_place` shall return 0. ]*/
    #####: 1221:            result = 0;
        -: 1222:        }
        -: 1223:    }
        -: 1224:
    #####: 1225:    return result;
        -: 1226:}
        -: 1227:
    #####: 1228:int message_add_body_amqp_sequence(MESSAGE_HANDLE message, AMQP_VALUE sequence_list)
        -: 1229:{
        -: 1230:    int result;
        -: 1231:
    #####: 1232:    if ((message == NULL) ||
        -: 1233:        (sequence_list == NULL))
        -: 1234:    {
        -: 1235:        /* Codes_SRS_MESSAGE_01_112: [ If `message` or `sequence` is NULL, `message_add_body_amqp_sequence` shall fail and return a non-zero value. ]*/
    #####: 1236:        LogError("Bad arguments: message = %p, sequence_list = %p",
        -: 1237:            message, sequence_list);
    #####: 1238:        result = MU_FAILURE;
        -: 1239:    }
        -: 1240:    else
        -: 1241:    {
    #####: 1242:        MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);
    #####: 1243:        if ((body_type == MESSAGE_BODY_TYPE_DATA) ||
        -: 1244:            (body_type == MESSAGE_BODY_TYPE_VALUE))
        -: 1245:        {
        -: 1246:            /* Codes_SRS_MESSAGE_01_115: [ If the body was already set to an AMQP data list or an AMQP value, `message_add_body_amqp_sequence` shall fail and return a non-zero value. ]*/
    #####: 1247:            LogError("Body is already set to another body type");
    #####: 1248:            result = MU_FAILURE;
        -: 1249:        }
        -: 1250:        else
        -: 1251:        {
    #####: 1252:            AMQP_VALUE* new_body_amqp_sequence_items = (AMQP_VALUE*)realloc(message->body_amqp_sequence_items, sizeof(AMQP_VALUE) * (message->body_amqp_sequence_count + 1));
    #####: 1253:            if (new_body_amqp_sequence_items == NULL)
        -: 1254:            {
        -: 1255:                /* Codes_SRS_MESSAGE_01_158: [ If allocating memory in order to store the sequence fails, `message_add_body_amqp_sequence` shall fail and return a non-zero value. ]*/
    #####: 1256:                LogError("Cannot allocate enough memory for sequence items");
    #####: 1257:                result = MU_FAILURE;
        -: 1258:            }
        -: 1259:            else
        -: 1260:            {
    #####: 1261:                message->body_amqp_sequence_items = new_body_amqp_sequence_items;
        -: 1262:
        -: 1263:                /* Codes_SRS_MESSAGE_01_110: [ `message_add_body_amqp_sequence` shall add the contents of `sequence` to the list of AMQP sequences for the body of the message identified by `message`. ]*/
        -: 1264:                /* Codes_SRS_MESSAGE_01_156: [ The AMQP sequence shall be cloned by calling `amqpvalue_clone`. ]*/
    #####: 1265:                message->body_amqp_sequence_items[message->body_amqp_sequence_count] = amqpvalue_clone(sequence_list);
    #####: 1266:                if (message->body_amqp_sequence_items[message->body_amqp_sequence_count] == NULL)
        -: 1267:                {
        -: 1268:                    /* Codes_SRS_MESSAGE_01_157: [ If `amqpvalue_clone` fails, `message_add_body_amqp_sequence` shall fail and return a non-zero value. ]*/
    #####: 1269:                    LogError("Cloning sequence failed");
    #####: 1270:                    result = MU_FAILURE;
        -: 1271:                }
        -: 1272:                else
        -: 1273:                {
        -: 1274:                    /* Codes_SRS_MESSAGE_01_114: [ If adding the AMQP sequence fails, the previous value shall be preserved. ]*/
    #####: 1275:                    message->body_amqp_sequence_count++;
        -: 1276:
        -: 1277:                    /* Codes_SRS_MESSAGE_01_111: [ On success it shall return 0. ]*/
    #####: 1278:                    result = 0;
        -: 1279:                }
        -: 1280:            }
        -: 1281:        }
        -: 1282:    }
        -: 1283:
    #####: 1284:    return result;
        -: 1285:}
        -: 1286:
    #####: 1287:int message_get_body_amqp_sequence_in_place(MESSAGE_HANDLE message, size_t index, AMQP_VALUE* sequence)
        -: 1288:{
        -: 1289:    int result;
        -: 1290:
    #####: 1291:    if ((message == NULL) ||
        -: 1292:        (sequence == NULL))
        -: 1293:    {
        -: 1294:        /* Codes_SRS_MESSAGE_01_118: [ If `message` or `sequence` is NULL, `message_get_body_amqp_sequence_in_place` shall fail and return a non-zero value. ]*/
    #####: 1295:        LogError("Bad arguments: message = %p, sequence = %p",
        -: 1296:            message, sequence);
    #####: 1297:        result = MU_FAILURE;
        -: 1298:    }
        -: 1299:    else
        -: 1300:    {
    #####: 1301:        MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);
    #####: 1302:        if (body_type != MESSAGE_BODY_TYPE_SEQUENCE)
        -: 1303:        {
        -: 1304:            /* Codes_SRS_MESSAGE_01_120: [ If the body for `message` is not of type `MESSAGE_BODY_TYPE_SEQUENCE`, `message_get_body_amqp_sequence_in_place` shall fail and return a non-zero value. ]*/
    #####: 1305:            LogError("Body is not of type SEQUENCE");
    #####: 1306:            result = MU_FAILURE;
        -: 1307:        }
        -: 1308:        else
        -: 1309:        {
    #####: 1310:            if (index >= message->body_amqp_sequence_count)
        -: 1311:            {
        -: 1312:                /* Codes_SRS_MESSAGE_01_119: [ If `index` indicates an AMQP sequence entry that is out of bounds, `message_get_body_amqp_sequence_in_place` shall fail and return a non-zero value. ]*/
    #####: 1313:                LogError("Index too high for AMQP sequence (%lu), maximum is %lu",
        -: 1314:                    (unsigned long)index, (unsigned long)message->body_amqp_sequence_count);
    #####: 1315:                result = MU_FAILURE;
        -: 1316:            }
        -: 1317:            else
        -: 1318:            {
        -: 1319:                /* Codes_SRS_MESSAGE_01_116: [ `message_get_body_amqp_sequence_in_place` shall return in `sequence` the content of the `index`th AMQP seuquence entry for the message instance identified by `message`. ]*/
    #####: 1320:                *sequence = message->body_amqp_sequence_items[index];
        -: 1321:
        -: 1322:                /* Codes_SRS_MESSAGE_01_117: [ On success, `message_get_body_amqp_sequence_in_place` shall return 0. ]*/
    #####: 1323:                result = 0;
        -: 1324:            }
        -: 1325:        }
        -: 1326:    }
        -: 1327:
    #####: 1328:    return result;
        -: 1329:}
        -: 1330:
    #####: 1331:int message_get_body_amqp_sequence_count(MESSAGE_HANDLE message, size_t* count)
        -: 1332:{
        -: 1333:    int result;
        -: 1334:
    #####: 1335:    if ((message == NULL) ||
        -: 1336:        (count == NULL))
        -: 1337:    {
        -: 1338:        /* Codes_SRS_MESSAGE_01_123: [ If `message` or `count` is NULL, `message_get_body_amqp_sequence_count` shall fail and return a non-zero value. ]*/
    #####: 1339:        LogError("Bad arguments: message = %p, count = %p",
        -: 1340:            message, count);
    #####: 1341:        result = MU_FAILURE;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
    #####: 1345:        MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);
    #####: 1346:        if (body_type != MESSAGE_BODY_TYPE_SEQUENCE)
        -: 1347:        {
        -: 1348:            /* Codes_SRS_MESSAGE_01_124: [ If the body for `message` is not of type `MESSAGE_BODY_TYPE_SEQUENCE`, `message_get_body_amqp_sequence_count` shall fail and return a non-zero value. ]*/
    #####: 1349:            LogError("Body is not of type SEQUENCE");
    #####: 1350:            result = MU_FAILURE;
        -: 1351:        }
        -: 1352:        else
        -: 1353:        {
        -: 1354:            /* Codes_SRS_MESSAGE_01_121: [ `message_get_body_amqp_sequence_count` shall fill in `count` the number of AMQP sequences that are stored by the message identified by `message`. ]*/
    #####: 1355:            *count = message->body_amqp_sequence_count;
        -: 1356:
        -: 1357:            /* Codes_SRS_MESSAGE_01_122: [ On success, `message_get_body_amqp_sequence_count` shall return 0. ]*/
    #####: 1358:            result = 0;
        -: 1359:        }
        -: 1360:    }
        -: 1361:
    #####: 1362:    return result;
        -: 1363:}
        -: 1364:
    #####: 1365:int message_get_body_type(MESSAGE_HANDLE message, MESSAGE_BODY_TYPE* body_type)
        -: 1366:{
        -: 1367:    int result;
        -: 1368:
    #####: 1369:    if ((message == NULL) ||
        -: 1370:        (body_type == NULL))
        -: 1371:    {
        -: 1372:        /* Codes_SRS_MESSAGE_01_127: [ If `message` or `body_type` is NULL, `message_get_body_type` shall fail and return a non-zero value. ]*/
    #####: 1373:        LogError("Bad arguments: message = %p, body_type = %p",
        -: 1374:            message, body_type);
    #####: 1375:        result = MU_FAILURE;
        -: 1376:    }
        -: 1377:    else
        -: 1378:    {
        -: 1379:        /* Codes_SRS_MESSAGE_01_125: [ `message_get_body_type` shall fill in `body_type` the AMQP message body type. ]*/
    #####: 1380:        if (message->body_amqp_value != NULL)
        -: 1381:        {
    #####: 1382:            *body_type = MESSAGE_BODY_TYPE_VALUE;
        -: 1383:        }
    #####: 1384:        else if (message->body_amqp_data_count > 0)
        -: 1385:        {
    #####: 1386:            *body_type = MESSAGE_BODY_TYPE_DATA;
        -: 1387:        }
    #####: 1388:        else if (message->body_amqp_sequence_count > 0)
        -: 1389:        {
    #####: 1390:            *body_type = MESSAGE_BODY_TYPE_SEQUENCE;
        -: 1391:        }
        -: 1392:        else
        -: 1393:        {
        -: 1394:            /* Codes_SRS_MESSAGE_01_128: [ If no body has been set on the message, `body_type` shall be `MESSAGE_BODY_TYPE_NONE`. ]*/
    #####: 1395:            *body_type = MESSAGE_BODY_TYPE_NONE;
        -: 1396:        }
        -: 1397:
        -: 1398:        /* Codes_SRS_MESSAGE_01_126: [ On success, `message_get_body_type` shall return 0. ]*/
    #####: 1399:        result = 0;
        -: 1400:    }
        -: 1401:
    #####: 1402:    return result;
        -: 1403:}
        -: 1404:
    #####: 1405:int message_set_message_format(MESSAGE_HANDLE message, uint32_t message_format)
        -: 1406:{
        -: 1407:    int result;
        -: 1408:
    #####: 1409:    if (message == NULL)
        -: 1410:    {
        -: 1411:        /* Codes_SRS_MESSAGE_01_131: [ If `message` is NULL, `message_set_message_format` shall fail and return a non-zero value. ]*/
    #####: 1412:        LogError("NULL message");
    #####: 1413:        result = MU_FAILURE;
        -: 1414:    }
        -: 1415:    else
        -: 1416:    {
        -: 1417:        /* Codes_SRS_MESSAGE_01_129: [ `message_set_message_format` shall set the message format for the message identified by `message`. ]*/
    #####: 1418:        message->message_format = message_format;
        -: 1419:
        -: 1420:        /* Codes_SRS_MESSAGE_01_130: [ On success, `message_set_message_format` shall return 0. ]*/
    #####: 1421:        result = 0;
        -: 1422:    }
        -: 1423:
    #####: 1424:    return result;
        -: 1425:}
        -: 1426:
    #####: 1427:int message_get_message_format(MESSAGE_HANDLE message, uint32_t *message_format)
        -: 1428:{
        -: 1429:    int result;
        -: 1430:
    #####: 1431:    if ((message == NULL) ||
        -: 1432:        (message_format == NULL))
        -: 1433:    {
        -: 1434:        /* Codes_SRS_MESSAGE_01_134: [ If `message` or `message_format` is NULL, `message_get_message_format` shall fail and return a non-zero value. ]*/
    #####: 1435:        LogError("Bad arguments: message = %p, message_format = %p",
        -: 1436:            message, message_format);
    #####: 1437:        result = MU_FAILURE;
        -: 1438:    }
        -: 1439:    else
        -: 1440:    {
        -: 1441:        /* Codes_SRS_MESSAGE_01_132: [ `message_get_message_format` shall get the message format for the message identified by `message` and return it in the `message_fomrat` argument. ]*/
    #####: 1442:        *message_format = message->message_format;
        -: 1443:
        -: 1444:        /* Codes_SRS_MESSAGE_01_133: [ On success, `message_get_message_format` shall return 0. ]*/
    #####: 1445:        result = 0;
        -: 1446:    }
        -: 1447:
    #####: 1448:    return result;
        -: 1449:}
