        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/amqpvalue_to_string.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <stdint.h>
        -:    6:#include <inttypes.h>
        -:    7:#include <stddef.h>
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include "azure_macro_utils/macro_utils.h"
        -:   11:#include "azure_c_shared_utility/gballoc.h"
        -:   12:#include "azure_c_shared_utility/xlogging.h"
        -:   13:#include "azure_c_shared_utility/uuid.h"
        -:   14:#include "azure_uamqp_c/amqpvalue_to_string.h"
        -:   15:#include "azure_uamqp_c/amqpvalue.h"
        -:   16:
        -:   17:#if _WIN32
        -:   18:/* The MS runtime does not have snprintf */
        -:   19:#define snprintf _snprintf
        -:   20:#endif
        -:   21:
    #####:   22:static int string_concat(char** string, const char* to_concat)
        -:   23:{
        -:   24:    int result;
        -:   25:    char* new_string;
    #####:   26:    size_t length = strlen(to_concat) + 1;
        -:   27:    size_t src_length;
        -:   28:
    #####:   29:    if (*string != NULL)
        -:   30:    {
    #####:   31:        src_length = strlen(*string);
        -:   32:    }
        -:   33:    else
        -:   34:    {
    #####:   35:        src_length = 0;
        -:   36:    }
        -:   37:
    #####:   38:    new_string = (char*)realloc(*string, src_length + length);
    #####:   39:    if (new_string == NULL)
        -:   40:    {
    #####:   41:        LogError("Cannot allocate memory for the new string");
    #####:   42:        result = MU_FAILURE;
        -:   43:    }
        -:   44:    else
        -:   45:    {
    #####:   46:        *string = new_string;
    #####:   47:        (void)memcpy(*string + src_length, to_concat, length);
    #####:   48:        result = 0;
        -:   49:    }
        -:   50:
    #####:   51:    return result;
        -:   52:}
        -:   53:
    #####:   54:char* amqpvalue_to_string(AMQP_VALUE amqp_value)
        -:   55:{
    #####:   56:    char* result = NULL;
        -:   57:
    #####:   58:    if (amqp_value != NULL)
        -:   59:    {
    #####:   60:        AMQP_TYPE amqp_type = amqpvalue_get_type(amqp_value);
    #####:   61:        switch (amqp_type)
        -:   62:        {
    #####:   63:        default:
    #####:   64:            LogError("Unknown AMQP type");
    #####:   65:            result = NULL;
    #####:   66:            break;
        -:   67:
    #####:   68:        case AMQP_TYPE_NULL:
    #####:   69:            if (string_concat(&result, "NULL") != 0)
        -:   70:            {
    #####:   71:                LogError("Failure building amqp value string");
    #####:   72:                free(result);
    #####:   73:                result = NULL;
        -:   74:            }
    #####:   75:            break;
    #####:   76:        case AMQP_TYPE_BOOL:
        -:   77:        {
        -:   78:            bool value;
    #####:   79:            if (amqpvalue_get_boolean(amqp_value, &value) != 0)
        -:   80:            {
    #####:   81:                LogError("Failure getting bool value");
    #####:   82:                free(result);
    #####:   83:                result = NULL;
        -:   84:            }
    #####:   85:            else if (string_concat(&result, (value == true) ? "true" : "false") != 0)
        -:   86:            {
    #####:   87:                LogError("Failure building amqp value string");
    #####:   88:                free(result);
    #####:   89:                result = NULL;
        -:   90:            }
    #####:   91:            break;
        -:   92:        }
    #####:   93:        case AMQP_TYPE_UBYTE:
        -:   94:        {
        -:   95:            char str_value[4];
        -:   96:            uint8_t value;
    #####:   97:            if (amqpvalue_get_ubyte(amqp_value, &value) != 0)
        -:   98:            {
    #####:   99:                LogError("Failure getting ubyte value");
    #####:  100:                free(result);
    #####:  101:                result = NULL;
        -:  102:            }
    #####:  103:            else if ((sprintf(str_value, "%" PRIu8, value) < 0) ||
    #####:  104:                     (string_concat(&result, str_value) != 0))
        -:  105:            {
    #####:  106:                LogError("Failure building amqp value string");
    #####:  107:                free(result);
    #####:  108:                result = NULL;
        -:  109:            }
    #####:  110:            break;
        -:  111:        }
    #####:  112:        case AMQP_TYPE_USHORT:
        -:  113:        {
        -:  114:            char str_value[6];
        -:  115:            uint16_t value;
    #####:  116:            if (amqpvalue_get_ushort(amqp_value, &value) != 0)
        -:  117:            {
    #####:  118:                LogError("Failure getting ushort value");
    #####:  119:                free(result);
    #####:  120:                result = NULL;
        -:  121:            }
    #####:  122:            else if ((sprintf(str_value, "%" PRIu16, value) < 0) ||
    #####:  123:                     (string_concat(&result, str_value) != 0))
        -:  124:            {
    #####:  125:                LogError("Failure building amqp value string");
    #####:  126:                free(result);
    #####:  127:                result = NULL;
        -:  128:            }
    #####:  129:            break;
        -:  130:        }
    #####:  131:        case AMQP_TYPE_UINT:
        -:  132:        {
        -:  133:            char str_value[11];
        -:  134:            uint32_t value;
    #####:  135:            if (amqpvalue_get_uint(amqp_value, &value) != 0)
        -:  136:            {
    #####:  137:                LogError("Failure getting uint value");
    #####:  138:                free(result);
    #####:  139:                result = NULL;
        -:  140:            }
    #####:  141:            else if ((sprintf(str_value, "%" PRIu32, value) < 0) ||
    #####:  142:                     (string_concat(&result, str_value) != 0))
        -:  143:            {
    #####:  144:                LogError("Failure building amqp value string");
    #####:  145:                free(result);
    #####:  146:                result = NULL;
        -:  147:            }
    #####:  148:            break;
        -:  149:        }
    #####:  150:        case AMQP_TYPE_ULONG:
        -:  151:        {
        -:  152:            char str_value[21];
        -:  153:            uint64_t value;
    #####:  154:            if (amqpvalue_get_ulong(amqp_value, &value) != 0)
        -:  155:            {
    #####:  156:                LogError("Failure getting ulong value");
    #####:  157:                free(result);
    #####:  158:                result = NULL;
        -:  159:            }
    #####:  160:            else if ((sprintf(str_value, "%" PRIu64, value) < 0) ||
    #####:  161:                     (string_concat(&result, str_value) != 0))
        -:  162:            {
    #####:  163:                LogError("Failure building amqp value string");
    #####:  164:                free(result);
    #####:  165:                result = NULL;
        -:  166:            }
    #####:  167:            break;
        -:  168:        }
    #####:  169:        case AMQP_TYPE_BYTE:
        -:  170:        {
        -:  171:            char str_value[5];
        -:  172:            char value;
    #####:  173:            if (amqpvalue_get_byte(amqp_value, &value) != 0)
        -:  174:            {
    #####:  175:                LogError("Failure getting byte value");
    #####:  176:                free(result);
    #####:  177:                result = NULL;
        -:  178:            }
    #####:  179:            else if ((sprintf(str_value, "%" PRId8, value) < 0) ||
    #####:  180:                     (string_concat(&result, str_value) != 0))
        -:  181:            {
    #####:  182:                LogError("Failure building amqp value string");
    #####:  183:                free(result);
    #####:  184:                result = NULL;
        -:  185:            }
    #####:  186:            break;
        -:  187:        }
    #####:  188:        case AMQP_TYPE_SHORT:
        -:  189:        {
        -:  190:            char str_value[7];
        -:  191:            int16_t value;
    #####:  192:            if (amqpvalue_get_short(amqp_value, &value) != 0)
        -:  193:            {
    #####:  194:                LogError("Failure getting short value");
    #####:  195:                free(result);
    #####:  196:                result = NULL;
        -:  197:            }
    #####:  198:            else if ((sprintf(str_value, "%" PRId16, value) < 0) ||
    #####:  199:                     (string_concat(&result, str_value) != 0))
        -:  200:            {
    #####:  201:                LogError("Failure building amqp value string");
    #####:  202:                free(result);
    #####:  203:                result = NULL;
        -:  204:            }
    #####:  205:            break;
        -:  206:        }
    #####:  207:        case AMQP_TYPE_INT:
        -:  208:        {
        -:  209:            char str_value[12];
        -:  210:            int32_t value;
    #####:  211:            if (amqpvalue_get_int(amqp_value, &value) != 0)
        -:  212:            {
    #####:  213:                LogError("Failure getting int value");
    #####:  214:                free(result);
    #####:  215:                result = NULL;
        -:  216:            }
    #####:  217:            else if ((sprintf(str_value, "%" PRId32, value) < 0) ||
    #####:  218:                     (string_concat(&result, str_value) != 0))
        -:  219:            {
    #####:  220:                LogError("Failure building amqp value string");
    #####:  221:                free(result);
    #####:  222:                result = NULL;
        -:  223:            }
    #####:  224:            break;
        -:  225:        }
    #####:  226:        case AMQP_TYPE_LONG:
        -:  227:        {
        -:  228:            char str_value[21];
        -:  229:            int64_t value;
    #####:  230:            if (amqpvalue_get_long(amqp_value, &value) != 0)
        -:  231:            {
    #####:  232:                LogError("Failure getting long value");
    #####:  233:                free(result);
    #####:  234:                result = NULL;
        -:  235:            }
    #####:  236:            else if ((sprintf(str_value, "%" PRId64, value) < 0) ||
    #####:  237:                     (string_concat(&result, str_value) != 0))
        -:  238:            {
    #####:  239:                LogError("Failure building amqp value string");
    #####:  240:                free(result);
    #####:  241:                result = NULL;
        -:  242:            }
    #####:  243:            break;
        -:  244:        }
    #####:  245:        case AMQP_TYPE_FLOAT:
        -:  246:        {
        -:  247:            float float_value;
    #####:  248:            if (amqpvalue_get_float(amqp_value, &float_value) != 0)
        -:  249:            {
    #####:  250:                LogError("Failure getting float value");
    #####:  251:                free(result);
    #####:  252:                result = NULL;
        -:  253:            }
        -:  254:            else
        -:  255:            {
        -:  256:                char str_value[25];
    #####:  257:                if ((snprintf(str_value, sizeof(str_value), "%.02f", float_value) < 0) ||
    #####:  258:                    (string_concat(&result, str_value) != 0))
        -:  259:                {
    #####:  260:                    LogError("Failure building amqp value string");
    #####:  261:                    free(result);
    #####:  262:                    result = NULL;
        -:  263:                }
        -:  264:            }
    #####:  265:            break;
        -:  266:        }
    #####:  267:        case AMQP_TYPE_DOUBLE:
        -:  268:        {
        -:  269:            double double_value;
    #####:  270:            if (amqpvalue_get_double(amqp_value, &double_value) != 0)
        -:  271:            {
    #####:  272:                LogError("Failure getting double value");
    #####:  273:                free(result);
    #####:  274:                result = NULL;
        -:  275:            }
        -:  276:            else
        -:  277:            {
        -:  278:                char str_value[25];
    #####:  279:                if ((snprintf(str_value, sizeof(str_value), "%.02lf", double_value) < 0) ||
    #####:  280:                    (string_concat(&result, str_value) != 0))
        -:  281:                {
    #####:  282:                    LogError("Failure building amqp value string");
    #####:  283:                    free(result);
    #####:  284:                    result = NULL;
        -:  285:                }
        -:  286:            }
    #####:  287:            break;
        -:  288:        }
    #####:  289:        case AMQP_TYPE_CHAR:
        -:  290:        {
        -:  291:            uint32_t char_code;
    #####:  292:            if (amqpvalue_get_char(amqp_value, &char_code) != 0)
        -:  293:            {
    #####:  294:                LogError("Failure getting char value");
    #####:  295:                free(result);
    #####:  296:                result = NULL;
        -:  297:            }
        -:  298:            else
        -:  299:            {
        -:  300:                char str_value[25];
    #####:  301:                if ((snprintf(str_value, sizeof(str_value), "U%02X%02X%02X%02X", char_code >> 24, (char_code >> 16) & 0xFF, (char_code >> 8) & 0xFF, char_code & 0xFF) < 0) ||
    #####:  302:                    (string_concat(&result, str_value) != 0))
        -:  303:                {
    #####:  304:                    LogError("Failure building amqp value string");
    #####:  305:                    free(result);
    #####:  306:                    result = NULL;
        -:  307:                }
        -:  308:            }
    #####:  309:            break;
        -:  310:        }
    #####:  311:        case AMQP_TYPE_TIMESTAMP:
        -:  312:        {
        -:  313:            char str_value[21];
        -:  314:            int64_t value;
    #####:  315:            if (amqpvalue_get_timestamp(amqp_value, &value) != 0)
        -:  316:            {
    #####:  317:                LogError("Failure getting timestamp value");
    #####:  318:                free(result);
    #####:  319:                result = NULL;
        -:  320:            }
    #####:  321:            else if ((sprintf(str_value, "%" PRId64, value) < 0) ||
    #####:  322:                     (string_concat(&result, str_value) != 0))
        -:  323:            {
    #####:  324:                LogError("Failure building amqp value string");
    #####:  325:                free(result);
    #####:  326:                result = NULL;
        -:  327:            }
    #####:  328:            break;
        -:  329:        }
    #####:  330:        case AMQP_TYPE_UUID:
        -:  331:        {
        -:  332:            uuid uuid_value;
    #####:  333:            if (amqpvalue_get_uuid(amqp_value, &uuid_value) != 0)
        -:  334:            {
    #####:  335:                LogError("Failure getting uuid value");
    #####:  336:                free(result);
    #####:  337:                result = NULL;
        -:  338:            }
        -:  339:            else
        -:  340:            {
    #####:  341:                char* uuid_string_value = UUID_to_string((const UUID_T *)&uuid_value);
    #####:  342:                if (uuid_string_value == NULL)
        -:  343:                {
    #####:  344:                    LogError("Failure getting UUID stringified value");
    #####:  345:                    free(result);
    #####:  346:                    result = NULL;
        -:  347:                }
        -:  348:                else
        -:  349:                {
    #####:  350:                    if (string_concat(&result, uuid_string_value) != 0)
        -:  351:                    {
    #####:  352:                        LogError("Failure building amqp value string");
    #####:  353:                        free(result);
    #####:  354:                        result = NULL;
        -:  355:                    }
        -:  356:
    #####:  357:                    free(uuid_string_value);
        -:  358:                }
        -:  359:            }
        -:  360:
    #####:  361:            break;
        -:  362:        }
        -:  363:
    #####:  364:        case AMQP_TYPE_BINARY:
        -:  365:        {
        -:  366:            amqp_binary binary_value;
    #####:  367:            if (amqpvalue_get_binary(amqp_value, &binary_value) != 0)
        -:  368:            {
    #####:  369:                LogError("Failure getting binary value");
    #####:  370:                free(result);
    #####:  371:                result = NULL;
        -:  372:            }
        -:  373:            else
        -:  374:            {
    #####:  375:                if (string_concat(&result, "<") != 0)
        -:  376:                {
    #####:  377:                    LogError("Failure building amqp value string");
    #####:  378:                    free(result);
    #####:  379:                    result = NULL;
        -:  380:                }
        -:  381:                else
        -:  382:                {
        -:  383:                    uint64_t i;
        -:  384:
    #####:  385:                    for (i = 0; i < binary_value.length; i++)
        -:  386:                    {
        -:  387:                        char str_value[4];
    #####:  388:                        if ((snprintf(str_value, sizeof(str_value), "%s%02X", (i > 0) ? " " : "", ((unsigned char*)binary_value.bytes)[i]) < 0) ||
    #####:  389:                            (string_concat(&result, str_value) != 0))
        -:  390:                        {
        -:  391:                            break;
        -:  392:                        }
        -:  393:                    }
        -:  394:
    #####:  395:                    if ((i < binary_value.length) ||
    #####:  396:                        (string_concat(&result, ">") != 0))
        -:  397:                    {
    #####:  398:                        LogError("Failure building amqp value string");
    #####:  399:                        free(result);
    #####:  400:                        result = NULL;
        -:  401:                    }
        -:  402:                }
        -:  403:            }
    #####:  404:            break;
        -:  405:        }
    #####:  406:        case AMQP_TYPE_STRING:
        -:  407:        {
        -:  408:            const char* string_value;
    #####:  409:            if (amqpvalue_get_string(amqp_value, &string_value) != 0)
        -:  410:            {
    #####:  411:                LogError("Failure getting string value");
    #####:  412:                free(result);
    #####:  413:                result = NULL;
        -:  414:            }
        -:  415:            else
        -:  416:            {
    #####:  417:                if (string_concat(&result, string_value) != 0)
        -:  418:                {
    #####:  419:                    LogError("Failure building amqp value string");
    #####:  420:                    free(result);
    #####:  421:                    result = NULL;
        -:  422:                }
        -:  423:            }
    #####:  424:            break;
        -:  425:        }
    #####:  426:        case AMQP_TYPE_SYMBOL:
        -:  427:        {
        -:  428:            const char* string_value;
    #####:  429:            if (amqpvalue_get_symbol(amqp_value, &string_value) != 0)
        -:  430:            {
    #####:  431:                LogError("Failure getting symbol value");
    #####:  432:                free(result);
    #####:  433:                result = NULL;
        -:  434:            }
        -:  435:            else
        -:  436:            {
    #####:  437:                if (string_concat(&result, string_value) != 0)
        -:  438:                {
    #####:  439:                    LogError("Failure building amqp value string");
    #####:  440:                    free(result);
    #####:  441:                    result = NULL;
        -:  442:                }
        -:  443:            }
    #####:  444:            break;
        -:  445:        }
    #####:  446:        case AMQP_TYPE_LIST:
        -:  447:        {
        -:  448:            uint32_t count;
    #####:  449:            if (amqpvalue_get_list_item_count(amqp_value, &count) != 0)
        -:  450:            {
    #####:  451:                LogError("Failure getting list item count value");
    #####:  452:                free(result);
    #####:  453:                result = NULL;
        -:  454:            }
    #####:  455:            else if (string_concat(&result, "{") != 0)
        -:  456:            {
    #####:  457:                LogError("Failure building amqp value string");
    #####:  458:                free(result);
    #####:  459:                result = NULL;
        -:  460:            }
        -:  461:            else
        -:  462:            {
        -:  463:                size_t i;
    #####:  464:                for (i = 0; i < count; i++)
        -:  465:                {
    #####:  466:                    AMQP_VALUE item = amqpvalue_get_list_item(amqp_value, i);
    #####:  467:                    if (item == NULL)
        -:  468:                    {
    #####:  469:                        LogError("Failure getting item %u from list", (unsigned int)i);
    #####:  470:                        break;
        -:  471:                    }
        -:  472:                    else
        -:  473:                    {
    #####:  474:                        char* item_string = amqpvalue_to_string(item);
    #####:  475:                        if (item_string == NULL)
        -:  476:                        {
    #####:  477:                            LogError("Failure converting item %u to string", (unsigned int)i);
    #####:  478:                            amqpvalue_destroy(item);
    #####:  479:                            break;
        -:  480:                        }
        -:  481:                        else
        -:  482:                        {
    #####:  483:                            if (((i > 0) && (string_concat(&result, ",") != 0)) ||
    #####:  484:                                 (string_concat(&result, item_string) != 0))
        -:  485:                            {
    #####:  486:                                LogError("Failure building amqp value string");
    #####:  487:                                free(result);
    #####:  488:                                result = NULL;
    #####:  489:                                break;
        -:  490:                            }
        -:  491:
    #####:  492:                            free(item_string);
        -:  493:                        }
        -:  494:
    #####:  495:                        amqpvalue_destroy(item);
        -:  496:                    }
        -:  497:                }
        -:  498:
    #####:  499:                if (i < count)
        -:  500:                {
        -:  501:                    // no log here, we already logged the error
    #####:  502:                    free(result);
    #####:  503:                    result = NULL;
        -:  504:                }
    #####:  505:                else if (string_concat(&result, "}") != 0)
        -:  506:                {
    #####:  507:                    LogError("Failure building amqp value string");
    #####:  508:                    free(result);
    #####:  509:                    result = NULL;
        -:  510:                }
        -:  511:            }
    #####:  512:            break;
        -:  513:        }
    #####:  514:        case AMQP_TYPE_MAP:
        -:  515:        {
        -:  516:            uint32_t count;
    #####:  517:            if (amqpvalue_get_map_pair_count(amqp_value, &count) != 0)
        -:  518:            {
    #####:  519:                LogError("Failure getting map pair count");
    #####:  520:                free(result);
    #####:  521:                result = NULL;
        -:  522:            }
    #####:  523:            else if (string_concat(&result, "{") != 0)
        -:  524:            {
    #####:  525:                LogError("Failure building amqp value string");
    #####:  526:                free(result);
    #####:  527:                result = NULL;
        -:  528:            }
        -:  529:            else
        -:  530:            {
        -:  531:                uint32_t i;
    #####:  532:                for (i = 0; i < count; i++)
        -:  533:                {
        -:  534:                    AMQP_VALUE key;
        -:  535:                    AMQP_VALUE value;
    #####:  536:                    if (amqpvalue_get_map_key_value_pair(amqp_value, i, &key, &value) != 0)
        -:  537:                    {
    #####:  538:                        LogError("Failure getting key/value pair index %u", (unsigned int)i);
    #####:  539:                        break;
        -:  540:                    }
        -:  541:                    else
        -:  542:                    {
    #####:  543:                        char* key_string = amqpvalue_to_string(key);
    #####:  544:                        if (key_string == NULL)
        -:  545:                        {
    #####:  546:                            LogError("Failure getting stringified key value for index %u", (unsigned int)i);
    #####:  547:                            amqpvalue_destroy(key);
    #####:  548:                            amqpvalue_destroy(value);
    #####:  549:                            break;
        -:  550:                        }
        -:  551:                        else
        -:  552:                        {
    #####:  553:                            char* value_string = amqpvalue_to_string(value);
    #####:  554:                            if (key_string == NULL)
        -:  555:                            {
    #####:  556:                                LogError("Failure getting stringified value for index %u", (unsigned int)i);
    #####:  557:                                free(key_string);
    #####:  558:                                amqpvalue_destroy(key);
    #####:  559:                                amqpvalue_destroy(value);
    #####:  560:                                break;
        -:  561:                            }
        -:  562:                            else
        -:  563:                            {
    #####:  564:                                if (((i > 0) && (string_concat(&result, ",") != 0)) ||
    #####:  565:                                    (string_concat(&result, "[") != 0) ||
    #####:  566:                                    (string_concat(&result, key_string) != 0) ||
    #####:  567:                                    (string_concat(&result, ":") != 0) ||
    #####:  568:                                    (string_concat(&result, value_string) != 0) ||
    #####:  569:                                    (string_concat(&result, "]") != 0))
        -:  570:                                {
    #####:  571:                                    LogError("Failure building amqp value string");
    #####:  572:                                    free(key_string);
    #####:  573:                                    free(value_string);
    #####:  574:                                    amqpvalue_destroy(key);
    #####:  575:                                    amqpvalue_destroy(value);
    #####:  576:                                    break;
        -:  577:                                }
        -:  578:
    #####:  579:                                free(value_string);
        -:  580:                            }
        -:  581:
    #####:  582:                            free(key_string);
        -:  583:                        }
        -:  584:
    #####:  585:                        amqpvalue_destroy(key);
    #####:  586:                        amqpvalue_destroy(value);
        -:  587:                    }
        -:  588:                }
        -:  589:
    #####:  590:                if (i < count)
        -:  591:                {
        -:  592:                    // no log here, we already logged the error
    #####:  593:                    free(result);
    #####:  594:                    result = NULL;
        -:  595:                }
    #####:  596:                else if (string_concat(&result, "}") != 0)
        -:  597:                {
    #####:  598:                    LogError("Failure building amqp value string");
    #####:  599:                    free(result);
    #####:  600:                    result = NULL;
        -:  601:                }
        -:  602:            }
    #####:  603:            break;
        -:  604:        }
    #####:  605:        case AMQP_TYPE_ARRAY:
        -:  606:        {
        -:  607:            uint32_t count;
    #####:  608:            if (amqpvalue_get_array_item_count(amqp_value, &count) != 0)
        -:  609:            {
    #####:  610:                LogError("Failure getting array item count");
    #####:  611:                free(result);
    #####:  612:                result = NULL;
        -:  613:            }
    #####:  614:            else if (string_concat(&result, "{") != 0)
        -:  615:            {
    #####:  616:                LogError("Failure building amqp value string");
    #####:  617:                free(result);
    #####:  618:                result = NULL;
        -:  619:            }
        -:  620:            else
        -:  621:            {
        -:  622:                uint32_t i;
    #####:  623:                for (i = 0; i < count; i++)
        -:  624:                {
    #####:  625:                    AMQP_VALUE item = amqpvalue_get_array_item(amqp_value, i);
    #####:  626:                    if (item == NULL)
        -:  627:                    {
    #####:  628:                        LogError("Failure getting array item for index %u", (unsigned int)i);
    #####:  629:                        break;
        -:  630:                    }
        -:  631:                    else
        -:  632:                    {
    #####:  633:                        char* item_string = amqpvalue_to_string(item);
    #####:  634:                        if (item_string == NULL)
        -:  635:                        {
    #####:  636:                            LogError("Failure getting stringified array item value for index %u", (unsigned int)i);
    #####:  637:                            amqpvalue_destroy(item);
    #####:  638:                            break;
        -:  639:                        }
        -:  640:                        else
        -:  641:                        {
    #####:  642:                            if (((i > 0) && (string_concat(&result, ",") != 0)) ||
    #####:  643:                                 (string_concat(&result, item_string) != 0))
        -:  644:                            {
    #####:  645:                                LogError("Failure building amqp value string");
    #####:  646:                                free(result);
    #####:  647:                                result = NULL;
    #####:  648:                                break;
        -:  649:                            }
        -:  650:
    #####:  651:                            free(item_string);
        -:  652:                        }
        -:  653:
    #####:  654:                        amqpvalue_destroy(item);
        -:  655:                    }
        -:  656:                }
        -:  657:
    #####:  658:                if (i < count)
        -:  659:                {
        -:  660:                    // no log here, we already logged the error
    #####:  661:                    free(result);
    #####:  662:                    result = NULL;
        -:  663:                }
    #####:  664:                else if (string_concat(&result, "}") != 0)
        -:  665:                {
    #####:  666:                    LogError("Failure building amqp value string");
    #####:  667:                    free(result);
    #####:  668:                    result = NULL;
        -:  669:                }
        -:  670:            }
    #####:  671:            break;
        -:  672:        }
    #####:  673:        case AMQP_TYPE_COMPOSITE:
        -:  674:        case AMQP_TYPE_DESCRIBED:
        -:  675:        {
    #####:  676:            AMQP_VALUE described_value = amqpvalue_get_inplace_described_value(amqp_value);
    #####:  677:            if (described_value == NULL)
        -:  678:            {
    #####:  679:                LogError("Failure getting described value");
    #####:  680:                free(result);
    #####:  681:                result = NULL;
        -:  682:            }
        -:  683:            else
        -:  684:            {
    #####:  685:                if (string_concat(&result, "* ") != 0)
        -:  686:                {
    #####:  687:                    LogError("Failure building amqp value string");
    #####:  688:                    free(result);
    #####:  689:                    result = NULL;
        -:  690:                }
        -:  691:                else
        -:  692:                {
    #####:  693:                    char* described_value_string = amqpvalue_to_string(described_value);
    #####:  694:                    if (described_value_string == NULL)
        -:  695:                    {
    #####:  696:                        LogError("Failure getting stringified described value");
    #####:  697:                        free(result);
    #####:  698:                        result = NULL;
        -:  699:                    }
        -:  700:                    else
        -:  701:                    {
    #####:  702:                        if (string_concat(&result, described_value_string) != 0)
        -:  703:                        {
    #####:  704:                            LogError("Failure building amqp value string");
    #####:  705:                            free(result);
    #####:  706:                            result = NULL;
        -:  707:                        }
        -:  708:
    #####:  709:                        free(described_value_string);
        -:  710:                    }
        -:  711:                }
        -:  712:            }
    #####:  713:            break;
        -:  714:        }
        -:  715:        }
    #####:  716:    }
        -:  717:
    #####:  718:    return result;
        -:  719:}
