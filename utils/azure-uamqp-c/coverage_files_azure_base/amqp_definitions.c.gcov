        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/amqp_definitions.c
        -:    0:Programs:101
        -:    1:
        -:    2:
        -:    3:// Copyright (c) Microsoft. All rights reserved.
        -:    4:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    5:
        -:    6:// This file is generated. DO NOT EDIT it manually.
        -:    7:// The generator that produces it is located at /uamqp_generator/uamqp_generator.sln
        -:    8:
        -:    9:#include <stdlib.h>
        -:   10:#include "azure_macro_utils/macro_utils.h"
        -:   11:#include "azure_c_shared_utility/gballoc.h"
        -:   12:#include "azure_uamqp_c/amqpvalue.h"
        -:   13:#include "azure_uamqp_c/amqp_definitions.h"
        -:   14:#include <stdlib.h>
        -:   15:#include <stdbool.h>
        -:   16:
        -:   17:/* role */
        -:   18:
    #####:   19:AMQP_VALUE amqpvalue_create_role(role value)
        -:   20:{
    #####:   21:    return amqpvalue_create_boolean(value);
        -:   22:}
        -:   23:
        -:   24:/* sender-settle-mode */
        -:   25:
    #####:   26:AMQP_VALUE amqpvalue_create_sender_settle_mode(sender_settle_mode value)
        -:   27:{
    #####:   28:    return amqpvalue_create_ubyte(value);
        -:   29:}
        -:   30:
        -:   31:/* receiver-settle-mode */
        -:   32:
    #####:   33:AMQP_VALUE amqpvalue_create_receiver_settle_mode(receiver_settle_mode value)
        -:   34:{
    #####:   35:    return amqpvalue_create_ubyte(value);
        -:   36:}
        -:   37:
        -:   38:/* handle */
        -:   39:
    #####:   40:AMQP_VALUE amqpvalue_create_handle(handle value)
        -:   41:{
    #####:   42:    return amqpvalue_create_uint(value);
        -:   43:}
        -:   44:
        -:   45:/* seconds */
        -:   46:
    #####:   47:AMQP_VALUE amqpvalue_create_seconds(seconds value)
        -:   48:{
    #####:   49:    return amqpvalue_create_uint(value);
        -:   50:}
        -:   51:
        -:   52:/* milliseconds */
        -:   53:
    #####:   54:AMQP_VALUE amqpvalue_create_milliseconds(milliseconds value)
        -:   55:{
    #####:   56:    return amqpvalue_create_uint(value);
        -:   57:}
        -:   58:
        -:   59:/* delivery-tag */
        -:   60:
    #####:   61:AMQP_VALUE amqpvalue_create_delivery_tag(delivery_tag value)
        -:   62:{
    #####:   63:    return amqpvalue_create_binary(value);
        -:   64:}
        -:   65:
        -:   66:/* sequence-no */
        -:   67:
    #####:   68:AMQP_VALUE amqpvalue_create_sequence_no(sequence_no value)
        -:   69:{
    #####:   70:    return amqpvalue_create_uint(value);
        -:   71:}
        -:   72:
        -:   73:/* delivery-number */
        -:   74:
    #####:   75:AMQP_VALUE amqpvalue_create_delivery_number(delivery_number value)
        -:   76:{
    #####:   77:    return amqpvalue_create_sequence_no(value);
        -:   78:}
        -:   79:
        -:   80:/* transfer-number */
        -:   81:
    #####:   82:AMQP_VALUE amqpvalue_create_transfer_number(transfer_number value)
        -:   83:{
    #####:   84:    return amqpvalue_create_sequence_no(value);
        -:   85:}
        -:   86:
        -:   87:/* message-format */
        -:   88:
    #####:   89:AMQP_VALUE amqpvalue_create_message_format(message_format value)
        -:   90:{
    #####:   91:    return amqpvalue_create_uint(value);
        -:   92:}
        -:   93:
        -:   94:/* ietf-language-tag */
        -:   95:
    #####:   96:AMQP_VALUE amqpvalue_create_ietf_language_tag(ietf_language_tag value)
        -:   97:{
    #####:   98:    return amqpvalue_create_symbol(value);
        -:   99:}
        -:  100:
        -:  101:/* fields */
        -:  102:
    #####:  103:AMQP_VALUE amqpvalue_create_fields(AMQP_VALUE value)
        -:  104:{
    #####:  105:    return amqpvalue_clone(value);
        -:  106:}
        -:  107:
        -:  108:/* error */
        -:  109:
        -:  110:typedef struct ERROR_INSTANCE_TAG
        -:  111:{
        -:  112:    AMQP_VALUE composite_value;
        -:  113:} ERROR_INSTANCE;
        -:  114:
    #####:  115:static ERROR_HANDLE error_create_internal(void)
        -:  116:{
    #####:  117:    ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)malloc(sizeof(ERROR_INSTANCE));
    #####:  118:    if (error_instance != NULL)
        -:  119:    {
    #####:  120:        error_instance->composite_value = NULL;
        -:  121:    }
        -:  122:
    #####:  123:    return error_instance;
        -:  124:}
        -:  125:
    #####:  126:ERROR_HANDLE error_create(const char* condition_value)
        -:  127:{
    #####:  128:    ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)malloc(sizeof(ERROR_INSTANCE));
    #####:  129:    if (error_instance != NULL)
        -:  130:    {
    #####:  131:        error_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(29);
    #####:  132:        if (error_instance->composite_value == NULL)
        -:  133:        {
    #####:  134:            free(error_instance);
    #####:  135:            error_instance = NULL;
        -:  136:        }
        -:  137:        else
        -:  138:        {
        -:  139:            AMQP_VALUE condition_amqp_value;
    #####:  140:            int result = 0;
        -:  141:
    #####:  142:            condition_amqp_value = amqpvalue_create_symbol(condition_value);
    #####:  143:            if ((result == 0) && (amqpvalue_set_composite_item(error_instance->composite_value, 0, condition_amqp_value) != 0))
        -:  144:            {
    #####:  145:                result = MU_FAILURE;
        -:  146:            }
        -:  147:
    #####:  148:            amqpvalue_destroy(condition_amqp_value);
        -:  149:        }
        -:  150:    }
        -:  151:
    #####:  152:    return error_instance;
        -:  153:}
        -:  154:
    #####:  155:ERROR_HANDLE error_clone(ERROR_HANDLE value)
        -:  156:{
    #####:  157:    ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)malloc(sizeof(ERROR_INSTANCE));
    #####:  158:    if (error_instance != NULL)
        -:  159:    {
    #####:  160:        error_instance->composite_value = amqpvalue_clone(((ERROR_INSTANCE*)value)->composite_value);
    #####:  161:        if (error_instance->composite_value == NULL)
        -:  162:        {
    #####:  163:            free(error_instance);
    #####:  164:            error_instance = NULL;
        -:  165:        }
        -:  166:    }
        -:  167:
    #####:  168:    return error_instance;
        -:  169:}
        -:  170:
    #####:  171:void error_destroy(ERROR_HANDLE error)
        -:  172:{
    #####:  173:    if (error != NULL)
        -:  174:    {
    #####:  175:        ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error;
    #####:  176:        amqpvalue_destroy(error_instance->composite_value);
    #####:  177:        free(error_instance);
        -:  178:    }
    #####:  179:}
        -:  180:
    #####:  181:AMQP_VALUE amqpvalue_create_error(ERROR_HANDLE error)
        -:  182:{
        -:  183:    AMQP_VALUE result;
        -:  184:
    #####:  185:    if (error == NULL)
        -:  186:    {
    #####:  187:        result = NULL;
        -:  188:    }
        -:  189:    else
        -:  190:    {
    #####:  191:        ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error;
    #####:  192:        result = amqpvalue_clone(error_instance->composite_value);
        -:  193:    }
        -:  194:
    #####:  195:    return result;
        -:  196:}
        -:  197:
    #####:  198:bool is_error_type_by_descriptor(AMQP_VALUE descriptor)
        -:  199:{
        -:  200:    bool result;
        -:  201:
        -:  202:    uint64_t descriptor_ulong;
    #####:  203:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:  204:        (descriptor_ulong == 29))
        -:  205:    {
    #####:  206:        result = true;
        -:  207:    }
        -:  208:    else
        -:  209:    {
    #####:  210:        result = false;
        -:  211:    }
        -:  212:
    #####:  213:    return result;
        -:  214:}
        -:  215:
        -:  216:
    #####:  217:int amqpvalue_get_error(AMQP_VALUE value, ERROR_HANDLE* error_handle)
        -:  218:{
        -:  219:    int result;
    #####:  220:    ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error_create_internal();
    #####:  221:    *error_handle = error_instance;
    #####:  222:    if (*error_handle == NULL)
        -:  223:    {
    #####:  224:        result = MU_FAILURE;
        -:  225:    }
        -:  226:    else
        -:  227:    {
    #####:  228:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:  229:        if (list_value == NULL)
        -:  230:        {
    #####:  231:            error_destroy(*error_handle);
    #####:  232:            result = MU_FAILURE;
        -:  233:        }
        -:  234:        else
        -:  235:        {
        -:  236:            uint32_t list_item_count;
    #####:  237:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:  238:            {
    #####:  239:                result = MU_FAILURE;
        -:  240:            }
        -:  241:            else
        -:  242:            {
        -:  243:                do
        -:  244:                {
        -:  245:                    AMQP_VALUE item_value;
        -:  246:                    /* condition */
    #####:  247:                    if (list_item_count > 0)
        -:  248:                    {
    #####:  249:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:  250:                        if (item_value == NULL)
        -:  251:                        {
        -:  252:                            {
    #####:  253:                                error_destroy(*error_handle);
    #####:  254:                                result = MU_FAILURE;
    #####:  255:                                break;
        -:  256:                            }
        -:  257:                        }
        -:  258:                        else
        -:  259:                        {
    #####:  260:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  261:                            {
    #####:  262:                                amqpvalue_destroy(item_value);
    #####:  263:                                error_destroy(*error_handle);
    #####:  264:                                result = MU_FAILURE;
    #####:  265:                                break;
        -:  266:                            }
        -:  267:                            else
        -:  268:                            {
        -:  269:                                const char* condition;
    #####:  270:                                if (amqpvalue_get_symbol(item_value, &condition) != 0)
        -:  271:                                {
    #####:  272:                                    amqpvalue_destroy(item_value);
    #####:  273:                                    error_destroy(*error_handle);
    #####:  274:                                    result = MU_FAILURE;
    #####:  275:                                    break;
        -:  276:                                }
        -:  277:                            }
        -:  278:
    #####:  279:                            amqpvalue_destroy(item_value);
        -:  280:                        }
        -:  281:                    }
        -:  282:                    else
        -:  283:                    {
    #####:  284:                        result = MU_FAILURE;
        -:  285:                    }
        -:  286:                    /* description */
    #####:  287:                    if (list_item_count > 1)
        -:  288:                    {
    #####:  289:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:  290:                        if (item_value == NULL)
        -:  291:                        {
        -:  292:                            /* do nothing */
        -:  293:                        }
        -:  294:                        else
        -:  295:                        {
    #####:  296:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  297:                            {
        -:  298:                                /* no error, field is not mandatory */
        -:  299:                            }
        -:  300:                            else
        -:  301:                            {
        -:  302:                                const char* description;
    #####:  303:                                if (amqpvalue_get_string(item_value, &description) != 0)
        -:  304:                                {
    #####:  305:                                    amqpvalue_destroy(item_value);
    #####:  306:                                    error_destroy(*error_handle);
    #####:  307:                                    result = MU_FAILURE;
    #####:  308:                                    break;
        -:  309:                                }
        -:  310:                            }
        -:  311:
    #####:  312:                            amqpvalue_destroy(item_value);
        -:  313:                        }
        -:  314:                    }
        -:  315:                    /* info */
    #####:  316:                    if (list_item_count > 2)
        -:  317:                    {
    #####:  318:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####:  319:                        if (item_value == NULL)
        -:  320:                        {
        -:  321:                            /* do nothing */
        -:  322:                        }
        -:  323:                        else
        -:  324:                        {
    #####:  325:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  326:                            {
        -:  327:                                /* no error, field is not mandatory */
        -:  328:                            }
        -:  329:                            else
        -:  330:                            {
        -:  331:                                fields info;
    #####:  332:                                if (amqpvalue_get_fields(item_value, &info) != 0)
        -:  333:                                {
    #####:  334:                                    amqpvalue_destroy(item_value);
    #####:  335:                                    error_destroy(*error_handle);
    #####:  336:                                    result = MU_FAILURE;
    #####:  337:                                    break;
        -:  338:                                }
        -:  339:                            }
        -:  340:
    #####:  341:                            amqpvalue_destroy(item_value);
        -:  342:                        }
        -:  343:                    }
        -:  344:
    #####:  345:                    error_instance->composite_value = amqpvalue_clone(value);
        -:  346:
    #####:  347:                    result = 0;
        -:  348:                } while((void)0,0);
        -:  349:            }
        -:  350:        }
        -:  351:    }
        -:  352:
    #####:  353:    return result;
        -:  354:}
        -:  355:
    #####:  356:int error_get_condition(ERROR_HANDLE error, const char** condition_value)
        -:  357:{
        -:  358:    int result;
        -:  359:
    #####:  360:    if (error == NULL)
        -:  361:    {
    #####:  362:        result = MU_FAILURE;
        -:  363:    }
        -:  364:    else
        -:  365:    {
        -:  366:        uint32_t item_count;
    #####:  367:        ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error;
    #####:  368:        if (amqpvalue_get_composite_item_count(error_instance->composite_value, &item_count) != 0)
        -:  369:        {
    #####:  370:            result = MU_FAILURE;
        -:  371:        }
        -:  372:        else
        -:  373:        {
    #####:  374:            if (item_count <= 0)
        -:  375:            {
    #####:  376:                result = MU_FAILURE;
        -:  377:            }
        -:  378:            else
        -:  379:            {
    #####:  380:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(error_instance->composite_value, 0);
    #####:  381:                if ((item_value == NULL) ||
    #####:  382:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:  383:                {
    #####:  384:                    result = MU_FAILURE;
        -:  385:                }
        -:  386:                else
        -:  387:                {
    #####:  388:                    int get_single_value_result = amqpvalue_get_symbol(item_value, condition_value);
    #####:  389:                    if (get_single_value_result != 0)
        -:  390:                    {
    #####:  391:                        result = MU_FAILURE;
        -:  392:                    }
        -:  393:                    else
        -:  394:                    {
    #####:  395:                        result = 0;
        -:  396:                    }
        -:  397:                }
        -:  398:            }
        -:  399:        }
        -:  400:    }
        -:  401:
    #####:  402:    return result;
        -:  403:}
        -:  404:
    #####:  405:int error_set_condition(ERROR_HANDLE error, const char* condition_value)
        -:  406:{
        -:  407:    int result;
        -:  408:
    #####:  409:    if (error == NULL)
        -:  410:    {
    #####:  411:        result = MU_FAILURE;
        -:  412:    }
        -:  413:    else
        -:  414:    {
    #####:  415:        ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error;
    #####:  416:        AMQP_VALUE condition_amqp_value = amqpvalue_create_symbol(condition_value);
    #####:  417:        if (condition_amqp_value == NULL)
        -:  418:        {
    #####:  419:            result = MU_FAILURE;
        -:  420:        }
        -:  421:        else
        -:  422:        {
    #####:  423:            if (amqpvalue_set_composite_item(error_instance->composite_value, 0, condition_amqp_value) != 0)
        -:  424:            {
    #####:  425:                result = MU_FAILURE;
        -:  426:            }
        -:  427:            else
        -:  428:            {
    #####:  429:                result = 0;
        -:  430:            }
        -:  431:
    #####:  432:            amqpvalue_destroy(condition_amqp_value);
        -:  433:        }
        -:  434:    }
        -:  435:
    #####:  436:    return result;
        -:  437:}
        -:  438:
    #####:  439:int error_get_description(ERROR_HANDLE error, const char** description_value)
        -:  440:{
        -:  441:    int result;
        -:  442:
    #####:  443:    if (error == NULL)
        -:  444:    {
    #####:  445:        result = MU_FAILURE;
        -:  446:    }
        -:  447:    else
        -:  448:    {
        -:  449:        uint32_t item_count;
    #####:  450:        ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error;
    #####:  451:        if (amqpvalue_get_composite_item_count(error_instance->composite_value, &item_count) != 0)
        -:  452:        {
    #####:  453:            result = MU_FAILURE;
        -:  454:        }
        -:  455:        else
        -:  456:        {
    #####:  457:            if (item_count <= 1)
        -:  458:            {
    #####:  459:                result = MU_FAILURE;
        -:  460:            }
        -:  461:            else
        -:  462:            {
    #####:  463:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(error_instance->composite_value, 1);
    #####:  464:                if ((item_value == NULL) ||
    #####:  465:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:  466:                {
    #####:  467:                    result = MU_FAILURE;
        -:  468:                }
        -:  469:                else
        -:  470:                {
    #####:  471:                    int get_single_value_result = amqpvalue_get_string(item_value, description_value);
    #####:  472:                    if (get_single_value_result != 0)
        -:  473:                    {
    #####:  474:                        result = MU_FAILURE;
        -:  475:                    }
        -:  476:                    else
        -:  477:                    {
    #####:  478:                        result = 0;
        -:  479:                    }
        -:  480:                }
        -:  481:            }
        -:  482:        }
        -:  483:    }
        -:  484:
    #####:  485:    return result;
        -:  486:}
        -:  487:
    #####:  488:int error_set_description(ERROR_HANDLE error, const char* description_value)
        -:  489:{
        -:  490:    int result;
        -:  491:
    #####:  492:    if (error == NULL)
        -:  493:    {
    #####:  494:        result = MU_FAILURE;
        -:  495:    }
        -:  496:    else
        -:  497:    {
    #####:  498:        ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error;
    #####:  499:        AMQP_VALUE description_amqp_value = amqpvalue_create_string(description_value);
    #####:  500:        if (description_amqp_value == NULL)
        -:  501:        {
    #####:  502:            result = MU_FAILURE;
        -:  503:        }
        -:  504:        else
        -:  505:        {
    #####:  506:            if (amqpvalue_set_composite_item(error_instance->composite_value, 1, description_amqp_value) != 0)
        -:  507:            {
    #####:  508:                result = MU_FAILURE;
        -:  509:            }
        -:  510:            else
        -:  511:            {
    #####:  512:                result = 0;
        -:  513:            }
        -:  514:
    #####:  515:            amqpvalue_destroy(description_amqp_value);
        -:  516:        }
        -:  517:    }
        -:  518:
    #####:  519:    return result;
        -:  520:}
        -:  521:
    #####:  522:int error_get_info(ERROR_HANDLE error, fields* info_value)
        -:  523:{
        -:  524:    int result;
        -:  525:
    #####:  526:    if (error == NULL)
        -:  527:    {
    #####:  528:        result = MU_FAILURE;
        -:  529:    }
        -:  530:    else
        -:  531:    {
        -:  532:        uint32_t item_count;
    #####:  533:        ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error;
    #####:  534:        if (amqpvalue_get_composite_item_count(error_instance->composite_value, &item_count) != 0)
        -:  535:        {
    #####:  536:            result = MU_FAILURE;
        -:  537:        }
        -:  538:        else
        -:  539:        {
    #####:  540:            if (item_count <= 2)
        -:  541:            {
    #####:  542:                result = MU_FAILURE;
        -:  543:            }
        -:  544:            else
        -:  545:            {
    #####:  546:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(error_instance->composite_value, 2);
    #####:  547:                if ((item_value == NULL) ||
    #####:  548:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:  549:                {
    #####:  550:                    result = MU_FAILURE;
        -:  551:                }
        -:  552:                else
        -:  553:                {
    #####:  554:                    int get_single_value_result = amqpvalue_get_fields(item_value, info_value);
    #####:  555:                    if (get_single_value_result != 0)
        -:  556:                    {
    #####:  557:                        result = MU_FAILURE;
        -:  558:                    }
        -:  559:                    else
        -:  560:                    {
    #####:  561:                        result = 0;
        -:  562:                    }
        -:  563:                }
        -:  564:            }
        -:  565:        }
        -:  566:    }
        -:  567:
    #####:  568:    return result;
        -:  569:}
        -:  570:
    #####:  571:int error_set_info(ERROR_HANDLE error, fields info_value)
        -:  572:{
        -:  573:    int result;
        -:  574:
    #####:  575:    if (error == NULL)
        -:  576:    {
    #####:  577:        result = MU_FAILURE;
        -:  578:    }
        -:  579:    else
        -:  580:    {
    #####:  581:        ERROR_INSTANCE* error_instance = (ERROR_INSTANCE*)error;
    #####:  582:        AMQP_VALUE info_amqp_value = amqpvalue_create_fields(info_value);
    #####:  583:        if (info_amqp_value == NULL)
        -:  584:        {
    #####:  585:            result = MU_FAILURE;
        -:  586:        }
        -:  587:        else
        -:  588:        {
    #####:  589:            if (amqpvalue_set_composite_item(error_instance->composite_value, 2, info_amqp_value) != 0)
        -:  590:            {
    #####:  591:                result = MU_FAILURE;
        -:  592:            }
        -:  593:            else
        -:  594:            {
    #####:  595:                result = 0;
        -:  596:            }
        -:  597:
    #####:  598:            amqpvalue_destroy(info_amqp_value);
        -:  599:        }
        -:  600:    }
        -:  601:
    #####:  602:    return result;
        -:  603:}
        -:  604:
        -:  605:
        -:  606:/* amqp-error */
        -:  607:
    #####:  608:AMQP_VALUE amqpvalue_create_amqp_error(amqp_error value)
        -:  609:{
    #####:  610:    return amqpvalue_create_symbol(value);
        -:  611:}
        -:  612:
        -:  613:/* connection-error */
        -:  614:
    #####:  615:AMQP_VALUE amqpvalue_create_connection_error(connection_error value)
        -:  616:{
    #####:  617:    return amqpvalue_create_symbol(value);
        -:  618:}
        -:  619:
        -:  620:/* session-error */
        -:  621:
    #####:  622:AMQP_VALUE amqpvalue_create_session_error(session_error value)
        -:  623:{
    #####:  624:    return amqpvalue_create_symbol(value);
        -:  625:}
        -:  626:
        -:  627:/* link-error */
        -:  628:
    #####:  629:AMQP_VALUE amqpvalue_create_link_error(link_error value)
        -:  630:{
    #####:  631:    return amqpvalue_create_symbol(value);
        -:  632:}
        -:  633:
        -:  634:/* open */
        -:  635:
        -:  636:typedef struct OPEN_INSTANCE_TAG
        -:  637:{
        -:  638:    AMQP_VALUE composite_value;
        -:  639:} OPEN_INSTANCE;
        -:  640:
    #####:  641:static OPEN_HANDLE open_create_internal(void)
        -:  642:{
    #####:  643:    OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)malloc(sizeof(OPEN_INSTANCE));
    #####:  644:    if (open_instance != NULL)
        -:  645:    {
    #####:  646:        open_instance->composite_value = NULL;
        -:  647:    }
        -:  648:
    #####:  649:    return open_instance;
        -:  650:}
        -:  651:
    #####:  652:OPEN_HANDLE open_create(const char* container_id_value)
        -:  653:{
    #####:  654:    OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)malloc(sizeof(OPEN_INSTANCE));
    #####:  655:    if (open_instance != NULL)
        -:  656:    {
    #####:  657:        open_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(16);
    #####:  658:        if (open_instance->composite_value == NULL)
        -:  659:        {
    #####:  660:            free(open_instance);
    #####:  661:            open_instance = NULL;
        -:  662:        }
        -:  663:        else
        -:  664:        {
        -:  665:            AMQP_VALUE container_id_amqp_value;
    #####:  666:            int result = 0;
        -:  667:
    #####:  668:            container_id_amqp_value = amqpvalue_create_string(container_id_value);
    #####:  669:            if ((result == 0) && (amqpvalue_set_composite_item(open_instance->composite_value, 0, container_id_amqp_value) != 0))
        -:  670:            {
    #####:  671:                result = MU_FAILURE;
        -:  672:            }
        -:  673:
    #####:  674:            amqpvalue_destroy(container_id_amqp_value);
        -:  675:        }
        -:  676:    }
        -:  677:
    #####:  678:    return open_instance;
        -:  679:}
        -:  680:
    #####:  681:OPEN_HANDLE open_clone(OPEN_HANDLE value)
        -:  682:{
    #####:  683:    OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)malloc(sizeof(OPEN_INSTANCE));
    #####:  684:    if (open_instance != NULL)
        -:  685:    {
    #####:  686:        open_instance->composite_value = amqpvalue_clone(((OPEN_INSTANCE*)value)->composite_value);
    #####:  687:        if (open_instance->composite_value == NULL)
        -:  688:        {
    #####:  689:            free(open_instance);
    #####:  690:            open_instance = NULL;
        -:  691:        }
        -:  692:    }
        -:  693:
    #####:  694:    return open_instance;
        -:  695:}
        -:  696:
    #####:  697:void open_destroy(OPEN_HANDLE open)
        -:  698:{
    #####:  699:    if (open != NULL)
        -:  700:    {
    #####:  701:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####:  702:        amqpvalue_destroy(open_instance->composite_value);
    #####:  703:        free(open_instance);
        -:  704:    }
    #####:  705:}
        -:  706:
    #####:  707:AMQP_VALUE amqpvalue_create_open(OPEN_HANDLE open)
        -:  708:{
        -:  709:    AMQP_VALUE result;
        -:  710:
    #####:  711:    if (open == NULL)
        -:  712:    {
    #####:  713:        result = NULL;
        -:  714:    }
        -:  715:    else
        -:  716:    {
    #####:  717:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####:  718:        result = amqpvalue_clone(open_instance->composite_value);
        -:  719:    }
        -:  720:
    #####:  721:    return result;
        -:  722:}
        -:  723:
    #####:  724:bool is_open_type_by_descriptor(AMQP_VALUE descriptor)
        -:  725:{
        -:  726:    bool result;
        -:  727:
        -:  728:    uint64_t descriptor_ulong;
    #####:  729:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:  730:        (descriptor_ulong == 16))
        -:  731:    {
    #####:  732:        result = true;
        -:  733:    }
        -:  734:    else
        -:  735:    {
    #####:  736:        result = false;
        -:  737:    }
        -:  738:
    #####:  739:    return result;
        -:  740:}
        -:  741:
        -:  742:
    #####:  743:int amqpvalue_get_open(AMQP_VALUE value, OPEN_HANDLE* open_handle)
        -:  744:{
        -:  745:    int result;
    #####:  746:    OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open_create_internal();
    #####:  747:    *open_handle = open_instance;
    #####:  748:    if (*open_handle == NULL)
        -:  749:    {
    #####:  750:        result = MU_FAILURE;
        -:  751:    }
        -:  752:    else
        -:  753:    {
    #####:  754:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:  755:        if (list_value == NULL)
        -:  756:        {
    #####:  757:            open_destroy(*open_handle);
    #####:  758:            result = MU_FAILURE;
        -:  759:        }
        -:  760:        else
        -:  761:        {
        -:  762:            uint32_t list_item_count;
    #####:  763:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:  764:            {
    #####:  765:                result = MU_FAILURE;
        -:  766:            }
        -:  767:            else
        -:  768:            {
        -:  769:                do
        -:  770:                {
        -:  771:                    AMQP_VALUE item_value;
        -:  772:                    /* container-id */
    #####:  773:                    if (list_item_count > 0)
        -:  774:                    {
    #####:  775:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:  776:                        if (item_value == NULL)
        -:  777:                        {
        -:  778:                            {
    #####:  779:                                open_destroy(*open_handle);
    #####:  780:                                result = MU_FAILURE;
    #####:  781:                                break;
        -:  782:                            }
        -:  783:                        }
        -:  784:                        else
        -:  785:                        {
    #####:  786:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  787:                            {
    #####:  788:                                amqpvalue_destroy(item_value);
    #####:  789:                                open_destroy(*open_handle);
    #####:  790:                                result = MU_FAILURE;
    #####:  791:                                break;
        -:  792:                            }
        -:  793:                            else
        -:  794:                            {
        -:  795:                                const char* container_id;
    #####:  796:                                if (amqpvalue_get_string(item_value, &container_id) != 0)
        -:  797:                                {
    #####:  798:                                    amqpvalue_destroy(item_value);
    #####:  799:                                    open_destroy(*open_handle);
    #####:  800:                                    result = MU_FAILURE;
    #####:  801:                                    break;
        -:  802:                                }
        -:  803:                            }
        -:  804:
    #####:  805:                            amqpvalue_destroy(item_value);
        -:  806:                        }
        -:  807:                    }
        -:  808:                    else
        -:  809:                    {
    #####:  810:                        result = MU_FAILURE;
        -:  811:                    }
        -:  812:                    /* hostname */
    #####:  813:                    if (list_item_count > 1)
        -:  814:                    {
    #####:  815:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:  816:                        if (item_value == NULL)
        -:  817:                        {
        -:  818:                            /* do nothing */
        -:  819:                        }
        -:  820:                        else
        -:  821:                        {
    #####:  822:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  823:                            {
        -:  824:                                /* no error, field is not mandatory */
        -:  825:                            }
        -:  826:                            else
        -:  827:                            {
        -:  828:                                const char* hostname;
    #####:  829:                                if (amqpvalue_get_string(item_value, &hostname) != 0)
        -:  830:                                {
    #####:  831:                                    amqpvalue_destroy(item_value);
    #####:  832:                                    open_destroy(*open_handle);
    #####:  833:                                    result = MU_FAILURE;
    #####:  834:                                    break;
        -:  835:                                }
        -:  836:                            }
        -:  837:
    #####:  838:                            amqpvalue_destroy(item_value);
        -:  839:                        }
        -:  840:                    }
        -:  841:                    /* max-frame-size */
    #####:  842:                    if (list_item_count > 2)
        -:  843:                    {
    #####:  844:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####:  845:                        if (item_value == NULL)
        -:  846:                        {
        -:  847:                            /* do nothing */
        -:  848:                        }
        -:  849:                        else
        -:  850:                        {
    #####:  851:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  852:                            {
        -:  853:                                /* no error, field is not mandatory */
        -:  854:                            }
        -:  855:                            else
        -:  856:                            {
        -:  857:                                uint32_t max_frame_size;
    #####:  858:                                if (amqpvalue_get_uint(item_value, &max_frame_size) != 0)
        -:  859:                                {
    #####:  860:                                    amqpvalue_destroy(item_value);
    #####:  861:                                    open_destroy(*open_handle);
    #####:  862:                                    result = MU_FAILURE;
    #####:  863:                                    break;
        -:  864:                                }
        -:  865:                            }
        -:  866:
    #####:  867:                            amqpvalue_destroy(item_value);
        -:  868:                        }
        -:  869:                    }
        -:  870:                    /* channel-max */
    #####:  871:                    if (list_item_count > 3)
        -:  872:                    {
    #####:  873:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####:  874:                        if (item_value == NULL)
        -:  875:                        {
        -:  876:                            /* do nothing */
        -:  877:                        }
        -:  878:                        else
        -:  879:                        {
    #####:  880:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  881:                            {
        -:  882:                                /* no error, field is not mandatory */
        -:  883:                            }
        -:  884:                            else
        -:  885:                            {
        -:  886:                                uint16_t channel_max;
    #####:  887:                                if (amqpvalue_get_ushort(item_value, &channel_max) != 0)
        -:  888:                                {
    #####:  889:                                    amqpvalue_destroy(item_value);
    #####:  890:                                    open_destroy(*open_handle);
    #####:  891:                                    result = MU_FAILURE;
    #####:  892:                                    break;
        -:  893:                                }
        -:  894:                            }
        -:  895:
    #####:  896:                            amqpvalue_destroy(item_value);
        -:  897:                        }
        -:  898:                    }
        -:  899:                    /* idle-time-out */
    #####:  900:                    if (list_item_count > 4)
        -:  901:                    {
    #####:  902:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####:  903:                        if (item_value == NULL)
        -:  904:                        {
        -:  905:                            /* do nothing */
        -:  906:                        }
        -:  907:                        else
        -:  908:                        {
    #####:  909:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  910:                            {
        -:  911:                                /* no error, field is not mandatory */
        -:  912:                            }
        -:  913:                            else
        -:  914:                            {
        -:  915:                                milliseconds idle_time_out;
    #####:  916:                                if (amqpvalue_get_milliseconds(item_value, &idle_time_out) != 0)
        -:  917:                                {
    #####:  918:                                    amqpvalue_destroy(item_value);
    #####:  919:                                    open_destroy(*open_handle);
    #####:  920:                                    result = MU_FAILURE;
    #####:  921:                                    break;
        -:  922:                                }
        -:  923:                            }
        -:  924:
    #####:  925:                            amqpvalue_destroy(item_value);
        -:  926:                        }
        -:  927:                    }
        -:  928:                    /* outgoing-locales */
    #####:  929:                    if (list_item_count > 5)
        -:  930:                    {
    #####:  931:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####:  932:                        if (item_value == NULL)
        -:  933:                        {
        -:  934:                            /* do nothing */
        -:  935:                        }
        -:  936:                        else
        -:  937:                        {
    #####:  938:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  939:                            {
        -:  940:                                /* no error, field is not mandatory */
        -:  941:                            }
        -:  942:                            else
        -:  943:                            {
    #####:  944:                                ietf_language_tag outgoing_locales = NULL;
        -:  945:                                AMQP_VALUE outgoing_locales_array;
    #####:  946:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &outgoing_locales_array) != 0)) &&
    #####:  947:                                    (amqpvalue_get_ietf_language_tag(item_value, &outgoing_locales) != 0))
        -:  948:                                {
    #####:  949:                                    amqpvalue_destroy(item_value);
    #####:  950:                                    open_destroy(*open_handle);
    #####:  951:                                    result = MU_FAILURE;
    #####:  952:                                    break;
        -:  953:                                }
        -:  954:                            }
        -:  955:
    #####:  956:                            amqpvalue_destroy(item_value);
        -:  957:                        }
        -:  958:                    }
        -:  959:                    /* incoming-locales */
    #####:  960:                    if (list_item_count > 6)
        -:  961:                    {
    #####:  962:                        item_value = amqpvalue_get_list_item(list_value, 6);
    #####:  963:                        if (item_value == NULL)
        -:  964:                        {
        -:  965:                            /* do nothing */
        -:  966:                        }
        -:  967:                        else
        -:  968:                        {
    #####:  969:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:  970:                            {
        -:  971:                                /* no error, field is not mandatory */
        -:  972:                            }
        -:  973:                            else
        -:  974:                            {
    #####:  975:                                ietf_language_tag incoming_locales = NULL;
        -:  976:                                AMQP_VALUE incoming_locales_array;
    #####:  977:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &incoming_locales_array) != 0)) &&
    #####:  978:                                    (amqpvalue_get_ietf_language_tag(item_value, &incoming_locales) != 0))
        -:  979:                                {
    #####:  980:                                    amqpvalue_destroy(item_value);
    #####:  981:                                    open_destroy(*open_handle);
    #####:  982:                                    result = MU_FAILURE;
    #####:  983:                                    break;
        -:  984:                                }
        -:  985:                            }
        -:  986:
    #####:  987:                            amqpvalue_destroy(item_value);
        -:  988:                        }
        -:  989:                    }
        -:  990:                    /* offered-capabilities */
    #####:  991:                    if (list_item_count > 7)
        -:  992:                    {
    #####:  993:                        item_value = amqpvalue_get_list_item(list_value, 7);
    #####:  994:                        if (item_value == NULL)
        -:  995:                        {
        -:  996:                            /* do nothing */
        -:  997:                        }
        -:  998:                        else
        -:  999:                        {
    #####: 1000:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 1001:                            {
        -: 1002:                                /* no error, field is not mandatory */
        -: 1003:                            }
        -: 1004:                            else
        -: 1005:                            {
    #####: 1006:                                const char* offered_capabilities = NULL;
        -: 1007:                                AMQP_VALUE offered_capabilities_array;
    #####: 1008:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &offered_capabilities_array) != 0)) &&
    #####: 1009:                                    (amqpvalue_get_symbol(item_value, &offered_capabilities) != 0))
        -: 1010:                                {
    #####: 1011:                                    amqpvalue_destroy(item_value);
    #####: 1012:                                    open_destroy(*open_handle);
    #####: 1013:                                    result = MU_FAILURE;
    #####: 1014:                                    break;
        -: 1015:                                }
        -: 1016:                            }
        -: 1017:
    #####: 1018:                            amqpvalue_destroy(item_value);
        -: 1019:                        }
        -: 1020:                    }
        -: 1021:                    /* desired-capabilities */
    #####: 1022:                    if (list_item_count > 8)
        -: 1023:                    {
    #####: 1024:                        item_value = amqpvalue_get_list_item(list_value, 8);
    #####: 1025:                        if (item_value == NULL)
        -: 1026:                        {
        -: 1027:                            /* do nothing */
        -: 1028:                        }
        -: 1029:                        else
        -: 1030:                        {
    #####: 1031:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 1032:                            {
        -: 1033:                                /* no error, field is not mandatory */
        -: 1034:                            }
        -: 1035:                            else
        -: 1036:                            {
    #####: 1037:                                const char* desired_capabilities = NULL;
        -: 1038:                                AMQP_VALUE desired_capabilities_array;
    #####: 1039:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &desired_capabilities_array) != 0)) &&
    #####: 1040:                                    (amqpvalue_get_symbol(item_value, &desired_capabilities) != 0))
        -: 1041:                                {
    #####: 1042:                                    amqpvalue_destroy(item_value);
    #####: 1043:                                    open_destroy(*open_handle);
    #####: 1044:                                    result = MU_FAILURE;
    #####: 1045:                                    break;
        -: 1046:                                }
        -: 1047:                            }
        -: 1048:
    #####: 1049:                            amqpvalue_destroy(item_value);
        -: 1050:                        }
        -: 1051:                    }
        -: 1052:                    /* properties */
    #####: 1053:                    if (list_item_count > 9)
        -: 1054:                    {
    #####: 1055:                        item_value = amqpvalue_get_list_item(list_value, 9);
    #####: 1056:                        if (item_value == NULL)
        -: 1057:                        {
        -: 1058:                            /* do nothing */
        -: 1059:                        }
        -: 1060:                        else
        -: 1061:                        {
    #####: 1062:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 1063:                            {
        -: 1064:                                /* no error, field is not mandatory */
        -: 1065:                            }
        -: 1066:                            else
        -: 1067:                            {
        -: 1068:                                fields properties;
    #####: 1069:                                if (amqpvalue_get_fields(item_value, &properties) != 0)
        -: 1070:                                {
    #####: 1071:                                    amqpvalue_destroy(item_value);
    #####: 1072:                                    open_destroy(*open_handle);
    #####: 1073:                                    result = MU_FAILURE;
    #####: 1074:                                    break;
        -: 1075:                                }
        -: 1076:                            }
        -: 1077:
    #####: 1078:                            amqpvalue_destroy(item_value);
        -: 1079:                        }
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    open_instance->composite_value = amqpvalue_clone(value);
        -: 1083:
    #####: 1084:                    result = 0;
        -: 1085:                } while((void)0,0);
        -: 1086:            }
        -: 1087:        }
        -: 1088:    }
        -: 1089:
    #####: 1090:    return result;
        -: 1091:}
        -: 1092:
    #####: 1093:int open_get_container_id(OPEN_HANDLE open, const char** container_id_value)
        -: 1094:{
        -: 1095:    int result;
        -: 1096:
    #####: 1097:    if (open == NULL)
        -: 1098:    {
    #####: 1099:        result = MU_FAILURE;
        -: 1100:    }
        -: 1101:    else
        -: 1102:    {
        -: 1103:        uint32_t item_count;
    #####: 1104:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1105:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1106:        {
    #####: 1107:            result = MU_FAILURE;
        -: 1108:        }
        -: 1109:        else
        -: 1110:        {
    #####: 1111:            if (item_count <= 0)
        -: 1112:            {
    #####: 1113:                result = MU_FAILURE;
        -: 1114:            }
        -: 1115:            else
        -: 1116:            {
    #####: 1117:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 0);
    #####: 1118:                if ((item_value == NULL) ||
    #####: 1119:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1120:                {
    #####: 1121:                    result = MU_FAILURE;
        -: 1122:                }
        -: 1123:                else
        -: 1124:                {
    #####: 1125:                    int get_single_value_result = amqpvalue_get_string(item_value, container_id_value);
    #####: 1126:                    if (get_single_value_result != 0)
        -: 1127:                    {
    #####: 1128:                        result = MU_FAILURE;
        -: 1129:                    }
        -: 1130:                    else
        -: 1131:                    {
    #####: 1132:                        result = 0;
        -: 1133:                    }
        -: 1134:                }
        -: 1135:            }
        -: 1136:        }
        -: 1137:    }
        -: 1138:
    #####: 1139:    return result;
        -: 1140:}
        -: 1141:
    #####: 1142:int open_set_container_id(OPEN_HANDLE open, const char* container_id_value)
        -: 1143:{
        -: 1144:    int result;
        -: 1145:
    #####: 1146:    if (open == NULL)
        -: 1147:    {
    #####: 1148:        result = MU_FAILURE;
        -: 1149:    }
        -: 1150:    else
        -: 1151:    {
    #####: 1152:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1153:        AMQP_VALUE container_id_amqp_value = amqpvalue_create_string(container_id_value);
    #####: 1154:        if (container_id_amqp_value == NULL)
        -: 1155:        {
    #####: 1156:            result = MU_FAILURE;
        -: 1157:        }
        -: 1158:        else
        -: 1159:        {
    #####: 1160:            if (amqpvalue_set_composite_item(open_instance->composite_value, 0, container_id_amqp_value) != 0)
        -: 1161:            {
    #####: 1162:                result = MU_FAILURE;
        -: 1163:            }
        -: 1164:            else
        -: 1165:            {
    #####: 1166:                result = 0;
        -: 1167:            }
        -: 1168:
    #####: 1169:            amqpvalue_destroy(container_id_amqp_value);
        -: 1170:        }
        -: 1171:    }
        -: 1172:
    #####: 1173:    return result;
        -: 1174:}
        -: 1175:
    #####: 1176:int open_get_hostname(OPEN_HANDLE open, const char** hostname_value)
        -: 1177:{
        -: 1178:    int result;
        -: 1179:
    #####: 1180:    if (open == NULL)
        -: 1181:    {
    #####: 1182:        result = MU_FAILURE;
        -: 1183:    }
        -: 1184:    else
        -: 1185:    {
        -: 1186:        uint32_t item_count;
    #####: 1187:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1188:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1189:        {
    #####: 1190:            result = MU_FAILURE;
        -: 1191:        }
        -: 1192:        else
        -: 1193:        {
    #####: 1194:            if (item_count <= 1)
        -: 1195:            {
    #####: 1196:                result = MU_FAILURE;
        -: 1197:            }
        -: 1198:            else
        -: 1199:            {
    #####: 1200:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 1);
    #####: 1201:                if ((item_value == NULL) ||
    #####: 1202:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1203:                {
    #####: 1204:                    result = MU_FAILURE;
        -: 1205:                }
        -: 1206:                else
        -: 1207:                {
    #####: 1208:                    int get_single_value_result = amqpvalue_get_string(item_value, hostname_value);
    #####: 1209:                    if (get_single_value_result != 0)
        -: 1210:                    {
    #####: 1211:                        result = MU_FAILURE;
        -: 1212:                    }
        -: 1213:                    else
        -: 1214:                    {
    #####: 1215:                        result = 0;
        -: 1216:                    }
        -: 1217:                }
        -: 1218:            }
        -: 1219:        }
        -: 1220:    }
        -: 1221:
    #####: 1222:    return result;
        -: 1223:}
        -: 1224:
    #####: 1225:int open_set_hostname(OPEN_HANDLE open, const char* hostname_value)
        -: 1226:{
        -: 1227:    int result;
        -: 1228:
    #####: 1229:    if (open == NULL)
        -: 1230:    {
    #####: 1231:        result = MU_FAILURE;
        -: 1232:    }
        -: 1233:    else
        -: 1234:    {
    #####: 1235:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1236:        AMQP_VALUE hostname_amqp_value = amqpvalue_create_string(hostname_value);
    #####: 1237:        if (hostname_amqp_value == NULL)
        -: 1238:        {
    #####: 1239:            result = MU_FAILURE;
        -: 1240:        }
        -: 1241:        else
        -: 1242:        {
    #####: 1243:            if (amqpvalue_set_composite_item(open_instance->composite_value, 1, hostname_amqp_value) != 0)
        -: 1244:            {
    #####: 1245:                result = MU_FAILURE;
        -: 1246:            }
        -: 1247:            else
        -: 1248:            {
    #####: 1249:                result = 0;
        -: 1250:            }
        -: 1251:
    #####: 1252:            amqpvalue_destroy(hostname_amqp_value);
        -: 1253:        }
        -: 1254:    }
        -: 1255:
    #####: 1256:    return result;
        -: 1257:}
        -: 1258:
    #####: 1259:int open_get_max_frame_size(OPEN_HANDLE open, uint32_t* max_frame_size_value)
        -: 1260:{
        -: 1261:    int result;
        -: 1262:
    #####: 1263:    if (open == NULL)
        -: 1264:    {
    #####: 1265:        result = MU_FAILURE;
        -: 1266:    }
        -: 1267:    else
        -: 1268:    {
        -: 1269:        uint32_t item_count;
    #####: 1270:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1271:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1272:        {
    #####: 1273:            result = MU_FAILURE;
        -: 1274:        }
        -: 1275:        else
        -: 1276:        {
    #####: 1277:            if (item_count <= 2)
        -: 1278:            {
    #####: 1279:                *max_frame_size_value = 4294967295u;
    #####: 1280:                result = 0;
        -: 1281:            }
        -: 1282:            else
        -: 1283:            {
    #####: 1284:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 2);
    #####: 1285:                if ((item_value == NULL) ||
    #####: 1286:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1287:                {
    #####: 1288:                    *max_frame_size_value = 4294967295u;
    #####: 1289:                    result = 0;
        -: 1290:                }
        -: 1291:                else
        -: 1292:                {
    #####: 1293:                    int get_single_value_result = amqpvalue_get_uint(item_value, max_frame_size_value);
    #####: 1294:                    if (get_single_value_result != 0)
        -: 1295:                    {
    #####: 1296:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 1297:                        {
    #####: 1298:                            result = MU_FAILURE;
        -: 1299:                        }
        -: 1300:                        else
        -: 1301:                        {
    #####: 1302:                            *max_frame_size_value = 4294967295u;
    #####: 1303:                            result = 0;
        -: 1304:                        }
        -: 1305:                    }
        -: 1306:                    else
        -: 1307:                    {
    #####: 1308:                        result = 0;
        -: 1309:                    }
        -: 1310:                }
        -: 1311:            }
        -: 1312:        }
        -: 1313:    }
        -: 1314:
    #####: 1315:    return result;
        -: 1316:}
        -: 1317:
    #####: 1318:int open_set_max_frame_size(OPEN_HANDLE open, uint32_t max_frame_size_value)
        -: 1319:{
        -: 1320:    int result;
        -: 1321:
    #####: 1322:    if (open == NULL)
        -: 1323:    {
    #####: 1324:        result = MU_FAILURE;
        -: 1325:    }
        -: 1326:    else
        -: 1327:    {
    #####: 1328:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1329:        AMQP_VALUE max_frame_size_amqp_value = amqpvalue_create_uint(max_frame_size_value);
    #####: 1330:        if (max_frame_size_amqp_value == NULL)
        -: 1331:        {
    #####: 1332:            result = MU_FAILURE;
        -: 1333:        }
        -: 1334:        else
        -: 1335:        {
    #####: 1336:            if (amqpvalue_set_composite_item(open_instance->composite_value, 2, max_frame_size_amqp_value) != 0)
        -: 1337:            {
    #####: 1338:                result = MU_FAILURE;
        -: 1339:            }
        -: 1340:            else
        -: 1341:            {
    #####: 1342:                result = 0;
        -: 1343:            }
        -: 1344:
    #####: 1345:            amqpvalue_destroy(max_frame_size_amqp_value);
        -: 1346:        }
        -: 1347:    }
        -: 1348:
    #####: 1349:    return result;
        -: 1350:}
        -: 1351:
    #####: 1352:int open_get_channel_max(OPEN_HANDLE open, uint16_t* channel_max_value)
        -: 1353:{
        -: 1354:    int result;
        -: 1355:
    #####: 1356:    if (open == NULL)
        -: 1357:    {
    #####: 1358:        result = MU_FAILURE;
        -: 1359:    }
        -: 1360:    else
        -: 1361:    {
        -: 1362:        uint32_t item_count;
    #####: 1363:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1364:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1365:        {
    #####: 1366:            result = MU_FAILURE;
        -: 1367:        }
        -: 1368:        else
        -: 1369:        {
    #####: 1370:            if (item_count <= 3)
        -: 1371:            {
    #####: 1372:                *channel_max_value = 65535;
    #####: 1373:                result = 0;
        -: 1374:            }
        -: 1375:            else
        -: 1376:            {
    #####: 1377:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 3);
    #####: 1378:                if ((item_value == NULL) ||
    #####: 1379:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1380:                {
    #####: 1381:                    *channel_max_value = 65535;
    #####: 1382:                    result = 0;
        -: 1383:                }
        -: 1384:                else
        -: 1385:                {
    #####: 1386:                    int get_single_value_result = amqpvalue_get_ushort(item_value, channel_max_value);
    #####: 1387:                    if (get_single_value_result != 0)
        -: 1388:                    {
    #####: 1389:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 1390:                        {
    #####: 1391:                            result = MU_FAILURE;
        -: 1392:                        }
        -: 1393:                        else
        -: 1394:                        {
    #####: 1395:                            *channel_max_value = 65535;
    #####: 1396:                            result = 0;
        -: 1397:                        }
        -: 1398:                    }
        -: 1399:                    else
        -: 1400:                    {
    #####: 1401:                        result = 0;
        -: 1402:                    }
        -: 1403:                }
        -: 1404:            }
        -: 1405:        }
        -: 1406:    }
        -: 1407:
    #####: 1408:    return result;
        -: 1409:}
        -: 1410:
    #####: 1411:int open_set_channel_max(OPEN_HANDLE open, uint16_t channel_max_value)
        -: 1412:{
        -: 1413:    int result;
        -: 1414:
    #####: 1415:    if (open == NULL)
        -: 1416:    {
    #####: 1417:        result = MU_FAILURE;
        -: 1418:    }
        -: 1419:    else
        -: 1420:    {
    #####: 1421:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1422:        AMQP_VALUE channel_max_amqp_value = amqpvalue_create_ushort(channel_max_value);
    #####: 1423:        if (channel_max_amqp_value == NULL)
        -: 1424:        {
    #####: 1425:            result = MU_FAILURE;
        -: 1426:        }
        -: 1427:        else
        -: 1428:        {
    #####: 1429:            if (amqpvalue_set_composite_item(open_instance->composite_value, 3, channel_max_amqp_value) != 0)
        -: 1430:            {
    #####: 1431:                result = MU_FAILURE;
        -: 1432:            }
        -: 1433:            else
        -: 1434:            {
    #####: 1435:                result = 0;
        -: 1436:            }
        -: 1437:
    #####: 1438:            amqpvalue_destroy(channel_max_amqp_value);
        -: 1439:        }
        -: 1440:    }
        -: 1441:
    #####: 1442:    return result;
        -: 1443:}
        -: 1444:
    #####: 1445:int open_get_idle_time_out(OPEN_HANDLE open, milliseconds* idle_time_out_value)
        -: 1446:{
        -: 1447:    int result;
        -: 1448:
    #####: 1449:    if (open == NULL)
        -: 1450:    {
    #####: 1451:        result = MU_FAILURE;
        -: 1452:    }
        -: 1453:    else
        -: 1454:    {
        -: 1455:        uint32_t item_count;
    #####: 1456:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1457:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1458:        {
    #####: 1459:            result = MU_FAILURE;
        -: 1460:        }
        -: 1461:        else
        -: 1462:        {
    #####: 1463:            if (item_count <= 4)
        -: 1464:            {
    #####: 1465:                result = MU_FAILURE;
        -: 1466:            }
        -: 1467:            else
        -: 1468:            {
    #####: 1469:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 4);
    #####: 1470:                if ((item_value == NULL) ||
    #####: 1471:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1472:                {
    #####: 1473:                    result = MU_FAILURE;
        -: 1474:                }
        -: 1475:                else
        -: 1476:                {
    #####: 1477:                    int get_single_value_result = amqpvalue_get_milliseconds(item_value, idle_time_out_value);
    #####: 1478:                    if (get_single_value_result != 0)
        -: 1479:                    {
    #####: 1480:                        result = MU_FAILURE;
        -: 1481:                    }
        -: 1482:                    else
        -: 1483:                    {
    #####: 1484:                        result = 0;
        -: 1485:                    }
        -: 1486:                }
        -: 1487:            }
        -: 1488:        }
        -: 1489:    }
        -: 1490:
    #####: 1491:    return result;
        -: 1492:}
        -: 1493:
    #####: 1494:int open_set_idle_time_out(OPEN_HANDLE open, milliseconds idle_time_out_value)
        -: 1495:{
        -: 1496:    int result;
        -: 1497:
    #####: 1498:    if (open == NULL)
        -: 1499:    {
    #####: 1500:        result = MU_FAILURE;
        -: 1501:    }
        -: 1502:    else
        -: 1503:    {
    #####: 1504:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1505:        AMQP_VALUE idle_time_out_amqp_value = amqpvalue_create_milliseconds(idle_time_out_value);
    #####: 1506:        if (idle_time_out_amqp_value == NULL)
        -: 1507:        {
    #####: 1508:            result = MU_FAILURE;
        -: 1509:        }
        -: 1510:        else
        -: 1511:        {
    #####: 1512:            if (amqpvalue_set_composite_item(open_instance->composite_value, 4, idle_time_out_amqp_value) != 0)
        -: 1513:            {
    #####: 1514:                result = MU_FAILURE;
        -: 1515:            }
        -: 1516:            else
        -: 1517:            {
    #####: 1518:                result = 0;
        -: 1519:            }
        -: 1520:
    #####: 1521:            amqpvalue_destroy(idle_time_out_amqp_value);
        -: 1522:        }
        -: 1523:    }
        -: 1524:
    #####: 1525:    return result;
        -: 1526:}
        -: 1527:
    #####: 1528:int open_get_outgoing_locales(OPEN_HANDLE open, AMQP_VALUE* outgoing_locales_value)
        -: 1529:{
        -: 1530:    int result;
        -: 1531:
    #####: 1532:    if (open == NULL)
        -: 1533:    {
    #####: 1534:        result = MU_FAILURE;
        -: 1535:    }
        -: 1536:    else
        -: 1537:    {
        -: 1538:        uint32_t item_count;
    #####: 1539:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1540:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1541:        {
    #####: 1542:            result = MU_FAILURE;
        -: 1543:        }
        -: 1544:        else
        -: 1545:        {
    #####: 1546:            if (item_count <= 5)
        -: 1547:            {
    #####: 1548:                result = MU_FAILURE;
        -: 1549:            }
        -: 1550:            else
        -: 1551:            {
    #####: 1552:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 5);
    #####: 1553:                if ((item_value == NULL) ||
    #####: 1554:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1555:                {
    #####: 1556:                    result = MU_FAILURE;
        -: 1557:                }
        -: 1558:                else
        -: 1559:                {
        -: 1560:                    ietf_language_tag outgoing_locales_single_value;
        -: 1561:                    int get_single_value_result;
    #####: 1562:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 1563:                    {
    #####: 1564:                        get_single_value_result = amqpvalue_get_ietf_language_tag(item_value, &outgoing_locales_single_value);
        -: 1565:                    }
        -: 1566:                    else
        -: 1567:                    {
    #####: 1568:                        (void)memset((void*)&outgoing_locales_single_value, 0, sizeof(outgoing_locales_single_value));
    #####: 1569:                        get_single_value_result = 1;
        -: 1570:                    }
        -: 1571:
    #####: 1572:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, outgoing_locales_value) != 0)) &&
        -: 1573:                        (get_single_value_result != 0))
        -: 1574:                    {
    #####: 1575:                        result = MU_FAILURE;
        -: 1576:                    }
        -: 1577:                    else
        -: 1578:                    {
    #####: 1579:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 1580:                        {
    #####: 1581:                            *outgoing_locales_value = amqpvalue_create_array();
    #####: 1582:                            if (*outgoing_locales_value == NULL)
        -: 1583:                            {
    #####: 1584:                                result = MU_FAILURE;
        -: 1585:                            }
        -: 1586:                            else
        -: 1587:                            {
    #####: 1588:                                AMQP_VALUE single_amqp_value = amqpvalue_create_ietf_language_tag(outgoing_locales_single_value);
    #####: 1589:                                if (single_amqp_value == NULL)
        -: 1590:                                {
    #####: 1591:                                    amqpvalue_destroy(*outgoing_locales_value);
    #####: 1592:                                    result = MU_FAILURE;
        -: 1593:                                }
        -: 1594:                                else
        -: 1595:                                {
    #####: 1596:                                    if (amqpvalue_add_array_item(*outgoing_locales_value, single_amqp_value) != 0)
        -: 1597:                                    {
    #####: 1598:                                        amqpvalue_destroy(*outgoing_locales_value);
    #####: 1599:                                        amqpvalue_destroy(single_amqp_value);
    #####: 1600:                                        result = MU_FAILURE;
        -: 1601:                                    }
        -: 1602:                                    else
        -: 1603:                                    {
    #####: 1604:                                        if (amqpvalue_set_composite_item(open_instance->composite_value, 5, *outgoing_locales_value) != 0)
        -: 1605:                                        {
    #####: 1606:                                            amqpvalue_destroy(*outgoing_locales_value);
    #####: 1607:                                            result = MU_FAILURE;
        -: 1608:                                        }
        -: 1609:                                        else
        -: 1610:                                        {
    #####: 1611:                                            result = 0;
        -: 1612:                                        }
        -: 1613:                                    }
        -: 1614:
    #####: 1615:                                    amqpvalue_destroy(single_amqp_value);
        -: 1616:                                }
    #####: 1617:                                amqpvalue_destroy(*outgoing_locales_value);
        -: 1618:                            }
        -: 1619:                        }
        -: 1620:                        else
        -: 1621:                        {
    #####: 1622:                            result = 0;
        -: 1623:                        }
        -: 1624:                    }
        -: 1625:                }
        -: 1626:            }
        -: 1627:        }
        -: 1628:    }
        -: 1629:
    #####: 1630:    return result;
        -: 1631:}
        -: 1632:
    #####: 1633:int open_set_outgoing_locales(OPEN_HANDLE open, AMQP_VALUE outgoing_locales_value)
        -: 1634:{
        -: 1635:    int result;
        -: 1636:
    #####: 1637:    if (open == NULL)
        -: 1638:    {
    #####: 1639:        result = MU_FAILURE;
        -: 1640:    }
        -: 1641:    else
        -: 1642:    {
    #####: 1643:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
        -: 1644:        AMQP_VALUE outgoing_locales_amqp_value;
    #####: 1645:        if (outgoing_locales_value == NULL)
        -: 1646:        {
    #####: 1647:            outgoing_locales_amqp_value = NULL;
        -: 1648:        }
        -: 1649:        else
        -: 1650:        {
    #####: 1651:            outgoing_locales_amqp_value = amqpvalue_clone(outgoing_locales_value);
        -: 1652:        }
    #####: 1653:        if (outgoing_locales_amqp_value == NULL)
        -: 1654:        {
    #####: 1655:            result = MU_FAILURE;
        -: 1656:        }
        -: 1657:        else
        -: 1658:        {
    #####: 1659:            if (amqpvalue_set_composite_item(open_instance->composite_value, 5, outgoing_locales_amqp_value) != 0)
        -: 1660:            {
    #####: 1661:                result = MU_FAILURE;
        -: 1662:            }
        -: 1663:            else
        -: 1664:            {
    #####: 1665:                result = 0;
        -: 1666:            }
        -: 1667:
    #####: 1668:            amqpvalue_destroy(outgoing_locales_amqp_value);
        -: 1669:        }
        -: 1670:    }
        -: 1671:
    #####: 1672:    return result;
        -: 1673:}
        -: 1674:
    #####: 1675:int open_get_incoming_locales(OPEN_HANDLE open, AMQP_VALUE* incoming_locales_value)
        -: 1676:{
        -: 1677:    int result;
        -: 1678:
    #####: 1679:    if (open == NULL)
        -: 1680:    {
    #####: 1681:        result = MU_FAILURE;
        -: 1682:    }
        -: 1683:    else
        -: 1684:    {
        -: 1685:        uint32_t item_count;
    #####: 1686:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1687:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1688:        {
    #####: 1689:            result = MU_FAILURE;
        -: 1690:        }
        -: 1691:        else
        -: 1692:        {
    #####: 1693:            if (item_count <= 6)
        -: 1694:            {
    #####: 1695:                result = MU_FAILURE;
        -: 1696:            }
        -: 1697:            else
        -: 1698:            {
    #####: 1699:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 6);
    #####: 1700:                if ((item_value == NULL) ||
    #####: 1701:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1702:                {
    #####: 1703:                    result = MU_FAILURE;
        -: 1704:                }
        -: 1705:                else
        -: 1706:                {
        -: 1707:                    ietf_language_tag incoming_locales_single_value;
        -: 1708:                    int get_single_value_result;
    #####: 1709:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 1710:                    {
    #####: 1711:                        get_single_value_result = amqpvalue_get_ietf_language_tag(item_value, &incoming_locales_single_value);
        -: 1712:                    }
        -: 1713:                    else
        -: 1714:                    {
    #####: 1715:                        (void)memset((void*)&incoming_locales_single_value, 0, sizeof(incoming_locales_single_value));
    #####: 1716:                        get_single_value_result = 1;
        -: 1717:                    }
        -: 1718:
    #####: 1719:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, incoming_locales_value) != 0)) &&
        -: 1720:                        (get_single_value_result != 0))
        -: 1721:                    {
    #####: 1722:                        result = MU_FAILURE;
        -: 1723:                    }
        -: 1724:                    else
        -: 1725:                    {
    #####: 1726:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 1727:                        {
    #####: 1728:                            *incoming_locales_value = amqpvalue_create_array();
    #####: 1729:                            if (*incoming_locales_value == NULL)
        -: 1730:                            {
    #####: 1731:                                result = MU_FAILURE;
        -: 1732:                            }
        -: 1733:                            else
        -: 1734:                            {
    #####: 1735:                                AMQP_VALUE single_amqp_value = amqpvalue_create_ietf_language_tag(incoming_locales_single_value);
    #####: 1736:                                if (single_amqp_value == NULL)
        -: 1737:                                {
    #####: 1738:                                    amqpvalue_destroy(*incoming_locales_value);
    #####: 1739:                                    result = MU_FAILURE;
        -: 1740:                                }
        -: 1741:                                else
        -: 1742:                                {
    #####: 1743:                                    if (amqpvalue_add_array_item(*incoming_locales_value, single_amqp_value) != 0)
        -: 1744:                                    {
    #####: 1745:                                        amqpvalue_destroy(*incoming_locales_value);
    #####: 1746:                                        amqpvalue_destroy(single_amqp_value);
    #####: 1747:                                        result = MU_FAILURE;
        -: 1748:                                    }
        -: 1749:                                    else
        -: 1750:                                    {
    #####: 1751:                                        if (amqpvalue_set_composite_item(open_instance->composite_value, 6, *incoming_locales_value) != 0)
        -: 1752:                                        {
    #####: 1753:                                            amqpvalue_destroy(*incoming_locales_value);
    #####: 1754:                                            result = MU_FAILURE;
        -: 1755:                                        }
        -: 1756:                                        else
        -: 1757:                                        {
    #####: 1758:                                            result = 0;
        -: 1759:                                        }
        -: 1760:                                    }
        -: 1761:
    #####: 1762:                                    amqpvalue_destroy(single_amqp_value);
        -: 1763:                                }
    #####: 1764:                                amqpvalue_destroy(*incoming_locales_value);
        -: 1765:                            }
        -: 1766:                        }
        -: 1767:                        else
        -: 1768:                        {
    #####: 1769:                            result = 0;
        -: 1770:                        }
        -: 1771:                    }
        -: 1772:                }
        -: 1773:            }
        -: 1774:        }
        -: 1775:    }
        -: 1776:
    #####: 1777:    return result;
        -: 1778:}
        -: 1779:
    #####: 1780:int open_set_incoming_locales(OPEN_HANDLE open, AMQP_VALUE incoming_locales_value)
        -: 1781:{
        -: 1782:    int result;
        -: 1783:
    #####: 1784:    if (open == NULL)
        -: 1785:    {
    #####: 1786:        result = MU_FAILURE;
        -: 1787:    }
        -: 1788:    else
        -: 1789:    {
    #####: 1790:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
        -: 1791:        AMQP_VALUE incoming_locales_amqp_value;
    #####: 1792:        if (incoming_locales_value == NULL)
        -: 1793:        {
    #####: 1794:            incoming_locales_amqp_value = NULL;
        -: 1795:        }
        -: 1796:        else
        -: 1797:        {
    #####: 1798:            incoming_locales_amqp_value = amqpvalue_clone(incoming_locales_value);
        -: 1799:        }
    #####: 1800:        if (incoming_locales_amqp_value == NULL)
        -: 1801:        {
    #####: 1802:            result = MU_FAILURE;
        -: 1803:        }
        -: 1804:        else
        -: 1805:        {
    #####: 1806:            if (amqpvalue_set_composite_item(open_instance->composite_value, 6, incoming_locales_amqp_value) != 0)
        -: 1807:            {
    #####: 1808:                result = MU_FAILURE;
        -: 1809:            }
        -: 1810:            else
        -: 1811:            {
    #####: 1812:                result = 0;
        -: 1813:            }
        -: 1814:
    #####: 1815:            amqpvalue_destroy(incoming_locales_amqp_value);
        -: 1816:        }
        -: 1817:    }
        -: 1818:
    #####: 1819:    return result;
        -: 1820:}
        -: 1821:
    #####: 1822:int open_get_offered_capabilities(OPEN_HANDLE open, AMQP_VALUE* offered_capabilities_value)
        -: 1823:{
        -: 1824:    int result;
        -: 1825:
    #####: 1826:    if (open == NULL)
        -: 1827:    {
    #####: 1828:        result = MU_FAILURE;
        -: 1829:    }
        -: 1830:    else
        -: 1831:    {
        -: 1832:        uint32_t item_count;
    #####: 1833:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1834:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1835:        {
    #####: 1836:            result = MU_FAILURE;
        -: 1837:        }
        -: 1838:        else
        -: 1839:        {
    #####: 1840:            if (item_count <= 7)
        -: 1841:            {
    #####: 1842:                result = MU_FAILURE;
        -: 1843:            }
        -: 1844:            else
        -: 1845:            {
    #####: 1846:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 7);
    #####: 1847:                if ((item_value == NULL) ||
    #####: 1848:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1849:                {
    #####: 1850:                    result = MU_FAILURE;
        -: 1851:                }
        -: 1852:                else
        -: 1853:                {
        -: 1854:                    const char* offered_capabilities_single_value;
        -: 1855:                    int get_single_value_result;
    #####: 1856:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 1857:                    {
    #####: 1858:                        get_single_value_result = amqpvalue_get_symbol(item_value, &offered_capabilities_single_value);
        -: 1859:                    }
        -: 1860:                    else
        -: 1861:                    {
    #####: 1862:                        (void)memset((void*)&offered_capabilities_single_value, 0, sizeof(offered_capabilities_single_value));
    #####: 1863:                        get_single_value_result = 1;
        -: 1864:                    }
        -: 1865:
    #####: 1866:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, offered_capabilities_value) != 0)) &&
        -: 1867:                        (get_single_value_result != 0))
        -: 1868:                    {
    #####: 1869:                        result = MU_FAILURE;
        -: 1870:                    }
        -: 1871:                    else
        -: 1872:                    {
    #####: 1873:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 1874:                        {
    #####: 1875:                            *offered_capabilities_value = amqpvalue_create_array();
    #####: 1876:                            if (*offered_capabilities_value == NULL)
        -: 1877:                            {
    #####: 1878:                                result = MU_FAILURE;
        -: 1879:                            }
        -: 1880:                            else
        -: 1881:                            {
    #####: 1882:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(offered_capabilities_single_value);
    #####: 1883:                                if (single_amqp_value == NULL)
        -: 1884:                                {
    #####: 1885:                                    amqpvalue_destroy(*offered_capabilities_value);
    #####: 1886:                                    result = MU_FAILURE;
        -: 1887:                                }
        -: 1888:                                else
        -: 1889:                                {
    #####: 1890:                                    if (amqpvalue_add_array_item(*offered_capabilities_value, single_amqp_value) != 0)
        -: 1891:                                    {
    #####: 1892:                                        amqpvalue_destroy(*offered_capabilities_value);
    #####: 1893:                                        amqpvalue_destroy(single_amqp_value);
    #####: 1894:                                        result = MU_FAILURE;
        -: 1895:                                    }
        -: 1896:                                    else
        -: 1897:                                    {
    #####: 1898:                                        if (amqpvalue_set_composite_item(open_instance->composite_value, 7, *offered_capabilities_value) != 0)
        -: 1899:                                        {
    #####: 1900:                                            amqpvalue_destroy(*offered_capabilities_value);
    #####: 1901:                                            result = MU_FAILURE;
        -: 1902:                                        }
        -: 1903:                                        else
        -: 1904:                                        {
    #####: 1905:                                            result = 0;
        -: 1906:                                        }
        -: 1907:                                    }
        -: 1908:
    #####: 1909:                                    amqpvalue_destroy(single_amqp_value);
        -: 1910:                                }
    #####: 1911:                                amqpvalue_destroy(*offered_capabilities_value);
        -: 1912:                            }
        -: 1913:                        }
        -: 1914:                        else
        -: 1915:                        {
    #####: 1916:                            result = 0;
        -: 1917:                        }
        -: 1918:                    }
        -: 1919:                }
        -: 1920:            }
        -: 1921:        }
        -: 1922:    }
        -: 1923:
    #####: 1924:    return result;
        -: 1925:}
        -: 1926:
    #####: 1927:int open_set_offered_capabilities(OPEN_HANDLE open, AMQP_VALUE offered_capabilities_value)
        -: 1928:{
        -: 1929:    int result;
        -: 1930:
    #####: 1931:    if (open == NULL)
        -: 1932:    {
    #####: 1933:        result = MU_FAILURE;
        -: 1934:    }
        -: 1935:    else
        -: 1936:    {
    #####: 1937:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
        -: 1938:        AMQP_VALUE offered_capabilities_amqp_value;
    #####: 1939:        if (offered_capabilities_value == NULL)
        -: 1940:        {
    #####: 1941:            offered_capabilities_amqp_value = NULL;
        -: 1942:        }
        -: 1943:        else
        -: 1944:        {
    #####: 1945:            offered_capabilities_amqp_value = amqpvalue_clone(offered_capabilities_value);
        -: 1946:        }
    #####: 1947:        if (offered_capabilities_amqp_value == NULL)
        -: 1948:        {
    #####: 1949:            result = MU_FAILURE;
        -: 1950:        }
        -: 1951:        else
        -: 1952:        {
    #####: 1953:            if (amqpvalue_set_composite_item(open_instance->composite_value, 7, offered_capabilities_amqp_value) != 0)
        -: 1954:            {
    #####: 1955:                result = MU_FAILURE;
        -: 1956:            }
        -: 1957:            else
        -: 1958:            {
    #####: 1959:                result = 0;
        -: 1960:            }
        -: 1961:
    #####: 1962:            amqpvalue_destroy(offered_capabilities_amqp_value);
        -: 1963:        }
        -: 1964:    }
        -: 1965:
    #####: 1966:    return result;
        -: 1967:}
        -: 1968:
    #####: 1969:int open_get_desired_capabilities(OPEN_HANDLE open, AMQP_VALUE* desired_capabilities_value)
        -: 1970:{
        -: 1971:    int result;
        -: 1972:
    #####: 1973:    if (open == NULL)
        -: 1974:    {
    #####: 1975:        result = MU_FAILURE;
        -: 1976:    }
        -: 1977:    else
        -: 1978:    {
        -: 1979:        uint32_t item_count;
    #####: 1980:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 1981:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 1982:        {
    #####: 1983:            result = MU_FAILURE;
        -: 1984:        }
        -: 1985:        else
        -: 1986:        {
    #####: 1987:            if (item_count <= 8)
        -: 1988:            {
    #####: 1989:                result = MU_FAILURE;
        -: 1990:            }
        -: 1991:            else
        -: 1992:            {
    #####: 1993:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 8);
    #####: 1994:                if ((item_value == NULL) ||
    #####: 1995:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 1996:                {
    #####: 1997:                    result = MU_FAILURE;
        -: 1998:                }
        -: 1999:                else
        -: 2000:                {
        -: 2001:                    const char* desired_capabilities_single_value;
        -: 2002:                    int get_single_value_result;
    #####: 2003:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 2004:                    {
    #####: 2005:                        get_single_value_result = amqpvalue_get_symbol(item_value, &desired_capabilities_single_value);
        -: 2006:                    }
        -: 2007:                    else
        -: 2008:                    {
    #####: 2009:                        (void)memset((void*)&desired_capabilities_single_value, 0, sizeof(desired_capabilities_single_value));
    #####: 2010:                        get_single_value_result = 1;
        -: 2011:                    }
        -: 2012:
    #####: 2013:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, desired_capabilities_value) != 0)) &&
        -: 2014:                        (get_single_value_result != 0))
        -: 2015:                    {
    #####: 2016:                        result = MU_FAILURE;
        -: 2017:                    }
        -: 2018:                    else
        -: 2019:                    {
    #####: 2020:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 2021:                        {
    #####: 2022:                            *desired_capabilities_value = amqpvalue_create_array();
    #####: 2023:                            if (*desired_capabilities_value == NULL)
        -: 2024:                            {
    #####: 2025:                                result = MU_FAILURE;
        -: 2026:                            }
        -: 2027:                            else
        -: 2028:                            {
    #####: 2029:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(desired_capabilities_single_value);
    #####: 2030:                                if (single_amqp_value == NULL)
        -: 2031:                                {
    #####: 2032:                                    amqpvalue_destroy(*desired_capabilities_value);
    #####: 2033:                                    result = MU_FAILURE;
        -: 2034:                                }
        -: 2035:                                else
        -: 2036:                                {
    #####: 2037:                                    if (amqpvalue_add_array_item(*desired_capabilities_value, single_amqp_value) != 0)
        -: 2038:                                    {
    #####: 2039:                                        amqpvalue_destroy(*desired_capabilities_value);
    #####: 2040:                                        amqpvalue_destroy(single_amqp_value);
    #####: 2041:                                        result = MU_FAILURE;
        -: 2042:                                    }
        -: 2043:                                    else
        -: 2044:                                    {
    #####: 2045:                                        if (amqpvalue_set_composite_item(open_instance->composite_value, 8, *desired_capabilities_value) != 0)
        -: 2046:                                        {
    #####: 2047:                                            amqpvalue_destroy(*desired_capabilities_value);
    #####: 2048:                                            result = MU_FAILURE;
        -: 2049:                                        }
        -: 2050:                                        else
        -: 2051:                                        {
    #####: 2052:                                            result = 0;
        -: 2053:                                        }
        -: 2054:                                    }
        -: 2055:
    #####: 2056:                                    amqpvalue_destroy(single_amqp_value);
        -: 2057:                                }
    #####: 2058:                                amqpvalue_destroy(*desired_capabilities_value);
        -: 2059:                            }
        -: 2060:                        }
        -: 2061:                        else
        -: 2062:                        {
    #####: 2063:                            result = 0;
        -: 2064:                        }
        -: 2065:                    }
        -: 2066:                }
        -: 2067:            }
        -: 2068:        }
        -: 2069:    }
        -: 2070:
    #####: 2071:    return result;
        -: 2072:}
        -: 2073:
    #####: 2074:int open_set_desired_capabilities(OPEN_HANDLE open, AMQP_VALUE desired_capabilities_value)
        -: 2075:{
        -: 2076:    int result;
        -: 2077:
    #####: 2078:    if (open == NULL)
        -: 2079:    {
    #####: 2080:        result = MU_FAILURE;
        -: 2081:    }
        -: 2082:    else
        -: 2083:    {
    #####: 2084:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
        -: 2085:        AMQP_VALUE desired_capabilities_amqp_value;
    #####: 2086:        if (desired_capabilities_value == NULL)
        -: 2087:        {
    #####: 2088:            desired_capabilities_amqp_value = NULL;
        -: 2089:        }
        -: 2090:        else
        -: 2091:        {
    #####: 2092:            desired_capabilities_amqp_value = amqpvalue_clone(desired_capabilities_value);
        -: 2093:        }
    #####: 2094:        if (desired_capabilities_amqp_value == NULL)
        -: 2095:        {
    #####: 2096:            result = MU_FAILURE;
        -: 2097:        }
        -: 2098:        else
        -: 2099:        {
    #####: 2100:            if (amqpvalue_set_composite_item(open_instance->composite_value, 8, desired_capabilities_amqp_value) != 0)
        -: 2101:            {
    #####: 2102:                result = MU_FAILURE;
        -: 2103:            }
        -: 2104:            else
        -: 2105:            {
    #####: 2106:                result = 0;
        -: 2107:            }
        -: 2108:
    #####: 2109:            amqpvalue_destroy(desired_capabilities_amqp_value);
        -: 2110:        }
        -: 2111:    }
        -: 2112:
    #####: 2113:    return result;
        -: 2114:}
        -: 2115:
    #####: 2116:int open_get_properties(OPEN_HANDLE open, fields* properties_value)
        -: 2117:{
        -: 2118:    int result;
        -: 2119:
    #####: 2120:    if (open == NULL)
        -: 2121:    {
    #####: 2122:        result = MU_FAILURE;
        -: 2123:    }
        -: 2124:    else
        -: 2125:    {
        -: 2126:        uint32_t item_count;
    #####: 2127:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 2128:        if (amqpvalue_get_composite_item_count(open_instance->composite_value, &item_count) != 0)
        -: 2129:        {
    #####: 2130:            result = MU_FAILURE;
        -: 2131:        }
        -: 2132:        else
        -: 2133:        {
    #####: 2134:            if (item_count <= 9)
        -: 2135:            {
    #####: 2136:                result = MU_FAILURE;
        -: 2137:            }
        -: 2138:            else
        -: 2139:            {
    #####: 2140:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(open_instance->composite_value, 9);
    #####: 2141:                if ((item_value == NULL) ||
    #####: 2142:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 2143:                {
    #####: 2144:                    result = MU_FAILURE;
        -: 2145:                }
        -: 2146:                else
        -: 2147:                {
    #####: 2148:                    int get_single_value_result = amqpvalue_get_fields(item_value, properties_value);
    #####: 2149:                    if (get_single_value_result != 0)
        -: 2150:                    {
    #####: 2151:                        result = MU_FAILURE;
        -: 2152:                    }
        -: 2153:                    else
        -: 2154:                    {
    #####: 2155:                        result = 0;
        -: 2156:                    }
        -: 2157:                }
        -: 2158:            }
        -: 2159:        }
        -: 2160:    }
        -: 2161:
    #####: 2162:    return result;
        -: 2163:}
        -: 2164:
    #####: 2165:int open_set_properties(OPEN_HANDLE open, fields properties_value)
        -: 2166:{
        -: 2167:    int result;
        -: 2168:
    #####: 2169:    if (open == NULL)
        -: 2170:    {
    #####: 2171:        result = MU_FAILURE;
        -: 2172:    }
        -: 2173:    else
        -: 2174:    {
    #####: 2175:        OPEN_INSTANCE* open_instance = (OPEN_INSTANCE*)open;
    #####: 2176:        AMQP_VALUE properties_amqp_value = amqpvalue_create_fields(properties_value);
    #####: 2177:        if (properties_amqp_value == NULL)
        -: 2178:        {
    #####: 2179:            result = MU_FAILURE;
        -: 2180:        }
        -: 2181:        else
        -: 2182:        {
    #####: 2183:            if (amqpvalue_set_composite_item(open_instance->composite_value, 9, properties_amqp_value) != 0)
        -: 2184:            {
    #####: 2185:                result = MU_FAILURE;
        -: 2186:            }
        -: 2187:            else
        -: 2188:            {
    #####: 2189:                result = 0;
        -: 2190:            }
        -: 2191:
    #####: 2192:            amqpvalue_destroy(properties_amqp_value);
        -: 2193:        }
        -: 2194:    }
        -: 2195:
    #####: 2196:    return result;
        -: 2197:}
        -: 2198:
        -: 2199:
        -: 2200:/* begin */
        -: 2201:
        -: 2202:typedef struct BEGIN_INSTANCE_TAG
        -: 2203:{
        -: 2204:    AMQP_VALUE composite_value;
        -: 2205:} BEGIN_INSTANCE;
        -: 2206:
    #####: 2207:static BEGIN_HANDLE begin_create_internal(void)
        -: 2208:{
    #####: 2209:    BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)malloc(sizeof(BEGIN_INSTANCE));
    #####: 2210:    if (begin_instance != NULL)
        -: 2211:    {
    #####: 2212:        begin_instance->composite_value = NULL;
        -: 2213:    }
        -: 2214:
    #####: 2215:    return begin_instance;
        -: 2216:}
        -: 2217:
    #####: 2218:BEGIN_HANDLE begin_create(transfer_number next_outgoing_id_value, uint32_t incoming_window_value, uint32_t outgoing_window_value)
        -: 2219:{
    #####: 2220:    BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)malloc(sizeof(BEGIN_INSTANCE));
    #####: 2221:    if (begin_instance != NULL)
        -: 2222:    {
    #####: 2223:        begin_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(17);
    #####: 2224:        if (begin_instance->composite_value == NULL)
        -: 2225:        {
    #####: 2226:            free(begin_instance);
    #####: 2227:            begin_instance = NULL;
        -: 2228:        }
        -: 2229:        else
        -: 2230:        {
        -: 2231:            AMQP_VALUE next_outgoing_id_amqp_value;
        -: 2232:            AMQP_VALUE incoming_window_amqp_value;
        -: 2233:            AMQP_VALUE outgoing_window_amqp_value;
    #####: 2234:            int result = 0;
        -: 2235:
    #####: 2236:            next_outgoing_id_amqp_value = amqpvalue_create_transfer_number(next_outgoing_id_value);
    #####: 2237:            if ((result == 0) && (amqpvalue_set_composite_item(begin_instance->composite_value, 1, next_outgoing_id_amqp_value) != 0))
        -: 2238:            {
    #####: 2239:                result = MU_FAILURE;
        -: 2240:            }
    #####: 2241:            incoming_window_amqp_value = amqpvalue_create_uint(incoming_window_value);
    #####: 2242:            if ((result == 0) && (amqpvalue_set_composite_item(begin_instance->composite_value, 2, incoming_window_amqp_value) != 0))
        -: 2243:            {
    #####: 2244:                result = MU_FAILURE;
        -: 2245:            }
    #####: 2246:            outgoing_window_amqp_value = amqpvalue_create_uint(outgoing_window_value);
    #####: 2247:            if ((result == 0) && (amqpvalue_set_composite_item(begin_instance->composite_value, 3, outgoing_window_amqp_value) != 0))
        -: 2248:            {
    #####: 2249:                result = MU_FAILURE;
        -: 2250:            }
        -: 2251:
    #####: 2252:            amqpvalue_destroy(next_outgoing_id_amqp_value);
    #####: 2253:            amqpvalue_destroy(incoming_window_amqp_value);
    #####: 2254:            amqpvalue_destroy(outgoing_window_amqp_value);
        -: 2255:        }
        -: 2256:    }
        -: 2257:
    #####: 2258:    return begin_instance;
        -: 2259:}
        -: 2260:
    #####: 2261:BEGIN_HANDLE begin_clone(BEGIN_HANDLE value)
        -: 2262:{
    #####: 2263:    BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)malloc(sizeof(BEGIN_INSTANCE));
    #####: 2264:    if (begin_instance != NULL)
        -: 2265:    {
    #####: 2266:        begin_instance->composite_value = amqpvalue_clone(((BEGIN_INSTANCE*)value)->composite_value);
    #####: 2267:        if (begin_instance->composite_value == NULL)
        -: 2268:        {
    #####: 2269:            free(begin_instance);
    #####: 2270:            begin_instance = NULL;
        -: 2271:        }
        -: 2272:    }
        -: 2273:
    #####: 2274:    return begin_instance;
        -: 2275:}
        -: 2276:
    #####: 2277:void begin_destroy(BEGIN_HANDLE begin)
        -: 2278:{
    #####: 2279:    if (begin != NULL)
        -: 2280:    {
    #####: 2281:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2282:        amqpvalue_destroy(begin_instance->composite_value);
    #####: 2283:        free(begin_instance);
        -: 2284:    }
    #####: 2285:}
        -: 2286:
    #####: 2287:AMQP_VALUE amqpvalue_create_begin(BEGIN_HANDLE begin)
        -: 2288:{
        -: 2289:    AMQP_VALUE result;
        -: 2290:
    #####: 2291:    if (begin == NULL)
        -: 2292:    {
    #####: 2293:        result = NULL;
        -: 2294:    }
        -: 2295:    else
        -: 2296:    {
    #####: 2297:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2298:        result = amqpvalue_clone(begin_instance->composite_value);
        -: 2299:    }
        -: 2300:
    #####: 2301:    return result;
        -: 2302:}
        -: 2303:
    #####: 2304:bool is_begin_type_by_descriptor(AMQP_VALUE descriptor)
        -: 2305:{
        -: 2306:    bool result;
        -: 2307:
        -: 2308:    uint64_t descriptor_ulong;
    #####: 2309:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####: 2310:        (descriptor_ulong == 17))
        -: 2311:    {
    #####: 2312:        result = true;
        -: 2313:    }
        -: 2314:    else
        -: 2315:    {
    #####: 2316:        result = false;
        -: 2317:    }
        -: 2318:
    #####: 2319:    return result;
        -: 2320:}
        -: 2321:
        -: 2322:
    #####: 2323:int amqpvalue_get_begin(AMQP_VALUE value, BEGIN_HANDLE* begin_handle)
        -: 2324:{
        -: 2325:    int result;
    #####: 2326:    BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin_create_internal();
    #####: 2327:    *begin_handle = begin_instance;
    #####: 2328:    if (*begin_handle == NULL)
        -: 2329:    {
    #####: 2330:        result = MU_FAILURE;
        -: 2331:    }
        -: 2332:    else
        -: 2333:    {
    #####: 2334:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####: 2335:        if (list_value == NULL)
        -: 2336:        {
    #####: 2337:            begin_destroy(*begin_handle);
    #####: 2338:            result = MU_FAILURE;
        -: 2339:        }
        -: 2340:        else
        -: 2341:        {
        -: 2342:            uint32_t list_item_count;
    #####: 2343:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -: 2344:            {
    #####: 2345:                result = MU_FAILURE;
        -: 2346:            }
        -: 2347:            else
        -: 2348:            {
        -: 2349:                do
        -: 2350:                {
        -: 2351:                    AMQP_VALUE item_value;
        -: 2352:                    /* remote-channel */
    #####: 2353:                    if (list_item_count > 0)
        -: 2354:                    {
    #####: 2355:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####: 2356:                        if (item_value == NULL)
        -: 2357:                        {
        -: 2358:                            /* do nothing */
        -: 2359:                        }
        -: 2360:                        else
        -: 2361:                        {
    #####: 2362:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 2363:                            {
        -: 2364:                                /* no error, field is not mandatory */
        -: 2365:                            }
        -: 2366:                            else
        -: 2367:                            {
        -: 2368:                                uint16_t remote_channel;
    #####: 2369:                                if (amqpvalue_get_ushort(item_value, &remote_channel) != 0)
        -: 2370:                                {
    #####: 2371:                                    amqpvalue_destroy(item_value);
    #####: 2372:                                    begin_destroy(*begin_handle);
    #####: 2373:                                    result = MU_FAILURE;
    #####: 2374:                                    break;
        -: 2375:                                }
        -: 2376:                            }
        -: 2377:
    #####: 2378:                            amqpvalue_destroy(item_value);
        -: 2379:                        }
        -: 2380:                    }
        -: 2381:                    /* next-outgoing-id */
    #####: 2382:                    if (list_item_count > 1)
        -: 2383:                    {
    #####: 2384:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####: 2385:                        if (item_value == NULL)
        -: 2386:                        {
        -: 2387:                            {
    #####: 2388:                                begin_destroy(*begin_handle);
    #####: 2389:                                result = MU_FAILURE;
    #####: 2390:                                break;
        -: 2391:                            }
        -: 2392:                        }
        -: 2393:                        else
        -: 2394:                        {
    #####: 2395:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 2396:                            {
    #####: 2397:                                amqpvalue_destroy(item_value);
    #####: 2398:                                begin_destroy(*begin_handle);
    #####: 2399:                                result = MU_FAILURE;
    #####: 2400:                                break;
        -: 2401:                            }
        -: 2402:                            else
        -: 2403:                            {
        -: 2404:                                transfer_number next_outgoing_id;
    #####: 2405:                                if (amqpvalue_get_transfer_number(item_value, &next_outgoing_id) != 0)
        -: 2406:                                {
    #####: 2407:                                    amqpvalue_destroy(item_value);
    #####: 2408:                                    begin_destroy(*begin_handle);
    #####: 2409:                                    result = MU_FAILURE;
    #####: 2410:                                    break;
        -: 2411:                                }
        -: 2412:                            }
        -: 2413:
    #####: 2414:                            amqpvalue_destroy(item_value);
        -: 2415:                        }
        -: 2416:                    }
        -: 2417:                    else
        -: 2418:                    {
    #####: 2419:                        result = MU_FAILURE;
        -: 2420:                    }
        -: 2421:                    /* incoming-window */
    #####: 2422:                    if (list_item_count > 2)
        -: 2423:                    {
    #####: 2424:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####: 2425:                        if (item_value == NULL)
        -: 2426:                        {
        -: 2427:                            {
    #####: 2428:                                begin_destroy(*begin_handle);
    #####: 2429:                                result = MU_FAILURE;
    #####: 2430:                                break;
        -: 2431:                            }
        -: 2432:                        }
        -: 2433:                        else
        -: 2434:                        {
    #####: 2435:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 2436:                            {
    #####: 2437:                                amqpvalue_destroy(item_value);
    #####: 2438:                                begin_destroy(*begin_handle);
    #####: 2439:                                result = MU_FAILURE;
    #####: 2440:                                break;
        -: 2441:                            }
        -: 2442:                            else
        -: 2443:                            {
        -: 2444:                                uint32_t incoming_window;
    #####: 2445:                                if (amqpvalue_get_uint(item_value, &incoming_window) != 0)
        -: 2446:                                {
    #####: 2447:                                    amqpvalue_destroy(item_value);
    #####: 2448:                                    begin_destroy(*begin_handle);
    #####: 2449:                                    result = MU_FAILURE;
    #####: 2450:                                    break;
        -: 2451:                                }
        -: 2452:                            }
        -: 2453:
    #####: 2454:                            amqpvalue_destroy(item_value);
        -: 2455:                        }
        -: 2456:                    }
        -: 2457:                    else
        -: 2458:                    {
    #####: 2459:                        result = MU_FAILURE;
        -: 2460:                    }
        -: 2461:                    /* outgoing-window */
    #####: 2462:                    if (list_item_count > 3)
        -: 2463:                    {
    #####: 2464:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####: 2465:                        if (item_value == NULL)
        -: 2466:                        {
        -: 2467:                            {
    #####: 2468:                                begin_destroy(*begin_handle);
    #####: 2469:                                result = MU_FAILURE;
    #####: 2470:                                break;
        -: 2471:                            }
        -: 2472:                        }
        -: 2473:                        else
        -: 2474:                        {
    #####: 2475:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 2476:                            {
    #####: 2477:                                amqpvalue_destroy(item_value);
    #####: 2478:                                begin_destroy(*begin_handle);
    #####: 2479:                                result = MU_FAILURE;
    #####: 2480:                                break;
        -: 2481:                            }
        -: 2482:                            else
        -: 2483:                            {
        -: 2484:                                uint32_t outgoing_window;
    #####: 2485:                                if (amqpvalue_get_uint(item_value, &outgoing_window) != 0)
        -: 2486:                                {
    #####: 2487:                                    amqpvalue_destroy(item_value);
    #####: 2488:                                    begin_destroy(*begin_handle);
    #####: 2489:                                    result = MU_FAILURE;
    #####: 2490:                                    break;
        -: 2491:                                }
        -: 2492:                            }
        -: 2493:
    #####: 2494:                            amqpvalue_destroy(item_value);
        -: 2495:                        }
        -: 2496:                    }
        -: 2497:                    else
        -: 2498:                    {
    #####: 2499:                        result = MU_FAILURE;
        -: 2500:                    }
        -: 2501:                    /* handle-max */
    #####: 2502:                    if (list_item_count > 4)
        -: 2503:                    {
    #####: 2504:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####: 2505:                        if (item_value == NULL)
        -: 2506:                        {
        -: 2507:                            /* do nothing */
        -: 2508:                        }
        -: 2509:                        else
        -: 2510:                        {
    #####: 2511:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 2512:                            {
        -: 2513:                                /* no error, field is not mandatory */
        -: 2514:                            }
        -: 2515:                            else
        -: 2516:                            {
        -: 2517:                                handle handle_max;
    #####: 2518:                                if (amqpvalue_get_handle(item_value, &handle_max) != 0)
        -: 2519:                                {
    #####: 2520:                                    amqpvalue_destroy(item_value);
    #####: 2521:                                    begin_destroy(*begin_handle);
    #####: 2522:                                    result = MU_FAILURE;
    #####: 2523:                                    break;
        -: 2524:                                }
        -: 2525:                            }
        -: 2526:
    #####: 2527:                            amqpvalue_destroy(item_value);
        -: 2528:                        }
        -: 2529:                    }
        -: 2530:                    /* offered-capabilities */
    #####: 2531:                    if (list_item_count > 5)
        -: 2532:                    {
    #####: 2533:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####: 2534:                        if (item_value == NULL)
        -: 2535:                        {
        -: 2536:                            /* do nothing */
        -: 2537:                        }
        -: 2538:                        else
        -: 2539:                        {
    #####: 2540:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 2541:                            {
        -: 2542:                                /* no error, field is not mandatory */
        -: 2543:                            }
        -: 2544:                            else
        -: 2545:                            {
    #####: 2546:                                const char* offered_capabilities = NULL;
        -: 2547:                                AMQP_VALUE offered_capabilities_array;
    #####: 2548:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &offered_capabilities_array) != 0)) &&
    #####: 2549:                                    (amqpvalue_get_symbol(item_value, &offered_capabilities) != 0))
        -: 2550:                                {
    #####: 2551:                                    amqpvalue_destroy(item_value);
    #####: 2552:                                    begin_destroy(*begin_handle);
    #####: 2553:                                    result = MU_FAILURE;
    #####: 2554:                                    break;
        -: 2555:                                }
        -: 2556:                            }
        -: 2557:
    #####: 2558:                            amqpvalue_destroy(item_value);
        -: 2559:                        }
        -: 2560:                    }
        -: 2561:                    /* desired-capabilities */
    #####: 2562:                    if (list_item_count > 6)
        -: 2563:                    {
    #####: 2564:                        item_value = amqpvalue_get_list_item(list_value, 6);
    #####: 2565:                        if (item_value == NULL)
        -: 2566:                        {
        -: 2567:                            /* do nothing */
        -: 2568:                        }
        -: 2569:                        else
        -: 2570:                        {
    #####: 2571:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 2572:                            {
        -: 2573:                                /* no error, field is not mandatory */
        -: 2574:                            }
        -: 2575:                            else
        -: 2576:                            {
    #####: 2577:                                const char* desired_capabilities = NULL;
        -: 2578:                                AMQP_VALUE desired_capabilities_array;
    #####: 2579:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &desired_capabilities_array) != 0)) &&
    #####: 2580:                                    (amqpvalue_get_symbol(item_value, &desired_capabilities) != 0))
        -: 2581:                                {
    #####: 2582:                                    amqpvalue_destroy(item_value);
    #####: 2583:                                    begin_destroy(*begin_handle);
    #####: 2584:                                    result = MU_FAILURE;
    #####: 2585:                                    break;
        -: 2586:                                }
        -: 2587:                            }
        -: 2588:
    #####: 2589:                            amqpvalue_destroy(item_value);
        -: 2590:                        }
        -: 2591:                    }
        -: 2592:                    /* properties */
    #####: 2593:                    if (list_item_count > 7)
        -: 2594:                    {
    #####: 2595:                        item_value = amqpvalue_get_list_item(list_value, 7);
    #####: 2596:                        if (item_value == NULL)
        -: 2597:                        {
        -: 2598:                            /* do nothing */
        -: 2599:                        }
        -: 2600:                        else
        -: 2601:                        {
    #####: 2602:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 2603:                            {
        -: 2604:                                /* no error, field is not mandatory */
        -: 2605:                            }
        -: 2606:                            else
        -: 2607:                            {
        -: 2608:                                fields properties;
    #####: 2609:                                if (amqpvalue_get_fields(item_value, &properties) != 0)
        -: 2610:                                {
    #####: 2611:                                    amqpvalue_destroy(item_value);
    #####: 2612:                                    begin_destroy(*begin_handle);
    #####: 2613:                                    result = MU_FAILURE;
    #####: 2614:                                    break;
        -: 2615:                                }
        -: 2616:                            }
        -: 2617:
    #####: 2618:                            amqpvalue_destroy(item_value);
        -: 2619:                        }
        -: 2620:                    }
        -: 2621:
    #####: 2622:                    begin_instance->composite_value = amqpvalue_clone(value);
        -: 2623:
    #####: 2624:                    result = 0;
        -: 2625:                } while((void)0,0);
        -: 2626:            }
        -: 2627:        }
        -: 2628:    }
        -: 2629:
    #####: 2630:    return result;
        -: 2631:}
        -: 2632:
    #####: 2633:int begin_get_remote_channel(BEGIN_HANDLE begin, uint16_t* remote_channel_value)
        -: 2634:{
        -: 2635:    int result;
        -: 2636:
    #####: 2637:    if (begin == NULL)
        -: 2638:    {
    #####: 2639:        result = MU_FAILURE;
        -: 2640:    }
        -: 2641:    else
        -: 2642:    {
        -: 2643:        uint32_t item_count;
    #####: 2644:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2645:        if (amqpvalue_get_composite_item_count(begin_instance->composite_value, &item_count) != 0)
        -: 2646:        {
    #####: 2647:            result = MU_FAILURE;
        -: 2648:        }
        -: 2649:        else
        -: 2650:        {
    #####: 2651:            if (item_count <= 0)
        -: 2652:            {
    #####: 2653:                result = MU_FAILURE;
        -: 2654:            }
        -: 2655:            else
        -: 2656:            {
    #####: 2657:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(begin_instance->composite_value, 0);
    #####: 2658:                if ((item_value == NULL) ||
    #####: 2659:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 2660:                {
    #####: 2661:                    result = MU_FAILURE;
        -: 2662:                }
        -: 2663:                else
        -: 2664:                {
    #####: 2665:                    int get_single_value_result = amqpvalue_get_ushort(item_value, remote_channel_value);
    #####: 2666:                    if (get_single_value_result != 0)
        -: 2667:                    {
    #####: 2668:                        result = MU_FAILURE;
        -: 2669:                    }
        -: 2670:                    else
        -: 2671:                    {
    #####: 2672:                        result = 0;
        -: 2673:                    }
        -: 2674:                }
        -: 2675:            }
        -: 2676:        }
        -: 2677:    }
        -: 2678:
    #####: 2679:    return result;
        -: 2680:}
        -: 2681:
    #####: 2682:int begin_set_remote_channel(BEGIN_HANDLE begin, uint16_t remote_channel_value)
        -: 2683:{
        -: 2684:    int result;
        -: 2685:
    #####: 2686:    if (begin == NULL)
        -: 2687:    {
    #####: 2688:        result = MU_FAILURE;
        -: 2689:    }
        -: 2690:    else
        -: 2691:    {
    #####: 2692:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2693:        AMQP_VALUE remote_channel_amqp_value = amqpvalue_create_ushort(remote_channel_value);
    #####: 2694:        if (remote_channel_amqp_value == NULL)
        -: 2695:        {
    #####: 2696:            result = MU_FAILURE;
        -: 2697:        }
        -: 2698:        else
        -: 2699:        {
    #####: 2700:            if (amqpvalue_set_composite_item(begin_instance->composite_value, 0, remote_channel_amqp_value) != 0)
        -: 2701:            {
    #####: 2702:                result = MU_FAILURE;
        -: 2703:            }
        -: 2704:            else
        -: 2705:            {
    #####: 2706:                result = 0;
        -: 2707:            }
        -: 2708:
    #####: 2709:            amqpvalue_destroy(remote_channel_amqp_value);
        -: 2710:        }
        -: 2711:    }
        -: 2712:
    #####: 2713:    return result;
        -: 2714:}
        -: 2715:
    #####: 2716:int begin_get_next_outgoing_id(BEGIN_HANDLE begin, transfer_number* next_outgoing_id_value)
        -: 2717:{
        -: 2718:    int result;
        -: 2719:
    #####: 2720:    if (begin == NULL)
        -: 2721:    {
    #####: 2722:        result = MU_FAILURE;
        -: 2723:    }
        -: 2724:    else
        -: 2725:    {
        -: 2726:        uint32_t item_count;
    #####: 2727:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2728:        if (amqpvalue_get_composite_item_count(begin_instance->composite_value, &item_count) != 0)
        -: 2729:        {
    #####: 2730:            result = MU_FAILURE;
        -: 2731:        }
        -: 2732:        else
        -: 2733:        {
    #####: 2734:            if (item_count <= 1)
        -: 2735:            {
    #####: 2736:                result = MU_FAILURE;
        -: 2737:            }
        -: 2738:            else
        -: 2739:            {
    #####: 2740:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(begin_instance->composite_value, 1);
    #####: 2741:                if ((item_value == NULL) ||
    #####: 2742:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 2743:                {
    #####: 2744:                    result = MU_FAILURE;
        -: 2745:                }
        -: 2746:                else
        -: 2747:                {
    #####: 2748:                    int get_single_value_result = amqpvalue_get_transfer_number(item_value, next_outgoing_id_value);
    #####: 2749:                    if (get_single_value_result != 0)
        -: 2750:                    {
    #####: 2751:                        result = MU_FAILURE;
        -: 2752:                    }
        -: 2753:                    else
        -: 2754:                    {
    #####: 2755:                        result = 0;
        -: 2756:                    }
        -: 2757:                }
        -: 2758:            }
        -: 2759:        }
        -: 2760:    }
        -: 2761:
    #####: 2762:    return result;
        -: 2763:}
        -: 2764:
    #####: 2765:int begin_set_next_outgoing_id(BEGIN_HANDLE begin, transfer_number next_outgoing_id_value)
        -: 2766:{
        -: 2767:    int result;
        -: 2768:
    #####: 2769:    if (begin == NULL)
        -: 2770:    {
    #####: 2771:        result = MU_FAILURE;
        -: 2772:    }
        -: 2773:    else
        -: 2774:    {
    #####: 2775:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2776:        AMQP_VALUE next_outgoing_id_amqp_value = amqpvalue_create_transfer_number(next_outgoing_id_value);
    #####: 2777:        if (next_outgoing_id_amqp_value == NULL)
        -: 2778:        {
    #####: 2779:            result = MU_FAILURE;
        -: 2780:        }
        -: 2781:        else
        -: 2782:        {
    #####: 2783:            if (amqpvalue_set_composite_item(begin_instance->composite_value, 1, next_outgoing_id_amqp_value) != 0)
        -: 2784:            {
    #####: 2785:                result = MU_FAILURE;
        -: 2786:            }
        -: 2787:            else
        -: 2788:            {
    #####: 2789:                result = 0;
        -: 2790:            }
        -: 2791:
    #####: 2792:            amqpvalue_destroy(next_outgoing_id_amqp_value);
        -: 2793:        }
        -: 2794:    }
        -: 2795:
    #####: 2796:    return result;
        -: 2797:}
        -: 2798:
    #####: 2799:int begin_get_incoming_window(BEGIN_HANDLE begin, uint32_t* incoming_window_value)
        -: 2800:{
        -: 2801:    int result;
        -: 2802:
    #####: 2803:    if (begin == NULL)
        -: 2804:    {
    #####: 2805:        result = MU_FAILURE;
        -: 2806:    }
        -: 2807:    else
        -: 2808:    {
        -: 2809:        uint32_t item_count;
    #####: 2810:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2811:        if (amqpvalue_get_composite_item_count(begin_instance->composite_value, &item_count) != 0)
        -: 2812:        {
    #####: 2813:            result = MU_FAILURE;
        -: 2814:        }
        -: 2815:        else
        -: 2816:        {
    #####: 2817:            if (item_count <= 2)
        -: 2818:            {
    #####: 2819:                result = MU_FAILURE;
        -: 2820:            }
        -: 2821:            else
        -: 2822:            {
    #####: 2823:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(begin_instance->composite_value, 2);
    #####: 2824:                if ((item_value == NULL) ||
    #####: 2825:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 2826:                {
    #####: 2827:                    result = MU_FAILURE;
        -: 2828:                }
        -: 2829:                else
        -: 2830:                {
    #####: 2831:                    int get_single_value_result = amqpvalue_get_uint(item_value, incoming_window_value);
    #####: 2832:                    if (get_single_value_result != 0)
        -: 2833:                    {
    #####: 2834:                        result = MU_FAILURE;
        -: 2835:                    }
        -: 2836:                    else
        -: 2837:                    {
    #####: 2838:                        result = 0;
        -: 2839:                    }
        -: 2840:                }
        -: 2841:            }
        -: 2842:        }
        -: 2843:    }
        -: 2844:
    #####: 2845:    return result;
        -: 2846:}
        -: 2847:
    #####: 2848:int begin_set_incoming_window(BEGIN_HANDLE begin, uint32_t incoming_window_value)
        -: 2849:{
        -: 2850:    int result;
        -: 2851:
    #####: 2852:    if (begin == NULL)
        -: 2853:    {
    #####: 2854:        result = MU_FAILURE;
        -: 2855:    }
        -: 2856:    else
        -: 2857:    {
    #####: 2858:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2859:        AMQP_VALUE incoming_window_amqp_value = amqpvalue_create_uint(incoming_window_value);
    #####: 2860:        if (incoming_window_amqp_value == NULL)
        -: 2861:        {
    #####: 2862:            result = MU_FAILURE;
        -: 2863:        }
        -: 2864:        else
        -: 2865:        {
    #####: 2866:            if (amqpvalue_set_composite_item(begin_instance->composite_value, 2, incoming_window_amqp_value) != 0)
        -: 2867:            {
    #####: 2868:                result = MU_FAILURE;
        -: 2869:            }
        -: 2870:            else
        -: 2871:            {
    #####: 2872:                result = 0;
        -: 2873:            }
        -: 2874:
    #####: 2875:            amqpvalue_destroy(incoming_window_amqp_value);
        -: 2876:        }
        -: 2877:    }
        -: 2878:
    #####: 2879:    return result;
        -: 2880:}
        -: 2881:
    #####: 2882:int begin_get_outgoing_window(BEGIN_HANDLE begin, uint32_t* outgoing_window_value)
        -: 2883:{
        -: 2884:    int result;
        -: 2885:
    #####: 2886:    if (begin == NULL)
        -: 2887:    {
    #####: 2888:        result = MU_FAILURE;
        -: 2889:    }
        -: 2890:    else
        -: 2891:    {
        -: 2892:        uint32_t item_count;
    #####: 2893:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2894:        if (amqpvalue_get_composite_item_count(begin_instance->composite_value, &item_count) != 0)
        -: 2895:        {
    #####: 2896:            result = MU_FAILURE;
        -: 2897:        }
        -: 2898:        else
        -: 2899:        {
    #####: 2900:            if (item_count <= 3)
        -: 2901:            {
    #####: 2902:                result = MU_FAILURE;
        -: 2903:            }
        -: 2904:            else
        -: 2905:            {
    #####: 2906:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(begin_instance->composite_value, 3);
    #####: 2907:                if ((item_value == NULL) ||
    #####: 2908:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 2909:                {
    #####: 2910:                    result = MU_FAILURE;
        -: 2911:                }
        -: 2912:                else
        -: 2913:                {
    #####: 2914:                    int get_single_value_result = amqpvalue_get_uint(item_value, outgoing_window_value);
    #####: 2915:                    if (get_single_value_result != 0)
        -: 2916:                    {
    #####: 2917:                        result = MU_FAILURE;
        -: 2918:                    }
        -: 2919:                    else
        -: 2920:                    {
    #####: 2921:                        result = 0;
        -: 2922:                    }
        -: 2923:                }
        -: 2924:            }
        -: 2925:        }
        -: 2926:    }
        -: 2927:
    #####: 2928:    return result;
        -: 2929:}
        -: 2930:
    #####: 2931:int begin_set_outgoing_window(BEGIN_HANDLE begin, uint32_t outgoing_window_value)
        -: 2932:{
        -: 2933:    int result;
        -: 2934:
    #####: 2935:    if (begin == NULL)
        -: 2936:    {
    #####: 2937:        result = MU_FAILURE;
        -: 2938:    }
        -: 2939:    else
        -: 2940:    {
    #####: 2941:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2942:        AMQP_VALUE outgoing_window_amqp_value = amqpvalue_create_uint(outgoing_window_value);
    #####: 2943:        if (outgoing_window_amqp_value == NULL)
        -: 2944:        {
    #####: 2945:            result = MU_FAILURE;
        -: 2946:        }
        -: 2947:        else
        -: 2948:        {
    #####: 2949:            if (amqpvalue_set_composite_item(begin_instance->composite_value, 3, outgoing_window_amqp_value) != 0)
        -: 2950:            {
    #####: 2951:                result = MU_FAILURE;
        -: 2952:            }
        -: 2953:            else
        -: 2954:            {
    #####: 2955:                result = 0;
        -: 2956:            }
        -: 2957:
    #####: 2958:            amqpvalue_destroy(outgoing_window_amqp_value);
        -: 2959:        }
        -: 2960:    }
        -: 2961:
    #####: 2962:    return result;
        -: 2963:}
        -: 2964:
    #####: 2965:int begin_get_handle_max(BEGIN_HANDLE begin, handle* handle_max_value)
        -: 2966:{
        -: 2967:    int result;
        -: 2968:
    #####: 2969:    if (begin == NULL)
        -: 2970:    {
    #####: 2971:        result = MU_FAILURE;
        -: 2972:    }
        -: 2973:    else
        -: 2974:    {
        -: 2975:        uint32_t item_count;
    #####: 2976:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 2977:        if (amqpvalue_get_composite_item_count(begin_instance->composite_value, &item_count) != 0)
        -: 2978:        {
    #####: 2979:            result = MU_FAILURE;
        -: 2980:        }
        -: 2981:        else
        -: 2982:        {
    #####: 2983:            if (item_count <= 4)
        -: 2984:            {
    #####: 2985:                *handle_max_value = 4294967295u;
    #####: 2986:                result = 0;
        -: 2987:            }
        -: 2988:            else
        -: 2989:            {
    #####: 2990:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(begin_instance->composite_value, 4);
    #####: 2991:                if ((item_value == NULL) ||
    #####: 2992:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 2993:                {
    #####: 2994:                    *handle_max_value = 4294967295u;
    #####: 2995:                    result = 0;
        -: 2996:                }
        -: 2997:                else
        -: 2998:                {
    #####: 2999:                    int get_single_value_result = amqpvalue_get_handle(item_value, handle_max_value);
    #####: 3000:                    if (get_single_value_result != 0)
        -: 3001:                    {
    #####: 3002:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 3003:                        {
    #####: 3004:                            result = MU_FAILURE;
        -: 3005:                        }
        -: 3006:                        else
        -: 3007:                        {
    #####: 3008:                            *handle_max_value = 4294967295u;
    #####: 3009:                            result = 0;
        -: 3010:                        }
        -: 3011:                    }
        -: 3012:                    else
        -: 3013:                    {
    #####: 3014:                        result = 0;
        -: 3015:                    }
        -: 3016:                }
        -: 3017:            }
        -: 3018:        }
        -: 3019:    }
        -: 3020:
    #####: 3021:    return result;
        -: 3022:}
        -: 3023:
    #####: 3024:int begin_set_handle_max(BEGIN_HANDLE begin, handle handle_max_value)
        -: 3025:{
        -: 3026:    int result;
        -: 3027:
    #####: 3028:    if (begin == NULL)
        -: 3029:    {
    #####: 3030:        result = MU_FAILURE;
        -: 3031:    }
        -: 3032:    else
        -: 3033:    {
    #####: 3034:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 3035:        AMQP_VALUE handle_max_amqp_value = amqpvalue_create_handle(handle_max_value);
    #####: 3036:        if (handle_max_amqp_value == NULL)
        -: 3037:        {
    #####: 3038:            result = MU_FAILURE;
        -: 3039:        }
        -: 3040:        else
        -: 3041:        {
    #####: 3042:            if (amqpvalue_set_composite_item(begin_instance->composite_value, 4, handle_max_amqp_value) != 0)
        -: 3043:            {
    #####: 3044:                result = MU_FAILURE;
        -: 3045:            }
        -: 3046:            else
        -: 3047:            {
    #####: 3048:                result = 0;
        -: 3049:            }
        -: 3050:
    #####: 3051:            amqpvalue_destroy(handle_max_amqp_value);
        -: 3052:        }
        -: 3053:    }
        -: 3054:
    #####: 3055:    return result;
        -: 3056:}
        -: 3057:
    #####: 3058:int begin_get_offered_capabilities(BEGIN_HANDLE begin, AMQP_VALUE* offered_capabilities_value)
        -: 3059:{
        -: 3060:    int result;
        -: 3061:
    #####: 3062:    if (begin == NULL)
        -: 3063:    {
    #####: 3064:        result = MU_FAILURE;
        -: 3065:    }
        -: 3066:    else
        -: 3067:    {
        -: 3068:        uint32_t item_count;
    #####: 3069:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 3070:        if (amqpvalue_get_composite_item_count(begin_instance->composite_value, &item_count) != 0)
        -: 3071:        {
    #####: 3072:            result = MU_FAILURE;
        -: 3073:        }
        -: 3074:        else
        -: 3075:        {
    #####: 3076:            if (item_count <= 5)
        -: 3077:            {
    #####: 3078:                result = MU_FAILURE;
        -: 3079:            }
        -: 3080:            else
        -: 3081:            {
    #####: 3082:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(begin_instance->composite_value, 5);
    #####: 3083:                if ((item_value == NULL) ||
    #####: 3084:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 3085:                {
    #####: 3086:                    result = MU_FAILURE;
        -: 3087:                }
        -: 3088:                else
        -: 3089:                {
        -: 3090:                    const char* offered_capabilities_single_value;
        -: 3091:                    int get_single_value_result;
    #####: 3092:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 3093:                    {
    #####: 3094:                        get_single_value_result = amqpvalue_get_symbol(item_value, &offered_capabilities_single_value);
        -: 3095:                    }
        -: 3096:                    else
        -: 3097:                    {
    #####: 3098:                        (void)memset((void*)&offered_capabilities_single_value, 0, sizeof(offered_capabilities_single_value));
    #####: 3099:                        get_single_value_result = 1;
        -: 3100:                    }
        -: 3101:
    #####: 3102:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, offered_capabilities_value) != 0)) &&
        -: 3103:                        (get_single_value_result != 0))
        -: 3104:                    {
    #####: 3105:                        result = MU_FAILURE;
        -: 3106:                    }
        -: 3107:                    else
        -: 3108:                    {
    #####: 3109:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 3110:                        {
    #####: 3111:                            *offered_capabilities_value = amqpvalue_create_array();
    #####: 3112:                            if (*offered_capabilities_value == NULL)
        -: 3113:                            {
    #####: 3114:                                result = MU_FAILURE;
        -: 3115:                            }
        -: 3116:                            else
        -: 3117:                            {
    #####: 3118:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(offered_capabilities_single_value);
    #####: 3119:                                if (single_amqp_value == NULL)
        -: 3120:                                {
    #####: 3121:                                    amqpvalue_destroy(*offered_capabilities_value);
    #####: 3122:                                    result = MU_FAILURE;
        -: 3123:                                }
        -: 3124:                                else
        -: 3125:                                {
    #####: 3126:                                    if (amqpvalue_add_array_item(*offered_capabilities_value, single_amqp_value) != 0)
        -: 3127:                                    {
    #####: 3128:                                        amqpvalue_destroy(*offered_capabilities_value);
    #####: 3129:                                        amqpvalue_destroy(single_amqp_value);
    #####: 3130:                                        result = MU_FAILURE;
        -: 3131:                                    }
        -: 3132:                                    else
        -: 3133:                                    {
    #####: 3134:                                        if (amqpvalue_set_composite_item(begin_instance->composite_value, 5, *offered_capabilities_value) != 0)
        -: 3135:                                        {
    #####: 3136:                                            amqpvalue_destroy(*offered_capabilities_value);
    #####: 3137:                                            result = MU_FAILURE;
        -: 3138:                                        }
        -: 3139:                                        else
        -: 3140:                                        {
    #####: 3141:                                            result = 0;
        -: 3142:                                        }
        -: 3143:                                    }
        -: 3144:
    #####: 3145:                                    amqpvalue_destroy(single_amqp_value);
        -: 3146:                                }
    #####: 3147:                                amqpvalue_destroy(*offered_capabilities_value);
        -: 3148:                            }
        -: 3149:                        }
        -: 3150:                        else
        -: 3151:                        {
    #####: 3152:                            result = 0;
        -: 3153:                        }
        -: 3154:                    }
        -: 3155:                }
        -: 3156:            }
        -: 3157:        }
        -: 3158:    }
        -: 3159:
    #####: 3160:    return result;
        -: 3161:}
        -: 3162:
    #####: 3163:int begin_set_offered_capabilities(BEGIN_HANDLE begin, AMQP_VALUE offered_capabilities_value)
        -: 3164:{
        -: 3165:    int result;
        -: 3166:
    #####: 3167:    if (begin == NULL)
        -: 3168:    {
    #####: 3169:        result = MU_FAILURE;
        -: 3170:    }
        -: 3171:    else
        -: 3172:    {
    #####: 3173:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
        -: 3174:        AMQP_VALUE offered_capabilities_amqp_value;
    #####: 3175:        if (offered_capabilities_value == NULL)
        -: 3176:        {
    #####: 3177:            offered_capabilities_amqp_value = NULL;
        -: 3178:        }
        -: 3179:        else
        -: 3180:        {
    #####: 3181:            offered_capabilities_amqp_value = amqpvalue_clone(offered_capabilities_value);
        -: 3182:        }
    #####: 3183:        if (offered_capabilities_amqp_value == NULL)
        -: 3184:        {
    #####: 3185:            result = MU_FAILURE;
        -: 3186:        }
        -: 3187:        else
        -: 3188:        {
    #####: 3189:            if (amqpvalue_set_composite_item(begin_instance->composite_value, 5, offered_capabilities_amqp_value) != 0)
        -: 3190:            {
    #####: 3191:                result = MU_FAILURE;
        -: 3192:            }
        -: 3193:            else
        -: 3194:            {
    #####: 3195:                result = 0;
        -: 3196:            }
        -: 3197:
    #####: 3198:            amqpvalue_destroy(offered_capabilities_amqp_value);
        -: 3199:        }
        -: 3200:    }
        -: 3201:
    #####: 3202:    return result;
        -: 3203:}
        -: 3204:
    #####: 3205:int begin_get_desired_capabilities(BEGIN_HANDLE begin, AMQP_VALUE* desired_capabilities_value)
        -: 3206:{
        -: 3207:    int result;
        -: 3208:
    #####: 3209:    if (begin == NULL)
        -: 3210:    {
    #####: 3211:        result = MU_FAILURE;
        -: 3212:    }
        -: 3213:    else
        -: 3214:    {
        -: 3215:        uint32_t item_count;
    #####: 3216:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 3217:        if (amqpvalue_get_composite_item_count(begin_instance->composite_value, &item_count) != 0)
        -: 3218:        {
    #####: 3219:            result = MU_FAILURE;
        -: 3220:        }
        -: 3221:        else
        -: 3222:        {
    #####: 3223:            if (item_count <= 6)
        -: 3224:            {
    #####: 3225:                result = MU_FAILURE;
        -: 3226:            }
        -: 3227:            else
        -: 3228:            {
    #####: 3229:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(begin_instance->composite_value, 6);
    #####: 3230:                if ((item_value == NULL) ||
    #####: 3231:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 3232:                {
    #####: 3233:                    result = MU_FAILURE;
        -: 3234:                }
        -: 3235:                else
        -: 3236:                {
        -: 3237:                    const char* desired_capabilities_single_value;
        -: 3238:                    int get_single_value_result;
    #####: 3239:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 3240:                    {
    #####: 3241:                        get_single_value_result = amqpvalue_get_symbol(item_value, &desired_capabilities_single_value);
        -: 3242:                    }
        -: 3243:                    else
        -: 3244:                    {
    #####: 3245:                        (void)memset((void*)&desired_capabilities_single_value, 0, sizeof(desired_capabilities_single_value));
    #####: 3246:                        get_single_value_result = 1;
        -: 3247:                    }
        -: 3248:
    #####: 3249:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, desired_capabilities_value) != 0)) &&
        -: 3250:                        (get_single_value_result != 0))
        -: 3251:                    {
    #####: 3252:                        result = MU_FAILURE;
        -: 3253:                    }
        -: 3254:                    else
        -: 3255:                    {
    #####: 3256:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 3257:                        {
    #####: 3258:                            *desired_capabilities_value = amqpvalue_create_array();
    #####: 3259:                            if (*desired_capabilities_value == NULL)
        -: 3260:                            {
    #####: 3261:                                result = MU_FAILURE;
        -: 3262:                            }
        -: 3263:                            else
        -: 3264:                            {
    #####: 3265:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(desired_capabilities_single_value);
    #####: 3266:                                if (single_amqp_value == NULL)
        -: 3267:                                {
    #####: 3268:                                    amqpvalue_destroy(*desired_capabilities_value);
    #####: 3269:                                    result = MU_FAILURE;
        -: 3270:                                }
        -: 3271:                                else
        -: 3272:                                {
    #####: 3273:                                    if (amqpvalue_add_array_item(*desired_capabilities_value, single_amqp_value) != 0)
        -: 3274:                                    {
    #####: 3275:                                        amqpvalue_destroy(*desired_capabilities_value);
    #####: 3276:                                        amqpvalue_destroy(single_amqp_value);
    #####: 3277:                                        result = MU_FAILURE;
        -: 3278:                                    }
        -: 3279:                                    else
        -: 3280:                                    {
    #####: 3281:                                        if (amqpvalue_set_composite_item(begin_instance->composite_value, 6, *desired_capabilities_value) != 0)
        -: 3282:                                        {
    #####: 3283:                                            amqpvalue_destroy(*desired_capabilities_value);
    #####: 3284:                                            result = MU_FAILURE;
        -: 3285:                                        }
        -: 3286:                                        else
        -: 3287:                                        {
    #####: 3288:                                            result = 0;
        -: 3289:                                        }
        -: 3290:                                    }
        -: 3291:
    #####: 3292:                                    amqpvalue_destroy(single_amqp_value);
        -: 3293:                                }
    #####: 3294:                                amqpvalue_destroy(*desired_capabilities_value);
        -: 3295:                            }
        -: 3296:                        }
        -: 3297:                        else
        -: 3298:                        {
    #####: 3299:                            result = 0;
        -: 3300:                        }
        -: 3301:                    }
        -: 3302:                }
        -: 3303:            }
        -: 3304:        }
        -: 3305:    }
        -: 3306:
    #####: 3307:    return result;
        -: 3308:}
        -: 3309:
    #####: 3310:int begin_set_desired_capabilities(BEGIN_HANDLE begin, AMQP_VALUE desired_capabilities_value)
        -: 3311:{
        -: 3312:    int result;
        -: 3313:
    #####: 3314:    if (begin == NULL)
        -: 3315:    {
    #####: 3316:        result = MU_FAILURE;
        -: 3317:    }
        -: 3318:    else
        -: 3319:    {
    #####: 3320:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
        -: 3321:        AMQP_VALUE desired_capabilities_amqp_value;
    #####: 3322:        if (desired_capabilities_value == NULL)
        -: 3323:        {
    #####: 3324:            desired_capabilities_amqp_value = NULL;
        -: 3325:        }
        -: 3326:        else
        -: 3327:        {
    #####: 3328:            desired_capabilities_amqp_value = amqpvalue_clone(desired_capabilities_value);
        -: 3329:        }
    #####: 3330:        if (desired_capabilities_amqp_value == NULL)
        -: 3331:        {
    #####: 3332:            result = MU_FAILURE;
        -: 3333:        }
        -: 3334:        else
        -: 3335:        {
    #####: 3336:            if (amqpvalue_set_composite_item(begin_instance->composite_value, 6, desired_capabilities_amqp_value) != 0)
        -: 3337:            {
    #####: 3338:                result = MU_FAILURE;
        -: 3339:            }
        -: 3340:            else
        -: 3341:            {
    #####: 3342:                result = 0;
        -: 3343:            }
        -: 3344:
    #####: 3345:            amqpvalue_destroy(desired_capabilities_amqp_value);
        -: 3346:        }
        -: 3347:    }
        -: 3348:
    #####: 3349:    return result;
        -: 3350:}
        -: 3351:
    #####: 3352:int begin_get_properties(BEGIN_HANDLE begin, fields* properties_value)
        -: 3353:{
        -: 3354:    int result;
        -: 3355:
    #####: 3356:    if (begin == NULL)
        -: 3357:    {
    #####: 3358:        result = MU_FAILURE;
        -: 3359:    }
        -: 3360:    else
        -: 3361:    {
        -: 3362:        uint32_t item_count;
    #####: 3363:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 3364:        if (amqpvalue_get_composite_item_count(begin_instance->composite_value, &item_count) != 0)
        -: 3365:        {
    #####: 3366:            result = MU_FAILURE;
        -: 3367:        }
        -: 3368:        else
        -: 3369:        {
    #####: 3370:            if (item_count <= 7)
        -: 3371:            {
    #####: 3372:                result = MU_FAILURE;
        -: 3373:            }
        -: 3374:            else
        -: 3375:            {
    #####: 3376:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(begin_instance->composite_value, 7);
    #####: 3377:                if ((item_value == NULL) ||
    #####: 3378:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 3379:                {
    #####: 3380:                    result = MU_FAILURE;
        -: 3381:                }
        -: 3382:                else
        -: 3383:                {
    #####: 3384:                    int get_single_value_result = amqpvalue_get_fields(item_value, properties_value);
    #####: 3385:                    if (get_single_value_result != 0)
        -: 3386:                    {
    #####: 3387:                        result = MU_FAILURE;
        -: 3388:                    }
        -: 3389:                    else
        -: 3390:                    {
    #####: 3391:                        result = 0;
        -: 3392:                    }
        -: 3393:                }
        -: 3394:            }
        -: 3395:        }
        -: 3396:    }
        -: 3397:
    #####: 3398:    return result;
        -: 3399:}
        -: 3400:
    #####: 3401:int begin_set_properties(BEGIN_HANDLE begin, fields properties_value)
        -: 3402:{
        -: 3403:    int result;
        -: 3404:
    #####: 3405:    if (begin == NULL)
        -: 3406:    {
    #####: 3407:        result = MU_FAILURE;
        -: 3408:    }
        -: 3409:    else
        -: 3410:    {
    #####: 3411:        BEGIN_INSTANCE* begin_instance = (BEGIN_INSTANCE*)begin;
    #####: 3412:        AMQP_VALUE properties_amqp_value = amqpvalue_create_fields(properties_value);
    #####: 3413:        if (properties_amqp_value == NULL)
        -: 3414:        {
    #####: 3415:            result = MU_FAILURE;
        -: 3416:        }
        -: 3417:        else
        -: 3418:        {
    #####: 3419:            if (amqpvalue_set_composite_item(begin_instance->composite_value, 7, properties_amqp_value) != 0)
        -: 3420:            {
    #####: 3421:                result = MU_FAILURE;
        -: 3422:            }
        -: 3423:            else
        -: 3424:            {
    #####: 3425:                result = 0;
        -: 3426:            }
        -: 3427:
    #####: 3428:            amqpvalue_destroy(properties_amqp_value);
        -: 3429:        }
        -: 3430:    }
        -: 3431:
    #####: 3432:    return result;
        -: 3433:}
        -: 3434:
        -: 3435:
        -: 3436:/* attach */
        -: 3437:
        -: 3438:typedef struct ATTACH_INSTANCE_TAG
        -: 3439:{
        -: 3440:    AMQP_VALUE composite_value;
        -: 3441:} ATTACH_INSTANCE;
        -: 3442:
    #####: 3443:static ATTACH_HANDLE attach_create_internal(void)
        -: 3444:{
    #####: 3445:    ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)malloc(sizeof(ATTACH_INSTANCE));
    #####: 3446:    if (attach_instance != NULL)
        -: 3447:    {
    #####: 3448:        attach_instance->composite_value = NULL;
        -: 3449:    }
        -: 3450:
    #####: 3451:    return attach_instance;
        -: 3452:}
        -: 3453:
    #####: 3454:ATTACH_HANDLE attach_create(const char* name_value, handle handle_value, role role_value)
        -: 3455:{
    #####: 3456:    ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)malloc(sizeof(ATTACH_INSTANCE));
    #####: 3457:    if (attach_instance != NULL)
        -: 3458:    {
    #####: 3459:        attach_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(18);
    #####: 3460:        if (attach_instance->composite_value == NULL)
        -: 3461:        {
    #####: 3462:            free(attach_instance);
    #####: 3463:            attach_instance = NULL;
        -: 3464:        }
        -: 3465:        else
        -: 3466:        {
        -: 3467:            AMQP_VALUE name_amqp_value;
        -: 3468:            AMQP_VALUE handle_amqp_value;
        -: 3469:            AMQP_VALUE role_amqp_value;
    #####: 3470:            int result = 0;
        -: 3471:
    #####: 3472:            name_amqp_value = amqpvalue_create_string(name_value);
    #####: 3473:            if ((result == 0) && (amqpvalue_set_composite_item(attach_instance->composite_value, 0, name_amqp_value) != 0))
        -: 3474:            {
    #####: 3475:                result = MU_FAILURE;
        -: 3476:            }
    #####: 3477:            handle_amqp_value = amqpvalue_create_handle(handle_value);
    #####: 3478:            if ((result == 0) && (amqpvalue_set_composite_item(attach_instance->composite_value, 1, handle_amqp_value) != 0))
        -: 3479:            {
    #####: 3480:                result = MU_FAILURE;
        -: 3481:            }
    #####: 3482:            role_amqp_value = amqpvalue_create_role(role_value);
    #####: 3483:            if ((result == 0) && (amqpvalue_set_composite_item(attach_instance->composite_value, 2, role_amqp_value) != 0))
        -: 3484:            {
    #####: 3485:                result = MU_FAILURE;
        -: 3486:            }
        -: 3487:
    #####: 3488:            amqpvalue_destroy(name_amqp_value);
    #####: 3489:            amqpvalue_destroy(handle_amqp_value);
    #####: 3490:            amqpvalue_destroy(role_amqp_value);
        -: 3491:        }
        -: 3492:    }
        -: 3493:
    #####: 3494:    return attach_instance;
        -: 3495:}
        -: 3496:
    #####: 3497:ATTACH_HANDLE attach_clone(ATTACH_HANDLE value)
        -: 3498:{
    #####: 3499:    ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)malloc(sizeof(ATTACH_INSTANCE));
    #####: 3500:    if (attach_instance != NULL)
        -: 3501:    {
    #####: 3502:        attach_instance->composite_value = amqpvalue_clone(((ATTACH_INSTANCE*)value)->composite_value);
    #####: 3503:        if (attach_instance->composite_value == NULL)
        -: 3504:        {
    #####: 3505:            free(attach_instance);
    #####: 3506:            attach_instance = NULL;
        -: 3507:        }
        -: 3508:    }
        -: 3509:
    #####: 3510:    return attach_instance;
        -: 3511:}
        -: 3512:
    #####: 3513:void attach_destroy(ATTACH_HANDLE attach)
        -: 3514:{
    #####: 3515:    if (attach != NULL)
        -: 3516:    {
    #####: 3517:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 3518:        amqpvalue_destroy(attach_instance->composite_value);
    #####: 3519:        free(attach_instance);
        -: 3520:    }
    #####: 3521:}
        -: 3522:
    #####: 3523:AMQP_VALUE amqpvalue_create_attach(ATTACH_HANDLE attach)
        -: 3524:{
        -: 3525:    AMQP_VALUE result;
        -: 3526:
    #####: 3527:    if (attach == NULL)
        -: 3528:    {
    #####: 3529:        result = NULL;
        -: 3530:    }
        -: 3531:    else
        -: 3532:    {
    #####: 3533:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 3534:        result = amqpvalue_clone(attach_instance->composite_value);
        -: 3535:    }
        -: 3536:
    #####: 3537:    return result;
        -: 3538:}
        -: 3539:
    #####: 3540:bool is_attach_type_by_descriptor(AMQP_VALUE descriptor)
        -: 3541:{
        -: 3542:    bool result;
        -: 3543:
        -: 3544:    uint64_t descriptor_ulong;
    #####: 3545:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####: 3546:        (descriptor_ulong == 18))
        -: 3547:    {
    #####: 3548:        result = true;
        -: 3549:    }
        -: 3550:    else
        -: 3551:    {
    #####: 3552:        result = false;
        -: 3553:    }
        -: 3554:
    #####: 3555:    return result;
        -: 3556:}
        -: 3557:
        -: 3558:
    #####: 3559:int amqpvalue_get_attach(AMQP_VALUE value, ATTACH_HANDLE* attach_handle)
        -: 3560:{
        -: 3561:    int result;
    #####: 3562:    ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach_create_internal();
    #####: 3563:    *attach_handle = attach_instance;
    #####: 3564:    if (*attach_handle == NULL)
        -: 3565:    {
    #####: 3566:        result = MU_FAILURE;
        -: 3567:    }
        -: 3568:    else
        -: 3569:    {
    #####: 3570:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####: 3571:        if (list_value == NULL)
        -: 3572:        {
    #####: 3573:            attach_destroy(*attach_handle);
    #####: 3574:            result = MU_FAILURE;
        -: 3575:        }
        -: 3576:        else
        -: 3577:        {
        -: 3578:            uint32_t list_item_count;
    #####: 3579:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -: 3580:            {
    #####: 3581:                result = MU_FAILURE;
        -: 3582:            }
        -: 3583:            else
        -: 3584:            {
        -: 3585:                do
        -: 3586:                {
        -: 3587:                    AMQP_VALUE item_value;
        -: 3588:                    /* name */
    #####: 3589:                    if (list_item_count > 0)
        -: 3590:                    {
    #####: 3591:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####: 3592:                        if (item_value == NULL)
        -: 3593:                        {
        -: 3594:                            {
    #####: 3595:                                attach_destroy(*attach_handle);
    #####: 3596:                                result = MU_FAILURE;
    #####: 3597:                                break;
        -: 3598:                            }
        -: 3599:                        }
        -: 3600:                        else
        -: 3601:                        {
    #####: 3602:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3603:                            {
    #####: 3604:                                amqpvalue_destroy(item_value);
    #####: 3605:                                attach_destroy(*attach_handle);
    #####: 3606:                                result = MU_FAILURE;
    #####: 3607:                                break;
        -: 3608:                            }
        -: 3609:                            else
        -: 3610:                            {
        -: 3611:                                const char* name;
    #####: 3612:                                if (amqpvalue_get_string(item_value, &name) != 0)
        -: 3613:                                {
    #####: 3614:                                    amqpvalue_destroy(item_value);
    #####: 3615:                                    attach_destroy(*attach_handle);
    #####: 3616:                                    result = MU_FAILURE;
    #####: 3617:                                    break;
        -: 3618:                                }
        -: 3619:                            }
        -: 3620:
    #####: 3621:                            amqpvalue_destroy(item_value);
        -: 3622:                        }
        -: 3623:                    }
        -: 3624:                    else
        -: 3625:                    {
    #####: 3626:                        result = MU_FAILURE;
        -: 3627:                    }
        -: 3628:                    /* handle */
    #####: 3629:                    if (list_item_count > 1)
        -: 3630:                    {
    #####: 3631:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####: 3632:                        if (item_value == NULL)
        -: 3633:                        {
        -: 3634:                            {
    #####: 3635:                                attach_destroy(*attach_handle);
    #####: 3636:                                result = MU_FAILURE;
    #####: 3637:                                break;
        -: 3638:                            }
        -: 3639:                        }
        -: 3640:                        else
        -: 3641:                        {
    #####: 3642:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3643:                            {
    #####: 3644:                                amqpvalue_destroy(item_value);
    #####: 3645:                                attach_destroy(*attach_handle);
    #####: 3646:                                result = MU_FAILURE;
    #####: 3647:                                break;
        -: 3648:                            }
        -: 3649:                            else
        -: 3650:                            {
        -: 3651:                                handle handle;
    #####: 3652:                                if (amqpvalue_get_handle(item_value, &handle) != 0)
        -: 3653:                                {
    #####: 3654:                                    amqpvalue_destroy(item_value);
    #####: 3655:                                    attach_destroy(*attach_handle);
    #####: 3656:                                    result = MU_FAILURE;
    #####: 3657:                                    break;
        -: 3658:                                }
        -: 3659:                            }
        -: 3660:
    #####: 3661:                            amqpvalue_destroy(item_value);
        -: 3662:                        }
        -: 3663:                    }
        -: 3664:                    else
        -: 3665:                    {
    #####: 3666:                        result = MU_FAILURE;
        -: 3667:                    }
        -: 3668:                    /* role */
    #####: 3669:                    if (list_item_count > 2)
        -: 3670:                    {
    #####: 3671:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####: 3672:                        if (item_value == NULL)
        -: 3673:                        {
        -: 3674:                            {
    #####: 3675:                                attach_destroy(*attach_handle);
    #####: 3676:                                result = MU_FAILURE;
    #####: 3677:                                break;
        -: 3678:                            }
        -: 3679:                        }
        -: 3680:                        else
        -: 3681:                        {
    #####: 3682:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3683:                            {
    #####: 3684:                                amqpvalue_destroy(item_value);
    #####: 3685:                                attach_destroy(*attach_handle);
    #####: 3686:                                result = MU_FAILURE;
    #####: 3687:                                break;
        -: 3688:                            }
        -: 3689:                            else
        -: 3690:                            {
        -: 3691:                                role role;
    #####: 3692:                                if (amqpvalue_get_role(item_value, &role) != 0)
        -: 3693:                                {
    #####: 3694:                                    amqpvalue_destroy(item_value);
    #####: 3695:                                    attach_destroy(*attach_handle);
    #####: 3696:                                    result = MU_FAILURE;
    #####: 3697:                                    break;
        -: 3698:                                }
        -: 3699:                            }
        -: 3700:
    #####: 3701:                            amqpvalue_destroy(item_value);
        -: 3702:                        }
        -: 3703:                    }
        -: 3704:                    else
        -: 3705:                    {
    #####: 3706:                        result = MU_FAILURE;
        -: 3707:                    }
        -: 3708:                    /* snd-settle-mode */
    #####: 3709:                    if (list_item_count > 3)
        -: 3710:                    {
    #####: 3711:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####: 3712:                        if (item_value == NULL)
        -: 3713:                        {
        -: 3714:                            /* do nothing */
        -: 3715:                        }
        -: 3716:                        else
        -: 3717:                        {
    #####: 3718:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3719:                            {
        -: 3720:                                /* no error, field is not mandatory */
        -: 3721:                            }
        -: 3722:                            else
        -: 3723:                            {
        -: 3724:                                sender_settle_mode snd_settle_mode;
    #####: 3725:                                if (amqpvalue_get_sender_settle_mode(item_value, &snd_settle_mode) != 0)
        -: 3726:                                {
    #####: 3727:                                    amqpvalue_destroy(item_value);
    #####: 3728:                                    attach_destroy(*attach_handle);
    #####: 3729:                                    result = MU_FAILURE;
    #####: 3730:                                    break;
        -: 3731:                                }
        -: 3732:                            }
        -: 3733:
    #####: 3734:                            amqpvalue_destroy(item_value);
        -: 3735:                        }
        -: 3736:                    }
        -: 3737:                    /* rcv-settle-mode */
    #####: 3738:                    if (list_item_count > 4)
        -: 3739:                    {
    #####: 3740:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####: 3741:                        if (item_value == NULL)
        -: 3742:                        {
        -: 3743:                            /* do nothing */
        -: 3744:                        }
        -: 3745:                        else
        -: 3746:                        {
    #####: 3747:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3748:                            {
        -: 3749:                                /* no error, field is not mandatory */
        -: 3750:                            }
        -: 3751:                            else
        -: 3752:                            {
        -: 3753:                                receiver_settle_mode rcv_settle_mode;
    #####: 3754:                                if (amqpvalue_get_receiver_settle_mode(item_value, &rcv_settle_mode) != 0)
        -: 3755:                                {
    #####: 3756:                                    amqpvalue_destroy(item_value);
    #####: 3757:                                    attach_destroy(*attach_handle);
    #####: 3758:                                    result = MU_FAILURE;
    #####: 3759:                                    break;
        -: 3760:                                }
        -: 3761:                            }
        -: 3762:
    #####: 3763:                            amqpvalue_destroy(item_value);
        -: 3764:                        }
        -: 3765:                    }
        -: 3766:                    /* source */
    #####: 3767:                    if (list_item_count > 5)
        -: 3768:                    {
    #####: 3769:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####: 3770:                        if (item_value == NULL)
        -: 3771:                        {
        -: 3772:                            /* do nothing */
        -: 3773:                        }
        -: 3774:                        else
        -: 3775:                        {
    #####: 3776:                            amqpvalue_destroy(item_value);
        -: 3777:                        }
        -: 3778:                    }
        -: 3779:                    /* target */
    #####: 3780:                    if (list_item_count > 6)
        -: 3781:                    {
    #####: 3782:                        item_value = amqpvalue_get_list_item(list_value, 6);
    #####: 3783:                        if (item_value == NULL)
        -: 3784:                        {
        -: 3785:                            /* do nothing */
        -: 3786:                        }
        -: 3787:                        else
        -: 3788:                        {
    #####: 3789:                            amqpvalue_destroy(item_value);
        -: 3790:                        }
        -: 3791:                    }
        -: 3792:                    /* unsettled */
    #####: 3793:                    if (list_item_count > 7)
        -: 3794:                    {
    #####: 3795:                        item_value = amqpvalue_get_list_item(list_value, 7);
    #####: 3796:                        if (item_value == NULL)
        -: 3797:                        {
        -: 3798:                            /* do nothing */
        -: 3799:                        }
        -: 3800:                        else
        -: 3801:                        {
    #####: 3802:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3803:                            {
        -: 3804:                                /* no error, field is not mandatory */
        -: 3805:                            }
        -: 3806:                            else
        -: 3807:                            {
        -: 3808:                                AMQP_VALUE unsettled;
    #####: 3809:                                if (amqpvalue_get_map(item_value, &unsettled) != 0)
        -: 3810:                                {
    #####: 3811:                                    amqpvalue_destroy(item_value);
    #####: 3812:                                    attach_destroy(*attach_handle);
    #####: 3813:                                    result = MU_FAILURE;
    #####: 3814:                                    break;
        -: 3815:                                }
        -: 3816:                            }
        -: 3817:
    #####: 3818:                            amqpvalue_destroy(item_value);
        -: 3819:                        }
        -: 3820:                    }
        -: 3821:                    /* incomplete-unsettled */
    #####: 3822:                    if (list_item_count > 8)
        -: 3823:                    {
    #####: 3824:                        item_value = amqpvalue_get_list_item(list_value, 8);
    #####: 3825:                        if (item_value == NULL)
        -: 3826:                        {
        -: 3827:                            /* do nothing */
        -: 3828:                        }
        -: 3829:                        else
        -: 3830:                        {
    #####: 3831:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3832:                            {
        -: 3833:                                /* no error, field is not mandatory */
        -: 3834:                            }
        -: 3835:                            else
        -: 3836:                            {
        -: 3837:                                bool incomplete_unsettled;
    #####: 3838:                                if (amqpvalue_get_boolean(item_value, &incomplete_unsettled) != 0)
        -: 3839:                                {
    #####: 3840:                                    amqpvalue_destroy(item_value);
    #####: 3841:                                    attach_destroy(*attach_handle);
    #####: 3842:                                    result = MU_FAILURE;
    #####: 3843:                                    break;
        -: 3844:                                }
        -: 3845:                            }
        -: 3846:
    #####: 3847:                            amqpvalue_destroy(item_value);
        -: 3848:                        }
        -: 3849:                    }
        -: 3850:                    /* initial-delivery-count */
    #####: 3851:                    if (list_item_count > 9)
        -: 3852:                    {
    #####: 3853:                        item_value = amqpvalue_get_list_item(list_value, 9);
    #####: 3854:                        if (item_value == NULL)
        -: 3855:                        {
        -: 3856:                            /* do nothing */
        -: 3857:                        }
        -: 3858:                        else
        -: 3859:                        {
    #####: 3860:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3861:                            {
        -: 3862:                                /* no error, field is not mandatory */
        -: 3863:                            }
        -: 3864:                            else
        -: 3865:                            {
        -: 3866:                                sequence_no initial_delivery_count;
    #####: 3867:                                if (amqpvalue_get_sequence_no(item_value, &initial_delivery_count) != 0)
        -: 3868:                                {
    #####: 3869:                                    amqpvalue_destroy(item_value);
    #####: 3870:                                    attach_destroy(*attach_handle);
    #####: 3871:                                    result = MU_FAILURE;
    #####: 3872:                                    break;
        -: 3873:                                }
        -: 3874:                            }
        -: 3875:
    #####: 3876:                            amqpvalue_destroy(item_value);
        -: 3877:                        }
        -: 3878:                    }
        -: 3879:                    /* max-message-size */
    #####: 3880:                    if (list_item_count > 10)
        -: 3881:                    {
    #####: 3882:                        item_value = amqpvalue_get_list_item(list_value, 10);
    #####: 3883:                        if (item_value == NULL)
        -: 3884:                        {
        -: 3885:                            /* do nothing */
        -: 3886:                        }
        -: 3887:                        else
        -: 3888:                        {
    #####: 3889:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3890:                            {
        -: 3891:                                /* no error, field is not mandatory */
        -: 3892:                            }
        -: 3893:                            else
        -: 3894:                            {
        -: 3895:                                uint64_t max_message_size;
    #####: 3896:                                if (amqpvalue_get_ulong(item_value, &max_message_size) != 0)
        -: 3897:                                {
    #####: 3898:                                    amqpvalue_destroy(item_value);
    #####: 3899:                                    attach_destroy(*attach_handle);
    #####: 3900:                                    result = MU_FAILURE;
    #####: 3901:                                    break;
        -: 3902:                                }
        -: 3903:                            }
        -: 3904:
    #####: 3905:                            amqpvalue_destroy(item_value);
        -: 3906:                        }
        -: 3907:                    }
        -: 3908:                    /* offered-capabilities */
    #####: 3909:                    if (list_item_count > 11)
        -: 3910:                    {
    #####: 3911:                        item_value = amqpvalue_get_list_item(list_value, 11);
    #####: 3912:                        if (item_value == NULL)
        -: 3913:                        {
        -: 3914:                            /* do nothing */
        -: 3915:                        }
        -: 3916:                        else
        -: 3917:                        {
    #####: 3918:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3919:                            {
        -: 3920:                                /* no error, field is not mandatory */
        -: 3921:                            }
        -: 3922:                            else
        -: 3923:                            {
    #####: 3924:                                const char* offered_capabilities = NULL;
        -: 3925:                                AMQP_VALUE offered_capabilities_array;
    #####: 3926:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &offered_capabilities_array) != 0)) &&
    #####: 3927:                                    (amqpvalue_get_symbol(item_value, &offered_capabilities) != 0))
        -: 3928:                                {
    #####: 3929:                                    amqpvalue_destroy(item_value);
    #####: 3930:                                    attach_destroy(*attach_handle);
    #####: 3931:                                    result = MU_FAILURE;
    #####: 3932:                                    break;
        -: 3933:                                }
        -: 3934:                            }
        -: 3935:
    #####: 3936:                            amqpvalue_destroy(item_value);
        -: 3937:                        }
        -: 3938:                    }
        -: 3939:                    /* desired-capabilities */
    #####: 3940:                    if (list_item_count > 12)
        -: 3941:                    {
    #####: 3942:                        item_value = amqpvalue_get_list_item(list_value, 12);
    #####: 3943:                        if (item_value == NULL)
        -: 3944:                        {
        -: 3945:                            /* do nothing */
        -: 3946:                        }
        -: 3947:                        else
        -: 3948:                        {
    #####: 3949:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3950:                            {
        -: 3951:                                /* no error, field is not mandatory */
        -: 3952:                            }
        -: 3953:                            else
        -: 3954:                            {
    #####: 3955:                                const char* desired_capabilities = NULL;
        -: 3956:                                AMQP_VALUE desired_capabilities_array;
    #####: 3957:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &desired_capabilities_array) != 0)) &&
    #####: 3958:                                    (amqpvalue_get_symbol(item_value, &desired_capabilities) != 0))
        -: 3959:                                {
    #####: 3960:                                    amqpvalue_destroy(item_value);
    #####: 3961:                                    attach_destroy(*attach_handle);
    #####: 3962:                                    result = MU_FAILURE;
    #####: 3963:                                    break;
        -: 3964:                                }
        -: 3965:                            }
        -: 3966:
    #####: 3967:                            amqpvalue_destroy(item_value);
        -: 3968:                        }
        -: 3969:                    }
        -: 3970:                    /* properties */
    #####: 3971:                    if (list_item_count > 13)
        -: 3972:                    {
    #####: 3973:                        item_value = amqpvalue_get_list_item(list_value, 13);
    #####: 3974:                        if (item_value == NULL)
        -: 3975:                        {
        -: 3976:                            /* do nothing */
        -: 3977:                        }
        -: 3978:                        else
        -: 3979:                        {
    #####: 3980:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 3981:                            {
        -: 3982:                                /* no error, field is not mandatory */
        -: 3983:                            }
        -: 3984:                            else
        -: 3985:                            {
        -: 3986:                                fields properties;
    #####: 3987:                                if (amqpvalue_get_fields(item_value, &properties) != 0)
        -: 3988:                                {
    #####: 3989:                                    amqpvalue_destroy(item_value);
    #####: 3990:                                    attach_destroy(*attach_handle);
    #####: 3991:                                    result = MU_FAILURE;
    #####: 3992:                                    break;
        -: 3993:                                }
        -: 3994:                            }
        -: 3995:
    #####: 3996:                            amqpvalue_destroy(item_value);
        -: 3997:                        }
        -: 3998:                    }
        -: 3999:
    #####: 4000:                    attach_instance->composite_value = amqpvalue_clone(value);
        -: 4001:
    #####: 4002:                    result = 0;
        -: 4003:                } while((void)0,0);
        -: 4004:            }
        -: 4005:        }
        -: 4006:    }
        -: 4007:
    #####: 4008:    return result;
        -: 4009:}
        -: 4010:
    #####: 4011:int attach_get_name(ATTACH_HANDLE attach, const char** name_value)
        -: 4012:{
        -: 4013:    int result;
        -: 4014:
    #####: 4015:    if (attach == NULL)
        -: 4016:    {
    #####: 4017:        result = MU_FAILURE;
        -: 4018:    }
        -: 4019:    else
        -: 4020:    {
        -: 4021:        uint32_t item_count;
    #####: 4022:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4023:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4024:        {
    #####: 4025:            result = MU_FAILURE;
        -: 4026:        }
        -: 4027:        else
        -: 4028:        {
    #####: 4029:            if (item_count <= 0)
        -: 4030:            {
    #####: 4031:                result = MU_FAILURE;
        -: 4032:            }
        -: 4033:            else
        -: 4034:            {
    #####: 4035:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 0);
    #####: 4036:                if ((item_value == NULL) ||
    #####: 4037:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4038:                {
    #####: 4039:                    result = MU_FAILURE;
        -: 4040:                }
        -: 4041:                else
        -: 4042:                {
    #####: 4043:                    int get_single_value_result = amqpvalue_get_string(item_value, name_value);
    #####: 4044:                    if (get_single_value_result != 0)
        -: 4045:                    {
    #####: 4046:                        result = MU_FAILURE;
        -: 4047:                    }
        -: 4048:                    else
        -: 4049:                    {
    #####: 4050:                        result = 0;
        -: 4051:                    }
        -: 4052:                }
        -: 4053:            }
        -: 4054:        }
        -: 4055:    }
        -: 4056:
    #####: 4057:    return result;
        -: 4058:}
        -: 4059:
    #####: 4060:int attach_set_name(ATTACH_HANDLE attach, const char* name_value)
        -: 4061:{
        -: 4062:    int result;
        -: 4063:
    #####: 4064:    if (attach == NULL)
        -: 4065:    {
    #####: 4066:        result = MU_FAILURE;
        -: 4067:    }
        -: 4068:    else
        -: 4069:    {
    #####: 4070:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4071:        AMQP_VALUE name_amqp_value = amqpvalue_create_string(name_value);
    #####: 4072:        if (name_amqp_value == NULL)
        -: 4073:        {
    #####: 4074:            result = MU_FAILURE;
        -: 4075:        }
        -: 4076:        else
        -: 4077:        {
    #####: 4078:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 0, name_amqp_value) != 0)
        -: 4079:            {
    #####: 4080:                result = MU_FAILURE;
        -: 4081:            }
        -: 4082:            else
        -: 4083:            {
    #####: 4084:                result = 0;
        -: 4085:            }
        -: 4086:
    #####: 4087:            amqpvalue_destroy(name_amqp_value);
        -: 4088:        }
        -: 4089:    }
        -: 4090:
    #####: 4091:    return result;
        -: 4092:}
        -: 4093:
    #####: 4094:int attach_get_handle(ATTACH_HANDLE attach, handle* handle_value)
        -: 4095:{
        -: 4096:    int result;
        -: 4097:
    #####: 4098:    if (attach == NULL)
        -: 4099:    {
    #####: 4100:        result = MU_FAILURE;
        -: 4101:    }
        -: 4102:    else
        -: 4103:    {
        -: 4104:        uint32_t item_count;
    #####: 4105:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4106:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4107:        {
    #####: 4108:            result = MU_FAILURE;
        -: 4109:        }
        -: 4110:        else
        -: 4111:        {
    #####: 4112:            if (item_count <= 1)
        -: 4113:            {
    #####: 4114:                result = MU_FAILURE;
        -: 4115:            }
        -: 4116:            else
        -: 4117:            {
    #####: 4118:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 1);
    #####: 4119:                if ((item_value == NULL) ||
    #####: 4120:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4121:                {
    #####: 4122:                    result = MU_FAILURE;
        -: 4123:                }
        -: 4124:                else
        -: 4125:                {
    #####: 4126:                    int get_single_value_result = amqpvalue_get_handle(item_value, handle_value);
    #####: 4127:                    if (get_single_value_result != 0)
        -: 4128:                    {
    #####: 4129:                        result = MU_FAILURE;
        -: 4130:                    }
        -: 4131:                    else
        -: 4132:                    {
    #####: 4133:                        result = 0;
        -: 4134:                    }
        -: 4135:                }
        -: 4136:            }
        -: 4137:        }
        -: 4138:    }
        -: 4139:
    #####: 4140:    return result;
        -: 4141:}
        -: 4142:
    #####: 4143:int attach_set_handle(ATTACH_HANDLE attach, handle handle_value)
        -: 4144:{
        -: 4145:    int result;
        -: 4146:
    #####: 4147:    if (attach == NULL)
        -: 4148:    {
    #####: 4149:        result = MU_FAILURE;
        -: 4150:    }
        -: 4151:    else
        -: 4152:    {
    #####: 4153:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4154:        AMQP_VALUE handle_amqp_value = amqpvalue_create_handle(handle_value);
    #####: 4155:        if (handle_amqp_value == NULL)
        -: 4156:        {
    #####: 4157:            result = MU_FAILURE;
        -: 4158:        }
        -: 4159:        else
        -: 4160:        {
    #####: 4161:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 1, handle_amqp_value) != 0)
        -: 4162:            {
    #####: 4163:                result = MU_FAILURE;
        -: 4164:            }
        -: 4165:            else
        -: 4166:            {
    #####: 4167:                result = 0;
        -: 4168:            }
        -: 4169:
    #####: 4170:            amqpvalue_destroy(handle_amqp_value);
        -: 4171:        }
        -: 4172:    }
        -: 4173:
    #####: 4174:    return result;
        -: 4175:}
        -: 4176:
    #####: 4177:int attach_get_role(ATTACH_HANDLE attach, role* role_value)
        -: 4178:{
        -: 4179:    int result;
        -: 4180:
    #####: 4181:    if (attach == NULL)
        -: 4182:    {
    #####: 4183:        result = MU_FAILURE;
        -: 4184:    }
        -: 4185:    else
        -: 4186:    {
        -: 4187:        uint32_t item_count;
    #####: 4188:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4189:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4190:        {
    #####: 4191:            result = MU_FAILURE;
        -: 4192:        }
        -: 4193:        else
        -: 4194:        {
    #####: 4195:            if (item_count <= 2)
        -: 4196:            {
    #####: 4197:                result = MU_FAILURE;
        -: 4198:            }
        -: 4199:            else
        -: 4200:            {
    #####: 4201:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 2);
    #####: 4202:                if ((item_value == NULL) ||
    #####: 4203:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4204:                {
    #####: 4205:                    result = MU_FAILURE;
        -: 4206:                }
        -: 4207:                else
        -: 4208:                {
    #####: 4209:                    int get_single_value_result = amqpvalue_get_role(item_value, role_value);
    #####: 4210:                    if (get_single_value_result != 0)
        -: 4211:                    {
    #####: 4212:                        result = MU_FAILURE;
        -: 4213:                    }
        -: 4214:                    else
        -: 4215:                    {
    #####: 4216:                        result = 0;
        -: 4217:                    }
        -: 4218:                }
        -: 4219:            }
        -: 4220:        }
        -: 4221:    }
        -: 4222:
    #####: 4223:    return result;
        -: 4224:}
        -: 4225:
    #####: 4226:int attach_set_role(ATTACH_HANDLE attach, role role_value)
        -: 4227:{
        -: 4228:    int result;
        -: 4229:
    #####: 4230:    if (attach == NULL)
        -: 4231:    {
    #####: 4232:        result = MU_FAILURE;
        -: 4233:    }
        -: 4234:    else
        -: 4235:    {
    #####: 4236:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4237:        AMQP_VALUE role_amqp_value = amqpvalue_create_role(role_value);
    #####: 4238:        if (role_amqp_value == NULL)
        -: 4239:        {
    #####: 4240:            result = MU_FAILURE;
        -: 4241:        }
        -: 4242:        else
        -: 4243:        {
    #####: 4244:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 2, role_amqp_value) != 0)
        -: 4245:            {
    #####: 4246:                result = MU_FAILURE;
        -: 4247:            }
        -: 4248:            else
        -: 4249:            {
    #####: 4250:                result = 0;
        -: 4251:            }
        -: 4252:
    #####: 4253:            amqpvalue_destroy(role_amqp_value);
        -: 4254:        }
        -: 4255:    }
        -: 4256:
    #####: 4257:    return result;
        -: 4258:}
        -: 4259:
    #####: 4260:int attach_get_snd_settle_mode(ATTACH_HANDLE attach, sender_settle_mode* snd_settle_mode_value)
        -: 4261:{
        -: 4262:    int result;
        -: 4263:
    #####: 4264:    if (attach == NULL)
        -: 4265:    {
    #####: 4266:        result = MU_FAILURE;
        -: 4267:    }
        -: 4268:    else
        -: 4269:    {
        -: 4270:        uint32_t item_count;
    #####: 4271:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4272:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4273:        {
    #####: 4274:            result = MU_FAILURE;
        -: 4275:        }
        -: 4276:        else
        -: 4277:        {
    #####: 4278:            if (item_count <= 3)
        -: 4279:            {
    #####: 4280:                *snd_settle_mode_value = sender_settle_mode_mixed;
    #####: 4281:                result = 0;
        -: 4282:            }
        -: 4283:            else
        -: 4284:            {
    #####: 4285:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 3);
    #####: 4286:                if ((item_value == NULL) ||
    #####: 4287:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4288:                {
    #####: 4289:                    *snd_settle_mode_value = sender_settle_mode_mixed;
    #####: 4290:                    result = 0;
        -: 4291:                }
        -: 4292:                else
        -: 4293:                {
    #####: 4294:                    int get_single_value_result = amqpvalue_get_sender_settle_mode(item_value, snd_settle_mode_value);
    #####: 4295:                    if (get_single_value_result != 0)
        -: 4296:                    {
    #####: 4297:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 4298:                        {
    #####: 4299:                            result = MU_FAILURE;
        -: 4300:                        }
        -: 4301:                        else
        -: 4302:                        {
    #####: 4303:                            *snd_settle_mode_value = sender_settle_mode_mixed;
    #####: 4304:                            result = 0;
        -: 4305:                        }
        -: 4306:                    }
        -: 4307:                    else
        -: 4308:                    {
    #####: 4309:                        result = 0;
        -: 4310:                    }
        -: 4311:                }
        -: 4312:            }
        -: 4313:        }
        -: 4314:    }
        -: 4315:
    #####: 4316:    return result;
        -: 4317:}
        -: 4318:
    #####: 4319:int attach_set_snd_settle_mode(ATTACH_HANDLE attach, sender_settle_mode snd_settle_mode_value)
        -: 4320:{
        -: 4321:    int result;
        -: 4322:
    #####: 4323:    if (attach == NULL)
        -: 4324:    {
    #####: 4325:        result = MU_FAILURE;
        -: 4326:    }
        -: 4327:    else
        -: 4328:    {
    #####: 4329:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4330:        AMQP_VALUE snd_settle_mode_amqp_value = amqpvalue_create_sender_settle_mode(snd_settle_mode_value);
    #####: 4331:        if (snd_settle_mode_amqp_value == NULL)
        -: 4332:        {
    #####: 4333:            result = MU_FAILURE;
        -: 4334:        }
        -: 4335:        else
        -: 4336:        {
    #####: 4337:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 3, snd_settle_mode_amqp_value) != 0)
        -: 4338:            {
    #####: 4339:                result = MU_FAILURE;
        -: 4340:            }
        -: 4341:            else
        -: 4342:            {
    #####: 4343:                result = 0;
        -: 4344:            }
        -: 4345:
    #####: 4346:            amqpvalue_destroy(snd_settle_mode_amqp_value);
        -: 4347:        }
        -: 4348:    }
        -: 4349:
    #####: 4350:    return result;
        -: 4351:}
        -: 4352:
    #####: 4353:int attach_get_rcv_settle_mode(ATTACH_HANDLE attach, receiver_settle_mode* rcv_settle_mode_value)
        -: 4354:{
        -: 4355:    int result;
        -: 4356:
    #####: 4357:    if (attach == NULL)
        -: 4358:    {
    #####: 4359:        result = MU_FAILURE;
        -: 4360:    }
        -: 4361:    else
        -: 4362:    {
        -: 4363:        uint32_t item_count;
    #####: 4364:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4365:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4366:        {
    #####: 4367:            result = MU_FAILURE;
        -: 4368:        }
        -: 4369:        else
        -: 4370:        {
    #####: 4371:            if (item_count <= 4)
        -: 4372:            {
    #####: 4373:                *rcv_settle_mode_value = receiver_settle_mode_first;
    #####: 4374:                result = 0;
        -: 4375:            }
        -: 4376:            else
        -: 4377:            {
    #####: 4378:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 4);
    #####: 4379:                if ((item_value == NULL) ||
    #####: 4380:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4381:                {
    #####: 4382:                    *rcv_settle_mode_value = receiver_settle_mode_first;
    #####: 4383:                    result = 0;
        -: 4384:                }
        -: 4385:                else
        -: 4386:                {
    #####: 4387:                    int get_single_value_result = amqpvalue_get_receiver_settle_mode(item_value, rcv_settle_mode_value);
    #####: 4388:                    if (get_single_value_result != 0)
        -: 4389:                    {
    #####: 4390:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 4391:                        {
    #####: 4392:                            result = MU_FAILURE;
        -: 4393:                        }
        -: 4394:                        else
        -: 4395:                        {
    #####: 4396:                            *rcv_settle_mode_value = receiver_settle_mode_first;
    #####: 4397:                            result = 0;
        -: 4398:                        }
        -: 4399:                    }
        -: 4400:                    else
        -: 4401:                    {
    #####: 4402:                        result = 0;
        -: 4403:                    }
        -: 4404:                }
        -: 4405:            }
        -: 4406:        }
        -: 4407:    }
        -: 4408:
    #####: 4409:    return result;
        -: 4410:}
        -: 4411:
    #####: 4412:int attach_set_rcv_settle_mode(ATTACH_HANDLE attach, receiver_settle_mode rcv_settle_mode_value)
        -: 4413:{
        -: 4414:    int result;
        -: 4415:
    #####: 4416:    if (attach == NULL)
        -: 4417:    {
    #####: 4418:        result = MU_FAILURE;
        -: 4419:    }
        -: 4420:    else
        -: 4421:    {
    #####: 4422:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4423:        AMQP_VALUE rcv_settle_mode_amqp_value = amqpvalue_create_receiver_settle_mode(rcv_settle_mode_value);
    #####: 4424:        if (rcv_settle_mode_amqp_value == NULL)
        -: 4425:        {
    #####: 4426:            result = MU_FAILURE;
        -: 4427:        }
        -: 4428:        else
        -: 4429:        {
    #####: 4430:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 4, rcv_settle_mode_amqp_value) != 0)
        -: 4431:            {
    #####: 4432:                result = MU_FAILURE;
        -: 4433:            }
        -: 4434:            else
        -: 4435:            {
    #####: 4436:                result = 0;
        -: 4437:            }
        -: 4438:
    #####: 4439:            amqpvalue_destroy(rcv_settle_mode_amqp_value);
        -: 4440:        }
        -: 4441:    }
        -: 4442:
    #####: 4443:    return result;
        -: 4444:}
        -: 4445:
    #####: 4446:int attach_get_source(ATTACH_HANDLE attach, AMQP_VALUE* source_value)
        -: 4447:{
        -: 4448:    int result;
        -: 4449:
    #####: 4450:    if (attach == NULL)
        -: 4451:    {
    #####: 4452:        result = MU_FAILURE;
        -: 4453:    }
        -: 4454:    else
        -: 4455:    {
        -: 4456:        uint32_t item_count;
    #####: 4457:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4458:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4459:        {
    #####: 4460:            result = MU_FAILURE;
        -: 4461:        }
        -: 4462:        else
        -: 4463:        {
    #####: 4464:            if (item_count <= 5)
        -: 4465:            {
    #####: 4466:                result = MU_FAILURE;
        -: 4467:            }
        -: 4468:            else
        -: 4469:            {
    #####: 4470:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 5);
    #####: 4471:                if ((item_value == NULL) ||
    #####: 4472:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4473:                {
    #####: 4474:                    result = MU_FAILURE;
        -: 4475:                }
        -: 4476:                else
        -: 4477:                {
    #####: 4478:                    *source_value = item_value;
    #####: 4479:                    result = 0;
        -: 4480:                }
        -: 4481:            }
        -: 4482:        }
        -: 4483:    }
        -: 4484:
    #####: 4485:    return result;
        -: 4486:}
        -: 4487:
    #####: 4488:int attach_set_source(ATTACH_HANDLE attach, AMQP_VALUE source_value)
        -: 4489:{
        -: 4490:    int result;
        -: 4491:
    #####: 4492:    if (attach == NULL)
        -: 4493:    {
    #####: 4494:        result = MU_FAILURE;
        -: 4495:    }
        -: 4496:    else
        -: 4497:    {
    #####: 4498:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
        -: 4499:        AMQP_VALUE source_amqp_value;
    #####: 4500:        if (source_value == NULL)
        -: 4501:        {
    #####: 4502:            source_amqp_value = NULL;
        -: 4503:        }
        -: 4504:        else
        -: 4505:        {
    #####: 4506:            source_amqp_value = amqpvalue_clone(source_value);
        -: 4507:        }
    #####: 4508:        if (source_amqp_value == NULL)
        -: 4509:        {
    #####: 4510:            result = MU_FAILURE;
        -: 4511:        }
        -: 4512:        else
        -: 4513:        {
    #####: 4514:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 5, source_amqp_value) != 0)
        -: 4515:            {
    #####: 4516:                result = MU_FAILURE;
        -: 4517:            }
        -: 4518:            else
        -: 4519:            {
    #####: 4520:                result = 0;
        -: 4521:            }
        -: 4522:
    #####: 4523:            amqpvalue_destroy(source_amqp_value);
        -: 4524:        }
        -: 4525:    }
        -: 4526:
    #####: 4527:    return result;
        -: 4528:}
        -: 4529:
    #####: 4530:int attach_get_target(ATTACH_HANDLE attach, AMQP_VALUE* target_value)
        -: 4531:{
        -: 4532:    int result;
        -: 4533:
    #####: 4534:    if (attach == NULL)
        -: 4535:    {
    #####: 4536:        result = MU_FAILURE;
        -: 4537:    }
        -: 4538:    else
        -: 4539:    {
        -: 4540:        uint32_t item_count;
    #####: 4541:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4542:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4543:        {
    #####: 4544:            result = MU_FAILURE;
        -: 4545:        }
        -: 4546:        else
        -: 4547:        {
    #####: 4548:            if (item_count <= 6)
        -: 4549:            {
    #####: 4550:                result = MU_FAILURE;
        -: 4551:            }
        -: 4552:            else
        -: 4553:            {
    #####: 4554:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 6);
    #####: 4555:                if ((item_value == NULL) ||
    #####: 4556:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4557:                {
    #####: 4558:                    result = MU_FAILURE;
        -: 4559:                }
        -: 4560:                else
        -: 4561:                {
    #####: 4562:                    *target_value = item_value;
    #####: 4563:                    result = 0;
        -: 4564:                }
        -: 4565:            }
        -: 4566:        }
        -: 4567:    }
        -: 4568:
    #####: 4569:    return result;
        -: 4570:}
        -: 4571:
    #####: 4572:int attach_set_target(ATTACH_HANDLE attach, AMQP_VALUE target_value)
        -: 4573:{
        -: 4574:    int result;
        -: 4575:
    #####: 4576:    if (attach == NULL)
        -: 4577:    {
    #####: 4578:        result = MU_FAILURE;
        -: 4579:    }
        -: 4580:    else
        -: 4581:    {
    #####: 4582:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
        -: 4583:        AMQP_VALUE target_amqp_value;
    #####: 4584:        if (target_value == NULL)
        -: 4585:        {
    #####: 4586:            target_amqp_value = NULL;
        -: 4587:        }
        -: 4588:        else
        -: 4589:        {
    #####: 4590:            target_amqp_value = amqpvalue_clone(target_value);
        -: 4591:        }
    #####: 4592:        if (target_amqp_value == NULL)
        -: 4593:        {
    #####: 4594:            result = MU_FAILURE;
        -: 4595:        }
        -: 4596:        else
        -: 4597:        {
    #####: 4598:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 6, target_amqp_value) != 0)
        -: 4599:            {
    #####: 4600:                result = MU_FAILURE;
        -: 4601:            }
        -: 4602:            else
        -: 4603:            {
    #####: 4604:                result = 0;
        -: 4605:            }
        -: 4606:
    #####: 4607:            amqpvalue_destroy(target_amqp_value);
        -: 4608:        }
        -: 4609:    }
        -: 4610:
    #####: 4611:    return result;
        -: 4612:}
        -: 4613:
    #####: 4614:int attach_get_unsettled(ATTACH_HANDLE attach, AMQP_VALUE* unsettled_value)
        -: 4615:{
        -: 4616:    int result;
        -: 4617:
    #####: 4618:    if (attach == NULL)
        -: 4619:    {
    #####: 4620:        result = MU_FAILURE;
        -: 4621:    }
        -: 4622:    else
        -: 4623:    {
        -: 4624:        uint32_t item_count;
    #####: 4625:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4626:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4627:        {
    #####: 4628:            result = MU_FAILURE;
        -: 4629:        }
        -: 4630:        else
        -: 4631:        {
    #####: 4632:            if (item_count <= 7)
        -: 4633:            {
    #####: 4634:                result = MU_FAILURE;
        -: 4635:            }
        -: 4636:            else
        -: 4637:            {
    #####: 4638:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 7);
    #####: 4639:                if ((item_value == NULL) ||
    #####: 4640:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4641:                {
    #####: 4642:                    result = MU_FAILURE;
        -: 4643:                }
        -: 4644:                else
        -: 4645:                {
    #####: 4646:                    int get_single_value_result = amqpvalue_get_map(item_value, unsettled_value);
    #####: 4647:                    if (get_single_value_result != 0)
        -: 4648:                    {
    #####: 4649:                        result = MU_FAILURE;
        -: 4650:                    }
        -: 4651:                    else
        -: 4652:                    {
    #####: 4653:                        result = 0;
        -: 4654:                    }
        -: 4655:                }
        -: 4656:            }
        -: 4657:        }
        -: 4658:    }
        -: 4659:
    #####: 4660:    return result;
        -: 4661:}
        -: 4662:
    #####: 4663:int attach_set_unsettled(ATTACH_HANDLE attach, AMQP_VALUE unsettled_value)
        -: 4664:{
        -: 4665:    int result;
        -: 4666:
    #####: 4667:    if (attach == NULL)
        -: 4668:    {
    #####: 4669:        result = MU_FAILURE;
        -: 4670:    }
        -: 4671:    else
        -: 4672:    {
    #####: 4673:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
        -: 4674:        AMQP_VALUE unsettled_amqp_value;
    #####: 4675:        if (unsettled_value == NULL)
        -: 4676:        {
    #####: 4677:            unsettled_amqp_value = NULL;
        -: 4678:        }
        -: 4679:        else
        -: 4680:        {
    #####: 4681:            unsettled_amqp_value = amqpvalue_clone(unsettled_value);
        -: 4682:        }
    #####: 4683:        if (unsettled_amqp_value == NULL)
        -: 4684:        {
    #####: 4685:            result = MU_FAILURE;
        -: 4686:        }
        -: 4687:        else
        -: 4688:        {
    #####: 4689:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 7, unsettled_amqp_value) != 0)
        -: 4690:            {
    #####: 4691:                result = MU_FAILURE;
        -: 4692:            }
        -: 4693:            else
        -: 4694:            {
    #####: 4695:                result = 0;
        -: 4696:            }
        -: 4697:
    #####: 4698:            amqpvalue_destroy(unsettled_amqp_value);
        -: 4699:        }
        -: 4700:    }
        -: 4701:
    #####: 4702:    return result;
        -: 4703:}
        -: 4704:
    #####: 4705:int attach_get_incomplete_unsettled(ATTACH_HANDLE attach, bool* incomplete_unsettled_value)
        -: 4706:{
        -: 4707:    int result;
        -: 4708:
    #####: 4709:    if (attach == NULL)
        -: 4710:    {
    #####: 4711:        result = MU_FAILURE;
        -: 4712:    }
        -: 4713:    else
        -: 4714:    {
        -: 4715:        uint32_t item_count;
    #####: 4716:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4717:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4718:        {
    #####: 4719:            result = MU_FAILURE;
        -: 4720:        }
        -: 4721:        else
        -: 4722:        {
    #####: 4723:            if (item_count <= 8)
        -: 4724:            {
    #####: 4725:                *incomplete_unsettled_value = false;
    #####: 4726:                result = 0;
        -: 4727:            }
        -: 4728:            else
        -: 4729:            {
    #####: 4730:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 8);
    #####: 4731:                if ((item_value == NULL) ||
    #####: 4732:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4733:                {
    #####: 4734:                    *incomplete_unsettled_value = false;
    #####: 4735:                    result = 0;
        -: 4736:                }
        -: 4737:                else
        -: 4738:                {
    #####: 4739:                    int get_single_value_result = amqpvalue_get_boolean(item_value, incomplete_unsettled_value);
    #####: 4740:                    if (get_single_value_result != 0)
        -: 4741:                    {
    #####: 4742:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 4743:                        {
    #####: 4744:                            result = MU_FAILURE;
        -: 4745:                        }
        -: 4746:                        else
        -: 4747:                        {
    #####: 4748:                            *incomplete_unsettled_value = false;
    #####: 4749:                            result = 0;
        -: 4750:                        }
        -: 4751:                    }
        -: 4752:                    else
        -: 4753:                    {
    #####: 4754:                        result = 0;
        -: 4755:                    }
        -: 4756:                }
        -: 4757:            }
        -: 4758:        }
        -: 4759:    }
        -: 4760:
    #####: 4761:    return result;
        -: 4762:}
        -: 4763:
    #####: 4764:int attach_set_incomplete_unsettled(ATTACH_HANDLE attach, bool incomplete_unsettled_value)
        -: 4765:{
        -: 4766:    int result;
        -: 4767:
    #####: 4768:    if (attach == NULL)
        -: 4769:    {
    #####: 4770:        result = MU_FAILURE;
        -: 4771:    }
        -: 4772:    else
        -: 4773:    {
    #####: 4774:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4775:        AMQP_VALUE incomplete_unsettled_amqp_value = amqpvalue_create_boolean(incomplete_unsettled_value);
    #####: 4776:        if (incomplete_unsettled_amqp_value == NULL)
        -: 4777:        {
    #####: 4778:            result = MU_FAILURE;
        -: 4779:        }
        -: 4780:        else
        -: 4781:        {
    #####: 4782:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 8, incomplete_unsettled_amqp_value) != 0)
        -: 4783:            {
    #####: 4784:                result = MU_FAILURE;
        -: 4785:            }
        -: 4786:            else
        -: 4787:            {
    #####: 4788:                result = 0;
        -: 4789:            }
        -: 4790:
    #####: 4791:            amqpvalue_destroy(incomplete_unsettled_amqp_value);
        -: 4792:        }
        -: 4793:    }
        -: 4794:
    #####: 4795:    return result;
        -: 4796:}
        -: 4797:
    #####: 4798:int attach_get_initial_delivery_count(ATTACH_HANDLE attach, sequence_no* initial_delivery_count_value)
        -: 4799:{
        -: 4800:    int result;
        -: 4801:
    #####: 4802:    if (attach == NULL)
        -: 4803:    {
    #####: 4804:        result = MU_FAILURE;
        -: 4805:    }
        -: 4806:    else
        -: 4807:    {
        -: 4808:        uint32_t item_count;
    #####: 4809:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4810:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4811:        {
    #####: 4812:            result = MU_FAILURE;
        -: 4813:        }
        -: 4814:        else
        -: 4815:        {
    #####: 4816:            if (item_count <= 9)
        -: 4817:            {
    #####: 4818:                result = MU_FAILURE;
        -: 4819:            }
        -: 4820:            else
        -: 4821:            {
    #####: 4822:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 9);
    #####: 4823:                if ((item_value == NULL) ||
    #####: 4824:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4825:                {
    #####: 4826:                    result = MU_FAILURE;
        -: 4827:                }
        -: 4828:                else
        -: 4829:                {
    #####: 4830:                    int get_single_value_result = amqpvalue_get_sequence_no(item_value, initial_delivery_count_value);
    #####: 4831:                    if (get_single_value_result != 0)
        -: 4832:                    {
    #####: 4833:                        result = MU_FAILURE;
        -: 4834:                    }
        -: 4835:                    else
        -: 4836:                    {
    #####: 4837:                        result = 0;
        -: 4838:                    }
        -: 4839:                }
        -: 4840:            }
        -: 4841:        }
        -: 4842:    }
        -: 4843:
    #####: 4844:    return result;
        -: 4845:}
        -: 4846:
    #####: 4847:int attach_set_initial_delivery_count(ATTACH_HANDLE attach, sequence_no initial_delivery_count_value)
        -: 4848:{
        -: 4849:    int result;
        -: 4850:
    #####: 4851:    if (attach == NULL)
        -: 4852:    {
    #####: 4853:        result = MU_FAILURE;
        -: 4854:    }
        -: 4855:    else
        -: 4856:    {
    #####: 4857:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4858:        AMQP_VALUE initial_delivery_count_amqp_value = amqpvalue_create_sequence_no(initial_delivery_count_value);
    #####: 4859:        if (initial_delivery_count_amqp_value == NULL)
        -: 4860:        {
    #####: 4861:            result = MU_FAILURE;
        -: 4862:        }
        -: 4863:        else
        -: 4864:        {
    #####: 4865:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 9, initial_delivery_count_amqp_value) != 0)
        -: 4866:            {
    #####: 4867:                result = MU_FAILURE;
        -: 4868:            }
        -: 4869:            else
        -: 4870:            {
    #####: 4871:                result = 0;
        -: 4872:            }
        -: 4873:
    #####: 4874:            amqpvalue_destroy(initial_delivery_count_amqp_value);
        -: 4875:        }
        -: 4876:    }
        -: 4877:
    #####: 4878:    return result;
        -: 4879:}
        -: 4880:
    #####: 4881:int attach_get_max_message_size(ATTACH_HANDLE attach, uint64_t* max_message_size_value)
        -: 4882:{
        -: 4883:    int result;
        -: 4884:
    #####: 4885:    if (attach == NULL)
        -: 4886:    {
    #####: 4887:        result = MU_FAILURE;
        -: 4888:    }
        -: 4889:    else
        -: 4890:    {
        -: 4891:        uint32_t item_count;
    #####: 4892:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4893:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4894:        {
    #####: 4895:            result = MU_FAILURE;
        -: 4896:        }
        -: 4897:        else
        -: 4898:        {
    #####: 4899:            if (item_count <= 10)
        -: 4900:            {
    #####: 4901:                result = MU_FAILURE;
        -: 4902:            }
        -: 4903:            else
        -: 4904:            {
    #####: 4905:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 10);
    #####: 4906:                if ((item_value == NULL) ||
    #####: 4907:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4908:                {
    #####: 4909:                    result = MU_FAILURE;
        -: 4910:                }
        -: 4911:                else
        -: 4912:                {
    #####: 4913:                    int get_single_value_result = amqpvalue_get_ulong(item_value, max_message_size_value);
    #####: 4914:                    if (get_single_value_result != 0)
        -: 4915:                    {
    #####: 4916:                        result = MU_FAILURE;
        -: 4917:                    }
        -: 4918:                    else
        -: 4919:                    {
    #####: 4920:                        result = 0;
        -: 4921:                    }
        -: 4922:                }
        -: 4923:            }
        -: 4924:        }
        -: 4925:    }
        -: 4926:
    #####: 4927:    return result;
        -: 4928:}
        -: 4929:
    #####: 4930:int attach_set_max_message_size(ATTACH_HANDLE attach, uint64_t max_message_size_value)
        -: 4931:{
        -: 4932:    int result;
        -: 4933:
    #####: 4934:    if (attach == NULL)
        -: 4935:    {
    #####: 4936:        result = MU_FAILURE;
        -: 4937:    }
        -: 4938:    else
        -: 4939:    {
    #####: 4940:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4941:        AMQP_VALUE max_message_size_amqp_value = amqpvalue_create_ulong(max_message_size_value);
    #####: 4942:        if (max_message_size_amqp_value == NULL)
        -: 4943:        {
    #####: 4944:            result = MU_FAILURE;
        -: 4945:        }
        -: 4946:        else
        -: 4947:        {
    #####: 4948:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 10, max_message_size_amqp_value) != 0)
        -: 4949:            {
    #####: 4950:                result = MU_FAILURE;
        -: 4951:            }
        -: 4952:            else
        -: 4953:            {
    #####: 4954:                result = 0;
        -: 4955:            }
        -: 4956:
    #####: 4957:            amqpvalue_destroy(max_message_size_amqp_value);
        -: 4958:        }
        -: 4959:    }
        -: 4960:
    #####: 4961:    return result;
        -: 4962:}
        -: 4963:
    #####: 4964:int attach_get_offered_capabilities(ATTACH_HANDLE attach, AMQP_VALUE* offered_capabilities_value)
        -: 4965:{
        -: 4966:    int result;
        -: 4967:
    #####: 4968:    if (attach == NULL)
        -: 4969:    {
    #####: 4970:        result = MU_FAILURE;
        -: 4971:    }
        -: 4972:    else
        -: 4973:    {
        -: 4974:        uint32_t item_count;
    #####: 4975:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 4976:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 4977:        {
    #####: 4978:            result = MU_FAILURE;
        -: 4979:        }
        -: 4980:        else
        -: 4981:        {
    #####: 4982:            if (item_count <= 11)
        -: 4983:            {
    #####: 4984:                result = MU_FAILURE;
        -: 4985:            }
        -: 4986:            else
        -: 4987:            {
    #####: 4988:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 11);
    #####: 4989:                if ((item_value == NULL) ||
    #####: 4990:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 4991:                {
    #####: 4992:                    result = MU_FAILURE;
        -: 4993:                }
        -: 4994:                else
        -: 4995:                {
        -: 4996:                    const char* offered_capabilities_single_value;
        -: 4997:                    int get_single_value_result;
    #####: 4998:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 4999:                    {
    #####: 5000:                        get_single_value_result = amqpvalue_get_symbol(item_value, &offered_capabilities_single_value);
        -: 5001:                    }
        -: 5002:                    else
        -: 5003:                    {
    #####: 5004:                        (void)memset((void*)&offered_capabilities_single_value, 0, sizeof(offered_capabilities_single_value));
    #####: 5005:                        get_single_value_result = 1;
        -: 5006:                    }
        -: 5007:
    #####: 5008:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, offered_capabilities_value) != 0)) &&
        -: 5009:                        (get_single_value_result != 0))
        -: 5010:                    {
    #####: 5011:                        result = MU_FAILURE;
        -: 5012:                    }
        -: 5013:                    else
        -: 5014:                    {
    #####: 5015:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 5016:                        {
    #####: 5017:                            *offered_capabilities_value = amqpvalue_create_array();
    #####: 5018:                            if (*offered_capabilities_value == NULL)
        -: 5019:                            {
    #####: 5020:                                result = MU_FAILURE;
        -: 5021:                            }
        -: 5022:                            else
        -: 5023:                            {
    #####: 5024:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(offered_capabilities_single_value);
    #####: 5025:                                if (single_amqp_value == NULL)
        -: 5026:                                {
    #####: 5027:                                    amqpvalue_destroy(*offered_capabilities_value);
    #####: 5028:                                    result = MU_FAILURE;
        -: 5029:                                }
        -: 5030:                                else
        -: 5031:                                {
    #####: 5032:                                    if (amqpvalue_add_array_item(*offered_capabilities_value, single_amqp_value) != 0)
        -: 5033:                                    {
    #####: 5034:                                        amqpvalue_destroy(*offered_capabilities_value);
    #####: 5035:                                        amqpvalue_destroy(single_amqp_value);
    #####: 5036:                                        result = MU_FAILURE;
        -: 5037:                                    }
        -: 5038:                                    else
        -: 5039:                                    {
    #####: 5040:                                        if (amqpvalue_set_composite_item(attach_instance->composite_value, 11, *offered_capabilities_value) != 0)
        -: 5041:                                        {
    #####: 5042:                                            amqpvalue_destroy(*offered_capabilities_value);
    #####: 5043:                                            result = MU_FAILURE;
        -: 5044:                                        }
        -: 5045:                                        else
        -: 5046:                                        {
    #####: 5047:                                            result = 0;
        -: 5048:                                        }
        -: 5049:                                    }
        -: 5050:
    #####: 5051:                                    amqpvalue_destroy(single_amqp_value);
        -: 5052:                                }
    #####: 5053:                                amqpvalue_destroy(*offered_capabilities_value);
        -: 5054:                            }
        -: 5055:                        }
        -: 5056:                        else
        -: 5057:                        {
    #####: 5058:                            result = 0;
        -: 5059:                        }
        -: 5060:                    }
        -: 5061:                }
        -: 5062:            }
        -: 5063:        }
        -: 5064:    }
        -: 5065:
    #####: 5066:    return result;
        -: 5067:}
        -: 5068:
    #####: 5069:int attach_set_offered_capabilities(ATTACH_HANDLE attach, AMQP_VALUE offered_capabilities_value)
        -: 5070:{
        -: 5071:    int result;
        -: 5072:
    #####: 5073:    if (attach == NULL)
        -: 5074:    {
    #####: 5075:        result = MU_FAILURE;
        -: 5076:    }
        -: 5077:    else
        -: 5078:    {
    #####: 5079:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
        -: 5080:        AMQP_VALUE offered_capabilities_amqp_value;
    #####: 5081:        if (offered_capabilities_value == NULL)
        -: 5082:        {
    #####: 5083:            offered_capabilities_amqp_value = NULL;
        -: 5084:        }
        -: 5085:        else
        -: 5086:        {
    #####: 5087:            offered_capabilities_amqp_value = amqpvalue_clone(offered_capabilities_value);
        -: 5088:        }
    #####: 5089:        if (offered_capabilities_amqp_value == NULL)
        -: 5090:        {
    #####: 5091:            result = MU_FAILURE;
        -: 5092:        }
        -: 5093:        else
        -: 5094:        {
    #####: 5095:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 11, offered_capabilities_amqp_value) != 0)
        -: 5096:            {
    #####: 5097:                result = MU_FAILURE;
        -: 5098:            }
        -: 5099:            else
        -: 5100:            {
    #####: 5101:                result = 0;
        -: 5102:            }
        -: 5103:
    #####: 5104:            amqpvalue_destroy(offered_capabilities_amqp_value);
        -: 5105:        }
        -: 5106:    }
        -: 5107:
    #####: 5108:    return result;
        -: 5109:}
        -: 5110:
    #####: 5111:int attach_get_desired_capabilities(ATTACH_HANDLE attach, AMQP_VALUE* desired_capabilities_value)
        -: 5112:{
        -: 5113:    int result;
        -: 5114:
    #####: 5115:    if (attach == NULL)
        -: 5116:    {
    #####: 5117:        result = MU_FAILURE;
        -: 5118:    }
        -: 5119:    else
        -: 5120:    {
        -: 5121:        uint32_t item_count;
    #####: 5122:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 5123:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 5124:        {
    #####: 5125:            result = MU_FAILURE;
        -: 5126:        }
        -: 5127:        else
        -: 5128:        {
    #####: 5129:            if (item_count <= 12)
        -: 5130:            {
    #####: 5131:                result = MU_FAILURE;
        -: 5132:            }
        -: 5133:            else
        -: 5134:            {
    #####: 5135:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 12);
    #####: 5136:                if ((item_value == NULL) ||
    #####: 5137:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 5138:                {
    #####: 5139:                    result = MU_FAILURE;
        -: 5140:                }
        -: 5141:                else
        -: 5142:                {
        -: 5143:                    const char* desired_capabilities_single_value;
        -: 5144:                    int get_single_value_result;
    #####: 5145:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 5146:                    {
    #####: 5147:                        get_single_value_result = amqpvalue_get_symbol(item_value, &desired_capabilities_single_value);
        -: 5148:                    }
        -: 5149:                    else
        -: 5150:                    {
    #####: 5151:                        (void)memset((void*)&desired_capabilities_single_value, 0, sizeof(desired_capabilities_single_value));
    #####: 5152:                        get_single_value_result = 1;
        -: 5153:                    }
        -: 5154:
    #####: 5155:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, desired_capabilities_value) != 0)) &&
        -: 5156:                        (get_single_value_result != 0))
        -: 5157:                    {
    #####: 5158:                        result = MU_FAILURE;
        -: 5159:                    }
        -: 5160:                    else
        -: 5161:                    {
    #####: 5162:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -: 5163:                        {
    #####: 5164:                            *desired_capabilities_value = amqpvalue_create_array();
    #####: 5165:                            if (*desired_capabilities_value == NULL)
        -: 5166:                            {
    #####: 5167:                                result = MU_FAILURE;
        -: 5168:                            }
        -: 5169:                            else
        -: 5170:                            {
    #####: 5171:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(desired_capabilities_single_value);
    #####: 5172:                                if (single_amqp_value == NULL)
        -: 5173:                                {
    #####: 5174:                                    amqpvalue_destroy(*desired_capabilities_value);
    #####: 5175:                                    result = MU_FAILURE;
        -: 5176:                                }
        -: 5177:                                else
        -: 5178:                                {
    #####: 5179:                                    if (amqpvalue_add_array_item(*desired_capabilities_value, single_amqp_value) != 0)
        -: 5180:                                    {
    #####: 5181:                                        amqpvalue_destroy(*desired_capabilities_value);
    #####: 5182:                                        amqpvalue_destroy(single_amqp_value);
    #####: 5183:                                        result = MU_FAILURE;
        -: 5184:                                    }
        -: 5185:                                    else
        -: 5186:                                    {
    #####: 5187:                                        if (amqpvalue_set_composite_item(attach_instance->composite_value, 12, *desired_capabilities_value) != 0)
        -: 5188:                                        {
    #####: 5189:                                            amqpvalue_destroy(*desired_capabilities_value);
    #####: 5190:                                            result = MU_FAILURE;
        -: 5191:                                        }
        -: 5192:                                        else
        -: 5193:                                        {
    #####: 5194:                                            result = 0;
        -: 5195:                                        }
        -: 5196:                                    }
        -: 5197:
    #####: 5198:                                    amqpvalue_destroy(single_amqp_value);
        -: 5199:                                }
    #####: 5200:                                amqpvalue_destroy(*desired_capabilities_value);
        -: 5201:                            }
        -: 5202:                        }
        -: 5203:                        else
        -: 5204:                        {
    #####: 5205:                            result = 0;
        -: 5206:                        }
        -: 5207:                    }
        -: 5208:                }
        -: 5209:            }
        -: 5210:        }
        -: 5211:    }
        -: 5212:
    #####: 5213:    return result;
        -: 5214:}
        -: 5215:
    #####: 5216:int attach_set_desired_capabilities(ATTACH_HANDLE attach, AMQP_VALUE desired_capabilities_value)
        -: 5217:{
        -: 5218:    int result;
        -: 5219:
    #####: 5220:    if (attach == NULL)
        -: 5221:    {
    #####: 5222:        result = MU_FAILURE;
        -: 5223:    }
        -: 5224:    else
        -: 5225:    {
    #####: 5226:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
        -: 5227:        AMQP_VALUE desired_capabilities_amqp_value;
    #####: 5228:        if (desired_capabilities_value == NULL)
        -: 5229:        {
    #####: 5230:            desired_capabilities_amqp_value = NULL;
        -: 5231:        }
        -: 5232:        else
        -: 5233:        {
    #####: 5234:            desired_capabilities_amqp_value = amqpvalue_clone(desired_capabilities_value);
        -: 5235:        }
    #####: 5236:        if (desired_capabilities_amqp_value == NULL)
        -: 5237:        {
    #####: 5238:            result = MU_FAILURE;
        -: 5239:        }
        -: 5240:        else
        -: 5241:        {
    #####: 5242:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 12, desired_capabilities_amqp_value) != 0)
        -: 5243:            {
    #####: 5244:                result = MU_FAILURE;
        -: 5245:            }
        -: 5246:            else
        -: 5247:            {
    #####: 5248:                result = 0;
        -: 5249:            }
        -: 5250:
    #####: 5251:            amqpvalue_destroy(desired_capabilities_amqp_value);
        -: 5252:        }
        -: 5253:    }
        -: 5254:
    #####: 5255:    return result;
        -: 5256:}
        -: 5257:
    #####: 5258:int attach_get_properties(ATTACH_HANDLE attach, fields* properties_value)
        -: 5259:{
        -: 5260:    int result;
        -: 5261:
    #####: 5262:    if (attach == NULL)
        -: 5263:    {
    #####: 5264:        result = MU_FAILURE;
        -: 5265:    }
        -: 5266:    else
        -: 5267:    {
        -: 5268:        uint32_t item_count;
    #####: 5269:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 5270:        if (amqpvalue_get_composite_item_count(attach_instance->composite_value, &item_count) != 0)
        -: 5271:        {
    #####: 5272:            result = MU_FAILURE;
        -: 5273:        }
        -: 5274:        else
        -: 5275:        {
    #####: 5276:            if (item_count <= 13)
        -: 5277:            {
    #####: 5278:                result = MU_FAILURE;
        -: 5279:            }
        -: 5280:            else
        -: 5281:            {
    #####: 5282:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(attach_instance->composite_value, 13);
    #####: 5283:                if ((item_value == NULL) ||
    #####: 5284:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 5285:                {
    #####: 5286:                    result = MU_FAILURE;
        -: 5287:                }
        -: 5288:                else
        -: 5289:                {
    #####: 5290:                    int get_single_value_result = amqpvalue_get_fields(item_value, properties_value);
    #####: 5291:                    if (get_single_value_result != 0)
        -: 5292:                    {
    #####: 5293:                        result = MU_FAILURE;
        -: 5294:                    }
        -: 5295:                    else
        -: 5296:                    {
    #####: 5297:                        result = 0;
        -: 5298:                    }
        -: 5299:                }
        -: 5300:            }
        -: 5301:        }
        -: 5302:    }
        -: 5303:
    #####: 5304:    return result;
        -: 5305:}
        -: 5306:
    #####: 5307:int attach_set_properties(ATTACH_HANDLE attach, fields properties_value)
        -: 5308:{
        -: 5309:    int result;
        -: 5310:
    #####: 5311:    if (attach == NULL)
        -: 5312:    {
    #####: 5313:        result = MU_FAILURE;
        -: 5314:    }
        -: 5315:    else
        -: 5316:    {
    #####: 5317:        ATTACH_INSTANCE* attach_instance = (ATTACH_INSTANCE*)attach;
    #####: 5318:        AMQP_VALUE properties_amqp_value = amqpvalue_create_fields(properties_value);
    #####: 5319:        if (properties_amqp_value == NULL)
        -: 5320:        {
    #####: 5321:            result = MU_FAILURE;
        -: 5322:        }
        -: 5323:        else
        -: 5324:        {
    #####: 5325:            if (amqpvalue_set_composite_item(attach_instance->composite_value, 13, properties_amqp_value) != 0)
        -: 5326:            {
    #####: 5327:                result = MU_FAILURE;
        -: 5328:            }
        -: 5329:            else
        -: 5330:            {
    #####: 5331:                result = 0;
        -: 5332:            }
        -: 5333:
    #####: 5334:            amqpvalue_destroy(properties_amqp_value);
        -: 5335:        }
        -: 5336:    }
        -: 5337:
    #####: 5338:    return result;
        -: 5339:}
        -: 5340:
        -: 5341:
        -: 5342:/* flow */
        -: 5343:
        -: 5344:typedef struct FLOW_INSTANCE_TAG
        -: 5345:{
        -: 5346:    AMQP_VALUE composite_value;
        -: 5347:} FLOW_INSTANCE;
        -: 5348:
    #####: 5349:static FLOW_HANDLE flow_create_internal(void)
        -: 5350:{
    #####: 5351:    FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)malloc(sizeof(FLOW_INSTANCE));
    #####: 5352:    if (flow_instance != NULL)
        -: 5353:    {
    #####: 5354:        flow_instance->composite_value = NULL;
        -: 5355:    }
        -: 5356:
    #####: 5357:    return flow_instance;
        -: 5358:}
        -: 5359:
    #####: 5360:FLOW_HANDLE flow_create(uint32_t incoming_window_value, transfer_number next_outgoing_id_value, uint32_t outgoing_window_value)
        -: 5361:{
    #####: 5362:    FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)malloc(sizeof(FLOW_INSTANCE));
    #####: 5363:    if (flow_instance != NULL)
        -: 5364:    {
    #####: 5365:        flow_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(19);
    #####: 5366:        if (flow_instance->composite_value == NULL)
        -: 5367:        {
    #####: 5368:            free(flow_instance);
    #####: 5369:            flow_instance = NULL;
        -: 5370:        }
        -: 5371:        else
        -: 5372:        {
        -: 5373:            AMQP_VALUE incoming_window_amqp_value;
        -: 5374:            AMQP_VALUE next_outgoing_id_amqp_value;
        -: 5375:            AMQP_VALUE outgoing_window_amqp_value;
    #####: 5376:            int result = 0;
        -: 5377:
    #####: 5378:            incoming_window_amqp_value = amqpvalue_create_uint(incoming_window_value);
    #####: 5379:            if ((result == 0) && (amqpvalue_set_composite_item(flow_instance->composite_value, 1, incoming_window_amqp_value) != 0))
        -: 5380:            {
    #####: 5381:                result = MU_FAILURE;
        -: 5382:            }
    #####: 5383:            next_outgoing_id_amqp_value = amqpvalue_create_transfer_number(next_outgoing_id_value);
    #####: 5384:            if ((result == 0) && (amqpvalue_set_composite_item(flow_instance->composite_value, 2, next_outgoing_id_amqp_value) != 0))
        -: 5385:            {
    #####: 5386:                result = MU_FAILURE;
        -: 5387:            }
    #####: 5388:            outgoing_window_amqp_value = amqpvalue_create_uint(outgoing_window_value);
    #####: 5389:            if ((result == 0) && (amqpvalue_set_composite_item(flow_instance->composite_value, 3, outgoing_window_amqp_value) != 0))
        -: 5390:            {
    #####: 5391:                result = MU_FAILURE;
        -: 5392:            }
        -: 5393:
    #####: 5394:            amqpvalue_destroy(incoming_window_amqp_value);
    #####: 5395:            amqpvalue_destroy(next_outgoing_id_amqp_value);
    #####: 5396:            amqpvalue_destroy(outgoing_window_amqp_value);
        -: 5397:        }
        -: 5398:    }
        -: 5399:
    #####: 5400:    return flow_instance;
        -: 5401:}
        -: 5402:
    #####: 5403:FLOW_HANDLE flow_clone(FLOW_HANDLE value)
        -: 5404:{
    #####: 5405:    FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)malloc(sizeof(FLOW_INSTANCE));
    #####: 5406:    if (flow_instance != NULL)
        -: 5407:    {
    #####: 5408:        flow_instance->composite_value = amqpvalue_clone(((FLOW_INSTANCE*)value)->composite_value);
    #####: 5409:        if (flow_instance->composite_value == NULL)
        -: 5410:        {
    #####: 5411:            free(flow_instance);
    #####: 5412:            flow_instance = NULL;
        -: 5413:        }
        -: 5414:    }
        -: 5415:
    #####: 5416:    return flow_instance;
        -: 5417:}
        -: 5418:
    #####: 5419:void flow_destroy(FLOW_HANDLE flow)
        -: 5420:{
    #####: 5421:    if (flow != NULL)
        -: 5422:    {
    #####: 5423:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 5424:        amqpvalue_destroy(flow_instance->composite_value);
    #####: 5425:        free(flow_instance);
        -: 5426:    }
    #####: 5427:}
        -: 5428:
    #####: 5429:AMQP_VALUE amqpvalue_create_flow(FLOW_HANDLE flow)
        -: 5430:{
        -: 5431:    AMQP_VALUE result;
        -: 5432:
    #####: 5433:    if (flow == NULL)
        -: 5434:    {
    #####: 5435:        result = NULL;
        -: 5436:    }
        -: 5437:    else
        -: 5438:    {
    #####: 5439:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 5440:        result = amqpvalue_clone(flow_instance->composite_value);
        -: 5441:    }
        -: 5442:
    #####: 5443:    return result;
        -: 5444:}
        -: 5445:
    #####: 5446:bool is_flow_type_by_descriptor(AMQP_VALUE descriptor)
        -: 5447:{
        -: 5448:    bool result;
        -: 5449:
        -: 5450:    uint64_t descriptor_ulong;
    #####: 5451:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####: 5452:        (descriptor_ulong == 19))
        -: 5453:    {
    #####: 5454:        result = true;
        -: 5455:    }
        -: 5456:    else
        -: 5457:    {
    #####: 5458:        result = false;
        -: 5459:    }
        -: 5460:
    #####: 5461:    return result;
        -: 5462:}
        -: 5463:
        -: 5464:
    #####: 5465:int amqpvalue_get_flow(AMQP_VALUE value, FLOW_HANDLE* flow_handle)
        -: 5466:{
        -: 5467:    int result;
    #####: 5468:    FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow_create_internal();
    #####: 5469:    *flow_handle = flow_instance;
    #####: 5470:    if (*flow_handle == NULL)
        -: 5471:    {
    #####: 5472:        result = MU_FAILURE;
        -: 5473:    }
        -: 5474:    else
        -: 5475:    {
    #####: 5476:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####: 5477:        if (list_value == NULL)
        -: 5478:        {
    #####: 5479:            flow_destroy(*flow_handle);
    #####: 5480:            result = MU_FAILURE;
        -: 5481:        }
        -: 5482:        else
        -: 5483:        {
        -: 5484:            uint32_t list_item_count;
    #####: 5485:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -: 5486:            {
    #####: 5487:                result = MU_FAILURE;
        -: 5488:            }
        -: 5489:            else
        -: 5490:            {
        -: 5491:                do
        -: 5492:                {
        -: 5493:                    AMQP_VALUE item_value;
        -: 5494:                    /* next-incoming-id */
    #####: 5495:                    if (list_item_count > 0)
        -: 5496:                    {
    #####: 5497:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####: 5498:                        if (item_value == NULL)
        -: 5499:                        {
        -: 5500:                            /* do nothing */
        -: 5501:                        }
        -: 5502:                        else
        -: 5503:                        {
    #####: 5504:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5505:                            {
        -: 5506:                                /* no error, field is not mandatory */
        -: 5507:                            }
        -: 5508:                            else
        -: 5509:                            {
        -: 5510:                                transfer_number next_incoming_id;
    #####: 5511:                                if (amqpvalue_get_transfer_number(item_value, &next_incoming_id) != 0)
        -: 5512:                                {
    #####: 5513:                                    amqpvalue_destroy(item_value);
    #####: 5514:                                    flow_destroy(*flow_handle);
    #####: 5515:                                    result = MU_FAILURE;
    #####: 5516:                                    break;
        -: 5517:                                }
        -: 5518:                            }
        -: 5519:
    #####: 5520:                            amqpvalue_destroy(item_value);
        -: 5521:                        }
        -: 5522:                    }
        -: 5523:                    /* incoming-window */
    #####: 5524:                    if (list_item_count > 1)
        -: 5525:                    {
    #####: 5526:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####: 5527:                        if (item_value == NULL)
        -: 5528:                        {
        -: 5529:                            {
    #####: 5530:                                flow_destroy(*flow_handle);
    #####: 5531:                                result = MU_FAILURE;
    #####: 5532:                                break;
        -: 5533:                            }
        -: 5534:                        }
        -: 5535:                        else
        -: 5536:                        {
    #####: 5537:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5538:                            {
    #####: 5539:                                amqpvalue_destroy(item_value);
    #####: 5540:                                flow_destroy(*flow_handle);
    #####: 5541:                                result = MU_FAILURE;
    #####: 5542:                                break;
        -: 5543:                            }
        -: 5544:                            else
        -: 5545:                            {
        -: 5546:                                uint32_t incoming_window;
    #####: 5547:                                if (amqpvalue_get_uint(item_value, &incoming_window) != 0)
        -: 5548:                                {
    #####: 5549:                                    amqpvalue_destroy(item_value);
    #####: 5550:                                    flow_destroy(*flow_handle);
    #####: 5551:                                    result = MU_FAILURE;
    #####: 5552:                                    break;
        -: 5553:                                }
        -: 5554:                            }
        -: 5555:
    #####: 5556:                            amqpvalue_destroy(item_value);
        -: 5557:                        }
        -: 5558:                    }
        -: 5559:                    else
        -: 5560:                    {
    #####: 5561:                        result = MU_FAILURE;
        -: 5562:                    }
        -: 5563:                    /* next-outgoing-id */
    #####: 5564:                    if (list_item_count > 2)
        -: 5565:                    {
    #####: 5566:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####: 5567:                        if (item_value == NULL)
        -: 5568:                        {
        -: 5569:                            {
    #####: 5570:                                flow_destroy(*flow_handle);
    #####: 5571:                                result = MU_FAILURE;
    #####: 5572:                                break;
        -: 5573:                            }
        -: 5574:                        }
        -: 5575:                        else
        -: 5576:                        {
    #####: 5577:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5578:                            {
    #####: 5579:                                amqpvalue_destroy(item_value);
    #####: 5580:                                flow_destroy(*flow_handle);
    #####: 5581:                                result = MU_FAILURE;
    #####: 5582:                                break;
        -: 5583:                            }
        -: 5584:                            else
        -: 5585:                            {
        -: 5586:                                transfer_number next_outgoing_id;
    #####: 5587:                                if (amqpvalue_get_transfer_number(item_value, &next_outgoing_id) != 0)
        -: 5588:                                {
    #####: 5589:                                    amqpvalue_destroy(item_value);
    #####: 5590:                                    flow_destroy(*flow_handle);
    #####: 5591:                                    result = MU_FAILURE;
    #####: 5592:                                    break;
        -: 5593:                                }
        -: 5594:                            }
        -: 5595:
    #####: 5596:                            amqpvalue_destroy(item_value);
        -: 5597:                        }
        -: 5598:                    }
        -: 5599:                    else
        -: 5600:                    {
    #####: 5601:                        result = MU_FAILURE;
        -: 5602:                    }
        -: 5603:                    /* outgoing-window */
    #####: 5604:                    if (list_item_count > 3)
        -: 5605:                    {
    #####: 5606:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####: 5607:                        if (item_value == NULL)
        -: 5608:                        {
        -: 5609:                            {
    #####: 5610:                                flow_destroy(*flow_handle);
    #####: 5611:                                result = MU_FAILURE;
    #####: 5612:                                break;
        -: 5613:                            }
        -: 5614:                        }
        -: 5615:                        else
        -: 5616:                        {
    #####: 5617:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5618:                            {
    #####: 5619:                                amqpvalue_destroy(item_value);
    #####: 5620:                                flow_destroy(*flow_handle);
    #####: 5621:                                result = MU_FAILURE;
    #####: 5622:                                break;
        -: 5623:                            }
        -: 5624:                            else
        -: 5625:                            {
        -: 5626:                                uint32_t outgoing_window;
    #####: 5627:                                if (amqpvalue_get_uint(item_value, &outgoing_window) != 0)
        -: 5628:                                {
    #####: 5629:                                    amqpvalue_destroy(item_value);
    #####: 5630:                                    flow_destroy(*flow_handle);
    #####: 5631:                                    result = MU_FAILURE;
    #####: 5632:                                    break;
        -: 5633:                                }
        -: 5634:                            }
        -: 5635:
    #####: 5636:                            amqpvalue_destroy(item_value);
        -: 5637:                        }
        -: 5638:                    }
        -: 5639:                    else
        -: 5640:                    {
    #####: 5641:                        result = MU_FAILURE;
        -: 5642:                    }
        -: 5643:                    /* handle */
    #####: 5644:                    if (list_item_count > 4)
        -: 5645:                    {
    #####: 5646:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####: 5647:                        if (item_value == NULL)
        -: 5648:                        {
        -: 5649:                            /* do nothing */
        -: 5650:                        }
        -: 5651:                        else
        -: 5652:                        {
    #####: 5653:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5654:                            {
        -: 5655:                                /* no error, field is not mandatory */
        -: 5656:                            }
        -: 5657:                            else
        -: 5658:                            {
        -: 5659:                                handle handle;
    #####: 5660:                                if (amqpvalue_get_handle(item_value, &handle) != 0)
        -: 5661:                                {
    #####: 5662:                                    amqpvalue_destroy(item_value);
    #####: 5663:                                    flow_destroy(*flow_handle);
    #####: 5664:                                    result = MU_FAILURE;
    #####: 5665:                                    break;
        -: 5666:                                }
        -: 5667:                            }
        -: 5668:
    #####: 5669:                            amqpvalue_destroy(item_value);
        -: 5670:                        }
        -: 5671:                    }
        -: 5672:                    /* delivery-count */
    #####: 5673:                    if (list_item_count > 5)
        -: 5674:                    {
    #####: 5675:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####: 5676:                        if (item_value == NULL)
        -: 5677:                        {
        -: 5678:                            /* do nothing */
        -: 5679:                        }
        -: 5680:                        else
        -: 5681:                        {
    #####: 5682:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5683:                            {
        -: 5684:                                /* no error, field is not mandatory */
        -: 5685:                            }
        -: 5686:                            else
        -: 5687:                            {
        -: 5688:                                sequence_no delivery_count;
    #####: 5689:                                if (amqpvalue_get_sequence_no(item_value, &delivery_count) != 0)
        -: 5690:                                {
    #####: 5691:                                    amqpvalue_destroy(item_value);
    #####: 5692:                                    flow_destroy(*flow_handle);
    #####: 5693:                                    result = MU_FAILURE;
    #####: 5694:                                    break;
        -: 5695:                                }
        -: 5696:                            }
        -: 5697:
    #####: 5698:                            amqpvalue_destroy(item_value);
        -: 5699:                        }
        -: 5700:                    }
        -: 5701:                    /* link-credit */
    #####: 5702:                    if (list_item_count > 6)
        -: 5703:                    {
    #####: 5704:                        item_value = amqpvalue_get_list_item(list_value, 6);
    #####: 5705:                        if (item_value == NULL)
        -: 5706:                        {
        -: 5707:                            /* do nothing */
        -: 5708:                        }
        -: 5709:                        else
        -: 5710:                        {
    #####: 5711:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5712:                            {
        -: 5713:                                /* no error, field is not mandatory */
        -: 5714:                            }
        -: 5715:                            else
        -: 5716:                            {
        -: 5717:                                uint32_t link_credit;
    #####: 5718:                                if (amqpvalue_get_uint(item_value, &link_credit) != 0)
        -: 5719:                                {
    #####: 5720:                                    amqpvalue_destroy(item_value);
    #####: 5721:                                    flow_destroy(*flow_handle);
    #####: 5722:                                    result = MU_FAILURE;
    #####: 5723:                                    break;
        -: 5724:                                }
        -: 5725:                            }
        -: 5726:
    #####: 5727:                            amqpvalue_destroy(item_value);
        -: 5728:                        }
        -: 5729:                    }
        -: 5730:                    /* available */
    #####: 5731:                    if (list_item_count > 7)
        -: 5732:                    {
    #####: 5733:                        item_value = amqpvalue_get_list_item(list_value, 7);
    #####: 5734:                        if (item_value == NULL)
        -: 5735:                        {
        -: 5736:                            /* do nothing */
        -: 5737:                        }
        -: 5738:                        else
        -: 5739:                        {
    #####: 5740:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5741:                            {
        -: 5742:                                /* no error, field is not mandatory */
        -: 5743:                            }
        -: 5744:                            else
        -: 5745:                            {
        -: 5746:                                uint32_t available;
    #####: 5747:                                if (amqpvalue_get_uint(item_value, &available) != 0)
        -: 5748:                                {
    #####: 5749:                                    amqpvalue_destroy(item_value);
    #####: 5750:                                    flow_destroy(*flow_handle);
    #####: 5751:                                    result = MU_FAILURE;
    #####: 5752:                                    break;
        -: 5753:                                }
        -: 5754:                            }
        -: 5755:
    #####: 5756:                            amqpvalue_destroy(item_value);
        -: 5757:                        }
        -: 5758:                    }
        -: 5759:                    /* drain */
    #####: 5760:                    if (list_item_count > 8)
        -: 5761:                    {
    #####: 5762:                        item_value = amqpvalue_get_list_item(list_value, 8);
    #####: 5763:                        if (item_value == NULL)
        -: 5764:                        {
        -: 5765:                            /* do nothing */
        -: 5766:                        }
        -: 5767:                        else
        -: 5768:                        {
    #####: 5769:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5770:                            {
        -: 5771:                                /* no error, field is not mandatory */
        -: 5772:                            }
        -: 5773:                            else
        -: 5774:                            {
        -: 5775:                                bool drain;
    #####: 5776:                                if (amqpvalue_get_boolean(item_value, &drain) != 0)
        -: 5777:                                {
    #####: 5778:                                    amqpvalue_destroy(item_value);
    #####: 5779:                                    flow_destroy(*flow_handle);
    #####: 5780:                                    result = MU_FAILURE;
    #####: 5781:                                    break;
        -: 5782:                                }
        -: 5783:                            }
        -: 5784:
    #####: 5785:                            amqpvalue_destroy(item_value);
        -: 5786:                        }
        -: 5787:                    }
        -: 5788:                    /* echo */
    #####: 5789:                    if (list_item_count > 9)
        -: 5790:                    {
    #####: 5791:                        item_value = amqpvalue_get_list_item(list_value, 9);
    #####: 5792:                        if (item_value == NULL)
        -: 5793:                        {
        -: 5794:                            /* do nothing */
        -: 5795:                        }
        -: 5796:                        else
        -: 5797:                        {
    #####: 5798:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5799:                            {
        -: 5800:                                /* no error, field is not mandatory */
        -: 5801:                            }
        -: 5802:                            else
        -: 5803:                            {
        -: 5804:                                bool echo;
    #####: 5805:                                if (amqpvalue_get_boolean(item_value, &echo) != 0)
        -: 5806:                                {
    #####: 5807:                                    amqpvalue_destroy(item_value);
    #####: 5808:                                    flow_destroy(*flow_handle);
    #####: 5809:                                    result = MU_FAILURE;
    #####: 5810:                                    break;
        -: 5811:                                }
        -: 5812:                            }
        -: 5813:
    #####: 5814:                            amqpvalue_destroy(item_value);
        -: 5815:                        }
        -: 5816:                    }
        -: 5817:                    /* properties */
    #####: 5818:                    if (list_item_count > 10)
        -: 5819:                    {
    #####: 5820:                        item_value = amqpvalue_get_list_item(list_value, 10);
    #####: 5821:                        if (item_value == NULL)
        -: 5822:                        {
        -: 5823:                            /* do nothing */
        -: 5824:                        }
        -: 5825:                        else
        -: 5826:                        {
    #####: 5827:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 5828:                            {
        -: 5829:                                /* no error, field is not mandatory */
        -: 5830:                            }
        -: 5831:                            else
        -: 5832:                            {
        -: 5833:                                fields properties;
    #####: 5834:                                if (amqpvalue_get_fields(item_value, &properties) != 0)
        -: 5835:                                {
    #####: 5836:                                    amqpvalue_destroy(item_value);
    #####: 5837:                                    flow_destroy(*flow_handle);
    #####: 5838:                                    result = MU_FAILURE;
    #####: 5839:                                    break;
        -: 5840:                                }
        -: 5841:                            }
        -: 5842:
    #####: 5843:                            amqpvalue_destroy(item_value);
        -: 5844:                        }
        -: 5845:                    }
        -: 5846:
    #####: 5847:                    flow_instance->composite_value = amqpvalue_clone(value);
        -: 5848:
    #####: 5849:                    result = 0;
        -: 5850:                } while((void)0,0);
        -: 5851:            }
        -: 5852:        }
        -: 5853:    }
        -: 5854:
    #####: 5855:    return result;
        -: 5856:}
        -: 5857:
    #####: 5858:int flow_get_next_incoming_id(FLOW_HANDLE flow, transfer_number* next_incoming_id_value)
        -: 5859:{
        -: 5860:    int result;
        -: 5861:
    #####: 5862:    if (flow == NULL)
        -: 5863:    {
    #####: 5864:        result = MU_FAILURE;
        -: 5865:    }
        -: 5866:    else
        -: 5867:    {
        -: 5868:        uint32_t item_count;
    #####: 5869:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 5870:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 5871:        {
    #####: 5872:            result = MU_FAILURE;
        -: 5873:        }
        -: 5874:        else
        -: 5875:        {
    #####: 5876:            if (item_count <= 0)
        -: 5877:            {
    #####: 5878:                result = MU_FAILURE;
        -: 5879:            }
        -: 5880:            else
        -: 5881:            {
    #####: 5882:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 0);
    #####: 5883:                if ((item_value == NULL) ||
    #####: 5884:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 5885:                {
    #####: 5886:                    result = MU_FAILURE;
        -: 5887:                }
        -: 5888:                else
        -: 5889:                {
    #####: 5890:                    int get_single_value_result = amqpvalue_get_transfer_number(item_value, next_incoming_id_value);
    #####: 5891:                    if (get_single_value_result != 0)
        -: 5892:                    {
    #####: 5893:                        result = MU_FAILURE;
        -: 5894:                    }
        -: 5895:                    else
        -: 5896:                    {
    #####: 5897:                        result = 0;
        -: 5898:                    }
        -: 5899:                }
        -: 5900:            }
        -: 5901:        }
        -: 5902:    }
        -: 5903:
    #####: 5904:    return result;
        -: 5905:}
        -: 5906:
    #####: 5907:int flow_set_next_incoming_id(FLOW_HANDLE flow, transfer_number next_incoming_id_value)
        -: 5908:{
        -: 5909:    int result;
        -: 5910:
    #####: 5911:    if (flow == NULL)
        -: 5912:    {
    #####: 5913:        result = MU_FAILURE;
        -: 5914:    }
        -: 5915:    else
        -: 5916:    {
    #####: 5917:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 5918:        AMQP_VALUE next_incoming_id_amqp_value = amqpvalue_create_transfer_number(next_incoming_id_value);
    #####: 5919:        if (next_incoming_id_amqp_value == NULL)
        -: 5920:        {
    #####: 5921:            result = MU_FAILURE;
        -: 5922:        }
        -: 5923:        else
        -: 5924:        {
    #####: 5925:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 0, next_incoming_id_amqp_value) != 0)
        -: 5926:            {
    #####: 5927:                result = MU_FAILURE;
        -: 5928:            }
        -: 5929:            else
        -: 5930:            {
    #####: 5931:                result = 0;
        -: 5932:            }
        -: 5933:
    #####: 5934:            amqpvalue_destroy(next_incoming_id_amqp_value);
        -: 5935:        }
        -: 5936:    }
        -: 5937:
    #####: 5938:    return result;
        -: 5939:}
        -: 5940:
    #####: 5941:int flow_get_incoming_window(FLOW_HANDLE flow, uint32_t* incoming_window_value)
        -: 5942:{
        -: 5943:    int result;
        -: 5944:
    #####: 5945:    if (flow == NULL)
        -: 5946:    {
    #####: 5947:        result = MU_FAILURE;
        -: 5948:    }
        -: 5949:    else
        -: 5950:    {
        -: 5951:        uint32_t item_count;
    #####: 5952:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 5953:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 5954:        {
    #####: 5955:            result = MU_FAILURE;
        -: 5956:        }
        -: 5957:        else
        -: 5958:        {
    #####: 5959:            if (item_count <= 1)
        -: 5960:            {
    #####: 5961:                result = MU_FAILURE;
        -: 5962:            }
        -: 5963:            else
        -: 5964:            {
    #####: 5965:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 1);
    #####: 5966:                if ((item_value == NULL) ||
    #####: 5967:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 5968:                {
    #####: 5969:                    result = MU_FAILURE;
        -: 5970:                }
        -: 5971:                else
        -: 5972:                {
    #####: 5973:                    int get_single_value_result = amqpvalue_get_uint(item_value, incoming_window_value);
    #####: 5974:                    if (get_single_value_result != 0)
        -: 5975:                    {
    #####: 5976:                        result = MU_FAILURE;
        -: 5977:                    }
        -: 5978:                    else
        -: 5979:                    {
    #####: 5980:                        result = 0;
        -: 5981:                    }
        -: 5982:                }
        -: 5983:            }
        -: 5984:        }
        -: 5985:    }
        -: 5986:
    #####: 5987:    return result;
        -: 5988:}
        -: 5989:
    #####: 5990:int flow_set_incoming_window(FLOW_HANDLE flow, uint32_t incoming_window_value)
        -: 5991:{
        -: 5992:    int result;
        -: 5993:
    #####: 5994:    if (flow == NULL)
        -: 5995:    {
    #####: 5996:        result = MU_FAILURE;
        -: 5997:    }
        -: 5998:    else
        -: 5999:    {
    #####: 6000:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6001:        AMQP_VALUE incoming_window_amqp_value = amqpvalue_create_uint(incoming_window_value);
    #####: 6002:        if (incoming_window_amqp_value == NULL)
        -: 6003:        {
    #####: 6004:            result = MU_FAILURE;
        -: 6005:        }
        -: 6006:        else
        -: 6007:        {
    #####: 6008:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 1, incoming_window_amqp_value) != 0)
        -: 6009:            {
    #####: 6010:                result = MU_FAILURE;
        -: 6011:            }
        -: 6012:            else
        -: 6013:            {
    #####: 6014:                result = 0;
        -: 6015:            }
        -: 6016:
    #####: 6017:            amqpvalue_destroy(incoming_window_amqp_value);
        -: 6018:        }
        -: 6019:    }
        -: 6020:
    #####: 6021:    return result;
        -: 6022:}
        -: 6023:
    #####: 6024:int flow_get_next_outgoing_id(FLOW_HANDLE flow, transfer_number* next_outgoing_id_value)
        -: 6025:{
        -: 6026:    int result;
        -: 6027:
    #####: 6028:    if (flow == NULL)
        -: 6029:    {
    #####: 6030:        result = MU_FAILURE;
        -: 6031:    }
        -: 6032:    else
        -: 6033:    {
        -: 6034:        uint32_t item_count;
    #####: 6035:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6036:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6037:        {
    #####: 6038:            result = MU_FAILURE;
        -: 6039:        }
        -: 6040:        else
        -: 6041:        {
    #####: 6042:            if (item_count <= 2)
        -: 6043:            {
    #####: 6044:                result = MU_FAILURE;
        -: 6045:            }
        -: 6046:            else
        -: 6047:            {
    #####: 6048:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 2);
    #####: 6049:                if ((item_value == NULL) ||
    #####: 6050:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6051:                {
    #####: 6052:                    result = MU_FAILURE;
        -: 6053:                }
        -: 6054:                else
        -: 6055:                {
    #####: 6056:                    int get_single_value_result = amqpvalue_get_transfer_number(item_value, next_outgoing_id_value);
    #####: 6057:                    if (get_single_value_result != 0)
        -: 6058:                    {
    #####: 6059:                        result = MU_FAILURE;
        -: 6060:                    }
        -: 6061:                    else
        -: 6062:                    {
    #####: 6063:                        result = 0;
        -: 6064:                    }
        -: 6065:                }
        -: 6066:            }
        -: 6067:        }
        -: 6068:    }
        -: 6069:
    #####: 6070:    return result;
        -: 6071:}
        -: 6072:
    #####: 6073:int flow_set_next_outgoing_id(FLOW_HANDLE flow, transfer_number next_outgoing_id_value)
        -: 6074:{
        -: 6075:    int result;
        -: 6076:
    #####: 6077:    if (flow == NULL)
        -: 6078:    {
    #####: 6079:        result = MU_FAILURE;
        -: 6080:    }
        -: 6081:    else
        -: 6082:    {
    #####: 6083:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6084:        AMQP_VALUE next_outgoing_id_amqp_value = amqpvalue_create_transfer_number(next_outgoing_id_value);
    #####: 6085:        if (next_outgoing_id_amqp_value == NULL)
        -: 6086:        {
    #####: 6087:            result = MU_FAILURE;
        -: 6088:        }
        -: 6089:        else
        -: 6090:        {
    #####: 6091:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 2, next_outgoing_id_amqp_value) != 0)
        -: 6092:            {
    #####: 6093:                result = MU_FAILURE;
        -: 6094:            }
        -: 6095:            else
        -: 6096:            {
    #####: 6097:                result = 0;
        -: 6098:            }
        -: 6099:
    #####: 6100:            amqpvalue_destroy(next_outgoing_id_amqp_value);
        -: 6101:        }
        -: 6102:    }
        -: 6103:
    #####: 6104:    return result;
        -: 6105:}
        -: 6106:
    #####: 6107:int flow_get_outgoing_window(FLOW_HANDLE flow, uint32_t* outgoing_window_value)
        -: 6108:{
        -: 6109:    int result;
        -: 6110:
    #####: 6111:    if (flow == NULL)
        -: 6112:    {
    #####: 6113:        result = MU_FAILURE;
        -: 6114:    }
        -: 6115:    else
        -: 6116:    {
        -: 6117:        uint32_t item_count;
    #####: 6118:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6119:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6120:        {
    #####: 6121:            result = MU_FAILURE;
        -: 6122:        }
        -: 6123:        else
        -: 6124:        {
    #####: 6125:            if (item_count <= 3)
        -: 6126:            {
    #####: 6127:                result = MU_FAILURE;
        -: 6128:            }
        -: 6129:            else
        -: 6130:            {
    #####: 6131:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 3);
    #####: 6132:                if ((item_value == NULL) ||
    #####: 6133:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6134:                {
    #####: 6135:                    result = MU_FAILURE;
        -: 6136:                }
        -: 6137:                else
        -: 6138:                {
    #####: 6139:                    int get_single_value_result = amqpvalue_get_uint(item_value, outgoing_window_value);
    #####: 6140:                    if (get_single_value_result != 0)
        -: 6141:                    {
    #####: 6142:                        result = MU_FAILURE;
        -: 6143:                    }
        -: 6144:                    else
        -: 6145:                    {
    #####: 6146:                        result = 0;
        -: 6147:                    }
        -: 6148:                }
        -: 6149:            }
        -: 6150:        }
        -: 6151:    }
        -: 6152:
    #####: 6153:    return result;
        -: 6154:}
        -: 6155:
    #####: 6156:int flow_set_outgoing_window(FLOW_HANDLE flow, uint32_t outgoing_window_value)
        -: 6157:{
        -: 6158:    int result;
        -: 6159:
    #####: 6160:    if (flow == NULL)
        -: 6161:    {
    #####: 6162:        result = MU_FAILURE;
        -: 6163:    }
        -: 6164:    else
        -: 6165:    {
    #####: 6166:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6167:        AMQP_VALUE outgoing_window_amqp_value = amqpvalue_create_uint(outgoing_window_value);
    #####: 6168:        if (outgoing_window_amqp_value == NULL)
        -: 6169:        {
    #####: 6170:            result = MU_FAILURE;
        -: 6171:        }
        -: 6172:        else
        -: 6173:        {
    #####: 6174:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 3, outgoing_window_amqp_value) != 0)
        -: 6175:            {
    #####: 6176:                result = MU_FAILURE;
        -: 6177:            }
        -: 6178:            else
        -: 6179:            {
    #####: 6180:                result = 0;
        -: 6181:            }
        -: 6182:
    #####: 6183:            amqpvalue_destroy(outgoing_window_amqp_value);
        -: 6184:        }
        -: 6185:    }
        -: 6186:
    #####: 6187:    return result;
        -: 6188:}
        -: 6189:
    #####: 6190:int flow_get_handle(FLOW_HANDLE flow, handle* handle_value)
        -: 6191:{
        -: 6192:    int result;
        -: 6193:
    #####: 6194:    if (flow == NULL)
        -: 6195:    {
    #####: 6196:        result = MU_FAILURE;
        -: 6197:    }
        -: 6198:    else
        -: 6199:    {
        -: 6200:        uint32_t item_count;
    #####: 6201:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6202:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6203:        {
    #####: 6204:            result = MU_FAILURE;
        -: 6205:        }
        -: 6206:        else
        -: 6207:        {
    #####: 6208:            if (item_count <= 4)
        -: 6209:            {
    #####: 6210:                result = MU_FAILURE;
        -: 6211:            }
        -: 6212:            else
        -: 6213:            {
    #####: 6214:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 4);
    #####: 6215:                if ((item_value == NULL) ||
    #####: 6216:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6217:                {
    #####: 6218:                    result = MU_FAILURE;
        -: 6219:                }
        -: 6220:                else
        -: 6221:                {
    #####: 6222:                    int get_single_value_result = amqpvalue_get_handle(item_value, handle_value);
    #####: 6223:                    if (get_single_value_result != 0)
        -: 6224:                    {
    #####: 6225:                        result = MU_FAILURE;
        -: 6226:                    }
        -: 6227:                    else
        -: 6228:                    {
    #####: 6229:                        result = 0;
        -: 6230:                    }
        -: 6231:                }
        -: 6232:            }
        -: 6233:        }
        -: 6234:    }
        -: 6235:
    #####: 6236:    return result;
        -: 6237:}
        -: 6238:
    #####: 6239:int flow_set_handle(FLOW_HANDLE flow, handle handle_value)
        -: 6240:{
        -: 6241:    int result;
        -: 6242:
    #####: 6243:    if (flow == NULL)
        -: 6244:    {
    #####: 6245:        result = MU_FAILURE;
        -: 6246:    }
        -: 6247:    else
        -: 6248:    {
    #####: 6249:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6250:        AMQP_VALUE handle_amqp_value = amqpvalue_create_handle(handle_value);
    #####: 6251:        if (handle_amqp_value == NULL)
        -: 6252:        {
    #####: 6253:            result = MU_FAILURE;
        -: 6254:        }
        -: 6255:        else
        -: 6256:        {
    #####: 6257:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 4, handle_amqp_value) != 0)
        -: 6258:            {
    #####: 6259:                result = MU_FAILURE;
        -: 6260:            }
        -: 6261:            else
        -: 6262:            {
    #####: 6263:                result = 0;
        -: 6264:            }
        -: 6265:
    #####: 6266:            amqpvalue_destroy(handle_amqp_value);
        -: 6267:        }
        -: 6268:    }
        -: 6269:
    #####: 6270:    return result;
        -: 6271:}
        -: 6272:
    #####: 6273:int flow_get_delivery_count(FLOW_HANDLE flow, sequence_no* delivery_count_value)
        -: 6274:{
        -: 6275:    int result;
        -: 6276:
    #####: 6277:    if (flow == NULL)
        -: 6278:    {
    #####: 6279:        result = MU_FAILURE;
        -: 6280:    }
        -: 6281:    else
        -: 6282:    {
        -: 6283:        uint32_t item_count;
    #####: 6284:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6285:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6286:        {
    #####: 6287:            result = MU_FAILURE;
        -: 6288:        }
        -: 6289:        else
        -: 6290:        {
    #####: 6291:            if (item_count <= 5)
        -: 6292:            {
    #####: 6293:                result = MU_FAILURE;
        -: 6294:            }
        -: 6295:            else
        -: 6296:            {
    #####: 6297:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 5);
    #####: 6298:                if ((item_value == NULL) ||
    #####: 6299:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6300:                {
    #####: 6301:                    result = MU_FAILURE;
        -: 6302:                }
        -: 6303:                else
        -: 6304:                {
    #####: 6305:                    int get_single_value_result = amqpvalue_get_sequence_no(item_value, delivery_count_value);
    #####: 6306:                    if (get_single_value_result != 0)
        -: 6307:                    {
    #####: 6308:                        result = MU_FAILURE;
        -: 6309:                    }
        -: 6310:                    else
        -: 6311:                    {
    #####: 6312:                        result = 0;
        -: 6313:                    }
        -: 6314:                }
        -: 6315:            }
        -: 6316:        }
        -: 6317:    }
        -: 6318:
    #####: 6319:    return result;
        -: 6320:}
        -: 6321:
    #####: 6322:int flow_set_delivery_count(FLOW_HANDLE flow, sequence_no delivery_count_value)
        -: 6323:{
        -: 6324:    int result;
        -: 6325:
    #####: 6326:    if (flow == NULL)
        -: 6327:    {
    #####: 6328:        result = MU_FAILURE;
        -: 6329:    }
        -: 6330:    else
        -: 6331:    {
    #####: 6332:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6333:        AMQP_VALUE delivery_count_amqp_value = amqpvalue_create_sequence_no(delivery_count_value);
    #####: 6334:        if (delivery_count_amqp_value == NULL)
        -: 6335:        {
    #####: 6336:            result = MU_FAILURE;
        -: 6337:        }
        -: 6338:        else
        -: 6339:        {
    #####: 6340:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 5, delivery_count_amqp_value) != 0)
        -: 6341:            {
    #####: 6342:                result = MU_FAILURE;
        -: 6343:            }
        -: 6344:            else
        -: 6345:            {
    #####: 6346:                result = 0;
        -: 6347:            }
        -: 6348:
    #####: 6349:            amqpvalue_destroy(delivery_count_amqp_value);
        -: 6350:        }
        -: 6351:    }
        -: 6352:
    #####: 6353:    return result;
        -: 6354:}
        -: 6355:
    #####: 6356:int flow_get_link_credit(FLOW_HANDLE flow, uint32_t* link_credit_value)
        -: 6357:{
        -: 6358:    int result;
        -: 6359:
    #####: 6360:    if (flow == NULL)
        -: 6361:    {
    #####: 6362:        result = MU_FAILURE;
        -: 6363:    }
        -: 6364:    else
        -: 6365:    {
        -: 6366:        uint32_t item_count;
    #####: 6367:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6368:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6369:        {
    #####: 6370:            result = MU_FAILURE;
        -: 6371:        }
        -: 6372:        else
        -: 6373:        {
    #####: 6374:            if (item_count <= 6)
        -: 6375:            {
    #####: 6376:                result = MU_FAILURE;
        -: 6377:            }
        -: 6378:            else
        -: 6379:            {
    #####: 6380:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 6);
    #####: 6381:                if ((item_value == NULL) ||
    #####: 6382:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6383:                {
    #####: 6384:                    result = MU_FAILURE;
        -: 6385:                }
        -: 6386:                else
        -: 6387:                {
    #####: 6388:                    int get_single_value_result = amqpvalue_get_uint(item_value, link_credit_value);
    #####: 6389:                    if (get_single_value_result != 0)
        -: 6390:                    {
    #####: 6391:                        result = MU_FAILURE;
        -: 6392:                    }
        -: 6393:                    else
        -: 6394:                    {
    #####: 6395:                        result = 0;
        -: 6396:                    }
        -: 6397:                }
        -: 6398:            }
        -: 6399:        }
        -: 6400:    }
        -: 6401:
    #####: 6402:    return result;
        -: 6403:}
        -: 6404:
    #####: 6405:int flow_set_link_credit(FLOW_HANDLE flow, uint32_t link_credit_value)
        -: 6406:{
        -: 6407:    int result;
        -: 6408:
    #####: 6409:    if (flow == NULL)
        -: 6410:    {
    #####: 6411:        result = MU_FAILURE;
        -: 6412:    }
        -: 6413:    else
        -: 6414:    {
    #####: 6415:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6416:        AMQP_VALUE link_credit_amqp_value = amqpvalue_create_uint(link_credit_value);
    #####: 6417:        if (link_credit_amqp_value == NULL)
        -: 6418:        {
    #####: 6419:            result = MU_FAILURE;
        -: 6420:        }
        -: 6421:        else
        -: 6422:        {
    #####: 6423:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 6, link_credit_amqp_value) != 0)
        -: 6424:            {
    #####: 6425:                result = MU_FAILURE;
        -: 6426:            }
        -: 6427:            else
        -: 6428:            {
    #####: 6429:                result = 0;
        -: 6430:            }
        -: 6431:
    #####: 6432:            amqpvalue_destroy(link_credit_amqp_value);
        -: 6433:        }
        -: 6434:    }
        -: 6435:
    #####: 6436:    return result;
        -: 6437:}
        -: 6438:
    #####: 6439:int flow_get_available(FLOW_HANDLE flow, uint32_t* available_value)
        -: 6440:{
        -: 6441:    int result;
        -: 6442:
    #####: 6443:    if (flow == NULL)
        -: 6444:    {
    #####: 6445:        result = MU_FAILURE;
        -: 6446:    }
        -: 6447:    else
        -: 6448:    {
        -: 6449:        uint32_t item_count;
    #####: 6450:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6451:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6452:        {
    #####: 6453:            result = MU_FAILURE;
        -: 6454:        }
        -: 6455:        else
        -: 6456:        {
    #####: 6457:            if (item_count <= 7)
        -: 6458:            {
    #####: 6459:                result = MU_FAILURE;
        -: 6460:            }
        -: 6461:            else
        -: 6462:            {
    #####: 6463:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 7);
    #####: 6464:                if ((item_value == NULL) ||
    #####: 6465:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6466:                {
    #####: 6467:                    result = MU_FAILURE;
        -: 6468:                }
        -: 6469:                else
        -: 6470:                {
    #####: 6471:                    int get_single_value_result = amqpvalue_get_uint(item_value, available_value);
    #####: 6472:                    if (get_single_value_result != 0)
        -: 6473:                    {
    #####: 6474:                        result = MU_FAILURE;
        -: 6475:                    }
        -: 6476:                    else
        -: 6477:                    {
    #####: 6478:                        result = 0;
        -: 6479:                    }
        -: 6480:                }
        -: 6481:            }
        -: 6482:        }
        -: 6483:    }
        -: 6484:
    #####: 6485:    return result;
        -: 6486:}
        -: 6487:
    #####: 6488:int flow_set_available(FLOW_HANDLE flow, uint32_t available_value)
        -: 6489:{
        -: 6490:    int result;
        -: 6491:
    #####: 6492:    if (flow == NULL)
        -: 6493:    {
    #####: 6494:        result = MU_FAILURE;
        -: 6495:    }
        -: 6496:    else
        -: 6497:    {
    #####: 6498:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6499:        AMQP_VALUE available_amqp_value = amqpvalue_create_uint(available_value);
    #####: 6500:        if (available_amqp_value == NULL)
        -: 6501:        {
    #####: 6502:            result = MU_FAILURE;
        -: 6503:        }
        -: 6504:        else
        -: 6505:        {
    #####: 6506:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 7, available_amqp_value) != 0)
        -: 6507:            {
    #####: 6508:                result = MU_FAILURE;
        -: 6509:            }
        -: 6510:            else
        -: 6511:            {
    #####: 6512:                result = 0;
        -: 6513:            }
        -: 6514:
    #####: 6515:            amqpvalue_destroy(available_amqp_value);
        -: 6516:        }
        -: 6517:    }
        -: 6518:
    #####: 6519:    return result;
        -: 6520:}
        -: 6521:
    #####: 6522:int flow_get_drain(FLOW_HANDLE flow, bool* drain_value)
        -: 6523:{
        -: 6524:    int result;
        -: 6525:
    #####: 6526:    if (flow == NULL)
        -: 6527:    {
    #####: 6528:        result = MU_FAILURE;
        -: 6529:    }
        -: 6530:    else
        -: 6531:    {
        -: 6532:        uint32_t item_count;
    #####: 6533:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6534:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6535:        {
    #####: 6536:            result = MU_FAILURE;
        -: 6537:        }
        -: 6538:        else
        -: 6539:        {
    #####: 6540:            if (item_count <= 8)
        -: 6541:            {
    #####: 6542:                *drain_value = false;
    #####: 6543:                result = 0;
        -: 6544:            }
        -: 6545:            else
        -: 6546:            {
    #####: 6547:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 8);
    #####: 6548:                if ((item_value == NULL) ||
    #####: 6549:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6550:                {
    #####: 6551:                    *drain_value = false;
    #####: 6552:                    result = 0;
        -: 6553:                }
        -: 6554:                else
        -: 6555:                {
    #####: 6556:                    int get_single_value_result = amqpvalue_get_boolean(item_value, drain_value);
    #####: 6557:                    if (get_single_value_result != 0)
        -: 6558:                    {
    #####: 6559:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 6560:                        {
    #####: 6561:                            result = MU_FAILURE;
        -: 6562:                        }
        -: 6563:                        else
        -: 6564:                        {
    #####: 6565:                            *drain_value = false;
    #####: 6566:                            result = 0;
        -: 6567:                        }
        -: 6568:                    }
        -: 6569:                    else
        -: 6570:                    {
    #####: 6571:                        result = 0;
        -: 6572:                    }
        -: 6573:                }
        -: 6574:            }
        -: 6575:        }
        -: 6576:    }
        -: 6577:
    #####: 6578:    return result;
        -: 6579:}
        -: 6580:
    #####: 6581:int flow_set_drain(FLOW_HANDLE flow, bool drain_value)
        -: 6582:{
        -: 6583:    int result;
        -: 6584:
    #####: 6585:    if (flow == NULL)
        -: 6586:    {
    #####: 6587:        result = MU_FAILURE;
        -: 6588:    }
        -: 6589:    else
        -: 6590:    {
    #####: 6591:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6592:        AMQP_VALUE drain_amqp_value = amqpvalue_create_boolean(drain_value);
    #####: 6593:        if (drain_amqp_value == NULL)
        -: 6594:        {
    #####: 6595:            result = MU_FAILURE;
        -: 6596:        }
        -: 6597:        else
        -: 6598:        {
    #####: 6599:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 8, drain_amqp_value) != 0)
        -: 6600:            {
    #####: 6601:                result = MU_FAILURE;
        -: 6602:            }
        -: 6603:            else
        -: 6604:            {
    #####: 6605:                result = 0;
        -: 6606:            }
        -: 6607:
    #####: 6608:            amqpvalue_destroy(drain_amqp_value);
        -: 6609:        }
        -: 6610:    }
        -: 6611:
    #####: 6612:    return result;
        -: 6613:}
        -: 6614:
    #####: 6615:int flow_get_echo(FLOW_HANDLE flow, bool* echo_value)
        -: 6616:{
        -: 6617:    int result;
        -: 6618:
    #####: 6619:    if (flow == NULL)
        -: 6620:    {
    #####: 6621:        result = MU_FAILURE;
        -: 6622:    }
        -: 6623:    else
        -: 6624:    {
        -: 6625:        uint32_t item_count;
    #####: 6626:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6627:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6628:        {
    #####: 6629:            result = MU_FAILURE;
        -: 6630:        }
        -: 6631:        else
        -: 6632:        {
    #####: 6633:            if (item_count <= 9)
        -: 6634:            {
    #####: 6635:                *echo_value = false;
    #####: 6636:                result = 0;
        -: 6637:            }
        -: 6638:            else
        -: 6639:            {
    #####: 6640:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 9);
    #####: 6641:                if ((item_value == NULL) ||
    #####: 6642:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6643:                {
    #####: 6644:                    *echo_value = false;
    #####: 6645:                    result = 0;
        -: 6646:                }
        -: 6647:                else
        -: 6648:                {
    #####: 6649:                    int get_single_value_result = amqpvalue_get_boolean(item_value, echo_value);
    #####: 6650:                    if (get_single_value_result != 0)
        -: 6651:                    {
    #####: 6652:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 6653:                        {
    #####: 6654:                            result = MU_FAILURE;
        -: 6655:                        }
        -: 6656:                        else
        -: 6657:                        {
    #####: 6658:                            *echo_value = false;
    #####: 6659:                            result = 0;
        -: 6660:                        }
        -: 6661:                    }
        -: 6662:                    else
        -: 6663:                    {
    #####: 6664:                        result = 0;
        -: 6665:                    }
        -: 6666:                }
        -: 6667:            }
        -: 6668:        }
        -: 6669:    }
        -: 6670:
    #####: 6671:    return result;
        -: 6672:}
        -: 6673:
    #####: 6674:int flow_set_echo(FLOW_HANDLE flow, bool echo_value)
        -: 6675:{
        -: 6676:    int result;
        -: 6677:
    #####: 6678:    if (flow == NULL)
        -: 6679:    {
    #####: 6680:        result = MU_FAILURE;
        -: 6681:    }
        -: 6682:    else
        -: 6683:    {
    #####: 6684:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6685:        AMQP_VALUE echo_amqp_value = amqpvalue_create_boolean(echo_value);
    #####: 6686:        if (echo_amqp_value == NULL)
        -: 6687:        {
    #####: 6688:            result = MU_FAILURE;
        -: 6689:        }
        -: 6690:        else
        -: 6691:        {
    #####: 6692:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 9, echo_amqp_value) != 0)
        -: 6693:            {
    #####: 6694:                result = MU_FAILURE;
        -: 6695:            }
        -: 6696:            else
        -: 6697:            {
    #####: 6698:                result = 0;
        -: 6699:            }
        -: 6700:
    #####: 6701:            amqpvalue_destroy(echo_amqp_value);
        -: 6702:        }
        -: 6703:    }
        -: 6704:
    #####: 6705:    return result;
        -: 6706:}
        -: 6707:
    #####: 6708:int flow_get_properties(FLOW_HANDLE flow, fields* properties_value)
        -: 6709:{
        -: 6710:    int result;
        -: 6711:
    #####: 6712:    if (flow == NULL)
        -: 6713:    {
    #####: 6714:        result = MU_FAILURE;
        -: 6715:    }
        -: 6716:    else
        -: 6717:    {
        -: 6718:        uint32_t item_count;
    #####: 6719:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6720:        if (amqpvalue_get_composite_item_count(flow_instance->composite_value, &item_count) != 0)
        -: 6721:        {
    #####: 6722:            result = MU_FAILURE;
        -: 6723:        }
        -: 6724:        else
        -: 6725:        {
    #####: 6726:            if (item_count <= 10)
        -: 6727:            {
    #####: 6728:                result = MU_FAILURE;
        -: 6729:            }
        -: 6730:            else
        -: 6731:            {
    #####: 6732:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(flow_instance->composite_value, 10);
    #####: 6733:                if ((item_value == NULL) ||
    #####: 6734:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 6735:                {
    #####: 6736:                    result = MU_FAILURE;
        -: 6737:                }
        -: 6738:                else
        -: 6739:                {
    #####: 6740:                    int get_single_value_result = amqpvalue_get_fields(item_value, properties_value);
    #####: 6741:                    if (get_single_value_result != 0)
        -: 6742:                    {
    #####: 6743:                        result = MU_FAILURE;
        -: 6744:                    }
        -: 6745:                    else
        -: 6746:                    {
    #####: 6747:                        result = 0;
        -: 6748:                    }
        -: 6749:                }
        -: 6750:            }
        -: 6751:        }
        -: 6752:    }
        -: 6753:
    #####: 6754:    return result;
        -: 6755:}
        -: 6756:
    #####: 6757:int flow_set_properties(FLOW_HANDLE flow, fields properties_value)
        -: 6758:{
        -: 6759:    int result;
        -: 6760:
    #####: 6761:    if (flow == NULL)
        -: 6762:    {
    #####: 6763:        result = MU_FAILURE;
        -: 6764:    }
        -: 6765:    else
        -: 6766:    {
    #####: 6767:        FLOW_INSTANCE* flow_instance = (FLOW_INSTANCE*)flow;
    #####: 6768:        AMQP_VALUE properties_amqp_value = amqpvalue_create_fields(properties_value);
    #####: 6769:        if (properties_amqp_value == NULL)
        -: 6770:        {
    #####: 6771:            result = MU_FAILURE;
        -: 6772:        }
        -: 6773:        else
        -: 6774:        {
    #####: 6775:            if (amqpvalue_set_composite_item(flow_instance->composite_value, 10, properties_amqp_value) != 0)
        -: 6776:            {
    #####: 6777:                result = MU_FAILURE;
        -: 6778:            }
        -: 6779:            else
        -: 6780:            {
    #####: 6781:                result = 0;
        -: 6782:            }
        -: 6783:
    #####: 6784:            amqpvalue_destroy(properties_amqp_value);
        -: 6785:        }
        -: 6786:    }
        -: 6787:
    #####: 6788:    return result;
        -: 6789:}
        -: 6790:
        -: 6791:
        -: 6792:/* transfer */
        -: 6793:
        -: 6794:typedef struct TRANSFER_INSTANCE_TAG
        -: 6795:{
        -: 6796:    AMQP_VALUE composite_value;
        -: 6797:} TRANSFER_INSTANCE;
        -: 6798:
    #####: 6799:static TRANSFER_HANDLE transfer_create_internal(void)
        -: 6800:{
    #####: 6801:    TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)malloc(sizeof(TRANSFER_INSTANCE));
    #####: 6802:    if (transfer_instance != NULL)
        -: 6803:    {
    #####: 6804:        transfer_instance->composite_value = NULL;
        -: 6805:    }
        -: 6806:
    #####: 6807:    return transfer_instance;
        -: 6808:}
        -: 6809:
    #####: 6810:TRANSFER_HANDLE transfer_create(handle handle_value)
        -: 6811:{
    #####: 6812:    TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)malloc(sizeof(TRANSFER_INSTANCE));
    #####: 6813:    if (transfer_instance != NULL)
        -: 6814:    {
    #####: 6815:        transfer_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(20);
    #####: 6816:        if (transfer_instance->composite_value == NULL)
        -: 6817:        {
    #####: 6818:            free(transfer_instance);
    #####: 6819:            transfer_instance = NULL;
        -: 6820:        }
        -: 6821:        else
        -: 6822:        {
        -: 6823:            AMQP_VALUE handle_amqp_value;
    #####: 6824:            int result = 0;
        -: 6825:
    #####: 6826:            handle_amqp_value = amqpvalue_create_handle(handle_value);
    #####: 6827:            if ((result == 0) && (amqpvalue_set_composite_item(transfer_instance->composite_value, 0, handle_amqp_value) != 0))
        -: 6828:            {
    #####: 6829:                result = MU_FAILURE;
        -: 6830:            }
        -: 6831:
    #####: 6832:            amqpvalue_destroy(handle_amqp_value);
        -: 6833:        }
        -: 6834:    }
        -: 6835:
    #####: 6836:    return transfer_instance;
        -: 6837:}
        -: 6838:
    #####: 6839:TRANSFER_HANDLE transfer_clone(TRANSFER_HANDLE value)
        -: 6840:{
    #####: 6841:    TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)malloc(sizeof(TRANSFER_INSTANCE));
    #####: 6842:    if (transfer_instance != NULL)
        -: 6843:    {
    #####: 6844:        transfer_instance->composite_value = amqpvalue_clone(((TRANSFER_INSTANCE*)value)->composite_value);
    #####: 6845:        if (transfer_instance->composite_value == NULL)
        -: 6846:        {
    #####: 6847:            free(transfer_instance);
    #####: 6848:            transfer_instance = NULL;
        -: 6849:        }
        -: 6850:    }
        -: 6851:
    #####: 6852:    return transfer_instance;
        -: 6853:}
        -: 6854:
    #####: 6855:void transfer_destroy(TRANSFER_HANDLE transfer)
        -: 6856:{
    #####: 6857:    if (transfer != NULL)
        -: 6858:    {
    #####: 6859:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 6860:        amqpvalue_destroy(transfer_instance->composite_value);
    #####: 6861:        free(transfer_instance);
        -: 6862:    }
    #####: 6863:}
        -: 6864:
    #####: 6865:AMQP_VALUE amqpvalue_create_transfer(TRANSFER_HANDLE transfer)
        -: 6866:{
        -: 6867:    AMQP_VALUE result;
        -: 6868:
    #####: 6869:    if (transfer == NULL)
        -: 6870:    {
    #####: 6871:        result = NULL;
        -: 6872:    }
        -: 6873:    else
        -: 6874:    {
    #####: 6875:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 6876:        result = amqpvalue_clone(transfer_instance->composite_value);
        -: 6877:    }
        -: 6878:
    #####: 6879:    return result;
        -: 6880:}
        -: 6881:
    #####: 6882:bool is_transfer_type_by_descriptor(AMQP_VALUE descriptor)
        -: 6883:{
        -: 6884:    bool result;
        -: 6885:
        -: 6886:    uint64_t descriptor_ulong;
    #####: 6887:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####: 6888:        (descriptor_ulong == 20))
        -: 6889:    {
    #####: 6890:        result = true;
        -: 6891:    }
        -: 6892:    else
        -: 6893:    {
    #####: 6894:        result = false;
        -: 6895:    }
        -: 6896:
    #####: 6897:    return result;
        -: 6898:}
        -: 6899:
        -: 6900:
    #####: 6901:int amqpvalue_get_transfer(AMQP_VALUE value, TRANSFER_HANDLE* transfer_handle)
        -: 6902:{
        -: 6903:    int result;
    #####: 6904:    TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer_create_internal();
    #####: 6905:    *transfer_handle = transfer_instance;
    #####: 6906:    if (*transfer_handle == NULL)
        -: 6907:    {
    #####: 6908:        result = MU_FAILURE;
        -: 6909:    }
        -: 6910:    else
        -: 6911:    {
    #####: 6912:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####: 6913:        if (list_value == NULL)
        -: 6914:        {
    #####: 6915:            transfer_destroy(*transfer_handle);
    #####: 6916:            result = MU_FAILURE;
        -: 6917:        }
        -: 6918:        else
        -: 6919:        {
        -: 6920:            uint32_t list_item_count;
    #####: 6921:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -: 6922:            {
    #####: 6923:                result = MU_FAILURE;
        -: 6924:            }
        -: 6925:            else
        -: 6926:            {
        -: 6927:                do
        -: 6928:                {
        -: 6929:                    AMQP_VALUE item_value;
        -: 6930:                    /* handle */
    #####: 6931:                    if (list_item_count > 0)
        -: 6932:                    {
    #####: 6933:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####: 6934:                        if (item_value == NULL)
        -: 6935:                        {
        -: 6936:                            {
    #####: 6937:                                transfer_destroy(*transfer_handle);
    #####: 6938:                                result = MU_FAILURE;
    #####: 6939:                                break;
        -: 6940:                            }
        -: 6941:                        }
        -: 6942:                        else
        -: 6943:                        {
    #####: 6944:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 6945:                            {
    #####: 6946:                                amqpvalue_destroy(item_value);
    #####: 6947:                                transfer_destroy(*transfer_handle);
    #####: 6948:                                result = MU_FAILURE;
    #####: 6949:                                break;
        -: 6950:                            }
        -: 6951:                            else
        -: 6952:                            {
        -: 6953:                                handle handle;
    #####: 6954:                                if (amqpvalue_get_handle(item_value, &handle) != 0)
        -: 6955:                                {
    #####: 6956:                                    amqpvalue_destroy(item_value);
    #####: 6957:                                    transfer_destroy(*transfer_handle);
    #####: 6958:                                    result = MU_FAILURE;
    #####: 6959:                                    break;
        -: 6960:                                }
        -: 6961:                            }
        -: 6962:
    #####: 6963:                            amqpvalue_destroy(item_value);
        -: 6964:                        }
        -: 6965:                    }
        -: 6966:                    else
        -: 6967:                    {
    #####: 6968:                        result = MU_FAILURE;
        -: 6969:                    }
        -: 6970:                    /* delivery-id */
    #####: 6971:                    if (list_item_count > 1)
        -: 6972:                    {
    #####: 6973:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####: 6974:                        if (item_value == NULL)
        -: 6975:                        {
        -: 6976:                            /* do nothing */
        -: 6977:                        }
        -: 6978:                        else
        -: 6979:                        {
    #####: 6980:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 6981:                            {
        -: 6982:                                /* no error, field is not mandatory */
        -: 6983:                            }
        -: 6984:                            else
        -: 6985:                            {
        -: 6986:                                delivery_number delivery_id;
    #####: 6987:                                if (amqpvalue_get_delivery_number(item_value, &delivery_id) != 0)
        -: 6988:                                {
    #####: 6989:                                    amqpvalue_destroy(item_value);
    #####: 6990:                                    transfer_destroy(*transfer_handle);
    #####: 6991:                                    result = MU_FAILURE;
    #####: 6992:                                    break;
        -: 6993:                                }
        -: 6994:                            }
        -: 6995:
    #####: 6996:                            amqpvalue_destroy(item_value);
        -: 6997:                        }
        -: 6998:                    }
        -: 6999:                    /* delivery-tag */
    #####: 7000:                    if (list_item_count > 2)
        -: 7001:                    {
    #####: 7002:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####: 7003:                        if (item_value == NULL)
        -: 7004:                        {
        -: 7005:                            /* do nothing */
        -: 7006:                        }
        -: 7007:                        else
        -: 7008:                        {
    #####: 7009:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 7010:                            {
        -: 7011:                                /* no error, field is not mandatory */
        -: 7012:                            }
        -: 7013:                            else
        -: 7014:                            {
        -: 7015:                                delivery_tag delivery_tag;
    #####: 7016:                                if (amqpvalue_get_delivery_tag(item_value, &delivery_tag) != 0)
        -: 7017:                                {
    #####: 7018:                                    amqpvalue_destroy(item_value);
    #####: 7019:                                    transfer_destroy(*transfer_handle);
    #####: 7020:                                    result = MU_FAILURE;
    #####: 7021:                                    break;
        -: 7022:                                }
        -: 7023:                            }
        -: 7024:
    #####: 7025:                            amqpvalue_destroy(item_value);
        -: 7026:                        }
        -: 7027:                    }
        -: 7028:                    /* message-format */
    #####: 7029:                    if (list_item_count > 3)
        -: 7030:                    {
    #####: 7031:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####: 7032:                        if (item_value == NULL)
        -: 7033:                        {
        -: 7034:                            /* do nothing */
        -: 7035:                        }
        -: 7036:                        else
        -: 7037:                        {
    #####: 7038:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 7039:                            {
        -: 7040:                                /* no error, field is not mandatory */
        -: 7041:                            }
        -: 7042:                            else
        -: 7043:                            {
        -: 7044:                                message_format message_format;
    #####: 7045:                                if (amqpvalue_get_message_format(item_value, &message_format) != 0)
        -: 7046:                                {
    #####: 7047:                                    amqpvalue_destroy(item_value);
    #####: 7048:                                    transfer_destroy(*transfer_handle);
    #####: 7049:                                    result = MU_FAILURE;
    #####: 7050:                                    break;
        -: 7051:                                }
        -: 7052:                            }
        -: 7053:
    #####: 7054:                            amqpvalue_destroy(item_value);
        -: 7055:                        }
        -: 7056:                    }
        -: 7057:                    /* settled */
    #####: 7058:                    if (list_item_count > 4)
        -: 7059:                    {
    #####: 7060:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####: 7061:                        if (item_value == NULL)
        -: 7062:                        {
        -: 7063:                            /* do nothing */
        -: 7064:                        }
        -: 7065:                        else
        -: 7066:                        {
    #####: 7067:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 7068:                            {
        -: 7069:                                /* no error, field is not mandatory */
        -: 7070:                            }
        -: 7071:                            else
        -: 7072:                            {
        -: 7073:                                bool settled;
    #####: 7074:                                if (amqpvalue_get_boolean(item_value, &settled) != 0)
        -: 7075:                                {
    #####: 7076:                                    amqpvalue_destroy(item_value);
    #####: 7077:                                    transfer_destroy(*transfer_handle);
    #####: 7078:                                    result = MU_FAILURE;
    #####: 7079:                                    break;
        -: 7080:                                }
        -: 7081:                            }
        -: 7082:
    #####: 7083:                            amqpvalue_destroy(item_value);
        -: 7084:                        }
        -: 7085:                    }
        -: 7086:                    /* more */
    #####: 7087:                    if (list_item_count > 5)
        -: 7088:                    {
    #####: 7089:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####: 7090:                        if (item_value == NULL)
        -: 7091:                        {
        -: 7092:                            /* do nothing */
        -: 7093:                        }
        -: 7094:                        else
        -: 7095:                        {
    #####: 7096:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 7097:                            {
        -: 7098:                                /* no error, field is not mandatory */
        -: 7099:                            }
        -: 7100:                            else
        -: 7101:                            {
        -: 7102:                                bool more;
    #####: 7103:                                if (amqpvalue_get_boolean(item_value, &more) != 0)
        -: 7104:                                {
    #####: 7105:                                    amqpvalue_destroy(item_value);
    #####: 7106:                                    transfer_destroy(*transfer_handle);
    #####: 7107:                                    result = MU_FAILURE;
    #####: 7108:                                    break;
        -: 7109:                                }
        -: 7110:                            }
        -: 7111:
    #####: 7112:                            amqpvalue_destroy(item_value);
        -: 7113:                        }
        -: 7114:                    }
        -: 7115:                    /* rcv-settle-mode */
    #####: 7116:                    if (list_item_count > 6)
        -: 7117:                    {
    #####: 7118:                        item_value = amqpvalue_get_list_item(list_value, 6);
    #####: 7119:                        if (item_value == NULL)
        -: 7120:                        {
        -: 7121:                            /* do nothing */
        -: 7122:                        }
        -: 7123:                        else
        -: 7124:                        {
    #####: 7125:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 7126:                            {
        -: 7127:                                /* no error, field is not mandatory */
        -: 7128:                            }
        -: 7129:                            else
        -: 7130:                            {
        -: 7131:                                receiver_settle_mode rcv_settle_mode;
    #####: 7132:                                if (amqpvalue_get_receiver_settle_mode(item_value, &rcv_settle_mode) != 0)
        -: 7133:                                {
    #####: 7134:                                    amqpvalue_destroy(item_value);
    #####: 7135:                                    transfer_destroy(*transfer_handle);
    #####: 7136:                                    result = MU_FAILURE;
    #####: 7137:                                    break;
        -: 7138:                                }
        -: 7139:                            }
        -: 7140:
    #####: 7141:                            amqpvalue_destroy(item_value);
        -: 7142:                        }
        -: 7143:                    }
        -: 7144:                    /* state */
    #####: 7145:                    if (list_item_count > 7)
        -: 7146:                    {
    #####: 7147:                        item_value = amqpvalue_get_list_item(list_value, 7);
    #####: 7148:                        if (item_value == NULL)
        -: 7149:                        {
        -: 7150:                            /* do nothing */
        -: 7151:                        }
        -: 7152:                        else
        -: 7153:                        {
    #####: 7154:                            amqpvalue_destroy(item_value);
        -: 7155:                        }
        -: 7156:                    }
        -: 7157:                    /* resume */
    #####: 7158:                    if (list_item_count > 8)
        -: 7159:                    {
    #####: 7160:                        item_value = amqpvalue_get_list_item(list_value, 8);
    #####: 7161:                        if (item_value == NULL)
        -: 7162:                        {
        -: 7163:                            /* do nothing */
        -: 7164:                        }
        -: 7165:                        else
        -: 7166:                        {
    #####: 7167:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 7168:                            {
        -: 7169:                                /* no error, field is not mandatory */
        -: 7170:                            }
        -: 7171:                            else
        -: 7172:                            {
        -: 7173:                                bool resume;
    #####: 7174:                                if (amqpvalue_get_boolean(item_value, &resume) != 0)
        -: 7175:                                {
    #####: 7176:                                    amqpvalue_destroy(item_value);
    #####: 7177:                                    transfer_destroy(*transfer_handle);
    #####: 7178:                                    result = MU_FAILURE;
    #####: 7179:                                    break;
        -: 7180:                                }
        -: 7181:                            }
        -: 7182:
    #####: 7183:                            amqpvalue_destroy(item_value);
        -: 7184:                        }
        -: 7185:                    }
        -: 7186:                    /* aborted */
    #####: 7187:                    if (list_item_count > 9)
        -: 7188:                    {
    #####: 7189:                        item_value = amqpvalue_get_list_item(list_value, 9);
    #####: 7190:                        if (item_value == NULL)
        -: 7191:                        {
        -: 7192:                            /* do nothing */
        -: 7193:                        }
        -: 7194:                        else
        -: 7195:                        {
    #####: 7196:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 7197:                            {
        -: 7198:                                /* no error, field is not mandatory */
        -: 7199:                            }
        -: 7200:                            else
        -: 7201:                            {
        -: 7202:                                bool aborted;
    #####: 7203:                                if (amqpvalue_get_boolean(item_value, &aborted) != 0)
        -: 7204:                                {
    #####: 7205:                                    amqpvalue_destroy(item_value);
    #####: 7206:                                    transfer_destroy(*transfer_handle);
    #####: 7207:                                    result = MU_FAILURE;
    #####: 7208:                                    break;
        -: 7209:                                }
        -: 7210:                            }
        -: 7211:
    #####: 7212:                            amqpvalue_destroy(item_value);
        -: 7213:                        }
        -: 7214:                    }
        -: 7215:                    /* batchable */
    #####: 7216:                    if (list_item_count > 10)
        -: 7217:                    {
    #####: 7218:                        item_value = amqpvalue_get_list_item(list_value, 10);
    #####: 7219:                        if (item_value == NULL)
        -: 7220:                        {
        -: 7221:                            /* do nothing */
        -: 7222:                        }
        -: 7223:                        else
        -: 7224:                        {
    #####: 7225:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 7226:                            {
        -: 7227:                                /* no error, field is not mandatory */
        -: 7228:                            }
        -: 7229:                            else
        -: 7230:                            {
        -: 7231:                                bool batchable;
    #####: 7232:                                if (amqpvalue_get_boolean(item_value, &batchable) != 0)
        -: 7233:                                {
    #####: 7234:                                    amqpvalue_destroy(item_value);
    #####: 7235:                                    transfer_destroy(*transfer_handle);
    #####: 7236:                                    result = MU_FAILURE;
    #####: 7237:                                    break;
        -: 7238:                                }
        -: 7239:                            }
        -: 7240:
    #####: 7241:                            amqpvalue_destroy(item_value);
        -: 7242:                        }
        -: 7243:                    }
        -: 7244:
    #####: 7245:                    transfer_instance->composite_value = amqpvalue_clone(value);
        -: 7246:
    #####: 7247:                    result = 0;
        -: 7248:                } while((void)0,0);
        -: 7249:            }
        -: 7250:        }
        -: 7251:    }
        -: 7252:
    #####: 7253:    return result;
        -: 7254:}
        -: 7255:
    #####: 7256:int transfer_get_handle(TRANSFER_HANDLE transfer, handle* handle_value)
        -: 7257:{
        -: 7258:    int result;
        -: 7259:
    #####: 7260:    if (transfer == NULL)
        -: 7261:    {
    #####: 7262:        result = MU_FAILURE;
        -: 7263:    }
        -: 7264:    else
        -: 7265:    {
        -: 7266:        uint32_t item_count;
    #####: 7267:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7268:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7269:        {
    #####: 7270:            result = MU_FAILURE;
        -: 7271:        }
        -: 7272:        else
        -: 7273:        {
    #####: 7274:            if (item_count <= 0)
        -: 7275:            {
    #####: 7276:                result = MU_FAILURE;
        -: 7277:            }
        -: 7278:            else
        -: 7279:            {
    #####: 7280:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 0);
    #####: 7281:                if ((item_value == NULL) ||
    #####: 7282:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7283:                {
    #####: 7284:                    result = MU_FAILURE;
        -: 7285:                }
        -: 7286:                else
        -: 7287:                {
    #####: 7288:                    int get_single_value_result = amqpvalue_get_handle(item_value, handle_value);
    #####: 7289:                    if (get_single_value_result != 0)
        -: 7290:                    {
    #####: 7291:                        result = MU_FAILURE;
        -: 7292:                    }
        -: 7293:                    else
        -: 7294:                    {
    #####: 7295:                        result = 0;
        -: 7296:                    }
        -: 7297:                }
        -: 7298:            }
        -: 7299:        }
        -: 7300:    }
        -: 7301:
    #####: 7302:    return result;
        -: 7303:}
        -: 7304:
    #####: 7305:int transfer_set_handle(TRANSFER_HANDLE transfer, handle handle_value)
        -: 7306:{
        -: 7307:    int result;
        -: 7308:
    #####: 7309:    if (transfer == NULL)
        -: 7310:    {
    #####: 7311:        result = MU_FAILURE;
        -: 7312:    }
        -: 7313:    else
        -: 7314:    {
    #####: 7315:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7316:        AMQP_VALUE handle_amqp_value = amqpvalue_create_handle(handle_value);
    #####: 7317:        if (handle_amqp_value == NULL)
        -: 7318:        {
    #####: 7319:            result = MU_FAILURE;
        -: 7320:        }
        -: 7321:        else
        -: 7322:        {
    #####: 7323:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 0, handle_amqp_value) != 0)
        -: 7324:            {
    #####: 7325:                result = MU_FAILURE;
        -: 7326:            }
        -: 7327:            else
        -: 7328:            {
    #####: 7329:                result = 0;
        -: 7330:            }
        -: 7331:
    #####: 7332:            amqpvalue_destroy(handle_amqp_value);
        -: 7333:        }
        -: 7334:    }
        -: 7335:
    #####: 7336:    return result;
        -: 7337:}
        -: 7338:
    #####: 7339:int transfer_get_delivery_id(TRANSFER_HANDLE transfer, delivery_number* delivery_id_value)
        -: 7340:{
        -: 7341:    int result;
        -: 7342:
    #####: 7343:    if (transfer == NULL)
        -: 7344:    {
    #####: 7345:        result = MU_FAILURE;
        -: 7346:    }
        -: 7347:    else
        -: 7348:    {
        -: 7349:        uint32_t item_count;
    #####: 7350:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7351:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7352:        {
    #####: 7353:            result = MU_FAILURE;
        -: 7354:        }
        -: 7355:        else
        -: 7356:        {
    #####: 7357:            if (item_count <= 1)
        -: 7358:            {
    #####: 7359:                result = MU_FAILURE;
        -: 7360:            }
        -: 7361:            else
        -: 7362:            {
    #####: 7363:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 1);
    #####: 7364:                if ((item_value == NULL) ||
    #####: 7365:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7366:                {
    #####: 7367:                    result = MU_FAILURE;
        -: 7368:                }
        -: 7369:                else
        -: 7370:                {
    #####: 7371:                    int get_single_value_result = amqpvalue_get_delivery_number(item_value, delivery_id_value);
    #####: 7372:                    if (get_single_value_result != 0)
        -: 7373:                    {
    #####: 7374:                        result = MU_FAILURE;
        -: 7375:                    }
        -: 7376:                    else
        -: 7377:                    {
    #####: 7378:                        result = 0;
        -: 7379:                    }
        -: 7380:                }
        -: 7381:            }
        -: 7382:        }
        -: 7383:    }
        -: 7384:
    #####: 7385:    return result;
        -: 7386:}
        -: 7387:
    #####: 7388:int transfer_set_delivery_id(TRANSFER_HANDLE transfer, delivery_number delivery_id_value)
        -: 7389:{
        -: 7390:    int result;
        -: 7391:
    #####: 7392:    if (transfer == NULL)
        -: 7393:    {
    #####: 7394:        result = MU_FAILURE;
        -: 7395:    }
        -: 7396:    else
        -: 7397:    {
    #####: 7398:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7399:        AMQP_VALUE delivery_id_amqp_value = amqpvalue_create_delivery_number(delivery_id_value);
    #####: 7400:        if (delivery_id_amqp_value == NULL)
        -: 7401:        {
    #####: 7402:            result = MU_FAILURE;
        -: 7403:        }
        -: 7404:        else
        -: 7405:        {
    #####: 7406:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 1, delivery_id_amqp_value) != 0)
        -: 7407:            {
    #####: 7408:                result = MU_FAILURE;
        -: 7409:            }
        -: 7410:            else
        -: 7411:            {
    #####: 7412:                result = 0;
        -: 7413:            }
        -: 7414:
    #####: 7415:            amqpvalue_destroy(delivery_id_amqp_value);
        -: 7416:        }
        -: 7417:    }
        -: 7418:
    #####: 7419:    return result;
        -: 7420:}
        -: 7421:
    #####: 7422:int transfer_get_delivery_tag(TRANSFER_HANDLE transfer, delivery_tag* delivery_tag_value)
        -: 7423:{
        -: 7424:    int result;
        -: 7425:
    #####: 7426:    if (transfer == NULL)
        -: 7427:    {
    #####: 7428:        result = MU_FAILURE;
        -: 7429:    }
        -: 7430:    else
        -: 7431:    {
        -: 7432:        uint32_t item_count;
    #####: 7433:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7434:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7435:        {
    #####: 7436:            result = MU_FAILURE;
        -: 7437:        }
        -: 7438:        else
        -: 7439:        {
    #####: 7440:            if (item_count <= 2)
        -: 7441:            {
    #####: 7442:                result = MU_FAILURE;
        -: 7443:            }
        -: 7444:            else
        -: 7445:            {
    #####: 7446:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 2);
    #####: 7447:                if ((item_value == NULL) ||
    #####: 7448:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7449:                {
    #####: 7450:                    result = MU_FAILURE;
        -: 7451:                }
        -: 7452:                else
        -: 7453:                {
    #####: 7454:                    int get_single_value_result = amqpvalue_get_delivery_tag(item_value, delivery_tag_value);
    #####: 7455:                    if (get_single_value_result != 0)
        -: 7456:                    {
    #####: 7457:                        result = MU_FAILURE;
        -: 7458:                    }
        -: 7459:                    else
        -: 7460:                    {
    #####: 7461:                        result = 0;
        -: 7462:                    }
        -: 7463:                }
        -: 7464:            }
        -: 7465:        }
        -: 7466:    }
        -: 7467:
    #####: 7468:    return result;
        -: 7469:}
        -: 7470:
    #####: 7471:int transfer_set_delivery_tag(TRANSFER_HANDLE transfer, delivery_tag delivery_tag_value)
        -: 7472:{
        -: 7473:    int result;
        -: 7474:
    #####: 7475:    if (transfer == NULL)
        -: 7476:    {
    #####: 7477:        result = MU_FAILURE;
        -: 7478:    }
        -: 7479:    else
        -: 7480:    {
    #####: 7481:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7482:        AMQP_VALUE delivery_tag_amqp_value = amqpvalue_create_delivery_tag(delivery_tag_value);
    #####: 7483:        if (delivery_tag_amqp_value == NULL)
        -: 7484:        {
    #####: 7485:            result = MU_FAILURE;
        -: 7486:        }
        -: 7487:        else
        -: 7488:        {
    #####: 7489:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 2, delivery_tag_amqp_value) != 0)
        -: 7490:            {
    #####: 7491:                result = MU_FAILURE;
        -: 7492:            }
        -: 7493:            else
        -: 7494:            {
    #####: 7495:                result = 0;
        -: 7496:            }
        -: 7497:
    #####: 7498:            amqpvalue_destroy(delivery_tag_amqp_value);
        -: 7499:        }
        -: 7500:    }
        -: 7501:
    #####: 7502:    return result;
        -: 7503:}
        -: 7504:
    #####: 7505:int transfer_get_message_format(TRANSFER_HANDLE transfer, message_format* message_format_value)
        -: 7506:{
        -: 7507:    int result;
        -: 7508:
    #####: 7509:    if (transfer == NULL)
        -: 7510:    {
    #####: 7511:        result = MU_FAILURE;
        -: 7512:    }
        -: 7513:    else
        -: 7514:    {
        -: 7515:        uint32_t item_count;
    #####: 7516:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7517:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7518:        {
    #####: 7519:            result = MU_FAILURE;
        -: 7520:        }
        -: 7521:        else
        -: 7522:        {
    #####: 7523:            if (item_count <= 3)
        -: 7524:            {
    #####: 7525:                result = MU_FAILURE;
        -: 7526:            }
        -: 7527:            else
        -: 7528:            {
    #####: 7529:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 3);
    #####: 7530:                if ((item_value == NULL) ||
    #####: 7531:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7532:                {
    #####: 7533:                    result = MU_FAILURE;
        -: 7534:                }
        -: 7535:                else
        -: 7536:                {
    #####: 7537:                    int get_single_value_result = amqpvalue_get_message_format(item_value, message_format_value);
    #####: 7538:                    if (get_single_value_result != 0)
        -: 7539:                    {
    #####: 7540:                        result = MU_FAILURE;
        -: 7541:                    }
        -: 7542:                    else
        -: 7543:                    {
    #####: 7544:                        result = 0;
        -: 7545:                    }
        -: 7546:                }
        -: 7547:            }
        -: 7548:        }
        -: 7549:    }
        -: 7550:
    #####: 7551:    return result;
        -: 7552:}
        -: 7553:
    #####: 7554:int transfer_set_message_format(TRANSFER_HANDLE transfer, message_format message_format_value)
        -: 7555:{
        -: 7556:    int result;
        -: 7557:
    #####: 7558:    if (transfer == NULL)
        -: 7559:    {
    #####: 7560:        result = MU_FAILURE;
        -: 7561:    }
        -: 7562:    else
        -: 7563:    {
    #####: 7564:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7565:        AMQP_VALUE message_format_amqp_value = amqpvalue_create_message_format(message_format_value);
    #####: 7566:        if (message_format_amqp_value == NULL)
        -: 7567:        {
    #####: 7568:            result = MU_FAILURE;
        -: 7569:        }
        -: 7570:        else
        -: 7571:        {
    #####: 7572:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 3, message_format_amqp_value) != 0)
        -: 7573:            {
    #####: 7574:                result = MU_FAILURE;
        -: 7575:            }
        -: 7576:            else
        -: 7577:            {
    #####: 7578:                result = 0;
        -: 7579:            }
        -: 7580:
    #####: 7581:            amqpvalue_destroy(message_format_amqp_value);
        -: 7582:        }
        -: 7583:    }
        -: 7584:
    #####: 7585:    return result;
        -: 7586:}
        -: 7587:
    #####: 7588:int transfer_get_settled(TRANSFER_HANDLE transfer, bool* settled_value)
        -: 7589:{
        -: 7590:    int result;
        -: 7591:
    #####: 7592:    if (transfer == NULL)
        -: 7593:    {
    #####: 7594:        result = MU_FAILURE;
        -: 7595:    }
        -: 7596:    else
        -: 7597:    {
        -: 7598:        uint32_t item_count;
    #####: 7599:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7600:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7601:        {
    #####: 7602:            result = MU_FAILURE;
        -: 7603:        }
        -: 7604:        else
        -: 7605:        {
    #####: 7606:            if (item_count <= 4)
        -: 7607:            {
    #####: 7608:                result = MU_FAILURE;
        -: 7609:            }
        -: 7610:            else
        -: 7611:            {
    #####: 7612:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 4);
    #####: 7613:                if ((item_value == NULL) ||
    #####: 7614:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7615:                {
    #####: 7616:                    result = MU_FAILURE;
        -: 7617:                }
        -: 7618:                else
        -: 7619:                {
    #####: 7620:                    int get_single_value_result = amqpvalue_get_boolean(item_value, settled_value);
    #####: 7621:                    if (get_single_value_result != 0)
        -: 7622:                    {
    #####: 7623:                        result = MU_FAILURE;
        -: 7624:                    }
        -: 7625:                    else
        -: 7626:                    {
    #####: 7627:                        result = 0;
        -: 7628:                    }
        -: 7629:                }
        -: 7630:            }
        -: 7631:        }
        -: 7632:    }
        -: 7633:
    #####: 7634:    return result;
        -: 7635:}
        -: 7636:
    #####: 7637:int transfer_set_settled(TRANSFER_HANDLE transfer, bool settled_value)
        -: 7638:{
        -: 7639:    int result;
        -: 7640:
    #####: 7641:    if (transfer == NULL)
        -: 7642:    {
    #####: 7643:        result = MU_FAILURE;
        -: 7644:    }
        -: 7645:    else
        -: 7646:    {
    #####: 7647:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7648:        AMQP_VALUE settled_amqp_value = amqpvalue_create_boolean(settled_value);
    #####: 7649:        if (settled_amqp_value == NULL)
        -: 7650:        {
    #####: 7651:            result = MU_FAILURE;
        -: 7652:        }
        -: 7653:        else
        -: 7654:        {
    #####: 7655:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 4, settled_amqp_value) != 0)
        -: 7656:            {
    #####: 7657:                result = MU_FAILURE;
        -: 7658:            }
        -: 7659:            else
        -: 7660:            {
    #####: 7661:                result = 0;
        -: 7662:            }
        -: 7663:
    #####: 7664:            amqpvalue_destroy(settled_amqp_value);
        -: 7665:        }
        -: 7666:    }
        -: 7667:
    #####: 7668:    return result;
        -: 7669:}
        -: 7670:
    #####: 7671:int transfer_get_more(TRANSFER_HANDLE transfer, bool* more_value)
        -: 7672:{
        -: 7673:    int result;
        -: 7674:
    #####: 7675:    if (transfer == NULL)
        -: 7676:    {
    #####: 7677:        result = MU_FAILURE;
        -: 7678:    }
        -: 7679:    else
        -: 7680:    {
        -: 7681:        uint32_t item_count;
    #####: 7682:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7683:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7684:        {
    #####: 7685:            result = MU_FAILURE;
        -: 7686:        }
        -: 7687:        else
        -: 7688:        {
    #####: 7689:            if (item_count <= 5)
        -: 7690:            {
    #####: 7691:                *more_value = false;
    #####: 7692:                result = 0;
        -: 7693:            }
        -: 7694:            else
        -: 7695:            {
    #####: 7696:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 5);
    #####: 7697:                if ((item_value == NULL) ||
    #####: 7698:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7699:                {
    #####: 7700:                    *more_value = false;
    #####: 7701:                    result = 0;
        -: 7702:                }
        -: 7703:                else
        -: 7704:                {
    #####: 7705:                    int get_single_value_result = amqpvalue_get_boolean(item_value, more_value);
    #####: 7706:                    if (get_single_value_result != 0)
        -: 7707:                    {
    #####: 7708:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 7709:                        {
    #####: 7710:                            result = MU_FAILURE;
        -: 7711:                        }
        -: 7712:                        else
        -: 7713:                        {
    #####: 7714:                            *more_value = false;
    #####: 7715:                            result = 0;
        -: 7716:                        }
        -: 7717:                    }
        -: 7718:                    else
        -: 7719:                    {
    #####: 7720:                        result = 0;
        -: 7721:                    }
        -: 7722:                }
        -: 7723:            }
        -: 7724:        }
        -: 7725:    }
        -: 7726:
    #####: 7727:    return result;
        -: 7728:}
        -: 7729:
    #####: 7730:int transfer_set_more(TRANSFER_HANDLE transfer, bool more_value)
        -: 7731:{
        -: 7732:    int result;
        -: 7733:
    #####: 7734:    if (transfer == NULL)
        -: 7735:    {
    #####: 7736:        result = MU_FAILURE;
        -: 7737:    }
        -: 7738:    else
        -: 7739:    {
    #####: 7740:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7741:        AMQP_VALUE more_amqp_value = amqpvalue_create_boolean(more_value);
    #####: 7742:        if (more_amqp_value == NULL)
        -: 7743:        {
    #####: 7744:            result = MU_FAILURE;
        -: 7745:        }
        -: 7746:        else
        -: 7747:        {
    #####: 7748:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 5, more_amqp_value) != 0)
        -: 7749:            {
    #####: 7750:                result = MU_FAILURE;
        -: 7751:            }
        -: 7752:            else
        -: 7753:            {
    #####: 7754:                result = 0;
        -: 7755:            }
        -: 7756:
    #####: 7757:            amqpvalue_destroy(more_amqp_value);
        -: 7758:        }
        -: 7759:    }
        -: 7760:
    #####: 7761:    return result;
        -: 7762:}
        -: 7763:
    #####: 7764:int transfer_get_rcv_settle_mode(TRANSFER_HANDLE transfer, receiver_settle_mode* rcv_settle_mode_value)
        -: 7765:{
        -: 7766:    int result;
        -: 7767:
    #####: 7768:    if (transfer == NULL)
        -: 7769:    {
    #####: 7770:        result = MU_FAILURE;
        -: 7771:    }
        -: 7772:    else
        -: 7773:    {
        -: 7774:        uint32_t item_count;
    #####: 7775:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7776:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7777:        {
    #####: 7778:            result = MU_FAILURE;
        -: 7779:        }
        -: 7780:        else
        -: 7781:        {
    #####: 7782:            if (item_count <= 6)
        -: 7783:            {
    #####: 7784:                result = MU_FAILURE;
        -: 7785:            }
        -: 7786:            else
        -: 7787:            {
    #####: 7788:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 6);
    #####: 7789:                if ((item_value == NULL) ||
    #####: 7790:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7791:                {
    #####: 7792:                    result = MU_FAILURE;
        -: 7793:                }
        -: 7794:                else
        -: 7795:                {
    #####: 7796:                    int get_single_value_result = amqpvalue_get_receiver_settle_mode(item_value, rcv_settle_mode_value);
    #####: 7797:                    if (get_single_value_result != 0)
        -: 7798:                    {
    #####: 7799:                        result = MU_FAILURE;
        -: 7800:                    }
        -: 7801:                    else
        -: 7802:                    {
    #####: 7803:                        result = 0;
        -: 7804:                    }
        -: 7805:                }
        -: 7806:            }
        -: 7807:        }
        -: 7808:    }
        -: 7809:
    #####: 7810:    return result;
        -: 7811:}
        -: 7812:
    #####: 7813:int transfer_set_rcv_settle_mode(TRANSFER_HANDLE transfer, receiver_settle_mode rcv_settle_mode_value)
        -: 7814:{
        -: 7815:    int result;
        -: 7816:
    #####: 7817:    if (transfer == NULL)
        -: 7818:    {
    #####: 7819:        result = MU_FAILURE;
        -: 7820:    }
        -: 7821:    else
        -: 7822:    {
    #####: 7823:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7824:        AMQP_VALUE rcv_settle_mode_amqp_value = amqpvalue_create_receiver_settle_mode(rcv_settle_mode_value);
    #####: 7825:        if (rcv_settle_mode_amqp_value == NULL)
        -: 7826:        {
    #####: 7827:            result = MU_FAILURE;
        -: 7828:        }
        -: 7829:        else
        -: 7830:        {
    #####: 7831:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 6, rcv_settle_mode_amqp_value) != 0)
        -: 7832:            {
    #####: 7833:                result = MU_FAILURE;
        -: 7834:            }
        -: 7835:            else
        -: 7836:            {
    #####: 7837:                result = 0;
        -: 7838:            }
        -: 7839:
    #####: 7840:            amqpvalue_destroy(rcv_settle_mode_amqp_value);
        -: 7841:        }
        -: 7842:    }
        -: 7843:
    #####: 7844:    return result;
        -: 7845:}
        -: 7846:
    #####: 7847:int transfer_get_state(TRANSFER_HANDLE transfer, AMQP_VALUE* state_value)
        -: 7848:{
        -: 7849:    int result;
        -: 7850:
    #####: 7851:    if (transfer == NULL)
        -: 7852:    {
    #####: 7853:        result = MU_FAILURE;
        -: 7854:    }
        -: 7855:    else
        -: 7856:    {
        -: 7857:        uint32_t item_count;
    #####: 7858:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7859:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7860:        {
    #####: 7861:            result = MU_FAILURE;
        -: 7862:        }
        -: 7863:        else
        -: 7864:        {
    #####: 7865:            if (item_count <= 7)
        -: 7866:            {
    #####: 7867:                result = MU_FAILURE;
        -: 7868:            }
        -: 7869:            else
        -: 7870:            {
    #####: 7871:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 7);
    #####: 7872:                if ((item_value == NULL) ||
    #####: 7873:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7874:                {
    #####: 7875:                    result = MU_FAILURE;
        -: 7876:                }
        -: 7877:                else
        -: 7878:                {
    #####: 7879:                    *state_value = item_value;
    #####: 7880:                    result = 0;
        -: 7881:                }
        -: 7882:            }
        -: 7883:        }
        -: 7884:    }
        -: 7885:
    #####: 7886:    return result;
        -: 7887:}
        -: 7888:
    #####: 7889:int transfer_set_state(TRANSFER_HANDLE transfer, AMQP_VALUE state_value)
        -: 7890:{
        -: 7891:    int result;
        -: 7892:
    #####: 7893:    if (transfer == NULL)
        -: 7894:    {
    #####: 7895:        result = MU_FAILURE;
        -: 7896:    }
        -: 7897:    else
        -: 7898:    {
    #####: 7899:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
        -: 7900:        AMQP_VALUE state_amqp_value;
    #####: 7901:        if (state_value == NULL)
        -: 7902:        {
    #####: 7903:            state_amqp_value = NULL;
        -: 7904:        }
        -: 7905:        else
        -: 7906:        {
    #####: 7907:            state_amqp_value = amqpvalue_clone(state_value);
        -: 7908:        }
    #####: 7909:        if (state_amqp_value == NULL)
        -: 7910:        {
    #####: 7911:            result = MU_FAILURE;
        -: 7912:        }
        -: 7913:        else
        -: 7914:        {
    #####: 7915:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 7, state_amqp_value) != 0)
        -: 7916:            {
    #####: 7917:                result = MU_FAILURE;
        -: 7918:            }
        -: 7919:            else
        -: 7920:            {
    #####: 7921:                result = 0;
        -: 7922:            }
        -: 7923:
    #####: 7924:            amqpvalue_destroy(state_amqp_value);
        -: 7925:        }
        -: 7926:    }
        -: 7927:
    #####: 7928:    return result;
        -: 7929:}
        -: 7930:
    #####: 7931:int transfer_get_resume(TRANSFER_HANDLE transfer, bool* resume_value)
        -: 7932:{
        -: 7933:    int result;
        -: 7934:
    #####: 7935:    if (transfer == NULL)
        -: 7936:    {
    #####: 7937:        result = MU_FAILURE;
        -: 7938:    }
        -: 7939:    else
        -: 7940:    {
        -: 7941:        uint32_t item_count;
    #####: 7942:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 7943:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 7944:        {
    #####: 7945:            result = MU_FAILURE;
        -: 7946:        }
        -: 7947:        else
        -: 7948:        {
    #####: 7949:            if (item_count <= 8)
        -: 7950:            {
    #####: 7951:                *resume_value = false;
    #####: 7952:                result = 0;
        -: 7953:            }
        -: 7954:            else
        -: 7955:            {
    #####: 7956:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 8);
    #####: 7957:                if ((item_value == NULL) ||
    #####: 7958:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 7959:                {
    #####: 7960:                    *resume_value = false;
    #####: 7961:                    result = 0;
        -: 7962:                }
        -: 7963:                else
        -: 7964:                {
    #####: 7965:                    int get_single_value_result = amqpvalue_get_boolean(item_value, resume_value);
    #####: 7966:                    if (get_single_value_result != 0)
        -: 7967:                    {
    #####: 7968:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 7969:                        {
    #####: 7970:                            result = MU_FAILURE;
        -: 7971:                        }
        -: 7972:                        else
        -: 7973:                        {
    #####: 7974:                            *resume_value = false;
    #####: 7975:                            result = 0;
        -: 7976:                        }
        -: 7977:                    }
        -: 7978:                    else
        -: 7979:                    {
    #####: 7980:                        result = 0;
        -: 7981:                    }
        -: 7982:                }
        -: 7983:            }
        -: 7984:        }
        -: 7985:    }
        -: 7986:
    #####: 7987:    return result;
        -: 7988:}
        -: 7989:
    #####: 7990:int transfer_set_resume(TRANSFER_HANDLE transfer, bool resume_value)
        -: 7991:{
        -: 7992:    int result;
        -: 7993:
    #####: 7994:    if (transfer == NULL)
        -: 7995:    {
    #####: 7996:        result = MU_FAILURE;
        -: 7997:    }
        -: 7998:    else
        -: 7999:    {
    #####: 8000:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 8001:        AMQP_VALUE resume_amqp_value = amqpvalue_create_boolean(resume_value);
    #####: 8002:        if (resume_amqp_value == NULL)
        -: 8003:        {
    #####: 8004:            result = MU_FAILURE;
        -: 8005:        }
        -: 8006:        else
        -: 8007:        {
    #####: 8008:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 8, resume_amqp_value) != 0)
        -: 8009:            {
    #####: 8010:                result = MU_FAILURE;
        -: 8011:            }
        -: 8012:            else
        -: 8013:            {
    #####: 8014:                result = 0;
        -: 8015:            }
        -: 8016:
    #####: 8017:            amqpvalue_destroy(resume_amqp_value);
        -: 8018:        }
        -: 8019:    }
        -: 8020:
    #####: 8021:    return result;
        -: 8022:}
        -: 8023:
    #####: 8024:int transfer_get_aborted(TRANSFER_HANDLE transfer, bool* aborted_value)
        -: 8025:{
        -: 8026:    int result;
        -: 8027:
    #####: 8028:    if (transfer == NULL)
        -: 8029:    {
    #####: 8030:        result = MU_FAILURE;
        -: 8031:    }
        -: 8032:    else
        -: 8033:    {
        -: 8034:        uint32_t item_count;
    #####: 8035:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 8036:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 8037:        {
    #####: 8038:            result = MU_FAILURE;
        -: 8039:        }
        -: 8040:        else
        -: 8041:        {
    #####: 8042:            if (item_count <= 9)
        -: 8043:            {
    #####: 8044:                *aborted_value = false;
    #####: 8045:                result = 0;
        -: 8046:            }
        -: 8047:            else
        -: 8048:            {
    #####: 8049:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 9);
    #####: 8050:                if ((item_value == NULL) ||
    #####: 8051:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 8052:                {
    #####: 8053:                    *aborted_value = false;
    #####: 8054:                    result = 0;
        -: 8055:                }
        -: 8056:                else
        -: 8057:                {
    #####: 8058:                    int get_single_value_result = amqpvalue_get_boolean(item_value, aborted_value);
    #####: 8059:                    if (get_single_value_result != 0)
        -: 8060:                    {
    #####: 8061:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 8062:                        {
    #####: 8063:                            result = MU_FAILURE;
        -: 8064:                        }
        -: 8065:                        else
        -: 8066:                        {
    #####: 8067:                            *aborted_value = false;
    #####: 8068:                            result = 0;
        -: 8069:                        }
        -: 8070:                    }
        -: 8071:                    else
        -: 8072:                    {
    #####: 8073:                        result = 0;
        -: 8074:                    }
        -: 8075:                }
        -: 8076:            }
        -: 8077:        }
        -: 8078:    }
        -: 8079:
    #####: 8080:    return result;
        -: 8081:}
        -: 8082:
    #####: 8083:int transfer_set_aborted(TRANSFER_HANDLE transfer, bool aborted_value)
        -: 8084:{
        -: 8085:    int result;
        -: 8086:
    #####: 8087:    if (transfer == NULL)
        -: 8088:    {
    #####: 8089:        result = MU_FAILURE;
        -: 8090:    }
        -: 8091:    else
        -: 8092:    {
    #####: 8093:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 8094:        AMQP_VALUE aborted_amqp_value = amqpvalue_create_boolean(aborted_value);
    #####: 8095:        if (aborted_amqp_value == NULL)
        -: 8096:        {
    #####: 8097:            result = MU_FAILURE;
        -: 8098:        }
        -: 8099:        else
        -: 8100:        {
    #####: 8101:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 9, aborted_amqp_value) != 0)
        -: 8102:            {
    #####: 8103:                result = MU_FAILURE;
        -: 8104:            }
        -: 8105:            else
        -: 8106:            {
    #####: 8107:                result = 0;
        -: 8108:            }
        -: 8109:
    #####: 8110:            amqpvalue_destroy(aborted_amqp_value);
        -: 8111:        }
        -: 8112:    }
        -: 8113:
    #####: 8114:    return result;
        -: 8115:}
        -: 8116:
    #####: 8117:int transfer_get_batchable(TRANSFER_HANDLE transfer, bool* batchable_value)
        -: 8118:{
        -: 8119:    int result;
        -: 8120:
    #####: 8121:    if (transfer == NULL)
        -: 8122:    {
    #####: 8123:        result = MU_FAILURE;
        -: 8124:    }
        -: 8125:    else
        -: 8126:    {
        -: 8127:        uint32_t item_count;
    #####: 8128:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 8129:        if (amqpvalue_get_composite_item_count(transfer_instance->composite_value, &item_count) != 0)
        -: 8130:        {
    #####: 8131:            result = MU_FAILURE;
        -: 8132:        }
        -: 8133:        else
        -: 8134:        {
    #####: 8135:            if (item_count <= 10)
        -: 8136:            {
    #####: 8137:                *batchable_value = false;
    #####: 8138:                result = 0;
        -: 8139:            }
        -: 8140:            else
        -: 8141:            {
    #####: 8142:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(transfer_instance->composite_value, 10);
    #####: 8143:                if ((item_value == NULL) ||
    #####: 8144:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 8145:                {
    #####: 8146:                    *batchable_value = false;
    #####: 8147:                    result = 0;
        -: 8148:                }
        -: 8149:                else
        -: 8150:                {
    #####: 8151:                    int get_single_value_result = amqpvalue_get_boolean(item_value, batchable_value);
    #####: 8152:                    if (get_single_value_result != 0)
        -: 8153:                    {
    #####: 8154:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 8155:                        {
    #####: 8156:                            result = MU_FAILURE;
        -: 8157:                        }
        -: 8158:                        else
        -: 8159:                        {
    #####: 8160:                            *batchable_value = false;
    #####: 8161:                            result = 0;
        -: 8162:                        }
        -: 8163:                    }
        -: 8164:                    else
        -: 8165:                    {
    #####: 8166:                        result = 0;
        -: 8167:                    }
        -: 8168:                }
        -: 8169:            }
        -: 8170:        }
        -: 8171:    }
        -: 8172:
    #####: 8173:    return result;
        -: 8174:}
        -: 8175:
    #####: 8176:int transfer_set_batchable(TRANSFER_HANDLE transfer, bool batchable_value)
        -: 8177:{
        -: 8178:    int result;
        -: 8179:
    #####: 8180:    if (transfer == NULL)
        -: 8181:    {
    #####: 8182:        result = MU_FAILURE;
        -: 8183:    }
        -: 8184:    else
        -: 8185:    {
    #####: 8186:        TRANSFER_INSTANCE* transfer_instance = (TRANSFER_INSTANCE*)transfer;
    #####: 8187:        AMQP_VALUE batchable_amqp_value = amqpvalue_create_boolean(batchable_value);
    #####: 8188:        if (batchable_amqp_value == NULL)
        -: 8189:        {
    #####: 8190:            result = MU_FAILURE;
        -: 8191:        }
        -: 8192:        else
        -: 8193:        {
    #####: 8194:            if (amqpvalue_set_composite_item(transfer_instance->composite_value, 10, batchable_amqp_value) != 0)
        -: 8195:            {
    #####: 8196:                result = MU_FAILURE;
        -: 8197:            }
        -: 8198:            else
        -: 8199:            {
    #####: 8200:                result = 0;
        -: 8201:            }
        -: 8202:
    #####: 8203:            amqpvalue_destroy(batchable_amqp_value);
        -: 8204:        }
        -: 8205:    }
        -: 8206:
    #####: 8207:    return result;
        -: 8208:}
        -: 8209:
        -: 8210:
        -: 8211:/* disposition */
        -: 8212:
        -: 8213:typedef struct DISPOSITION_INSTANCE_TAG
        -: 8214:{
        -: 8215:    AMQP_VALUE composite_value;
        -: 8216:} DISPOSITION_INSTANCE;
        -: 8217:
    #####: 8218:static DISPOSITION_HANDLE disposition_create_internal(void)
        -: 8219:{
    #####: 8220:    DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)malloc(sizeof(DISPOSITION_INSTANCE));
    #####: 8221:    if (disposition_instance != NULL)
        -: 8222:    {
    #####: 8223:        disposition_instance->composite_value = NULL;
        -: 8224:    }
        -: 8225:
    #####: 8226:    return disposition_instance;
        -: 8227:}
        -: 8228:
    #####: 8229:DISPOSITION_HANDLE disposition_create(role role_value, delivery_number first_value)
        -: 8230:{
    #####: 8231:    DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)malloc(sizeof(DISPOSITION_INSTANCE));
    #####: 8232:    if (disposition_instance != NULL)
        -: 8233:    {
    #####: 8234:        disposition_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(21);
    #####: 8235:        if (disposition_instance->composite_value == NULL)
        -: 8236:        {
    #####: 8237:            free(disposition_instance);
    #####: 8238:            disposition_instance = NULL;
        -: 8239:        }
        -: 8240:        else
        -: 8241:        {
        -: 8242:            AMQP_VALUE role_amqp_value;
        -: 8243:            AMQP_VALUE first_amqp_value;
    #####: 8244:            int result = 0;
        -: 8245:
    #####: 8246:            role_amqp_value = amqpvalue_create_role(role_value);
    #####: 8247:            if ((result == 0) && (amqpvalue_set_composite_item(disposition_instance->composite_value, 0, role_amqp_value) != 0))
        -: 8248:            {
    #####: 8249:                result = MU_FAILURE;
        -: 8250:            }
    #####: 8251:            first_amqp_value = amqpvalue_create_delivery_number(first_value);
    #####: 8252:            if ((result == 0) && (amqpvalue_set_composite_item(disposition_instance->composite_value, 1, first_amqp_value) != 0))
        -: 8253:            {
    #####: 8254:                result = MU_FAILURE;
        -: 8255:            }
        -: 8256:
    #####: 8257:            amqpvalue_destroy(role_amqp_value);
    #####: 8258:            amqpvalue_destroy(first_amqp_value);
        -: 8259:        }
        -: 8260:    }
        -: 8261:
    #####: 8262:    return disposition_instance;
        -: 8263:}
        -: 8264:
    #####: 8265:DISPOSITION_HANDLE disposition_clone(DISPOSITION_HANDLE value)
        -: 8266:{
    #####: 8267:    DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)malloc(sizeof(DISPOSITION_INSTANCE));
    #####: 8268:    if (disposition_instance != NULL)
        -: 8269:    {
    #####: 8270:        disposition_instance->composite_value = amqpvalue_clone(((DISPOSITION_INSTANCE*)value)->composite_value);
    #####: 8271:        if (disposition_instance->composite_value == NULL)
        -: 8272:        {
    #####: 8273:            free(disposition_instance);
    #####: 8274:            disposition_instance = NULL;
        -: 8275:        }
        -: 8276:    }
        -: 8277:
    #####: 8278:    return disposition_instance;
        -: 8279:}
        -: 8280:
    #####: 8281:void disposition_destroy(DISPOSITION_HANDLE disposition)
        -: 8282:{
    #####: 8283:    if (disposition != NULL)
        -: 8284:    {
    #####: 8285:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8286:        amqpvalue_destroy(disposition_instance->composite_value);
    #####: 8287:        free(disposition_instance);
        -: 8288:    }
    #####: 8289:}
        -: 8290:
    #####: 8291:AMQP_VALUE amqpvalue_create_disposition(DISPOSITION_HANDLE disposition)
        -: 8292:{
        -: 8293:    AMQP_VALUE result;
        -: 8294:
    #####: 8295:    if (disposition == NULL)
        -: 8296:    {
    #####: 8297:        result = NULL;
        -: 8298:    }
        -: 8299:    else
        -: 8300:    {
    #####: 8301:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8302:        result = amqpvalue_clone(disposition_instance->composite_value);
        -: 8303:    }
        -: 8304:
    #####: 8305:    return result;
        -: 8306:}
        -: 8307:
    #####: 8308:bool is_disposition_type_by_descriptor(AMQP_VALUE descriptor)
        -: 8309:{
        -: 8310:    bool result;
        -: 8311:
        -: 8312:    uint64_t descriptor_ulong;
    #####: 8313:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####: 8314:        (descriptor_ulong == 21))
        -: 8315:    {
    #####: 8316:        result = true;
        -: 8317:    }
        -: 8318:    else
        -: 8319:    {
    #####: 8320:        result = false;
        -: 8321:    }
        -: 8322:
    #####: 8323:    return result;
        -: 8324:}
        -: 8325:
        -: 8326:
    #####: 8327:int amqpvalue_get_disposition(AMQP_VALUE value, DISPOSITION_HANDLE* disposition_handle)
        -: 8328:{
        -: 8329:    int result;
    #####: 8330:    DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition_create_internal();
    #####: 8331:    *disposition_handle = disposition_instance;
    #####: 8332:    if (*disposition_handle == NULL)
        -: 8333:    {
    #####: 8334:        result = MU_FAILURE;
        -: 8335:    }
        -: 8336:    else
        -: 8337:    {
    #####: 8338:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####: 8339:        if (list_value == NULL)
        -: 8340:        {
    #####: 8341:            disposition_destroy(*disposition_handle);
    #####: 8342:            result = MU_FAILURE;
        -: 8343:        }
        -: 8344:        else
        -: 8345:        {
        -: 8346:            uint32_t list_item_count;
    #####: 8347:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -: 8348:            {
    #####: 8349:                result = MU_FAILURE;
        -: 8350:            }
        -: 8351:            else
        -: 8352:            {
        -: 8353:                do
        -: 8354:                {
        -: 8355:                    AMQP_VALUE item_value;
        -: 8356:                    /* role */
    #####: 8357:                    if (list_item_count > 0)
        -: 8358:                    {
    #####: 8359:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####: 8360:                        if (item_value == NULL)
        -: 8361:                        {
        -: 8362:                            {
    #####: 8363:                                disposition_destroy(*disposition_handle);
    #####: 8364:                                result = MU_FAILURE;
    #####: 8365:                                break;
        -: 8366:                            }
        -: 8367:                        }
        -: 8368:                        else
        -: 8369:                        {
    #####: 8370:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 8371:                            {
    #####: 8372:                                amqpvalue_destroy(item_value);
    #####: 8373:                                disposition_destroy(*disposition_handle);
    #####: 8374:                                result = MU_FAILURE;
    #####: 8375:                                break;
        -: 8376:                            }
        -: 8377:                            else
        -: 8378:                            {
        -: 8379:                                role role;
    #####: 8380:                                if (amqpvalue_get_role(item_value, &role) != 0)
        -: 8381:                                {
    #####: 8382:                                    amqpvalue_destroy(item_value);
    #####: 8383:                                    disposition_destroy(*disposition_handle);
    #####: 8384:                                    result = MU_FAILURE;
    #####: 8385:                                    break;
        -: 8386:                                }
        -: 8387:                            }
        -: 8388:
    #####: 8389:                            amqpvalue_destroy(item_value);
        -: 8390:                        }
        -: 8391:                    }
        -: 8392:                    else
        -: 8393:                    {
    #####: 8394:                        result = MU_FAILURE;
        -: 8395:                    }
        -: 8396:                    /* first */
    #####: 8397:                    if (list_item_count > 1)
        -: 8398:                    {
    #####: 8399:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####: 8400:                        if (item_value == NULL)
        -: 8401:                        {
        -: 8402:                            {
    #####: 8403:                                disposition_destroy(*disposition_handle);
    #####: 8404:                                result = MU_FAILURE;
    #####: 8405:                                break;
        -: 8406:                            }
        -: 8407:                        }
        -: 8408:                        else
        -: 8409:                        {
    #####: 8410:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 8411:                            {
    #####: 8412:                                amqpvalue_destroy(item_value);
    #####: 8413:                                disposition_destroy(*disposition_handle);
    #####: 8414:                                result = MU_FAILURE;
    #####: 8415:                                break;
        -: 8416:                            }
        -: 8417:                            else
        -: 8418:                            {
        -: 8419:                                delivery_number first;
    #####: 8420:                                if (amqpvalue_get_delivery_number(item_value, &first) != 0)
        -: 8421:                                {
    #####: 8422:                                    amqpvalue_destroy(item_value);
    #####: 8423:                                    disposition_destroy(*disposition_handle);
    #####: 8424:                                    result = MU_FAILURE;
    #####: 8425:                                    break;
        -: 8426:                                }
        -: 8427:                            }
        -: 8428:
    #####: 8429:                            amqpvalue_destroy(item_value);
        -: 8430:                        }
        -: 8431:                    }
        -: 8432:                    else
        -: 8433:                    {
    #####: 8434:                        result = MU_FAILURE;
        -: 8435:                    }
        -: 8436:                    /* last */
    #####: 8437:                    if (list_item_count > 2)
        -: 8438:                    {
    #####: 8439:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####: 8440:                        if (item_value == NULL)
        -: 8441:                        {
        -: 8442:                            /* do nothing */
        -: 8443:                        }
        -: 8444:                        else
        -: 8445:                        {
    #####: 8446:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 8447:                            {
        -: 8448:                                /* no error, field is not mandatory */
        -: 8449:                            }
        -: 8450:                            else
        -: 8451:                            {
        -: 8452:                                delivery_number last;
    #####: 8453:                                if (amqpvalue_get_delivery_number(item_value, &last) != 0)
        -: 8454:                                {
    #####: 8455:                                    amqpvalue_destroy(item_value);
    #####: 8456:                                    disposition_destroy(*disposition_handle);
    #####: 8457:                                    result = MU_FAILURE;
    #####: 8458:                                    break;
        -: 8459:                                }
        -: 8460:                            }
        -: 8461:
    #####: 8462:                            amqpvalue_destroy(item_value);
        -: 8463:                        }
        -: 8464:                    }
        -: 8465:                    /* settled */
    #####: 8466:                    if (list_item_count > 3)
        -: 8467:                    {
    #####: 8468:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####: 8469:                        if (item_value == NULL)
        -: 8470:                        {
        -: 8471:                            /* do nothing */
        -: 8472:                        }
        -: 8473:                        else
        -: 8474:                        {
    #####: 8475:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 8476:                            {
        -: 8477:                                /* no error, field is not mandatory */
        -: 8478:                            }
        -: 8479:                            else
        -: 8480:                            {
        -: 8481:                                bool settled;
    #####: 8482:                                if (amqpvalue_get_boolean(item_value, &settled) != 0)
        -: 8483:                                {
    #####: 8484:                                    amqpvalue_destroy(item_value);
    #####: 8485:                                    disposition_destroy(*disposition_handle);
    #####: 8486:                                    result = MU_FAILURE;
    #####: 8487:                                    break;
        -: 8488:                                }
        -: 8489:                            }
        -: 8490:
    #####: 8491:                            amqpvalue_destroy(item_value);
        -: 8492:                        }
        -: 8493:                    }
        -: 8494:                    /* state */
    #####: 8495:                    if (list_item_count > 4)
        -: 8496:                    {
    #####: 8497:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####: 8498:                        if (item_value == NULL)
        -: 8499:                        {
        -: 8500:                            /* do nothing */
        -: 8501:                        }
        -: 8502:                        else
        -: 8503:                        {
    #####: 8504:                            amqpvalue_destroy(item_value);
        -: 8505:                        }
        -: 8506:                    }
        -: 8507:                    /* batchable */
    #####: 8508:                    if (list_item_count > 5)
        -: 8509:                    {
    #####: 8510:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####: 8511:                        if (item_value == NULL)
        -: 8512:                        {
        -: 8513:                            /* do nothing */
        -: 8514:                        }
        -: 8515:                        else
        -: 8516:                        {
    #####: 8517:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 8518:                            {
        -: 8519:                                /* no error, field is not mandatory */
        -: 8520:                            }
        -: 8521:                            else
        -: 8522:                            {
        -: 8523:                                bool batchable;
    #####: 8524:                                if (amqpvalue_get_boolean(item_value, &batchable) != 0)
        -: 8525:                                {
    #####: 8526:                                    amqpvalue_destroy(item_value);
    #####: 8527:                                    disposition_destroy(*disposition_handle);
    #####: 8528:                                    result = MU_FAILURE;
    #####: 8529:                                    break;
        -: 8530:                                }
        -: 8531:                            }
        -: 8532:
    #####: 8533:                            amqpvalue_destroy(item_value);
        -: 8534:                        }
        -: 8535:                    }
        -: 8536:
    #####: 8537:                    disposition_instance->composite_value = amqpvalue_clone(value);
        -: 8538:
    #####: 8539:                    result = 0;
        -: 8540:                } while((void)0,0);
        -: 8541:            }
        -: 8542:        }
        -: 8543:    }
        -: 8544:
    #####: 8545:    return result;
        -: 8546:}
        -: 8547:
    #####: 8548:int disposition_get_role(DISPOSITION_HANDLE disposition, role* role_value)
        -: 8549:{
        -: 8550:    int result;
        -: 8551:
    #####: 8552:    if (disposition == NULL)
        -: 8553:    {
    #####: 8554:        result = MU_FAILURE;
        -: 8555:    }
        -: 8556:    else
        -: 8557:    {
        -: 8558:        uint32_t item_count;
    #####: 8559:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8560:        if (amqpvalue_get_composite_item_count(disposition_instance->composite_value, &item_count) != 0)
        -: 8561:        {
    #####: 8562:            result = MU_FAILURE;
        -: 8563:        }
        -: 8564:        else
        -: 8565:        {
    #####: 8566:            if (item_count <= 0)
        -: 8567:            {
    #####: 8568:                result = MU_FAILURE;
        -: 8569:            }
        -: 8570:            else
        -: 8571:            {
    #####: 8572:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(disposition_instance->composite_value, 0);
    #####: 8573:                if ((item_value == NULL) ||
    #####: 8574:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 8575:                {
    #####: 8576:                    result = MU_FAILURE;
        -: 8577:                }
        -: 8578:                else
        -: 8579:                {
    #####: 8580:                    int get_single_value_result = amqpvalue_get_role(item_value, role_value);
    #####: 8581:                    if (get_single_value_result != 0)
        -: 8582:                    {
    #####: 8583:                        result = MU_FAILURE;
        -: 8584:                    }
        -: 8585:                    else
        -: 8586:                    {
    #####: 8587:                        result = 0;
        -: 8588:                    }
        -: 8589:                }
        -: 8590:            }
        -: 8591:        }
        -: 8592:    }
        -: 8593:
    #####: 8594:    return result;
        -: 8595:}
        -: 8596:
    #####: 8597:int disposition_set_role(DISPOSITION_HANDLE disposition, role role_value)
        -: 8598:{
        -: 8599:    int result;
        -: 8600:
    #####: 8601:    if (disposition == NULL)
        -: 8602:    {
    #####: 8603:        result = MU_FAILURE;
        -: 8604:    }
        -: 8605:    else
        -: 8606:    {
    #####: 8607:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8608:        AMQP_VALUE role_amqp_value = amqpvalue_create_role(role_value);
    #####: 8609:        if (role_amqp_value == NULL)
        -: 8610:        {
    #####: 8611:            result = MU_FAILURE;
        -: 8612:        }
        -: 8613:        else
        -: 8614:        {
    #####: 8615:            if (amqpvalue_set_composite_item(disposition_instance->composite_value, 0, role_amqp_value) != 0)
        -: 8616:            {
    #####: 8617:                result = MU_FAILURE;
        -: 8618:            }
        -: 8619:            else
        -: 8620:            {
    #####: 8621:                result = 0;
        -: 8622:            }
        -: 8623:
    #####: 8624:            amqpvalue_destroy(role_amqp_value);
        -: 8625:        }
        -: 8626:    }
        -: 8627:
    #####: 8628:    return result;
        -: 8629:}
        -: 8630:
    #####: 8631:int disposition_get_first(DISPOSITION_HANDLE disposition, delivery_number* first_value)
        -: 8632:{
        -: 8633:    int result;
        -: 8634:
    #####: 8635:    if (disposition == NULL)
        -: 8636:    {
    #####: 8637:        result = MU_FAILURE;
        -: 8638:    }
        -: 8639:    else
        -: 8640:    {
        -: 8641:        uint32_t item_count;
    #####: 8642:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8643:        if (amqpvalue_get_composite_item_count(disposition_instance->composite_value, &item_count) != 0)
        -: 8644:        {
    #####: 8645:            result = MU_FAILURE;
        -: 8646:        }
        -: 8647:        else
        -: 8648:        {
    #####: 8649:            if (item_count <= 1)
        -: 8650:            {
    #####: 8651:                result = MU_FAILURE;
        -: 8652:            }
        -: 8653:            else
        -: 8654:            {
    #####: 8655:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(disposition_instance->composite_value, 1);
    #####: 8656:                if ((item_value == NULL) ||
    #####: 8657:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 8658:                {
    #####: 8659:                    result = MU_FAILURE;
        -: 8660:                }
        -: 8661:                else
        -: 8662:                {
    #####: 8663:                    int get_single_value_result = amqpvalue_get_delivery_number(item_value, first_value);
    #####: 8664:                    if (get_single_value_result != 0)
        -: 8665:                    {
    #####: 8666:                        result = MU_FAILURE;
        -: 8667:                    }
        -: 8668:                    else
        -: 8669:                    {
    #####: 8670:                        result = 0;
        -: 8671:                    }
        -: 8672:                }
        -: 8673:            }
        -: 8674:        }
        -: 8675:    }
        -: 8676:
    #####: 8677:    return result;
        -: 8678:}
        -: 8679:
    #####: 8680:int disposition_set_first(DISPOSITION_HANDLE disposition, delivery_number first_value)
        -: 8681:{
        -: 8682:    int result;
        -: 8683:
    #####: 8684:    if (disposition == NULL)
        -: 8685:    {
    #####: 8686:        result = MU_FAILURE;
        -: 8687:    }
        -: 8688:    else
        -: 8689:    {
    #####: 8690:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8691:        AMQP_VALUE first_amqp_value = amqpvalue_create_delivery_number(first_value);
    #####: 8692:        if (first_amqp_value == NULL)
        -: 8693:        {
    #####: 8694:            result = MU_FAILURE;
        -: 8695:        }
        -: 8696:        else
        -: 8697:        {
    #####: 8698:            if (amqpvalue_set_composite_item(disposition_instance->composite_value, 1, first_amqp_value) != 0)
        -: 8699:            {
    #####: 8700:                result = MU_FAILURE;
        -: 8701:            }
        -: 8702:            else
        -: 8703:            {
    #####: 8704:                result = 0;
        -: 8705:            }
        -: 8706:
    #####: 8707:            amqpvalue_destroy(first_amqp_value);
        -: 8708:        }
        -: 8709:    }
        -: 8710:
    #####: 8711:    return result;
        -: 8712:}
        -: 8713:
    #####: 8714:int disposition_get_last(DISPOSITION_HANDLE disposition, delivery_number* last_value)
        -: 8715:{
        -: 8716:    int result;
        -: 8717:
    #####: 8718:    if (disposition == NULL)
        -: 8719:    {
    #####: 8720:        result = MU_FAILURE;
        -: 8721:    }
        -: 8722:    else
        -: 8723:    {
        -: 8724:        uint32_t item_count;
    #####: 8725:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8726:        if (amqpvalue_get_composite_item_count(disposition_instance->composite_value, &item_count) != 0)
        -: 8727:        {
    #####: 8728:            result = MU_FAILURE;
        -: 8729:        }
        -: 8730:        else
        -: 8731:        {
    #####: 8732:            if (item_count <= 2)
        -: 8733:            {
    #####: 8734:                result = MU_FAILURE;
        -: 8735:            }
        -: 8736:            else
        -: 8737:            {
    #####: 8738:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(disposition_instance->composite_value, 2);
    #####: 8739:                if ((item_value == NULL) ||
    #####: 8740:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 8741:                {
    #####: 8742:                    result = MU_FAILURE;
        -: 8743:                }
        -: 8744:                else
        -: 8745:                {
    #####: 8746:                    int get_single_value_result = amqpvalue_get_delivery_number(item_value, last_value);
    #####: 8747:                    if (get_single_value_result != 0)
        -: 8748:                    {
    #####: 8749:                        result = MU_FAILURE;
        -: 8750:                    }
        -: 8751:                    else
        -: 8752:                    {
    #####: 8753:                        result = 0;
        -: 8754:                    }
        -: 8755:                }
        -: 8756:            }
        -: 8757:        }
        -: 8758:    }
        -: 8759:
    #####: 8760:    return result;
        -: 8761:}
        -: 8762:
    #####: 8763:int disposition_set_last(DISPOSITION_HANDLE disposition, delivery_number last_value)
        -: 8764:{
        -: 8765:    int result;
        -: 8766:
    #####: 8767:    if (disposition == NULL)
        -: 8768:    {
    #####: 8769:        result = MU_FAILURE;
        -: 8770:    }
        -: 8771:    else
        -: 8772:    {
    #####: 8773:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8774:        AMQP_VALUE last_amqp_value = amqpvalue_create_delivery_number(last_value);
    #####: 8775:        if (last_amqp_value == NULL)
        -: 8776:        {
    #####: 8777:            result = MU_FAILURE;
        -: 8778:        }
        -: 8779:        else
        -: 8780:        {
    #####: 8781:            if (amqpvalue_set_composite_item(disposition_instance->composite_value, 2, last_amqp_value) != 0)
        -: 8782:            {
    #####: 8783:                result = MU_FAILURE;
        -: 8784:            }
        -: 8785:            else
        -: 8786:            {
    #####: 8787:                result = 0;
        -: 8788:            }
        -: 8789:
    #####: 8790:            amqpvalue_destroy(last_amqp_value);
        -: 8791:        }
        -: 8792:    }
        -: 8793:
    #####: 8794:    return result;
        -: 8795:}
        -: 8796:
    #####: 8797:int disposition_get_settled(DISPOSITION_HANDLE disposition, bool* settled_value)
        -: 8798:{
        -: 8799:    int result;
        -: 8800:
    #####: 8801:    if (disposition == NULL)
        -: 8802:    {
    #####: 8803:        result = MU_FAILURE;
        -: 8804:    }
        -: 8805:    else
        -: 8806:    {
        -: 8807:        uint32_t item_count;
    #####: 8808:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8809:        if (amqpvalue_get_composite_item_count(disposition_instance->composite_value, &item_count) != 0)
        -: 8810:        {
    #####: 8811:            result = MU_FAILURE;
        -: 8812:        }
        -: 8813:        else
        -: 8814:        {
    #####: 8815:            if (item_count <= 3)
        -: 8816:            {
    #####: 8817:                *settled_value = false;
    #####: 8818:                result = 0;
        -: 8819:            }
        -: 8820:            else
        -: 8821:            {
    #####: 8822:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(disposition_instance->composite_value, 3);
    #####: 8823:                if ((item_value == NULL) ||
    #####: 8824:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 8825:                {
    #####: 8826:                    *settled_value = false;
    #####: 8827:                    result = 0;
        -: 8828:                }
        -: 8829:                else
        -: 8830:                {
    #####: 8831:                    int get_single_value_result = amqpvalue_get_boolean(item_value, settled_value);
    #####: 8832:                    if (get_single_value_result != 0)
        -: 8833:                    {
    #####: 8834:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 8835:                        {
    #####: 8836:                            result = MU_FAILURE;
        -: 8837:                        }
        -: 8838:                        else
        -: 8839:                        {
    #####: 8840:                            *settled_value = false;
    #####: 8841:                            result = 0;
        -: 8842:                        }
        -: 8843:                    }
        -: 8844:                    else
        -: 8845:                    {
    #####: 8846:                        result = 0;
        -: 8847:                    }
        -: 8848:                }
        -: 8849:            }
        -: 8850:        }
        -: 8851:    }
        -: 8852:
    #####: 8853:    return result;
        -: 8854:}
        -: 8855:
    #####: 8856:int disposition_set_settled(DISPOSITION_HANDLE disposition, bool settled_value)
        -: 8857:{
        -: 8858:    int result;
        -: 8859:
    #####: 8860:    if (disposition == NULL)
        -: 8861:    {
    #####: 8862:        result = MU_FAILURE;
        -: 8863:    }
        -: 8864:    else
        -: 8865:    {
    #####: 8866:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8867:        AMQP_VALUE settled_amqp_value = amqpvalue_create_boolean(settled_value);
    #####: 8868:        if (settled_amqp_value == NULL)
        -: 8869:        {
    #####: 8870:            result = MU_FAILURE;
        -: 8871:        }
        -: 8872:        else
        -: 8873:        {
    #####: 8874:            if (amqpvalue_set_composite_item(disposition_instance->composite_value, 3, settled_amqp_value) != 0)
        -: 8875:            {
    #####: 8876:                result = MU_FAILURE;
        -: 8877:            }
        -: 8878:            else
        -: 8879:            {
    #####: 8880:                result = 0;
        -: 8881:            }
        -: 8882:
    #####: 8883:            amqpvalue_destroy(settled_amqp_value);
        -: 8884:        }
        -: 8885:    }
        -: 8886:
    #####: 8887:    return result;
        -: 8888:}
        -: 8889:
    #####: 8890:int disposition_get_state(DISPOSITION_HANDLE disposition, AMQP_VALUE* state_value)
        -: 8891:{
        -: 8892:    int result;
        -: 8893:
    #####: 8894:    if (disposition == NULL)
        -: 8895:    {
    #####: 8896:        result = MU_FAILURE;
        -: 8897:    }
        -: 8898:    else
        -: 8899:    {
        -: 8900:        uint32_t item_count;
    #####: 8901:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8902:        if (amqpvalue_get_composite_item_count(disposition_instance->composite_value, &item_count) != 0)
        -: 8903:        {
    #####: 8904:            result = MU_FAILURE;
        -: 8905:        }
        -: 8906:        else
        -: 8907:        {
    #####: 8908:            if (item_count <= 4)
        -: 8909:            {
    #####: 8910:                result = MU_FAILURE;
        -: 8911:            }
        -: 8912:            else
        -: 8913:            {
    #####: 8914:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(disposition_instance->composite_value, 4);
    #####: 8915:                if ((item_value == NULL) ||
    #####: 8916:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 8917:                {
    #####: 8918:                    result = MU_FAILURE;
        -: 8919:                }
        -: 8920:                else
        -: 8921:                {
    #####: 8922:                    *state_value = item_value;
    #####: 8923:                    result = 0;
        -: 8924:                }
        -: 8925:            }
        -: 8926:        }
        -: 8927:    }
        -: 8928:
    #####: 8929:    return result;
        -: 8930:}
        -: 8931:
    #####: 8932:int disposition_set_state(DISPOSITION_HANDLE disposition, AMQP_VALUE state_value)
        -: 8933:{
        -: 8934:    int result;
        -: 8935:
    #####: 8936:    if (disposition == NULL)
        -: 8937:    {
    #####: 8938:        result = MU_FAILURE;
        -: 8939:    }
        -: 8940:    else
        -: 8941:    {
    #####: 8942:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
        -: 8943:        AMQP_VALUE state_amqp_value;
    #####: 8944:        if (state_value == NULL)
        -: 8945:        {
    #####: 8946:            state_amqp_value = NULL;
        -: 8947:        }
        -: 8948:        else
        -: 8949:        {
    #####: 8950:            state_amqp_value = amqpvalue_clone(state_value);
        -: 8951:        }
    #####: 8952:        if (state_amqp_value == NULL)
        -: 8953:        {
    #####: 8954:            result = MU_FAILURE;
        -: 8955:        }
        -: 8956:        else
        -: 8957:        {
    #####: 8958:            if (amqpvalue_set_composite_item(disposition_instance->composite_value, 4, state_amqp_value) != 0)
        -: 8959:            {
    #####: 8960:                result = MU_FAILURE;
        -: 8961:            }
        -: 8962:            else
        -: 8963:            {
    #####: 8964:                result = 0;
        -: 8965:            }
        -: 8966:
    #####: 8967:            amqpvalue_destroy(state_amqp_value);
        -: 8968:        }
        -: 8969:    }
        -: 8970:
    #####: 8971:    return result;
        -: 8972:}
        -: 8973:
    #####: 8974:int disposition_get_batchable(DISPOSITION_HANDLE disposition, bool* batchable_value)
        -: 8975:{
        -: 8976:    int result;
        -: 8977:
    #####: 8978:    if (disposition == NULL)
        -: 8979:    {
    #####: 8980:        result = MU_FAILURE;
        -: 8981:    }
        -: 8982:    else
        -: 8983:    {
        -: 8984:        uint32_t item_count;
    #####: 8985:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 8986:        if (amqpvalue_get_composite_item_count(disposition_instance->composite_value, &item_count) != 0)
        -: 8987:        {
    #####: 8988:            result = MU_FAILURE;
        -: 8989:        }
        -: 8990:        else
        -: 8991:        {
    #####: 8992:            if (item_count <= 5)
        -: 8993:            {
    #####: 8994:                *batchable_value = false;
    #####: 8995:                result = 0;
        -: 8996:            }
        -: 8997:            else
        -: 8998:            {
    #####: 8999:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(disposition_instance->composite_value, 5);
    #####: 9000:                if ((item_value == NULL) ||
    #####: 9001:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 9002:                {
    #####: 9003:                    *batchable_value = false;
    #####: 9004:                    result = 0;
        -: 9005:                }
        -: 9006:                else
        -: 9007:                {
    #####: 9008:                    int get_single_value_result = amqpvalue_get_boolean(item_value, batchable_value);
    #####: 9009:                    if (get_single_value_result != 0)
        -: 9010:                    {
    #####: 9011:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 9012:                        {
    #####: 9013:                            result = MU_FAILURE;
        -: 9014:                        }
        -: 9015:                        else
        -: 9016:                        {
    #####: 9017:                            *batchable_value = false;
    #####: 9018:                            result = 0;
        -: 9019:                        }
        -: 9020:                    }
        -: 9021:                    else
        -: 9022:                    {
    #####: 9023:                        result = 0;
        -: 9024:                    }
        -: 9025:                }
        -: 9026:            }
        -: 9027:        }
        -: 9028:    }
        -: 9029:
    #####: 9030:    return result;
        -: 9031:}
        -: 9032:
    #####: 9033:int disposition_set_batchable(DISPOSITION_HANDLE disposition, bool batchable_value)
        -: 9034:{
        -: 9035:    int result;
        -: 9036:
    #####: 9037:    if (disposition == NULL)
        -: 9038:    {
    #####: 9039:        result = MU_FAILURE;
        -: 9040:    }
        -: 9041:    else
        -: 9042:    {
    #####: 9043:        DISPOSITION_INSTANCE* disposition_instance = (DISPOSITION_INSTANCE*)disposition;
    #####: 9044:        AMQP_VALUE batchable_amqp_value = amqpvalue_create_boolean(batchable_value);
    #####: 9045:        if (batchable_amqp_value == NULL)
        -: 9046:        {
    #####: 9047:            result = MU_FAILURE;
        -: 9048:        }
        -: 9049:        else
        -: 9050:        {
    #####: 9051:            if (amqpvalue_set_composite_item(disposition_instance->composite_value, 5, batchable_amqp_value) != 0)
        -: 9052:            {
    #####: 9053:                result = MU_FAILURE;
        -: 9054:            }
        -: 9055:            else
        -: 9056:            {
    #####: 9057:                result = 0;
        -: 9058:            }
        -: 9059:
    #####: 9060:            amqpvalue_destroy(batchable_amqp_value);
        -: 9061:        }
        -: 9062:    }
        -: 9063:
    #####: 9064:    return result;
        -: 9065:}
        -: 9066:
        -: 9067:
        -: 9068:/* detach */
        -: 9069:
        -: 9070:typedef struct DETACH_INSTANCE_TAG
        -: 9071:{
        -: 9072:    AMQP_VALUE composite_value;
        -: 9073:} DETACH_INSTANCE;
        -: 9074:
    #####: 9075:static DETACH_HANDLE detach_create_internal(void)
        -: 9076:{
    #####: 9077:    DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)malloc(sizeof(DETACH_INSTANCE));
    #####: 9078:    if (detach_instance != NULL)
        -: 9079:    {
    #####: 9080:        detach_instance->composite_value = NULL;
        -: 9081:    }
        -: 9082:
    #####: 9083:    return detach_instance;
        -: 9084:}
        -: 9085:
    #####: 9086:DETACH_HANDLE detach_create(handle handle_value)
        -: 9087:{
    #####: 9088:    DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)malloc(sizeof(DETACH_INSTANCE));
    #####: 9089:    if (detach_instance != NULL)
        -: 9090:    {
    #####: 9091:        detach_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(22);
    #####: 9092:        if (detach_instance->composite_value == NULL)
        -: 9093:        {
    #####: 9094:            free(detach_instance);
    #####: 9095:            detach_instance = NULL;
        -: 9096:        }
        -: 9097:        else
        -: 9098:        {
        -: 9099:            AMQP_VALUE handle_amqp_value;
    #####: 9100:            int result = 0;
        -: 9101:
    #####: 9102:            handle_amqp_value = amqpvalue_create_handle(handle_value);
    #####: 9103:            if ((result == 0) && (amqpvalue_set_composite_item(detach_instance->composite_value, 0, handle_amqp_value) != 0))
        -: 9104:            {
    #####: 9105:                result = MU_FAILURE;
        -: 9106:            }
        -: 9107:
    #####: 9108:            amqpvalue_destroy(handle_amqp_value);
        -: 9109:        }
        -: 9110:    }
        -: 9111:
    #####: 9112:    return detach_instance;
        -: 9113:}
        -: 9114:
    #####: 9115:DETACH_HANDLE detach_clone(DETACH_HANDLE value)
        -: 9116:{
    #####: 9117:    DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)malloc(sizeof(DETACH_INSTANCE));
    #####: 9118:    if (detach_instance != NULL)
        -: 9119:    {
    #####: 9120:        detach_instance->composite_value = amqpvalue_clone(((DETACH_INSTANCE*)value)->composite_value);
    #####: 9121:        if (detach_instance->composite_value == NULL)
        -: 9122:        {
    #####: 9123:            free(detach_instance);
    #####: 9124:            detach_instance = NULL;
        -: 9125:        }
        -: 9126:    }
        -: 9127:
    #####: 9128:    return detach_instance;
        -: 9129:}
        -: 9130:
    #####: 9131:void detach_destroy(DETACH_HANDLE detach)
        -: 9132:{
    #####: 9133:    if (detach != NULL)
        -: 9134:    {
    #####: 9135:        DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach;
    #####: 9136:        amqpvalue_destroy(detach_instance->composite_value);
    #####: 9137:        free(detach_instance);
        -: 9138:    }
    #####: 9139:}
        -: 9140:
    #####: 9141:AMQP_VALUE amqpvalue_create_detach(DETACH_HANDLE detach)
        -: 9142:{
        -: 9143:    AMQP_VALUE result;
        -: 9144:
    #####: 9145:    if (detach == NULL)
        -: 9146:    {
    #####: 9147:        result = NULL;
        -: 9148:    }
        -: 9149:    else
        -: 9150:    {
    #####: 9151:        DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach;
    #####: 9152:        result = amqpvalue_clone(detach_instance->composite_value);
        -: 9153:    }
        -: 9154:
    #####: 9155:    return result;
        -: 9156:}
        -: 9157:
    #####: 9158:bool is_detach_type_by_descriptor(AMQP_VALUE descriptor)
        -: 9159:{
        -: 9160:    bool result;
        -: 9161:
        -: 9162:    uint64_t descriptor_ulong;
    #####: 9163:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####: 9164:        (descriptor_ulong == 22))
        -: 9165:    {
    #####: 9166:        result = true;
        -: 9167:    }
        -: 9168:    else
        -: 9169:    {
    #####: 9170:        result = false;
        -: 9171:    }
        -: 9172:
    #####: 9173:    return result;
        -: 9174:}
        -: 9175:
        -: 9176:
    #####: 9177:int amqpvalue_get_detach(AMQP_VALUE value, DETACH_HANDLE* detach_handle)
        -: 9178:{
        -: 9179:    int result;
    #####: 9180:    DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach_create_internal();
    #####: 9181:    *detach_handle = detach_instance;
    #####: 9182:    if (*detach_handle == NULL)
        -: 9183:    {
    #####: 9184:        result = MU_FAILURE;
        -: 9185:    }
        -: 9186:    else
        -: 9187:    {
    #####: 9188:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####: 9189:        if (list_value == NULL)
        -: 9190:        {
    #####: 9191:            detach_destroy(*detach_handle);
    #####: 9192:            result = MU_FAILURE;
        -: 9193:        }
        -: 9194:        else
        -: 9195:        {
        -: 9196:            uint32_t list_item_count;
    #####: 9197:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -: 9198:            {
    #####: 9199:                result = MU_FAILURE;
        -: 9200:            }
        -: 9201:            else
        -: 9202:            {
        -: 9203:                do
        -: 9204:                {
        -: 9205:                    AMQP_VALUE item_value;
        -: 9206:                    /* handle */
    #####: 9207:                    if (list_item_count > 0)
        -: 9208:                    {
    #####: 9209:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####: 9210:                        if (item_value == NULL)
        -: 9211:                        {
        -: 9212:                            {
    #####: 9213:                                detach_destroy(*detach_handle);
    #####: 9214:                                result = MU_FAILURE;
    #####: 9215:                                break;
        -: 9216:                            }
        -: 9217:                        }
        -: 9218:                        else
        -: 9219:                        {
    #####: 9220:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 9221:                            {
    #####: 9222:                                amqpvalue_destroy(item_value);
    #####: 9223:                                detach_destroy(*detach_handle);
    #####: 9224:                                result = MU_FAILURE;
    #####: 9225:                                break;
        -: 9226:                            }
        -: 9227:                            else
        -: 9228:                            {
        -: 9229:                                handle handle;
    #####: 9230:                                if (amqpvalue_get_handle(item_value, &handle) != 0)
        -: 9231:                                {
    #####: 9232:                                    amqpvalue_destroy(item_value);
    #####: 9233:                                    detach_destroy(*detach_handle);
    #####: 9234:                                    result = MU_FAILURE;
    #####: 9235:                                    break;
        -: 9236:                                }
        -: 9237:                            }
        -: 9238:
    #####: 9239:                            amqpvalue_destroy(item_value);
        -: 9240:                        }
        -: 9241:                    }
        -: 9242:                    else
        -: 9243:                    {
    #####: 9244:                        result = MU_FAILURE;
        -: 9245:                    }
        -: 9246:                    /* closed */
    #####: 9247:                    if (list_item_count > 1)
        -: 9248:                    {
    #####: 9249:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####: 9250:                        if (item_value == NULL)
        -: 9251:                        {
        -: 9252:                            /* do nothing */
        -: 9253:                        }
        -: 9254:                        else
        -: 9255:                        {
    #####: 9256:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 9257:                            {
        -: 9258:                                /* no error, field is not mandatory */
        -: 9259:                            }
        -: 9260:                            else
        -: 9261:                            {
        -: 9262:                                bool closed;
    #####: 9263:                                if (amqpvalue_get_boolean(item_value, &closed) != 0)
        -: 9264:                                {
    #####: 9265:                                    amqpvalue_destroy(item_value);
    #####: 9266:                                    detach_destroy(*detach_handle);
    #####: 9267:                                    result = MU_FAILURE;
    #####: 9268:                                    break;
        -: 9269:                                }
        -: 9270:                            }
        -: 9271:
    #####: 9272:                            amqpvalue_destroy(item_value);
        -: 9273:                        }
        -: 9274:                    }
        -: 9275:                    /* error */
    #####: 9276:                    if (list_item_count > 2)
        -: 9277:                    {
    #####: 9278:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####: 9279:                        if (item_value == NULL)
        -: 9280:                        {
        -: 9281:                            /* do nothing */
        -: 9282:                        }
        -: 9283:                        else
        -: 9284:                        {
    #####: 9285:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 9286:                            {
        -: 9287:                                /* no error, field is not mandatory */
        -: 9288:                            }
        -: 9289:                            else
        -: 9290:                            {
        -: 9291:                                ERROR_HANDLE error;
    #####: 9292:                                if (amqpvalue_get_error(item_value, &error) != 0)
        -: 9293:                                {
    #####: 9294:                                    amqpvalue_destroy(item_value);
    #####: 9295:                                    detach_destroy(*detach_handle);
    #####: 9296:                                    result = MU_FAILURE;
    #####: 9297:                                    break;
        -: 9298:                                }
        -: 9299:                                else
        -: 9300:                                {
    #####: 9301:                                    error_destroy(error);
        -: 9302:                                }
        -: 9303:                            }
        -: 9304:
    #####: 9305:                            amqpvalue_destroy(item_value);
        -: 9306:                        }
        -: 9307:                    }
        -: 9308:
    #####: 9309:                    detach_instance->composite_value = amqpvalue_clone(value);
        -: 9310:
    #####: 9311:                    result = 0;
        -: 9312:                } while((void)0,0);
        -: 9313:            }
        -: 9314:        }
        -: 9315:    }
        -: 9316:
    #####: 9317:    return result;
        -: 9318:}
        -: 9319:
    #####: 9320:int detach_get_handle(DETACH_HANDLE detach, handle* handle_value)
        -: 9321:{
        -: 9322:    int result;
        -: 9323:
    #####: 9324:    if (detach == NULL)
        -: 9325:    {
    #####: 9326:        result = MU_FAILURE;
        -: 9327:    }
        -: 9328:    else
        -: 9329:    {
        -: 9330:        uint32_t item_count;
    #####: 9331:        DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach;
    #####: 9332:        if (amqpvalue_get_composite_item_count(detach_instance->composite_value, &item_count) != 0)
        -: 9333:        {
    #####: 9334:            result = MU_FAILURE;
        -: 9335:        }
        -: 9336:        else
        -: 9337:        {
    #####: 9338:            if (item_count <= 0)
        -: 9339:            {
    #####: 9340:                result = MU_FAILURE;
        -: 9341:            }
        -: 9342:            else
        -: 9343:            {
    #####: 9344:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(detach_instance->composite_value, 0);
    #####: 9345:                if ((item_value == NULL) ||
    #####: 9346:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 9347:                {
    #####: 9348:                    result = MU_FAILURE;
        -: 9349:                }
        -: 9350:                else
        -: 9351:                {
    #####: 9352:                    int get_single_value_result = amqpvalue_get_handle(item_value, handle_value);
    #####: 9353:                    if (get_single_value_result != 0)
        -: 9354:                    {
    #####: 9355:                        result = MU_FAILURE;
        -: 9356:                    }
        -: 9357:                    else
        -: 9358:                    {
    #####: 9359:                        result = 0;
        -: 9360:                    }
        -: 9361:                }
        -: 9362:            }
        -: 9363:        }
        -: 9364:    }
        -: 9365:
    #####: 9366:    return result;
        -: 9367:}
        -: 9368:
    #####: 9369:int detach_set_handle(DETACH_HANDLE detach, handle handle_value)
        -: 9370:{
        -: 9371:    int result;
        -: 9372:
    #####: 9373:    if (detach == NULL)
        -: 9374:    {
    #####: 9375:        result = MU_FAILURE;
        -: 9376:    }
        -: 9377:    else
        -: 9378:    {
    #####: 9379:        DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach;
    #####: 9380:        AMQP_VALUE handle_amqp_value = amqpvalue_create_handle(handle_value);
    #####: 9381:        if (handle_amqp_value == NULL)
        -: 9382:        {
    #####: 9383:            result = MU_FAILURE;
        -: 9384:        }
        -: 9385:        else
        -: 9386:        {
    #####: 9387:            if (amqpvalue_set_composite_item(detach_instance->composite_value, 0, handle_amqp_value) != 0)
        -: 9388:            {
    #####: 9389:                result = MU_FAILURE;
        -: 9390:            }
        -: 9391:            else
        -: 9392:            {
    #####: 9393:                result = 0;
        -: 9394:            }
        -: 9395:
    #####: 9396:            amqpvalue_destroy(handle_amqp_value);
        -: 9397:        }
        -: 9398:    }
        -: 9399:
    #####: 9400:    return result;
        -: 9401:}
        -: 9402:
    #####: 9403:int detach_get_closed(DETACH_HANDLE detach, bool* closed_value)
        -: 9404:{
        -: 9405:    int result;
        -: 9406:
    #####: 9407:    if (detach == NULL)
        -: 9408:    {
    #####: 9409:        result = MU_FAILURE;
        -: 9410:    }
        -: 9411:    else
        -: 9412:    {
        -: 9413:        uint32_t item_count;
    #####: 9414:        DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach;
    #####: 9415:        if (amqpvalue_get_composite_item_count(detach_instance->composite_value, &item_count) != 0)
        -: 9416:        {
    #####: 9417:            result = MU_FAILURE;
        -: 9418:        }
        -: 9419:        else
        -: 9420:        {
    #####: 9421:            if (item_count <= 1)
        -: 9422:            {
    #####: 9423:                *closed_value = false;
    #####: 9424:                result = 0;
        -: 9425:            }
        -: 9426:            else
        -: 9427:            {
    #####: 9428:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(detach_instance->composite_value, 1);
    #####: 9429:                if ((item_value == NULL) ||
    #####: 9430:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 9431:                {
    #####: 9432:                    *closed_value = false;
    #####: 9433:                    result = 0;
        -: 9434:                }
        -: 9435:                else
        -: 9436:                {
    #####: 9437:                    int get_single_value_result = amqpvalue_get_boolean(item_value, closed_value);
    #####: 9438:                    if (get_single_value_result != 0)
        -: 9439:                    {
    #####: 9440:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -: 9441:                        {
    #####: 9442:                            result = MU_FAILURE;
        -: 9443:                        }
        -: 9444:                        else
        -: 9445:                        {
    #####: 9446:                            *closed_value = false;
    #####: 9447:                            result = 0;
        -: 9448:                        }
        -: 9449:                    }
        -: 9450:                    else
        -: 9451:                    {
    #####: 9452:                        result = 0;
        -: 9453:                    }
        -: 9454:                }
        -: 9455:            }
        -: 9456:        }
        -: 9457:    }
        -: 9458:
    #####: 9459:    return result;
        -: 9460:}
        -: 9461:
    #####: 9462:int detach_set_closed(DETACH_HANDLE detach, bool closed_value)
        -: 9463:{
        -: 9464:    int result;
        -: 9465:
    #####: 9466:    if (detach == NULL)
        -: 9467:    {
    #####: 9468:        result = MU_FAILURE;
        -: 9469:    }
        -: 9470:    else
        -: 9471:    {
    #####: 9472:        DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach;
    #####: 9473:        AMQP_VALUE closed_amqp_value = amqpvalue_create_boolean(closed_value);
    #####: 9474:        if (closed_amqp_value == NULL)
        -: 9475:        {
    #####: 9476:            result = MU_FAILURE;
        -: 9477:        }
        -: 9478:        else
        -: 9479:        {
    #####: 9480:            if (amqpvalue_set_composite_item(detach_instance->composite_value, 1, closed_amqp_value) != 0)
        -: 9481:            {
    #####: 9482:                result = MU_FAILURE;
        -: 9483:            }
        -: 9484:            else
        -: 9485:            {
    #####: 9486:                result = 0;
        -: 9487:            }
        -: 9488:
    #####: 9489:            amqpvalue_destroy(closed_amqp_value);
        -: 9490:        }
        -: 9491:    }
        -: 9492:
    #####: 9493:    return result;
        -: 9494:}
        -: 9495:
    #####: 9496:int detach_get_error(DETACH_HANDLE detach, ERROR_HANDLE* error_value)
        -: 9497:{
        -: 9498:    int result;
        -: 9499:
    #####: 9500:    if (detach == NULL)
        -: 9501:    {
    #####: 9502:        result = MU_FAILURE;
        -: 9503:    }
        -: 9504:    else
        -: 9505:    {
        -: 9506:        uint32_t item_count;
    #####: 9507:        DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach;
    #####: 9508:        if (amqpvalue_get_composite_item_count(detach_instance->composite_value, &item_count) != 0)
        -: 9509:        {
    #####: 9510:            result = MU_FAILURE;
        -: 9511:        }
        -: 9512:        else
        -: 9513:        {
    #####: 9514:            if (item_count <= 2)
        -: 9515:            {
    #####: 9516:                result = MU_FAILURE;
        -: 9517:            }
        -: 9518:            else
        -: 9519:            {
    #####: 9520:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(detach_instance->composite_value, 2);
    #####: 9521:                if ((item_value == NULL) ||
    #####: 9522:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 9523:                {
    #####: 9524:                    result = MU_FAILURE;
        -: 9525:                }
        -: 9526:                else
        -: 9527:                {
    #####: 9528:                    int get_single_value_result = amqpvalue_get_error(item_value, error_value);
    #####: 9529:                    if (get_single_value_result != 0)
        -: 9530:                    {
    #####: 9531:                        result = MU_FAILURE;
        -: 9532:                    }
        -: 9533:                    else
        -: 9534:                    {
    #####: 9535:                        result = 0;
        -: 9536:                    }
        -: 9537:                }
        -: 9538:            }
        -: 9539:        }
        -: 9540:    }
        -: 9541:
    #####: 9542:    return result;
        -: 9543:}
        -: 9544:
    #####: 9545:int detach_set_error(DETACH_HANDLE detach, ERROR_HANDLE error_value)
        -: 9546:{
        -: 9547:    int result;
        -: 9548:
    #####: 9549:    if (detach == NULL)
        -: 9550:    {
    #####: 9551:        result = MU_FAILURE;
        -: 9552:    }
        -: 9553:    else
        -: 9554:    {
    #####: 9555:        DETACH_INSTANCE* detach_instance = (DETACH_INSTANCE*)detach;
    #####: 9556:        AMQP_VALUE error_amqp_value = amqpvalue_create_error(error_value);
    #####: 9557:        if (error_amqp_value == NULL)
        -: 9558:        {
    #####: 9559:            result = MU_FAILURE;
        -: 9560:        }
        -: 9561:        else
        -: 9562:        {
    #####: 9563:            if (amqpvalue_set_composite_item(detach_instance->composite_value, 2, error_amqp_value) != 0)
        -: 9564:            {
    #####: 9565:                result = MU_FAILURE;
        -: 9566:            }
        -: 9567:            else
        -: 9568:            {
    #####: 9569:                result = 0;
        -: 9570:            }
        -: 9571:
    #####: 9572:            amqpvalue_destroy(error_amqp_value);
        -: 9573:        }
        -: 9574:    }
        -: 9575:
    #####: 9576:    return result;
        -: 9577:}
        -: 9578:
        -: 9579:
        -: 9580:/* end */
        -: 9581:
        -: 9582:typedef struct END_INSTANCE_TAG
        -: 9583:{
        -: 9584:    AMQP_VALUE composite_value;
        -: 9585:} END_INSTANCE;
        -: 9586:
    #####: 9587:static END_HANDLE end_create_internal(void)
        -: 9588:{
    #####: 9589:    END_INSTANCE* end_instance = (END_INSTANCE*)malloc(sizeof(END_INSTANCE));
    #####: 9590:    if (end_instance != NULL)
        -: 9591:    {
    #####: 9592:        end_instance->composite_value = NULL;
        -: 9593:    }
        -: 9594:
    #####: 9595:    return end_instance;
        -: 9596:}
        -: 9597:
    #####: 9598:END_HANDLE end_create(void)
        -: 9599:{
    #####: 9600:    END_INSTANCE* end_instance = (END_INSTANCE*)malloc(sizeof(END_INSTANCE));
    #####: 9601:    if (end_instance != NULL)
        -: 9602:    {
    #####: 9603:        end_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(23);
    #####: 9604:        if (end_instance->composite_value == NULL)
        -: 9605:        {
    #####: 9606:            free(end_instance);
    #####: 9607:            end_instance = NULL;
        -: 9608:        }
        -: 9609:    }
        -: 9610:
    #####: 9611:    return end_instance;
        -: 9612:}
        -: 9613:
    #####: 9614:END_HANDLE end_clone(END_HANDLE value)
        -: 9615:{
    #####: 9616:    END_INSTANCE* end_instance = (END_INSTANCE*)malloc(sizeof(END_INSTANCE));
    #####: 9617:    if (end_instance != NULL)
        -: 9618:    {
    #####: 9619:        end_instance->composite_value = amqpvalue_clone(((END_INSTANCE*)value)->composite_value);
    #####: 9620:        if (end_instance->composite_value == NULL)
        -: 9621:        {
    #####: 9622:            free(end_instance);
    #####: 9623:            end_instance = NULL;
        -: 9624:        }
        -: 9625:    }
        -: 9626:
    #####: 9627:    return end_instance;
        -: 9628:}
        -: 9629:
    #####: 9630:void end_destroy(END_HANDLE end)
        -: 9631:{
    #####: 9632:    if (end != NULL)
        -: 9633:    {
    #####: 9634:        END_INSTANCE* end_instance = (END_INSTANCE*)end;
    #####: 9635:        amqpvalue_destroy(end_instance->composite_value);
    #####: 9636:        free(end_instance);
        -: 9637:    }
    #####: 9638:}
        -: 9639:
    #####: 9640:AMQP_VALUE amqpvalue_create_end(END_HANDLE end)
        -: 9641:{
        -: 9642:    AMQP_VALUE result;
        -: 9643:
    #####: 9644:    if (end == NULL)
        -: 9645:    {
    #####: 9646:        result = NULL;
        -: 9647:    }
        -: 9648:    else
        -: 9649:    {
    #####: 9650:        END_INSTANCE* end_instance = (END_INSTANCE*)end;
    #####: 9651:        result = amqpvalue_clone(end_instance->composite_value);
        -: 9652:    }
        -: 9653:
    #####: 9654:    return result;
        -: 9655:}
        -: 9656:
    #####: 9657:bool is_end_type_by_descriptor(AMQP_VALUE descriptor)
        -: 9658:{
        -: 9659:    bool result;
        -: 9660:
        -: 9661:    uint64_t descriptor_ulong;
    #####: 9662:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####: 9663:        (descriptor_ulong == 23))
        -: 9664:    {
    #####: 9665:        result = true;
        -: 9666:    }
        -: 9667:    else
        -: 9668:    {
    #####: 9669:        result = false;
        -: 9670:    }
        -: 9671:
    #####: 9672:    return result;
        -: 9673:}
        -: 9674:
        -: 9675:
    #####: 9676:int amqpvalue_get_end(AMQP_VALUE value, END_HANDLE* end_handle)
        -: 9677:{
        -: 9678:    int result;
    #####: 9679:    END_INSTANCE* end_instance = (END_INSTANCE*)end_create_internal();
    #####: 9680:    *end_handle = end_instance;
    #####: 9681:    if (*end_handle == NULL)
        -: 9682:    {
    #####: 9683:        result = MU_FAILURE;
        -: 9684:    }
        -: 9685:    else
        -: 9686:    {
    #####: 9687:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####: 9688:        if (list_value == NULL)
        -: 9689:        {
    #####: 9690:            end_destroy(*end_handle);
    #####: 9691:            result = MU_FAILURE;
        -: 9692:        }
        -: 9693:        else
        -: 9694:        {
        -: 9695:            uint32_t list_item_count;
    #####: 9696:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -: 9697:            {
    #####: 9698:                result = MU_FAILURE;
        -: 9699:            }
        -: 9700:            else
        -: 9701:            {
        -: 9702:                do
        -: 9703:                {
        -: 9704:                    AMQP_VALUE item_value;
        -: 9705:                    /* error */
    #####: 9706:                    if (list_item_count > 0)
        -: 9707:                    {
    #####: 9708:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####: 9709:                        if (item_value == NULL)
        -: 9710:                        {
        -: 9711:                            /* do nothing */
        -: 9712:                        }
        -: 9713:                        else
        -: 9714:                        {
    #####: 9715:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 9716:                            {
        -: 9717:                                /* no error, field is not mandatory */
        -: 9718:                            }
        -: 9719:                            else
        -: 9720:                            {
        -: 9721:                                ERROR_HANDLE error;
    #####: 9722:                                if (amqpvalue_get_error(item_value, &error) != 0)
        -: 9723:                                {
    #####: 9724:                                    amqpvalue_destroy(item_value);
    #####: 9725:                                    end_destroy(*end_handle);
    #####: 9726:                                    result = MU_FAILURE;
    #####: 9727:                                    break;
        -: 9728:                                }
        -: 9729:                                else
        -: 9730:                                {
    #####: 9731:                                    error_destroy(error);
        -: 9732:                                }
        -: 9733:                            }
        -: 9734:
    #####: 9735:                            amqpvalue_destroy(item_value);
        -: 9736:                        }
        -: 9737:                    }
        -: 9738:
    #####: 9739:                    end_instance->composite_value = amqpvalue_clone(value);
        -: 9740:
    #####: 9741:                    result = 0;
        -: 9742:                } while((void)0,0);
        -: 9743:            }
        -: 9744:        }
        -: 9745:    }
        -: 9746:
    #####: 9747:    return result;
        -: 9748:}
        -: 9749:
    #####: 9750:int end_get_error(END_HANDLE end, ERROR_HANDLE* error_value)
        -: 9751:{
        -: 9752:    int result;
        -: 9753:
    #####: 9754:    if (end == NULL)
        -: 9755:    {
    #####: 9756:        result = MU_FAILURE;
        -: 9757:    }
        -: 9758:    else
        -: 9759:    {
        -: 9760:        uint32_t item_count;
    #####: 9761:        END_INSTANCE* end_instance = (END_INSTANCE*)end;
    #####: 9762:        if (amqpvalue_get_composite_item_count(end_instance->composite_value, &item_count) != 0)
        -: 9763:        {
    #####: 9764:            result = MU_FAILURE;
        -: 9765:        }
        -: 9766:        else
        -: 9767:        {
    #####: 9768:            if (item_count <= 0)
        -: 9769:            {
    #####: 9770:                result = MU_FAILURE;
        -: 9771:            }
        -: 9772:            else
        -: 9773:            {
    #####: 9774:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(end_instance->composite_value, 0);
    #####: 9775:                if ((item_value == NULL) ||
    #####: 9776:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -: 9777:                {
    #####: 9778:                    result = MU_FAILURE;
        -: 9779:                }
        -: 9780:                else
        -: 9781:                {
    #####: 9782:                    int get_single_value_result = amqpvalue_get_error(item_value, error_value);
    #####: 9783:                    if (get_single_value_result != 0)
        -: 9784:                    {
    #####: 9785:                        result = MU_FAILURE;
        -: 9786:                    }
        -: 9787:                    else
        -: 9788:                    {
    #####: 9789:                        result = 0;
        -: 9790:                    }
        -: 9791:                }
        -: 9792:            }
        -: 9793:        }
        -: 9794:    }
        -: 9795:
    #####: 9796:    return result;
        -: 9797:}
        -: 9798:
    #####: 9799:int end_set_error(END_HANDLE end, ERROR_HANDLE error_value)
        -: 9800:{
        -: 9801:    int result;
        -: 9802:
    #####: 9803:    if (end == NULL)
        -: 9804:    {
    #####: 9805:        result = MU_FAILURE;
        -: 9806:    }
        -: 9807:    else
        -: 9808:    {
    #####: 9809:        END_INSTANCE* end_instance = (END_INSTANCE*)end;
    #####: 9810:        AMQP_VALUE error_amqp_value = amqpvalue_create_error(error_value);
    #####: 9811:        if (error_amqp_value == NULL)
        -: 9812:        {
    #####: 9813:            result = MU_FAILURE;
        -: 9814:        }
        -: 9815:        else
        -: 9816:        {
    #####: 9817:            if (amqpvalue_set_composite_item(end_instance->composite_value, 0, error_amqp_value) != 0)
        -: 9818:            {
    #####: 9819:                result = MU_FAILURE;
        -: 9820:            }
        -: 9821:            else
        -: 9822:            {
    #####: 9823:                result = 0;
        -: 9824:            }
        -: 9825:
    #####: 9826:            amqpvalue_destroy(error_amqp_value);
        -: 9827:        }
        -: 9828:    }
        -: 9829:
    #####: 9830:    return result;
        -: 9831:}
        -: 9832:
        -: 9833:
        -: 9834:/* close */
        -: 9835:
        -: 9836:typedef struct CLOSE_INSTANCE_TAG
        -: 9837:{
        -: 9838:    AMQP_VALUE composite_value;
        -: 9839:} CLOSE_INSTANCE;
        -: 9840:
    #####: 9841:static CLOSE_HANDLE close_create_internal(void)
        -: 9842:{
    #####: 9843:    CLOSE_INSTANCE* close_instance = (CLOSE_INSTANCE*)malloc(sizeof(CLOSE_INSTANCE));
    #####: 9844:    if (close_instance != NULL)
        -: 9845:    {
    #####: 9846:        close_instance->composite_value = NULL;
        -: 9847:    }
        -: 9848:
    #####: 9849:    return close_instance;
        -: 9850:}
        -: 9851:
    #####: 9852:CLOSE_HANDLE close_create(void)
        -: 9853:{
    #####: 9854:    CLOSE_INSTANCE* close_instance = (CLOSE_INSTANCE*)malloc(sizeof(CLOSE_INSTANCE));
    #####: 9855:    if (close_instance != NULL)
        -: 9856:    {
    #####: 9857:        close_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(24);
    #####: 9858:        if (close_instance->composite_value == NULL)
        -: 9859:        {
    #####: 9860:            free(close_instance);
    #####: 9861:            close_instance = NULL;
        -: 9862:        }
        -: 9863:    }
        -: 9864:
    #####: 9865:    return close_instance;
        -: 9866:}
        -: 9867:
    #####: 9868:CLOSE_HANDLE close_clone(CLOSE_HANDLE value)
        -: 9869:{
    #####: 9870:    CLOSE_INSTANCE* close_instance = (CLOSE_INSTANCE*)malloc(sizeof(CLOSE_INSTANCE));
    #####: 9871:    if (close_instance != NULL)
        -: 9872:    {
    #####: 9873:        close_instance->composite_value = amqpvalue_clone(((CLOSE_INSTANCE*)value)->composite_value);
    #####: 9874:        if (close_instance->composite_value == NULL)
        -: 9875:        {
    #####: 9876:            free(close_instance);
    #####: 9877:            close_instance = NULL;
        -: 9878:        }
        -: 9879:    }
        -: 9880:
    #####: 9881:    return close_instance;
        -: 9882:}
        -: 9883:
    #####: 9884:void close_destroy(CLOSE_HANDLE close)
        -: 9885:{
    #####: 9886:    if (close != NULL)
        -: 9887:    {
    #####: 9888:        CLOSE_INSTANCE* close_instance = (CLOSE_INSTANCE*)close;
    #####: 9889:        amqpvalue_destroy(close_instance->composite_value);
    #####: 9890:        free(close_instance);
        -: 9891:    }
    #####: 9892:}
        -: 9893:
    #####: 9894:AMQP_VALUE amqpvalue_create_close(CLOSE_HANDLE close)
        -: 9895:{
        -: 9896:    AMQP_VALUE result;
        -: 9897:
    #####: 9898:    if (close == NULL)
        -: 9899:    {
    #####: 9900:        result = NULL;
        -: 9901:    }
        -: 9902:    else
        -: 9903:    {
    #####: 9904:        CLOSE_INSTANCE* close_instance = (CLOSE_INSTANCE*)close;
    #####: 9905:        result = amqpvalue_clone(close_instance->composite_value);
        -: 9906:    }
        -: 9907:
    #####: 9908:    return result;
        -: 9909:}
        -: 9910:
    #####: 9911:bool is_close_type_by_descriptor(AMQP_VALUE descriptor)
        -: 9912:{
        -: 9913:    bool result;
        -: 9914:
        -: 9915:    uint64_t descriptor_ulong;
    #####: 9916:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####: 9917:        (descriptor_ulong == 24))
        -: 9918:    {
    #####: 9919:        result = true;
        -: 9920:    }
        -: 9921:    else
        -: 9922:    {
    #####: 9923:        result = false;
        -: 9924:    }
        -: 9925:
    #####: 9926:    return result;
        -: 9927:}
        -: 9928:
        -: 9929:
    #####: 9930:int amqpvalue_get_close(AMQP_VALUE value, CLOSE_HANDLE* close_handle)
        -: 9931:{
        -: 9932:    int result;
    #####: 9933:    CLOSE_INSTANCE* close_instance = (CLOSE_INSTANCE*)close_create_internal();
    #####: 9934:    *close_handle = close_instance;
    #####: 9935:    if (*close_handle == NULL)
        -: 9936:    {
    #####: 9937:        result = MU_FAILURE;
        -: 9938:    }
        -: 9939:    else
        -: 9940:    {
    #####: 9941:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####: 9942:        if (list_value == NULL)
        -: 9943:        {
    #####: 9944:            close_destroy(*close_handle);
    #####: 9945:            result = MU_FAILURE;
        -: 9946:        }
        -: 9947:        else
        -: 9948:        {
        -: 9949:            uint32_t list_item_count;
    #####: 9950:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -: 9951:            {
    #####: 9952:                result = MU_FAILURE;
        -: 9953:            }
        -: 9954:            else
        -: 9955:            {
        -: 9956:                do
        -: 9957:                {
        -: 9958:                    AMQP_VALUE item_value;
        -: 9959:                    /* error */
    #####: 9960:                    if (list_item_count > 0)
        -: 9961:                    {
    #####: 9962:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####: 9963:                        if (item_value == NULL)
        -: 9964:                        {
        -: 9965:                            /* do nothing */
        -: 9966:                        }
        -: 9967:                        else
        -: 9968:                        {
    #####: 9969:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -: 9970:                            {
        -: 9971:                                /* no error, field is not mandatory */
        -: 9972:                            }
        -: 9973:                            else
        -: 9974:                            {
        -: 9975:                                ERROR_HANDLE error;
    #####: 9976:                                if (amqpvalue_get_error(item_value, &error) != 0)
        -: 9977:                                {
    #####: 9978:                                    amqpvalue_destroy(item_value);
    #####: 9979:                                    close_destroy(*close_handle);
    #####: 9980:                                    result = MU_FAILURE;
    #####: 9981:                                    break;
        -: 9982:                                }
        -: 9983:                                else
        -: 9984:                                {
    #####: 9985:                                    error_destroy(error);
        -: 9986:                                }
        -: 9987:                            }
        -: 9988:
    #####: 9989:                            amqpvalue_destroy(item_value);
        -: 9990:                        }
        -: 9991:                    }
        -: 9992:
    #####: 9993:                    close_instance->composite_value = amqpvalue_clone(value);
        -: 9994:
    #####: 9995:                    result = 0;
        -: 9996:                } while((void)0,0);
        -: 9997:            }
        -: 9998:        }
        -: 9999:    }
        -:10000:
    #####:10001:    return result;
        -:10002:}
        -:10003:
    #####:10004:int close_get_error(CLOSE_HANDLE close, ERROR_HANDLE* error_value)
        -:10005:{
        -:10006:    int result;
        -:10007:
    #####:10008:    if (close == NULL)
        -:10009:    {
    #####:10010:        result = MU_FAILURE;
        -:10011:    }
        -:10012:    else
        -:10013:    {
        -:10014:        uint32_t item_count;
    #####:10015:        CLOSE_INSTANCE* close_instance = (CLOSE_INSTANCE*)close;
    #####:10016:        if (amqpvalue_get_composite_item_count(close_instance->composite_value, &item_count) != 0)
        -:10017:        {
    #####:10018:            result = MU_FAILURE;
        -:10019:        }
        -:10020:        else
        -:10021:        {
    #####:10022:            if (item_count <= 0)
        -:10023:            {
    #####:10024:                result = MU_FAILURE;
        -:10025:            }
        -:10026:            else
        -:10027:            {
    #####:10028:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(close_instance->composite_value, 0);
    #####:10029:                if ((item_value == NULL) ||
    #####:10030:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:10031:                {
    #####:10032:                    result = MU_FAILURE;
        -:10033:                }
        -:10034:                else
        -:10035:                {
    #####:10036:                    int get_single_value_result = amqpvalue_get_error(item_value, error_value);
    #####:10037:                    if (get_single_value_result != 0)
        -:10038:                    {
    #####:10039:                        result = MU_FAILURE;
        -:10040:                    }
        -:10041:                    else
        -:10042:                    {
    #####:10043:                        result = 0;
        -:10044:                    }
        -:10045:                }
        -:10046:            }
        -:10047:        }
        -:10048:    }
        -:10049:
    #####:10050:    return result;
        -:10051:}
        -:10052:
    #####:10053:int close_set_error(CLOSE_HANDLE close, ERROR_HANDLE error_value)
        -:10054:{
        -:10055:    int result;
        -:10056:
    #####:10057:    if (close == NULL)
        -:10058:    {
    #####:10059:        result = MU_FAILURE;
        -:10060:    }
        -:10061:    else
        -:10062:    {
    #####:10063:        CLOSE_INSTANCE* close_instance = (CLOSE_INSTANCE*)close;
    #####:10064:        AMQP_VALUE error_amqp_value = amqpvalue_create_error(error_value);
    #####:10065:        if (error_amqp_value == NULL)
        -:10066:        {
    #####:10067:            result = MU_FAILURE;
        -:10068:        }
        -:10069:        else
        -:10070:        {
    #####:10071:            if (amqpvalue_set_composite_item(close_instance->composite_value, 0, error_amqp_value) != 0)
        -:10072:            {
    #####:10073:                result = MU_FAILURE;
        -:10074:            }
        -:10075:            else
        -:10076:            {
    #####:10077:                result = 0;
        -:10078:            }
        -:10079:
    #####:10080:            amqpvalue_destroy(error_amqp_value);
        -:10081:        }
        -:10082:    }
        -:10083:
    #####:10084:    return result;
        -:10085:}
        -:10086:
        -:10087:
        -:10088:/* sasl-code */
        -:10089:
    #####:10090:AMQP_VALUE amqpvalue_create_sasl_code(sasl_code value)
        -:10091:{
    #####:10092:    return amqpvalue_create_ubyte(value);
        -:10093:}
        -:10094:
        -:10095:/* sasl-mechanisms */
        -:10096:
        -:10097:typedef struct SASL_MECHANISMS_INSTANCE_TAG
        -:10098:{
        -:10099:    AMQP_VALUE composite_value;
        -:10100:} SASL_MECHANISMS_INSTANCE;
        -:10101:
    #####:10102:static SASL_MECHANISMS_HANDLE sasl_mechanisms_create_internal(void)
        -:10103:{
    #####:10104:    SASL_MECHANISMS_INSTANCE* sasl_mechanisms_instance = (SASL_MECHANISMS_INSTANCE*)malloc(sizeof(SASL_MECHANISMS_INSTANCE));
    #####:10105:    if (sasl_mechanisms_instance != NULL)
        -:10106:    {
    #####:10107:        sasl_mechanisms_instance->composite_value = NULL;
        -:10108:    }
        -:10109:
    #####:10110:    return sasl_mechanisms_instance;
        -:10111:}
        -:10112:
    #####:10113:SASL_MECHANISMS_HANDLE sasl_mechanisms_create(AMQP_VALUE sasl_server_mechanisms_value)
        -:10114:{
    #####:10115:    SASL_MECHANISMS_INSTANCE* sasl_mechanisms_instance = (SASL_MECHANISMS_INSTANCE*)malloc(sizeof(SASL_MECHANISMS_INSTANCE));
    #####:10116:    if (sasl_mechanisms_instance != NULL)
        -:10117:    {
    #####:10118:        sasl_mechanisms_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(64);
    #####:10119:        if (sasl_mechanisms_instance->composite_value == NULL)
        -:10120:        {
    #####:10121:            free(sasl_mechanisms_instance);
    #####:10122:            sasl_mechanisms_instance = NULL;
        -:10123:        }
        -:10124:        else
        -:10125:        {
        -:10126:            AMQP_VALUE sasl_server_mechanisms_amqp_value;
    #####:10127:            int result = 0;
        -:10128:
    #####:10129:            sasl_server_mechanisms_amqp_value = sasl_server_mechanisms_value;
    #####:10130:            if ((result == 0) && (amqpvalue_set_composite_item(sasl_mechanisms_instance->composite_value, 0, sasl_server_mechanisms_amqp_value) != 0))
        -:10131:            {
    #####:10132:                result = MU_FAILURE;
        -:10133:            }
        -:10134:
    #####:10135:            amqpvalue_destroy(sasl_server_mechanisms_amqp_value);
        -:10136:        }
        -:10137:    }
        -:10138:
    #####:10139:    return sasl_mechanisms_instance;
        -:10140:}
        -:10141:
    #####:10142:SASL_MECHANISMS_HANDLE sasl_mechanisms_clone(SASL_MECHANISMS_HANDLE value)
        -:10143:{
    #####:10144:    SASL_MECHANISMS_INSTANCE* sasl_mechanisms_instance = (SASL_MECHANISMS_INSTANCE*)malloc(sizeof(SASL_MECHANISMS_INSTANCE));
    #####:10145:    if (sasl_mechanisms_instance != NULL)
        -:10146:    {
    #####:10147:        sasl_mechanisms_instance->composite_value = amqpvalue_clone(((SASL_MECHANISMS_INSTANCE*)value)->composite_value);
    #####:10148:        if (sasl_mechanisms_instance->composite_value == NULL)
        -:10149:        {
    #####:10150:            free(sasl_mechanisms_instance);
    #####:10151:            sasl_mechanisms_instance = NULL;
        -:10152:        }
        -:10153:    }
        -:10154:
    #####:10155:    return sasl_mechanisms_instance;
        -:10156:}
        -:10157:
    #####:10158:void sasl_mechanisms_destroy(SASL_MECHANISMS_HANDLE sasl_mechanisms)
        -:10159:{
    #####:10160:    if (sasl_mechanisms != NULL)
        -:10161:    {
    #####:10162:        SASL_MECHANISMS_INSTANCE* sasl_mechanisms_instance = (SASL_MECHANISMS_INSTANCE*)sasl_mechanisms;
    #####:10163:        amqpvalue_destroy(sasl_mechanisms_instance->composite_value);
    #####:10164:        free(sasl_mechanisms_instance);
        -:10165:    }
    #####:10166:}
        -:10167:
    #####:10168:AMQP_VALUE amqpvalue_create_sasl_mechanisms(SASL_MECHANISMS_HANDLE sasl_mechanisms)
        -:10169:{
        -:10170:    AMQP_VALUE result;
        -:10171:
    #####:10172:    if (sasl_mechanisms == NULL)
        -:10173:    {
    #####:10174:        result = NULL;
        -:10175:    }
        -:10176:    else
        -:10177:    {
    #####:10178:        SASL_MECHANISMS_INSTANCE* sasl_mechanisms_instance = (SASL_MECHANISMS_INSTANCE*)sasl_mechanisms;
    #####:10179:        result = amqpvalue_clone(sasl_mechanisms_instance->composite_value);
        -:10180:    }
        -:10181:
    #####:10182:    return result;
        -:10183:}
        -:10184:
    #####:10185:bool is_sasl_mechanisms_type_by_descriptor(AMQP_VALUE descriptor)
        -:10186:{
        -:10187:    bool result;
        -:10188:
        -:10189:    uint64_t descriptor_ulong;
    #####:10190:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:10191:        (descriptor_ulong == 64))
        -:10192:    {
    #####:10193:        result = true;
        -:10194:    }
        -:10195:    else
        -:10196:    {
    #####:10197:        result = false;
        -:10198:    }
        -:10199:
    #####:10200:    return result;
        -:10201:}
        -:10202:
        -:10203:
    #####:10204:int amqpvalue_get_sasl_mechanisms(AMQP_VALUE value, SASL_MECHANISMS_HANDLE* sasl_mechanisms_handle)
        -:10205:{
        -:10206:    int result;
    #####:10207:    SASL_MECHANISMS_INSTANCE* sasl_mechanisms_instance = (SASL_MECHANISMS_INSTANCE*)sasl_mechanisms_create_internal();
    #####:10208:    *sasl_mechanisms_handle = sasl_mechanisms_instance;
    #####:10209:    if (*sasl_mechanisms_handle == NULL)
        -:10210:    {
    #####:10211:        result = MU_FAILURE;
        -:10212:    }
        -:10213:    else
        -:10214:    {
    #####:10215:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:10216:        if (list_value == NULL)
        -:10217:        {
    #####:10218:            sasl_mechanisms_destroy(*sasl_mechanisms_handle);
    #####:10219:            result = MU_FAILURE;
        -:10220:        }
        -:10221:        else
        -:10222:        {
        -:10223:            uint32_t list_item_count;
    #####:10224:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:10225:            {
    #####:10226:                result = MU_FAILURE;
        -:10227:            }
        -:10228:            else
        -:10229:            {
        -:10230:                do
        -:10231:                {
        -:10232:                    AMQP_VALUE item_value;
        -:10233:                    /* sasl-server-mechanisms */
    #####:10234:                    if (list_item_count > 0)
        -:10235:                    {
    #####:10236:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:10237:                        if (item_value == NULL)
        -:10238:                        {
        -:10239:                            {
    #####:10240:                                sasl_mechanisms_destroy(*sasl_mechanisms_handle);
    #####:10241:                                result = MU_FAILURE;
    #####:10242:                                break;
        -:10243:                            }
        -:10244:                        }
        -:10245:                        else
        -:10246:                        {
    #####:10247:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:10248:                            {
    #####:10249:                                amqpvalue_destroy(item_value);
    #####:10250:                                sasl_mechanisms_destroy(*sasl_mechanisms_handle);
    #####:10251:                                result = MU_FAILURE;
    #####:10252:                                break;
        -:10253:                            }
        -:10254:                            else
        -:10255:                            {
    #####:10256:                                const char* sasl_server_mechanisms = NULL;
        -:10257:                                AMQP_VALUE sasl_server_mechanisms_array;
    #####:10258:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &sasl_server_mechanisms_array) != 0)) &&
    #####:10259:                                    (amqpvalue_get_symbol(item_value, &sasl_server_mechanisms) != 0))
        -:10260:                                {
    #####:10261:                                    amqpvalue_destroy(item_value);
    #####:10262:                                    sasl_mechanisms_destroy(*sasl_mechanisms_handle);
    #####:10263:                                    result = MU_FAILURE;
    #####:10264:                                    break;
        -:10265:                                }
        -:10266:                            }
        -:10267:
    #####:10268:                            amqpvalue_destroy(item_value);
        -:10269:                        }
        -:10270:                    }
        -:10271:                    else
        -:10272:                    {
    #####:10273:                        result = MU_FAILURE;
        -:10274:                    }
        -:10275:
    #####:10276:                    sasl_mechanisms_instance->composite_value = amqpvalue_clone(value);
        -:10277:
    #####:10278:                    result = 0;
        -:10279:                } while((void)0,0);
        -:10280:            }
        -:10281:        }
        -:10282:    }
        -:10283:
    #####:10284:    return result;
        -:10285:}
        -:10286:
    #####:10287:int sasl_mechanisms_get_sasl_server_mechanisms(SASL_MECHANISMS_HANDLE sasl_mechanisms, AMQP_VALUE* sasl_server_mechanisms_value)
        -:10288:{
        -:10289:    int result;
        -:10290:
    #####:10291:    if (sasl_mechanisms == NULL)
        -:10292:    {
    #####:10293:        result = MU_FAILURE;
        -:10294:    }
        -:10295:    else
        -:10296:    {
        -:10297:        uint32_t item_count;
    #####:10298:        SASL_MECHANISMS_INSTANCE* sasl_mechanisms_instance = (SASL_MECHANISMS_INSTANCE*)sasl_mechanisms;
    #####:10299:        if (amqpvalue_get_composite_item_count(sasl_mechanisms_instance->composite_value, &item_count) != 0)
        -:10300:        {
    #####:10301:            result = MU_FAILURE;
        -:10302:        }
        -:10303:        else
        -:10304:        {
    #####:10305:            if (item_count <= 0)
        -:10306:            {
    #####:10307:                result = MU_FAILURE;
        -:10308:            }
        -:10309:            else
        -:10310:            {
    #####:10311:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(sasl_mechanisms_instance->composite_value, 0);
    #####:10312:                if ((item_value == NULL) ||
    #####:10313:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:10314:                {
    #####:10315:                    result = MU_FAILURE;
        -:10316:                }
        -:10317:                else
        -:10318:                {
        -:10319:                    const char* sasl_server_mechanisms_single_value;
        -:10320:                    int get_single_value_result;
    #####:10321:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -:10322:                    {
    #####:10323:                        get_single_value_result = amqpvalue_get_symbol(item_value, &sasl_server_mechanisms_single_value);
        -:10324:                    }
        -:10325:                    else
        -:10326:                    {
    #####:10327:                        (void)memset((void*)&sasl_server_mechanisms_single_value, 0, sizeof(sasl_server_mechanisms_single_value));
    #####:10328:                        get_single_value_result = 1;
        -:10329:                    }
        -:10330:
    #####:10331:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, sasl_server_mechanisms_value) != 0)) &&
        -:10332:                        (get_single_value_result != 0))
        -:10333:                    {
    #####:10334:                        result = MU_FAILURE;
        -:10335:                    }
        -:10336:                    else
        -:10337:                    {
    #####:10338:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -:10339:                        {
    #####:10340:                            *sasl_server_mechanisms_value = amqpvalue_create_array();
    #####:10341:                            if (*sasl_server_mechanisms_value == NULL)
        -:10342:                            {
    #####:10343:                                result = MU_FAILURE;
        -:10344:                            }
        -:10345:                            else
        -:10346:                            {
    #####:10347:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(sasl_server_mechanisms_single_value);
    #####:10348:                                if (single_amqp_value == NULL)
        -:10349:                                {
    #####:10350:                                    amqpvalue_destroy(*sasl_server_mechanisms_value);
    #####:10351:                                    result = MU_FAILURE;
        -:10352:                                }
        -:10353:                                else
        -:10354:                                {
    #####:10355:                                    if (amqpvalue_add_array_item(*sasl_server_mechanisms_value, single_amqp_value) != 0)
        -:10356:                                    {
    #####:10357:                                        amqpvalue_destroy(*sasl_server_mechanisms_value);
    #####:10358:                                        amqpvalue_destroy(single_amqp_value);
    #####:10359:                                        result = MU_FAILURE;
        -:10360:                                    }
        -:10361:                                    else
        -:10362:                                    {
    #####:10363:                                        if (amqpvalue_set_composite_item(sasl_mechanisms_instance->composite_value, 0, *sasl_server_mechanisms_value) != 0)
        -:10364:                                        {
    #####:10365:                                            amqpvalue_destroy(*sasl_server_mechanisms_value);
    #####:10366:                                            result = MU_FAILURE;
        -:10367:                                        }
        -:10368:                                        else
        -:10369:                                        {
    #####:10370:                                            result = 0;
        -:10371:                                        }
        -:10372:                                    }
        -:10373:
    #####:10374:                                    amqpvalue_destroy(single_amqp_value);
        -:10375:                                }
    #####:10376:                                amqpvalue_destroy(*sasl_server_mechanisms_value);
        -:10377:                            }
        -:10378:                        }
        -:10379:                        else
        -:10380:                        {
    #####:10381:                            result = 0;
        -:10382:                        }
        -:10383:                    }
        -:10384:                }
        -:10385:            }
        -:10386:        }
        -:10387:    }
        -:10388:
    #####:10389:    return result;
        -:10390:}
        -:10391:
    #####:10392:int sasl_mechanisms_set_sasl_server_mechanisms(SASL_MECHANISMS_HANDLE sasl_mechanisms, AMQP_VALUE sasl_server_mechanisms_value)
        -:10393:{
        -:10394:    int result;
        -:10395:
    #####:10396:    if (sasl_mechanisms == NULL)
        -:10397:    {
    #####:10398:        result = MU_FAILURE;
        -:10399:    }
        -:10400:    else
        -:10401:    {
    #####:10402:        SASL_MECHANISMS_INSTANCE* sasl_mechanisms_instance = (SASL_MECHANISMS_INSTANCE*)sasl_mechanisms;
        -:10403:        AMQP_VALUE sasl_server_mechanisms_amqp_value;
    #####:10404:        if (sasl_server_mechanisms_value == NULL)
        -:10405:        {
    #####:10406:            sasl_server_mechanisms_amqp_value = NULL;
        -:10407:        }
        -:10408:        else
        -:10409:        {
    #####:10410:            sasl_server_mechanisms_amqp_value = amqpvalue_clone(sasl_server_mechanisms_value);
        -:10411:        }
    #####:10412:        if (sasl_server_mechanisms_amqp_value == NULL)
        -:10413:        {
    #####:10414:            result = MU_FAILURE;
        -:10415:        }
        -:10416:        else
        -:10417:        {
    #####:10418:            if (amqpvalue_set_composite_item(sasl_mechanisms_instance->composite_value, 0, sasl_server_mechanisms_amqp_value) != 0)
        -:10419:            {
    #####:10420:                result = MU_FAILURE;
        -:10421:            }
        -:10422:            else
        -:10423:            {
    #####:10424:                result = 0;
        -:10425:            }
        -:10426:
    #####:10427:            amqpvalue_destroy(sasl_server_mechanisms_amqp_value);
        -:10428:        }
        -:10429:    }
        -:10430:
    #####:10431:    return result;
        -:10432:}
        -:10433:
        -:10434:
        -:10435:/* sasl-init */
        -:10436:
        -:10437:typedef struct SASL_INIT_INSTANCE_TAG
        -:10438:{
        -:10439:    AMQP_VALUE composite_value;
        -:10440:} SASL_INIT_INSTANCE;
        -:10441:
    #####:10442:static SASL_INIT_HANDLE sasl_init_create_internal(void)
        -:10443:{
    #####:10444:    SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)malloc(sizeof(SASL_INIT_INSTANCE));
    #####:10445:    if (sasl_init_instance != NULL)
        -:10446:    {
    #####:10447:        sasl_init_instance->composite_value = NULL;
        -:10448:    }
        -:10449:
    #####:10450:    return sasl_init_instance;
        -:10451:}
        -:10452:
    #####:10453:SASL_INIT_HANDLE sasl_init_create(const char* mechanism_value)
        -:10454:{
    #####:10455:    SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)malloc(sizeof(SASL_INIT_INSTANCE));
    #####:10456:    if (sasl_init_instance != NULL)
        -:10457:    {
    #####:10458:        sasl_init_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(65);
    #####:10459:        if (sasl_init_instance->composite_value == NULL)
        -:10460:        {
    #####:10461:            free(sasl_init_instance);
    #####:10462:            sasl_init_instance = NULL;
        -:10463:        }
        -:10464:        else
        -:10465:        {
        -:10466:            AMQP_VALUE mechanism_amqp_value;
    #####:10467:            int result = 0;
        -:10468:
    #####:10469:            mechanism_amqp_value = amqpvalue_create_symbol(mechanism_value);
    #####:10470:            if ((result == 0) && (amqpvalue_set_composite_item(sasl_init_instance->composite_value, 0, mechanism_amqp_value) != 0))
        -:10471:            {
    #####:10472:                result = MU_FAILURE;
        -:10473:            }
        -:10474:
    #####:10475:            amqpvalue_destroy(mechanism_amqp_value);
        -:10476:        }
        -:10477:    }
        -:10478:
    #####:10479:    return sasl_init_instance;
        -:10480:}
        -:10481:
    #####:10482:SASL_INIT_HANDLE sasl_init_clone(SASL_INIT_HANDLE value)
        -:10483:{
    #####:10484:    SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)malloc(sizeof(SASL_INIT_INSTANCE));
    #####:10485:    if (sasl_init_instance != NULL)
        -:10486:    {
    #####:10487:        sasl_init_instance->composite_value = amqpvalue_clone(((SASL_INIT_INSTANCE*)value)->composite_value);
    #####:10488:        if (sasl_init_instance->composite_value == NULL)
        -:10489:        {
    #####:10490:            free(sasl_init_instance);
    #####:10491:            sasl_init_instance = NULL;
        -:10492:        }
        -:10493:    }
        -:10494:
    #####:10495:    return sasl_init_instance;
        -:10496:}
        -:10497:
    #####:10498:void sasl_init_destroy(SASL_INIT_HANDLE sasl_init)
        -:10499:{
    #####:10500:    if (sasl_init != NULL)
        -:10501:    {
    #####:10502:        SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init;
    #####:10503:        amqpvalue_destroy(sasl_init_instance->composite_value);
    #####:10504:        free(sasl_init_instance);
        -:10505:    }
    #####:10506:}
        -:10507:
    #####:10508:AMQP_VALUE amqpvalue_create_sasl_init(SASL_INIT_HANDLE sasl_init)
        -:10509:{
        -:10510:    AMQP_VALUE result;
        -:10511:
    #####:10512:    if (sasl_init == NULL)
        -:10513:    {
    #####:10514:        result = NULL;
        -:10515:    }
        -:10516:    else
        -:10517:    {
    #####:10518:        SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init;
    #####:10519:        result = amqpvalue_clone(sasl_init_instance->composite_value);
        -:10520:    }
        -:10521:
    #####:10522:    return result;
        -:10523:}
        -:10524:
    #####:10525:bool is_sasl_init_type_by_descriptor(AMQP_VALUE descriptor)
        -:10526:{
        -:10527:    bool result;
        -:10528:
        -:10529:    uint64_t descriptor_ulong;
    #####:10530:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:10531:        (descriptor_ulong == 65))
        -:10532:    {
    #####:10533:        result = true;
        -:10534:    }
        -:10535:    else
        -:10536:    {
    #####:10537:        result = false;
        -:10538:    }
        -:10539:
    #####:10540:    return result;
        -:10541:}
        -:10542:
        -:10543:
    #####:10544:int amqpvalue_get_sasl_init(AMQP_VALUE value, SASL_INIT_HANDLE* sasl_init_handle)
        -:10545:{
        -:10546:    int result;
    #####:10547:    SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init_create_internal();
    #####:10548:    *sasl_init_handle = sasl_init_instance;
    #####:10549:    if (*sasl_init_handle == NULL)
        -:10550:    {
    #####:10551:        result = MU_FAILURE;
        -:10552:    }
        -:10553:    else
        -:10554:    {
    #####:10555:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:10556:        if (list_value == NULL)
        -:10557:        {
    #####:10558:            sasl_init_destroy(*sasl_init_handle);
    #####:10559:            result = MU_FAILURE;
        -:10560:        }
        -:10561:        else
        -:10562:        {
        -:10563:            uint32_t list_item_count;
    #####:10564:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:10565:            {
    #####:10566:                result = MU_FAILURE;
        -:10567:            }
        -:10568:            else
        -:10569:            {
        -:10570:                do
        -:10571:                {
        -:10572:                    AMQP_VALUE item_value;
        -:10573:                    /* mechanism */
    #####:10574:                    if (list_item_count > 0)
        -:10575:                    {
    #####:10576:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:10577:                        if (item_value == NULL)
        -:10578:                        {
        -:10579:                            {
    #####:10580:                                sasl_init_destroy(*sasl_init_handle);
    #####:10581:                                result = MU_FAILURE;
    #####:10582:                                break;
        -:10583:                            }
        -:10584:                        }
        -:10585:                        else
        -:10586:                        {
    #####:10587:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:10588:                            {
    #####:10589:                                amqpvalue_destroy(item_value);
    #####:10590:                                sasl_init_destroy(*sasl_init_handle);
    #####:10591:                                result = MU_FAILURE;
    #####:10592:                                break;
        -:10593:                            }
        -:10594:                            else
        -:10595:                            {
        -:10596:                                const char* mechanism;
    #####:10597:                                if (amqpvalue_get_symbol(item_value, &mechanism) != 0)
        -:10598:                                {
    #####:10599:                                    amqpvalue_destroy(item_value);
    #####:10600:                                    sasl_init_destroy(*sasl_init_handle);
    #####:10601:                                    result = MU_FAILURE;
    #####:10602:                                    break;
        -:10603:                                }
        -:10604:                            }
        -:10605:
    #####:10606:                            amqpvalue_destroy(item_value);
        -:10607:                        }
        -:10608:                    }
        -:10609:                    else
        -:10610:                    {
    #####:10611:                        result = MU_FAILURE;
        -:10612:                    }
        -:10613:                    /* initial-response */
    #####:10614:                    if (list_item_count > 1)
        -:10615:                    {
    #####:10616:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:10617:                        if (item_value == NULL)
        -:10618:                        {
        -:10619:                            /* do nothing */
        -:10620:                        }
        -:10621:                        else
        -:10622:                        {
    #####:10623:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:10624:                            {
        -:10625:                                /* no error, field is not mandatory */
        -:10626:                            }
        -:10627:                            else
        -:10628:                            {
        -:10629:                                amqp_binary initial_response;
    #####:10630:                                if (amqpvalue_get_binary(item_value, &initial_response) != 0)
        -:10631:                                {
    #####:10632:                                    amqpvalue_destroy(item_value);
    #####:10633:                                    sasl_init_destroy(*sasl_init_handle);
    #####:10634:                                    result = MU_FAILURE;
    #####:10635:                                    break;
        -:10636:                                }
        -:10637:                            }
        -:10638:
    #####:10639:                            amqpvalue_destroy(item_value);
        -:10640:                        }
        -:10641:                    }
        -:10642:                    /* hostname */
    #####:10643:                    if (list_item_count > 2)
        -:10644:                    {
    #####:10645:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####:10646:                        if (item_value == NULL)
        -:10647:                        {
        -:10648:                            /* do nothing */
        -:10649:                        }
        -:10650:                        else
        -:10651:                        {
    #####:10652:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:10653:                            {
        -:10654:                                /* no error, field is not mandatory */
        -:10655:                            }
        -:10656:                            else
        -:10657:                            {
        -:10658:                                const char* hostname;
    #####:10659:                                if (amqpvalue_get_string(item_value, &hostname) != 0)
        -:10660:                                {
    #####:10661:                                    amqpvalue_destroy(item_value);
    #####:10662:                                    sasl_init_destroy(*sasl_init_handle);
    #####:10663:                                    result = MU_FAILURE;
    #####:10664:                                    break;
        -:10665:                                }
        -:10666:                            }
        -:10667:
    #####:10668:                            amqpvalue_destroy(item_value);
        -:10669:                        }
        -:10670:                    }
        -:10671:
    #####:10672:                    sasl_init_instance->composite_value = amqpvalue_clone(value);
        -:10673:
    #####:10674:                    result = 0;
        -:10675:                } while((void)0,0);
        -:10676:            }
        -:10677:        }
        -:10678:    }
        -:10679:
    #####:10680:    return result;
        -:10681:}
        -:10682:
    #####:10683:int sasl_init_get_mechanism(SASL_INIT_HANDLE sasl_init, const char** mechanism_value)
        -:10684:{
        -:10685:    int result;
        -:10686:
    #####:10687:    if (sasl_init == NULL)
        -:10688:    {
    #####:10689:        result = MU_FAILURE;
        -:10690:    }
        -:10691:    else
        -:10692:    {
        -:10693:        uint32_t item_count;
    #####:10694:        SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init;
    #####:10695:        if (amqpvalue_get_composite_item_count(sasl_init_instance->composite_value, &item_count) != 0)
        -:10696:        {
    #####:10697:            result = MU_FAILURE;
        -:10698:        }
        -:10699:        else
        -:10700:        {
    #####:10701:            if (item_count <= 0)
        -:10702:            {
    #####:10703:                result = MU_FAILURE;
        -:10704:            }
        -:10705:            else
        -:10706:            {
    #####:10707:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(sasl_init_instance->composite_value, 0);
    #####:10708:                if ((item_value == NULL) ||
    #####:10709:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:10710:                {
    #####:10711:                    result = MU_FAILURE;
        -:10712:                }
        -:10713:                else
        -:10714:                {
    #####:10715:                    int get_single_value_result = amqpvalue_get_symbol(item_value, mechanism_value);
    #####:10716:                    if (get_single_value_result != 0)
        -:10717:                    {
    #####:10718:                        result = MU_FAILURE;
        -:10719:                    }
        -:10720:                    else
        -:10721:                    {
    #####:10722:                        result = 0;
        -:10723:                    }
        -:10724:                }
        -:10725:            }
        -:10726:        }
        -:10727:    }
        -:10728:
    #####:10729:    return result;
        -:10730:}
        -:10731:
    #####:10732:int sasl_init_set_mechanism(SASL_INIT_HANDLE sasl_init, const char* mechanism_value)
        -:10733:{
        -:10734:    int result;
        -:10735:
    #####:10736:    if (sasl_init == NULL)
        -:10737:    {
    #####:10738:        result = MU_FAILURE;
        -:10739:    }
        -:10740:    else
        -:10741:    {
    #####:10742:        SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init;
    #####:10743:        AMQP_VALUE mechanism_amqp_value = amqpvalue_create_symbol(mechanism_value);
    #####:10744:        if (mechanism_amqp_value == NULL)
        -:10745:        {
    #####:10746:            result = MU_FAILURE;
        -:10747:        }
        -:10748:        else
        -:10749:        {
    #####:10750:            if (amqpvalue_set_composite_item(sasl_init_instance->composite_value, 0, mechanism_amqp_value) != 0)
        -:10751:            {
    #####:10752:                result = MU_FAILURE;
        -:10753:            }
        -:10754:            else
        -:10755:            {
    #####:10756:                result = 0;
        -:10757:            }
        -:10758:
    #####:10759:            amqpvalue_destroy(mechanism_amqp_value);
        -:10760:        }
        -:10761:    }
        -:10762:
    #####:10763:    return result;
        -:10764:}
        -:10765:
    #####:10766:int sasl_init_get_initial_response(SASL_INIT_HANDLE sasl_init, amqp_binary* initial_response_value)
        -:10767:{
        -:10768:    int result;
        -:10769:
    #####:10770:    if (sasl_init == NULL)
        -:10771:    {
    #####:10772:        result = MU_FAILURE;
        -:10773:    }
        -:10774:    else
        -:10775:    {
        -:10776:        uint32_t item_count;
    #####:10777:        SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init;
    #####:10778:        if (amqpvalue_get_composite_item_count(sasl_init_instance->composite_value, &item_count) != 0)
        -:10779:        {
    #####:10780:            result = MU_FAILURE;
        -:10781:        }
        -:10782:        else
        -:10783:        {
    #####:10784:            if (item_count <= 1)
        -:10785:            {
    #####:10786:                result = MU_FAILURE;
        -:10787:            }
        -:10788:            else
        -:10789:            {
    #####:10790:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(sasl_init_instance->composite_value, 1);
    #####:10791:                if ((item_value == NULL) ||
    #####:10792:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:10793:                {
    #####:10794:                    result = MU_FAILURE;
        -:10795:                }
        -:10796:                else
        -:10797:                {
    #####:10798:                    int get_single_value_result = amqpvalue_get_binary(item_value, initial_response_value);
    #####:10799:                    if (get_single_value_result != 0)
        -:10800:                    {
    #####:10801:                        result = MU_FAILURE;
        -:10802:                    }
        -:10803:                    else
        -:10804:                    {
    #####:10805:                        result = 0;
        -:10806:                    }
        -:10807:                }
        -:10808:            }
        -:10809:        }
        -:10810:    }
        -:10811:
    #####:10812:    return result;
        -:10813:}
        -:10814:
    #####:10815:int sasl_init_set_initial_response(SASL_INIT_HANDLE sasl_init, amqp_binary initial_response_value)
        -:10816:{
        -:10817:    int result;
        -:10818:
    #####:10819:    if (sasl_init == NULL)
        -:10820:    {
    #####:10821:        result = MU_FAILURE;
        -:10822:    }
        -:10823:    else
        -:10824:    {
    #####:10825:        SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init;
    #####:10826:        AMQP_VALUE initial_response_amqp_value = amqpvalue_create_binary(initial_response_value);
    #####:10827:        if (initial_response_amqp_value == NULL)
        -:10828:        {
    #####:10829:            result = MU_FAILURE;
        -:10830:        }
        -:10831:        else
        -:10832:        {
    #####:10833:            if (amqpvalue_set_composite_item(sasl_init_instance->composite_value, 1, initial_response_amqp_value) != 0)
        -:10834:            {
    #####:10835:                result = MU_FAILURE;
        -:10836:            }
        -:10837:            else
        -:10838:            {
    #####:10839:                result = 0;
        -:10840:            }
        -:10841:
    #####:10842:            amqpvalue_destroy(initial_response_amqp_value);
        -:10843:        }
        -:10844:    }
        -:10845:
    #####:10846:    return result;
        -:10847:}
        -:10848:
    #####:10849:int sasl_init_get_hostname(SASL_INIT_HANDLE sasl_init, const char** hostname_value)
        -:10850:{
        -:10851:    int result;
        -:10852:
    #####:10853:    if (sasl_init == NULL)
        -:10854:    {
    #####:10855:        result = MU_FAILURE;
        -:10856:    }
        -:10857:    else
        -:10858:    {
        -:10859:        uint32_t item_count;
    #####:10860:        SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init;
    #####:10861:        if (amqpvalue_get_composite_item_count(sasl_init_instance->composite_value, &item_count) != 0)
        -:10862:        {
    #####:10863:            result = MU_FAILURE;
        -:10864:        }
        -:10865:        else
        -:10866:        {
    #####:10867:            if (item_count <= 2)
        -:10868:            {
    #####:10869:                result = MU_FAILURE;
        -:10870:            }
        -:10871:            else
        -:10872:            {
    #####:10873:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(sasl_init_instance->composite_value, 2);
    #####:10874:                if ((item_value == NULL) ||
    #####:10875:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:10876:                {
    #####:10877:                    result = MU_FAILURE;
        -:10878:                }
        -:10879:                else
        -:10880:                {
    #####:10881:                    int get_single_value_result = amqpvalue_get_string(item_value, hostname_value);
    #####:10882:                    if (get_single_value_result != 0)
        -:10883:                    {
    #####:10884:                        result = MU_FAILURE;
        -:10885:                    }
        -:10886:                    else
        -:10887:                    {
    #####:10888:                        result = 0;
        -:10889:                    }
        -:10890:                }
        -:10891:            }
        -:10892:        }
        -:10893:    }
        -:10894:
    #####:10895:    return result;
        -:10896:}
        -:10897:
    #####:10898:int sasl_init_set_hostname(SASL_INIT_HANDLE sasl_init, const char* hostname_value)
        -:10899:{
        -:10900:    int result;
        -:10901:
    #####:10902:    if (sasl_init == NULL)
        -:10903:    {
    #####:10904:        result = MU_FAILURE;
        -:10905:    }
        -:10906:    else
        -:10907:    {
    #####:10908:        SASL_INIT_INSTANCE* sasl_init_instance = (SASL_INIT_INSTANCE*)sasl_init;
    #####:10909:        AMQP_VALUE hostname_amqp_value = amqpvalue_create_string(hostname_value);
    #####:10910:        if (hostname_amqp_value == NULL)
        -:10911:        {
    #####:10912:            result = MU_FAILURE;
        -:10913:        }
        -:10914:        else
        -:10915:        {
    #####:10916:            if (amqpvalue_set_composite_item(sasl_init_instance->composite_value, 2, hostname_amqp_value) != 0)
        -:10917:            {
    #####:10918:                result = MU_FAILURE;
        -:10919:            }
        -:10920:            else
        -:10921:            {
    #####:10922:                result = 0;
        -:10923:            }
        -:10924:
    #####:10925:            amqpvalue_destroy(hostname_amqp_value);
        -:10926:        }
        -:10927:    }
        -:10928:
    #####:10929:    return result;
        -:10930:}
        -:10931:
        -:10932:
        -:10933:/* sasl-challenge */
        -:10934:
        -:10935:typedef struct SASL_CHALLENGE_INSTANCE_TAG
        -:10936:{
        -:10937:    AMQP_VALUE composite_value;
        -:10938:} SASL_CHALLENGE_INSTANCE;
        -:10939:
    #####:10940:static SASL_CHALLENGE_HANDLE sasl_challenge_create_internal(void)
        -:10941:{
    #####:10942:    SASL_CHALLENGE_INSTANCE* sasl_challenge_instance = (SASL_CHALLENGE_INSTANCE*)malloc(sizeof(SASL_CHALLENGE_INSTANCE));
    #####:10943:    if (sasl_challenge_instance != NULL)
        -:10944:    {
    #####:10945:        sasl_challenge_instance->composite_value = NULL;
        -:10946:    }
        -:10947:
    #####:10948:    return sasl_challenge_instance;
        -:10949:}
        -:10950:
    #####:10951:SASL_CHALLENGE_HANDLE sasl_challenge_create(amqp_binary challenge_value)
        -:10952:{
    #####:10953:    SASL_CHALLENGE_INSTANCE* sasl_challenge_instance = (SASL_CHALLENGE_INSTANCE*)malloc(sizeof(SASL_CHALLENGE_INSTANCE));
    #####:10954:    if (sasl_challenge_instance != NULL)
        -:10955:    {
    #####:10956:        sasl_challenge_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(66);
    #####:10957:        if (sasl_challenge_instance->composite_value == NULL)
        -:10958:        {
    #####:10959:            free(sasl_challenge_instance);
    #####:10960:            sasl_challenge_instance = NULL;
        -:10961:        }
        -:10962:        else
        -:10963:        {
        -:10964:            AMQP_VALUE challenge_amqp_value;
    #####:10965:            int result = 0;
        -:10966:
    #####:10967:            challenge_amqp_value = amqpvalue_create_binary(challenge_value);
    #####:10968:            if ((result == 0) && (amqpvalue_set_composite_item(sasl_challenge_instance->composite_value, 0, challenge_amqp_value) != 0))
        -:10969:            {
    #####:10970:                result = MU_FAILURE;
        -:10971:            }
        -:10972:
    #####:10973:            amqpvalue_destroy(challenge_amqp_value);
        -:10974:        }
        -:10975:    }
        -:10976:
    #####:10977:    return sasl_challenge_instance;
        -:10978:}
        -:10979:
    #####:10980:SASL_CHALLENGE_HANDLE sasl_challenge_clone(SASL_CHALLENGE_HANDLE value)
        -:10981:{
    #####:10982:    SASL_CHALLENGE_INSTANCE* sasl_challenge_instance = (SASL_CHALLENGE_INSTANCE*)malloc(sizeof(SASL_CHALLENGE_INSTANCE));
    #####:10983:    if (sasl_challenge_instance != NULL)
        -:10984:    {
    #####:10985:        sasl_challenge_instance->composite_value = amqpvalue_clone(((SASL_CHALLENGE_INSTANCE*)value)->composite_value);
    #####:10986:        if (sasl_challenge_instance->composite_value == NULL)
        -:10987:        {
    #####:10988:            free(sasl_challenge_instance);
    #####:10989:            sasl_challenge_instance = NULL;
        -:10990:        }
        -:10991:    }
        -:10992:
    #####:10993:    return sasl_challenge_instance;
        -:10994:}
        -:10995:
    #####:10996:void sasl_challenge_destroy(SASL_CHALLENGE_HANDLE sasl_challenge)
        -:10997:{
    #####:10998:    if (sasl_challenge != NULL)
        -:10999:    {
    #####:11000:        SASL_CHALLENGE_INSTANCE* sasl_challenge_instance = (SASL_CHALLENGE_INSTANCE*)sasl_challenge;
    #####:11001:        amqpvalue_destroy(sasl_challenge_instance->composite_value);
    #####:11002:        free(sasl_challenge_instance);
        -:11003:    }
    #####:11004:}
        -:11005:
    #####:11006:AMQP_VALUE amqpvalue_create_sasl_challenge(SASL_CHALLENGE_HANDLE sasl_challenge)
        -:11007:{
        -:11008:    AMQP_VALUE result;
        -:11009:
    #####:11010:    if (sasl_challenge == NULL)
        -:11011:    {
    #####:11012:        result = NULL;
        -:11013:    }
        -:11014:    else
        -:11015:    {
    #####:11016:        SASL_CHALLENGE_INSTANCE* sasl_challenge_instance = (SASL_CHALLENGE_INSTANCE*)sasl_challenge;
    #####:11017:        result = amqpvalue_clone(sasl_challenge_instance->composite_value);
        -:11018:    }
        -:11019:
    #####:11020:    return result;
        -:11021:}
        -:11022:
    #####:11023:bool is_sasl_challenge_type_by_descriptor(AMQP_VALUE descriptor)
        -:11024:{
        -:11025:    bool result;
        -:11026:
        -:11027:    uint64_t descriptor_ulong;
    #####:11028:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:11029:        (descriptor_ulong == 66))
        -:11030:    {
    #####:11031:        result = true;
        -:11032:    }
        -:11033:    else
        -:11034:    {
    #####:11035:        result = false;
        -:11036:    }
        -:11037:
    #####:11038:    return result;
        -:11039:}
        -:11040:
        -:11041:
    #####:11042:int amqpvalue_get_sasl_challenge(AMQP_VALUE value, SASL_CHALLENGE_HANDLE* sasl_challenge_handle)
        -:11043:{
        -:11044:    int result;
    #####:11045:    SASL_CHALLENGE_INSTANCE* sasl_challenge_instance = (SASL_CHALLENGE_INSTANCE*)sasl_challenge_create_internal();
    #####:11046:    *sasl_challenge_handle = sasl_challenge_instance;
    #####:11047:    if (*sasl_challenge_handle == NULL)
        -:11048:    {
    #####:11049:        result = MU_FAILURE;
        -:11050:    }
        -:11051:    else
        -:11052:    {
    #####:11053:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:11054:        if (list_value == NULL)
        -:11055:        {
    #####:11056:            sasl_challenge_destroy(*sasl_challenge_handle);
    #####:11057:            result = MU_FAILURE;
        -:11058:        }
        -:11059:        else
        -:11060:        {
        -:11061:            uint32_t list_item_count;
    #####:11062:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:11063:            {
    #####:11064:                result = MU_FAILURE;
        -:11065:            }
        -:11066:            else
        -:11067:            {
        -:11068:                do
        -:11069:                {
        -:11070:                    AMQP_VALUE item_value;
        -:11071:                    /* challenge */
    #####:11072:                    if (list_item_count > 0)
        -:11073:                    {
    #####:11074:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:11075:                        if (item_value == NULL)
        -:11076:                        {
        -:11077:                            {
    #####:11078:                                sasl_challenge_destroy(*sasl_challenge_handle);
    #####:11079:                                result = MU_FAILURE;
    #####:11080:                                break;
        -:11081:                            }
        -:11082:                        }
        -:11083:                        else
        -:11084:                        {
    #####:11085:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:11086:                            {
    #####:11087:                                amqpvalue_destroy(item_value);
    #####:11088:                                sasl_challenge_destroy(*sasl_challenge_handle);
    #####:11089:                                result = MU_FAILURE;
    #####:11090:                                break;
        -:11091:                            }
        -:11092:                            else
        -:11093:                            {
        -:11094:                                amqp_binary challenge;
    #####:11095:                                if (amqpvalue_get_binary(item_value, &challenge) != 0)
        -:11096:                                {
    #####:11097:                                    amqpvalue_destroy(item_value);
    #####:11098:                                    sasl_challenge_destroy(*sasl_challenge_handle);
    #####:11099:                                    result = MU_FAILURE;
    #####:11100:                                    break;
        -:11101:                                }
        -:11102:                            }
        -:11103:
    #####:11104:                            amqpvalue_destroy(item_value);
        -:11105:                        }
        -:11106:                    }
        -:11107:                    else
        -:11108:                    {
    #####:11109:                        result = MU_FAILURE;
        -:11110:                    }
        -:11111:
    #####:11112:                    sasl_challenge_instance->composite_value = amqpvalue_clone(value);
        -:11113:
    #####:11114:                    result = 0;
        -:11115:                } while((void)0,0);
        -:11116:            }
        -:11117:        }
        -:11118:    }
        -:11119:
    #####:11120:    return result;
        -:11121:}
        -:11122:
    #####:11123:int sasl_challenge_get_challenge(SASL_CHALLENGE_HANDLE sasl_challenge, amqp_binary* challenge_value)
        -:11124:{
        -:11125:    int result;
        -:11126:
    #####:11127:    if (sasl_challenge == NULL)
        -:11128:    {
    #####:11129:        result = MU_FAILURE;
        -:11130:    }
        -:11131:    else
        -:11132:    {
        -:11133:        uint32_t item_count;
    #####:11134:        SASL_CHALLENGE_INSTANCE* sasl_challenge_instance = (SASL_CHALLENGE_INSTANCE*)sasl_challenge;
    #####:11135:        if (amqpvalue_get_composite_item_count(sasl_challenge_instance->composite_value, &item_count) != 0)
        -:11136:        {
    #####:11137:            result = MU_FAILURE;
        -:11138:        }
        -:11139:        else
        -:11140:        {
    #####:11141:            if (item_count <= 0)
        -:11142:            {
    #####:11143:                result = MU_FAILURE;
        -:11144:            }
        -:11145:            else
        -:11146:            {
    #####:11147:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(sasl_challenge_instance->composite_value, 0);
    #####:11148:                if ((item_value == NULL) ||
    #####:11149:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:11150:                {
    #####:11151:                    result = MU_FAILURE;
        -:11152:                }
        -:11153:                else
        -:11154:                {
    #####:11155:                    int get_single_value_result = amqpvalue_get_binary(item_value, challenge_value);
    #####:11156:                    if (get_single_value_result != 0)
        -:11157:                    {
    #####:11158:                        result = MU_FAILURE;
        -:11159:                    }
        -:11160:                    else
        -:11161:                    {
    #####:11162:                        result = 0;
        -:11163:                    }
        -:11164:                }
        -:11165:            }
        -:11166:        }
        -:11167:    }
        -:11168:
    #####:11169:    return result;
        -:11170:}
        -:11171:
    #####:11172:int sasl_challenge_set_challenge(SASL_CHALLENGE_HANDLE sasl_challenge, amqp_binary challenge_value)
        -:11173:{
        -:11174:    int result;
        -:11175:
    #####:11176:    if (sasl_challenge == NULL)
        -:11177:    {
    #####:11178:        result = MU_FAILURE;
        -:11179:    }
        -:11180:    else
        -:11181:    {
    #####:11182:        SASL_CHALLENGE_INSTANCE* sasl_challenge_instance = (SASL_CHALLENGE_INSTANCE*)sasl_challenge;
    #####:11183:        AMQP_VALUE challenge_amqp_value = amqpvalue_create_binary(challenge_value);
    #####:11184:        if (challenge_amqp_value == NULL)
        -:11185:        {
    #####:11186:            result = MU_FAILURE;
        -:11187:        }
        -:11188:        else
        -:11189:        {
    #####:11190:            if (amqpvalue_set_composite_item(sasl_challenge_instance->composite_value, 0, challenge_amqp_value) != 0)
        -:11191:            {
    #####:11192:                result = MU_FAILURE;
        -:11193:            }
        -:11194:            else
        -:11195:            {
    #####:11196:                result = 0;
        -:11197:            }
        -:11198:
    #####:11199:            amqpvalue_destroy(challenge_amqp_value);
        -:11200:        }
        -:11201:    }
        -:11202:
    #####:11203:    return result;
        -:11204:}
        -:11205:
        -:11206:
        -:11207:/* sasl-response */
        -:11208:
        -:11209:typedef struct SASL_RESPONSE_INSTANCE_TAG
        -:11210:{
        -:11211:    AMQP_VALUE composite_value;
        -:11212:} SASL_RESPONSE_INSTANCE;
        -:11213:
    #####:11214:static SASL_RESPONSE_HANDLE sasl_response_create_internal(void)
        -:11215:{
    #####:11216:    SASL_RESPONSE_INSTANCE* sasl_response_instance = (SASL_RESPONSE_INSTANCE*)malloc(sizeof(SASL_RESPONSE_INSTANCE));
    #####:11217:    if (sasl_response_instance != NULL)
        -:11218:    {
    #####:11219:        sasl_response_instance->composite_value = NULL;
        -:11220:    }
        -:11221:
    #####:11222:    return sasl_response_instance;
        -:11223:}
        -:11224:
    #####:11225:SASL_RESPONSE_HANDLE sasl_response_create(amqp_binary response_value)
        -:11226:{
    #####:11227:    SASL_RESPONSE_INSTANCE* sasl_response_instance = (SASL_RESPONSE_INSTANCE*)malloc(sizeof(SASL_RESPONSE_INSTANCE));
    #####:11228:    if (sasl_response_instance != NULL)
        -:11229:    {
    #####:11230:        sasl_response_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(67);
    #####:11231:        if (sasl_response_instance->composite_value == NULL)
        -:11232:        {
    #####:11233:            free(sasl_response_instance);
    #####:11234:            sasl_response_instance = NULL;
        -:11235:        }
        -:11236:        else
        -:11237:        {
        -:11238:            AMQP_VALUE response_amqp_value;
    #####:11239:            int result = 0;
        -:11240:
    #####:11241:            response_amqp_value = amqpvalue_create_binary(response_value);
    #####:11242:            if ((result == 0) && (amqpvalue_set_composite_item(sasl_response_instance->composite_value, 0, response_amqp_value) != 0))
        -:11243:            {
    #####:11244:                result = MU_FAILURE;
        -:11245:            }
        -:11246:
    #####:11247:            amqpvalue_destroy(response_amqp_value);
        -:11248:        }
        -:11249:    }
        -:11250:
    #####:11251:    return sasl_response_instance;
        -:11252:}
        -:11253:
    #####:11254:SASL_RESPONSE_HANDLE sasl_response_clone(SASL_RESPONSE_HANDLE value)
        -:11255:{
    #####:11256:    SASL_RESPONSE_INSTANCE* sasl_response_instance = (SASL_RESPONSE_INSTANCE*)malloc(sizeof(SASL_RESPONSE_INSTANCE));
    #####:11257:    if (sasl_response_instance != NULL)
        -:11258:    {
    #####:11259:        sasl_response_instance->composite_value = amqpvalue_clone(((SASL_RESPONSE_INSTANCE*)value)->composite_value);
    #####:11260:        if (sasl_response_instance->composite_value == NULL)
        -:11261:        {
    #####:11262:            free(sasl_response_instance);
    #####:11263:            sasl_response_instance = NULL;
        -:11264:        }
        -:11265:    }
        -:11266:
    #####:11267:    return sasl_response_instance;
        -:11268:}
        -:11269:
    #####:11270:void sasl_response_destroy(SASL_RESPONSE_HANDLE sasl_response)
        -:11271:{
    #####:11272:    if (sasl_response != NULL)
        -:11273:    {
    #####:11274:        SASL_RESPONSE_INSTANCE* sasl_response_instance = (SASL_RESPONSE_INSTANCE*)sasl_response;
    #####:11275:        amqpvalue_destroy(sasl_response_instance->composite_value);
    #####:11276:        free(sasl_response_instance);
        -:11277:    }
    #####:11278:}
        -:11279:
    #####:11280:AMQP_VALUE amqpvalue_create_sasl_response(SASL_RESPONSE_HANDLE sasl_response)
        -:11281:{
        -:11282:    AMQP_VALUE result;
        -:11283:
    #####:11284:    if (sasl_response == NULL)
        -:11285:    {
    #####:11286:        result = NULL;
        -:11287:    }
        -:11288:    else
        -:11289:    {
    #####:11290:        SASL_RESPONSE_INSTANCE* sasl_response_instance = (SASL_RESPONSE_INSTANCE*)sasl_response;
    #####:11291:        result = amqpvalue_clone(sasl_response_instance->composite_value);
        -:11292:    }
        -:11293:
    #####:11294:    return result;
        -:11295:}
        -:11296:
    #####:11297:bool is_sasl_response_type_by_descriptor(AMQP_VALUE descriptor)
        -:11298:{
        -:11299:    bool result;
        -:11300:
        -:11301:    uint64_t descriptor_ulong;
    #####:11302:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:11303:        (descriptor_ulong == 67))
        -:11304:    {
    #####:11305:        result = true;
        -:11306:    }
        -:11307:    else
        -:11308:    {
    #####:11309:        result = false;
        -:11310:    }
        -:11311:
    #####:11312:    return result;
        -:11313:}
        -:11314:
        -:11315:
    #####:11316:int amqpvalue_get_sasl_response(AMQP_VALUE value, SASL_RESPONSE_HANDLE* sasl_response_handle)
        -:11317:{
        -:11318:    int result;
    #####:11319:    SASL_RESPONSE_INSTANCE* sasl_response_instance = (SASL_RESPONSE_INSTANCE*)sasl_response_create_internal();
    #####:11320:    *sasl_response_handle = sasl_response_instance;
    #####:11321:    if (*sasl_response_handle == NULL)
        -:11322:    {
    #####:11323:        result = MU_FAILURE;
        -:11324:    }
        -:11325:    else
        -:11326:    {
    #####:11327:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:11328:        if (list_value == NULL)
        -:11329:        {
    #####:11330:            sasl_response_destroy(*sasl_response_handle);
    #####:11331:            result = MU_FAILURE;
        -:11332:        }
        -:11333:        else
        -:11334:        {
        -:11335:            uint32_t list_item_count;
    #####:11336:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:11337:            {
    #####:11338:                result = MU_FAILURE;
        -:11339:            }
        -:11340:            else
        -:11341:            {
        -:11342:                do
        -:11343:                {
        -:11344:                    AMQP_VALUE item_value;
        -:11345:                    /* response */
    #####:11346:                    if (list_item_count > 0)
        -:11347:                    {
    #####:11348:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:11349:                        if (item_value == NULL)
        -:11350:                        {
        -:11351:                            {
    #####:11352:                                sasl_response_destroy(*sasl_response_handle);
    #####:11353:                                result = MU_FAILURE;
    #####:11354:                                break;
        -:11355:                            }
        -:11356:                        }
        -:11357:                        else
        -:11358:                        {
    #####:11359:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:11360:                            {
    #####:11361:                                amqpvalue_destroy(item_value);
    #####:11362:                                sasl_response_destroy(*sasl_response_handle);
    #####:11363:                                result = MU_FAILURE;
    #####:11364:                                break;
        -:11365:                            }
        -:11366:                            else
        -:11367:                            {
        -:11368:                                amqp_binary response;
    #####:11369:                                if (amqpvalue_get_binary(item_value, &response) != 0)
        -:11370:                                {
    #####:11371:                                    amqpvalue_destroy(item_value);
    #####:11372:                                    sasl_response_destroy(*sasl_response_handle);
    #####:11373:                                    result = MU_FAILURE;
    #####:11374:                                    break;
        -:11375:                                }
        -:11376:                            }
        -:11377:
    #####:11378:                            amqpvalue_destroy(item_value);
        -:11379:                        }
        -:11380:                    }
        -:11381:                    else
        -:11382:                    {
    #####:11383:                        result = MU_FAILURE;
        -:11384:                    }
        -:11385:
    #####:11386:                    sasl_response_instance->composite_value = amqpvalue_clone(value);
        -:11387:
    #####:11388:                    result = 0;
        -:11389:                } while((void)0,0);
        -:11390:            }
        -:11391:        }
        -:11392:    }
        -:11393:
    #####:11394:    return result;
        -:11395:}
        -:11396:
    #####:11397:int sasl_response_get_response(SASL_RESPONSE_HANDLE sasl_response, amqp_binary* response_value)
        -:11398:{
        -:11399:    int result;
        -:11400:
    #####:11401:    if (sasl_response == NULL)
        -:11402:    {
    #####:11403:        result = MU_FAILURE;
        -:11404:    }
        -:11405:    else
        -:11406:    {
        -:11407:        uint32_t item_count;
    #####:11408:        SASL_RESPONSE_INSTANCE* sasl_response_instance = (SASL_RESPONSE_INSTANCE*)sasl_response;
    #####:11409:        if (amqpvalue_get_composite_item_count(sasl_response_instance->composite_value, &item_count) != 0)
        -:11410:        {
    #####:11411:            result = MU_FAILURE;
        -:11412:        }
        -:11413:        else
        -:11414:        {
    #####:11415:            if (item_count <= 0)
        -:11416:            {
    #####:11417:                result = MU_FAILURE;
        -:11418:            }
        -:11419:            else
        -:11420:            {
    #####:11421:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(sasl_response_instance->composite_value, 0);
    #####:11422:                if ((item_value == NULL) ||
    #####:11423:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:11424:                {
    #####:11425:                    result = MU_FAILURE;
        -:11426:                }
        -:11427:                else
        -:11428:                {
    #####:11429:                    int get_single_value_result = amqpvalue_get_binary(item_value, response_value);
    #####:11430:                    if (get_single_value_result != 0)
        -:11431:                    {
    #####:11432:                        result = MU_FAILURE;
        -:11433:                    }
        -:11434:                    else
        -:11435:                    {
    #####:11436:                        result = 0;
        -:11437:                    }
        -:11438:                }
        -:11439:            }
        -:11440:        }
        -:11441:    }
        -:11442:
    #####:11443:    return result;
        -:11444:}
        -:11445:
    #####:11446:int sasl_response_set_response(SASL_RESPONSE_HANDLE sasl_response, amqp_binary response_value)
        -:11447:{
        -:11448:    int result;
        -:11449:
    #####:11450:    if (sasl_response == NULL)
        -:11451:    {
    #####:11452:        result = MU_FAILURE;
        -:11453:    }
        -:11454:    else
        -:11455:    {
    #####:11456:        SASL_RESPONSE_INSTANCE* sasl_response_instance = (SASL_RESPONSE_INSTANCE*)sasl_response;
    #####:11457:        AMQP_VALUE response_amqp_value = amqpvalue_create_binary(response_value);
    #####:11458:        if (response_amqp_value == NULL)
        -:11459:        {
    #####:11460:            result = MU_FAILURE;
        -:11461:        }
        -:11462:        else
        -:11463:        {
    #####:11464:            if (amqpvalue_set_composite_item(sasl_response_instance->composite_value, 0, response_amqp_value) != 0)
        -:11465:            {
    #####:11466:                result = MU_FAILURE;
        -:11467:            }
        -:11468:            else
        -:11469:            {
    #####:11470:                result = 0;
        -:11471:            }
        -:11472:
    #####:11473:            amqpvalue_destroy(response_amqp_value);
        -:11474:        }
        -:11475:    }
        -:11476:
    #####:11477:    return result;
        -:11478:}
        -:11479:
        -:11480:
        -:11481:/* sasl-outcome */
        -:11482:
        -:11483:typedef struct SASL_OUTCOME_INSTANCE_TAG
        -:11484:{
        -:11485:    AMQP_VALUE composite_value;
        -:11486:} SASL_OUTCOME_INSTANCE;
        -:11487:
    #####:11488:static SASL_OUTCOME_HANDLE sasl_outcome_create_internal(void)
        -:11489:{
    #####:11490:    SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)malloc(sizeof(SASL_OUTCOME_INSTANCE));
    #####:11491:    if (sasl_outcome_instance != NULL)
        -:11492:    {
    #####:11493:        sasl_outcome_instance->composite_value = NULL;
        -:11494:    }
        -:11495:
    #####:11496:    return sasl_outcome_instance;
        -:11497:}
        -:11498:
    #####:11499:SASL_OUTCOME_HANDLE sasl_outcome_create(sasl_code code_value)
        -:11500:{
    #####:11501:    SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)malloc(sizeof(SASL_OUTCOME_INSTANCE));
    #####:11502:    if (sasl_outcome_instance != NULL)
        -:11503:    {
    #####:11504:        sasl_outcome_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(68);
    #####:11505:        if (sasl_outcome_instance->composite_value == NULL)
        -:11506:        {
    #####:11507:            free(sasl_outcome_instance);
    #####:11508:            sasl_outcome_instance = NULL;
        -:11509:        }
        -:11510:        else
        -:11511:        {
        -:11512:            AMQP_VALUE code_amqp_value;
    #####:11513:            int result = 0;
        -:11514:
    #####:11515:            code_amqp_value = amqpvalue_create_sasl_code(code_value);
    #####:11516:            if ((result == 0) && (amqpvalue_set_composite_item(sasl_outcome_instance->composite_value, 0, code_amqp_value) != 0))
        -:11517:            {
    #####:11518:                result = MU_FAILURE;
        -:11519:            }
        -:11520:
    #####:11521:            amqpvalue_destroy(code_amqp_value);
        -:11522:        }
        -:11523:    }
        -:11524:
    #####:11525:    return sasl_outcome_instance;
        -:11526:}
        -:11527:
    #####:11528:SASL_OUTCOME_HANDLE sasl_outcome_clone(SASL_OUTCOME_HANDLE value)
        -:11529:{
    #####:11530:    SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)malloc(sizeof(SASL_OUTCOME_INSTANCE));
    #####:11531:    if (sasl_outcome_instance != NULL)
        -:11532:    {
    #####:11533:        sasl_outcome_instance->composite_value = amqpvalue_clone(((SASL_OUTCOME_INSTANCE*)value)->composite_value);
    #####:11534:        if (sasl_outcome_instance->composite_value == NULL)
        -:11535:        {
    #####:11536:            free(sasl_outcome_instance);
    #####:11537:            sasl_outcome_instance = NULL;
        -:11538:        }
        -:11539:    }
        -:11540:
    #####:11541:    return sasl_outcome_instance;
        -:11542:}
        -:11543:
    #####:11544:void sasl_outcome_destroy(SASL_OUTCOME_HANDLE sasl_outcome)
        -:11545:{
    #####:11546:    if (sasl_outcome != NULL)
        -:11547:    {
    #####:11548:        SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)sasl_outcome;
    #####:11549:        amqpvalue_destroy(sasl_outcome_instance->composite_value);
    #####:11550:        free(sasl_outcome_instance);
        -:11551:    }
    #####:11552:}
        -:11553:
    #####:11554:AMQP_VALUE amqpvalue_create_sasl_outcome(SASL_OUTCOME_HANDLE sasl_outcome)
        -:11555:{
        -:11556:    AMQP_VALUE result;
        -:11557:
    #####:11558:    if (sasl_outcome == NULL)
        -:11559:    {
    #####:11560:        result = NULL;
        -:11561:    }
        -:11562:    else
        -:11563:    {
    #####:11564:        SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)sasl_outcome;
    #####:11565:        result = amqpvalue_clone(sasl_outcome_instance->composite_value);
        -:11566:    }
        -:11567:
    #####:11568:    return result;
        -:11569:}
        -:11570:
    #####:11571:bool is_sasl_outcome_type_by_descriptor(AMQP_VALUE descriptor)
        -:11572:{
        -:11573:    bool result;
        -:11574:
        -:11575:    uint64_t descriptor_ulong;
    #####:11576:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:11577:        (descriptor_ulong == 68))
        -:11578:    {
    #####:11579:        result = true;
        -:11580:    }
        -:11581:    else
        -:11582:    {
    #####:11583:        result = false;
        -:11584:    }
        -:11585:
    #####:11586:    return result;
        -:11587:}
        -:11588:
        -:11589:
    #####:11590:int amqpvalue_get_sasl_outcome(AMQP_VALUE value, SASL_OUTCOME_HANDLE* sasl_outcome_handle)
        -:11591:{
        -:11592:    int result;
    #####:11593:    SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)sasl_outcome_create_internal();
    #####:11594:    *sasl_outcome_handle = sasl_outcome_instance;
    #####:11595:    if (*sasl_outcome_handle == NULL)
        -:11596:    {
    #####:11597:        result = MU_FAILURE;
        -:11598:    }
        -:11599:    else
        -:11600:    {
    #####:11601:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:11602:        if (list_value == NULL)
        -:11603:        {
    #####:11604:            sasl_outcome_destroy(*sasl_outcome_handle);
    #####:11605:            result = MU_FAILURE;
        -:11606:        }
        -:11607:        else
        -:11608:        {
        -:11609:            uint32_t list_item_count;
    #####:11610:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:11611:            {
    #####:11612:                result = MU_FAILURE;
        -:11613:            }
        -:11614:            else
        -:11615:            {
        -:11616:                do
        -:11617:                {
        -:11618:                    AMQP_VALUE item_value;
        -:11619:                    /* code */
    #####:11620:                    if (list_item_count > 0)
        -:11621:                    {
    #####:11622:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:11623:                        if (item_value == NULL)
        -:11624:                        {
        -:11625:                            {
    #####:11626:                                sasl_outcome_destroy(*sasl_outcome_handle);
    #####:11627:                                result = MU_FAILURE;
    #####:11628:                                break;
        -:11629:                            }
        -:11630:                        }
        -:11631:                        else
        -:11632:                        {
    #####:11633:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:11634:                            {
    #####:11635:                                amqpvalue_destroy(item_value);
    #####:11636:                                sasl_outcome_destroy(*sasl_outcome_handle);
    #####:11637:                                result = MU_FAILURE;
    #####:11638:                                break;
        -:11639:                            }
        -:11640:                            else
        -:11641:                            {
        -:11642:                                sasl_code code;
    #####:11643:                                if (amqpvalue_get_sasl_code(item_value, &code) != 0)
        -:11644:                                {
    #####:11645:                                    amqpvalue_destroy(item_value);
    #####:11646:                                    sasl_outcome_destroy(*sasl_outcome_handle);
    #####:11647:                                    result = MU_FAILURE;
    #####:11648:                                    break;
        -:11649:                                }
        -:11650:                            }
        -:11651:
    #####:11652:                            amqpvalue_destroy(item_value);
        -:11653:                        }
        -:11654:                    }
        -:11655:                    else
        -:11656:                    {
    #####:11657:                        result = MU_FAILURE;
        -:11658:                    }
        -:11659:                    /* additional-data */
    #####:11660:                    if (list_item_count > 1)
        -:11661:                    {
    #####:11662:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:11663:                        if (item_value == NULL)
        -:11664:                        {
        -:11665:                            /* do nothing */
        -:11666:                        }
        -:11667:                        else
        -:11668:                        {
    #####:11669:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:11670:                            {
        -:11671:                                /* no error, field is not mandatory */
        -:11672:                            }
        -:11673:                            else
        -:11674:                            {
        -:11675:                                amqp_binary additional_data;
    #####:11676:                                if (amqpvalue_get_binary(item_value, &additional_data) != 0)
        -:11677:                                {
    #####:11678:                                    amqpvalue_destroy(item_value);
    #####:11679:                                    sasl_outcome_destroy(*sasl_outcome_handle);
    #####:11680:                                    result = MU_FAILURE;
    #####:11681:                                    break;
        -:11682:                                }
        -:11683:                            }
        -:11684:
    #####:11685:                            amqpvalue_destroy(item_value);
        -:11686:                        }
        -:11687:                    }
        -:11688:
    #####:11689:                    sasl_outcome_instance->composite_value = amqpvalue_clone(value);
        -:11690:
    #####:11691:                    result = 0;
        -:11692:                } while((void)0,0);
        -:11693:            }
        -:11694:        }
        -:11695:    }
        -:11696:
    #####:11697:    return result;
        -:11698:}
        -:11699:
    #####:11700:int sasl_outcome_get_code(SASL_OUTCOME_HANDLE sasl_outcome, sasl_code* code_value)
        -:11701:{
        -:11702:    int result;
        -:11703:
    #####:11704:    if (sasl_outcome == NULL)
        -:11705:    {
    #####:11706:        result = MU_FAILURE;
        -:11707:    }
        -:11708:    else
        -:11709:    {
        -:11710:        uint32_t item_count;
    #####:11711:        SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)sasl_outcome;
    #####:11712:        if (amqpvalue_get_composite_item_count(sasl_outcome_instance->composite_value, &item_count) != 0)
        -:11713:        {
    #####:11714:            result = MU_FAILURE;
        -:11715:        }
        -:11716:        else
        -:11717:        {
    #####:11718:            if (item_count <= 0)
        -:11719:            {
    #####:11720:                result = MU_FAILURE;
        -:11721:            }
        -:11722:            else
        -:11723:            {
    #####:11724:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(sasl_outcome_instance->composite_value, 0);
    #####:11725:                if ((item_value == NULL) ||
    #####:11726:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:11727:                {
    #####:11728:                    result = MU_FAILURE;
        -:11729:                }
        -:11730:                else
        -:11731:                {
    #####:11732:                    int get_single_value_result = amqpvalue_get_sasl_code(item_value, code_value);
    #####:11733:                    if (get_single_value_result != 0)
        -:11734:                    {
    #####:11735:                        result = MU_FAILURE;
        -:11736:                    }
        -:11737:                    else
        -:11738:                    {
    #####:11739:                        result = 0;
        -:11740:                    }
        -:11741:                }
        -:11742:            }
        -:11743:        }
        -:11744:    }
        -:11745:
    #####:11746:    return result;
        -:11747:}
        -:11748:
    #####:11749:int sasl_outcome_set_code(SASL_OUTCOME_HANDLE sasl_outcome, sasl_code code_value)
        -:11750:{
        -:11751:    int result;
        -:11752:
    #####:11753:    if (sasl_outcome == NULL)
        -:11754:    {
    #####:11755:        result = MU_FAILURE;
        -:11756:    }
        -:11757:    else
        -:11758:    {
    #####:11759:        SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)sasl_outcome;
    #####:11760:        AMQP_VALUE code_amqp_value = amqpvalue_create_sasl_code(code_value);
    #####:11761:        if (code_amqp_value == NULL)
        -:11762:        {
    #####:11763:            result = MU_FAILURE;
        -:11764:        }
        -:11765:        else
        -:11766:        {
    #####:11767:            if (amqpvalue_set_composite_item(sasl_outcome_instance->composite_value, 0, code_amqp_value) != 0)
        -:11768:            {
    #####:11769:                result = MU_FAILURE;
        -:11770:            }
        -:11771:            else
        -:11772:            {
    #####:11773:                result = 0;
        -:11774:            }
        -:11775:
    #####:11776:            amqpvalue_destroy(code_amqp_value);
        -:11777:        }
        -:11778:    }
        -:11779:
    #####:11780:    return result;
        -:11781:}
        -:11782:
    #####:11783:int sasl_outcome_get_additional_data(SASL_OUTCOME_HANDLE sasl_outcome, amqp_binary* additional_data_value)
        -:11784:{
        -:11785:    int result;
        -:11786:
    #####:11787:    if (sasl_outcome == NULL)
        -:11788:    {
    #####:11789:        result = MU_FAILURE;
        -:11790:    }
        -:11791:    else
        -:11792:    {
        -:11793:        uint32_t item_count;
    #####:11794:        SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)sasl_outcome;
    #####:11795:        if (amqpvalue_get_composite_item_count(sasl_outcome_instance->composite_value, &item_count) != 0)
        -:11796:        {
    #####:11797:            result = MU_FAILURE;
        -:11798:        }
        -:11799:        else
        -:11800:        {
    #####:11801:            if (item_count <= 1)
        -:11802:            {
    #####:11803:                result = MU_FAILURE;
        -:11804:            }
        -:11805:            else
        -:11806:            {
    #####:11807:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(sasl_outcome_instance->composite_value, 1);
    #####:11808:                if ((item_value == NULL) ||
    #####:11809:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:11810:                {
    #####:11811:                    result = MU_FAILURE;
        -:11812:                }
        -:11813:                else
        -:11814:                {
    #####:11815:                    int get_single_value_result = amqpvalue_get_binary(item_value, additional_data_value);
    #####:11816:                    if (get_single_value_result != 0)
        -:11817:                    {
    #####:11818:                        result = MU_FAILURE;
        -:11819:                    }
        -:11820:                    else
        -:11821:                    {
    #####:11822:                        result = 0;
        -:11823:                    }
        -:11824:                }
        -:11825:            }
        -:11826:        }
        -:11827:    }
        -:11828:
    #####:11829:    return result;
        -:11830:}
        -:11831:
    #####:11832:int sasl_outcome_set_additional_data(SASL_OUTCOME_HANDLE sasl_outcome, amqp_binary additional_data_value)
        -:11833:{
        -:11834:    int result;
        -:11835:
    #####:11836:    if (sasl_outcome == NULL)
        -:11837:    {
    #####:11838:        result = MU_FAILURE;
        -:11839:    }
        -:11840:    else
        -:11841:    {
    #####:11842:        SASL_OUTCOME_INSTANCE* sasl_outcome_instance = (SASL_OUTCOME_INSTANCE*)sasl_outcome;
    #####:11843:        AMQP_VALUE additional_data_amqp_value = amqpvalue_create_binary(additional_data_value);
    #####:11844:        if (additional_data_amqp_value == NULL)
        -:11845:        {
    #####:11846:            result = MU_FAILURE;
        -:11847:        }
        -:11848:        else
        -:11849:        {
    #####:11850:            if (amqpvalue_set_composite_item(sasl_outcome_instance->composite_value, 1, additional_data_amqp_value) != 0)
        -:11851:            {
    #####:11852:                result = MU_FAILURE;
        -:11853:            }
        -:11854:            else
        -:11855:            {
    #####:11856:                result = 0;
        -:11857:            }
        -:11858:
    #####:11859:            amqpvalue_destroy(additional_data_amqp_value);
        -:11860:        }
        -:11861:    }
        -:11862:
    #####:11863:    return result;
        -:11864:}
        -:11865:
        -:11866:
        -:11867:/* terminus-durability */
        -:11868:
    #####:11869:AMQP_VALUE amqpvalue_create_terminus_durability(terminus_durability value)
        -:11870:{
    #####:11871:    return amqpvalue_create_uint(value);
        -:11872:}
        -:11873:
        -:11874:/* terminus-expiry-policy */
        -:11875:
    #####:11876:AMQP_VALUE amqpvalue_create_terminus_expiry_policy(terminus_expiry_policy value)
        -:11877:{
    #####:11878:    return amqpvalue_create_symbol(value);
        -:11879:}
        -:11880:
        -:11881:/* node-properties */
        -:11882:
    #####:11883:AMQP_VALUE amqpvalue_create_node_properties(node_properties value)
        -:11884:{
    #####:11885:    return amqpvalue_create_fields(value);
        -:11886:}
        -:11887:
        -:11888:/* filter-set */
        -:11889:
    #####:11890:AMQP_VALUE amqpvalue_create_filter_set(AMQP_VALUE value)
        -:11891:{
    #####:11892:    return amqpvalue_clone(value);
        -:11893:}
        -:11894:
        -:11895:/* source */
        -:11896:
        -:11897:typedef struct SOURCE_INSTANCE_TAG
        -:11898:{
        -:11899:    AMQP_VALUE composite_value;
        -:11900:} SOURCE_INSTANCE;
        -:11901:
    #####:11902:static SOURCE_HANDLE source_create_internal(void)
        -:11903:{
    #####:11904:    SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)malloc(sizeof(SOURCE_INSTANCE));
    #####:11905:    if (source_instance != NULL)
        -:11906:    {
    #####:11907:        source_instance->composite_value = NULL;
        -:11908:    }
        -:11909:
    #####:11910:    return source_instance;
        -:11911:}
        -:11912:
        9:11913:SOURCE_HANDLE source_create(void)
        -:11914:{
        9:11915:    SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)malloc(sizeof(SOURCE_INSTANCE));
        9:11916:    if (source_instance != NULL)
        -:11917:    {
        9:11918:        source_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(40);
        9:11919:        if (source_instance->composite_value == NULL)
        -:11920:        {
    #####:11921:            free(source_instance);
    #####:11922:            source_instance = NULL;
        -:11923:        }
        -:11924:    }
        -:11925:
        9:11926:    return source_instance;
        -:11927:}
        -:11928:
    #####:11929:SOURCE_HANDLE source_clone(SOURCE_HANDLE value)
        -:11930:{
    #####:11931:    SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)malloc(sizeof(SOURCE_INSTANCE));
    #####:11932:    if (source_instance != NULL)
        -:11933:    {
    #####:11934:        source_instance->composite_value = amqpvalue_clone(((SOURCE_INSTANCE*)value)->composite_value);
    #####:11935:        if (source_instance->composite_value == NULL)
        -:11936:        {
    #####:11937:            free(source_instance);
    #####:11938:            source_instance = NULL;
        -:11939:        }
        -:11940:    }
        -:11941:
    #####:11942:    return source_instance;
        -:11943:}
        -:11944:
        9:11945:void source_destroy(SOURCE_HANDLE source)
        -:11946:{
        9:11947:    if (source != NULL)
        -:11948:    {
        9:11949:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
        9:11950:        amqpvalue_destroy(source_instance->composite_value);
        9:11951:        free(source_instance);
        -:11952:    }
        9:11953:}
        -:11954:
        9:11955:AMQP_VALUE amqpvalue_create_source(SOURCE_HANDLE source)
        -:11956:{
        -:11957:    AMQP_VALUE result;
        -:11958:
        9:11959:    if (source == NULL)
        -:11960:    {
    #####:11961:        result = NULL;
        -:11962:    }
        -:11963:    else
        -:11964:    {
        9:11965:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
        9:11966:        result = amqpvalue_clone(source_instance->composite_value);
        -:11967:    }
        -:11968:
        9:11969:    return result;
        -:11970:}
        -:11971:
    #####:11972:bool is_source_type_by_descriptor(AMQP_VALUE descriptor)
        -:11973:{
        -:11974:    bool result;
        -:11975:
        -:11976:    uint64_t descriptor_ulong;
    #####:11977:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:11978:        (descriptor_ulong == 40))
        -:11979:    {
    #####:11980:        result = true;
        -:11981:    }
        -:11982:    else
        -:11983:    {
    #####:11984:        result = false;
        -:11985:    }
        -:11986:
    #####:11987:    return result;
        -:11988:}
        -:11989:
        -:11990:
    #####:11991:int amqpvalue_get_source(AMQP_VALUE value, SOURCE_HANDLE* source_handle)
        -:11992:{
        -:11993:    int result;
    #####:11994:    SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source_create_internal();
    #####:11995:    *source_handle = source_instance;
    #####:11996:    if (*source_handle == NULL)
        -:11997:    {
    #####:11998:        result = MU_FAILURE;
        -:11999:    }
        -:12000:    else
        -:12001:    {
    #####:12002:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:12003:        if (list_value == NULL)
        -:12004:        {
    #####:12005:            source_destroy(*source_handle);
    #####:12006:            result = MU_FAILURE;
        -:12007:        }
        -:12008:        else
        -:12009:        {
        -:12010:            uint32_t list_item_count;
    #####:12011:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:12012:            {
    #####:12013:                result = MU_FAILURE;
        -:12014:            }
        -:12015:            else
        -:12016:            {
        -:12017:                do
        -:12018:                {
        -:12019:                    AMQP_VALUE item_value;
        -:12020:                    /* address */
    #####:12021:                    if (list_item_count > 0)
        -:12022:                    {
    #####:12023:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:12024:                        if (item_value == NULL)
        -:12025:                        {
        -:12026:                            /* do nothing */
        -:12027:                        }
        -:12028:                        else
        -:12029:                        {
    #####:12030:                            amqpvalue_destroy(item_value);
        -:12031:                        }
        -:12032:                    }
        -:12033:                    /* durable */
    #####:12034:                    if (list_item_count > 1)
        -:12035:                    {
    #####:12036:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:12037:                        if (item_value == NULL)
        -:12038:                        {
        -:12039:                            /* do nothing */
        -:12040:                        }
        -:12041:                        else
        -:12042:                        {
    #####:12043:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12044:                            {
        -:12045:                                /* no error, field is not mandatory */
        -:12046:                            }
        -:12047:                            else
        -:12048:                            {
        -:12049:                                terminus_durability durable;
    #####:12050:                                if (amqpvalue_get_terminus_durability(item_value, &durable) != 0)
        -:12051:                                {
    #####:12052:                                    amqpvalue_destroy(item_value);
    #####:12053:                                    source_destroy(*source_handle);
    #####:12054:                                    result = MU_FAILURE;
    #####:12055:                                    break;
        -:12056:                                }
        -:12057:                            }
        -:12058:
    #####:12059:                            amqpvalue_destroy(item_value);
        -:12060:                        }
        -:12061:                    }
        -:12062:                    /* expiry-policy */
    #####:12063:                    if (list_item_count > 2)
        -:12064:                    {
    #####:12065:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####:12066:                        if (item_value == NULL)
        -:12067:                        {
        -:12068:                            /* do nothing */
        -:12069:                        }
        -:12070:                        else
        -:12071:                        {
    #####:12072:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12073:                            {
        -:12074:                                /* no error, field is not mandatory */
        -:12075:                            }
        -:12076:                            else
        -:12077:                            {
        -:12078:                                terminus_expiry_policy expiry_policy;
    #####:12079:                                if (amqpvalue_get_terminus_expiry_policy(item_value, &expiry_policy) != 0)
        -:12080:                                {
    #####:12081:                                    amqpvalue_destroy(item_value);
    #####:12082:                                    source_destroy(*source_handle);
    #####:12083:                                    result = MU_FAILURE;
    #####:12084:                                    break;
        -:12085:                                }
        -:12086:                            }
        -:12087:
    #####:12088:                            amqpvalue_destroy(item_value);
        -:12089:                        }
        -:12090:                    }
        -:12091:                    /* timeout */
    #####:12092:                    if (list_item_count > 3)
        -:12093:                    {
    #####:12094:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####:12095:                        if (item_value == NULL)
        -:12096:                        {
        -:12097:                            /* do nothing */
        -:12098:                        }
        -:12099:                        else
        -:12100:                        {
    #####:12101:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12102:                            {
        -:12103:                                /* no error, field is not mandatory */
        -:12104:                            }
        -:12105:                            else
        -:12106:                            {
        -:12107:                                seconds timeout;
    #####:12108:                                if (amqpvalue_get_seconds(item_value, &timeout) != 0)
        -:12109:                                {
    #####:12110:                                    amqpvalue_destroy(item_value);
    #####:12111:                                    source_destroy(*source_handle);
    #####:12112:                                    result = MU_FAILURE;
    #####:12113:                                    break;
        -:12114:                                }
        -:12115:                            }
        -:12116:
    #####:12117:                            amqpvalue_destroy(item_value);
        -:12118:                        }
        -:12119:                    }
        -:12120:                    /* dynamic */
    #####:12121:                    if (list_item_count > 4)
        -:12122:                    {
    #####:12123:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####:12124:                        if (item_value == NULL)
        -:12125:                        {
        -:12126:                            /* do nothing */
        -:12127:                        }
        -:12128:                        else
        -:12129:                        {
    #####:12130:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12131:                            {
        -:12132:                                /* no error, field is not mandatory */
        -:12133:                            }
        -:12134:                            else
        -:12135:                            {
        -:12136:                                bool dynamic;
    #####:12137:                                if (amqpvalue_get_boolean(item_value, &dynamic) != 0)
        -:12138:                                {
    #####:12139:                                    amqpvalue_destroy(item_value);
    #####:12140:                                    source_destroy(*source_handle);
    #####:12141:                                    result = MU_FAILURE;
    #####:12142:                                    break;
        -:12143:                                }
        -:12144:                            }
        -:12145:
    #####:12146:                            amqpvalue_destroy(item_value);
        -:12147:                        }
        -:12148:                    }
        -:12149:                    /* dynamic-node-properties */
    #####:12150:                    if (list_item_count > 5)
        -:12151:                    {
    #####:12152:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####:12153:                        if (item_value == NULL)
        -:12154:                        {
        -:12155:                            /* do nothing */
        -:12156:                        }
        -:12157:                        else
        -:12158:                        {
    #####:12159:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12160:                            {
        -:12161:                                /* no error, field is not mandatory */
        -:12162:                            }
        -:12163:                            else
        -:12164:                            {
        -:12165:                                node_properties dynamic_node_properties;
    #####:12166:                                if (amqpvalue_get_node_properties(item_value, &dynamic_node_properties) != 0)
        -:12167:                                {
    #####:12168:                                    amqpvalue_destroy(item_value);
    #####:12169:                                    source_destroy(*source_handle);
    #####:12170:                                    result = MU_FAILURE;
    #####:12171:                                    break;
        -:12172:                                }
        -:12173:                            }
        -:12174:
    #####:12175:                            amqpvalue_destroy(item_value);
        -:12176:                        }
        -:12177:                    }
        -:12178:                    /* distribution-mode */
    #####:12179:                    if (list_item_count > 6)
        -:12180:                    {
    #####:12181:                        item_value = amqpvalue_get_list_item(list_value, 6);
    #####:12182:                        if (item_value == NULL)
        -:12183:                        {
        -:12184:                            /* do nothing */
        -:12185:                        }
        -:12186:                        else
        -:12187:                        {
    #####:12188:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12189:                            {
        -:12190:                                /* no error, field is not mandatory */
        -:12191:                            }
        -:12192:                            else
        -:12193:                            {
        -:12194:                                const char* distribution_mode;
    #####:12195:                                if (amqpvalue_get_symbol(item_value, &distribution_mode) != 0)
        -:12196:                                {
    #####:12197:                                    amqpvalue_destroy(item_value);
    #####:12198:                                    source_destroy(*source_handle);
    #####:12199:                                    result = MU_FAILURE;
    #####:12200:                                    break;
        -:12201:                                }
        -:12202:                            }
        -:12203:
    #####:12204:                            amqpvalue_destroy(item_value);
        -:12205:                        }
        -:12206:                    }
        -:12207:                    /* filter */
    #####:12208:                    if (list_item_count > 7)
        -:12209:                    {
    #####:12210:                        item_value = amqpvalue_get_list_item(list_value, 7);
    #####:12211:                        if (item_value == NULL)
        -:12212:                        {
        -:12213:                            /* do nothing */
        -:12214:                        }
        -:12215:                        else
        -:12216:                        {
    #####:12217:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12218:                            {
        -:12219:                                /* no error, field is not mandatory */
        -:12220:                            }
        -:12221:                            else
        -:12222:                            {
        -:12223:                                filter_set filter;
    #####:12224:                                if (amqpvalue_get_filter_set(item_value, &filter) != 0)
        -:12225:                                {
    #####:12226:                                    amqpvalue_destroy(item_value);
    #####:12227:                                    source_destroy(*source_handle);
    #####:12228:                                    result = MU_FAILURE;
    #####:12229:                                    break;
        -:12230:                                }
        -:12231:                            }
        -:12232:
    #####:12233:                            amqpvalue_destroy(item_value);
        -:12234:                        }
        -:12235:                    }
        -:12236:                    /* default-outcome */
    #####:12237:                    if (list_item_count > 8)
        -:12238:                    {
    #####:12239:                        item_value = amqpvalue_get_list_item(list_value, 8);
    #####:12240:                        if (item_value == NULL)
        -:12241:                        {
        -:12242:                            /* do nothing */
        -:12243:                        }
        -:12244:                        else
        -:12245:                        {
    #####:12246:                            amqpvalue_destroy(item_value);
        -:12247:                        }
        -:12248:                    }
        -:12249:                    /* outcomes */
    #####:12250:                    if (list_item_count > 9)
        -:12251:                    {
    #####:12252:                        item_value = amqpvalue_get_list_item(list_value, 9);
    #####:12253:                        if (item_value == NULL)
        -:12254:                        {
        -:12255:                            /* do nothing */
        -:12256:                        }
        -:12257:                        else
        -:12258:                        {
    #####:12259:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12260:                            {
        -:12261:                                /* no error, field is not mandatory */
        -:12262:                            }
        -:12263:                            else
        -:12264:                            {
    #####:12265:                                const char* outcomes = NULL;
        -:12266:                                AMQP_VALUE outcomes_array;
    #####:12267:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &outcomes_array) != 0)) &&
    #####:12268:                                    (amqpvalue_get_symbol(item_value, &outcomes) != 0))
        -:12269:                                {
    #####:12270:                                    amqpvalue_destroy(item_value);
    #####:12271:                                    source_destroy(*source_handle);
    #####:12272:                                    result = MU_FAILURE;
    #####:12273:                                    break;
        -:12274:                                }
        -:12275:                            }
        -:12276:
    #####:12277:                            amqpvalue_destroy(item_value);
        -:12278:                        }
        -:12279:                    }
        -:12280:                    /* capabilities */
    #####:12281:                    if (list_item_count > 10)
        -:12282:                    {
    #####:12283:                        item_value = amqpvalue_get_list_item(list_value, 10);
    #####:12284:                        if (item_value == NULL)
        -:12285:                        {
        -:12286:                            /* do nothing */
        -:12287:                        }
        -:12288:                        else
        -:12289:                        {
    #####:12290:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:12291:                            {
        -:12292:                                /* no error, field is not mandatory */
        -:12293:                            }
        -:12294:                            else
        -:12295:                            {
    #####:12296:                                const char* capabilities = NULL;
        -:12297:                                AMQP_VALUE capabilities_array;
    #####:12298:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &capabilities_array) != 0)) &&
    #####:12299:                                    (amqpvalue_get_symbol(item_value, &capabilities) != 0))
        -:12300:                                {
    #####:12301:                                    amqpvalue_destroy(item_value);
    #####:12302:                                    source_destroy(*source_handle);
    #####:12303:                                    result = MU_FAILURE;
    #####:12304:                                    break;
        -:12305:                                }
        -:12306:                            }
        -:12307:
    #####:12308:                            amqpvalue_destroy(item_value);
        -:12309:                        }
        -:12310:                    }
        -:12311:
    #####:12312:                    source_instance->composite_value = amqpvalue_clone(value);
        -:12313:
    #####:12314:                    result = 0;
        -:12315:                } while((void)0,0);
        -:12316:            }
        -:12317:        }
        -:12318:    }
        -:12319:
    #####:12320:    return result;
        -:12321:}
        -:12322:
    #####:12323:int source_get_address(SOURCE_HANDLE source, AMQP_VALUE* address_value)
        -:12324:{
        -:12325:    int result;
        -:12326:
    #####:12327:    if (source == NULL)
        -:12328:    {
    #####:12329:        result = MU_FAILURE;
        -:12330:    }
        -:12331:    else
        -:12332:    {
        -:12333:        uint32_t item_count;
    #####:12334:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12335:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:12336:        {
    #####:12337:            result = MU_FAILURE;
        -:12338:        }
        -:12339:        else
        -:12340:        {
    #####:12341:            if (item_count <= 0)
        -:12342:            {
    #####:12343:                result = MU_FAILURE;
        -:12344:            }
        -:12345:            else
        -:12346:            {
    #####:12347:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 0);
    #####:12348:                if ((item_value == NULL) ||
    #####:12349:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:12350:                {
    #####:12351:                    result = MU_FAILURE;
        -:12352:                }
        -:12353:                else
        -:12354:                {
    #####:12355:                    *address_value = item_value;
    #####:12356:                    result = 0;
        -:12357:                }
        -:12358:            }
        -:12359:        }
        -:12360:    }
        -:12361:
    #####:12362:    return result;
        -:12363:}
        -:12364:
        9:12365:int source_set_address(SOURCE_HANDLE source, AMQP_VALUE address_value)
        -:12366:{
        -:12367:    int result;
        -:12368:
        9:12369:    if (source == NULL)
        -:12370:    {
    #####:12371:        result = MU_FAILURE;
        -:12372:    }
        -:12373:    else
        -:12374:    {
        9:12375:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
        -:12376:        AMQP_VALUE address_amqp_value;
        9:12377:        if (address_value == NULL)
        -:12378:        {
    #####:12379:            address_amqp_value = NULL;
        -:12380:        }
        -:12381:        else
        -:12382:        {
        9:12383:            address_amqp_value = amqpvalue_clone(address_value);
        -:12384:        }
        9:12385:        if (address_amqp_value == NULL)
        -:12386:        {
    #####:12387:            result = MU_FAILURE;
        -:12388:        }
        -:12389:        else
        -:12390:        {
        9:12391:            if (amqpvalue_set_composite_item(source_instance->composite_value, 0, address_amqp_value) != 0)
        -:12392:            {
    #####:12393:                result = MU_FAILURE;
        -:12394:            }
        -:12395:            else
        -:12396:            {
        9:12397:                result = 0;
        -:12398:            }
        -:12399:
        9:12400:            amqpvalue_destroy(address_amqp_value);
        -:12401:        }
        -:12402:    }
        -:12403:
        9:12404:    return result;
        -:12405:}
        -:12406:
    #####:12407:int source_get_durable(SOURCE_HANDLE source, terminus_durability* durable_value)
        -:12408:{
        -:12409:    int result;
        -:12410:
    #####:12411:    if (source == NULL)
        -:12412:    {
    #####:12413:        result = MU_FAILURE;
        -:12414:    }
        -:12415:    else
        -:12416:    {
        -:12417:        uint32_t item_count;
    #####:12418:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12419:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:12420:        {
    #####:12421:            result = MU_FAILURE;
        -:12422:        }
        -:12423:        else
        -:12424:        {
    #####:12425:            if (item_count <= 1)
        -:12426:            {
    #####:12427:                *durable_value = terminus_durability_none;
    #####:12428:                result = 0;
        -:12429:            }
        -:12430:            else
        -:12431:            {
    #####:12432:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 1);
    #####:12433:                if ((item_value == NULL) ||
    #####:12434:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:12435:                {
    #####:12436:                    *durable_value = terminus_durability_none;
    #####:12437:                    result = 0;
        -:12438:                }
        -:12439:                else
        -:12440:                {
    #####:12441:                    int get_single_value_result = amqpvalue_get_terminus_durability(item_value, durable_value);
    #####:12442:                    if (get_single_value_result != 0)
        -:12443:                    {
    #####:12444:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:12445:                        {
    #####:12446:                            result = MU_FAILURE;
        -:12447:                        }
        -:12448:                        else
        -:12449:                        {
    #####:12450:                            *durable_value = terminus_durability_none;
    #####:12451:                            result = 0;
        -:12452:                        }
        -:12453:                    }
        -:12454:                    else
        -:12455:                    {
    #####:12456:                        result = 0;
        -:12457:                    }
        -:12458:                }
        -:12459:            }
        -:12460:        }
        -:12461:    }
        -:12462:
    #####:12463:    return result;
        -:12464:}
        -:12465:
    #####:12466:int source_set_durable(SOURCE_HANDLE source, terminus_durability durable_value)
        -:12467:{
        -:12468:    int result;
        -:12469:
    #####:12470:    if (source == NULL)
        -:12471:    {
    #####:12472:        result = MU_FAILURE;
        -:12473:    }
        -:12474:    else
        -:12475:    {
    #####:12476:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12477:        AMQP_VALUE durable_amqp_value = amqpvalue_create_terminus_durability(durable_value);
    #####:12478:        if (durable_amqp_value == NULL)
        -:12479:        {
    #####:12480:            result = MU_FAILURE;
        -:12481:        }
        -:12482:        else
        -:12483:        {
    #####:12484:            if (amqpvalue_set_composite_item(source_instance->composite_value, 1, durable_amqp_value) != 0)
        -:12485:            {
    #####:12486:                result = MU_FAILURE;
        -:12487:            }
        -:12488:            else
        -:12489:            {
    #####:12490:                result = 0;
        -:12491:            }
        -:12492:
    #####:12493:            amqpvalue_destroy(durable_amqp_value);
        -:12494:        }
        -:12495:    }
        -:12496:
    #####:12497:    return result;
        -:12498:}
        -:12499:
    #####:12500:int source_get_expiry_policy(SOURCE_HANDLE source, terminus_expiry_policy* expiry_policy_value)
        -:12501:{
        -:12502:    int result;
        -:12503:
    #####:12504:    if (source == NULL)
        -:12505:    {
    #####:12506:        result = MU_FAILURE;
        -:12507:    }
        -:12508:    else
        -:12509:    {
        -:12510:        uint32_t item_count;
    #####:12511:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12512:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:12513:        {
    #####:12514:            result = MU_FAILURE;
        -:12515:        }
        -:12516:        else
        -:12517:        {
    #####:12518:            if (item_count <= 2)
        -:12519:            {
    #####:12520:                *expiry_policy_value = terminus_expiry_policy_session_end;
    #####:12521:                result = 0;
        -:12522:            }
        -:12523:            else
        -:12524:            {
    #####:12525:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 2);
    #####:12526:                if ((item_value == NULL) ||
    #####:12527:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:12528:                {
    #####:12529:                    *expiry_policy_value = terminus_expiry_policy_session_end;
    #####:12530:                    result = 0;
        -:12531:                }
        -:12532:                else
        -:12533:                {
    #####:12534:                    int get_single_value_result = amqpvalue_get_terminus_expiry_policy(item_value, expiry_policy_value);
    #####:12535:                    if (get_single_value_result != 0)
        -:12536:                    {
    #####:12537:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:12538:                        {
    #####:12539:                            result = MU_FAILURE;
        -:12540:                        }
        -:12541:                        else
        -:12542:                        {
    #####:12543:                            *expiry_policy_value = terminus_expiry_policy_session_end;
    #####:12544:                            result = 0;
        -:12545:                        }
        -:12546:                    }
        -:12547:                    else
        -:12548:                    {
    #####:12549:                        result = 0;
        -:12550:                    }
        -:12551:                }
        -:12552:            }
        -:12553:        }
        -:12554:    }
        -:12555:
    #####:12556:    return result;
        -:12557:}
        -:12558:
    #####:12559:int source_set_expiry_policy(SOURCE_HANDLE source, terminus_expiry_policy expiry_policy_value)
        -:12560:{
        -:12561:    int result;
        -:12562:
    #####:12563:    if (source == NULL)
        -:12564:    {
    #####:12565:        result = MU_FAILURE;
        -:12566:    }
        -:12567:    else
        -:12568:    {
    #####:12569:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12570:        AMQP_VALUE expiry_policy_amqp_value = amqpvalue_create_terminus_expiry_policy(expiry_policy_value);
    #####:12571:        if (expiry_policy_amqp_value == NULL)
        -:12572:        {
    #####:12573:            result = MU_FAILURE;
        -:12574:        }
        -:12575:        else
        -:12576:        {
    #####:12577:            if (amqpvalue_set_composite_item(source_instance->composite_value, 2, expiry_policy_amqp_value) != 0)
        -:12578:            {
    #####:12579:                result = MU_FAILURE;
        -:12580:            }
        -:12581:            else
        -:12582:            {
    #####:12583:                result = 0;
        -:12584:            }
        -:12585:
    #####:12586:            amqpvalue_destroy(expiry_policy_amqp_value);
        -:12587:        }
        -:12588:    }
        -:12589:
    #####:12590:    return result;
        -:12591:}
        -:12592:
    #####:12593:int source_get_timeout(SOURCE_HANDLE source, seconds* timeout_value)
        -:12594:{
        -:12595:    int result;
        -:12596:
    #####:12597:    if (source == NULL)
        -:12598:    {
    #####:12599:        result = MU_FAILURE;
        -:12600:    }
        -:12601:    else
        -:12602:    {
        -:12603:        uint32_t item_count;
    #####:12604:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12605:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:12606:        {
    #####:12607:            result = MU_FAILURE;
        -:12608:        }
        -:12609:        else
        -:12610:        {
    #####:12611:            if (item_count <= 3)
        -:12612:            {
    #####:12613:                *timeout_value = 0;
    #####:12614:                result = 0;
        -:12615:            }
        -:12616:            else
        -:12617:            {
    #####:12618:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 3);
    #####:12619:                if ((item_value == NULL) ||
    #####:12620:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:12621:                {
    #####:12622:                    *timeout_value = 0;
    #####:12623:                    result = 0;
        -:12624:                }
        -:12625:                else
        -:12626:                {
    #####:12627:                    int get_single_value_result = amqpvalue_get_seconds(item_value, timeout_value);
    #####:12628:                    if (get_single_value_result != 0)
        -:12629:                    {
    #####:12630:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:12631:                        {
    #####:12632:                            result = MU_FAILURE;
        -:12633:                        }
        -:12634:                        else
        -:12635:                        {
    #####:12636:                            *timeout_value = 0;
    #####:12637:                            result = 0;
        -:12638:                        }
        -:12639:                    }
        -:12640:                    else
        -:12641:                    {
    #####:12642:                        result = 0;
        -:12643:                    }
        -:12644:                }
        -:12645:            }
        -:12646:        }
        -:12647:    }
        -:12648:
    #####:12649:    return result;
        -:12650:}
        -:12651:
    #####:12652:int source_set_timeout(SOURCE_HANDLE source, seconds timeout_value)
        -:12653:{
        -:12654:    int result;
        -:12655:
    #####:12656:    if (source == NULL)
        -:12657:    {
    #####:12658:        result = MU_FAILURE;
        -:12659:    }
        -:12660:    else
        -:12661:    {
    #####:12662:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12663:        AMQP_VALUE timeout_amqp_value = amqpvalue_create_seconds(timeout_value);
    #####:12664:        if (timeout_amqp_value == NULL)
        -:12665:        {
    #####:12666:            result = MU_FAILURE;
        -:12667:        }
        -:12668:        else
        -:12669:        {
    #####:12670:            if (amqpvalue_set_composite_item(source_instance->composite_value, 3, timeout_amqp_value) != 0)
        -:12671:            {
    #####:12672:                result = MU_FAILURE;
        -:12673:            }
        -:12674:            else
        -:12675:            {
    #####:12676:                result = 0;
        -:12677:            }
        -:12678:
    #####:12679:            amqpvalue_destroy(timeout_amqp_value);
        -:12680:        }
        -:12681:    }
        -:12682:
    #####:12683:    return result;
        -:12684:}
        -:12685:
    #####:12686:int source_get_dynamic(SOURCE_HANDLE source, bool* dynamic_value)
        -:12687:{
        -:12688:    int result;
        -:12689:
    #####:12690:    if (source == NULL)
        -:12691:    {
    #####:12692:        result = MU_FAILURE;
        -:12693:    }
        -:12694:    else
        -:12695:    {
        -:12696:        uint32_t item_count;
    #####:12697:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12698:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:12699:        {
    #####:12700:            result = MU_FAILURE;
        -:12701:        }
        -:12702:        else
        -:12703:        {
    #####:12704:            if (item_count <= 4)
        -:12705:            {
    #####:12706:                *dynamic_value = false;
    #####:12707:                result = 0;
        -:12708:            }
        -:12709:            else
        -:12710:            {
    #####:12711:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 4);
    #####:12712:                if ((item_value == NULL) ||
    #####:12713:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:12714:                {
    #####:12715:                    *dynamic_value = false;
    #####:12716:                    result = 0;
        -:12717:                }
        -:12718:                else
        -:12719:                {
    #####:12720:                    int get_single_value_result = amqpvalue_get_boolean(item_value, dynamic_value);
    #####:12721:                    if (get_single_value_result != 0)
        -:12722:                    {
    #####:12723:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:12724:                        {
    #####:12725:                            result = MU_FAILURE;
        -:12726:                        }
        -:12727:                        else
        -:12728:                        {
    #####:12729:                            *dynamic_value = false;
    #####:12730:                            result = 0;
        -:12731:                        }
        -:12732:                    }
        -:12733:                    else
        -:12734:                    {
    #####:12735:                        result = 0;
        -:12736:                    }
        -:12737:                }
        -:12738:            }
        -:12739:        }
        -:12740:    }
        -:12741:
    #####:12742:    return result;
        -:12743:}
        -:12744:
    #####:12745:int source_set_dynamic(SOURCE_HANDLE source, bool dynamic_value)
        -:12746:{
        -:12747:    int result;
        -:12748:
    #####:12749:    if (source == NULL)
        -:12750:    {
    #####:12751:        result = MU_FAILURE;
        -:12752:    }
        -:12753:    else
        -:12754:    {
    #####:12755:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12756:        AMQP_VALUE dynamic_amqp_value = amqpvalue_create_boolean(dynamic_value);
    #####:12757:        if (dynamic_amqp_value == NULL)
        -:12758:        {
    #####:12759:            result = MU_FAILURE;
        -:12760:        }
        -:12761:        else
        -:12762:        {
    #####:12763:            if (amqpvalue_set_composite_item(source_instance->composite_value, 4, dynamic_amqp_value) != 0)
        -:12764:            {
    #####:12765:                result = MU_FAILURE;
        -:12766:            }
        -:12767:            else
        -:12768:            {
    #####:12769:                result = 0;
        -:12770:            }
        -:12771:
    #####:12772:            amqpvalue_destroy(dynamic_amqp_value);
        -:12773:        }
        -:12774:    }
        -:12775:
    #####:12776:    return result;
        -:12777:}
        -:12778:
    #####:12779:int source_get_dynamic_node_properties(SOURCE_HANDLE source, node_properties* dynamic_node_properties_value)
        -:12780:{
        -:12781:    int result;
        -:12782:
    #####:12783:    if (source == NULL)
        -:12784:    {
    #####:12785:        result = MU_FAILURE;
        -:12786:    }
        -:12787:    else
        -:12788:    {
        -:12789:        uint32_t item_count;
    #####:12790:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12791:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:12792:        {
    #####:12793:            result = MU_FAILURE;
        -:12794:        }
        -:12795:        else
        -:12796:        {
    #####:12797:            if (item_count <= 5)
        -:12798:            {
    #####:12799:                result = MU_FAILURE;
        -:12800:            }
        -:12801:            else
        -:12802:            {
    #####:12803:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 5);
    #####:12804:                if ((item_value == NULL) ||
    #####:12805:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:12806:                {
    #####:12807:                    result = MU_FAILURE;
        -:12808:                }
        -:12809:                else
        -:12810:                {
    #####:12811:                    int get_single_value_result = amqpvalue_get_node_properties(item_value, dynamic_node_properties_value);
    #####:12812:                    if (get_single_value_result != 0)
        -:12813:                    {
    #####:12814:                        result = MU_FAILURE;
        -:12815:                    }
        -:12816:                    else
        -:12817:                    {
    #####:12818:                        result = 0;
        -:12819:                    }
        -:12820:                }
        -:12821:            }
        -:12822:        }
        -:12823:    }
        -:12824:
    #####:12825:    return result;
        -:12826:}
        -:12827:
    #####:12828:int source_set_dynamic_node_properties(SOURCE_HANDLE source, node_properties dynamic_node_properties_value)
        -:12829:{
        -:12830:    int result;
        -:12831:
    #####:12832:    if (source == NULL)
        -:12833:    {
    #####:12834:        result = MU_FAILURE;
        -:12835:    }
        -:12836:    else
        -:12837:    {
    #####:12838:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12839:        AMQP_VALUE dynamic_node_properties_amqp_value = amqpvalue_create_node_properties(dynamic_node_properties_value);
    #####:12840:        if (dynamic_node_properties_amqp_value == NULL)
        -:12841:        {
    #####:12842:            result = MU_FAILURE;
        -:12843:        }
        -:12844:        else
        -:12845:        {
    #####:12846:            if (amqpvalue_set_composite_item(source_instance->composite_value, 5, dynamic_node_properties_amqp_value) != 0)
        -:12847:            {
    #####:12848:                result = MU_FAILURE;
        -:12849:            }
        -:12850:            else
        -:12851:            {
    #####:12852:                result = 0;
        -:12853:            }
        -:12854:
    #####:12855:            amqpvalue_destroy(dynamic_node_properties_amqp_value);
        -:12856:        }
        -:12857:    }
        -:12858:
    #####:12859:    return result;
        -:12860:}
        -:12861:
    #####:12862:int source_get_distribution_mode(SOURCE_HANDLE source, const char** distribution_mode_value)
        -:12863:{
        -:12864:    int result;
        -:12865:
    #####:12866:    if (source == NULL)
        -:12867:    {
    #####:12868:        result = MU_FAILURE;
        -:12869:    }
        -:12870:    else
        -:12871:    {
        -:12872:        uint32_t item_count;
    #####:12873:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12874:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:12875:        {
    #####:12876:            result = MU_FAILURE;
        -:12877:        }
        -:12878:        else
        -:12879:        {
    #####:12880:            if (item_count <= 6)
        -:12881:            {
    #####:12882:                result = MU_FAILURE;
        -:12883:            }
        -:12884:            else
        -:12885:            {
    #####:12886:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 6);
    #####:12887:                if ((item_value == NULL) ||
    #####:12888:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:12889:                {
    #####:12890:                    result = MU_FAILURE;
        -:12891:                }
        -:12892:                else
        -:12893:                {
    #####:12894:                    int get_single_value_result = amqpvalue_get_symbol(item_value, distribution_mode_value);
    #####:12895:                    if (get_single_value_result != 0)
        -:12896:                    {
    #####:12897:                        result = MU_FAILURE;
        -:12898:                    }
        -:12899:                    else
        -:12900:                    {
    #####:12901:                        result = 0;
        -:12902:                    }
        -:12903:                }
        -:12904:            }
        -:12905:        }
        -:12906:    }
        -:12907:
    #####:12908:    return result;
        -:12909:}
        -:12910:
    #####:12911:int source_set_distribution_mode(SOURCE_HANDLE source, const char* distribution_mode_value)
        -:12912:{
        -:12913:    int result;
        -:12914:
    #####:12915:    if (source == NULL)
        -:12916:    {
    #####:12917:        result = MU_FAILURE;
        -:12918:    }
        -:12919:    else
        -:12920:    {
    #####:12921:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12922:        AMQP_VALUE distribution_mode_amqp_value = amqpvalue_create_symbol(distribution_mode_value);
    #####:12923:        if (distribution_mode_amqp_value == NULL)
        -:12924:        {
    #####:12925:            result = MU_FAILURE;
        -:12926:        }
        -:12927:        else
        -:12928:        {
    #####:12929:            if (amqpvalue_set_composite_item(source_instance->composite_value, 6, distribution_mode_amqp_value) != 0)
        -:12930:            {
    #####:12931:                result = MU_FAILURE;
        -:12932:            }
        -:12933:            else
        -:12934:            {
    #####:12935:                result = 0;
        -:12936:            }
        -:12937:
    #####:12938:            amqpvalue_destroy(distribution_mode_amqp_value);
        -:12939:        }
        -:12940:    }
        -:12941:
    #####:12942:    return result;
        -:12943:}
        -:12944:
    #####:12945:int source_get_filter(SOURCE_HANDLE source, filter_set* filter_value)
        -:12946:{
        -:12947:    int result;
        -:12948:
    #####:12949:    if (source == NULL)
        -:12950:    {
    #####:12951:        result = MU_FAILURE;
        -:12952:    }
        -:12953:    else
        -:12954:    {
        -:12955:        uint32_t item_count;
    #####:12956:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:12957:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:12958:        {
    #####:12959:            result = MU_FAILURE;
        -:12960:        }
        -:12961:        else
        -:12962:        {
    #####:12963:            if (item_count <= 7)
        -:12964:            {
    #####:12965:                result = MU_FAILURE;
        -:12966:            }
        -:12967:            else
        -:12968:            {
    #####:12969:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 7);
    #####:12970:                if ((item_value == NULL) ||
    #####:12971:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:12972:                {
    #####:12973:                    result = MU_FAILURE;
        -:12974:                }
        -:12975:                else
        -:12976:                {
    #####:12977:                    int get_single_value_result = amqpvalue_get_filter_set(item_value, filter_value);
    #####:12978:                    if (get_single_value_result != 0)
        -:12979:                    {
    #####:12980:                        result = MU_FAILURE;
        -:12981:                    }
        -:12982:                    else
        -:12983:                    {
    #####:12984:                        result = 0;
        -:12985:                    }
        -:12986:                }
        -:12987:            }
        -:12988:        }
        -:12989:    }
        -:12990:
    #####:12991:    return result;
        -:12992:}
        -:12993:
    #####:12994:int source_set_filter(SOURCE_HANDLE source, filter_set filter_value)
        -:12995:{
        -:12996:    int result;
        -:12997:
    #####:12998:    if (source == NULL)
        -:12999:    {
    #####:13000:        result = MU_FAILURE;
        -:13001:    }
        -:13002:    else
        -:13003:    {
    #####:13004:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:13005:        AMQP_VALUE filter_amqp_value = amqpvalue_create_filter_set(filter_value);
    #####:13006:        if (filter_amqp_value == NULL)
        -:13007:        {
    #####:13008:            result = MU_FAILURE;
        -:13009:        }
        -:13010:        else
        -:13011:        {
    #####:13012:            if (amqpvalue_set_composite_item(source_instance->composite_value, 7, filter_amqp_value) != 0)
        -:13013:            {
    #####:13014:                result = MU_FAILURE;
        -:13015:            }
        -:13016:            else
        -:13017:            {
    #####:13018:                result = 0;
        -:13019:            }
        -:13020:
    #####:13021:            amqpvalue_destroy(filter_amqp_value);
        -:13022:        }
        -:13023:    }
        -:13024:
    #####:13025:    return result;
        -:13026:}
        -:13027:
    #####:13028:int source_get_default_outcome(SOURCE_HANDLE source, AMQP_VALUE* default_outcome_value)
        -:13029:{
        -:13030:    int result;
        -:13031:
    #####:13032:    if (source == NULL)
        -:13033:    {
    #####:13034:        result = MU_FAILURE;
        -:13035:    }
        -:13036:    else
        -:13037:    {
        -:13038:        uint32_t item_count;
    #####:13039:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:13040:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:13041:        {
    #####:13042:            result = MU_FAILURE;
        -:13043:        }
        -:13044:        else
        -:13045:        {
    #####:13046:            if (item_count <= 8)
        -:13047:            {
    #####:13048:                result = MU_FAILURE;
        -:13049:            }
        -:13050:            else
        -:13051:            {
    #####:13052:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 8);
    #####:13053:                if ((item_value == NULL) ||
    #####:13054:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:13055:                {
    #####:13056:                    result = MU_FAILURE;
        -:13057:                }
        -:13058:                else
        -:13059:                {
    #####:13060:                    *default_outcome_value = item_value;
    #####:13061:                    result = 0;
        -:13062:                }
        -:13063:            }
        -:13064:        }
        -:13065:    }
        -:13066:
    #####:13067:    return result;
        -:13068:}
        -:13069:
    #####:13070:int source_set_default_outcome(SOURCE_HANDLE source, AMQP_VALUE default_outcome_value)
        -:13071:{
        -:13072:    int result;
        -:13073:
    #####:13074:    if (source == NULL)
        -:13075:    {
    #####:13076:        result = MU_FAILURE;
        -:13077:    }
        -:13078:    else
        -:13079:    {
    #####:13080:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
        -:13081:        AMQP_VALUE default_outcome_amqp_value;
    #####:13082:        if (default_outcome_value == NULL)
        -:13083:        {
    #####:13084:            default_outcome_amqp_value = NULL;
        -:13085:        }
        -:13086:        else
        -:13087:        {
    #####:13088:            default_outcome_amqp_value = amqpvalue_clone(default_outcome_value);
        -:13089:        }
    #####:13090:        if (default_outcome_amqp_value == NULL)
        -:13091:        {
    #####:13092:            result = MU_FAILURE;
        -:13093:        }
        -:13094:        else
        -:13095:        {
    #####:13096:            if (amqpvalue_set_composite_item(source_instance->composite_value, 8, default_outcome_amqp_value) != 0)
        -:13097:            {
    #####:13098:                result = MU_FAILURE;
        -:13099:            }
        -:13100:            else
        -:13101:            {
    #####:13102:                result = 0;
        -:13103:            }
        -:13104:
    #####:13105:            amqpvalue_destroy(default_outcome_amqp_value);
        -:13106:        }
        -:13107:    }
        -:13108:
    #####:13109:    return result;
        -:13110:}
        -:13111:
    #####:13112:int source_get_outcomes(SOURCE_HANDLE source, AMQP_VALUE* outcomes_value)
        -:13113:{
        -:13114:    int result;
        -:13115:
    #####:13116:    if (source == NULL)
        -:13117:    {
    #####:13118:        result = MU_FAILURE;
        -:13119:    }
        -:13120:    else
        -:13121:    {
        -:13122:        uint32_t item_count;
    #####:13123:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:13124:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:13125:        {
    #####:13126:            result = MU_FAILURE;
        -:13127:        }
        -:13128:        else
        -:13129:        {
    #####:13130:            if (item_count <= 9)
        -:13131:            {
    #####:13132:                result = MU_FAILURE;
        -:13133:            }
        -:13134:            else
        -:13135:            {
    #####:13136:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 9);
    #####:13137:                if ((item_value == NULL) ||
    #####:13138:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:13139:                {
    #####:13140:                    result = MU_FAILURE;
        -:13141:                }
        -:13142:                else
        -:13143:                {
        -:13144:                    const char* outcomes_single_value;
        -:13145:                    int get_single_value_result;
    #####:13146:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -:13147:                    {
    #####:13148:                        get_single_value_result = amqpvalue_get_symbol(item_value, &outcomes_single_value);
        -:13149:                    }
        -:13150:                    else
        -:13151:                    {
    #####:13152:                        (void)memset((void*)&outcomes_single_value, 0, sizeof(outcomes_single_value));
    #####:13153:                        get_single_value_result = 1;
        -:13154:                    }
        -:13155:
    #####:13156:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, outcomes_value) != 0)) &&
        -:13157:                        (get_single_value_result != 0))
        -:13158:                    {
    #####:13159:                        result = MU_FAILURE;
        -:13160:                    }
        -:13161:                    else
        -:13162:                    {
    #####:13163:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -:13164:                        {
    #####:13165:                            *outcomes_value = amqpvalue_create_array();
    #####:13166:                            if (*outcomes_value == NULL)
        -:13167:                            {
    #####:13168:                                result = MU_FAILURE;
        -:13169:                            }
        -:13170:                            else
        -:13171:                            {
    #####:13172:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(outcomes_single_value);
    #####:13173:                                if (single_amqp_value == NULL)
        -:13174:                                {
    #####:13175:                                    amqpvalue_destroy(*outcomes_value);
    #####:13176:                                    result = MU_FAILURE;
        -:13177:                                }
        -:13178:                                else
        -:13179:                                {
    #####:13180:                                    if (amqpvalue_add_array_item(*outcomes_value, single_amqp_value) != 0)
        -:13181:                                    {
    #####:13182:                                        amqpvalue_destroy(*outcomes_value);
    #####:13183:                                        amqpvalue_destroy(single_amqp_value);
    #####:13184:                                        result = MU_FAILURE;
        -:13185:                                    }
        -:13186:                                    else
        -:13187:                                    {
    #####:13188:                                        if (amqpvalue_set_composite_item(source_instance->composite_value, 9, *outcomes_value) != 0)
        -:13189:                                        {
    #####:13190:                                            amqpvalue_destroy(*outcomes_value);
    #####:13191:                                            result = MU_FAILURE;
        -:13192:                                        }
        -:13193:                                        else
        -:13194:                                        {
    #####:13195:                                            result = 0;
        -:13196:                                        }
        -:13197:                                    }
        -:13198:
    #####:13199:                                    amqpvalue_destroy(single_amqp_value);
        -:13200:                                }
    #####:13201:                                amqpvalue_destroy(*outcomes_value);
        -:13202:                            }
        -:13203:                        }
        -:13204:                        else
        -:13205:                        {
    #####:13206:                            result = 0;
        -:13207:                        }
        -:13208:                    }
        -:13209:                }
        -:13210:            }
        -:13211:        }
        -:13212:    }
        -:13213:
    #####:13214:    return result;
        -:13215:}
        -:13216:
    #####:13217:int source_set_outcomes(SOURCE_HANDLE source, AMQP_VALUE outcomes_value)
        -:13218:{
        -:13219:    int result;
        -:13220:
    #####:13221:    if (source == NULL)
        -:13222:    {
    #####:13223:        result = MU_FAILURE;
        -:13224:    }
        -:13225:    else
        -:13226:    {
    #####:13227:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
        -:13228:        AMQP_VALUE outcomes_amqp_value;
    #####:13229:        if (outcomes_value == NULL)
        -:13230:        {
    #####:13231:            outcomes_amqp_value = NULL;
        -:13232:        }
        -:13233:        else
        -:13234:        {
    #####:13235:            outcomes_amqp_value = amqpvalue_clone(outcomes_value);
        -:13236:        }
    #####:13237:        if (outcomes_amqp_value == NULL)
        -:13238:        {
    #####:13239:            result = MU_FAILURE;
        -:13240:        }
        -:13241:        else
        -:13242:        {
    #####:13243:            if (amqpvalue_set_composite_item(source_instance->composite_value, 9, outcomes_amqp_value) != 0)
        -:13244:            {
    #####:13245:                result = MU_FAILURE;
        -:13246:            }
        -:13247:            else
        -:13248:            {
    #####:13249:                result = 0;
        -:13250:            }
        -:13251:
    #####:13252:            amqpvalue_destroy(outcomes_amqp_value);
        -:13253:        }
        -:13254:    }
        -:13255:
    #####:13256:    return result;
        -:13257:}
        -:13258:
    #####:13259:int source_get_capabilities(SOURCE_HANDLE source, AMQP_VALUE* capabilities_value)
        -:13260:{
        -:13261:    int result;
        -:13262:
    #####:13263:    if (source == NULL)
        -:13264:    {
    #####:13265:        result = MU_FAILURE;
        -:13266:    }
        -:13267:    else
        -:13268:    {
        -:13269:        uint32_t item_count;
    #####:13270:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
    #####:13271:        if (amqpvalue_get_composite_item_count(source_instance->composite_value, &item_count) != 0)
        -:13272:        {
    #####:13273:            result = MU_FAILURE;
        -:13274:        }
        -:13275:        else
        -:13276:        {
    #####:13277:            if (item_count <= 10)
        -:13278:            {
    #####:13279:                result = MU_FAILURE;
        -:13280:            }
        -:13281:            else
        -:13282:            {
    #####:13283:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(source_instance->composite_value, 10);
    #####:13284:                if ((item_value == NULL) ||
    #####:13285:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:13286:                {
    #####:13287:                    result = MU_FAILURE;
        -:13288:                }
        -:13289:                else
        -:13290:                {
        -:13291:                    const char* capabilities_single_value;
        -:13292:                    int get_single_value_result;
    #####:13293:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -:13294:                    {
    #####:13295:                        get_single_value_result = amqpvalue_get_symbol(item_value, &capabilities_single_value);
        -:13296:                    }
        -:13297:                    else
        -:13298:                    {
    #####:13299:                        (void)memset((void*)&capabilities_single_value, 0, sizeof(capabilities_single_value));
    #####:13300:                        get_single_value_result = 1;
        -:13301:                    }
        -:13302:
    #####:13303:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, capabilities_value) != 0)) &&
        -:13304:                        (get_single_value_result != 0))
        -:13305:                    {
    #####:13306:                        result = MU_FAILURE;
        -:13307:                    }
        -:13308:                    else
        -:13309:                    {
    #####:13310:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -:13311:                        {
    #####:13312:                            *capabilities_value = amqpvalue_create_array();
    #####:13313:                            if (*capabilities_value == NULL)
        -:13314:                            {
    #####:13315:                                result = MU_FAILURE;
        -:13316:                            }
        -:13317:                            else
        -:13318:                            {
    #####:13319:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(capabilities_single_value);
    #####:13320:                                if (single_amqp_value == NULL)
        -:13321:                                {
    #####:13322:                                    amqpvalue_destroy(*capabilities_value);
    #####:13323:                                    result = MU_FAILURE;
        -:13324:                                }
        -:13325:                                else
        -:13326:                                {
    #####:13327:                                    if (amqpvalue_add_array_item(*capabilities_value, single_amqp_value) != 0)
        -:13328:                                    {
    #####:13329:                                        amqpvalue_destroy(*capabilities_value);
    #####:13330:                                        amqpvalue_destroy(single_amqp_value);
    #####:13331:                                        result = MU_FAILURE;
        -:13332:                                    }
        -:13333:                                    else
        -:13334:                                    {
    #####:13335:                                        if (amqpvalue_set_composite_item(source_instance->composite_value, 10, *capabilities_value) != 0)
        -:13336:                                        {
    #####:13337:                                            amqpvalue_destroy(*capabilities_value);
    #####:13338:                                            result = MU_FAILURE;
        -:13339:                                        }
        -:13340:                                        else
        -:13341:                                        {
    #####:13342:                                            result = 0;
        -:13343:                                        }
        -:13344:                                    }
        -:13345:
    #####:13346:                                    amqpvalue_destroy(single_amqp_value);
        -:13347:                                }
    #####:13348:                                amqpvalue_destroy(*capabilities_value);
        -:13349:                            }
        -:13350:                        }
        -:13351:                        else
        -:13352:                        {
    #####:13353:                            result = 0;
        -:13354:                        }
        -:13355:                    }
        -:13356:                }
        -:13357:            }
        -:13358:        }
        -:13359:    }
        -:13360:
    #####:13361:    return result;
        -:13362:}
        -:13363:
    #####:13364:int source_set_capabilities(SOURCE_HANDLE source, AMQP_VALUE capabilities_value)
        -:13365:{
        -:13366:    int result;
        -:13367:
    #####:13368:    if (source == NULL)
        -:13369:    {
    #####:13370:        result = MU_FAILURE;
        -:13371:    }
        -:13372:    else
        -:13373:    {
    #####:13374:        SOURCE_INSTANCE* source_instance = (SOURCE_INSTANCE*)source;
        -:13375:        AMQP_VALUE capabilities_amqp_value;
    #####:13376:        if (capabilities_value == NULL)
        -:13377:        {
    #####:13378:            capabilities_amqp_value = NULL;
        -:13379:        }
        -:13380:        else
        -:13381:        {
    #####:13382:            capabilities_amqp_value = amqpvalue_clone(capabilities_value);
        -:13383:        }
    #####:13384:        if (capabilities_amqp_value == NULL)
        -:13385:        {
    #####:13386:            result = MU_FAILURE;
        -:13387:        }
        -:13388:        else
        -:13389:        {
    #####:13390:            if (amqpvalue_set_composite_item(source_instance->composite_value, 10, capabilities_amqp_value) != 0)
        -:13391:            {
    #####:13392:                result = MU_FAILURE;
        -:13393:            }
        -:13394:            else
        -:13395:            {
    #####:13396:                result = 0;
        -:13397:            }
        -:13398:
    #####:13399:            amqpvalue_destroy(capabilities_amqp_value);
        -:13400:        }
        -:13401:    }
        -:13402:
    #####:13403:    return result;
        -:13404:}
        -:13405:
        -:13406:
        -:13407:/* target */
        -:13408:
        -:13409:typedef struct TARGET_INSTANCE_TAG
        -:13410:{
        -:13411:    AMQP_VALUE composite_value;
        -:13412:} TARGET_INSTANCE;
        -:13413:
    #####:13414:static TARGET_HANDLE target_create_internal(void)
        -:13415:{
    #####:13416:    TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)malloc(sizeof(TARGET_INSTANCE));
    #####:13417:    if (target_instance != NULL)
        -:13418:    {
    #####:13419:        target_instance->composite_value = NULL;
        -:13420:    }
        -:13421:
    #####:13422:    return target_instance;
        -:13423:}
        -:13424:
        9:13425:TARGET_HANDLE target_create(void)
        -:13426:{
        9:13427:    TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)malloc(sizeof(TARGET_INSTANCE));
        9:13428:    if (target_instance != NULL)
        -:13429:    {
        9:13430:        target_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(41);
        9:13431:        if (target_instance->composite_value == NULL)
        -:13432:        {
    #####:13433:            free(target_instance);
    #####:13434:            target_instance = NULL;
        -:13435:        }
        -:13436:    }
        -:13437:
        9:13438:    return target_instance;
        -:13439:}
        -:13440:
    #####:13441:TARGET_HANDLE target_clone(TARGET_HANDLE value)
        -:13442:{
    #####:13443:    TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)malloc(sizeof(TARGET_INSTANCE));
    #####:13444:    if (target_instance != NULL)
        -:13445:    {
    #####:13446:        target_instance->composite_value = amqpvalue_clone(((TARGET_INSTANCE*)value)->composite_value);
    #####:13447:        if (target_instance->composite_value == NULL)
        -:13448:        {
    #####:13449:            free(target_instance);
    #####:13450:            target_instance = NULL;
        -:13451:        }
        -:13452:    }
        -:13453:
    #####:13454:    return target_instance;
        -:13455:}
        -:13456:
        9:13457:void target_destroy(TARGET_HANDLE target)
        -:13458:{
        9:13459:    if (target != NULL)
        -:13460:    {
        9:13461:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
        9:13462:        amqpvalue_destroy(target_instance->composite_value);
        9:13463:        free(target_instance);
        -:13464:    }
        9:13465:}
        -:13466:
        9:13467:AMQP_VALUE amqpvalue_create_target(TARGET_HANDLE target)
        -:13468:{
        -:13469:    AMQP_VALUE result;
        -:13470:
        9:13471:    if (target == NULL)
        -:13472:    {
    #####:13473:        result = NULL;
        -:13474:    }
        -:13475:    else
        -:13476:    {
        9:13477:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
        9:13478:        result = amqpvalue_clone(target_instance->composite_value);
        -:13479:    }
        -:13480:
        9:13481:    return result;
        -:13482:}
        -:13483:
    #####:13484:bool is_target_type_by_descriptor(AMQP_VALUE descriptor)
        -:13485:{
        -:13486:    bool result;
        -:13487:
        -:13488:    uint64_t descriptor_ulong;
    #####:13489:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:13490:        (descriptor_ulong == 41))
        -:13491:    {
    #####:13492:        result = true;
        -:13493:    }
        -:13494:    else
        -:13495:    {
    #####:13496:        result = false;
        -:13497:    }
        -:13498:
    #####:13499:    return result;
        -:13500:}
        -:13501:
        -:13502:
    #####:13503:int amqpvalue_get_target(AMQP_VALUE value, TARGET_HANDLE* target_handle)
        -:13504:{
        -:13505:    int result;
    #####:13506:    TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target_create_internal();
    #####:13507:    *target_handle = target_instance;
    #####:13508:    if (*target_handle == NULL)
        -:13509:    {
    #####:13510:        result = MU_FAILURE;
        -:13511:    }
        -:13512:    else
        -:13513:    {
    #####:13514:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:13515:        if (list_value == NULL)
        -:13516:        {
    #####:13517:            target_destroy(*target_handle);
    #####:13518:            result = MU_FAILURE;
        -:13519:        }
        -:13520:        else
        -:13521:        {
        -:13522:            uint32_t list_item_count;
    #####:13523:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:13524:            {
    #####:13525:                result = MU_FAILURE;
        -:13526:            }
        -:13527:            else
        -:13528:            {
        -:13529:                do
        -:13530:                {
        -:13531:                    AMQP_VALUE item_value;
        -:13532:                    /* address */
    #####:13533:                    if (list_item_count > 0)
        -:13534:                    {
    #####:13535:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:13536:                        if (item_value == NULL)
        -:13537:                        {
        -:13538:                            /* do nothing */
        -:13539:                        }
        -:13540:                        else
        -:13541:                        {
    #####:13542:                            amqpvalue_destroy(item_value);
        -:13543:                        }
        -:13544:                    }
        -:13545:                    /* durable */
    #####:13546:                    if (list_item_count > 1)
        -:13547:                    {
    #####:13548:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:13549:                        if (item_value == NULL)
        -:13550:                        {
        -:13551:                            /* do nothing */
        -:13552:                        }
        -:13553:                        else
        -:13554:                        {
    #####:13555:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:13556:                            {
        -:13557:                                /* no error, field is not mandatory */
        -:13558:                            }
        -:13559:                            else
        -:13560:                            {
        -:13561:                                terminus_durability durable;
    #####:13562:                                if (amqpvalue_get_terminus_durability(item_value, &durable) != 0)
        -:13563:                                {
    #####:13564:                                    amqpvalue_destroy(item_value);
    #####:13565:                                    target_destroy(*target_handle);
    #####:13566:                                    result = MU_FAILURE;
    #####:13567:                                    break;
        -:13568:                                }
        -:13569:                            }
        -:13570:
    #####:13571:                            amqpvalue_destroy(item_value);
        -:13572:                        }
        -:13573:                    }
        -:13574:                    /* expiry-policy */
    #####:13575:                    if (list_item_count > 2)
        -:13576:                    {
    #####:13577:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####:13578:                        if (item_value == NULL)
        -:13579:                        {
        -:13580:                            /* do nothing */
        -:13581:                        }
        -:13582:                        else
        -:13583:                        {
    #####:13584:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:13585:                            {
        -:13586:                                /* no error, field is not mandatory */
        -:13587:                            }
        -:13588:                            else
        -:13589:                            {
        -:13590:                                terminus_expiry_policy expiry_policy;
    #####:13591:                                if (amqpvalue_get_terminus_expiry_policy(item_value, &expiry_policy) != 0)
        -:13592:                                {
    #####:13593:                                    amqpvalue_destroy(item_value);
    #####:13594:                                    target_destroy(*target_handle);
    #####:13595:                                    result = MU_FAILURE;
    #####:13596:                                    break;
        -:13597:                                }
        -:13598:                            }
        -:13599:
    #####:13600:                            amqpvalue_destroy(item_value);
        -:13601:                        }
        -:13602:                    }
        -:13603:                    /* timeout */
    #####:13604:                    if (list_item_count > 3)
        -:13605:                    {
    #####:13606:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####:13607:                        if (item_value == NULL)
        -:13608:                        {
        -:13609:                            /* do nothing */
        -:13610:                        }
        -:13611:                        else
        -:13612:                        {
    #####:13613:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:13614:                            {
        -:13615:                                /* no error, field is not mandatory */
        -:13616:                            }
        -:13617:                            else
        -:13618:                            {
        -:13619:                                seconds timeout;
    #####:13620:                                if (amqpvalue_get_seconds(item_value, &timeout) != 0)
        -:13621:                                {
    #####:13622:                                    amqpvalue_destroy(item_value);
    #####:13623:                                    target_destroy(*target_handle);
    #####:13624:                                    result = MU_FAILURE;
    #####:13625:                                    break;
        -:13626:                                }
        -:13627:                            }
        -:13628:
    #####:13629:                            amqpvalue_destroy(item_value);
        -:13630:                        }
        -:13631:                    }
        -:13632:                    /* dynamic */
    #####:13633:                    if (list_item_count > 4)
        -:13634:                    {
    #####:13635:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####:13636:                        if (item_value == NULL)
        -:13637:                        {
        -:13638:                            /* do nothing */
        -:13639:                        }
        -:13640:                        else
        -:13641:                        {
    #####:13642:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:13643:                            {
        -:13644:                                /* no error, field is not mandatory */
        -:13645:                            }
        -:13646:                            else
        -:13647:                            {
        -:13648:                                bool dynamic;
    #####:13649:                                if (amqpvalue_get_boolean(item_value, &dynamic) != 0)
        -:13650:                                {
    #####:13651:                                    amqpvalue_destroy(item_value);
    #####:13652:                                    target_destroy(*target_handle);
    #####:13653:                                    result = MU_FAILURE;
    #####:13654:                                    break;
        -:13655:                                }
        -:13656:                            }
        -:13657:
    #####:13658:                            amqpvalue_destroy(item_value);
        -:13659:                        }
        -:13660:                    }
        -:13661:                    /* dynamic-node-properties */
    #####:13662:                    if (list_item_count > 5)
        -:13663:                    {
    #####:13664:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####:13665:                        if (item_value == NULL)
        -:13666:                        {
        -:13667:                            /* do nothing */
        -:13668:                        }
        -:13669:                        else
        -:13670:                        {
    #####:13671:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:13672:                            {
        -:13673:                                /* no error, field is not mandatory */
        -:13674:                            }
        -:13675:                            else
        -:13676:                            {
        -:13677:                                node_properties dynamic_node_properties;
    #####:13678:                                if (amqpvalue_get_node_properties(item_value, &dynamic_node_properties) != 0)
        -:13679:                                {
    #####:13680:                                    amqpvalue_destroy(item_value);
    #####:13681:                                    target_destroy(*target_handle);
    #####:13682:                                    result = MU_FAILURE;
    #####:13683:                                    break;
        -:13684:                                }
        -:13685:                            }
        -:13686:
    #####:13687:                            amqpvalue_destroy(item_value);
        -:13688:                        }
        -:13689:                    }
        -:13690:                    /* capabilities */
    #####:13691:                    if (list_item_count > 6)
        -:13692:                    {
    #####:13693:                        item_value = amqpvalue_get_list_item(list_value, 6);
    #####:13694:                        if (item_value == NULL)
        -:13695:                        {
        -:13696:                            /* do nothing */
        -:13697:                        }
        -:13698:                        else
        -:13699:                        {
    #####:13700:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:13701:                            {
        -:13702:                                /* no error, field is not mandatory */
        -:13703:                            }
        -:13704:                            else
        -:13705:                            {
    #####:13706:                                const char* capabilities = NULL;
        -:13707:                                AMQP_VALUE capabilities_array;
    #####:13708:                                if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, &capabilities_array) != 0)) &&
    #####:13709:                                    (amqpvalue_get_symbol(item_value, &capabilities) != 0))
        -:13710:                                {
    #####:13711:                                    amqpvalue_destroy(item_value);
    #####:13712:                                    target_destroy(*target_handle);
    #####:13713:                                    result = MU_FAILURE;
    #####:13714:                                    break;
        -:13715:                                }
        -:13716:                            }
        -:13717:
    #####:13718:                            amqpvalue_destroy(item_value);
        -:13719:                        }
        -:13720:                    }
        -:13721:
    #####:13722:                    target_instance->composite_value = amqpvalue_clone(value);
        -:13723:
    #####:13724:                    result = 0;
        -:13725:                } while((void)0,0);
        -:13726:            }
        -:13727:        }
        -:13728:    }
        -:13729:
    #####:13730:    return result;
        -:13731:}
        -:13732:
    #####:13733:int target_get_address(TARGET_HANDLE target, AMQP_VALUE* address_value)
        -:13734:{
        -:13735:    int result;
        -:13736:
    #####:13737:    if (target == NULL)
        -:13738:    {
    #####:13739:        result = MU_FAILURE;
        -:13740:    }
        -:13741:    else
        -:13742:    {
        -:13743:        uint32_t item_count;
    #####:13744:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:13745:        if (amqpvalue_get_composite_item_count(target_instance->composite_value, &item_count) != 0)
        -:13746:        {
    #####:13747:            result = MU_FAILURE;
        -:13748:        }
        -:13749:        else
        -:13750:        {
    #####:13751:            if (item_count <= 0)
        -:13752:            {
    #####:13753:                result = MU_FAILURE;
        -:13754:            }
        -:13755:            else
        -:13756:            {
    #####:13757:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(target_instance->composite_value, 0);
    #####:13758:                if ((item_value == NULL) ||
    #####:13759:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:13760:                {
    #####:13761:                    result = MU_FAILURE;
        -:13762:                }
        -:13763:                else
        -:13764:                {
    #####:13765:                    *address_value = item_value;
    #####:13766:                    result = 0;
        -:13767:                }
        -:13768:            }
        -:13769:        }
        -:13770:    }
        -:13771:
    #####:13772:    return result;
        -:13773:}
        -:13774:
        9:13775:int target_set_address(TARGET_HANDLE target, AMQP_VALUE address_value)
        -:13776:{
        -:13777:    int result;
        -:13778:
        9:13779:    if (target == NULL)
        -:13780:    {
    #####:13781:        result = MU_FAILURE;
        -:13782:    }
        -:13783:    else
        -:13784:    {
        9:13785:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
        -:13786:        AMQP_VALUE address_amqp_value;
        9:13787:        if (address_value == NULL)
        -:13788:        {
    #####:13789:            address_amqp_value = NULL;
        -:13790:        }
        -:13791:        else
        -:13792:        {
        9:13793:            address_amqp_value = amqpvalue_clone(address_value);
        -:13794:        }
        9:13795:        if (address_amqp_value == NULL)
        -:13796:        {
    #####:13797:            result = MU_FAILURE;
        -:13798:        }
        -:13799:        else
        -:13800:        {
        9:13801:            if (amqpvalue_set_composite_item(target_instance->composite_value, 0, address_amqp_value) != 0)
        -:13802:            {
    #####:13803:                result = MU_FAILURE;
        -:13804:            }
        -:13805:            else
        -:13806:            {
        9:13807:                result = 0;
        -:13808:            }
        -:13809:
        9:13810:            amqpvalue_destroy(address_amqp_value);
        -:13811:        }
        -:13812:    }
        -:13813:
        9:13814:    return result;
        -:13815:}
        -:13816:
    #####:13817:int target_get_durable(TARGET_HANDLE target, terminus_durability* durable_value)
        -:13818:{
        -:13819:    int result;
        -:13820:
    #####:13821:    if (target == NULL)
        -:13822:    {
    #####:13823:        result = MU_FAILURE;
        -:13824:    }
        -:13825:    else
        -:13826:    {
        -:13827:        uint32_t item_count;
    #####:13828:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:13829:        if (amqpvalue_get_composite_item_count(target_instance->composite_value, &item_count) != 0)
        -:13830:        {
    #####:13831:            result = MU_FAILURE;
        -:13832:        }
        -:13833:        else
        -:13834:        {
    #####:13835:            if (item_count <= 1)
        -:13836:            {
    #####:13837:                *durable_value = terminus_durability_none;
    #####:13838:                result = 0;
        -:13839:            }
        -:13840:            else
        -:13841:            {
    #####:13842:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(target_instance->composite_value, 1);
    #####:13843:                if ((item_value == NULL) ||
    #####:13844:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:13845:                {
    #####:13846:                    *durable_value = terminus_durability_none;
    #####:13847:                    result = 0;
        -:13848:                }
        -:13849:                else
        -:13850:                {
    #####:13851:                    int get_single_value_result = amqpvalue_get_terminus_durability(item_value, durable_value);
    #####:13852:                    if (get_single_value_result != 0)
        -:13853:                    {
    #####:13854:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:13855:                        {
    #####:13856:                            result = MU_FAILURE;
        -:13857:                        }
        -:13858:                        else
        -:13859:                        {
    #####:13860:                            *durable_value = terminus_durability_none;
    #####:13861:                            result = 0;
        -:13862:                        }
        -:13863:                    }
        -:13864:                    else
        -:13865:                    {
    #####:13866:                        result = 0;
        -:13867:                    }
        -:13868:                }
        -:13869:            }
        -:13870:        }
        -:13871:    }
        -:13872:
    #####:13873:    return result;
        -:13874:}
        -:13875:
    #####:13876:int target_set_durable(TARGET_HANDLE target, terminus_durability durable_value)
        -:13877:{
        -:13878:    int result;
        -:13879:
    #####:13880:    if (target == NULL)
        -:13881:    {
    #####:13882:        result = MU_FAILURE;
        -:13883:    }
        -:13884:    else
        -:13885:    {
    #####:13886:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:13887:        AMQP_VALUE durable_amqp_value = amqpvalue_create_terminus_durability(durable_value);
    #####:13888:        if (durable_amqp_value == NULL)
        -:13889:        {
    #####:13890:            result = MU_FAILURE;
        -:13891:        }
        -:13892:        else
        -:13893:        {
    #####:13894:            if (amqpvalue_set_composite_item(target_instance->composite_value, 1, durable_amqp_value) != 0)
        -:13895:            {
    #####:13896:                result = MU_FAILURE;
        -:13897:            }
        -:13898:            else
        -:13899:            {
    #####:13900:                result = 0;
        -:13901:            }
        -:13902:
    #####:13903:            amqpvalue_destroy(durable_amqp_value);
        -:13904:        }
        -:13905:    }
        -:13906:
    #####:13907:    return result;
        -:13908:}
        -:13909:
    #####:13910:int target_get_expiry_policy(TARGET_HANDLE target, terminus_expiry_policy* expiry_policy_value)
        -:13911:{
        -:13912:    int result;
        -:13913:
    #####:13914:    if (target == NULL)
        -:13915:    {
    #####:13916:        result = MU_FAILURE;
        -:13917:    }
        -:13918:    else
        -:13919:    {
        -:13920:        uint32_t item_count;
    #####:13921:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:13922:        if (amqpvalue_get_composite_item_count(target_instance->composite_value, &item_count) != 0)
        -:13923:        {
    #####:13924:            result = MU_FAILURE;
        -:13925:        }
        -:13926:        else
        -:13927:        {
    #####:13928:            if (item_count <= 2)
        -:13929:            {
    #####:13930:                *expiry_policy_value = terminus_expiry_policy_session_end;
    #####:13931:                result = 0;
        -:13932:            }
        -:13933:            else
        -:13934:            {
    #####:13935:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(target_instance->composite_value, 2);
    #####:13936:                if ((item_value == NULL) ||
    #####:13937:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:13938:                {
    #####:13939:                    *expiry_policy_value = terminus_expiry_policy_session_end;
    #####:13940:                    result = 0;
        -:13941:                }
        -:13942:                else
        -:13943:                {
    #####:13944:                    int get_single_value_result = amqpvalue_get_terminus_expiry_policy(item_value, expiry_policy_value);
    #####:13945:                    if (get_single_value_result != 0)
        -:13946:                    {
    #####:13947:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:13948:                        {
    #####:13949:                            result = MU_FAILURE;
        -:13950:                        }
        -:13951:                        else
        -:13952:                        {
    #####:13953:                            *expiry_policy_value = terminus_expiry_policy_session_end;
    #####:13954:                            result = 0;
        -:13955:                        }
        -:13956:                    }
        -:13957:                    else
        -:13958:                    {
    #####:13959:                        result = 0;
        -:13960:                    }
        -:13961:                }
        -:13962:            }
        -:13963:        }
        -:13964:    }
        -:13965:
    #####:13966:    return result;
        -:13967:}
        -:13968:
    #####:13969:int target_set_expiry_policy(TARGET_HANDLE target, terminus_expiry_policy expiry_policy_value)
        -:13970:{
        -:13971:    int result;
        -:13972:
    #####:13973:    if (target == NULL)
        -:13974:    {
    #####:13975:        result = MU_FAILURE;
        -:13976:    }
        -:13977:    else
        -:13978:    {
    #####:13979:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:13980:        AMQP_VALUE expiry_policy_amqp_value = amqpvalue_create_terminus_expiry_policy(expiry_policy_value);
    #####:13981:        if (expiry_policy_amqp_value == NULL)
        -:13982:        {
    #####:13983:            result = MU_FAILURE;
        -:13984:        }
        -:13985:        else
        -:13986:        {
    #####:13987:            if (amqpvalue_set_composite_item(target_instance->composite_value, 2, expiry_policy_amqp_value) != 0)
        -:13988:            {
    #####:13989:                result = MU_FAILURE;
        -:13990:            }
        -:13991:            else
        -:13992:            {
    #####:13993:                result = 0;
        -:13994:            }
        -:13995:
    #####:13996:            amqpvalue_destroy(expiry_policy_amqp_value);
        -:13997:        }
        -:13998:    }
        -:13999:
    #####:14000:    return result;
        -:14001:}
        -:14002:
    #####:14003:int target_get_timeout(TARGET_HANDLE target, seconds* timeout_value)
        -:14004:{
        -:14005:    int result;
        -:14006:
    #####:14007:    if (target == NULL)
        -:14008:    {
    #####:14009:        result = MU_FAILURE;
        -:14010:    }
        -:14011:    else
        -:14012:    {
        -:14013:        uint32_t item_count;
    #####:14014:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:14015:        if (amqpvalue_get_composite_item_count(target_instance->composite_value, &item_count) != 0)
        -:14016:        {
    #####:14017:            result = MU_FAILURE;
        -:14018:        }
        -:14019:        else
        -:14020:        {
    #####:14021:            if (item_count <= 3)
        -:14022:            {
    #####:14023:                *timeout_value = 0;
    #####:14024:                result = 0;
        -:14025:            }
        -:14026:            else
        -:14027:            {
    #####:14028:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(target_instance->composite_value, 3);
    #####:14029:                if ((item_value == NULL) ||
    #####:14030:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:14031:                {
    #####:14032:                    *timeout_value = 0;
    #####:14033:                    result = 0;
        -:14034:                }
        -:14035:                else
        -:14036:                {
    #####:14037:                    int get_single_value_result = amqpvalue_get_seconds(item_value, timeout_value);
    #####:14038:                    if (get_single_value_result != 0)
        -:14039:                    {
    #####:14040:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:14041:                        {
    #####:14042:                            result = MU_FAILURE;
        -:14043:                        }
        -:14044:                        else
        -:14045:                        {
    #####:14046:                            *timeout_value = 0;
    #####:14047:                            result = 0;
        -:14048:                        }
        -:14049:                    }
        -:14050:                    else
        -:14051:                    {
    #####:14052:                        result = 0;
        -:14053:                    }
        -:14054:                }
        -:14055:            }
        -:14056:        }
        -:14057:    }
        -:14058:
    #####:14059:    return result;
        -:14060:}
        -:14061:
    #####:14062:int target_set_timeout(TARGET_HANDLE target, seconds timeout_value)
        -:14063:{
        -:14064:    int result;
        -:14065:
    #####:14066:    if (target == NULL)
        -:14067:    {
    #####:14068:        result = MU_FAILURE;
        -:14069:    }
        -:14070:    else
        -:14071:    {
    #####:14072:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:14073:        AMQP_VALUE timeout_amqp_value = amqpvalue_create_seconds(timeout_value);
    #####:14074:        if (timeout_amqp_value == NULL)
        -:14075:        {
    #####:14076:            result = MU_FAILURE;
        -:14077:        }
        -:14078:        else
        -:14079:        {
    #####:14080:            if (amqpvalue_set_composite_item(target_instance->composite_value, 3, timeout_amqp_value) != 0)
        -:14081:            {
    #####:14082:                result = MU_FAILURE;
        -:14083:            }
        -:14084:            else
        -:14085:            {
    #####:14086:                result = 0;
        -:14087:            }
        -:14088:
    #####:14089:            amqpvalue_destroy(timeout_amqp_value);
        -:14090:        }
        -:14091:    }
        -:14092:
    #####:14093:    return result;
        -:14094:}
        -:14095:
    #####:14096:int target_get_dynamic(TARGET_HANDLE target, bool* dynamic_value)
        -:14097:{
        -:14098:    int result;
        -:14099:
    #####:14100:    if (target == NULL)
        -:14101:    {
    #####:14102:        result = MU_FAILURE;
        -:14103:    }
        -:14104:    else
        -:14105:    {
        -:14106:        uint32_t item_count;
    #####:14107:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:14108:        if (amqpvalue_get_composite_item_count(target_instance->composite_value, &item_count) != 0)
        -:14109:        {
    #####:14110:            result = MU_FAILURE;
        -:14111:        }
        -:14112:        else
        -:14113:        {
    #####:14114:            if (item_count <= 4)
        -:14115:            {
    #####:14116:                *dynamic_value = false;
    #####:14117:                result = 0;
        -:14118:            }
        -:14119:            else
        -:14120:            {
    #####:14121:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(target_instance->composite_value, 4);
    #####:14122:                if ((item_value == NULL) ||
    #####:14123:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:14124:                {
    #####:14125:                    *dynamic_value = false;
    #####:14126:                    result = 0;
        -:14127:                }
        -:14128:                else
        -:14129:                {
    #####:14130:                    int get_single_value_result = amqpvalue_get_boolean(item_value, dynamic_value);
    #####:14131:                    if (get_single_value_result != 0)
        -:14132:                    {
    #####:14133:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:14134:                        {
    #####:14135:                            result = MU_FAILURE;
        -:14136:                        }
        -:14137:                        else
        -:14138:                        {
    #####:14139:                            *dynamic_value = false;
    #####:14140:                            result = 0;
        -:14141:                        }
        -:14142:                    }
        -:14143:                    else
        -:14144:                    {
    #####:14145:                        result = 0;
        -:14146:                    }
        -:14147:                }
        -:14148:            }
        -:14149:        }
        -:14150:    }
        -:14151:
    #####:14152:    return result;
        -:14153:}
        -:14154:
    #####:14155:int target_set_dynamic(TARGET_HANDLE target, bool dynamic_value)
        -:14156:{
        -:14157:    int result;
        -:14158:
    #####:14159:    if (target == NULL)
        -:14160:    {
    #####:14161:        result = MU_FAILURE;
        -:14162:    }
        -:14163:    else
        -:14164:    {
    #####:14165:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:14166:        AMQP_VALUE dynamic_amqp_value = amqpvalue_create_boolean(dynamic_value);
    #####:14167:        if (dynamic_amqp_value == NULL)
        -:14168:        {
    #####:14169:            result = MU_FAILURE;
        -:14170:        }
        -:14171:        else
        -:14172:        {
    #####:14173:            if (amqpvalue_set_composite_item(target_instance->composite_value, 4, dynamic_amqp_value) != 0)
        -:14174:            {
    #####:14175:                result = MU_FAILURE;
        -:14176:            }
        -:14177:            else
        -:14178:            {
    #####:14179:                result = 0;
        -:14180:            }
        -:14181:
    #####:14182:            amqpvalue_destroy(dynamic_amqp_value);
        -:14183:        }
        -:14184:    }
        -:14185:
    #####:14186:    return result;
        -:14187:}
        -:14188:
    #####:14189:int target_get_dynamic_node_properties(TARGET_HANDLE target, node_properties* dynamic_node_properties_value)
        -:14190:{
        -:14191:    int result;
        -:14192:
    #####:14193:    if (target == NULL)
        -:14194:    {
    #####:14195:        result = MU_FAILURE;
        -:14196:    }
        -:14197:    else
        -:14198:    {
        -:14199:        uint32_t item_count;
    #####:14200:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:14201:        if (amqpvalue_get_composite_item_count(target_instance->composite_value, &item_count) != 0)
        -:14202:        {
    #####:14203:            result = MU_FAILURE;
        -:14204:        }
        -:14205:        else
        -:14206:        {
    #####:14207:            if (item_count <= 5)
        -:14208:            {
    #####:14209:                result = MU_FAILURE;
        -:14210:            }
        -:14211:            else
        -:14212:            {
    #####:14213:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(target_instance->composite_value, 5);
    #####:14214:                if ((item_value == NULL) ||
    #####:14215:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:14216:                {
    #####:14217:                    result = MU_FAILURE;
        -:14218:                }
        -:14219:                else
        -:14220:                {
    #####:14221:                    int get_single_value_result = amqpvalue_get_node_properties(item_value, dynamic_node_properties_value);
    #####:14222:                    if (get_single_value_result != 0)
        -:14223:                    {
    #####:14224:                        result = MU_FAILURE;
        -:14225:                    }
        -:14226:                    else
        -:14227:                    {
    #####:14228:                        result = 0;
        -:14229:                    }
        -:14230:                }
        -:14231:            }
        -:14232:        }
        -:14233:    }
        -:14234:
    #####:14235:    return result;
        -:14236:}
        -:14237:
    #####:14238:int target_set_dynamic_node_properties(TARGET_HANDLE target, node_properties dynamic_node_properties_value)
        -:14239:{
        -:14240:    int result;
        -:14241:
    #####:14242:    if (target == NULL)
        -:14243:    {
    #####:14244:        result = MU_FAILURE;
        -:14245:    }
        -:14246:    else
        -:14247:    {
    #####:14248:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:14249:        AMQP_VALUE dynamic_node_properties_amqp_value = amqpvalue_create_node_properties(dynamic_node_properties_value);
    #####:14250:        if (dynamic_node_properties_amqp_value == NULL)
        -:14251:        {
    #####:14252:            result = MU_FAILURE;
        -:14253:        }
        -:14254:        else
        -:14255:        {
    #####:14256:            if (amqpvalue_set_composite_item(target_instance->composite_value, 5, dynamic_node_properties_amqp_value) != 0)
        -:14257:            {
    #####:14258:                result = MU_FAILURE;
        -:14259:            }
        -:14260:            else
        -:14261:            {
    #####:14262:                result = 0;
        -:14263:            }
        -:14264:
    #####:14265:            amqpvalue_destroy(dynamic_node_properties_amqp_value);
        -:14266:        }
        -:14267:    }
        -:14268:
    #####:14269:    return result;
        -:14270:}
        -:14271:
    #####:14272:int target_get_capabilities(TARGET_HANDLE target, AMQP_VALUE* capabilities_value)
        -:14273:{
        -:14274:    int result;
        -:14275:
    #####:14276:    if (target == NULL)
        -:14277:    {
    #####:14278:        result = MU_FAILURE;
        -:14279:    }
        -:14280:    else
        -:14281:    {
        -:14282:        uint32_t item_count;
    #####:14283:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
    #####:14284:        if (amqpvalue_get_composite_item_count(target_instance->composite_value, &item_count) != 0)
        -:14285:        {
    #####:14286:            result = MU_FAILURE;
        -:14287:        }
        -:14288:        else
        -:14289:        {
    #####:14290:            if (item_count <= 6)
        -:14291:            {
    #####:14292:                result = MU_FAILURE;
        -:14293:            }
        -:14294:            else
        -:14295:            {
    #####:14296:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(target_instance->composite_value, 6);
    #####:14297:                if ((item_value == NULL) ||
    #####:14298:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:14299:                {
    #####:14300:                    result = MU_FAILURE;
        -:14301:                }
        -:14302:                else
        -:14303:                {
        -:14304:                    const char* capabilities_single_value;
        -:14305:                    int get_single_value_result;
    #####:14306:                    if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -:14307:                    {
    #####:14308:                        get_single_value_result = amqpvalue_get_symbol(item_value, &capabilities_single_value);
        -:14309:                    }
        -:14310:                    else
        -:14311:                    {
    #####:14312:                        (void)memset((void*)&capabilities_single_value, 0, sizeof(capabilities_single_value));
    #####:14313:                        get_single_value_result = 1;
        -:14314:                    }
        -:14315:
    #####:14316:                    if (((amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY) || (amqpvalue_get_array(item_value, capabilities_value) != 0)) &&
        -:14317:                        (get_single_value_result != 0))
        -:14318:                    {
    #####:14319:                        result = MU_FAILURE;
        -:14320:                    }
        -:14321:                    else
        -:14322:                    {
    #####:14323:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_ARRAY)
        -:14324:                        {
    #####:14325:                            *capabilities_value = amqpvalue_create_array();
    #####:14326:                            if (*capabilities_value == NULL)
        -:14327:                            {
    #####:14328:                                result = MU_FAILURE;
        -:14329:                            }
        -:14330:                            else
        -:14331:                            {
    #####:14332:                                AMQP_VALUE single_amqp_value = amqpvalue_create_symbol(capabilities_single_value);
    #####:14333:                                if (single_amqp_value == NULL)
        -:14334:                                {
    #####:14335:                                    amqpvalue_destroy(*capabilities_value);
    #####:14336:                                    result = MU_FAILURE;
        -:14337:                                }
        -:14338:                                else
        -:14339:                                {
    #####:14340:                                    if (amqpvalue_add_array_item(*capabilities_value, single_amqp_value) != 0)
        -:14341:                                    {
    #####:14342:                                        amqpvalue_destroy(*capabilities_value);
    #####:14343:                                        amqpvalue_destroy(single_amqp_value);
    #####:14344:                                        result = MU_FAILURE;
        -:14345:                                    }
        -:14346:                                    else
        -:14347:                                    {
    #####:14348:                                        if (amqpvalue_set_composite_item(target_instance->composite_value, 6, *capabilities_value) != 0)
        -:14349:                                        {
    #####:14350:                                            amqpvalue_destroy(*capabilities_value);
    #####:14351:                                            result = MU_FAILURE;
        -:14352:                                        }
        -:14353:                                        else
        -:14354:                                        {
    #####:14355:                                            result = 0;
        -:14356:                                        }
        -:14357:                                    }
        -:14358:
    #####:14359:                                    amqpvalue_destroy(single_amqp_value);
        -:14360:                                }
    #####:14361:                                amqpvalue_destroy(*capabilities_value);
        -:14362:                            }
        -:14363:                        }
        -:14364:                        else
        -:14365:                        {
    #####:14366:                            result = 0;
        -:14367:                        }
        -:14368:                    }
        -:14369:                }
        -:14370:            }
        -:14371:        }
        -:14372:    }
        -:14373:
    #####:14374:    return result;
        -:14375:}
        -:14376:
    #####:14377:int target_set_capabilities(TARGET_HANDLE target, AMQP_VALUE capabilities_value)
        -:14378:{
        -:14379:    int result;
        -:14380:
    #####:14381:    if (target == NULL)
        -:14382:    {
    #####:14383:        result = MU_FAILURE;
        -:14384:    }
        -:14385:    else
        -:14386:    {
    #####:14387:        TARGET_INSTANCE* target_instance = (TARGET_INSTANCE*)target;
        -:14388:        AMQP_VALUE capabilities_amqp_value;
    #####:14389:        if (capabilities_value == NULL)
        -:14390:        {
    #####:14391:            capabilities_amqp_value = NULL;
        -:14392:        }
        -:14393:        else
        -:14394:        {
    #####:14395:            capabilities_amqp_value = amqpvalue_clone(capabilities_value);
        -:14396:        }
    #####:14397:        if (capabilities_amqp_value == NULL)
        -:14398:        {
    #####:14399:            result = MU_FAILURE;
        -:14400:        }
        -:14401:        else
        -:14402:        {
    #####:14403:            if (amqpvalue_set_composite_item(target_instance->composite_value, 6, capabilities_amqp_value) != 0)
        -:14404:            {
    #####:14405:                result = MU_FAILURE;
        -:14406:            }
        -:14407:            else
        -:14408:            {
    #####:14409:                result = 0;
        -:14410:            }
        -:14411:
    #####:14412:            amqpvalue_destroy(capabilities_amqp_value);
        -:14413:        }
        -:14414:    }
        -:14415:
    #####:14416:    return result;
        -:14417:}
        -:14418:
        -:14419:
        -:14420:/* annotations */
        -:14421:
    #####:14422:AMQP_VALUE amqpvalue_create_annotations(AMQP_VALUE value)
        -:14423:{
    #####:14424:    return amqpvalue_clone(value);
        -:14425:}
        -:14426:
        -:14427:/* message-id-ulong */
        -:14428:
    #####:14429:AMQP_VALUE amqpvalue_create_message_id_ulong(message_id_ulong value)
        -:14430:{
    #####:14431:    return amqpvalue_create_ulong(value);
        -:14432:}
        -:14433:
        -:14434:/* message-id-uuid */
        -:14435:
    #####:14436:AMQP_VALUE amqpvalue_create_message_id_uuid(message_id_uuid value)
        -:14437:{
    #####:14438:    return amqpvalue_create_uuid(value);
        -:14439:}
        -:14440:
        -:14441:/* message-id-binary */
        -:14442:
    #####:14443:AMQP_VALUE amqpvalue_create_message_id_binary(message_id_binary value)
        -:14444:{
    #####:14445:    return amqpvalue_create_binary(value);
        -:14446:}
        -:14447:
        -:14448:/* message-id-string */
        -:14449:
    #####:14450:AMQP_VALUE amqpvalue_create_message_id_string(message_id_string value)
        -:14451:{
    #####:14452:    return amqpvalue_create_string(value);
        -:14453:}
        -:14454:
        -:14455:/* address-string */
        -:14456:
    #####:14457:AMQP_VALUE amqpvalue_create_address_string(address_string value)
        -:14458:{
    #####:14459:    return amqpvalue_create_string(value);
        -:14460:}
        -:14461:
        -:14462:/* header */
        -:14463:
        -:14464:typedef struct HEADER_INSTANCE_TAG
        -:14465:{
        -:14466:    AMQP_VALUE composite_value;
        -:14467:} HEADER_INSTANCE;
        -:14468:
    #####:14469:static HEADER_HANDLE header_create_internal(void)
        -:14470:{
    #####:14471:    HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)malloc(sizeof(HEADER_INSTANCE));
    #####:14472:    if (header_instance != NULL)
        -:14473:    {
    #####:14474:        header_instance->composite_value = NULL;
        -:14475:    }
        -:14476:
    #####:14477:    return header_instance;
        -:14478:}
        -:14479:
    #####:14480:HEADER_HANDLE header_create(void)
        -:14481:{
    #####:14482:    HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)malloc(sizeof(HEADER_INSTANCE));
    #####:14483:    if (header_instance != NULL)
        -:14484:    {
    #####:14485:        header_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(112);
    #####:14486:        if (header_instance->composite_value == NULL)
        -:14487:        {
    #####:14488:            free(header_instance);
    #####:14489:            header_instance = NULL;
        -:14490:        }
        -:14491:    }
        -:14492:
    #####:14493:    return header_instance;
        -:14494:}
        -:14495:
    #####:14496:HEADER_HANDLE header_clone(HEADER_HANDLE value)
        -:14497:{
    #####:14498:    HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)malloc(sizeof(HEADER_INSTANCE));
    #####:14499:    if (header_instance != NULL)
        -:14500:    {
    #####:14501:        header_instance->composite_value = amqpvalue_clone(((HEADER_INSTANCE*)value)->composite_value);
    #####:14502:        if (header_instance->composite_value == NULL)
        -:14503:        {
    #####:14504:            free(header_instance);
    #####:14505:            header_instance = NULL;
        -:14506:        }
        -:14507:    }
        -:14508:
    #####:14509:    return header_instance;
        -:14510:}
        -:14511:
    #####:14512:void header_destroy(HEADER_HANDLE header)
        -:14513:{
    #####:14514:    if (header != NULL)
        -:14515:    {
    #####:14516:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:14517:        amqpvalue_destroy(header_instance->composite_value);
    #####:14518:        free(header_instance);
        -:14519:    }
    #####:14520:}
        -:14521:
    #####:14522:AMQP_VALUE amqpvalue_create_header(HEADER_HANDLE header)
        -:14523:{
        -:14524:    AMQP_VALUE result;
        -:14525:
    #####:14526:    if (header == NULL)
        -:14527:    {
    #####:14528:        result = NULL;
        -:14529:    }
        -:14530:    else
        -:14531:    {
    #####:14532:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:14533:        result = amqpvalue_clone(header_instance->composite_value);
        -:14534:    }
        -:14535:
    #####:14536:    return result;
        -:14537:}
        -:14538:
    #####:14539:bool is_header_type_by_descriptor(AMQP_VALUE descriptor)
        -:14540:{
        -:14541:    bool result;
        -:14542:
        -:14543:    uint64_t descriptor_ulong;
    #####:14544:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:14545:        (descriptor_ulong == 112))
        -:14546:    {
    #####:14547:        result = true;
        -:14548:    }
        -:14549:    else
        -:14550:    {
    #####:14551:        result = false;
        -:14552:    }
        -:14553:
    #####:14554:    return result;
        -:14555:}
        -:14556:
        -:14557:
    #####:14558:int amqpvalue_get_header(AMQP_VALUE value, HEADER_HANDLE* header_handle)
        -:14559:{
        -:14560:    int result;
    #####:14561:    HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header_create_internal();
    #####:14562:    *header_handle = header_instance;
    #####:14563:    if (*header_handle == NULL)
        -:14564:    {
    #####:14565:        result = MU_FAILURE;
        -:14566:    }
        -:14567:    else
        -:14568:    {
    #####:14569:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:14570:        if (list_value == NULL)
        -:14571:        {
    #####:14572:            header_destroy(*header_handle);
    #####:14573:            result = MU_FAILURE;
        -:14574:        }
        -:14575:        else
        -:14576:        {
        -:14577:            uint32_t list_item_count;
    #####:14578:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:14579:            {
    #####:14580:                result = MU_FAILURE;
        -:14581:            }
        -:14582:            else
        -:14583:            {
        -:14584:                do
        -:14585:                {
        -:14586:                    AMQP_VALUE item_value;
        -:14587:                    /* durable */
    #####:14588:                    if (list_item_count > 0)
        -:14589:                    {
    #####:14590:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:14591:                        if (item_value == NULL)
        -:14592:                        {
        -:14593:                            /* do nothing */
        -:14594:                        }
        -:14595:                        else
        -:14596:                        {
    #####:14597:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:14598:                            {
        -:14599:                                /* no error, field is not mandatory */
        -:14600:                            }
        -:14601:                            else
        -:14602:                            {
        -:14603:                                bool durable;
    #####:14604:                                if (amqpvalue_get_boolean(item_value, &durable) != 0)
        -:14605:                                {
    #####:14606:                                    amqpvalue_destroy(item_value);
    #####:14607:                                    header_destroy(*header_handle);
    #####:14608:                                    result = MU_FAILURE;
    #####:14609:                                    break;
        -:14610:                                }
        -:14611:                            }
        -:14612:
    #####:14613:                            amqpvalue_destroy(item_value);
        -:14614:                        }
        -:14615:                    }
        -:14616:                    /* priority */
    #####:14617:                    if (list_item_count > 1)
        -:14618:                    {
    #####:14619:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:14620:                        if (item_value == NULL)
        -:14621:                        {
        -:14622:                            /* do nothing */
        -:14623:                        }
        -:14624:                        else
        -:14625:                        {
    #####:14626:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:14627:                            {
        -:14628:                                /* no error, field is not mandatory */
        -:14629:                            }
        -:14630:                            else
        -:14631:                            {
        -:14632:                                uint8_t priority;
    #####:14633:                                if (amqpvalue_get_ubyte(item_value, &priority) != 0)
        -:14634:                                {
    #####:14635:                                    amqpvalue_destroy(item_value);
    #####:14636:                                    header_destroy(*header_handle);
    #####:14637:                                    result = MU_FAILURE;
    #####:14638:                                    break;
        -:14639:                                }
        -:14640:                            }
        -:14641:
    #####:14642:                            amqpvalue_destroy(item_value);
        -:14643:                        }
        -:14644:                    }
        -:14645:                    /* ttl */
    #####:14646:                    if (list_item_count > 2)
        -:14647:                    {
    #####:14648:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####:14649:                        if (item_value == NULL)
        -:14650:                        {
        -:14651:                            /* do nothing */
        -:14652:                        }
        -:14653:                        else
        -:14654:                        {
    #####:14655:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:14656:                            {
        -:14657:                                /* no error, field is not mandatory */
        -:14658:                            }
        -:14659:                            else
        -:14660:                            {
        -:14661:                                milliseconds ttl;
    #####:14662:                                if (amqpvalue_get_milliseconds(item_value, &ttl) != 0)
        -:14663:                                {
    #####:14664:                                    amqpvalue_destroy(item_value);
    #####:14665:                                    header_destroy(*header_handle);
    #####:14666:                                    result = MU_FAILURE;
    #####:14667:                                    break;
        -:14668:                                }
        -:14669:                            }
        -:14670:
    #####:14671:                            amqpvalue_destroy(item_value);
        -:14672:                        }
        -:14673:                    }
        -:14674:                    /* first-acquirer */
    #####:14675:                    if (list_item_count > 3)
        -:14676:                    {
    #####:14677:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####:14678:                        if (item_value == NULL)
        -:14679:                        {
        -:14680:                            /* do nothing */
        -:14681:                        }
        -:14682:                        else
        -:14683:                        {
    #####:14684:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:14685:                            {
        -:14686:                                /* no error, field is not mandatory */
        -:14687:                            }
        -:14688:                            else
        -:14689:                            {
        -:14690:                                bool first_acquirer;
    #####:14691:                                if (amqpvalue_get_boolean(item_value, &first_acquirer) != 0)
        -:14692:                                {
    #####:14693:                                    amqpvalue_destroy(item_value);
    #####:14694:                                    header_destroy(*header_handle);
    #####:14695:                                    result = MU_FAILURE;
    #####:14696:                                    break;
        -:14697:                                }
        -:14698:                            }
        -:14699:
    #####:14700:                            amqpvalue_destroy(item_value);
        -:14701:                        }
        -:14702:                    }
        -:14703:                    /* delivery-count */
    #####:14704:                    if (list_item_count > 4)
        -:14705:                    {
    #####:14706:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####:14707:                        if (item_value == NULL)
        -:14708:                        {
        -:14709:                            /* do nothing */
        -:14710:                        }
        -:14711:                        else
        -:14712:                        {
    #####:14713:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:14714:                            {
        -:14715:                                /* no error, field is not mandatory */
        -:14716:                            }
        -:14717:                            else
        -:14718:                            {
        -:14719:                                uint32_t delivery_count;
    #####:14720:                                if (amqpvalue_get_uint(item_value, &delivery_count) != 0)
        -:14721:                                {
    #####:14722:                                    amqpvalue_destroy(item_value);
    #####:14723:                                    header_destroy(*header_handle);
    #####:14724:                                    result = MU_FAILURE;
    #####:14725:                                    break;
        -:14726:                                }
        -:14727:                            }
        -:14728:
    #####:14729:                            amqpvalue_destroy(item_value);
        -:14730:                        }
        -:14731:                    }
        -:14732:
    #####:14733:                    header_instance->composite_value = amqpvalue_clone(value);
        -:14734:
    #####:14735:                    result = 0;
        -:14736:                } while((void)0,0);
        -:14737:            }
        -:14738:        }
        -:14739:    }
        -:14740:
    #####:14741:    return result;
        -:14742:}
        -:14743:
    #####:14744:int header_get_durable(HEADER_HANDLE header, bool* durable_value)
        -:14745:{
        -:14746:    int result;
        -:14747:
    #####:14748:    if (header == NULL)
        -:14749:    {
    #####:14750:        result = MU_FAILURE;
        -:14751:    }
        -:14752:    else
        -:14753:    {
        -:14754:        uint32_t item_count;
    #####:14755:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:14756:        if (amqpvalue_get_composite_item_count(header_instance->composite_value, &item_count) != 0)
        -:14757:        {
    #####:14758:            result = MU_FAILURE;
        -:14759:        }
        -:14760:        else
        -:14761:        {
    #####:14762:            if (item_count <= 0)
        -:14763:            {
    #####:14764:                *durable_value = false;
    #####:14765:                result = 0;
        -:14766:            }
        -:14767:            else
        -:14768:            {
    #####:14769:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(header_instance->composite_value, 0);
    #####:14770:                if ((item_value == NULL) ||
    #####:14771:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:14772:                {
    #####:14773:                    *durable_value = false;
    #####:14774:                    result = 0;
        -:14775:                }
        -:14776:                else
        -:14777:                {
    #####:14778:                    int get_single_value_result = amqpvalue_get_boolean(item_value, durable_value);
    #####:14779:                    if (get_single_value_result != 0)
        -:14780:                    {
    #####:14781:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:14782:                        {
    #####:14783:                            result = MU_FAILURE;
        -:14784:                        }
        -:14785:                        else
        -:14786:                        {
    #####:14787:                            *durable_value = false;
    #####:14788:                            result = 0;
        -:14789:                        }
        -:14790:                    }
        -:14791:                    else
        -:14792:                    {
    #####:14793:                        result = 0;
        -:14794:                    }
        -:14795:                }
        -:14796:            }
        -:14797:        }
        -:14798:    }
        -:14799:
    #####:14800:    return result;
        -:14801:}
        -:14802:
    #####:14803:int header_set_durable(HEADER_HANDLE header, bool durable_value)
        -:14804:{
        -:14805:    int result;
        -:14806:
    #####:14807:    if (header == NULL)
        -:14808:    {
    #####:14809:        result = MU_FAILURE;
        -:14810:    }
        -:14811:    else
        -:14812:    {
    #####:14813:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:14814:        AMQP_VALUE durable_amqp_value = amqpvalue_create_boolean(durable_value);
    #####:14815:        if (durable_amqp_value == NULL)
        -:14816:        {
    #####:14817:            result = MU_FAILURE;
        -:14818:        }
        -:14819:        else
        -:14820:        {
    #####:14821:            if (amqpvalue_set_composite_item(header_instance->composite_value, 0, durable_amqp_value) != 0)
        -:14822:            {
    #####:14823:                result = MU_FAILURE;
        -:14824:            }
        -:14825:            else
        -:14826:            {
    #####:14827:                result = 0;
        -:14828:            }
        -:14829:
    #####:14830:            amqpvalue_destroy(durable_amqp_value);
        -:14831:        }
        -:14832:    }
        -:14833:
    #####:14834:    return result;
        -:14835:}
        -:14836:
    #####:14837:int header_get_priority(HEADER_HANDLE header, uint8_t* priority_value)
        -:14838:{
        -:14839:    int result;
        -:14840:
    #####:14841:    if (header == NULL)
        -:14842:    {
    #####:14843:        result = MU_FAILURE;
        -:14844:    }
        -:14845:    else
        -:14846:    {
        -:14847:        uint32_t item_count;
    #####:14848:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:14849:        if (amqpvalue_get_composite_item_count(header_instance->composite_value, &item_count) != 0)
        -:14850:        {
    #####:14851:            result = MU_FAILURE;
        -:14852:        }
        -:14853:        else
        -:14854:        {
    #####:14855:            if (item_count <= 1)
        -:14856:            {
    #####:14857:                *priority_value = 4;
    #####:14858:                result = 0;
        -:14859:            }
        -:14860:            else
        -:14861:            {
    #####:14862:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(header_instance->composite_value, 1);
    #####:14863:                if ((item_value == NULL) ||
    #####:14864:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:14865:                {
    #####:14866:                    *priority_value = 4;
    #####:14867:                    result = 0;
        -:14868:                }
        -:14869:                else
        -:14870:                {
    #####:14871:                    int get_single_value_result = amqpvalue_get_ubyte(item_value, priority_value);
    #####:14872:                    if (get_single_value_result != 0)
        -:14873:                    {
    #####:14874:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:14875:                        {
    #####:14876:                            result = MU_FAILURE;
        -:14877:                        }
        -:14878:                        else
        -:14879:                        {
    #####:14880:                            *priority_value = 4;
    #####:14881:                            result = 0;
        -:14882:                        }
        -:14883:                    }
        -:14884:                    else
        -:14885:                    {
    #####:14886:                        result = 0;
        -:14887:                    }
        -:14888:                }
        -:14889:            }
        -:14890:        }
        -:14891:    }
        -:14892:
    #####:14893:    return result;
        -:14894:}
        -:14895:
    #####:14896:int header_set_priority(HEADER_HANDLE header, uint8_t priority_value)
        -:14897:{
        -:14898:    int result;
        -:14899:
    #####:14900:    if (header == NULL)
        -:14901:    {
    #####:14902:        result = MU_FAILURE;
        -:14903:    }
        -:14904:    else
        -:14905:    {
    #####:14906:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:14907:        AMQP_VALUE priority_amqp_value = amqpvalue_create_ubyte(priority_value);
    #####:14908:        if (priority_amqp_value == NULL)
        -:14909:        {
    #####:14910:            result = MU_FAILURE;
        -:14911:        }
        -:14912:        else
        -:14913:        {
    #####:14914:            if (amqpvalue_set_composite_item(header_instance->composite_value, 1, priority_amqp_value) != 0)
        -:14915:            {
    #####:14916:                result = MU_FAILURE;
        -:14917:            }
        -:14918:            else
        -:14919:            {
    #####:14920:                result = 0;
        -:14921:            }
        -:14922:
    #####:14923:            amqpvalue_destroy(priority_amqp_value);
        -:14924:        }
        -:14925:    }
        -:14926:
    #####:14927:    return result;
        -:14928:}
        -:14929:
    #####:14930:int header_get_ttl(HEADER_HANDLE header, milliseconds* ttl_value)
        -:14931:{
        -:14932:    int result;
        -:14933:
    #####:14934:    if (header == NULL)
        -:14935:    {
    #####:14936:        result = MU_FAILURE;
        -:14937:    }
        -:14938:    else
        -:14939:    {
        -:14940:        uint32_t item_count;
    #####:14941:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:14942:        if (amqpvalue_get_composite_item_count(header_instance->composite_value, &item_count) != 0)
        -:14943:        {
    #####:14944:            result = MU_FAILURE;
        -:14945:        }
        -:14946:        else
        -:14947:        {
    #####:14948:            if (item_count <= 2)
        -:14949:            {
    #####:14950:                result = MU_FAILURE;
        -:14951:            }
        -:14952:            else
        -:14953:            {
    #####:14954:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(header_instance->composite_value, 2);
    #####:14955:                if ((item_value == NULL) ||
    #####:14956:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:14957:                {
    #####:14958:                    result = MU_FAILURE;
        -:14959:                }
        -:14960:                else
        -:14961:                {
    #####:14962:                    int get_single_value_result = amqpvalue_get_milliseconds(item_value, ttl_value);
    #####:14963:                    if (get_single_value_result != 0)
        -:14964:                    {
    #####:14965:                        result = MU_FAILURE;
        -:14966:                    }
        -:14967:                    else
        -:14968:                    {
    #####:14969:                        result = 0;
        -:14970:                    }
        -:14971:                }
        -:14972:            }
        -:14973:        }
        -:14974:    }
        -:14975:
    #####:14976:    return result;
        -:14977:}
        -:14978:
    #####:14979:int header_set_ttl(HEADER_HANDLE header, milliseconds ttl_value)
        -:14980:{
        -:14981:    int result;
        -:14982:
    #####:14983:    if (header == NULL)
        -:14984:    {
    #####:14985:        result = MU_FAILURE;
        -:14986:    }
        -:14987:    else
        -:14988:    {
    #####:14989:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:14990:        AMQP_VALUE ttl_amqp_value = amqpvalue_create_milliseconds(ttl_value);
    #####:14991:        if (ttl_amqp_value == NULL)
        -:14992:        {
    #####:14993:            result = MU_FAILURE;
        -:14994:        }
        -:14995:        else
        -:14996:        {
    #####:14997:            if (amqpvalue_set_composite_item(header_instance->composite_value, 2, ttl_amqp_value) != 0)
        -:14998:            {
    #####:14999:                result = MU_FAILURE;
        -:15000:            }
        -:15001:            else
        -:15002:            {
    #####:15003:                result = 0;
        -:15004:            }
        -:15005:
    #####:15006:            amqpvalue_destroy(ttl_amqp_value);
        -:15007:        }
        -:15008:    }
        -:15009:
    #####:15010:    return result;
        -:15011:}
        -:15012:
    #####:15013:int header_get_first_acquirer(HEADER_HANDLE header, bool* first_acquirer_value)
        -:15014:{
        -:15015:    int result;
        -:15016:
    #####:15017:    if (header == NULL)
        -:15018:    {
    #####:15019:        result = MU_FAILURE;
        -:15020:    }
        -:15021:    else
        -:15022:    {
        -:15023:        uint32_t item_count;
    #####:15024:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:15025:        if (amqpvalue_get_composite_item_count(header_instance->composite_value, &item_count) != 0)
        -:15026:        {
    #####:15027:            result = MU_FAILURE;
        -:15028:        }
        -:15029:        else
        -:15030:        {
    #####:15031:            if (item_count <= 3)
        -:15032:            {
    #####:15033:                *first_acquirer_value = false;
    #####:15034:                result = 0;
        -:15035:            }
        -:15036:            else
        -:15037:            {
    #####:15038:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(header_instance->composite_value, 3);
    #####:15039:                if ((item_value == NULL) ||
    #####:15040:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:15041:                {
    #####:15042:                    *first_acquirer_value = false;
    #####:15043:                    result = 0;
        -:15044:                }
        -:15045:                else
        -:15046:                {
    #####:15047:                    int get_single_value_result = amqpvalue_get_boolean(item_value, first_acquirer_value);
    #####:15048:                    if (get_single_value_result != 0)
        -:15049:                    {
    #####:15050:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:15051:                        {
    #####:15052:                            result = MU_FAILURE;
        -:15053:                        }
        -:15054:                        else
        -:15055:                        {
    #####:15056:                            *first_acquirer_value = false;
    #####:15057:                            result = 0;
        -:15058:                        }
        -:15059:                    }
        -:15060:                    else
        -:15061:                    {
    #####:15062:                        result = 0;
        -:15063:                    }
        -:15064:                }
        -:15065:            }
        -:15066:        }
        -:15067:    }
        -:15068:
    #####:15069:    return result;
        -:15070:}
        -:15071:
    #####:15072:int header_set_first_acquirer(HEADER_HANDLE header, bool first_acquirer_value)
        -:15073:{
        -:15074:    int result;
        -:15075:
    #####:15076:    if (header == NULL)
        -:15077:    {
    #####:15078:        result = MU_FAILURE;
        -:15079:    }
        -:15080:    else
        -:15081:    {
    #####:15082:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:15083:        AMQP_VALUE first_acquirer_amqp_value = amqpvalue_create_boolean(first_acquirer_value);
    #####:15084:        if (first_acquirer_amqp_value == NULL)
        -:15085:        {
    #####:15086:            result = MU_FAILURE;
        -:15087:        }
        -:15088:        else
        -:15089:        {
    #####:15090:            if (amqpvalue_set_composite_item(header_instance->composite_value, 3, first_acquirer_amqp_value) != 0)
        -:15091:            {
    #####:15092:                result = MU_FAILURE;
        -:15093:            }
        -:15094:            else
        -:15095:            {
    #####:15096:                result = 0;
        -:15097:            }
        -:15098:
    #####:15099:            amqpvalue_destroy(first_acquirer_amqp_value);
        -:15100:        }
        -:15101:    }
        -:15102:
    #####:15103:    return result;
        -:15104:}
        -:15105:
    #####:15106:int header_get_delivery_count(HEADER_HANDLE header, uint32_t* delivery_count_value)
        -:15107:{
        -:15108:    int result;
        -:15109:
    #####:15110:    if (header == NULL)
        -:15111:    {
    #####:15112:        result = MU_FAILURE;
        -:15113:    }
        -:15114:    else
        -:15115:    {
        -:15116:        uint32_t item_count;
    #####:15117:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:15118:        if (amqpvalue_get_composite_item_count(header_instance->composite_value, &item_count) != 0)
        -:15119:        {
    #####:15120:            result = MU_FAILURE;
        -:15121:        }
        -:15122:        else
        -:15123:        {
    #####:15124:            if (item_count <= 4)
        -:15125:            {
    #####:15126:                *delivery_count_value = 0;
    #####:15127:                result = 0;
        -:15128:            }
        -:15129:            else
        -:15130:            {
    #####:15131:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(header_instance->composite_value, 4);
    #####:15132:                if ((item_value == NULL) ||
    #####:15133:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:15134:                {
    #####:15135:                    *delivery_count_value = 0;
    #####:15136:                    result = 0;
        -:15137:                }
        -:15138:                else
        -:15139:                {
    #####:15140:                    int get_single_value_result = amqpvalue_get_uint(item_value, delivery_count_value);
    #####:15141:                    if (get_single_value_result != 0)
        -:15142:                    {
    #####:15143:                        if (amqpvalue_get_type(item_value) != AMQP_TYPE_NULL)
        -:15144:                        {
    #####:15145:                            result = MU_FAILURE;
        -:15146:                        }
        -:15147:                        else
        -:15148:                        {
    #####:15149:                            *delivery_count_value = 0;
    #####:15150:                            result = 0;
        -:15151:                        }
        -:15152:                    }
        -:15153:                    else
        -:15154:                    {
    #####:15155:                        result = 0;
        -:15156:                    }
        -:15157:                }
        -:15158:            }
        -:15159:        }
        -:15160:    }
        -:15161:
    #####:15162:    return result;
        -:15163:}
        -:15164:
    #####:15165:int header_set_delivery_count(HEADER_HANDLE header, uint32_t delivery_count_value)
        -:15166:{
        -:15167:    int result;
        -:15168:
    #####:15169:    if (header == NULL)
        -:15170:    {
    #####:15171:        result = MU_FAILURE;
        -:15172:    }
        -:15173:    else
        -:15174:    {
    #####:15175:        HEADER_INSTANCE* header_instance = (HEADER_INSTANCE*)header;
    #####:15176:        AMQP_VALUE delivery_count_amqp_value = amqpvalue_create_uint(delivery_count_value);
    #####:15177:        if (delivery_count_amqp_value == NULL)
        -:15178:        {
    #####:15179:            result = MU_FAILURE;
        -:15180:        }
        -:15181:        else
        -:15182:        {
    #####:15183:            if (amqpvalue_set_composite_item(header_instance->composite_value, 4, delivery_count_amqp_value) != 0)
        -:15184:            {
    #####:15185:                result = MU_FAILURE;
        -:15186:            }
        -:15187:            else
        -:15188:            {
    #####:15189:                result = 0;
        -:15190:            }
        -:15191:
    #####:15192:            amqpvalue_destroy(delivery_count_amqp_value);
        -:15193:        }
        -:15194:    }
        -:15195:
    #####:15196:    return result;
        -:15197:}
        -:15198:
        -:15199:
        -:15200:/* delivery-annotations */
        -:15201:
    #####:15202:AMQP_VALUE amqpvalue_create_delivery_annotations(delivery_annotations value)
        -:15203:{
        -:15204:    AMQP_VALUE result;
    #####:15205:    AMQP_VALUE described_value = amqpvalue_create_annotations(value);
    #####:15206:    if (described_value == NULL)
        -:15207:    {
    #####:15208:        result = NULL;
        -:15209:    }
        -:15210:    else
        -:15211:    {
    #####:15212:        AMQP_VALUE descriptor = amqpvalue_create_ulong(113);
    #####:15213:        if (descriptor == NULL)
        -:15214:        {
    #####:15215:            result = NULL;
        -:15216:        }
        -:15217:        else
        -:15218:        {
    #####:15219:            result = amqpvalue_create_described(amqpvalue_clone(descriptor), amqpvalue_clone(described_value));
        -:15220:
    #####:15221:            amqpvalue_destroy(descriptor);
        -:15222:        }
        -:15223:
    #####:15224:        amqpvalue_destroy(described_value);
        -:15225:    }
        -:15226:
    #####:15227:    return result;
        -:15228:}
        -:15229:
    #####:15230:bool is_delivery_annotations_type_by_descriptor(AMQP_VALUE descriptor)
        -:15231:{
        -:15232:    bool result;
        -:15233:
        -:15234:    uint64_t descriptor_ulong;
    #####:15235:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:15236:        (descriptor_ulong == 113))
        -:15237:    {
    #####:15238:        result = true;
        -:15239:    }
        -:15240:    else
        -:15241:    {
    #####:15242:        result = false;
        -:15243:    }
        -:15244:
    #####:15245:    return result;
        -:15246:}
        -:15247:
        -:15248:/* message-annotations */
        -:15249:
    #####:15250:AMQP_VALUE amqpvalue_create_message_annotations(message_annotations value)
        -:15251:{
        -:15252:    AMQP_VALUE result;
    #####:15253:    AMQP_VALUE described_value = amqpvalue_create_annotations(value);
    #####:15254:    if (described_value == NULL)
        -:15255:    {
    #####:15256:        result = NULL;
        -:15257:    }
        -:15258:    else
        -:15259:    {
    #####:15260:        AMQP_VALUE descriptor = amqpvalue_create_ulong(114);
    #####:15261:        if (descriptor == NULL)
        -:15262:        {
    #####:15263:            result = NULL;
        -:15264:        }
        -:15265:        else
        -:15266:        {
    #####:15267:            result = amqpvalue_create_described(amqpvalue_clone(descriptor), amqpvalue_clone(described_value));
        -:15268:
    #####:15269:            amqpvalue_destroy(descriptor);
        -:15270:        }
        -:15271:
    #####:15272:        amqpvalue_destroy(described_value);
        -:15273:    }
        -:15274:
    #####:15275:    return result;
        -:15276:}
        -:15277:
    #####:15278:bool is_message_annotations_type_by_descriptor(AMQP_VALUE descriptor)
        -:15279:{
        -:15280:    bool result;
        -:15281:
        -:15282:    uint64_t descriptor_ulong;
    #####:15283:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:15284:        (descriptor_ulong == 114))
        -:15285:    {
    #####:15286:        result = true;
        -:15287:    }
        -:15288:    else
        -:15289:    {
    #####:15290:        result = false;
        -:15291:    }
        -:15292:
    #####:15293:    return result;
        -:15294:}
        -:15295:
        -:15296:/* application-properties */
        -:15297:
    #####:15298:AMQP_VALUE amqpvalue_create_application_properties(AMQP_VALUE value)
        -:15299:{
        -:15300:    AMQP_VALUE result;
    #####:15301:    AMQP_VALUE described_value = amqpvalue_clone(value);
    #####:15302:    if (described_value == NULL)
        -:15303:    {
    #####:15304:        result = NULL;
        -:15305:    }
        -:15306:    else
        -:15307:    {
    #####:15308:        AMQP_VALUE descriptor = amqpvalue_create_ulong(116);
    #####:15309:        if (descriptor == NULL)
        -:15310:        {
    #####:15311:            result = NULL;
        -:15312:        }
        -:15313:        else
        -:15314:        {
    #####:15315:            result = amqpvalue_create_described(amqpvalue_clone(descriptor), amqpvalue_clone(described_value));
        -:15316:
    #####:15317:            amqpvalue_destroy(descriptor);
        -:15318:        }
        -:15319:
    #####:15320:        amqpvalue_destroy(described_value);
        -:15321:    }
        -:15322:
    #####:15323:    return result;
        -:15324:}
        -:15325:
    #####:15326:bool is_application_properties_type_by_descriptor(AMQP_VALUE descriptor)
        -:15327:{
        -:15328:    bool result;
        -:15329:
        -:15330:    uint64_t descriptor_ulong;
    #####:15331:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:15332:        (descriptor_ulong == 116))
        -:15333:    {
    #####:15334:        result = true;
        -:15335:    }
        -:15336:    else
        -:15337:    {
    #####:15338:        result = false;
        -:15339:    }
        -:15340:
    #####:15341:    return result;
        -:15342:}
        -:15343:
        -:15344:/* data */
        -:15345:
    #####:15346:AMQP_VALUE amqpvalue_create_data(data value)
        -:15347:{
        -:15348:    AMQP_VALUE result;
    #####:15349:    AMQP_VALUE described_value = amqpvalue_create_binary(value);
    #####:15350:    if (described_value == NULL)
        -:15351:    {
    #####:15352:        result = NULL;
        -:15353:    }
        -:15354:    else
        -:15355:    {
    #####:15356:        AMQP_VALUE descriptor = amqpvalue_create_ulong(117);
    #####:15357:        if (descriptor == NULL)
        -:15358:        {
    #####:15359:            result = NULL;
        -:15360:        }
        -:15361:        else
        -:15362:        {
    #####:15363:            result = amqpvalue_create_described(amqpvalue_clone(descriptor), amqpvalue_clone(described_value));
        -:15364:
    #####:15365:            amqpvalue_destroy(descriptor);
        -:15366:        }
        -:15367:
    #####:15368:        amqpvalue_destroy(described_value);
        -:15369:    }
        -:15370:
    #####:15371:    return result;
        -:15372:}
        -:15373:
    #####:15374:bool is_data_type_by_descriptor(AMQP_VALUE descriptor)
        -:15375:{
        -:15376:    bool result;
        -:15377:
        -:15378:    uint64_t descriptor_ulong;
    #####:15379:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:15380:        (descriptor_ulong == 117))
        -:15381:    {
    #####:15382:        result = true;
        -:15383:    }
        -:15384:    else
        -:15385:    {
    #####:15386:        result = false;
        -:15387:    }
        -:15388:
    #####:15389:    return result;
        -:15390:}
        -:15391:
        -:15392:/* amqp-sequence */
        -:15393:
    #####:15394:AMQP_VALUE amqpvalue_create_amqp_sequence(AMQP_VALUE value)
        -:15395:{
        -:15396:    AMQP_VALUE result;
    #####:15397:    AMQP_VALUE described_value = amqpvalue_clone(value);
    #####:15398:    if (described_value == NULL)
        -:15399:    {
    #####:15400:        result = NULL;
        -:15401:    }
        -:15402:    else
        -:15403:    {
    #####:15404:        AMQP_VALUE descriptor = amqpvalue_create_ulong(118);
    #####:15405:        if (descriptor == NULL)
        -:15406:        {
    #####:15407:            result = NULL;
        -:15408:        }
        -:15409:        else
        -:15410:        {
    #####:15411:            result = amqpvalue_create_described(amqpvalue_clone(descriptor), amqpvalue_clone(described_value));
        -:15412:
    #####:15413:            amqpvalue_destroy(descriptor);
        -:15414:        }
        -:15415:
    #####:15416:        amqpvalue_destroy(described_value);
        -:15417:    }
        -:15418:
    #####:15419:    return result;
        -:15420:}
        -:15421:
    #####:15422:bool is_amqp_sequence_type_by_descriptor(AMQP_VALUE descriptor)
        -:15423:{
        -:15424:    bool result;
        -:15425:
        -:15426:    uint64_t descriptor_ulong;
    #####:15427:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:15428:        (descriptor_ulong == 118))
        -:15429:    {
    #####:15430:        result = true;
        -:15431:    }
        -:15432:    else
        -:15433:    {
    #####:15434:        result = false;
        -:15435:    }
        -:15436:
    #####:15437:    return result;
        -:15438:}
        -:15439:
        -:15440:/* amqp-value */
        -:15441:
    #####:15442:AMQP_VALUE amqpvalue_create_amqp_value(AMQP_VALUE value)
        -:15443:{
        -:15444:    AMQP_VALUE result;
    #####:15445:    AMQP_VALUE described_value = amqpvalue_clone(value);
    #####:15446:    if (described_value == NULL)
        -:15447:    {
    #####:15448:        result = NULL;
        -:15449:    }
        -:15450:    else
        -:15451:    {
    #####:15452:        AMQP_VALUE descriptor = amqpvalue_create_ulong(119);
    #####:15453:        if (descriptor == NULL)
        -:15454:        {
    #####:15455:            result = NULL;
        -:15456:        }
        -:15457:        else
        -:15458:        {
    #####:15459:            result = amqpvalue_create_described(amqpvalue_clone(descriptor), amqpvalue_clone(described_value));
        -:15460:
    #####:15461:            amqpvalue_destroy(descriptor);
        -:15462:        }
        -:15463:
    #####:15464:        amqpvalue_destroy(described_value);
        -:15465:    }
        -:15466:
    #####:15467:    return result;
        -:15468:}
        -:15469:
    #####:15470:bool is_amqp_value_type_by_descriptor(AMQP_VALUE descriptor)
        -:15471:{
        -:15472:    bool result;
        -:15473:
        -:15474:    uint64_t descriptor_ulong;
    #####:15475:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:15476:        (descriptor_ulong == 119))
        -:15477:    {
    #####:15478:        result = true;
        -:15479:    }
        -:15480:    else
        -:15481:    {
    #####:15482:        result = false;
        -:15483:    }
        -:15484:
    #####:15485:    return result;
        -:15486:}
        -:15487:
        -:15488:/* footer */
        -:15489:
    #####:15490:AMQP_VALUE amqpvalue_create_footer(footer value)
        -:15491:{
        -:15492:    AMQP_VALUE result;
    #####:15493:    AMQP_VALUE described_value = amqpvalue_create_annotations(value);
    #####:15494:    if (described_value == NULL)
        -:15495:    {
    #####:15496:        result = NULL;
        -:15497:    }
        -:15498:    else
        -:15499:    {
    #####:15500:        AMQP_VALUE descriptor = amqpvalue_create_ulong(120);
    #####:15501:        if (descriptor == NULL)
        -:15502:        {
    #####:15503:            result = NULL;
        -:15504:        }
        -:15505:        else
        -:15506:        {
    #####:15507:            result = amqpvalue_create_described(amqpvalue_clone(descriptor), amqpvalue_clone(described_value));
        -:15508:
    #####:15509:            amqpvalue_destroy(descriptor);
        -:15510:        }
        -:15511:
    #####:15512:        amqpvalue_destroy(described_value);
        -:15513:    }
        -:15514:
    #####:15515:    return result;
        -:15516:}
        -:15517:
    #####:15518:bool is_footer_type_by_descriptor(AMQP_VALUE descriptor)
        -:15519:{
        -:15520:    bool result;
        -:15521:
        -:15522:    uint64_t descriptor_ulong;
    #####:15523:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:15524:        (descriptor_ulong == 120))
        -:15525:    {
    #####:15526:        result = true;
        -:15527:    }
        -:15528:    else
        -:15529:    {
    #####:15530:        result = false;
        -:15531:    }
        -:15532:
    #####:15533:    return result;
        -:15534:}
        -:15535:
        -:15536:/* properties */
        -:15537:
        -:15538:typedef struct PROPERTIES_INSTANCE_TAG
        -:15539:{
        -:15540:    AMQP_VALUE composite_value;
        -:15541:} PROPERTIES_INSTANCE;
        -:15542:
    #####:15543:static PROPERTIES_HANDLE properties_create_internal(void)
        -:15544:{
    #####:15545:    PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)malloc(sizeof(PROPERTIES_INSTANCE));
    #####:15546:    if (properties_instance != NULL)
        -:15547:    {
    #####:15548:        properties_instance->composite_value = NULL;
        -:15549:    }
        -:15550:
    #####:15551:    return properties_instance;
        -:15552:}
        -:15553:
    #####:15554:PROPERTIES_HANDLE properties_create(void)
        -:15555:{
    #####:15556:    PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)malloc(sizeof(PROPERTIES_INSTANCE));
    #####:15557:    if (properties_instance != NULL)
        -:15558:    {
    #####:15559:        properties_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(115);
    #####:15560:        if (properties_instance->composite_value == NULL)
        -:15561:        {
    #####:15562:            free(properties_instance);
    #####:15563:            properties_instance = NULL;
        -:15564:        }
        -:15565:    }
        -:15566:
    #####:15567:    return properties_instance;
        -:15568:}
        -:15569:
    #####:15570:PROPERTIES_HANDLE properties_clone(PROPERTIES_HANDLE value)
        -:15571:{
    #####:15572:    PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)malloc(sizeof(PROPERTIES_INSTANCE));
    #####:15573:    if (properties_instance != NULL)
        -:15574:    {
    #####:15575:        properties_instance->composite_value = amqpvalue_clone(((PROPERTIES_INSTANCE*)value)->composite_value);
    #####:15576:        if (properties_instance->composite_value == NULL)
        -:15577:        {
    #####:15578:            free(properties_instance);
    #####:15579:            properties_instance = NULL;
        -:15580:        }
        -:15581:    }
        -:15582:
    #####:15583:    return properties_instance;
        -:15584:}
        -:15585:
    #####:15586:void properties_destroy(PROPERTIES_HANDLE properties)
        -:15587:{
    #####:15588:    if (properties != NULL)
        -:15589:    {
    #####:15590:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:15591:        amqpvalue_destroy(properties_instance->composite_value);
    #####:15592:        free(properties_instance);
        -:15593:    }
    #####:15594:}
        -:15595:
    #####:15596:AMQP_VALUE amqpvalue_create_properties(PROPERTIES_HANDLE properties)
        -:15597:{
        -:15598:    AMQP_VALUE result;
        -:15599:
    #####:15600:    if (properties == NULL)
        -:15601:    {
    #####:15602:        result = NULL;
        -:15603:    }
        -:15604:    else
        -:15605:    {
    #####:15606:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:15607:        result = amqpvalue_clone(properties_instance->composite_value);
        -:15608:    }
        -:15609:
    #####:15610:    return result;
        -:15611:}
        -:15612:
    #####:15613:bool is_properties_type_by_descriptor(AMQP_VALUE descriptor)
        -:15614:{
        -:15615:    bool result;
        -:15616:
        -:15617:    uint64_t descriptor_ulong;
    #####:15618:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:15619:        (descriptor_ulong == 115))
        -:15620:    {
    #####:15621:        result = true;
        -:15622:    }
        -:15623:    else
        -:15624:    {
    #####:15625:        result = false;
        -:15626:    }
        -:15627:
    #####:15628:    return result;
        -:15629:}
        -:15630:
        -:15631:
    #####:15632:int amqpvalue_get_properties(AMQP_VALUE value, PROPERTIES_HANDLE* properties_handle)
        -:15633:{
        -:15634:    int result;
    #####:15635:    PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties_create_internal();
    #####:15636:    *properties_handle = properties_instance;
    #####:15637:    if (*properties_handle == NULL)
        -:15638:    {
    #####:15639:        result = MU_FAILURE;
        -:15640:    }
        -:15641:    else
        -:15642:    {
    #####:15643:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:15644:        if (list_value == NULL)
        -:15645:        {
    #####:15646:            properties_destroy(*properties_handle);
    #####:15647:            result = MU_FAILURE;
        -:15648:        }
        -:15649:        else
        -:15650:        {
        -:15651:            uint32_t list_item_count;
    #####:15652:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:15653:            {
    #####:15654:                result = MU_FAILURE;
        -:15655:            }
        -:15656:            else
        -:15657:            {
        -:15658:                do
        -:15659:                {
        -:15660:                    AMQP_VALUE item_value;
        -:15661:                    /* message-id */
    #####:15662:                    if (list_item_count > 0)
        -:15663:                    {
    #####:15664:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:15665:                        if (item_value == NULL)
        -:15666:                        {
        -:15667:                            /* do nothing */
        -:15668:                        }
        -:15669:                        else
        -:15670:                        {
    #####:15671:                            amqpvalue_destroy(item_value);
        -:15672:                        }
        -:15673:                    }
        -:15674:                    /* user-id */
    #####:15675:                    if (list_item_count > 1)
        -:15676:                    {
    #####:15677:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:15678:                        if (item_value == NULL)
        -:15679:                        {
        -:15680:                            /* do nothing */
        -:15681:                        }
        -:15682:                        else
        -:15683:                        {
    #####:15684:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15685:                            {
        -:15686:                                /* no error, field is not mandatory */
        -:15687:                            }
        -:15688:                            else
        -:15689:                            {
        -:15690:                                amqp_binary user_id;
    #####:15691:                                if (amqpvalue_get_binary(item_value, &user_id) != 0)
        -:15692:                                {
    #####:15693:                                    amqpvalue_destroy(item_value);
    #####:15694:                                    properties_destroy(*properties_handle);
    #####:15695:                                    result = MU_FAILURE;
    #####:15696:                                    break;
        -:15697:                                }
        -:15698:                            }
        -:15699:
    #####:15700:                            amqpvalue_destroy(item_value);
        -:15701:                        }
        -:15702:                    }
        -:15703:                    /* to */
    #####:15704:                    if (list_item_count > 2)
        -:15705:                    {
    #####:15706:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####:15707:                        if (item_value == NULL)
        -:15708:                        {
        -:15709:                            /* do nothing */
        -:15710:                        }
        -:15711:                        else
        -:15712:                        {
    #####:15713:                            amqpvalue_destroy(item_value);
        -:15714:                        }
        -:15715:                    }
        -:15716:                    /* subject */
    #####:15717:                    if (list_item_count > 3)
        -:15718:                    {
    #####:15719:                        item_value = amqpvalue_get_list_item(list_value, 3);
    #####:15720:                        if (item_value == NULL)
        -:15721:                        {
        -:15722:                            /* do nothing */
        -:15723:                        }
        -:15724:                        else
        -:15725:                        {
    #####:15726:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15727:                            {
        -:15728:                                /* no error, field is not mandatory */
        -:15729:                            }
        -:15730:                            else
        -:15731:                            {
        -:15732:                                const char* subject;
    #####:15733:                                if (amqpvalue_get_string(item_value, &subject) != 0)
        -:15734:                                {
    #####:15735:                                    amqpvalue_destroy(item_value);
    #####:15736:                                    properties_destroy(*properties_handle);
    #####:15737:                                    result = MU_FAILURE;
    #####:15738:                                    break;
        -:15739:                                }
        -:15740:                            }
        -:15741:
    #####:15742:                            amqpvalue_destroy(item_value);
        -:15743:                        }
        -:15744:                    }
        -:15745:                    /* reply-to */
    #####:15746:                    if (list_item_count > 4)
        -:15747:                    {
    #####:15748:                        item_value = amqpvalue_get_list_item(list_value, 4);
    #####:15749:                        if (item_value == NULL)
        -:15750:                        {
        -:15751:                            /* do nothing */
        -:15752:                        }
        -:15753:                        else
        -:15754:                        {
    #####:15755:                            amqpvalue_destroy(item_value);
        -:15756:                        }
        -:15757:                    }
        -:15758:                    /* correlation-id */
    #####:15759:                    if (list_item_count > 5)
        -:15760:                    {
    #####:15761:                        item_value = amqpvalue_get_list_item(list_value, 5);
    #####:15762:                        if (item_value == NULL)
        -:15763:                        {
        -:15764:                            /* do nothing */
        -:15765:                        }
        -:15766:                        else
        -:15767:                        {
    #####:15768:                            amqpvalue_destroy(item_value);
        -:15769:                        }
        -:15770:                    }
        -:15771:                    /* content-type */
    #####:15772:                    if (list_item_count > 6)
        -:15773:                    {
    #####:15774:                        item_value = amqpvalue_get_list_item(list_value, 6);
    #####:15775:                        if (item_value == NULL)
        -:15776:                        {
        -:15777:                            /* do nothing */
        -:15778:                        }
        -:15779:                        else
        -:15780:                        {
    #####:15781:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15782:                            {
        -:15783:                                /* no error, field is not mandatory */
        -:15784:                            }
        -:15785:                            else
        -:15786:                            {
        -:15787:                                const char* content_type;
    #####:15788:                                if (amqpvalue_get_symbol(item_value, &content_type) != 0)
        -:15789:                                {
    #####:15790:                                    amqpvalue_destroy(item_value);
    #####:15791:                                    properties_destroy(*properties_handle);
    #####:15792:                                    result = MU_FAILURE;
    #####:15793:                                    break;
        -:15794:                                }
        -:15795:                            }
        -:15796:
    #####:15797:                            amqpvalue_destroy(item_value);
        -:15798:                        }
        -:15799:                    }
        -:15800:                    /* content-encoding */
    #####:15801:                    if (list_item_count > 7)
        -:15802:                    {
    #####:15803:                        item_value = amqpvalue_get_list_item(list_value, 7);
    #####:15804:                        if (item_value == NULL)
        -:15805:                        {
        -:15806:                            /* do nothing */
        -:15807:                        }
        -:15808:                        else
        -:15809:                        {
    #####:15810:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15811:                            {
        -:15812:                                /* no error, field is not mandatory */
        -:15813:                            }
        -:15814:                            else
        -:15815:                            {
        -:15816:                                const char* content_encoding;
    #####:15817:                                if (amqpvalue_get_symbol(item_value, &content_encoding) != 0)
        -:15818:                                {
    #####:15819:                                    amqpvalue_destroy(item_value);
    #####:15820:                                    properties_destroy(*properties_handle);
    #####:15821:                                    result = MU_FAILURE;
    #####:15822:                                    break;
        -:15823:                                }
        -:15824:                            }
        -:15825:
    #####:15826:                            amqpvalue_destroy(item_value);
        -:15827:                        }
        -:15828:                    }
        -:15829:                    /* absolute-expiry-time */
    #####:15830:                    if (list_item_count > 8)
        -:15831:                    {
    #####:15832:                        item_value = amqpvalue_get_list_item(list_value, 8);
    #####:15833:                        if (item_value == NULL)
        -:15834:                        {
        -:15835:                            /* do nothing */
        -:15836:                        }
        -:15837:                        else
        -:15838:                        {
    #####:15839:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15840:                            {
        -:15841:                                /* no error, field is not mandatory */
        -:15842:                            }
        -:15843:                            else
        -:15844:                            {
        -:15845:                                timestamp absolute_expiry_time;
    #####:15846:                                if (amqpvalue_get_timestamp(item_value, &absolute_expiry_time) != 0)
        -:15847:                                {
    #####:15848:                                    amqpvalue_destroy(item_value);
    #####:15849:                                    properties_destroy(*properties_handle);
    #####:15850:                                    result = MU_FAILURE;
    #####:15851:                                    break;
        -:15852:                                }
        -:15853:                            }
        -:15854:
    #####:15855:                            amqpvalue_destroy(item_value);
        -:15856:                        }
        -:15857:                    }
        -:15858:                    /* creation-time */
    #####:15859:                    if (list_item_count > 9)
        -:15860:                    {
    #####:15861:                        item_value = amqpvalue_get_list_item(list_value, 9);
    #####:15862:                        if (item_value == NULL)
        -:15863:                        {
        -:15864:                            /* do nothing */
        -:15865:                        }
        -:15866:                        else
        -:15867:                        {
    #####:15868:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15869:                            {
        -:15870:                                /* no error, field is not mandatory */
        -:15871:                            }
        -:15872:                            else
        -:15873:                            {
        -:15874:                                timestamp creation_time;
    #####:15875:                                if (amqpvalue_get_timestamp(item_value, &creation_time) != 0)
        -:15876:                                {
    #####:15877:                                    amqpvalue_destroy(item_value);
    #####:15878:                                    properties_destroy(*properties_handle);
    #####:15879:                                    result = MU_FAILURE;
    #####:15880:                                    break;
        -:15881:                                }
        -:15882:                            }
        -:15883:
    #####:15884:                            amqpvalue_destroy(item_value);
        -:15885:                        }
        -:15886:                    }
        -:15887:                    /* group-id */
    #####:15888:                    if (list_item_count > 10)
        -:15889:                    {
    #####:15890:                        item_value = amqpvalue_get_list_item(list_value, 10);
    #####:15891:                        if (item_value == NULL)
        -:15892:                        {
        -:15893:                            /* do nothing */
        -:15894:                        }
        -:15895:                        else
        -:15896:                        {
    #####:15897:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15898:                            {
        -:15899:                                /* no error, field is not mandatory */
        -:15900:                            }
        -:15901:                            else
        -:15902:                            {
        -:15903:                                const char* group_id;
    #####:15904:                                if (amqpvalue_get_string(item_value, &group_id) != 0)
        -:15905:                                {
    #####:15906:                                    amqpvalue_destroy(item_value);
    #####:15907:                                    properties_destroy(*properties_handle);
    #####:15908:                                    result = MU_FAILURE;
    #####:15909:                                    break;
        -:15910:                                }
        -:15911:                            }
        -:15912:
    #####:15913:                            amqpvalue_destroy(item_value);
        -:15914:                        }
        -:15915:                    }
        -:15916:                    /* group-sequence */
    #####:15917:                    if (list_item_count > 11)
        -:15918:                    {
    #####:15919:                        item_value = amqpvalue_get_list_item(list_value, 11);
    #####:15920:                        if (item_value == NULL)
        -:15921:                        {
        -:15922:                            /* do nothing */
        -:15923:                        }
        -:15924:                        else
        -:15925:                        {
    #####:15926:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15927:                            {
        -:15928:                                /* no error, field is not mandatory */
        -:15929:                            }
        -:15930:                            else
        -:15931:                            {
        -:15932:                                sequence_no group_sequence;
    #####:15933:                                if (amqpvalue_get_sequence_no(item_value, &group_sequence) != 0)
        -:15934:                                {
    #####:15935:                                    amqpvalue_destroy(item_value);
    #####:15936:                                    properties_destroy(*properties_handle);
    #####:15937:                                    result = MU_FAILURE;
    #####:15938:                                    break;
        -:15939:                                }
        -:15940:                            }
        -:15941:
    #####:15942:                            amqpvalue_destroy(item_value);
        -:15943:                        }
        -:15944:                    }
        -:15945:                    /* reply-to-group-id */
    #####:15946:                    if (list_item_count > 12)
        -:15947:                    {
    #####:15948:                        item_value = amqpvalue_get_list_item(list_value, 12);
    #####:15949:                        if (item_value == NULL)
        -:15950:                        {
        -:15951:                            /* do nothing */
        -:15952:                        }
        -:15953:                        else
        -:15954:                        {
    #####:15955:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:15956:                            {
        -:15957:                                /* no error, field is not mandatory */
        -:15958:                            }
        -:15959:                            else
        -:15960:                            {
        -:15961:                                const char* reply_to_group_id;
    #####:15962:                                if (amqpvalue_get_string(item_value, &reply_to_group_id) != 0)
        -:15963:                                {
    #####:15964:                                    amqpvalue_destroy(item_value);
    #####:15965:                                    properties_destroy(*properties_handle);
    #####:15966:                                    result = MU_FAILURE;
    #####:15967:                                    break;
        -:15968:                                }
        -:15969:                            }
        -:15970:
    #####:15971:                            amqpvalue_destroy(item_value);
        -:15972:                        }
        -:15973:                    }
        -:15974:
    #####:15975:                    properties_instance->composite_value = amqpvalue_clone(value);
        -:15976:
    #####:15977:                    result = 0;
        -:15978:                } while((void)0,0);
        -:15979:            }
        -:15980:        }
        -:15981:    }
        -:15982:
    #####:15983:    return result;
        -:15984:}
        -:15985:
    #####:15986:int properties_get_message_id(PROPERTIES_HANDLE properties, AMQP_VALUE* message_id_value)
        -:15987:{
        -:15988:    int result;
        -:15989:
    #####:15990:    if (properties == NULL)
        -:15991:    {
    #####:15992:        result = MU_FAILURE;
        -:15993:    }
        -:15994:    else
        -:15995:    {
        -:15996:        uint32_t item_count;
    #####:15997:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:15998:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:15999:        {
    #####:16000:            result = MU_FAILURE;
        -:16001:        }
        -:16002:        else
        -:16003:        {
    #####:16004:            if (item_count <= 0)
        -:16005:            {
    #####:16006:                result = MU_FAILURE;
        -:16007:            }
        -:16008:            else
        -:16009:            {
    #####:16010:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 0);
    #####:16011:                if ((item_value == NULL) ||
    #####:16012:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16013:                {
    #####:16014:                    result = MU_FAILURE;
        -:16015:                }
        -:16016:                else
        -:16017:                {
    #####:16018:                    *message_id_value = item_value;
    #####:16019:                    result = 0;
        -:16020:                }
        -:16021:            }
        -:16022:        }
        -:16023:    }
        -:16024:
    #####:16025:    return result;
        -:16026:}
        -:16027:
    #####:16028:int properties_set_message_id(PROPERTIES_HANDLE properties, AMQP_VALUE message_id_value)
        -:16029:{
        -:16030:    int result;
        -:16031:
    #####:16032:    if (properties == NULL)
        -:16033:    {
    #####:16034:        result = MU_FAILURE;
        -:16035:    }
        -:16036:    else
        -:16037:    {
    #####:16038:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
        -:16039:        AMQP_VALUE message_id_amqp_value;
    #####:16040:        if (message_id_value == NULL)
        -:16041:        {
    #####:16042:            message_id_amqp_value = NULL;
        -:16043:        }
        -:16044:        else
        -:16045:        {
    #####:16046:            message_id_amqp_value = amqpvalue_clone(message_id_value);
        -:16047:        }
    #####:16048:        if (message_id_amqp_value == NULL)
        -:16049:        {
    #####:16050:            result = MU_FAILURE;
        -:16051:        }
        -:16052:        else
        -:16053:        {
    #####:16054:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 0, message_id_amqp_value) != 0)
        -:16055:            {
    #####:16056:                result = MU_FAILURE;
        -:16057:            }
        -:16058:            else
        -:16059:            {
    #####:16060:                result = 0;
        -:16061:            }
        -:16062:
    #####:16063:            amqpvalue_destroy(message_id_amqp_value);
        -:16064:        }
        -:16065:    }
        -:16066:
    #####:16067:    return result;
        -:16068:}
        -:16069:
    #####:16070:int properties_get_user_id(PROPERTIES_HANDLE properties, amqp_binary* user_id_value)
        -:16071:{
        -:16072:    int result;
        -:16073:
    #####:16074:    if (properties == NULL)
        -:16075:    {
    #####:16076:        result = MU_FAILURE;
        -:16077:    }
        -:16078:    else
        -:16079:    {
        -:16080:        uint32_t item_count;
    #####:16081:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16082:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16083:        {
    #####:16084:            result = MU_FAILURE;
        -:16085:        }
        -:16086:        else
        -:16087:        {
    #####:16088:            if (item_count <= 1)
        -:16089:            {
    #####:16090:                result = MU_FAILURE;
        -:16091:            }
        -:16092:            else
        -:16093:            {
    #####:16094:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 1);
    #####:16095:                if ((item_value == NULL) ||
    #####:16096:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16097:                {
    #####:16098:                    result = MU_FAILURE;
        -:16099:                }
        -:16100:                else
        -:16101:                {
    #####:16102:                    int get_single_value_result = amqpvalue_get_binary(item_value, user_id_value);
    #####:16103:                    if (get_single_value_result != 0)
        -:16104:                    {
    #####:16105:                        result = MU_FAILURE;
        -:16106:                    }
        -:16107:                    else
        -:16108:                    {
    #####:16109:                        result = 0;
        -:16110:                    }
        -:16111:                }
        -:16112:            }
        -:16113:        }
        -:16114:    }
        -:16115:
    #####:16116:    return result;
        -:16117:}
        -:16118:
    #####:16119:int properties_set_user_id(PROPERTIES_HANDLE properties, amqp_binary user_id_value)
        -:16120:{
        -:16121:    int result;
        -:16122:
    #####:16123:    if (properties == NULL)
        -:16124:    {
    #####:16125:        result = MU_FAILURE;
        -:16126:    }
        -:16127:    else
        -:16128:    {
    #####:16129:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16130:        AMQP_VALUE user_id_amqp_value = amqpvalue_create_binary(user_id_value);
    #####:16131:        if (user_id_amqp_value == NULL)
        -:16132:        {
    #####:16133:            result = MU_FAILURE;
        -:16134:        }
        -:16135:        else
        -:16136:        {
    #####:16137:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 1, user_id_amqp_value) != 0)
        -:16138:            {
    #####:16139:                result = MU_FAILURE;
        -:16140:            }
        -:16141:            else
        -:16142:            {
    #####:16143:                result = 0;
        -:16144:            }
        -:16145:
    #####:16146:            amqpvalue_destroy(user_id_amqp_value);
        -:16147:        }
        -:16148:    }
        -:16149:
    #####:16150:    return result;
        -:16151:}
        -:16152:
    #####:16153:int properties_get_to(PROPERTIES_HANDLE properties, AMQP_VALUE* to_value)
        -:16154:{
        -:16155:    int result;
        -:16156:
    #####:16157:    if (properties == NULL)
        -:16158:    {
    #####:16159:        result = MU_FAILURE;
        -:16160:    }
        -:16161:    else
        -:16162:    {
        -:16163:        uint32_t item_count;
    #####:16164:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16165:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16166:        {
    #####:16167:            result = MU_FAILURE;
        -:16168:        }
        -:16169:        else
        -:16170:        {
    #####:16171:            if (item_count <= 2)
        -:16172:            {
    #####:16173:                result = MU_FAILURE;
        -:16174:            }
        -:16175:            else
        -:16176:            {
    #####:16177:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 2);
    #####:16178:                if ((item_value == NULL) ||
    #####:16179:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16180:                {
    #####:16181:                    result = MU_FAILURE;
        -:16182:                }
        -:16183:                else
        -:16184:                {
    #####:16185:                    *to_value = item_value;
    #####:16186:                    result = 0;
        -:16187:                }
        -:16188:            }
        -:16189:        }
        -:16190:    }
        -:16191:
    #####:16192:    return result;
        -:16193:}
        -:16194:
    #####:16195:int properties_set_to(PROPERTIES_HANDLE properties, AMQP_VALUE to_value)
        -:16196:{
        -:16197:    int result;
        -:16198:
    #####:16199:    if (properties == NULL)
        -:16200:    {
    #####:16201:        result = MU_FAILURE;
        -:16202:    }
        -:16203:    else
        -:16204:    {
    #####:16205:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
        -:16206:        AMQP_VALUE to_amqp_value;
    #####:16207:        if (to_value == NULL)
        -:16208:        {
    #####:16209:            to_amqp_value = NULL;
        -:16210:        }
        -:16211:        else
        -:16212:        {
    #####:16213:            to_amqp_value = amqpvalue_clone(to_value);
        -:16214:        }
    #####:16215:        if (to_amqp_value == NULL)
        -:16216:        {
    #####:16217:            result = MU_FAILURE;
        -:16218:        }
        -:16219:        else
        -:16220:        {
    #####:16221:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 2, to_amqp_value) != 0)
        -:16222:            {
    #####:16223:                result = MU_FAILURE;
        -:16224:            }
        -:16225:            else
        -:16226:            {
    #####:16227:                result = 0;
        -:16228:            }
        -:16229:
    #####:16230:            amqpvalue_destroy(to_amqp_value);
        -:16231:        }
        -:16232:    }
        -:16233:
    #####:16234:    return result;
        -:16235:}
        -:16236:
    #####:16237:int properties_get_subject(PROPERTIES_HANDLE properties, const char** subject_value)
        -:16238:{
        -:16239:    int result;
        -:16240:
    #####:16241:    if (properties == NULL)
        -:16242:    {
    #####:16243:        result = MU_FAILURE;
        -:16244:    }
        -:16245:    else
        -:16246:    {
        -:16247:        uint32_t item_count;
    #####:16248:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16249:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16250:        {
    #####:16251:            result = MU_FAILURE;
        -:16252:        }
        -:16253:        else
        -:16254:        {
    #####:16255:            if (item_count <= 3)
        -:16256:            {
    #####:16257:                result = MU_FAILURE;
        -:16258:            }
        -:16259:            else
        -:16260:            {
    #####:16261:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 3);
    #####:16262:                if ((item_value == NULL) ||
    #####:16263:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16264:                {
    #####:16265:                    result = MU_FAILURE;
        -:16266:                }
        -:16267:                else
        -:16268:                {
    #####:16269:                    int get_single_value_result = amqpvalue_get_string(item_value, subject_value);
    #####:16270:                    if (get_single_value_result != 0)
        -:16271:                    {
    #####:16272:                        result = MU_FAILURE;
        -:16273:                    }
        -:16274:                    else
        -:16275:                    {
    #####:16276:                        result = 0;
        -:16277:                    }
        -:16278:                }
        -:16279:            }
        -:16280:        }
        -:16281:    }
        -:16282:
    #####:16283:    return result;
        -:16284:}
        -:16285:
    #####:16286:int properties_set_subject(PROPERTIES_HANDLE properties, const char* subject_value)
        -:16287:{
        -:16288:    int result;
        -:16289:
    #####:16290:    if (properties == NULL)
        -:16291:    {
    #####:16292:        result = MU_FAILURE;
        -:16293:    }
        -:16294:    else
        -:16295:    {
    #####:16296:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16297:        AMQP_VALUE subject_amqp_value = amqpvalue_create_string(subject_value);
    #####:16298:        if (subject_amqp_value == NULL)
        -:16299:        {
    #####:16300:            result = MU_FAILURE;
        -:16301:        }
        -:16302:        else
        -:16303:        {
    #####:16304:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 3, subject_amqp_value) != 0)
        -:16305:            {
    #####:16306:                result = MU_FAILURE;
        -:16307:            }
        -:16308:            else
        -:16309:            {
    #####:16310:                result = 0;
        -:16311:            }
        -:16312:
    #####:16313:            amqpvalue_destroy(subject_amqp_value);
        -:16314:        }
        -:16315:    }
        -:16316:
    #####:16317:    return result;
        -:16318:}
        -:16319:
    #####:16320:int properties_get_reply_to(PROPERTIES_HANDLE properties, AMQP_VALUE* reply_to_value)
        -:16321:{
        -:16322:    int result;
        -:16323:
    #####:16324:    if (properties == NULL)
        -:16325:    {
    #####:16326:        result = MU_FAILURE;
        -:16327:    }
        -:16328:    else
        -:16329:    {
        -:16330:        uint32_t item_count;
    #####:16331:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16332:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16333:        {
    #####:16334:            result = MU_FAILURE;
        -:16335:        }
        -:16336:        else
        -:16337:        {
    #####:16338:            if (item_count <= 4)
        -:16339:            {
    #####:16340:                result = MU_FAILURE;
        -:16341:            }
        -:16342:            else
        -:16343:            {
    #####:16344:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 4);
    #####:16345:                if ((item_value == NULL) ||
    #####:16346:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16347:                {
    #####:16348:                    result = MU_FAILURE;
        -:16349:                }
        -:16350:                else
        -:16351:                {
    #####:16352:                    *reply_to_value = item_value;
    #####:16353:                    result = 0;
        -:16354:                }
        -:16355:            }
        -:16356:        }
        -:16357:    }
        -:16358:
    #####:16359:    return result;
        -:16360:}
        -:16361:
    #####:16362:int properties_set_reply_to(PROPERTIES_HANDLE properties, AMQP_VALUE reply_to_value)
        -:16363:{
        -:16364:    int result;
        -:16365:
    #####:16366:    if (properties == NULL)
        -:16367:    {
    #####:16368:        result = MU_FAILURE;
        -:16369:    }
        -:16370:    else
        -:16371:    {
    #####:16372:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
        -:16373:        AMQP_VALUE reply_to_amqp_value;
    #####:16374:        if (reply_to_value == NULL)
        -:16375:        {
    #####:16376:            reply_to_amqp_value = NULL;
        -:16377:        }
        -:16378:        else
        -:16379:        {
    #####:16380:            reply_to_amqp_value = amqpvalue_clone(reply_to_value);
        -:16381:        }
    #####:16382:        if (reply_to_amqp_value == NULL)
        -:16383:        {
    #####:16384:            result = MU_FAILURE;
        -:16385:        }
        -:16386:        else
        -:16387:        {
    #####:16388:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 4, reply_to_amqp_value) != 0)
        -:16389:            {
    #####:16390:                result = MU_FAILURE;
        -:16391:            }
        -:16392:            else
        -:16393:            {
    #####:16394:                result = 0;
        -:16395:            }
        -:16396:
    #####:16397:            amqpvalue_destroy(reply_to_amqp_value);
        -:16398:        }
        -:16399:    }
        -:16400:
    #####:16401:    return result;
        -:16402:}
        -:16403:
    #####:16404:int properties_get_correlation_id(PROPERTIES_HANDLE properties, AMQP_VALUE* correlation_id_value)
        -:16405:{
        -:16406:    int result;
        -:16407:
    #####:16408:    if (properties == NULL)
        -:16409:    {
    #####:16410:        result = MU_FAILURE;
        -:16411:    }
        -:16412:    else
        -:16413:    {
        -:16414:        uint32_t item_count;
    #####:16415:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16416:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16417:        {
    #####:16418:            result = MU_FAILURE;
        -:16419:        }
        -:16420:        else
        -:16421:        {
    #####:16422:            if (item_count <= 5)
        -:16423:            {
    #####:16424:                result = MU_FAILURE;
        -:16425:            }
        -:16426:            else
        -:16427:            {
    #####:16428:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 5);
    #####:16429:                if ((item_value == NULL) ||
    #####:16430:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16431:                {
    #####:16432:                    result = MU_FAILURE;
        -:16433:                }
        -:16434:                else
        -:16435:                {
    #####:16436:                    *correlation_id_value = item_value;
    #####:16437:                    result = 0;
        -:16438:                }
        -:16439:            }
        -:16440:        }
        -:16441:    }
        -:16442:
    #####:16443:    return result;
        -:16444:}
        -:16445:
    #####:16446:int properties_set_correlation_id(PROPERTIES_HANDLE properties, AMQP_VALUE correlation_id_value)
        -:16447:{
        -:16448:    int result;
        -:16449:
    #####:16450:    if (properties == NULL)
        -:16451:    {
    #####:16452:        result = MU_FAILURE;
        -:16453:    }
        -:16454:    else
        -:16455:    {
    #####:16456:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
        -:16457:        AMQP_VALUE correlation_id_amqp_value;
    #####:16458:        if (correlation_id_value == NULL)
        -:16459:        {
    #####:16460:            correlation_id_amqp_value = NULL;
        -:16461:        }
        -:16462:        else
        -:16463:        {
    #####:16464:            correlation_id_amqp_value = amqpvalue_clone(correlation_id_value);
        -:16465:        }
    #####:16466:        if (correlation_id_amqp_value == NULL)
        -:16467:        {
    #####:16468:            result = MU_FAILURE;
        -:16469:        }
        -:16470:        else
        -:16471:        {
    #####:16472:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 5, correlation_id_amqp_value) != 0)
        -:16473:            {
    #####:16474:                result = MU_FAILURE;
        -:16475:            }
        -:16476:            else
        -:16477:            {
    #####:16478:                result = 0;
        -:16479:            }
        -:16480:
    #####:16481:            amqpvalue_destroy(correlation_id_amqp_value);
        -:16482:        }
        -:16483:    }
        -:16484:
    #####:16485:    return result;
        -:16486:}
        -:16487:
    #####:16488:int properties_get_content_type(PROPERTIES_HANDLE properties, const char** content_type_value)
        -:16489:{
        -:16490:    int result;
        -:16491:
    #####:16492:    if (properties == NULL)
        -:16493:    {
    #####:16494:        result = MU_FAILURE;
        -:16495:    }
        -:16496:    else
        -:16497:    {
        -:16498:        uint32_t item_count;
    #####:16499:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16500:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16501:        {
    #####:16502:            result = MU_FAILURE;
        -:16503:        }
        -:16504:        else
        -:16505:        {
    #####:16506:            if (item_count <= 6)
        -:16507:            {
    #####:16508:                result = MU_FAILURE;
        -:16509:            }
        -:16510:            else
        -:16511:            {
    #####:16512:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 6);
    #####:16513:                if ((item_value == NULL) ||
    #####:16514:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16515:                {
    #####:16516:                    result = MU_FAILURE;
        -:16517:                }
        -:16518:                else
        -:16519:                {
    #####:16520:                    int get_single_value_result = amqpvalue_get_symbol(item_value, content_type_value);
    #####:16521:                    if (get_single_value_result != 0)
        -:16522:                    {
    #####:16523:                        result = MU_FAILURE;
        -:16524:                    }
        -:16525:                    else
        -:16526:                    {
    #####:16527:                        result = 0;
        -:16528:                    }
        -:16529:                }
        -:16530:            }
        -:16531:        }
        -:16532:    }
        -:16533:
    #####:16534:    return result;
        -:16535:}
        -:16536:
    #####:16537:int properties_set_content_type(PROPERTIES_HANDLE properties, const char* content_type_value)
        -:16538:{
        -:16539:    int result;
        -:16540:
    #####:16541:    if (properties == NULL)
        -:16542:    {
    #####:16543:        result = MU_FAILURE;
        -:16544:    }
        -:16545:    else
        -:16546:    {
    #####:16547:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16548:        AMQP_VALUE content_type_amqp_value = amqpvalue_create_symbol(content_type_value);
    #####:16549:        if (content_type_amqp_value == NULL)
        -:16550:        {
    #####:16551:            result = MU_FAILURE;
        -:16552:        }
        -:16553:        else
        -:16554:        {
    #####:16555:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 6, content_type_amqp_value) != 0)
        -:16556:            {
    #####:16557:                result = MU_FAILURE;
        -:16558:            }
        -:16559:            else
        -:16560:            {
    #####:16561:                result = 0;
        -:16562:            }
        -:16563:
    #####:16564:            amqpvalue_destroy(content_type_amqp_value);
        -:16565:        }
        -:16566:    }
        -:16567:
    #####:16568:    return result;
        -:16569:}
        -:16570:
    #####:16571:int properties_get_content_encoding(PROPERTIES_HANDLE properties, const char** content_encoding_value)
        -:16572:{
        -:16573:    int result;
        -:16574:
    #####:16575:    if (properties == NULL)
        -:16576:    {
    #####:16577:        result = MU_FAILURE;
        -:16578:    }
        -:16579:    else
        -:16580:    {
        -:16581:        uint32_t item_count;
    #####:16582:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16583:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16584:        {
    #####:16585:            result = MU_FAILURE;
        -:16586:        }
        -:16587:        else
        -:16588:        {
    #####:16589:            if (item_count <= 7)
        -:16590:            {
    #####:16591:                result = MU_FAILURE;
        -:16592:            }
        -:16593:            else
        -:16594:            {
    #####:16595:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 7);
    #####:16596:                if ((item_value == NULL) ||
    #####:16597:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16598:                {
    #####:16599:                    result = MU_FAILURE;
        -:16600:                }
        -:16601:                else
        -:16602:                {
    #####:16603:                    int get_single_value_result = amqpvalue_get_symbol(item_value, content_encoding_value);
    #####:16604:                    if (get_single_value_result != 0)
        -:16605:                    {
    #####:16606:                        result = MU_FAILURE;
        -:16607:                    }
        -:16608:                    else
        -:16609:                    {
    #####:16610:                        result = 0;
        -:16611:                    }
        -:16612:                }
        -:16613:            }
        -:16614:        }
        -:16615:    }
        -:16616:
    #####:16617:    return result;
        -:16618:}
        -:16619:
    #####:16620:int properties_set_content_encoding(PROPERTIES_HANDLE properties, const char* content_encoding_value)
        -:16621:{
        -:16622:    int result;
        -:16623:
    #####:16624:    if (properties == NULL)
        -:16625:    {
    #####:16626:        result = MU_FAILURE;
        -:16627:    }
        -:16628:    else
        -:16629:    {
    #####:16630:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16631:        AMQP_VALUE content_encoding_amqp_value = amqpvalue_create_symbol(content_encoding_value);
    #####:16632:        if (content_encoding_amqp_value == NULL)
        -:16633:        {
    #####:16634:            result = MU_FAILURE;
        -:16635:        }
        -:16636:        else
        -:16637:        {
    #####:16638:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 7, content_encoding_amqp_value) != 0)
        -:16639:            {
    #####:16640:                result = MU_FAILURE;
        -:16641:            }
        -:16642:            else
        -:16643:            {
    #####:16644:                result = 0;
        -:16645:            }
        -:16646:
    #####:16647:            amqpvalue_destroy(content_encoding_amqp_value);
        -:16648:        }
        -:16649:    }
        -:16650:
    #####:16651:    return result;
        -:16652:}
        -:16653:
    #####:16654:int properties_get_absolute_expiry_time(PROPERTIES_HANDLE properties, timestamp* absolute_expiry_time_value)
        -:16655:{
        -:16656:    int result;
        -:16657:
    #####:16658:    if (properties == NULL)
        -:16659:    {
    #####:16660:        result = MU_FAILURE;
        -:16661:    }
        -:16662:    else
        -:16663:    {
        -:16664:        uint32_t item_count;
    #####:16665:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16666:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16667:        {
    #####:16668:            result = MU_FAILURE;
        -:16669:        }
        -:16670:        else
        -:16671:        {
    #####:16672:            if (item_count <= 8)
        -:16673:            {
    #####:16674:                result = MU_FAILURE;
        -:16675:            }
        -:16676:            else
        -:16677:            {
    #####:16678:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 8);
    #####:16679:                if ((item_value == NULL) ||
    #####:16680:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16681:                {
    #####:16682:                    result = MU_FAILURE;
        -:16683:                }
        -:16684:                else
        -:16685:                {
    #####:16686:                    int get_single_value_result = amqpvalue_get_timestamp(item_value, absolute_expiry_time_value);
    #####:16687:                    if (get_single_value_result != 0)
        -:16688:                    {
    #####:16689:                        result = MU_FAILURE;
        -:16690:                    }
        -:16691:                    else
        -:16692:                    {
    #####:16693:                        result = 0;
        -:16694:                    }
        -:16695:                }
        -:16696:            }
        -:16697:        }
        -:16698:    }
        -:16699:
    #####:16700:    return result;
        -:16701:}
        -:16702:
    #####:16703:int properties_set_absolute_expiry_time(PROPERTIES_HANDLE properties, timestamp absolute_expiry_time_value)
        -:16704:{
        -:16705:    int result;
        -:16706:
    #####:16707:    if (properties == NULL)
        -:16708:    {
    #####:16709:        result = MU_FAILURE;
        -:16710:    }
        -:16711:    else
        -:16712:    {
    #####:16713:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16714:        AMQP_VALUE absolute_expiry_time_amqp_value = amqpvalue_create_timestamp(absolute_expiry_time_value);
    #####:16715:        if (absolute_expiry_time_amqp_value == NULL)
        -:16716:        {
    #####:16717:            result = MU_FAILURE;
        -:16718:        }
        -:16719:        else
        -:16720:        {
    #####:16721:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 8, absolute_expiry_time_amqp_value) != 0)
        -:16722:            {
    #####:16723:                result = MU_FAILURE;
        -:16724:            }
        -:16725:            else
        -:16726:            {
    #####:16727:                result = 0;
        -:16728:            }
        -:16729:
    #####:16730:            amqpvalue_destroy(absolute_expiry_time_amqp_value);
        -:16731:        }
        -:16732:    }
        -:16733:
    #####:16734:    return result;
        -:16735:}
        -:16736:
    #####:16737:int properties_get_creation_time(PROPERTIES_HANDLE properties, timestamp* creation_time_value)
        -:16738:{
        -:16739:    int result;
        -:16740:
    #####:16741:    if (properties == NULL)
        -:16742:    {
    #####:16743:        result = MU_FAILURE;
        -:16744:    }
        -:16745:    else
        -:16746:    {
        -:16747:        uint32_t item_count;
    #####:16748:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16749:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16750:        {
    #####:16751:            result = MU_FAILURE;
        -:16752:        }
        -:16753:        else
        -:16754:        {
    #####:16755:            if (item_count <= 9)
        -:16756:            {
    #####:16757:                result = MU_FAILURE;
        -:16758:            }
        -:16759:            else
        -:16760:            {
    #####:16761:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 9);
    #####:16762:                if ((item_value == NULL) ||
    #####:16763:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16764:                {
    #####:16765:                    result = MU_FAILURE;
        -:16766:                }
        -:16767:                else
        -:16768:                {
    #####:16769:                    int get_single_value_result = amqpvalue_get_timestamp(item_value, creation_time_value);
    #####:16770:                    if (get_single_value_result != 0)
        -:16771:                    {
    #####:16772:                        result = MU_FAILURE;
        -:16773:                    }
        -:16774:                    else
        -:16775:                    {
    #####:16776:                        result = 0;
        -:16777:                    }
        -:16778:                }
        -:16779:            }
        -:16780:        }
        -:16781:    }
        -:16782:
    #####:16783:    return result;
        -:16784:}
        -:16785:
    #####:16786:int properties_set_creation_time(PROPERTIES_HANDLE properties, timestamp creation_time_value)
        -:16787:{
        -:16788:    int result;
        -:16789:
    #####:16790:    if (properties == NULL)
        -:16791:    {
    #####:16792:        result = MU_FAILURE;
        -:16793:    }
        -:16794:    else
        -:16795:    {
    #####:16796:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16797:        AMQP_VALUE creation_time_amqp_value = amqpvalue_create_timestamp(creation_time_value);
    #####:16798:        if (creation_time_amqp_value == NULL)
        -:16799:        {
    #####:16800:            result = MU_FAILURE;
        -:16801:        }
        -:16802:        else
        -:16803:        {
    #####:16804:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 9, creation_time_amqp_value) != 0)
        -:16805:            {
    #####:16806:                result = MU_FAILURE;
        -:16807:            }
        -:16808:            else
        -:16809:            {
    #####:16810:                result = 0;
        -:16811:            }
        -:16812:
    #####:16813:            amqpvalue_destroy(creation_time_amqp_value);
        -:16814:        }
        -:16815:    }
        -:16816:
    #####:16817:    return result;
        -:16818:}
        -:16819:
    #####:16820:int properties_get_group_id(PROPERTIES_HANDLE properties, const char** group_id_value)
        -:16821:{
        -:16822:    int result;
        -:16823:
    #####:16824:    if (properties == NULL)
        -:16825:    {
    #####:16826:        result = MU_FAILURE;
        -:16827:    }
        -:16828:    else
        -:16829:    {
        -:16830:        uint32_t item_count;
    #####:16831:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16832:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16833:        {
    #####:16834:            result = MU_FAILURE;
        -:16835:        }
        -:16836:        else
        -:16837:        {
    #####:16838:            if (item_count <= 10)
        -:16839:            {
    #####:16840:                result = MU_FAILURE;
        -:16841:            }
        -:16842:            else
        -:16843:            {
    #####:16844:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 10);
    #####:16845:                if ((item_value == NULL) ||
    #####:16846:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16847:                {
    #####:16848:                    result = MU_FAILURE;
        -:16849:                }
        -:16850:                else
        -:16851:                {
    #####:16852:                    int get_single_value_result = amqpvalue_get_string(item_value, group_id_value);
    #####:16853:                    if (get_single_value_result != 0)
        -:16854:                    {
    #####:16855:                        result = MU_FAILURE;
        -:16856:                    }
        -:16857:                    else
        -:16858:                    {
    #####:16859:                        result = 0;
        -:16860:                    }
        -:16861:                }
        -:16862:            }
        -:16863:        }
        -:16864:    }
        -:16865:
    #####:16866:    return result;
        -:16867:}
        -:16868:
    #####:16869:int properties_set_group_id(PROPERTIES_HANDLE properties, const char* group_id_value)
        -:16870:{
        -:16871:    int result;
        -:16872:
    #####:16873:    if (properties == NULL)
        -:16874:    {
    #####:16875:        result = MU_FAILURE;
        -:16876:    }
        -:16877:    else
        -:16878:    {
    #####:16879:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16880:        AMQP_VALUE group_id_amqp_value = amqpvalue_create_string(group_id_value);
    #####:16881:        if (group_id_amqp_value == NULL)
        -:16882:        {
    #####:16883:            result = MU_FAILURE;
        -:16884:        }
        -:16885:        else
        -:16886:        {
    #####:16887:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 10, group_id_amqp_value) != 0)
        -:16888:            {
    #####:16889:                result = MU_FAILURE;
        -:16890:            }
        -:16891:            else
        -:16892:            {
    #####:16893:                result = 0;
        -:16894:            }
        -:16895:
    #####:16896:            amqpvalue_destroy(group_id_amqp_value);
        -:16897:        }
        -:16898:    }
        -:16899:
    #####:16900:    return result;
        -:16901:}
        -:16902:
    #####:16903:int properties_get_group_sequence(PROPERTIES_HANDLE properties, sequence_no* group_sequence_value)
        -:16904:{
        -:16905:    int result;
        -:16906:
    #####:16907:    if (properties == NULL)
        -:16908:    {
    #####:16909:        result = MU_FAILURE;
        -:16910:    }
        -:16911:    else
        -:16912:    {
        -:16913:        uint32_t item_count;
    #####:16914:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16915:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16916:        {
    #####:16917:            result = MU_FAILURE;
        -:16918:        }
        -:16919:        else
        -:16920:        {
    #####:16921:            if (item_count <= 11)
        -:16922:            {
    #####:16923:                result = MU_FAILURE;
        -:16924:            }
        -:16925:            else
        -:16926:            {
    #####:16927:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 11);
    #####:16928:                if ((item_value == NULL) ||
    #####:16929:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:16930:                {
    #####:16931:                    result = MU_FAILURE;
        -:16932:                }
        -:16933:                else
        -:16934:                {
    #####:16935:                    int get_single_value_result = amqpvalue_get_sequence_no(item_value, group_sequence_value);
    #####:16936:                    if (get_single_value_result != 0)
        -:16937:                    {
    #####:16938:                        result = MU_FAILURE;
        -:16939:                    }
        -:16940:                    else
        -:16941:                    {
    #####:16942:                        result = 0;
        -:16943:                    }
        -:16944:                }
        -:16945:            }
        -:16946:        }
        -:16947:    }
        -:16948:
    #####:16949:    return result;
        -:16950:}
        -:16951:
    #####:16952:int properties_set_group_sequence(PROPERTIES_HANDLE properties, sequence_no group_sequence_value)
        -:16953:{
        -:16954:    int result;
        -:16955:
    #####:16956:    if (properties == NULL)
        -:16957:    {
    #####:16958:        result = MU_FAILURE;
        -:16959:    }
        -:16960:    else
        -:16961:    {
    #####:16962:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16963:        AMQP_VALUE group_sequence_amqp_value = amqpvalue_create_sequence_no(group_sequence_value);
    #####:16964:        if (group_sequence_amqp_value == NULL)
        -:16965:        {
    #####:16966:            result = MU_FAILURE;
        -:16967:        }
        -:16968:        else
        -:16969:        {
    #####:16970:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 11, group_sequence_amqp_value) != 0)
        -:16971:            {
    #####:16972:                result = MU_FAILURE;
        -:16973:            }
        -:16974:            else
        -:16975:            {
    #####:16976:                result = 0;
        -:16977:            }
        -:16978:
    #####:16979:            amqpvalue_destroy(group_sequence_amqp_value);
        -:16980:        }
        -:16981:    }
        -:16982:
    #####:16983:    return result;
        -:16984:}
        -:16985:
    #####:16986:int properties_get_reply_to_group_id(PROPERTIES_HANDLE properties, const char** reply_to_group_id_value)
        -:16987:{
        -:16988:    int result;
        -:16989:
    #####:16990:    if (properties == NULL)
        -:16991:    {
    #####:16992:        result = MU_FAILURE;
        -:16993:    }
        -:16994:    else
        -:16995:    {
        -:16996:        uint32_t item_count;
    #####:16997:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:16998:        if (amqpvalue_get_composite_item_count(properties_instance->composite_value, &item_count) != 0)
        -:16999:        {
    #####:17000:            result = MU_FAILURE;
        -:17001:        }
        -:17002:        else
        -:17003:        {
    #####:17004:            if (item_count <= 12)
        -:17005:            {
    #####:17006:                result = MU_FAILURE;
        -:17007:            }
        -:17008:            else
        -:17009:            {
    #####:17010:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(properties_instance->composite_value, 12);
    #####:17011:                if ((item_value == NULL) ||
    #####:17012:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:17013:                {
    #####:17014:                    result = MU_FAILURE;
        -:17015:                }
        -:17016:                else
        -:17017:                {
    #####:17018:                    int get_single_value_result = amqpvalue_get_string(item_value, reply_to_group_id_value);
    #####:17019:                    if (get_single_value_result != 0)
        -:17020:                    {
    #####:17021:                        result = MU_FAILURE;
        -:17022:                    }
        -:17023:                    else
        -:17024:                    {
    #####:17025:                        result = 0;
        -:17026:                    }
        -:17027:                }
        -:17028:            }
        -:17029:        }
        -:17030:    }
        -:17031:
    #####:17032:    return result;
        -:17033:}
        -:17034:
    #####:17035:int properties_set_reply_to_group_id(PROPERTIES_HANDLE properties, const char* reply_to_group_id_value)
        -:17036:{
        -:17037:    int result;
        -:17038:
    #####:17039:    if (properties == NULL)
        -:17040:    {
    #####:17041:        result = MU_FAILURE;
        -:17042:    }
        -:17043:    else
        -:17044:    {
    #####:17045:        PROPERTIES_INSTANCE* properties_instance = (PROPERTIES_INSTANCE*)properties;
    #####:17046:        AMQP_VALUE reply_to_group_id_amqp_value = amqpvalue_create_string(reply_to_group_id_value);
    #####:17047:        if (reply_to_group_id_amqp_value == NULL)
        -:17048:        {
    #####:17049:            result = MU_FAILURE;
        -:17050:        }
        -:17051:        else
        -:17052:        {
    #####:17053:            if (amqpvalue_set_composite_item(properties_instance->composite_value, 12, reply_to_group_id_amqp_value) != 0)
        -:17054:            {
    #####:17055:                result = MU_FAILURE;
        -:17056:            }
        -:17057:            else
        -:17058:            {
    #####:17059:                result = 0;
        -:17060:            }
        -:17061:
    #####:17062:            amqpvalue_destroy(reply_to_group_id_amqp_value);
        -:17063:        }
        -:17064:    }
        -:17065:
    #####:17066:    return result;
        -:17067:}
        -:17068:
        -:17069:
        -:17070:/* received */
        -:17071:
        -:17072:typedef struct RECEIVED_INSTANCE_TAG
        -:17073:{
        -:17074:    AMQP_VALUE composite_value;
        -:17075:} RECEIVED_INSTANCE;
        -:17076:
    #####:17077:static RECEIVED_HANDLE received_create_internal(void)
        -:17078:{
    #####:17079:    RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)malloc(sizeof(RECEIVED_INSTANCE));
    #####:17080:    if (received_instance != NULL)
        -:17081:    {
    #####:17082:        received_instance->composite_value = NULL;
        -:17083:    }
        -:17084:
    #####:17085:    return received_instance;
        -:17086:}
        -:17087:
    #####:17088:RECEIVED_HANDLE received_create(uint32_t section_number_value, uint64_t section_offset_value)
        -:17089:{
    #####:17090:    RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)malloc(sizeof(RECEIVED_INSTANCE));
    #####:17091:    if (received_instance != NULL)
        -:17092:    {
    #####:17093:        received_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(35);
    #####:17094:        if (received_instance->composite_value == NULL)
        -:17095:        {
    #####:17096:            free(received_instance);
    #####:17097:            received_instance = NULL;
        -:17098:        }
        -:17099:        else
        -:17100:        {
        -:17101:            AMQP_VALUE section_number_amqp_value;
        -:17102:            AMQP_VALUE section_offset_amqp_value;
    #####:17103:            int result = 0;
        -:17104:
    #####:17105:            section_number_amqp_value = amqpvalue_create_uint(section_number_value);
    #####:17106:            if ((result == 0) && (amqpvalue_set_composite_item(received_instance->composite_value, 0, section_number_amqp_value) != 0))
        -:17107:            {
    #####:17108:                result = MU_FAILURE;
        -:17109:            }
    #####:17110:            section_offset_amqp_value = amqpvalue_create_ulong(section_offset_value);
    #####:17111:            if ((result == 0) && (amqpvalue_set_composite_item(received_instance->composite_value, 1, section_offset_amqp_value) != 0))
        -:17112:            {
    #####:17113:                result = MU_FAILURE;
        -:17114:            }
        -:17115:
    #####:17116:            amqpvalue_destroy(section_number_amqp_value);
    #####:17117:            amqpvalue_destroy(section_offset_amqp_value);
        -:17118:        }
        -:17119:    }
        -:17120:
    #####:17121:    return received_instance;
        -:17122:}
        -:17123:
    #####:17124:RECEIVED_HANDLE received_clone(RECEIVED_HANDLE value)
        -:17125:{
    #####:17126:    RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)malloc(sizeof(RECEIVED_INSTANCE));
    #####:17127:    if (received_instance != NULL)
        -:17128:    {
    #####:17129:        received_instance->composite_value = amqpvalue_clone(((RECEIVED_INSTANCE*)value)->composite_value);
    #####:17130:        if (received_instance->composite_value == NULL)
        -:17131:        {
    #####:17132:            free(received_instance);
    #####:17133:            received_instance = NULL;
        -:17134:        }
        -:17135:    }
        -:17136:
    #####:17137:    return received_instance;
        -:17138:}
        -:17139:
    #####:17140:void received_destroy(RECEIVED_HANDLE received)
        -:17141:{
    #####:17142:    if (received != NULL)
        -:17143:    {
    #####:17144:        RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)received;
    #####:17145:        amqpvalue_destroy(received_instance->composite_value);
    #####:17146:        free(received_instance);
        -:17147:    }
    #####:17148:}
        -:17149:
    #####:17150:AMQP_VALUE amqpvalue_create_received(RECEIVED_HANDLE received)
        -:17151:{
        -:17152:    AMQP_VALUE result;
        -:17153:
    #####:17154:    if (received == NULL)
        -:17155:    {
    #####:17156:        result = NULL;
        -:17157:    }
        -:17158:    else
        -:17159:    {
    #####:17160:        RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)received;
    #####:17161:        result = amqpvalue_clone(received_instance->composite_value);
        -:17162:    }
        -:17163:
    #####:17164:    return result;
        -:17165:}
        -:17166:
    #####:17167:bool is_received_type_by_descriptor(AMQP_VALUE descriptor)
        -:17168:{
        -:17169:    bool result;
        -:17170:
        -:17171:    uint64_t descriptor_ulong;
    #####:17172:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:17173:        (descriptor_ulong == 35))
        -:17174:    {
    #####:17175:        result = true;
        -:17176:    }
        -:17177:    else
        -:17178:    {
    #####:17179:        result = false;
        -:17180:    }
        -:17181:
    #####:17182:    return result;
        -:17183:}
        -:17184:
        -:17185:
    #####:17186:int amqpvalue_get_received(AMQP_VALUE value, RECEIVED_HANDLE* received_handle)
        -:17187:{
        -:17188:    int result;
    #####:17189:    RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)received_create_internal();
    #####:17190:    *received_handle = received_instance;
    #####:17191:    if (*received_handle == NULL)
        -:17192:    {
    #####:17193:        result = MU_FAILURE;
        -:17194:    }
        -:17195:    else
        -:17196:    {
    #####:17197:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:17198:        if (list_value == NULL)
        -:17199:        {
    #####:17200:            received_destroy(*received_handle);
    #####:17201:            result = MU_FAILURE;
        -:17202:        }
        -:17203:        else
        -:17204:        {
        -:17205:            uint32_t list_item_count;
    #####:17206:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:17207:            {
    #####:17208:                result = MU_FAILURE;
        -:17209:            }
        -:17210:            else
        -:17211:            {
        -:17212:                do
        -:17213:                {
        -:17214:                    AMQP_VALUE item_value;
        -:17215:                    /* section-number */
    #####:17216:                    if (list_item_count > 0)
        -:17217:                    {
    #####:17218:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:17219:                        if (item_value == NULL)
        -:17220:                        {
        -:17221:                            {
    #####:17222:                                received_destroy(*received_handle);
    #####:17223:                                result = MU_FAILURE;
    #####:17224:                                break;
        -:17225:                            }
        -:17226:                        }
        -:17227:                        else
        -:17228:                        {
    #####:17229:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:17230:                            {
    #####:17231:                                amqpvalue_destroy(item_value);
    #####:17232:                                received_destroy(*received_handle);
    #####:17233:                                result = MU_FAILURE;
    #####:17234:                                break;
        -:17235:                            }
        -:17236:                            else
        -:17237:                            {
        -:17238:                                uint32_t section_number;
    #####:17239:                                if (amqpvalue_get_uint(item_value, &section_number) != 0)
        -:17240:                                {
    #####:17241:                                    amqpvalue_destroy(item_value);
    #####:17242:                                    received_destroy(*received_handle);
    #####:17243:                                    result = MU_FAILURE;
    #####:17244:                                    break;
        -:17245:                                }
        -:17246:                            }
        -:17247:
    #####:17248:                            amqpvalue_destroy(item_value);
        -:17249:                        }
        -:17250:                    }
        -:17251:                    else
        -:17252:                    {
    #####:17253:                        result = MU_FAILURE;
        -:17254:                    }
        -:17255:                    /* section-offset */
    #####:17256:                    if (list_item_count > 1)
        -:17257:                    {
    #####:17258:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:17259:                        if (item_value == NULL)
        -:17260:                        {
        -:17261:                            {
    #####:17262:                                received_destroy(*received_handle);
    #####:17263:                                result = MU_FAILURE;
    #####:17264:                                break;
        -:17265:                            }
        -:17266:                        }
        -:17267:                        else
        -:17268:                        {
    #####:17269:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:17270:                            {
    #####:17271:                                amqpvalue_destroy(item_value);
    #####:17272:                                received_destroy(*received_handle);
    #####:17273:                                result = MU_FAILURE;
    #####:17274:                                break;
        -:17275:                            }
        -:17276:                            else
        -:17277:                            {
        -:17278:                                uint64_t section_offset;
    #####:17279:                                if (amqpvalue_get_ulong(item_value, &section_offset) != 0)
        -:17280:                                {
    #####:17281:                                    amqpvalue_destroy(item_value);
    #####:17282:                                    received_destroy(*received_handle);
    #####:17283:                                    result = MU_FAILURE;
    #####:17284:                                    break;
        -:17285:                                }
        -:17286:                            }
        -:17287:
    #####:17288:                            amqpvalue_destroy(item_value);
        -:17289:                        }
        -:17290:                    }
        -:17291:                    else
        -:17292:                    {
    #####:17293:                        result = MU_FAILURE;
        -:17294:                    }
        -:17295:
    #####:17296:                    received_instance->composite_value = amqpvalue_clone(value);
        -:17297:
    #####:17298:                    result = 0;
        -:17299:                } while((void)0,0);
        -:17300:            }
        -:17301:        }
        -:17302:    }
        -:17303:
    #####:17304:    return result;
        -:17305:}
        -:17306:
    #####:17307:int received_get_section_number(RECEIVED_HANDLE received, uint32_t* section_number_value)
        -:17308:{
        -:17309:    int result;
        -:17310:
    #####:17311:    if (received == NULL)
        -:17312:    {
    #####:17313:        result = MU_FAILURE;
        -:17314:    }
        -:17315:    else
        -:17316:    {
        -:17317:        uint32_t item_count;
    #####:17318:        RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)received;
    #####:17319:        if (amqpvalue_get_composite_item_count(received_instance->composite_value, &item_count) != 0)
        -:17320:        {
    #####:17321:            result = MU_FAILURE;
        -:17322:        }
        -:17323:        else
        -:17324:        {
    #####:17325:            if (item_count <= 0)
        -:17326:            {
    #####:17327:                result = MU_FAILURE;
        -:17328:            }
        -:17329:            else
        -:17330:            {
    #####:17331:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(received_instance->composite_value, 0);
    #####:17332:                if ((item_value == NULL) ||
    #####:17333:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:17334:                {
    #####:17335:                    result = MU_FAILURE;
        -:17336:                }
        -:17337:                else
        -:17338:                {
    #####:17339:                    int get_single_value_result = amqpvalue_get_uint(item_value, section_number_value);
    #####:17340:                    if (get_single_value_result != 0)
        -:17341:                    {
    #####:17342:                        result = MU_FAILURE;
        -:17343:                    }
        -:17344:                    else
        -:17345:                    {
    #####:17346:                        result = 0;
        -:17347:                    }
        -:17348:                }
        -:17349:            }
        -:17350:        }
        -:17351:    }
        -:17352:
    #####:17353:    return result;
        -:17354:}
        -:17355:
    #####:17356:int received_set_section_number(RECEIVED_HANDLE received, uint32_t section_number_value)
        -:17357:{
        -:17358:    int result;
        -:17359:
    #####:17360:    if (received == NULL)
        -:17361:    {
    #####:17362:        result = MU_FAILURE;
        -:17363:    }
        -:17364:    else
        -:17365:    {
    #####:17366:        RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)received;
    #####:17367:        AMQP_VALUE section_number_amqp_value = amqpvalue_create_uint(section_number_value);
    #####:17368:        if (section_number_amqp_value == NULL)
        -:17369:        {
    #####:17370:            result = MU_FAILURE;
        -:17371:        }
        -:17372:        else
        -:17373:        {
    #####:17374:            if (amqpvalue_set_composite_item(received_instance->composite_value, 0, section_number_amqp_value) != 0)
        -:17375:            {
    #####:17376:                result = MU_FAILURE;
        -:17377:            }
        -:17378:            else
        -:17379:            {
    #####:17380:                result = 0;
        -:17381:            }
        -:17382:
    #####:17383:            amqpvalue_destroy(section_number_amqp_value);
        -:17384:        }
        -:17385:    }
        -:17386:
    #####:17387:    return result;
        -:17388:}
        -:17389:
    #####:17390:int received_get_section_offset(RECEIVED_HANDLE received, uint64_t* section_offset_value)
        -:17391:{
        -:17392:    int result;
        -:17393:
    #####:17394:    if (received == NULL)
        -:17395:    {
    #####:17396:        result = MU_FAILURE;
        -:17397:    }
        -:17398:    else
        -:17399:    {
        -:17400:        uint32_t item_count;
    #####:17401:        RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)received;
    #####:17402:        if (amqpvalue_get_composite_item_count(received_instance->composite_value, &item_count) != 0)
        -:17403:        {
    #####:17404:            result = MU_FAILURE;
        -:17405:        }
        -:17406:        else
        -:17407:        {
    #####:17408:            if (item_count <= 1)
        -:17409:            {
    #####:17410:                result = MU_FAILURE;
        -:17411:            }
        -:17412:            else
        -:17413:            {
    #####:17414:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(received_instance->composite_value, 1);
    #####:17415:                if ((item_value == NULL) ||
    #####:17416:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:17417:                {
    #####:17418:                    result = MU_FAILURE;
        -:17419:                }
        -:17420:                else
        -:17421:                {
    #####:17422:                    int get_single_value_result = amqpvalue_get_ulong(item_value, section_offset_value);
    #####:17423:                    if (get_single_value_result != 0)
        -:17424:                    {
    #####:17425:                        result = MU_FAILURE;
        -:17426:                    }
        -:17427:                    else
        -:17428:                    {
    #####:17429:                        result = 0;
        -:17430:                    }
        -:17431:                }
        -:17432:            }
        -:17433:        }
        -:17434:    }
        -:17435:
    #####:17436:    return result;
        -:17437:}
        -:17438:
    #####:17439:int received_set_section_offset(RECEIVED_HANDLE received, uint64_t section_offset_value)
        -:17440:{
        -:17441:    int result;
        -:17442:
    #####:17443:    if (received == NULL)
        -:17444:    {
    #####:17445:        result = MU_FAILURE;
        -:17446:    }
        -:17447:    else
        -:17448:    {
    #####:17449:        RECEIVED_INSTANCE* received_instance = (RECEIVED_INSTANCE*)received;
    #####:17450:        AMQP_VALUE section_offset_amqp_value = amqpvalue_create_ulong(section_offset_value);
    #####:17451:        if (section_offset_amqp_value == NULL)
        -:17452:        {
    #####:17453:            result = MU_FAILURE;
        -:17454:        }
        -:17455:        else
        -:17456:        {
    #####:17457:            if (amqpvalue_set_composite_item(received_instance->composite_value, 1, section_offset_amqp_value) != 0)
        -:17458:            {
    #####:17459:                result = MU_FAILURE;
        -:17460:            }
        -:17461:            else
        -:17462:            {
    #####:17463:                result = 0;
        -:17464:            }
        -:17465:
    #####:17466:            amqpvalue_destroy(section_offset_amqp_value);
        -:17467:        }
        -:17468:    }
        -:17469:
    #####:17470:    return result;
        -:17471:}
        -:17472:
        -:17473:
        -:17474:/* accepted */
        -:17475:
        -:17476:typedef struct ACCEPTED_INSTANCE_TAG
        -:17477:{
        -:17478:    AMQP_VALUE composite_value;
        -:17479:} ACCEPTED_INSTANCE;
        -:17480:
    #####:17481:static ACCEPTED_HANDLE accepted_create_internal(void)
        -:17482:{
    #####:17483:    ACCEPTED_INSTANCE* accepted_instance = (ACCEPTED_INSTANCE*)malloc(sizeof(ACCEPTED_INSTANCE));
    #####:17484:    if (accepted_instance != NULL)
        -:17485:    {
    #####:17486:        accepted_instance->composite_value = NULL;
        -:17487:    }
        -:17488:
    #####:17489:    return accepted_instance;
        -:17490:}
        -:17491:
    #####:17492:ACCEPTED_HANDLE accepted_create(void)
        -:17493:{
    #####:17494:    ACCEPTED_INSTANCE* accepted_instance = (ACCEPTED_INSTANCE*)malloc(sizeof(ACCEPTED_INSTANCE));
    #####:17495:    if (accepted_instance != NULL)
        -:17496:    {
    #####:17497:        accepted_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(36);
    #####:17498:        if (accepted_instance->composite_value == NULL)
        -:17499:        {
    #####:17500:            free(accepted_instance);
    #####:17501:            accepted_instance = NULL;
        -:17502:        }
        -:17503:    }
        -:17504:
    #####:17505:    return accepted_instance;
        -:17506:}
        -:17507:
    #####:17508:ACCEPTED_HANDLE accepted_clone(ACCEPTED_HANDLE value)
        -:17509:{
    #####:17510:    ACCEPTED_INSTANCE* accepted_instance = (ACCEPTED_INSTANCE*)malloc(sizeof(ACCEPTED_INSTANCE));
    #####:17511:    if (accepted_instance != NULL)
        -:17512:    {
    #####:17513:        accepted_instance->composite_value = amqpvalue_clone(((ACCEPTED_INSTANCE*)value)->composite_value);
    #####:17514:        if (accepted_instance->composite_value == NULL)
        -:17515:        {
    #####:17516:            free(accepted_instance);
    #####:17517:            accepted_instance = NULL;
        -:17518:        }
        -:17519:    }
        -:17520:
    #####:17521:    return accepted_instance;
        -:17522:}
        -:17523:
    #####:17524:void accepted_destroy(ACCEPTED_HANDLE accepted)
        -:17525:{
    #####:17526:    if (accepted != NULL)
        -:17527:    {
    #####:17528:        ACCEPTED_INSTANCE* accepted_instance = (ACCEPTED_INSTANCE*)accepted;
    #####:17529:        amqpvalue_destroy(accepted_instance->composite_value);
    #####:17530:        free(accepted_instance);
        -:17531:    }
    #####:17532:}
        -:17533:
    #####:17534:AMQP_VALUE amqpvalue_create_accepted(ACCEPTED_HANDLE accepted)
        -:17535:{
        -:17536:    AMQP_VALUE result;
        -:17537:
    #####:17538:    if (accepted == NULL)
        -:17539:    {
    #####:17540:        result = NULL;
        -:17541:    }
        -:17542:    else
        -:17543:    {
    #####:17544:        ACCEPTED_INSTANCE* accepted_instance = (ACCEPTED_INSTANCE*)accepted;
    #####:17545:        result = amqpvalue_clone(accepted_instance->composite_value);
        -:17546:    }
        -:17547:
    #####:17548:    return result;
        -:17549:}
        -:17550:
    #####:17551:bool is_accepted_type_by_descriptor(AMQP_VALUE descriptor)
        -:17552:{
        -:17553:    bool result;
        -:17554:
        -:17555:    uint64_t descriptor_ulong;
    #####:17556:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:17557:        (descriptor_ulong == 36))
        -:17558:    {
    #####:17559:        result = true;
        -:17560:    }
        -:17561:    else
        -:17562:    {
    #####:17563:        result = false;
        -:17564:    }
        -:17565:
    #####:17566:    return result;
        -:17567:}
        -:17568:
        -:17569:
    #####:17570:int amqpvalue_get_accepted(AMQP_VALUE value, ACCEPTED_HANDLE* accepted_handle)
        -:17571:{
        -:17572:    int result;
    #####:17573:    ACCEPTED_INSTANCE* accepted_instance = (ACCEPTED_INSTANCE*)accepted_create_internal();
    #####:17574:    *accepted_handle = accepted_instance;
    #####:17575:    if (*accepted_handle == NULL)
        -:17576:    {
    #####:17577:        result = MU_FAILURE;
        -:17578:    }
        -:17579:    else
        -:17580:    {
    #####:17581:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:17582:        if (list_value == NULL)
        -:17583:        {
    #####:17584:            accepted_destroy(*accepted_handle);
    #####:17585:            result = MU_FAILURE;
        -:17586:        }
        -:17587:        else
        -:17588:        {
        -:17589:            uint32_t list_item_count;
    #####:17590:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:17591:            {
    #####:17592:                result = MU_FAILURE;
        -:17593:            }
        -:17594:            else
        -:17595:            {
        -:17596:                do
        -:17597:                {
        -:17598:
    #####:17599:                    accepted_instance->composite_value = amqpvalue_clone(value);
        -:17600:
    #####:17601:                    result = 0;
        -:17602:                } while((void)0,0);
        -:17603:            }
        -:17604:        }
        -:17605:    }
        -:17606:
    #####:17607:    return result;
        -:17608:}
        -:17609:
        -:17610:
        -:17611:/* rejected */
        -:17612:
        -:17613:typedef struct REJECTED_INSTANCE_TAG
        -:17614:{
        -:17615:    AMQP_VALUE composite_value;
        -:17616:} REJECTED_INSTANCE;
        -:17617:
    #####:17618:static REJECTED_HANDLE rejected_create_internal(void)
        -:17619:{
    #####:17620:    REJECTED_INSTANCE* rejected_instance = (REJECTED_INSTANCE*)malloc(sizeof(REJECTED_INSTANCE));
    #####:17621:    if (rejected_instance != NULL)
        -:17622:    {
    #####:17623:        rejected_instance->composite_value = NULL;
        -:17624:    }
        -:17625:
    #####:17626:    return rejected_instance;
        -:17627:}
        -:17628:
    #####:17629:REJECTED_HANDLE rejected_create(void)
        -:17630:{
    #####:17631:    REJECTED_INSTANCE* rejected_instance = (REJECTED_INSTANCE*)malloc(sizeof(REJECTED_INSTANCE));
    #####:17632:    if (rejected_instance != NULL)
        -:17633:    {
    #####:17634:        rejected_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(37);
    #####:17635:        if (rejected_instance->composite_value == NULL)
        -:17636:        {
    #####:17637:            free(rejected_instance);
    #####:17638:            rejected_instance = NULL;
        -:17639:        }
        -:17640:    }
        -:17641:
    #####:17642:    return rejected_instance;
        -:17643:}
        -:17644:
    #####:17645:REJECTED_HANDLE rejected_clone(REJECTED_HANDLE value)
        -:17646:{
    #####:17647:    REJECTED_INSTANCE* rejected_instance = (REJECTED_INSTANCE*)malloc(sizeof(REJECTED_INSTANCE));
    #####:17648:    if (rejected_instance != NULL)
        -:17649:    {
    #####:17650:        rejected_instance->composite_value = amqpvalue_clone(((REJECTED_INSTANCE*)value)->composite_value);
    #####:17651:        if (rejected_instance->composite_value == NULL)
        -:17652:        {
    #####:17653:            free(rejected_instance);
    #####:17654:            rejected_instance = NULL;
        -:17655:        }
        -:17656:    }
        -:17657:
    #####:17658:    return rejected_instance;
        -:17659:}
        -:17660:
    #####:17661:void rejected_destroy(REJECTED_HANDLE rejected)
        -:17662:{
    #####:17663:    if (rejected != NULL)
        -:17664:    {
    #####:17665:        REJECTED_INSTANCE* rejected_instance = (REJECTED_INSTANCE*)rejected;
    #####:17666:        amqpvalue_destroy(rejected_instance->composite_value);
    #####:17667:        free(rejected_instance);
        -:17668:    }
    #####:17669:}
        -:17670:
    #####:17671:AMQP_VALUE amqpvalue_create_rejected(REJECTED_HANDLE rejected)
        -:17672:{
        -:17673:    AMQP_VALUE result;
        -:17674:
    #####:17675:    if (rejected == NULL)
        -:17676:    {
    #####:17677:        result = NULL;
        -:17678:    }
        -:17679:    else
        -:17680:    {
    #####:17681:        REJECTED_INSTANCE* rejected_instance = (REJECTED_INSTANCE*)rejected;
    #####:17682:        result = amqpvalue_clone(rejected_instance->composite_value);
        -:17683:    }
        -:17684:
    #####:17685:    return result;
        -:17686:}
        -:17687:
    #####:17688:bool is_rejected_type_by_descriptor(AMQP_VALUE descriptor)
        -:17689:{
        -:17690:    bool result;
        -:17691:
        -:17692:    uint64_t descriptor_ulong;
    #####:17693:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:17694:        (descriptor_ulong == 37))
        -:17695:    {
    #####:17696:        result = true;
        -:17697:    }
        -:17698:    else
        -:17699:    {
    #####:17700:        result = false;
        -:17701:    }
        -:17702:
    #####:17703:    return result;
        -:17704:}
        -:17705:
        -:17706:
    #####:17707:int amqpvalue_get_rejected(AMQP_VALUE value, REJECTED_HANDLE* rejected_handle)
        -:17708:{
        -:17709:    int result;
    #####:17710:    REJECTED_INSTANCE* rejected_instance = (REJECTED_INSTANCE*)rejected_create_internal();
    #####:17711:    *rejected_handle = rejected_instance;
    #####:17712:    if (*rejected_handle == NULL)
        -:17713:    {
    #####:17714:        result = MU_FAILURE;
        -:17715:    }
        -:17716:    else
        -:17717:    {
    #####:17718:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:17719:        if (list_value == NULL)
        -:17720:        {
    #####:17721:            rejected_destroy(*rejected_handle);
    #####:17722:            result = MU_FAILURE;
        -:17723:        }
        -:17724:        else
        -:17725:        {
        -:17726:            uint32_t list_item_count;
    #####:17727:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:17728:            {
    #####:17729:                result = MU_FAILURE;
        -:17730:            }
        -:17731:            else
        -:17732:            {
        -:17733:                do
        -:17734:                {
        -:17735:                    AMQP_VALUE item_value;
        -:17736:                    /* error */
    #####:17737:                    if (list_item_count > 0)
        -:17738:                    {
    #####:17739:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:17740:                        if (item_value == NULL)
        -:17741:                        {
        -:17742:                            /* do nothing */
        -:17743:                        }
        -:17744:                        else
        -:17745:                        {
    #####:17746:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:17747:                            {
        -:17748:                                /* no error, field is not mandatory */
        -:17749:                            }
        -:17750:                            else
        -:17751:                            {
        -:17752:                                ERROR_HANDLE error;
    #####:17753:                                if (amqpvalue_get_error(item_value, &error) != 0)
        -:17754:                                {
    #####:17755:                                    amqpvalue_destroy(item_value);
    #####:17756:                                    rejected_destroy(*rejected_handle);
    #####:17757:                                    result = MU_FAILURE;
    #####:17758:                                    break;
        -:17759:                                }
        -:17760:                                else
        -:17761:                                {
    #####:17762:                                    error_destroy(error);
        -:17763:                                }
        -:17764:                            }
        -:17765:
    #####:17766:                            amqpvalue_destroy(item_value);
        -:17767:                        }
        -:17768:                    }
        -:17769:
    #####:17770:                    rejected_instance->composite_value = amqpvalue_clone(value);
        -:17771:
    #####:17772:                    result = 0;
        -:17773:                } while((void)0,0);
        -:17774:            }
        -:17775:        }
        -:17776:    }
        -:17777:
    #####:17778:    return result;
        -:17779:}
        -:17780:
    #####:17781:int rejected_get_error(REJECTED_HANDLE rejected, ERROR_HANDLE* error_value)
        -:17782:{
        -:17783:    int result;
        -:17784:
    #####:17785:    if (rejected == NULL)
        -:17786:    {
    #####:17787:        result = MU_FAILURE;
        -:17788:    }
        -:17789:    else
        -:17790:    {
        -:17791:        uint32_t item_count;
    #####:17792:        REJECTED_INSTANCE* rejected_instance = (REJECTED_INSTANCE*)rejected;
    #####:17793:        if (amqpvalue_get_composite_item_count(rejected_instance->composite_value, &item_count) != 0)
        -:17794:        {
    #####:17795:            result = MU_FAILURE;
        -:17796:        }
        -:17797:        else
        -:17798:        {
    #####:17799:            if (item_count <= 0)
        -:17800:            {
    #####:17801:                result = MU_FAILURE;
        -:17802:            }
        -:17803:            else
        -:17804:            {
    #####:17805:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(rejected_instance->composite_value, 0);
    #####:17806:                if ((item_value == NULL) ||
    #####:17807:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:17808:                {
    #####:17809:                    result = MU_FAILURE;
        -:17810:                }
        -:17811:                else
        -:17812:                {
    #####:17813:                    int get_single_value_result = amqpvalue_get_error(item_value, error_value);
    #####:17814:                    if (get_single_value_result != 0)
        -:17815:                    {
    #####:17816:                        result = MU_FAILURE;
        -:17817:                    }
        -:17818:                    else
        -:17819:                    {
    #####:17820:                        result = 0;
        -:17821:                    }
        -:17822:                }
        -:17823:            }
        -:17824:        }
        -:17825:    }
        -:17826:
    #####:17827:    return result;
        -:17828:}
        -:17829:
    #####:17830:int rejected_set_error(REJECTED_HANDLE rejected, ERROR_HANDLE error_value)
        -:17831:{
        -:17832:    int result;
        -:17833:
    #####:17834:    if (rejected == NULL)
        -:17835:    {
    #####:17836:        result = MU_FAILURE;
        -:17837:    }
        -:17838:    else
        -:17839:    {
    #####:17840:        REJECTED_INSTANCE* rejected_instance = (REJECTED_INSTANCE*)rejected;
    #####:17841:        AMQP_VALUE error_amqp_value = amqpvalue_create_error(error_value);
    #####:17842:        if (error_amqp_value == NULL)
        -:17843:        {
    #####:17844:            result = MU_FAILURE;
        -:17845:        }
        -:17846:        else
        -:17847:        {
    #####:17848:            if (amqpvalue_set_composite_item(rejected_instance->composite_value, 0, error_amqp_value) != 0)
        -:17849:            {
    #####:17850:                result = MU_FAILURE;
        -:17851:            }
        -:17852:            else
        -:17853:            {
    #####:17854:                result = 0;
        -:17855:            }
        -:17856:
    #####:17857:            amqpvalue_destroy(error_amqp_value);
        -:17858:        }
        -:17859:    }
        -:17860:
    #####:17861:    return result;
        -:17862:}
        -:17863:
        -:17864:
        -:17865:/* released */
        -:17866:
        -:17867:typedef struct RELEASED_INSTANCE_TAG
        -:17868:{
        -:17869:    AMQP_VALUE composite_value;
        -:17870:} RELEASED_INSTANCE;
        -:17871:
    #####:17872:static RELEASED_HANDLE released_create_internal(void)
        -:17873:{
    #####:17874:    RELEASED_INSTANCE* released_instance = (RELEASED_INSTANCE*)malloc(sizeof(RELEASED_INSTANCE));
    #####:17875:    if (released_instance != NULL)
        -:17876:    {
    #####:17877:        released_instance->composite_value = NULL;
        -:17878:    }
        -:17879:
    #####:17880:    return released_instance;
        -:17881:}
        -:17882:
    #####:17883:RELEASED_HANDLE released_create(void)
        -:17884:{
    #####:17885:    RELEASED_INSTANCE* released_instance = (RELEASED_INSTANCE*)malloc(sizeof(RELEASED_INSTANCE));
    #####:17886:    if (released_instance != NULL)
        -:17887:    {
    #####:17888:        released_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(38);
    #####:17889:        if (released_instance->composite_value == NULL)
        -:17890:        {
    #####:17891:            free(released_instance);
    #####:17892:            released_instance = NULL;
        -:17893:        }
        -:17894:    }
        -:17895:
    #####:17896:    return released_instance;
        -:17897:}
        -:17898:
    #####:17899:RELEASED_HANDLE released_clone(RELEASED_HANDLE value)
        -:17900:{
    #####:17901:    RELEASED_INSTANCE* released_instance = (RELEASED_INSTANCE*)malloc(sizeof(RELEASED_INSTANCE));
    #####:17902:    if (released_instance != NULL)
        -:17903:    {
    #####:17904:        released_instance->composite_value = amqpvalue_clone(((RELEASED_INSTANCE*)value)->composite_value);
    #####:17905:        if (released_instance->composite_value == NULL)
        -:17906:        {
    #####:17907:            free(released_instance);
    #####:17908:            released_instance = NULL;
        -:17909:        }
        -:17910:    }
        -:17911:
    #####:17912:    return released_instance;
        -:17913:}
        -:17914:
    #####:17915:void released_destroy(RELEASED_HANDLE released)
        -:17916:{
    #####:17917:    if (released != NULL)
        -:17918:    {
    #####:17919:        RELEASED_INSTANCE* released_instance = (RELEASED_INSTANCE*)released;
    #####:17920:        amqpvalue_destroy(released_instance->composite_value);
    #####:17921:        free(released_instance);
        -:17922:    }
    #####:17923:}
        -:17924:
    #####:17925:AMQP_VALUE amqpvalue_create_released(RELEASED_HANDLE released)
        -:17926:{
        -:17927:    AMQP_VALUE result;
        -:17928:
    #####:17929:    if (released == NULL)
        -:17930:    {
    #####:17931:        result = NULL;
        -:17932:    }
        -:17933:    else
        -:17934:    {
    #####:17935:        RELEASED_INSTANCE* released_instance = (RELEASED_INSTANCE*)released;
    #####:17936:        result = amqpvalue_clone(released_instance->composite_value);
        -:17937:    }
        -:17938:
    #####:17939:    return result;
        -:17940:}
        -:17941:
    #####:17942:bool is_released_type_by_descriptor(AMQP_VALUE descriptor)
        -:17943:{
        -:17944:    bool result;
        -:17945:
        -:17946:    uint64_t descriptor_ulong;
    #####:17947:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:17948:        (descriptor_ulong == 38))
        -:17949:    {
    #####:17950:        result = true;
        -:17951:    }
        -:17952:    else
        -:17953:    {
    #####:17954:        result = false;
        -:17955:    }
        -:17956:
    #####:17957:    return result;
        -:17958:}
        -:17959:
        -:17960:
    #####:17961:int amqpvalue_get_released(AMQP_VALUE value, RELEASED_HANDLE* released_handle)
        -:17962:{
        -:17963:    int result;
    #####:17964:    RELEASED_INSTANCE* released_instance = (RELEASED_INSTANCE*)released_create_internal();
    #####:17965:    *released_handle = released_instance;
    #####:17966:    if (*released_handle == NULL)
        -:17967:    {
    #####:17968:        result = MU_FAILURE;
        -:17969:    }
        -:17970:    else
        -:17971:    {
    #####:17972:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:17973:        if (list_value == NULL)
        -:17974:        {
    #####:17975:            released_destroy(*released_handle);
    #####:17976:            result = MU_FAILURE;
        -:17977:        }
        -:17978:        else
        -:17979:        {
        -:17980:            uint32_t list_item_count;
    #####:17981:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:17982:            {
    #####:17983:                result = MU_FAILURE;
        -:17984:            }
        -:17985:            else
        -:17986:            {
        -:17987:                do
        -:17988:                {
        -:17989:
    #####:17990:                    released_instance->composite_value = amqpvalue_clone(value);
        -:17991:
    #####:17992:                    result = 0;
        -:17993:                } while((void)0,0);
        -:17994:            }
        -:17995:        }
        -:17996:    }
        -:17997:
    #####:17998:    return result;
        -:17999:}
        -:18000:
        -:18001:
        -:18002:/* modified */
        -:18003:
        -:18004:typedef struct MODIFIED_INSTANCE_TAG
        -:18005:{
        -:18006:    AMQP_VALUE composite_value;
        -:18007:} MODIFIED_INSTANCE;
        -:18008:
    #####:18009:static MODIFIED_HANDLE modified_create_internal(void)
        -:18010:{
    #####:18011:    MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)malloc(sizeof(MODIFIED_INSTANCE));
    #####:18012:    if (modified_instance != NULL)
        -:18013:    {
    #####:18014:        modified_instance->composite_value = NULL;
        -:18015:    }
        -:18016:
    #####:18017:    return modified_instance;
        -:18018:}
        -:18019:
    #####:18020:MODIFIED_HANDLE modified_create(void)
        -:18021:{
    #####:18022:    MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)malloc(sizeof(MODIFIED_INSTANCE));
    #####:18023:    if (modified_instance != NULL)
        -:18024:    {
    #####:18025:        modified_instance->composite_value = amqpvalue_create_composite_with_ulong_descriptor(39);
    #####:18026:        if (modified_instance->composite_value == NULL)
        -:18027:        {
    #####:18028:            free(modified_instance);
    #####:18029:            modified_instance = NULL;
        -:18030:        }
        -:18031:    }
        -:18032:
    #####:18033:    return modified_instance;
        -:18034:}
        -:18035:
    #####:18036:MODIFIED_HANDLE modified_clone(MODIFIED_HANDLE value)
        -:18037:{
    #####:18038:    MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)malloc(sizeof(MODIFIED_INSTANCE));
    #####:18039:    if (modified_instance != NULL)
        -:18040:    {
    #####:18041:        modified_instance->composite_value = amqpvalue_clone(((MODIFIED_INSTANCE*)value)->composite_value);
    #####:18042:        if (modified_instance->composite_value == NULL)
        -:18043:        {
    #####:18044:            free(modified_instance);
    #####:18045:            modified_instance = NULL;
        -:18046:        }
        -:18047:    }
        -:18048:
    #####:18049:    return modified_instance;
        -:18050:}
        -:18051:
    #####:18052:void modified_destroy(MODIFIED_HANDLE modified)
        -:18053:{
    #####:18054:    if (modified != NULL)
        -:18055:    {
    #####:18056:        MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified;
    #####:18057:        amqpvalue_destroy(modified_instance->composite_value);
    #####:18058:        free(modified_instance);
        -:18059:    }
    #####:18060:}
        -:18061:
    #####:18062:AMQP_VALUE amqpvalue_create_modified(MODIFIED_HANDLE modified)
        -:18063:{
        -:18064:    AMQP_VALUE result;
        -:18065:
    #####:18066:    if (modified == NULL)
        -:18067:    {
    #####:18068:        result = NULL;
        -:18069:    }
        -:18070:    else
        -:18071:    {
    #####:18072:        MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified;
    #####:18073:        result = amqpvalue_clone(modified_instance->composite_value);
        -:18074:    }
        -:18075:
    #####:18076:    return result;
        -:18077:}
        -:18078:
    #####:18079:bool is_modified_type_by_descriptor(AMQP_VALUE descriptor)
        -:18080:{
        -:18081:    bool result;
        -:18082:
        -:18083:    uint64_t descriptor_ulong;
    #####:18084:    if ((amqpvalue_get_ulong(descriptor, &descriptor_ulong) == 0) &&
    #####:18085:        (descriptor_ulong == 39))
        -:18086:    {
    #####:18087:        result = true;
        -:18088:    }
        -:18089:    else
        -:18090:    {
    #####:18091:        result = false;
        -:18092:    }
        -:18093:
    #####:18094:    return result;
        -:18095:}
        -:18096:
        -:18097:
    #####:18098:int amqpvalue_get_modified(AMQP_VALUE value, MODIFIED_HANDLE* modified_handle)
        -:18099:{
        -:18100:    int result;
    #####:18101:    MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified_create_internal();
    #####:18102:    *modified_handle = modified_instance;
    #####:18103:    if (*modified_handle == NULL)
        -:18104:    {
    #####:18105:        result = MU_FAILURE;
        -:18106:    }
        -:18107:    else
        -:18108:    {
    #####:18109:        AMQP_VALUE list_value = amqpvalue_get_inplace_described_value(value);
    #####:18110:        if (list_value == NULL)
        -:18111:        {
    #####:18112:            modified_destroy(*modified_handle);
    #####:18113:            result = MU_FAILURE;
        -:18114:        }
        -:18115:        else
        -:18116:        {
        -:18117:            uint32_t list_item_count;
    #####:18118:            if (amqpvalue_get_list_item_count(list_value, &list_item_count) != 0)
        -:18119:            {
    #####:18120:                result = MU_FAILURE;
        -:18121:            }
        -:18122:            else
        -:18123:            {
        -:18124:                do
        -:18125:                {
        -:18126:                    AMQP_VALUE item_value;
        -:18127:                    /* delivery-failed */
    #####:18128:                    if (list_item_count > 0)
        -:18129:                    {
    #####:18130:                        item_value = amqpvalue_get_list_item(list_value, 0);
    #####:18131:                        if (item_value == NULL)
        -:18132:                        {
        -:18133:                            /* do nothing */
        -:18134:                        }
        -:18135:                        else
        -:18136:                        {
    #####:18137:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:18138:                            {
        -:18139:                                /* no error, field is not mandatory */
        -:18140:                            }
        -:18141:                            else
        -:18142:                            {
        -:18143:                                bool delivery_failed;
    #####:18144:                                if (amqpvalue_get_boolean(item_value, &delivery_failed) != 0)
        -:18145:                                {
    #####:18146:                                    amqpvalue_destroy(item_value);
    #####:18147:                                    modified_destroy(*modified_handle);
    #####:18148:                                    result = MU_FAILURE;
    #####:18149:                                    break;
        -:18150:                                }
        -:18151:                            }
        -:18152:
    #####:18153:                            amqpvalue_destroy(item_value);
        -:18154:                        }
        -:18155:                    }
        -:18156:                    /* undeliverable-here */
    #####:18157:                    if (list_item_count > 1)
        -:18158:                    {
    #####:18159:                        item_value = amqpvalue_get_list_item(list_value, 1);
    #####:18160:                        if (item_value == NULL)
        -:18161:                        {
        -:18162:                            /* do nothing */
        -:18163:                        }
        -:18164:                        else
        -:18165:                        {
    #####:18166:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:18167:                            {
        -:18168:                                /* no error, field is not mandatory */
        -:18169:                            }
        -:18170:                            else
        -:18171:                            {
        -:18172:                                bool undeliverable_here;
    #####:18173:                                if (amqpvalue_get_boolean(item_value, &undeliverable_here) != 0)
        -:18174:                                {
    #####:18175:                                    amqpvalue_destroy(item_value);
    #####:18176:                                    modified_destroy(*modified_handle);
    #####:18177:                                    result = MU_FAILURE;
    #####:18178:                                    break;
        -:18179:                                }
        -:18180:                            }
        -:18181:
    #####:18182:                            amqpvalue_destroy(item_value);
        -:18183:                        }
        -:18184:                    }
        -:18185:                    /* message-annotations */
    #####:18186:                    if (list_item_count > 2)
        -:18187:                    {
    #####:18188:                        item_value = amqpvalue_get_list_item(list_value, 2);
    #####:18189:                        if (item_value == NULL)
        -:18190:                        {
        -:18191:                            /* do nothing */
        -:18192:                        }
        -:18193:                        else
        -:18194:                        {
    #####:18195:                            if (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL)
        -:18196:                            {
        -:18197:                                /* no error, field is not mandatory */
        -:18198:                            }
        -:18199:                            else
        -:18200:                            {
        -:18201:                                fields message_annotations;
    #####:18202:                                if (amqpvalue_get_fields(item_value, &message_annotations) != 0)
        -:18203:                                {
    #####:18204:                                    amqpvalue_destroy(item_value);
    #####:18205:                                    modified_destroy(*modified_handle);
    #####:18206:                                    result = MU_FAILURE;
    #####:18207:                                    break;
        -:18208:                                }
        -:18209:                            }
        -:18210:
    #####:18211:                            amqpvalue_destroy(item_value);
        -:18212:                        }
        -:18213:                    }
        -:18214:
    #####:18215:                    modified_instance->composite_value = amqpvalue_clone(value);
        -:18216:
    #####:18217:                    result = 0;
        -:18218:                } while((void)0,0);
        -:18219:            }
        -:18220:        }
        -:18221:    }
        -:18222:
    #####:18223:    return result;
        -:18224:}
        -:18225:
    #####:18226:int modified_get_delivery_failed(MODIFIED_HANDLE modified, bool* delivery_failed_value)
        -:18227:{
        -:18228:    int result;
        -:18229:
    #####:18230:    if (modified == NULL)
        -:18231:    {
    #####:18232:        result = MU_FAILURE;
        -:18233:    }
        -:18234:    else
        -:18235:    {
        -:18236:        uint32_t item_count;
    #####:18237:        MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified;
    #####:18238:        if (amqpvalue_get_composite_item_count(modified_instance->composite_value, &item_count) != 0)
        -:18239:        {
    #####:18240:            result = MU_FAILURE;
        -:18241:        }
        -:18242:        else
        -:18243:        {
    #####:18244:            if (item_count <= 0)
        -:18245:            {
    #####:18246:                result = MU_FAILURE;
        -:18247:            }
        -:18248:            else
        -:18249:            {
    #####:18250:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(modified_instance->composite_value, 0);
    #####:18251:                if ((item_value == NULL) ||
    #####:18252:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:18253:                {
    #####:18254:                    result = MU_FAILURE;
        -:18255:                }
        -:18256:                else
        -:18257:                {
    #####:18258:                    int get_single_value_result = amqpvalue_get_boolean(item_value, delivery_failed_value);
    #####:18259:                    if (get_single_value_result != 0)
        -:18260:                    {
    #####:18261:                        result = MU_FAILURE;
        -:18262:                    }
        -:18263:                    else
        -:18264:                    {
    #####:18265:                        result = 0;
        -:18266:                    }
        -:18267:                }
        -:18268:            }
        -:18269:        }
        -:18270:    }
        -:18271:
    #####:18272:    return result;
        -:18273:}
        -:18274:
    #####:18275:int modified_set_delivery_failed(MODIFIED_HANDLE modified, bool delivery_failed_value)
        -:18276:{
        -:18277:    int result;
        -:18278:
    #####:18279:    if (modified == NULL)
        -:18280:    {
    #####:18281:        result = MU_FAILURE;
        -:18282:    }
        -:18283:    else
        -:18284:    {
    #####:18285:        MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified;
    #####:18286:        AMQP_VALUE delivery_failed_amqp_value = amqpvalue_create_boolean(delivery_failed_value);
    #####:18287:        if (delivery_failed_amqp_value == NULL)
        -:18288:        {
    #####:18289:            result = MU_FAILURE;
        -:18290:        }
        -:18291:        else
        -:18292:        {
    #####:18293:            if (amqpvalue_set_composite_item(modified_instance->composite_value, 0, delivery_failed_amqp_value) != 0)
        -:18294:            {
    #####:18295:                result = MU_FAILURE;
        -:18296:            }
        -:18297:            else
        -:18298:            {
    #####:18299:                result = 0;
        -:18300:            }
        -:18301:
    #####:18302:            amqpvalue_destroy(delivery_failed_amqp_value);
        -:18303:        }
        -:18304:    }
        -:18305:
    #####:18306:    return result;
        -:18307:}
        -:18308:
    #####:18309:int modified_get_undeliverable_here(MODIFIED_HANDLE modified, bool* undeliverable_here_value)
        -:18310:{
        -:18311:    int result;
        -:18312:
    #####:18313:    if (modified == NULL)
        -:18314:    {
    #####:18315:        result = MU_FAILURE;
        -:18316:    }
        -:18317:    else
        -:18318:    {
        -:18319:        uint32_t item_count;
    #####:18320:        MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified;
    #####:18321:        if (amqpvalue_get_composite_item_count(modified_instance->composite_value, &item_count) != 0)
        -:18322:        {
    #####:18323:            result = MU_FAILURE;
        -:18324:        }
        -:18325:        else
        -:18326:        {
    #####:18327:            if (item_count <= 1)
        -:18328:            {
    #####:18329:                result = MU_FAILURE;
        -:18330:            }
        -:18331:            else
        -:18332:            {
    #####:18333:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(modified_instance->composite_value, 1);
    #####:18334:                if ((item_value == NULL) ||
    #####:18335:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:18336:                {
    #####:18337:                    result = MU_FAILURE;
        -:18338:                }
        -:18339:                else
        -:18340:                {
    #####:18341:                    int get_single_value_result = amqpvalue_get_boolean(item_value, undeliverable_here_value);
    #####:18342:                    if (get_single_value_result != 0)
        -:18343:                    {
    #####:18344:                        result = MU_FAILURE;
        -:18345:                    }
        -:18346:                    else
        -:18347:                    {
    #####:18348:                        result = 0;
        -:18349:                    }
        -:18350:                }
        -:18351:            }
        -:18352:        }
        -:18353:    }
        -:18354:
    #####:18355:    return result;
        -:18356:}
        -:18357:
    #####:18358:int modified_set_undeliverable_here(MODIFIED_HANDLE modified, bool undeliverable_here_value)
        -:18359:{
        -:18360:    int result;
        -:18361:
    #####:18362:    if (modified == NULL)
        -:18363:    {
    #####:18364:        result = MU_FAILURE;
        -:18365:    }
        -:18366:    else
        -:18367:    {
    #####:18368:        MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified;
    #####:18369:        AMQP_VALUE undeliverable_here_amqp_value = amqpvalue_create_boolean(undeliverable_here_value);
    #####:18370:        if (undeliverable_here_amqp_value == NULL)
        -:18371:        {
    #####:18372:            result = MU_FAILURE;
        -:18373:        }
        -:18374:        else
        -:18375:        {
    #####:18376:            if (amqpvalue_set_composite_item(modified_instance->composite_value, 1, undeliverable_here_amqp_value) != 0)
        -:18377:            {
    #####:18378:                result = MU_FAILURE;
        -:18379:            }
        -:18380:            else
        -:18381:            {
    #####:18382:                result = 0;
        -:18383:            }
        -:18384:
    #####:18385:            amqpvalue_destroy(undeliverable_here_amqp_value);
        -:18386:        }
        -:18387:    }
        -:18388:
    #####:18389:    return result;
        -:18390:}
        -:18391:
    #####:18392:int modified_get_message_annotations(MODIFIED_HANDLE modified, fields* message_annotations_value)
        -:18393:{
        -:18394:    int result;
        -:18395:
    #####:18396:    if (modified == NULL)
        -:18397:    {
    #####:18398:        result = MU_FAILURE;
        -:18399:    }
        -:18400:    else
        -:18401:    {
        -:18402:        uint32_t item_count;
    #####:18403:        MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified;
    #####:18404:        if (amqpvalue_get_composite_item_count(modified_instance->composite_value, &item_count) != 0)
        -:18405:        {
    #####:18406:            result = MU_FAILURE;
        -:18407:        }
        -:18408:        else
        -:18409:        {
    #####:18410:            if (item_count <= 2)
        -:18411:            {
    #####:18412:                result = MU_FAILURE;
        -:18413:            }
        -:18414:            else
        -:18415:            {
    #####:18416:                AMQP_VALUE item_value = amqpvalue_get_composite_item_in_place(modified_instance->composite_value, 2);
    #####:18417:                if ((item_value == NULL) ||
    #####:18418:                    (amqpvalue_get_type(item_value) == AMQP_TYPE_NULL))
        -:18419:                {
    #####:18420:                    result = MU_FAILURE;
        -:18421:                }
        -:18422:                else
        -:18423:                {
    #####:18424:                    int get_single_value_result = amqpvalue_get_fields(item_value, message_annotations_value);
    #####:18425:                    if (get_single_value_result != 0)
        -:18426:                    {
    #####:18427:                        result = MU_FAILURE;
        -:18428:                    }
        -:18429:                    else
        -:18430:                    {
    #####:18431:                        result = 0;
        -:18432:                    }
        -:18433:                }
        -:18434:            }
        -:18435:        }
        -:18436:    }
        -:18437:
    #####:18438:    return result;
        -:18439:}
        -:18440:
    #####:18441:int modified_set_message_annotations(MODIFIED_HANDLE modified, fields message_annotations_value)
        -:18442:{
        -:18443:    int result;
        -:18444:
    #####:18445:    if (modified == NULL)
        -:18446:    {
    #####:18447:        result = MU_FAILURE;
        -:18448:    }
        -:18449:    else
        -:18450:    {
    #####:18451:        MODIFIED_INSTANCE* modified_instance = (MODIFIED_INSTANCE*)modified;
    #####:18452:        AMQP_VALUE message_annotations_amqp_value = amqpvalue_create_fields(message_annotations_value);
    #####:18453:        if (message_annotations_amqp_value == NULL)
        -:18454:        {
    #####:18455:            result = MU_FAILURE;
        -:18456:        }
        -:18457:        else
        -:18458:        {
    #####:18459:            if (amqpvalue_set_composite_item(modified_instance->composite_value, 2, message_annotations_amqp_value) != 0)
        -:18460:            {
    #####:18461:                result = MU_FAILURE;
        -:18462:            }
        -:18463:            else
        -:18464:            {
    #####:18465:                result = 0;
        -:18466:            }
        -:18467:
    #####:18468:            amqpvalue_destroy(message_annotations_amqp_value);
        -:18469:        }
        -:18470:    }
        -:18471:
    #####:18472:    return result;
        -:18473:}
        -:18474:
        -:18475:
