        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/message_receiver.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:
        -:    6:#include "azure_macro_utils/macro_utils.h"
        -:    7:#include "azure_c_shared_utility/gballoc.h"
        -:    8:#include "azure_c_shared_utility/xlogging.h"
        -:    9:#include "azure_uamqp_c/link.h"
        -:   10:#include "azure_uamqp_c/amqp_definitions.h"
        -:   11:#include "azure_uamqp_c/message.h"
        -:   12:#include "azure_uamqp_c/message_receiver.h"
        -:   13:#include "azure_uamqp_c/amqpvalue.h"
        -:   14:
        -:   15:typedef struct MESSAGE_RECEIVER_INSTANCE_TAG
        -:   16:{
        -:   17:    LINK_HANDLE link;
        -:   18:    ON_MESSAGE_RECEIVED on_message_received;
        -:   19:    ON_MESSAGE_RECEIVER_STATE_CHANGED on_message_receiver_state_changed;
        -:   20:    MESSAGE_RECEIVER_STATE message_receiver_state;
        -:   21:    const void* on_message_receiver_state_changed_context;
        -:   22:    const void* callback_context;
        -:   23:    MESSAGE_HANDLE decoded_message;
        -:   24:    bool decode_error;
        -:   25:} MESSAGE_RECEIVER_INSTANCE;
        -:   26:
        8:   27:static void set_message_receiver_state(MESSAGE_RECEIVER_INSTANCE* message_receiver, MESSAGE_RECEIVER_STATE new_state)
        -:   28:{
        8:   29:    MESSAGE_RECEIVER_STATE previous_state = message_receiver->message_receiver_state;
        8:   30:    message_receiver->message_receiver_state = new_state;
        8:   31:    if (message_receiver->on_message_receiver_state_changed != NULL)
        -:   32:    {
        6:   33:        message_receiver->on_message_receiver_state_changed(message_receiver->on_message_receiver_state_changed_context, new_state, previous_state);
        -:   34:    }
        8:   35:}
        -:   36:
    #####:   37:static void decode_message_value_callback(void* context, AMQP_VALUE decoded_value)
        -:   38:{
    #####:   39:    MESSAGE_RECEIVER_INSTANCE* message_receiver = (MESSAGE_RECEIVER_INSTANCE*)context;
    #####:   40:    MESSAGE_HANDLE decoded_message = message_receiver->decoded_message;
    #####:   41:    AMQP_VALUE descriptor = amqpvalue_get_inplace_descriptor(decoded_value);
        -:   42:
    #####:   43:    if (is_application_properties_type_by_descriptor(descriptor))
        -:   44:    {
    #####:   45:        if (message_set_application_properties(decoded_message, decoded_value) != 0)
        -:   46:        {
    #####:   47:            LogError("Error setting application properties on received message");
    #####:   48:            message_receiver->decode_error = true;
        -:   49:        }
        -:   50:    }
    #####:   51:    else if (is_properties_type_by_descriptor(descriptor))
        -:   52:    {
        -:   53:        PROPERTIES_HANDLE properties;
    #####:   54:        if (amqpvalue_get_properties(decoded_value, &properties) != 0)
        -:   55:        {
    #####:   56:            LogError("Error getting message properties");
    #####:   57:            message_receiver->decode_error = true;
        -:   58:        }
        -:   59:        else
        -:   60:        {
    #####:   61:            if (message_set_properties(decoded_message, properties) != 0)
        -:   62:            {
    #####:   63:                LogError("Error setting message properties on received message");
    #####:   64:                message_receiver->decode_error = true;
        -:   65:            }
        -:   66:
    #####:   67:            properties_destroy(properties);
        -:   68:        }
        -:   69:    }
    #####:   70:    else if (is_delivery_annotations_type_by_descriptor(descriptor))
        -:   71:    {
    #####:   72:        annotations delivery_annotations = amqpvalue_get_inplace_described_value(decoded_value);
    #####:   73:        if (delivery_annotations == NULL)
        -:   74:        {
    #####:   75:            LogError("Error getting delivery annotations");
    #####:   76:            message_receiver->decode_error = true;
        -:   77:        }
        -:   78:        else
        -:   79:        {
    #####:   80:            if (message_set_delivery_annotations(decoded_message, delivery_annotations) != 0)
        -:   81:            {
    #####:   82:                LogError("Error setting delivery annotations on received message");
    #####:   83:                message_receiver->decode_error = true;
        -:   84:            }
        -:   85:        }
        -:   86:    }
    #####:   87:    else if (is_message_annotations_type_by_descriptor(descriptor))
        -:   88:    {
    #####:   89:        annotations message_annotations = amqpvalue_get_inplace_described_value(decoded_value);
    #####:   90:        if (message_annotations == NULL)
        -:   91:        {
    #####:   92:            LogError("Error getting message annotations");
    #####:   93:            message_receiver->decode_error = true;
        -:   94:        }
        -:   95:        else
        -:   96:        {
    #####:   97:            if (message_set_message_annotations(decoded_message, message_annotations) != 0)
        -:   98:            {
    #####:   99:                LogError("Error setting message annotations on received message");
    #####:  100:                message_receiver->decode_error = true;
        -:  101:            }
        -:  102:        }
        -:  103:    }
    #####:  104:    else if (is_header_type_by_descriptor(descriptor))
        -:  105:    {
        -:  106:        HEADER_HANDLE header;
    #####:  107:        if (amqpvalue_get_header(decoded_value, &header) != 0)
        -:  108:        {
    #####:  109:            LogError("Error getting message header");
    #####:  110:            message_receiver->decode_error = true;
        -:  111:        }
        -:  112:        else
        -:  113:        {
    #####:  114:            if (message_set_header(decoded_message, header) != 0)
        -:  115:            {
    #####:  116:                LogError("Error setting message header on received message");
    #####:  117:                message_receiver->decode_error = true;
        -:  118:            }
        -:  119:
    #####:  120:            header_destroy(header);
        -:  121:        }
        -:  122:    }
    #####:  123:    else if (is_footer_type_by_descriptor(descriptor))
        -:  124:    {
    #####:  125:        annotations footer = amqpvalue_get_inplace_described_value(decoded_value);
    #####:  126:        if (footer == NULL)
        -:  127:        {
    #####:  128:            LogError("Error getting message footer");
    #####:  129:            message_receiver->decode_error = true;
        -:  130:        }
        -:  131:        else
        -:  132:        {
    #####:  133:            if (message_set_footer(decoded_message, footer) != 0)
        -:  134:            {
    #####:  135:                LogError("Error setting message footer on received message");
    #####:  136:                message_receiver->decode_error = true;
        -:  137:            }
        -:  138:        }
        -:  139:    }
    #####:  140:    else if (is_amqp_value_type_by_descriptor(descriptor))
        -:  141:    {
        -:  142:        MESSAGE_BODY_TYPE body_type;
    #####:  143:        if (message_get_body_type(decoded_message, &body_type) != 0)
        -:  144:        {
    #####:  145:            LogError("Error getting message body type");
    #####:  146:            message_receiver->decode_error = true;
        -:  147:        }
        -:  148:        else
        -:  149:        {
    #####:  150:            if (body_type != MESSAGE_BODY_TYPE_NONE)
        -:  151:            {
    #####:  152:                LogError("Body already set on received message");
    #####:  153:                message_receiver->decode_error = true;
        -:  154:            }
        -:  155:            else
        -:  156:            {
    #####:  157:                AMQP_VALUE body_amqp_value = amqpvalue_get_inplace_described_value(decoded_value);
    #####:  158:                if (body_amqp_value == NULL)
        -:  159:                {
    #####:  160:                    LogError("Error getting body AMQP value");
    #####:  161:                    message_receiver->decode_error = true;
        -:  162:                }
        -:  163:                else
        -:  164:                {
    #####:  165:                    if (message_set_body_amqp_value(decoded_message, body_amqp_value) != 0)
        -:  166:                    {
    #####:  167:                        LogError("Error setting body AMQP value on received message");
    #####:  168:                        message_receiver->decode_error = true;
        -:  169:                    }
        -:  170:                }
        -:  171:            }
        -:  172:        }
        -:  173:    }
    #####:  174:    else if (is_data_type_by_descriptor(descriptor))
        -:  175:    {
        -:  176:        MESSAGE_BODY_TYPE body_type;
    #####:  177:        if (message_get_body_type(decoded_message, &body_type) != 0)
        -:  178:        {
    #####:  179:            LogError("Error getting message body type");
    #####:  180:            message_receiver->decode_error = true;
        -:  181:        }
        -:  182:        else
        -:  183:        {
    #####:  184:            if ((body_type != MESSAGE_BODY_TYPE_NONE) &&
    #####:  185:                (body_type != MESSAGE_BODY_TYPE_DATA))
        -:  186:            {
    #####:  187:                LogError("Message body type already set to something different than AMQP DATA");
    #####:  188:                message_receiver->decode_error = true;
        -:  189:            }
        -:  190:            else
        -:  191:            {
    #####:  192:                AMQP_VALUE body_data_value = amqpvalue_get_inplace_described_value(decoded_value);
    #####:  193:                if (body_data_value == NULL)
        -:  194:                {
    #####:  195:                    LogError("Error getting body DATA value");
    #####:  196:                    message_receiver->decode_error = true;
        -:  197:                }
        -:  198:                else
        -:  199:                {
        -:  200:                    data data_value;
    #####:  201:                    if (amqpvalue_get_data(body_data_value, &data_value) != 0)
        -:  202:                    {
    #####:  203:                        LogError("Error getting body DATA AMQP value");
    #####:  204:                        message_receiver->decode_error = true;
        -:  205:                    }
        -:  206:                    else
        -:  207:                    {
        -:  208:                        BINARY_DATA binary_data;
    #####:  209:                        binary_data.bytes = (const unsigned char*)data_value.bytes;
    #####:  210:                        binary_data.length = data_value.length;
    #####:  211:                        if (message_add_body_amqp_data(decoded_message, binary_data) != 0)
        -:  212:                        {
    #####:  213:                            LogError("Error adding body DATA to received message");
    #####:  214:                            message_receiver->decode_error = true;
        -:  215:                        }
        -:  216:                    }
        -:  217:                }
        -:  218:            }
        -:  219:        }
        -:  220:    }
    #####:  221:}
        -:  222:
    #####:  223:static AMQP_VALUE on_transfer_received(void* context, TRANSFER_HANDLE transfer, uint32_t payload_size, const unsigned char* payload_bytes)
        -:  224:{
    #####:  225:    AMQP_VALUE result = NULL;
    #####:  226:    MESSAGE_RECEIVER_INSTANCE* message_receiver = (MESSAGE_RECEIVER_INSTANCE*)context;
        -:  227:
        -:  228:    (void)transfer;
    #####:  229:    if (message_receiver->on_message_received != NULL)
        -:  230:    {
    #####:  231:        MESSAGE_HANDLE message = message_create();
    #####:  232:        if (message == NULL)
        -:  233:        {
    #####:  234:            LogError("Cannot create message");
    #####:  235:            set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_ERROR);
        -:  236:        }
        -:  237:        else
        -:  238:        {
    #####:  239:            AMQPVALUE_DECODER_HANDLE amqpvalue_decoder = amqpvalue_decoder_create(decode_message_value_callback, message_receiver);
    #####:  240:            if (amqpvalue_decoder == NULL)
        -:  241:            {
    #####:  242:                LogError("Cannot create AMQP value decoder");
    #####:  243:                set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_ERROR);
        -:  244:            }
        -:  245:            else
        -:  246:            {
    #####:  247:                message_receiver->decoded_message = message;
    #####:  248:                message_receiver->decode_error = false;
    #####:  249:                if (amqpvalue_decode_bytes(amqpvalue_decoder, payload_bytes, payload_size) != 0)
        -:  250:                {
    #####:  251:                    LogError("Cannot decode bytes");
    #####:  252:                    set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_ERROR);
        -:  253:                }
        -:  254:                else
        -:  255:                {
    #####:  256:                    if (message_receiver->decode_error)
        -:  257:                    {
    #####:  258:                        LogError("Error decoding message");
    #####:  259:                        set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_ERROR);
        -:  260:                    }
        -:  261:                    else
        -:  262:                    {
    #####:  263:                        result = message_receiver->on_message_received(message_receiver->callback_context, message);
        -:  264:                    }
        -:  265:                }
        -:  266:
    #####:  267:                amqpvalue_decoder_destroy(amqpvalue_decoder);
        -:  268:            }
        -:  269:
    #####:  270:            message_destroy(message);
        -:  271:        }
        -:  272:    }
        -:  273:
    #####:  274:    return result;
        -:  275:}
        -:  276:
    #####:  277:static void on_link_state_changed(void* context, LINK_STATE new_link_state, LINK_STATE previous_link_state)
        -:  278:{
    #####:  279:    MESSAGE_RECEIVER_INSTANCE* message_receiver = (MESSAGE_RECEIVER_INSTANCE*)context;
        -:  280:    (void)previous_link_state;
        -:  281:
    #####:  282:    switch (new_link_state)
        -:  283:    {
    #####:  284:    default:
    #####:  285:        break;
        -:  286:
    #####:  287:    case LINK_STATE_ATTACHED:
    #####:  288:        if (message_receiver->message_receiver_state == MESSAGE_RECEIVER_STATE_OPENING)
        -:  289:        {
    #####:  290:            set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_OPEN);
        -:  291:        }
    #####:  292:        break;
    #####:  293:    case LINK_STATE_DETACHED:
    #####:  294:        if ((message_receiver->message_receiver_state == MESSAGE_RECEIVER_STATE_OPEN) ||
    #####:  295:            (message_receiver->message_receiver_state == MESSAGE_RECEIVER_STATE_CLOSING))
        -:  296:        {
        -:  297:            /* User initiated transition, we should be good */
    #####:  298:            set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_IDLE);
        -:  299:        }
    #####:  300:        else if (message_receiver->message_receiver_state != MESSAGE_RECEIVER_STATE_IDLE)
        -:  301:        {
        -:  302:            /* Any other transition must be an error */
    #####:  303:            set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_ERROR);
        -:  304:        }
    #####:  305:        break;
    #####:  306:    case LINK_STATE_ERROR:
    #####:  307:        if (message_receiver->message_receiver_state != MESSAGE_RECEIVER_STATE_ERROR)
        -:  308:        {
    #####:  309:            set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_ERROR);
        -:  310:        }
    #####:  311:        break;
        -:  312:    }
    #####:  313:}
        -:  314:
        4:  315:MESSAGE_RECEIVER_HANDLE messagereceiver_create(LINK_HANDLE link, ON_MESSAGE_RECEIVER_STATE_CHANGED on_message_receiver_state_changed, void* context)
        -:  316:{
        4:  317:    MESSAGE_RECEIVER_INSTANCE* message_receiver = (MESSAGE_RECEIVER_INSTANCE*)malloc(sizeof(MESSAGE_RECEIVER_INSTANCE));
        4:  318:    if (message_receiver == NULL)
        -:  319:    {
    #####:  320:        LogError("Error creating message receiver");
        -:  321:    }
        -:  322:    else
        -:  323:    {
        4:  324:        message_receiver->link = link;
        4:  325:        message_receiver->on_message_receiver_state_changed = on_message_receiver_state_changed;
        4:  326:        message_receiver->on_message_receiver_state_changed_context = context;
        4:  327:        message_receiver->message_receiver_state = MESSAGE_RECEIVER_STATE_IDLE;
        -:  328:    }
        -:  329:
        4:  330:    return message_receiver;
        -:  331:}
        -:  332:
        4:  333:void messagereceiver_destroy(MESSAGE_RECEIVER_HANDLE message_receiver)
        -:  334:{
        4:  335:    if (message_receiver == NULL)
        -:  336:    {
    #####:  337:        LogError("NULL message_receiver");
        -:  338:    }
        -:  339:    else
        -:  340:    {
        4:  341:        (void)messagereceiver_close(message_receiver);
        4:  342:        free(message_receiver);
        -:  343:    }
        4:  344:}
        -:  345:
        4:  346:int messagereceiver_open(MESSAGE_RECEIVER_HANDLE message_receiver, ON_MESSAGE_RECEIVED on_message_received, void* callback_context)
        -:  347:{
        -:  348:    int result;
        -:  349:
        4:  350:    if (message_receiver == NULL)
        -:  351:    {
    #####:  352:        LogError("NULL message_receiver");
    #####:  353:        result = MU_FAILURE;
        -:  354:    }
        -:  355:    else
        -:  356:    {
        4:  357:        if (message_receiver->message_receiver_state == MESSAGE_RECEIVER_STATE_IDLE)
        -:  358:        {
        4:  359:            set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_OPENING);
        4:  360:            if (link_attach(message_receiver->link, on_transfer_received, on_link_state_changed, NULL, message_receiver) != 0)
        -:  361:            {
        4:  362:                LogError("Link attach failed");
        4:  363:                result = MU_FAILURE;
        4:  364:                set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_ERROR);
        -:  365:            }
        -:  366:            else
        -:  367:            {
    #####:  368:                message_receiver->on_message_received = on_message_received;
    #####:  369:                message_receiver->callback_context = callback_context;
        -:  370:
    #####:  371:                result = 0;
        -:  372:            }
        -:  373:        }
        -:  374:        else
        -:  375:        {
    #####:  376:            result = 0;
        -:  377:        }
        -:  378:    }
        -:  379:
        4:  380:    return result;
        -:  381:}
        -:  382:
        4:  383:int messagereceiver_close(MESSAGE_RECEIVER_HANDLE message_receiver)
        -:  384:{
        -:  385:    int result;
        -:  386:
        4:  387:    if (message_receiver == NULL)
        -:  388:    {
    #####:  389:        LogError("NULL message_receiver");
    #####:  390:        result = MU_FAILURE;
        -:  391:    }
        -:  392:    else
        -:  393:    {
        4:  394:        if ((message_receiver->message_receiver_state == MESSAGE_RECEIVER_STATE_OPENING) ||
        4:  395:            (message_receiver->message_receiver_state == MESSAGE_RECEIVER_STATE_OPEN))
        -:  396:        {
    #####:  397:            set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_CLOSING);
        -:  398:
    #####:  399:            if (link_detach(message_receiver->link, true, NULL, NULL, NULL) != 0)
        -:  400:            {
    #####:  401:                LogError("link detach failed");
    #####:  402:                result = MU_FAILURE;
    #####:  403:                set_message_receiver_state(message_receiver, MESSAGE_RECEIVER_STATE_ERROR);
        -:  404:            }
        -:  405:            else
        -:  406:            {
    #####:  407:                result = 0;
        -:  408:            }
        -:  409:        }
        -:  410:        else
        -:  411:        {
        4:  412:            result = 0;
        -:  413:        }
        -:  414:    }
        -:  415:
        4:  416:    return result;
        -:  417:}
        -:  418:
    #####:  419:int messagereceiver_get_link_name(MESSAGE_RECEIVER_HANDLE message_receiver, const char** link_name)
        -:  420:{
        -:  421:    int result;
        -:  422:
    #####:  423:    if (message_receiver == NULL)
        -:  424:    {
    #####:  425:        LogError("NULL message_receiver");
    #####:  426:        result = MU_FAILURE;
        -:  427:    }
        -:  428:    else
        -:  429:    {
    #####:  430:        if (link_get_name(message_receiver->link, link_name) != 0)
        -:  431:        {
    #####:  432:            LogError("Getting link name failed");
    #####:  433:            result = MU_FAILURE;
        -:  434:        }
        -:  435:        else
        -:  436:        {
    #####:  437:            result = 0;
        -:  438:        }
        -:  439:    }
        -:  440:
    #####:  441:    return result;
        -:  442:}
        -:  443:
    #####:  444:int messagereceiver_get_received_message_id(MESSAGE_RECEIVER_HANDLE message_receiver, delivery_number* message_id)
        -:  445:{
        -:  446:    int result;
        -:  447:
    #####:  448:    if (message_receiver == NULL)
        -:  449:    {
    #####:  450:        LogError("NULL message_receiver");
    #####:  451:        result = MU_FAILURE;
        -:  452:    }
        -:  453:    else
        -:  454:    {
    #####:  455:        if (link_get_received_message_id(message_receiver->link, message_id) != 0)
        -:  456:        {
    #####:  457:            LogError("Failed getting received message Id");
    #####:  458:            result = MU_FAILURE;
        -:  459:        }
        -:  460:        else
        -:  461:        {
    #####:  462:            result = 0;
        -:  463:        }
        -:  464:    }
        -:  465:
    #####:  466:    return result;
        -:  467:}
        -:  468:
    #####:  469:int messagereceiver_send_message_disposition(MESSAGE_RECEIVER_HANDLE message_receiver, const char* link_name, delivery_number message_number, AMQP_VALUE delivery_state)
        -:  470:{
        -:  471:    int result;
        -:  472:
    #####:  473:    if (message_receiver == NULL)
        -:  474:    {
    #####:  475:        LogError("NULL message_receiver");
    #####:  476:        result = MU_FAILURE;
        -:  477:    }
        -:  478:    else
        -:  479:    {
    #####:  480:        if (message_receiver->message_receiver_state != MESSAGE_RECEIVER_STATE_OPEN)
        -:  481:        {
    #####:  482:            LogError("Message received not open");
    #####:  483:            result = MU_FAILURE;
        -:  484:        }
        -:  485:        else
        -:  486:        {
        -:  487:            const char* my_name;
    #####:  488:            if (link_get_name(message_receiver->link, &my_name) != 0)
        -:  489:            {
    #####:  490:                LogError("Failed getting link name");
    #####:  491:                result = MU_FAILURE;
        -:  492:            }
        -:  493:            else
        -:  494:            {
    #####:  495:                if (strcmp(link_name, my_name) != 0)
        -:  496:                {
    #####:  497:                    LogError("Link name does not match");
    #####:  498:                    result = MU_FAILURE;
        -:  499:                }
        -:  500:                else
        -:  501:                {
    #####:  502:                    if (link_send_disposition(message_receiver->link, message_number, delivery_state) != 0)
        -:  503:                    {
    #####:  504:                        LogError("Seding disposition failed");
    #####:  505:                        result = MU_FAILURE;
        -:  506:                    }
        -:  507:                    else
        -:  508:                    {
    #####:  509:                        result = 0;
        -:  510:                    }
        -:  511:                }
        -:  512:            }
        -:  513:        }
        -:  514:    }
        -:  515:
    #####:  516:    return result;
        -:  517:}
        -:  518:
    #####:  519:void messagereceiver_set_trace(MESSAGE_RECEIVER_HANDLE message_receiver, bool trace_on)
        -:  520:{
    #####:  521:    if (message_receiver == NULL)
        -:  522:    {
    #####:  523:        LogError("NULL message_receiver");
        -:  524:    }
        -:  525:    else
        -:  526:    {
        -:  527:        /* No tracing is yet implemented for message receiver */
        -:  528:        (void)trace_on;
        -:  529:    }
    #####:  530:}
