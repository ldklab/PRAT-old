        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/sasl_mechanism.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include "azure_macro_utils/macro_utils.h"
        -:    6:#include "azure_c_shared_utility/gballoc.h"
        -:    7:#include "azure_c_shared_utility/xlogging.h"
        -:    8:#include "azure_uamqp_c/sasl_mechanism.h"
        -:    9:
        -:   10:typedef struct SASL_MECHANISM_INSTANCE_TAG
        -:   11:{
        -:   12:    const SASL_MECHANISM_INTERFACE_DESCRIPTION* sasl_mechanism_interface_description;
        -:   13:    CONCRETE_SASL_MECHANISM_HANDLE concrete_sasl_mechanism_handle;
        -:   14:} SASL_MECHANISM_INSTANCE;
        -:   15:
        5:   16:SASL_MECHANISM_HANDLE saslmechanism_create(const SASL_MECHANISM_INTERFACE_DESCRIPTION* sasl_mechanism_interface_description, void* sasl_mechanism_create_parameters)
        -:   17:{
        -:   18:    SASL_MECHANISM_HANDLE result;
        -:   19:
        -:   20:    /* Codes_SRS_SASL_MECHANISM_01_004: [If the argument `sasl_mechanism_interface_description` is NULL, `saslmechanism_create` shall return NULL.] */
        5:   21:    if (sasl_mechanism_interface_description == NULL)
        -:   22:    {
    #####:   23:        LogError("NULL sasl_mechanism_interface_description");
    #####:   24:        result = NULL;
        -:   25:    }
        -:   26:    /* Codes_SRS_SASL_MECHANISM_01_005: [If any `sasl_mechanism_interface_description` member is NULL, `saslmechanism_create` shall fail and return NULL.] */
        5:   27:    else if ((sasl_mechanism_interface_description->concrete_sasl_mechanism_create == NULL) ||
        5:   28:        (sasl_mechanism_interface_description->concrete_sasl_mechanism_destroy == NULL) ||
        5:   29:        (sasl_mechanism_interface_description->concrete_sasl_mechanism_get_init_bytes == NULL) ||
        5:   30:        (sasl_mechanism_interface_description->concrete_sasl_mechanism_get_mechanism_name == NULL))
        -:   31:    {
    #####:   32:        LogError("Bad interface, concrete_sasl_mechanism_create = %p, concrete_sasl_mechanism_destroy = %p, concrete_sasl_mechanism_get_init_bytes = %p, concrete_sasl_mechanism_get_mechanism_name = %p",
        -:   33:            sasl_mechanism_interface_description->concrete_sasl_mechanism_create,
        -:   34:            sasl_mechanism_interface_description->concrete_sasl_mechanism_destroy,
        -:   35:            sasl_mechanism_interface_description->concrete_sasl_mechanism_get_init_bytes,
        -:   36:            sasl_mechanism_interface_description->concrete_sasl_mechanism_get_mechanism_name);
    #####:   37:        result = NULL;
        -:   38:    }
        -:   39:    else
        -:   40:    {
        5:   41:        result = (SASL_MECHANISM_HANDLE)malloc(sizeof(SASL_MECHANISM_INSTANCE));
        5:   42:        if (result == NULL)
        -:   43:        {
        -:   44:            /* Codes_SRS_SASL_MECHANISM_01_006: [If allocating the memory needed for the SASL mechanism interface fails then `saslmechanism_create` shall fail and return NULL.] */
    #####:   45:            LogError("Could not allocate memory for SASL mechanism");
        -:   46:        }
        -:   47:        else
        -:   48:        {
        5:   49:            result->sasl_mechanism_interface_description = sasl_mechanism_interface_description;
        -:   50:
        -:   51:            /* Codes_SRS_SASL_MECHANISM_01_002: [In order to instantiate the concrete SASL mechanism implementation the function `concrete_sasl_mechanism_create` from the `sasl_mechanism_interface_description` shall be called, passing the `sasl_mechanism_create_parameters` to it.] */
        5:   52:            result->concrete_sasl_mechanism_handle = result->sasl_mechanism_interface_description->concrete_sasl_mechanism_create((void*)sasl_mechanism_create_parameters);
        5:   53:            if (result->concrete_sasl_mechanism_handle == NULL)
        -:   54:            {
        -:   55:                /* Codes_SRS_SASL_MECHANISM_01_003: [If the underlying `concrete_sasl_mechanism_create` call fails, `saslmechanism_create` shall return NULL.] */
    #####:   56:                LogError("concrete_sasl_mechanism_create failed");
    #####:   57:                free(result);
    #####:   58:                result = NULL;
        -:   59:            }
        -:   60:        }
        -:   61:    }
        -:   62:
        -:   63:    /* Codes_SRS_SASL_MECHANISM_01_001: [`saslmechanism_create` shall return on success a non-NULL handle to a new SASL mechanism interface.] */
        5:   64:    return result;
        -:   65:}
        -:   66:
        4:   67:void saslmechanism_destroy(SASL_MECHANISM_HANDLE sasl_mechanism)
        -:   68:{
        4:   69:    if (sasl_mechanism == NULL)
        -:   70:    {
        -:   71:        /* Codes_SRS_SASL_MECHANISM_01_009: [If the argument `sasl_mechanism` is NULL, `saslmechanism_destroy` shall do nothing.] */
    #####:   72:        LogError("NULL sasl_mechanism");
        -:   73:    }
        -:   74:    else
        -:   75:    {
        -:   76:        /* Codes_SRS_SASL_MECHANISM_01_008: [`saslmechanism_destroy` shall also call the `concrete_sasl_mechanism_destroy` function that is member of the `sasl_mechanism_interface_description` argument passed to `saslmechanism_create`, while passing as argument to `concrete_sasl_mechanism_destroy` the result of the underlying concrete SASL mechanism handle.] */
        4:   77:        sasl_mechanism->sasl_mechanism_interface_description->concrete_sasl_mechanism_destroy(sasl_mechanism->concrete_sasl_mechanism_handle);
        -:   78:
        -:   79:        /* Codes_SRS_SASL_MECHANISM_01_007: [`saslmechanism_destroy` shall free all resources associated with the SASL mechanism handle.] */
        4:   80:        free(sasl_mechanism);
        -:   81:    }
        4:   82:}
        -:   83:
    #####:   84:int saslmechanism_get_init_bytes(SASL_MECHANISM_HANDLE sasl_mechanism, SASL_MECHANISM_BYTES* init_bytes)
        -:   85:{
        -:   86:    int result;
        -:   87:
        -:   88:    /* Codes_SRS_SASL_MECHANISM_01_012: [If the argument `sasl_mechanism` is NULL, `saslmechanism_get_init_bytes` shall fail and return a non-zero value.] */
    #####:   89:    if (sasl_mechanism == NULL)
        -:   90:    {
    #####:   91:        LogError("NULL sasl_mechanism");
    #####:   92:        result = MU_FAILURE;
        -:   93:    }
        -:   94:    else
        -:   95:    {
        -:   96:        /* Codes_SRS_SASL_MECHANISM_01_010: [`saslmechanism_get_init_bytes` shall call the specific `concrete_sasl_mechanism_get_init_bytes` function specified in `saslmechanism_create`, passing the `init_bytes` argument to it.] */
    #####:   97:        if (sasl_mechanism->sasl_mechanism_interface_description->concrete_sasl_mechanism_get_init_bytes(sasl_mechanism->concrete_sasl_mechanism_handle, init_bytes) != 0)
        -:   98:        {
        -:   99:            /* Codes_SRS_SASL_MECHANISM_01_013: [If the underlying `concrete_sasl_mechanism_get_init_bytes` fails, `saslmechanism_get_init_bytes` shall fail and return a non-zero value.] */
    #####:  100:            LogError("concrete_sasl_mechanism_get_init_bytes failed");
    #####:  101:            result = MU_FAILURE;
        -:  102:        }
        -:  103:        else
        -:  104:        {
        -:  105:            /* Codes_SRS_SASL_MECHANISM_01_011: [On success, `saslmechanism_get_init_bytes` shall return 0.] */
    #####:  106:            result = 0;
        -:  107:        }
        -:  108:    }
        -:  109:
    #####:  110:    return result;
        -:  111:}
        -:  112:
    #####:  113:const char* saslmechanism_get_mechanism_name(SASL_MECHANISM_HANDLE sasl_mechanism)
        -:  114:{
        -:  115:    const char* result;
        -:  116:
        -:  117:    /* Codes_SRS_SASL_MECHANISM_01_016: [If the argument `sasl_mechanism` is NULL, `saslmechanism_get_mechanism_name` shall fail and return a non-zero value.] */
    #####:  118:    if (sasl_mechanism == NULL)
        -:  119:    {
    #####:  120:        LogError("NULL sasl_mechanism");
    #####:  121:        result = NULL;
        -:  122:    }
        -:  123:    else
        -:  124:    {
        -:  125:        /* Codes_SRS_SASL_MECHANISM_01_014: [`saslmechanism_get_mechanism_name` shall call the specific `concrete_sasl_mechanism_get_mechanism_name` function specified in `saslmechanism_create`.] */
        -:  126:        /* Codes_SRS_SASL_MECHANISM_01_015: [On success, `saslmechanism_get_mechanism_name` shall return a pointer to a string with the mechanism name.] */
        -:  127:        /* Codes_SRS_SASL_MECHANISM_01_017: [If the underlying `concrete_sasl_mechanism_get_mechanism_name` fails, `saslmechanism_get_mechanism_name` shall return NULL.] */
    #####:  128:        result = sasl_mechanism->sasl_mechanism_interface_description->concrete_sasl_mechanism_get_mechanism_name(sasl_mechanism->concrete_sasl_mechanism_handle);
    #####:  129:        if (result == NULL)
        -:  130:        {
    #####:  131:            LogError("concrete_sasl_mechanism_get_mechanism_name failed");
        -:  132:        }
        -:  133:    }
        -:  134:
    #####:  135:    return result;
        -:  136:}
        -:  137:
    #####:  138:int saslmechanism_challenge(SASL_MECHANISM_HANDLE sasl_mechanism, const SASL_MECHANISM_BYTES* challenge_bytes, SASL_MECHANISM_BYTES* response_bytes)
        -:  139:{
        -:  140:    int result;
        -:  141:
        -:  142:    /* Codes_SRS_SASL_MECHANISM_01_020: [If the argument `sasl_mechanism` is NULL, `saslmechanism_challenge` shall fail and return a non-zero value.] */
    #####:  143:    if (sasl_mechanism == NULL)
        -:  144:    {
    #####:  145:        LogError("NULL sasl_mechanism");
    #####:  146:        result = MU_FAILURE;
        -:  147:    }
        -:  148:    else
        -:  149:    {
        -:  150:        /* Codes_SRS_SASL_MECHANISM_01_018: [`saslmechanism_challenge` shall call the specific `concrete_sasl_mechanism_challenge` function specified in `saslmechanism_create`, while passing the `challenge_bytes` and `response_bytes` arguments to it.] */
    #####:  151:        if (sasl_mechanism->sasl_mechanism_interface_description->concrete_sasl_mechanism_challenge(sasl_mechanism->concrete_sasl_mechanism_handle, challenge_bytes, response_bytes) != 0)
        -:  152:        {
        -:  153:            /* Codes_SRS_SASL_MECHANISM_01_021: [If the underlying `concrete_sasl_mechanism_challenge` fails, `saslmechanism_challenge` shall fail and return a non-zero value.] */
    #####:  154:            LogError("concrete_sasl_mechanism_challenge failed");
    #####:  155:            result = MU_FAILURE;
        -:  156:        }
        -:  157:        else
        -:  158:        {
        -:  159:            /* Codes_SRS_SASL_MECHANISM_01_019: [On success, `saslmechanism_challenge` shall return 0.] */
    #####:  160:            result = 0;
        -:  161:        }
        -:  162:    }
        -:  163:
    #####:  164:    return result;
        -:  165:}
