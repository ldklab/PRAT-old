        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/deps/azure-c-shared-utility/src/gbnetwork.c
        -:    0:Programs:80
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <stdint.h>
        -:    6:#include "azure_c_shared_utility/lock.h"
        -:    7:#include "azure_c_shared_utility/optimize_size.h"
        -:    8:#include "azure_c_shared_utility/xlogging.h"
        -:    9:
        -:   10:#ifdef WIN32
        -:   11:#include <winsock2.h>
        -:   12:#else
        -:   13:#include <sys/socket.h>
        -:   14:#endif
        -:   15:
        -:   16:#ifndef SIZE_MAX
        -:   17:#define SIZE_MAX ((size_t)~(size_t)0)
        -:   18:#endif
        -:   19:
        -:   20:typedef enum GBNETWORK_STATE_TAG
        -:   21:{
        -:   22:    GBNETWORK_STATE_INIT,
        -:   23:    GBNETWORK_STATE_NOT_INIT
        -:   24:} GBNETWORK_STATE;
        -:   25:
        -:   26:static GBNETWORK_STATE gbnetworkState = GBNETWORK_STATE_NOT_INIT;
        -:   27:
        -:   28:static uint64_t g_send_bytes = 0;
        -:   29:static uint64_t g_send_number = 0;
        -:   30:static uint64_t g_recv_bytes = 0;
        -:   31:static uint64_t g_recv_number = 0;
        -:   32:
        -:   33:static LOCK_HANDLE gbnetworkThreadSafeLock = NULL;
        -:   34:
    #####:   35:int gbnetwork_init(void)
        -:   36:{
        -:   37:    int result;
        -:   38:
    #####:   39:    if (gbnetworkState != GBNETWORK_STATE_NOT_INIT)
        -:   40:    {
    #####:   41:        result = MU_FAILURE;
        -:   42:    }
    #####:   43:    else if ((gbnetworkThreadSafeLock = Lock_Init()) == NULL)
        -:   44:    {
    #####:   45:        result = MU_FAILURE;
        -:   46:    }
        -:   47:    else
        -:   48:    {
    #####:   49:        gbnetworkState = GBNETWORK_STATE_INIT;
        -:   50:
    #####:   51:        g_send_bytes = 0;
    #####:   52:        g_send_number = 0;
    #####:   53:        g_recv_bytes = 0;
    #####:   54:        g_recv_number = 0;
        -:   55:
    #####:   56:        result = 0;
        -:   57:    }
        -:   58:
    #####:   59:    return result;
        -:   60:}
        -:   61:
    #####:   62:void gbnetwork_deinit(void)
        -:   63:{
    #####:   64:    if (gbnetworkState == GBNETWORK_STATE_INIT)
        -:   65:    {
    #####:   66:        (void)Lock_Deinit(gbnetworkThreadSafeLock);
        -:   67:    }
    #####:   68:    gbnetworkState = GBNETWORK_STATE_NOT_INIT;
    #####:   69:}
        -:   70:
    #####:   71:void gbnetwork_resetMetrics()
        -:   72:{
    #####:   73:    if (gbnetworkState != GBNETWORK_STATE_INIT)
        -:   74:    {
    #####:   75:        LogError("gbnetwork is not initialized.");
        -:   76:    }
    #####:   77:    else if (LOCK_OK != Lock(gbnetworkThreadSafeLock))
        -:   78:    {
    #####:   79:        LogError("Failed to get the Lock.");
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        g_send_bytes = 0;
    #####:   84:        g_send_number = 0;
    #####:   85:        g_recv_bytes = 0;
    #####:   86:        g_recv_number = 0;
    #####:   87:        (void)Unlock(gbnetworkThreadSafeLock);
        -:   88:    }
    #####:   89:}
        -:   90:
        -:   91:#ifdef WIN32
        -:   92:int gbnetwork_send(SOCKET sock, const char* buf, int len, int flags)
        -:   93:#else
    #####:   94:ssize_t gbnetwork_send(int sock, const void* buf, size_t len, int flags)
        -:   95:#endif
        -:   96:{
    #####:   97:    if (gbnetworkState != GBNETWORK_STATE_INIT)
        -:   98:    {
        -:   99:        // Don't log here by design
        -:  100:    }
    #####:  101:    else if (LOCK_OK != Lock(gbnetworkThreadSafeLock))
        -:  102:    {
    #####:  103:        LogError("Failed to get the Lock.");
        -:  104:    }
        -:  105:    else
        -:  106:    {
    #####:  107:        g_send_number++;
    #####:  108:        g_send_bytes += len;
    #####:  109:        (void)Unlock(gbnetworkThreadSafeLock);
        -:  110:    }
    #####:  111:    return send(sock, buf, len, flags);
        -:  112:}
        -:  113:
        -:  114:#ifdef WIN32
        -:  115:int gbnetwork_recv(SOCKET sock, char* buf, int len, int flags)
        -:  116:#else
    #####:  117:ssize_t gbnetwork_recv(int sock, void* buf, size_t len, int flags)
        -:  118:#endif
        -:  119:{
        -:  120:#ifdef WIN32
        -:  121:    int result;
        -:  122:#else
        -:  123:    ssize_t result;
        -:  124:#endif
        -:  125:
    #####:  126:    result = recv(sock, buf, len, flags);
        -:  127:
    #####:  128:    if (gbnetworkState != GBNETWORK_STATE_INIT)
        -:  129:    {
        -:  130:        // Don't log here by design
        -:  131:    }
    #####:  132:    else if (LOCK_OK != Lock(gbnetworkThreadSafeLock))
        -:  133:    {
    #####:  134:        LogError("Failed to get the Lock.");
        -:  135:    }
        -:  136:    else
        -:  137:    {
    #####:  138:        if (result > 0)
        -:  139:        {
    #####:  140:            g_recv_bytes += result;
    #####:  141:            g_recv_number++;
        -:  142:        }
    #####:  143:        (void)Unlock(gbnetworkThreadSafeLock);
        -:  144:    }
    #####:  145:    return result;
        -:  146:}
        -:  147:
    #####:  148:uint64_t gbnetwork_getBytesSent(void)
        -:  149:{
        -:  150:    uint64_t result;
        -:  151:
    #####:  152:    if (gbnetworkState != GBNETWORK_STATE_INIT)
        -:  153:    {
    #####:  154:        LogError("gbnetwork is not initialized.");
    #####:  155:        result = 0;
        -:  156:    }
    #####:  157:    else if (LOCK_OK != Lock(gbnetworkThreadSafeLock))
        -:  158:    {
    #####:  159:        LogError("Failed to get the Lock.");
    #####:  160:        result = 0;
        -:  161:    }
        -:  162:    else
        -:  163:    {
    #####:  164:        result = g_send_bytes;
    #####:  165:        (void)Unlock(gbnetworkThreadSafeLock);
        -:  166:    }
    #####:  167:    return result;
        -:  168:}
        -:  169:
    #####:  170:uint64_t gbnetwork_getNumSends(void)
        -:  171:{
        -:  172:    uint64_t result;
        -:  173:
    #####:  174:    if (gbnetworkState != GBNETWORK_STATE_INIT)
        -:  175:    {
    #####:  176:        LogError("gbnetwork is not initialized.");
    #####:  177:        result = 0;
        -:  178:    }
    #####:  179:    else if (LOCK_OK != Lock(gbnetworkThreadSafeLock))
        -:  180:    {
    #####:  181:        LogError("Failed to get the Lock.");
    #####:  182:        result = 0;
        -:  183:    }
        -:  184:    else
        -:  185:    {
    #####:  186:        result = g_send_number;
    #####:  187:        (void)Unlock(gbnetworkThreadSafeLock);
        -:  188:    }
    #####:  189:    return result;
        -:  190:}
        -:  191:
    #####:  192:uint64_t gbnetwork_getBytesRecv()
        -:  193:{
        -:  194:    uint64_t result;
        -:  195:
    #####:  196:    if (gbnetworkState != GBNETWORK_STATE_INIT)
        -:  197:    {
    #####:  198:        LogError("gbnetwork is not initialized.");
    #####:  199:        result = 0;
        -:  200:    }
    #####:  201:    else if (LOCK_OK != Lock(gbnetworkThreadSafeLock))
        -:  202:    {
    #####:  203:        LogError("Failed to get the Lock.");
    #####:  204:        result = 0;
        -:  205:    }
        -:  206:    else
        -:  207:    {
    #####:  208:        result = g_recv_bytes;
    #####:  209:        (void)Unlock(gbnetworkThreadSafeLock);
        -:  210:    }
    #####:  211:    return result;
        -:  212:}
        -:  213:
    #####:  214:uint64_t gbnetwork_getNumRecv()
        -:  215:{
        -:  216:    uint64_t result;
        -:  217:
    #####:  218:    if (gbnetworkState != GBNETWORK_STATE_INIT)
        -:  219:    {
    #####:  220:        LogError("gbnetwork is not initialized.");
    #####:  221:        result = 0;
        -:  222:    }
    #####:  223:    else if (LOCK_OK != Lock(gbnetworkThreadSafeLock))
        -:  224:    {
    #####:  225:        LogError("Failed to get the Lock.");
    #####:  226:        result = 0;
        -:  227:    }
        -:  228:    else
        -:  229:    {
    #####:  230:        result = g_recv_number;
    #####:  231:        (void)Unlock(gbnetworkThreadSafeLock);
        -:  232:    }
    #####:  233:    return result;
        -:  234:}
