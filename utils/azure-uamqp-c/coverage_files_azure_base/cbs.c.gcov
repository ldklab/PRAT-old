        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/cbs.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <stdbool.h>
        -:    6:#include <stdio.h>
        -:    7:#include <string.h>
        -:    8:#include "azure_macro_utils/macro_utils.h"
        -:    9:#include "azure_c_shared_utility/gballoc.h"
        -:   10:#include "azure_c_shared_utility/singlylinkedlist.h"
        -:   11:#include "azure_c_shared_utility/xlogging.h"
        -:   12:#include "azure_uamqp_c/cbs.h"
        -:   13:#include "azure_uamqp_c/amqp_management.h"
        -:   14:#include "azure_uamqp_c/session.h"
        -:   15:
        -:   16:typedef enum CBS_STATE_TAG
        -:   17:{
        -:   18:    CBS_STATE_CLOSED,
        -:   19:    CBS_STATE_OPENING,
        -:   20:    CBS_STATE_OPEN,
        -:   21:    CBS_STATE_ERROR
        -:   22:} CBS_STATE;
        -:   23:
        -:   24:typedef struct CBS_OPERATION_TAG
        -:   25:{
        -:   26:    ON_CBS_OPERATION_COMPLETE on_cbs_operation_complete;
        -:   27:    void* on_cbs_operation_complete_context;
        -:   28:    SINGLYLINKEDLIST_HANDLE pending_operations;
        -:   29:} CBS_OPERATION;
        -:   30:
        -:   31:typedef struct CBS_INSTANCE_TAG
        -:   32:{
        -:   33:    AMQP_MANAGEMENT_HANDLE amqp_management;
        -:   34:    CBS_STATE cbs_state;
        -:   35:    ON_CBS_OPEN_COMPLETE on_cbs_open_complete;
        -:   36:    void* on_cbs_open_complete_context;
        -:   37:    ON_CBS_ERROR on_cbs_error;
        -:   38:    void* on_cbs_error_context;
        -:   39:    SINGLYLINKEDLIST_HANDLE pending_operations;
        -:   40:} CBS_INSTANCE;
        -:   41:
    #####:   42:static int add_string_key_value_pair_to_map(AMQP_VALUE map, const char* key, const char* value)
        -:   43:{
        -:   44:    int result;
        -:   45:
    #####:   46:    AMQP_VALUE key_value = amqpvalue_create_string(key);
    #####:   47:    if (key_value == NULL)
        -:   48:    {
        -:   49:        /* Codes_SRS_CBS_01_072: [ If constructing the message fails, `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:   50:        LogError("Failed creating value for property key %s", key);
    #####:   51:        result = MU_FAILURE;
        -:   52:    }
        -:   53:    else
        -:   54:    {
    #####:   55:        AMQP_VALUE value_value = amqpvalue_create_string(value);
    #####:   56:        if (value_value == NULL)
        -:   57:        {
        -:   58:            /* Codes_SRS_CBS_01_072: [ If constructing the message fails, `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:   59:            LogError("Failed creating value for property value %s", value);
    #####:   60:            result = MU_FAILURE;
        -:   61:        }
        -:   62:        else
        -:   63:        {
    #####:   64:            if (amqpvalue_set_map_value(map, key_value, value_value) != 0)
        -:   65:            {
        -:   66:                /* Codes_SRS_CBS_01_072: [ If constructing the message fails, `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:   67:                LogError("Failed inserting key/value pair in the map");
    #####:   68:                result = MU_FAILURE;
        -:   69:            }
        -:   70:            else
        -:   71:            {
    #####:   72:                result = 0;
        -:   73:            }
        -:   74:
    #####:   75:            amqpvalue_destroy(value_value);
        -:   76:        }
        -:   77:
    #####:   78:        amqpvalue_destroy(key_value);
        -:   79:    }
        -:   80:
    #####:   81:    return result;
        -:   82:}
        -:   83:
        3:   84:static void on_underlying_amqp_management_open_complete(void* context, AMQP_MANAGEMENT_OPEN_RESULT open_result)
        -:   85:{
        3:   86:    if (context == NULL)
        -:   87:    {
        -:   88:        /* Codes_SRS_CBS_01_105: [ When `on_amqp_management_open_complete` is called with NULL `context`, it shall do nothing. ]*/
    #####:   89:        LogError("on_underlying_amqp_management_open_complete called with NULL context");
        -:   90:    }
        -:   91:    else
        -:   92:    {
        3:   93:        CBS_HANDLE cbs = (CBS_HANDLE)context;
        -:   94:
        3:   95:        switch (cbs->cbs_state)
        -:   96:        {
    #####:   97:        default:
    #####:   98:            LogError("AMQP management open complete in unknown state");
    #####:   99:            break;
        -:  100:
    #####:  101:        case CBS_STATE_CLOSED:
        -:  102:        case CBS_STATE_ERROR:
    #####:  103:            LogError("Unexpected AMQP management open complete");
    #####:  104:            break;
        -:  105:
    #####:  106:        case CBS_STATE_OPEN:
    #####:  107:            LogError("Unexpected AMQP management open complete in OPEN");
        -:  108:            /* Codes_SRS_CBS_01_109: [ When `on_amqp_management_open_complete` is called when the CBS is OPEN, the callback `on_cbs_error` shall be called and the `on_cbs_error_context` shall be passed as argument. ]*/
    #####:  109:            cbs->cbs_state = CBS_STATE_ERROR;
    #####:  110:            cbs->on_cbs_error(cbs->on_cbs_error_context);
    #####:  111:            break;
        -:  112:
        3:  113:        case CBS_STATE_OPENING:
        -:  114:        {
        -:  115:            switch (open_result)
        -:  116:            {
    #####:  117:            default:
    #####:  118:                LogError("Unknown AMQP management state");
        -:  119:
        -:  120:            case AMQP_MANAGEMENT_OPEN_ERROR:
        3:  121:                cbs->cbs_state = CBS_STATE_CLOSED;
        -:  122:                /* Codes_SRS_CBS_01_113: [ When `on_amqp_management_open_complete` reports a failure, the underlying AMQP management shall be closed by calling `amqp_management_close`. ]*/
        3:  123:                (void)amqp_management_close(cbs->amqp_management);
        -:  124:                /* Codes_SRS_CBS_01_107: [ If CBS is OPENING and `open_result` is `AMQP_MANAGEMENT_OPEN_ERROR` the callback `on_cbs_open_complete` shall be called with `CBS_OPEN_ERROR` and the `on_cbs_open_complete_context` shall be passed as argument. ]*/
        3:  125:                cbs->on_cbs_open_complete(cbs->on_cbs_open_complete_context, CBS_OPEN_ERROR);
        3:  126:                break;
        -:  127:
    #####:  128:            case AMQP_MANAGEMENT_OPEN_CANCELLED:
    #####:  129:                cbs->cbs_state = CBS_STATE_CLOSED;
        -:  130:                /* Codes_SRS_CBS_01_113: [ When `on_amqp_management_open_complete` reports a failure, the underlying AMQP management shall be closed by calling `amqp_management_close`. ]*/
    #####:  131:                (void)amqp_management_close(cbs->amqp_management);
        -:  132:                /* Codes_SRS_CBS_01_108: [ If CBS is OPENING and `open_result` is `AMQP_MANAGEMENT_OPEN_CANCELLED` the callback `on_cbs_open_complete` shall be called with `CBS_OPEN_CANCELLED` and the `on_cbs_open_complete_context` shall be passed as argument. ]*/
    #####:  133:                cbs->on_cbs_open_complete(cbs->on_cbs_open_complete_context, CBS_OPEN_CANCELLED);
    #####:  134:                break;
        -:  135:
    #####:  136:            case AMQP_MANAGEMENT_OPEN_OK:
        -:  137:                /* Codes_SRS_CBS_01_106: [ If CBS is OPENING and `open_result` is `AMQP_MANAGEMENT_OPEN_OK` the callback `on_cbs_open_complete` shall be called with `CBS_OPEN_OK` and the `on_cbs_open_complete_context` shall be passed as argument. ]*/
    #####:  138:                cbs->cbs_state = CBS_STATE_OPEN;
    #####:  139:                cbs->on_cbs_open_complete(cbs->on_cbs_open_complete_context, CBS_OPEN_OK);
    #####:  140:                break;
        -:  141:            }
        3:  142:            break;
        -:  143:        }
        -:  144:        }
        -:  145:    }
        3:  146:}
        -:  147:
    #####:  148:static void on_underlying_amqp_management_error(void* context)
        -:  149:{
    #####:  150:    if (context == NULL)
        -:  151:    {
        -:  152:        /* Codes_SRS_CBS_01_110: [ When `on_amqp_management_error` is called with NULL `context`, it shall do nothing. ]*/
    #####:  153:        LogError("on_underlying_amqp_management_error called with NULL context");
        -:  154:    }
        -:  155:    else
        -:  156:    {
    #####:  157:        CBS_HANDLE cbs = (CBS_HANDLE)context;
        -:  158:
    #####:  159:        switch (cbs->cbs_state)
        -:  160:        {
    #####:  161:        default:
    #####:  162:            LogError("AMQP management error in unknown state");
    #####:  163:            break;
        -:  164:
    #####:  165:        case CBS_STATE_CLOSED:
    #####:  166:            LogError("Unexpected AMQP error in CLOSED state");
    #####:  167:            break;
        -:  168:
    #####:  169:        case CBS_STATE_OPENING:
    #####:  170:            cbs->cbs_state = CBS_STATE_CLOSED;
        -:  171:            /* Codes_SRS_CBS_01_114: [ Additionally the underlying AMQP management shall be closed by calling `amqp_management_close`. ]*/
    #####:  172:            (void)amqp_management_close(cbs->amqp_management);
        -:  173:            /* Codes_SRS_CBS_01_111: [ If CBS is OPENING the callback `on_cbs_open_complete` shall be called with `CBS_OPEN_ERROR` and the `on_cbs_open_complete_context` shall be passed as argument. ]*/
    #####:  174:            cbs->on_cbs_open_complete(cbs->on_cbs_open_complete_context, CBS_OPEN_ERROR);
    #####:  175:            break;
        -:  176:
    #####:  177:        case CBS_STATE_OPEN:
        -:  178:            /* Codes_SRS_CBS_01_112: [ If CBS is OPEN the callback `on_cbs_error` shall be called and the `on_cbs_error_context` shall be passed as argument. ]*/
    #####:  179:            cbs->cbs_state = CBS_STATE_ERROR;
    #####:  180:            cbs->on_cbs_error(cbs->on_cbs_error_context);
    #####:  181:            break;
        -:  182:        }
        -:  183:    }
    #####:  184:}
        -:  185:
    #####:  186:static void on_amqp_management_execute_operation_complete(void* context, AMQP_MANAGEMENT_EXECUTE_OPERATION_RESULT execute_operation_result, unsigned int status_code, const char* status_description, MESSAGE_HANDLE message)
        -:  187:{
    #####:  188:    if (context == NULL)
        -:  189:    {
        -:  190:        /* Codes_SRS_CBS_01_091: [ When `on_amqp_management_execute_operation_complete` is called with a NULL context it shall do nothing. ]*/
    #####:  191:        LogError("on_amqp_management_execute_operation_complete called with NULL context");
        -:  192:    }
        -:  193:    else
        -:  194:    {
        -:  195:        /* Codes_SRS_CBS_01_103: [ The `context` shall be used to obtain the pending operation information stored in the pending operations linked list by calling `singlylinkedlist_item_get_value`. ]*/
    #####:  196:        CBS_OPERATION* cbs_operation = (CBS_OPERATION*)singlylinkedlist_item_get_value((LIST_ITEM_HANDLE)context);
        -:  197:        CBS_OPERATION_RESULT cbs_operation_result;
        -:  198:
        -:  199:        (void)message;
        -:  200:
    #####:  201:        if (cbs_operation == NULL)
        -:  202:        {
    #####:  203:            LogError("NULL cbs_operation");
        -:  204:        }
        -:  205:        else
        -:  206:        {
    #####:  207:            switch (execute_operation_result)
        -:  208:            {
    #####:  209:            default:
    #####:  210:                cbs_operation_result = CBS_OPERATION_RESULT_CBS_ERROR;
    #####:  211:                break;
        -:  212:
    #####:  213:            case AMQP_MANAGEMENT_EXECUTE_OPERATION_FAILED_BAD_STATUS:
        -:  214:                /* Tests_SRS_CBS_01_094: [ When `on_amqp_management_execute_operation_complete` is called with `AMQP_MANAGEMENT_EXECUTE_OPERATION_FAILED_BAD_STATUS`, the associated cbs operation complete callback shall be called with `CBS_OPERATION_RESULT_OPERATION_FAILED` and passing the `on_cbs_put_token_complete_context` as the context argument. ]*/
    #####:  215:                cbs_operation_result = CBS_OPERATION_RESULT_OPERATION_FAILED;
    #####:  216:                break;
        -:  217:
    #####:  218:            case AMQP_MANAGEMENT_EXECUTE_OPERATION_INSTANCE_CLOSED:
        -:  219:                /* Tests_SRS_CBS_01_115: [ When `on_amqp_management_execute_operation_complete` is called with `AMQP_MANAGEMENT_EXECUTE_OPERATION_INSTANCE_CLOSED`, the associated cbs operation complete callback shall be called with `CBS_OPERATION_RESULT_INSTANCE_CLOSED` and passing the `on_cbs_put_token_complete_context` as the context argument. ]*/
    #####:  220:                cbs_operation_result = CBS_OPERATION_RESULT_INSTANCE_CLOSED;
    #####:  221:                break;
        -:  222:
    #####:  223:            case AMQP_MANAGEMENT_EXECUTE_OPERATION_ERROR:
        -:  224:                /* Tests_SRS_CBS_01_093: [ When `on_amqp_management_execute_operation_complete` is called with `AMQP_MANAGEMENT_EXECUTE_OPERATION_ERROR`, the associated cbs operation complete callback shall be called with `CBS_OPERATION_RESULT_CBS_ERROR` and passing the `on_cbs_put_token_complete_context` as the context argument. ]*/
    #####:  225:                cbs_operation_result = CBS_OPERATION_RESULT_CBS_ERROR;
    #####:  226:                break;
        -:  227:
    #####:  228:            case AMQP_MANAGEMENT_EXECUTE_OPERATION_OK:
        -:  229:                /* Codes_SRS_CBS_01_092: [ When `on_amqp_management_execute_operation_complete` is called with `AMQP_MANAGEMENT_EXECUTE_OPERATION_OK`, the associated cbs operation complete callback shall be called with `CBS_OPERATION_RESULT_OK` and passing the `on_cbs_put_token_complete_context` as the context argument. ]*/
    #####:  230:                cbs_operation_result = CBS_OPERATION_RESULT_OK;
    #####:  231:                break;
        -:  232:            }
        -:  233:
        -:  234:            /* Codes_SRS_CBS_01_095: [ `status_code` and `status_description` shall be passed as they are to the cbs operation complete callback. ]*/
        -:  235:            /* Codes_SRS_CBS_01_014: [ The response message has the following application-properties: ]*/
        -:  236:            /* Codes_SRS_CBS_01_013: [ status-code    No    int    HTTP response code [RFC2616]. ]*/
        -:  237:            /* Codes_SRS_CBS_01_015: [ status-description    Yes    string    Description of the status. ]*/
        -:  238:            /* Codes_SRS_CBS_01_016: [ The body of the message MUST be empty. ]*/
        -:  239:            /* Codes_SRS_CBS_01_026: [ The response message has the following application-properties: ]*/
        -:  240:            /* Codes_SRS_CBS_01_027: [ status-code    Yes    int    HTTP response code [RFC2616]. ]*/
        -:  241:            /* Codes_SRS_CBS_01_028: [ status-description    No    string    Description of the status. ]*/
        -:  242:            /* Codes_SRS_CBS_01_029: [ The body of the message MUST be empty. ]*/
    #####:  243:            cbs_operation->on_cbs_operation_complete(cbs_operation->on_cbs_operation_complete_context, cbs_operation_result, status_code, status_description);
        -:  244:
        -:  245:            /* Codes_SRS_CBS_01_102: [ The pending operation shall be removed from the pending operations list by calling `singlylinkedlist_remove`. ]*/
    #####:  246:            if (singlylinkedlist_remove(cbs_operation->pending_operations, (LIST_ITEM_HANDLE)context) != 0)
        -:  247:            {
    #####:  248:                LogError("Failed removing operation from the pending list");
        -:  249:            }
        -:  250:
        -:  251:            /* Codes_SRS_CBS_01_096: [ The `context` for the operation shall also be freed. ]*/
    #####:  252:            free(cbs_operation);
        -:  253:        }
        -:  254:    }
    #####:  255:}
        -:  256:
        3:  257:CBS_HANDLE cbs_create(SESSION_HANDLE session)
        -:  258:{
        -:  259:    CBS_INSTANCE* cbs;
        -:  260:
        3:  261:    if (session == NULL)
        -:  262:    {
        -:  263:        /* Codes_SRS_CBS_01_033: [** If `session` is NULL then `cbs_create` shall fail and return NULL. ]*/
    #####:  264:        LogError("NULL session handle");
    #####:  265:        cbs = NULL;
        -:  266:    }
        -:  267:    else
        -:  268:    {
        3:  269:        cbs = (CBS_INSTANCE*)malloc(sizeof(CBS_INSTANCE));
        3:  270:        if (cbs == NULL)
        -:  271:        {
        -:  272:            /* Codes_SRS_CBS_01_076: [ If allocating memory for the new handle fails, `cbs_create` shall fail and return NULL. ]*/
    #####:  273:            LogError("Cannot allocate memory for cbs instance.");
        -:  274:        }
        -:  275:        else
        -:  276:        {
        -:  277:            /* Codes_SRS_CBS_01_097: [ `cbs_create` shall create a singly linked list for pending operations by calling `singlylinkedlist_create`. ]*/
        3:  278:            cbs->pending_operations = singlylinkedlist_create();
        3:  279:            if (cbs->pending_operations == NULL)
        -:  280:            {
        -:  281:                /* Codes_SRS_CBS_01_101: [ If `singlylinkedlist_create` fails, `cbs_create` shall fail and return NULL. ]*/
    #####:  282:                LogError("Cannot allocate pending operations list.");
        -:  283:            }
        -:  284:            else
        -:  285:            {
        -:  286:                /* Codes_SRS_CBS_01_034: [ `cbs_create` shall create an AMQP management handle by calling `amqp_management_create`. ]*/
        -:  287:                /* Codes_SRS_CBS_01_002: [ Tokens are communicated between AMQP peers by sending specially-formatted AMQP messages to the Claims-based Security Node. ]*/
        -:  288:                /* Codes_SRS_CBS_01_003: [ The mechanism follows the scheme defined in the AMQP Management specification [AMQPMAN]. ]*/
        3:  289:                cbs->amqp_management = amqp_management_create(session, "$cbs");
        3:  290:                if (cbs->amqp_management == NULL)
        -:  291:                {
    #####:  292:                    LogError("Cannot create AMQP management instance for the $cbs node.");
        -:  293:                }
        -:  294:                else
        -:  295:                {
        -:  296:                    /* Codes_SRS_CBS_01_116: [ If setting the override key names fails, then `cbs_create` shall fail and return NULL. ]*/
        3:  297:                    if (amqp_management_set_override_status_code_key_name(cbs->amqp_management, "status-code") != 0)
        -:  298:                    {
        -:  299:                        /* Codes_SRS_CBS_01_116: [ If setting the override key names fails, then `cbs_create` shall fail and return NULL. ]*/
    #####:  300:                        LogError("Cannot set the override status code key name");
        -:  301:                    }
        -:  302:                    else
        -:  303:                    {
        -:  304:                        /* Codes_SRS_CBS_01_118: [ `cbs_create` shall set the override status description key name on the AMQP management handle to `status-description` by calling `amqp_management_set_override_status_description_key_name`. ]*/
        3:  305:                        if (amqp_management_set_override_status_description_key_name(cbs->amqp_management, "status-description") != 0)
        -:  306:                        {
        -:  307:                            /* Codes_SRS_CBS_01_116: [ If setting the override key names fails, then `cbs_create` shall fail and return NULL. ]*/
    #####:  308:                            LogError("Cannot set the override status description key name");
        -:  309:                        }
        -:  310:                        else
        -:  311:                        {
        -:  312:                            /* Codes_SRS_CBS_01_001: [ `cbs_create` shall create a new CBS instance and on success return a non-NULL handle to it. ]*/
        3:  313:                            cbs->cbs_state = CBS_STATE_CLOSED;
        -:  314:
        3:  315:                            goto all_ok;
        -:  316:                        }
        -:  317:                    }
        -:  318:
    #####:  319:                    amqp_management_destroy(cbs->amqp_management);
        -:  320:                }
        -:  321:
    #####:  322:                singlylinkedlist_destroy(cbs->pending_operations);
        -:  323:            }
        -:  324:
    #####:  325:            free(cbs);
    #####:  326:            cbs = NULL;
        -:  327:        }
        -:  328:    }
        -:  329:
        3:  330:all_ok:
        3:  331:    return cbs;
        -:  332:}
        -:  333:
        3:  334:void cbs_destroy(CBS_HANDLE cbs)
        -:  335:{
        3:  336:    if (cbs == NULL)
        -:  337:    {
        -:  338:        /* Codes_SRS_CBS_01_037: [ If `cbs` is NULL, `cbs_destroy` shall do nothing. ]*/
    #####:  339:        LogError("NULL cbs handle");
        -:  340:    }
        -:  341:    else
        -:  342:    {
        -:  343:        LIST_ITEM_HANDLE first_pending_operation;
        -:  344:
        -:  345:        /* Codes_SRS_CBS_01_100: [ If the CBS instance is not closed, all actions performed by `cbs_close` shall be performed. ]*/
        3:  346:        if (cbs->cbs_state != CBS_STATE_CLOSED)
        -:  347:        {
    #####:  348:            (void)amqp_management_close(cbs->amqp_management);
        -:  349:        }
        -:  350:
        -:  351:        /* Codes_SRS_CBS_01_036: [ `cbs_destroy` shall free all resources associated with the handle `cbs`. ]*/
        -:  352:        /* Codes_SRS_CBS_01_038: [ `cbs_destroy` shall free the AMQP management handle created in `cbs_create` by calling `amqp_management_destroy`. ]*/
        3:  353:        amqp_management_destroy(cbs->amqp_management);
        -:  354:
        -:  355:        /* Codes_SRS_CBS_01_099: [ All pending operations shall be freed. ]*/
        3:  356:        while ((first_pending_operation = singlylinkedlist_get_head_item(cbs->pending_operations)) != NULL)
        -:  357:        {
    #####:  358:            CBS_OPERATION* pending_operation = (CBS_OPERATION*)singlylinkedlist_item_get_value(first_pending_operation);
    #####:  359:            if (pending_operation != NULL)
        -:  360:            {
    #####:  361:                pending_operation->on_cbs_operation_complete(pending_operation->on_cbs_operation_complete_context, CBS_OPERATION_RESULT_INSTANCE_CLOSED, 0, NULL);
    #####:  362:                free(pending_operation);
        -:  363:            }
        -:  364:
    #####:  365:            singlylinkedlist_remove(cbs->pending_operations, first_pending_operation);
        -:  366:        }
        -:  367:
        -:  368:        /* Codes_SRS_CBS_01_098: [ `cbs_destroy` shall free the pending operations list by calling `singlylinkedlist_destroy`. ]*/
        3:  369:        singlylinkedlist_destroy(cbs->pending_operations);
        3:  370:        free(cbs);
        -:  371:    }
        3:  372:}
        -:  373:
        3:  374:int cbs_open_async(CBS_HANDLE cbs, ON_CBS_OPEN_COMPLETE on_cbs_open_complete, void* on_cbs_open_complete_context, ON_CBS_ERROR on_cbs_error, void* on_cbs_error_context)
        -:  375:{
        -:  376:    int result;
        -:  377:
        -:  378:    /* Codes_SRS_CBS_01_042: [ `on_cbs_open_complete_context` and `on_cbs_error_context` shall be allowed to be NULL. ]*/
        3:  379:    if ((cbs == NULL) ||
        3:  380:        (on_cbs_open_complete == NULL) ||
        -:  381:        (on_cbs_error == NULL))
        -:  382:    {
        -:  383:        /* Codes_SRS_CBS_01_040: [ If any of the arguments `cbs`, `on_cbs_open_complete` or `on_cbs_error` is NULL, then `cbs_open_async` shall fail and return a non-zero value. ]*/
    #####:  384:        LogError("Bad arguments: cbs = %p, on_cbs_open_complete = %p, on_cbs_error = %p",
        -:  385:            cbs, on_cbs_open_complete, on_cbs_error);
    #####:  386:        result = MU_FAILURE;
        -:  387:    }
        3:  388:    else if (cbs->cbs_state != CBS_STATE_CLOSED)
        -:  389:    {
        -:  390:        /* Codes_SRS_CBS_01_043: [ `cbs_open_async` while already open or opening shall fail and return a non-zero value. ]*/
    #####:  391:        LogError("cbs instance already open");
    #####:  392:        result = MU_FAILURE;
        -:  393:    }
        -:  394:    else
        -:  395:    {
        -:  396:        /* Codes_SRS_CBS_01_078: [ The cbs instance shall be considered OPENING until the `on_amqp_management_open_complete` callback is called by the AMQP management instance indicating that the open has completed (succesfull or not). ]*/
        3:  397:        cbs->cbs_state = CBS_STATE_OPENING;
        3:  398:        cbs->on_cbs_open_complete = on_cbs_open_complete;
        3:  399:        cbs->on_cbs_open_complete_context = on_cbs_open_complete_context;
        3:  400:        cbs->on_cbs_error = on_cbs_error;
        3:  401:        cbs->on_cbs_error_context = on_cbs_error_context;
        -:  402:
        -:  403:        /* Codes_SRS_CBS_01_039: [ `cbs_open_async` shall open the cbs communication by calling `amqp_management_open_async` on the AMQP management handle created in `cbs_create`. ]*/
        3:  404:        if (amqp_management_open_async(cbs->amqp_management, on_underlying_amqp_management_open_complete, cbs, on_underlying_amqp_management_error, cbs) != 0)
        -:  405:        {
        -:  406:            /* Codes_SRS_CBS_01_041: [ If `amqp_management_open_async` fails, shall fail and return a non-zero value. ]*/
        3:  407:            result = MU_FAILURE;
        -:  408:        }
        -:  409:        else
        -:  410:        {
        -:  411:            /* Codes_SRS_CBS_01_077: [ On success, `cbs_open_async` shall return 0. ]*/
    #####:  412:            result = 0;
        -:  413:        }
        -:  414:    }
        -:  415:
        3:  416:    return result;
        -:  417:}
        -:  418:
    #####:  419:int cbs_close(CBS_HANDLE cbs)
        -:  420:{
        -:  421:    int result;
        -:  422:
    #####:  423:    if (cbs == NULL)
        -:  424:    {
        -:  425:        /* Codes_SRS_CBS_01_045: [ If the argument `cbs` is NULL, `cbs_close` shall fail and return a non-zero value. ]*/
    #####:  426:        LogError("NULL cbs handle");
    #####:  427:        result = MU_FAILURE;
        -:  428:    }
    #####:  429:    else if (cbs->cbs_state == CBS_STATE_CLOSED)
        -:  430:    {
        -:  431:        /* Codes_SRS_CBS_01_047: [ `cbs_close` when closed shall fail and return a non-zero value. ]*/
        -:  432:        /* Codes_SRS_CBS_01_048: [ `cbs_close` when not opened shall fail and return a non-zero value. ]*/
    #####:  433:        LogError("Already closed");
    #####:  434:        result = MU_FAILURE;
        -:  435:    }
        -:  436:    else
        -:  437:    {
        -:  438:        /* Codes_SRS_CBS_01_044: [ `cbs_close` shall close the CBS instance by calling `amqp_management_close` on the underlying AMQP management handle. ]*/
    #####:  439:        if (amqp_management_close(cbs->amqp_management) != 0)
        -:  440:        {
        -:  441:            /* Codes_SRS_CBS_01_046: [ If `amqp_management_close` fails, `cbs_close` shall fail and return a non-zero value. ]*/
    #####:  442:            LogError("Failed closing AMQP management instance");
    #####:  443:            result = MU_FAILURE;
        -:  444:        }
        -:  445:        else
        -:  446:        {
    #####:  447:            if (cbs->cbs_state == CBS_STATE_OPENING)
        -:  448:            {
        -:  449:                /* Codes_SRS_CBS_01_079: [ If `cbs_close` is called while OPENING, the `on_cbs_open_complete` callback shall be called with `CBS_OPEN_CANCELLED`, while passing the `on_cbs_open_complete_context` as argument. ]*/
    #####:  450:                cbs->on_cbs_open_complete(cbs->on_cbs_open_complete_context, CBS_OPEN_CANCELLED);
        -:  451:            }
        -:  452:
    #####:  453:            cbs->cbs_state = CBS_STATE_CLOSED;
        -:  454:
        -:  455:            /* Codes_SRS_CBS_01_080: [ On success, `cbs_close` shall return 0. ]*/
    #####:  456:            result = 0;
        -:  457:        }
        -:  458:    }
        -:  459:
    #####:  460:    return result;
        -:  461:}
        -:  462:
    #####:  463:int cbs_put_token_async(CBS_HANDLE cbs, const char* type, const char* audience, const char* token, ON_CBS_OPERATION_COMPLETE on_cbs_put_token_complete, void* on_cbs_put_token_complete_context)
        -:  464:{
        -:  465:    int result;
        -:  466:
        -:  467:    /* Codes_SRS_CBS_01_083: [ `on_cbs_put_token_complete_context` shall be allowed to be NULL. ]*/
    #####:  468:    if ((cbs == NULL) ||
    #####:  469:        (type == NULL) ||
    #####:  470:        (audience == NULL) ||
    #####:  471:        (token == NULL) ||
        -:  472:        (on_cbs_put_token_complete == NULL))
        -:  473:    {
        -:  474:        /* Codes_SRS_CBS_01_050: [ If any of the arguments `cbs`, `type`, `audience`, `token` or `on_cbs_put_token_complete` is NULL `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  475:        LogError("Bad arguments: cbs = %p, type = %p, audience = %p, token = %p, on_cbs_put_token_complete = %p",
        -:  476:            cbs, type, audience, token, on_cbs_put_token_complete);
    #####:  477:        result = MU_FAILURE;
        -:  478:    }
    #####:  479:    else if ((cbs->cbs_state == CBS_STATE_CLOSED) ||
    #####:  480:        (cbs->cbs_state == CBS_STATE_ERROR))
        -:  481:    {
        -:  482:        /* Codes_SRS_CBS_01_058: [ If `cbs_put_token_async` is called when the CBS instance is not yet open or in error, it shall fail and return a non-zero value. ]*/
    #####:  483:        LogError("put token called while closed or in error");
    #####:  484:        result = MU_FAILURE;
        -:  485:    }
        -:  486:    else
        -:  487:    {
        -:  488:        /* Codes_SRS_CBS_01_049: [ `cbs_put_token_async` shall construct a request message for the `put-token` operation. ]*/
    #####:  489:        MESSAGE_HANDLE message = message_create();
    #####:  490:        if (message == NULL)
        -:  491:        {
        -:  492:            /* Codes_SRS_CBS_01_072: [ If constructing the message fails, `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  493:            LogError("message_create failed");
    #####:  494:            result = MU_FAILURE;
        -:  495:        }
        -:  496:        else
        -:  497:        {
    #####:  498:            AMQP_VALUE token_value = amqpvalue_create_string(token);
    #####:  499:            if (token_value == NULL)
        -:  500:            {
        -:  501:                /* Codes_SRS_CBS_01_072: [ If constructing the message fails, `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  502:                LogError("Failed creating token AMQP value");
    #####:  503:                result = MU_FAILURE;
        -:  504:            }
        -:  505:            else
        -:  506:            {
        -:  507:                /* Codes_SRS_CBS_01_009: [ The body of the message MUST contain the token. ]*/
    #####:  508:                if (message_set_body_amqp_value(message, token_value) != 0)
        -:  509:                {
        -:  510:                    /* Codes_SRS_CBS_01_072: [ If constructing the message fails, `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  511:                    LogError("Failed setting the token in the message body");
    #####:  512:                    result = MU_FAILURE;
        -:  513:                }
        -:  514:                else
        -:  515:                {
    #####:  516:                    AMQP_VALUE application_properties = amqpvalue_create_map();
    #####:  517:                    if (application_properties == NULL)
        -:  518:                    {
        -:  519:                        /* Codes_SRS_CBS_01_072: [ If constructing the message fails, `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  520:                        LogError("Failed creating application properties map");
    #####:  521:                        result = MU_FAILURE;
        -:  522:                    }
        -:  523:                    else
        -:  524:                    {
    #####:  525:                        if (add_string_key_value_pair_to_map(application_properties, "name", audience) != 0)
        -:  526:                        {
    #####:  527:                            result = MU_FAILURE;
        -:  528:                        }
        -:  529:                        else
        -:  530:                        {
    #####:  531:                            if (message_set_application_properties(message, application_properties) != 0)
        -:  532:                            {
        -:  533:                                /* Codes_SRS_CBS_01_072: [ If constructing the message fails, `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  534:                                LogError("Failed setting message application properties");
    #####:  535:                                result = MU_FAILURE;
        -:  536:                            }
        -:  537:                            else
        -:  538:                            {
    #####:  539:                                CBS_OPERATION* cbs_operation = (CBS_OPERATION*)malloc(sizeof(CBS_OPERATION));
    #####:  540:                                if (cbs_operation == NULL)
        -:  541:                                {
    #####:  542:                                    LogError("Failed allocating CBS operation instance");
    #####:  543:                                    result = MU_FAILURE;
        -:  544:                                }
        -:  545:                                else
        -:  546:                                {
        -:  547:                                    LIST_ITEM_HANDLE list_item;
        -:  548:
    #####:  549:                                    cbs_operation->on_cbs_operation_complete = on_cbs_put_token_complete;
    #####:  550:                                    cbs_operation->on_cbs_operation_complete_context = on_cbs_put_token_complete_context;
    #####:  551:                                    cbs_operation->pending_operations = cbs->pending_operations;
        -:  552:
    #####:  553:                                    list_item = singlylinkedlist_add(cbs->pending_operations, cbs_operation);
    #####:  554:                                    if (list_item == NULL)
        -:  555:                                    {
    #####:  556:                                        free(cbs_operation);
    #####:  557:                                        LogError("Failed adding pending operation to list");
    #####:  558:                                        result = MU_FAILURE;
        -:  559:                                    }
        -:  560:                                    else
        -:  561:                                    {
        -:  562:                                        /* Codes_SRS_CBS_01_051: [ `cbs_put_token_async` shall start the AMQP management operation by calling `amqp_management_execute_operation_async`, while passing to it: ]*/
        -:  563:                                        /* Codes_SRS_CBS_01_052: [ The `amqp_management` argument shall be the one for the AMQP management instance created in `cbs_create`. ]*/
        -:  564:                                        /* Codes_SRS_CBS_01_053: [ The `operation` argument shall be `put-token`. ]*/
        -:  565:                                        /* Codes_SRS_CBS_01_054: [ The `type` argument shall be set to the `type` argument. ]*/
        -:  566:                                        /* Codes_SRS_CBS_01_055: [ The `locales` argument shall be set to NULL. ]*/
        -:  567:                                        /* Codes_SRS_CBS_01_056: [ The `message` argument shall be the message constructed earlier according to the CBS spec. ]*/
        -:  568:                                        /* Codes_SRS_CBS_01_057: [ The arguments `on_execute_operation_complete` and `context` shall be set to a callback that is to be called by the AMQP management module when the operation is complete. ]*/
        -:  569:                                        /* Codes_SRS_CBS_01_005: [ operation    No    string    "put-token" ]*/
        -:  570:                                        /* Codes_SRS_CBS_01_006: [ Type    No    string    The type of the token being put, e.g., "amqp:jwt". ]*/
        -:  571:                                        /* Codes_SRS_CBS_01_007: [ name    No    string    The "audience" to which the token applies. ]*/
    #####:  572:                                        if (amqp_management_execute_operation_async(cbs->amqp_management, "put-token", type, NULL, message, on_amqp_management_execute_operation_complete, list_item) != 0)
        -:  573:                                        {
    #####:  574:                                            singlylinkedlist_remove(cbs->pending_operations, list_item);
    #####:  575:                                            free(cbs_operation);
        -:  576:                                            /* Codes_SRS_CBS_01_084: [ If `amqp_management_execute_operation_async` fails `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  577:                                            LogError("Failed starting AMQP management operation");
    #####:  578:                                            result = MU_FAILURE;
        -:  579:                                        }
        -:  580:                                        else
        -:  581:                                        {
        -:  582:                                            /* Codes_SRS_CBS_01_081: [ On success `cbs_put_token_async` shall return 0. ]*/
    #####:  583:                                            result = 0;
        -:  584:                                        }
        -:  585:                                    }
        -:  586:                                }
        -:  587:                            }
        -:  588:                        }
        -:  589:
    #####:  590:                        amqpvalue_destroy(application_properties);
        -:  591:                    }
        -:  592:
    #####:  593:                    amqpvalue_destroy(token_value);
        -:  594:                }
        -:  595:            }
        -:  596:
    #####:  597:            message_destroy(message);
        -:  598:        }
        -:  599:    }
        -:  600:
    #####:  601:    return result;
        -:  602:}
        -:  603:
    #####:  604:int cbs_delete_token_async(CBS_HANDLE cbs, const char* type, const char* audience, ON_CBS_OPERATION_COMPLETE on_cbs_delete_token_complete, void* on_cbs_delete_token_complete_context)
        -:  605:{
        -:  606:    int result;
        -:  607:
        -:  608:    /* Codes_SRS_CBS_01_086: [ `on_cbs_delete_token_complete_context` shall be allowed to be NULL. ]*/
    #####:  609:    if ((cbs == NULL) ||
    #####:  610:        (type == NULL) ||
    #####:  611:        (audience == NULL) ||
        -:  612:        (on_cbs_delete_token_complete == NULL))
        -:  613:    {
        -:  614:        /* Codes_SRS_CBS_01_060: [ If any of the arguments `cbs`, `type`, `audience` or `on_cbs_delete_token_complete` is NULL `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  615:        LogError("Bad arguments: cbs = %p, type = %p, audience = %p, on_cbs_delete_token_complete = %p",
        -:  616:            cbs, type, audience, on_cbs_delete_token_complete);
    #####:  617:        result = MU_FAILURE;
        -:  618:    }
    #####:  619:    else if ((cbs->cbs_state == CBS_STATE_CLOSED) ||
    #####:  620:        (cbs->cbs_state == CBS_STATE_ERROR))
        -:  621:    {
        -:  622:        /* Codes_SRS_CBS_01_067: [ If `cbs_delete_token_async` is called when the CBS instance is not yet open or in error, it shall fail and return a non-zero value. ]*/
    #####:  623:        LogError("put token called while closed or in error");
    #####:  624:        result = MU_FAILURE;
        -:  625:    }
        -:  626:    else
        -:  627:    {
        -:  628:        /* Codes_SRS_CBS_01_025: [ The body of the message MUST be empty. ]*/
        -:  629:        /* Codes_SRS_CBS_01_059: [ `cbs_delete_token_async` shall construct a request message for the `delete-token` operation. ]*/
    #####:  630:        MESSAGE_HANDLE message = message_create();
    #####:  631:        if (message == NULL)
        -:  632:        {
        -:  633:            /* Codes_SRS_CBS_01_071: [ If constructing the message fails, `cbs_delete_token_async` shall fail and return a non-zero value. ]*/
    #####:  634:            LogError("message_create failed");
    #####:  635:            result = MU_FAILURE;
        -:  636:        }
        -:  637:        else
        -:  638:        {
    #####:  639:            AMQP_VALUE application_properties = amqpvalue_create_map();
    #####:  640:            if (application_properties == NULL)
        -:  641:            {
        -:  642:                /* Codes_SRS_CBS_01_071: [ If constructing the message fails, `cbs_delete_token_async` shall fail and return a non-zero value. ]*/
    #####:  643:                LogError("Failed creating application properties map");
    #####:  644:                result = MU_FAILURE;
        -:  645:            }
        -:  646:            else
        -:  647:            {
    #####:  648:                if (add_string_key_value_pair_to_map(application_properties, "name", audience) != 0)
        -:  649:                {
    #####:  650:                    result = MU_FAILURE;
        -:  651:                }
        -:  652:                else
        -:  653:                {
        -:  654:                    /* Codes_SRS_CBS_01_021: [ The request message has the following application-properties: ]*/
    #####:  655:                    if (message_set_application_properties(message, application_properties) != 0)
        -:  656:                    {
        -:  657:                        /* Codes_SRS_CBS_01_071: [ If constructing the message fails, `cbs_delete_token_async` shall fail and return a non-zero value. ]*/
    #####:  658:                        LogError("Failed setting message application properties");
    #####:  659:                        result = MU_FAILURE;
        -:  660:                    }
        -:  661:                    else
        -:  662:                    {
    #####:  663:                        CBS_OPERATION* cbs_operation = (CBS_OPERATION*)malloc(sizeof(CBS_OPERATION));
    #####:  664:                        if (cbs_operation == NULL)
        -:  665:                        {
    #####:  666:                            LogError("Failed allocating CBS operation instance");
    #####:  667:                            result = MU_FAILURE;
        -:  668:                        }
        -:  669:                        else
        -:  670:                        {
        -:  671:                            LIST_ITEM_HANDLE list_item;
        -:  672:
    #####:  673:                            cbs_operation->on_cbs_operation_complete = on_cbs_delete_token_complete;
    #####:  674:                            cbs_operation->on_cbs_operation_complete_context = on_cbs_delete_token_complete_context;
    #####:  675:                            cbs_operation->pending_operations = cbs->pending_operations;
        -:  676:
    #####:  677:                            list_item = singlylinkedlist_add(cbs->pending_operations, cbs_operation);
    #####:  678:                            if (list_item == NULL)
        -:  679:                            {
    #####:  680:                                free(cbs_operation);
    #####:  681:                                LogError("Failed adding pending operation to list");
    #####:  682:                                result = MU_FAILURE;
        -:  683:                            }
        -:  684:                            else
        -:  685:                            {
        -:  686:                                /* Codes_SRS_CBS_01_061: [ `cbs_delete_token_async` shall start the AMQP management operation by calling `amqp_management_execute_operation_async`, while passing to it: ]*/
        -:  687:                                /* Codes_SRS_CBS_01_085: [ The `amqp_management` argument shall be the one for the AMQP management instance created in `cbs_create`. ]*/
        -:  688:                                /* Codes_SRS_CBS_01_062: [ The `operation` argument shall be `delete-token`. ]*/
        -:  689:                                /* Codes_SRS_CBS_01_063: [ The `type` argument shall be set to the `type` argument. ]*/
        -:  690:                                /* Codes_SRS_CBS_01_064: [ The `locales` argument shall be set to NULL. ]*/
        -:  691:                                /* Codes_SRS_CBS_01_065: [ The `message` argument shall be the message constructed earlier according to the CBS spec. ]*/
        -:  692:                                /* Codes_SRS_CBS_01_066: [ The arguments `on_operation_complete` and `context` shall be set to a callback that is to be called by the AMQP management module when the operation is complete. ]*/
        -:  693:                                /* Codes_SRS_CBS_01_020: [ To instruct a peer to delete a token associated with a specific audience, a "delete-token" message can be sent to the CBS Node ]*/
        -:  694:                                /* Codes_SRS_CBS_01_022: [ operation    Yes    string    "delete-token" ]*/
        -:  695:                                /* Codes_SRS_CBS_01_023: [ Type    Yes    string    The type of the token being deleted, e.g., "amqp:jwt". ]*/
        -:  696:                                /* Codes_SRS_CBS_01_024: [ name    Yes    string    The "audience" of the token being deleted. ]*/
    #####:  697:                                if (amqp_management_execute_operation_async(cbs->amqp_management, "delete-token", type, NULL, message, on_amqp_management_execute_operation_complete, list_item) != 0)
        -:  698:                                {
        -:  699:                                    /* Codes_SRS_CBS_01_087: [ If `amqp_management_execute_operation_async` fails `cbs_put_token_async` shall fail and return a non-zero value. ]*/
    #####:  700:                                    singlylinkedlist_remove(cbs->pending_operations, list_item);
    #####:  701:                                    free(cbs_operation);
    #####:  702:                                    LogError("Failed starting AMQP management operation");
    #####:  703:                                    result = MU_FAILURE;
        -:  704:                                }
        -:  705:                                else
        -:  706:                                {
        -:  707:                                    /* Codes_SRS_CBS_01_082: [ On success `cbs_delete_token_async` shall return 0. ]*/
    #####:  708:                                    result = 0;
        -:  709:                                }
        -:  710:                            }
        -:  711:                        }
        -:  712:                    }
        -:  713:                }
        -:  714:
    #####:  715:                amqpvalue_destroy(application_properties);
        -:  716:            }
        -:  717:
    #####:  718:            message_destroy(message);
        -:  719:        }
        -:  720:    }
    #####:  721:    return result;
        -:  722:}
        -:  723:
    #####:  724:int cbs_set_trace(CBS_HANDLE cbs, bool trace_on)
        -:  725:{
        -:  726:    int result;
        -:  727:
    #####:  728:    if (cbs == NULL)
        -:  729:    {
        -:  730:        /* Codes_SRS_CBS_01_090: [ If the argument `cbs` is NULL, `cbs_set_trace` shall fail and return a non-zero value. ]*/
    #####:  731:        LogError("NULL cbs handle");
    #####:  732:        result = MU_FAILURE;
        -:  733:    }
        -:  734:    else
        -:  735:    {
        -:  736:        /* Codes_SRS_CBS_01_088: [ `cbs_set_trace` shall enable or disable tracing by calling `amqp_management_set_trace` to pass down the `trace_on` value. ]*/
    #####:  737:        amqp_management_set_trace(cbs->amqp_management, trace_on);
        -:  738:
        -:  739:        /* Codes_SRS_CBS_01_089: [ On success, `cbs_set_trace` shall return 0. ]*/
    #####:  740:        result = 0;
        -:  741:    }
        -:  742:
    #####:  743:    return result;
        -:  744:}
