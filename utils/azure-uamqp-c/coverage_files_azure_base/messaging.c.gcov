        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/messaging.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <stdint.h>
        -:    6:#include <stdbool.h>
        -:    7:#include "azure_c_shared_utility/xlogging.h"
        -:    8:#include "azure_uamqp_c/amqpvalue.h"
        -:    9:#include "azure_uamqp_c/amqp_definitions.h"
        -:   10:
        9:   11:AMQP_VALUE messaging_create_source(const char* address)
        -:   12:{
        -:   13:    AMQP_VALUE result;
        9:   14:    SOURCE_HANDLE source = source_create();
        -:   15:
        9:   16:    if (source == NULL)
        -:   17:    {
    #####:   18:        LogError("NULL source");
    #####:   19:        result = NULL;
        -:   20:    }
        -:   21:    else
        -:   22:    {
        9:   23:        AMQP_VALUE address_value = amqpvalue_create_string(address);
        9:   24:        if (address_value == NULL)
        -:   25:        {
    #####:   26:            LogError("Cannot create address AMQP string");
    #####:   27:            result = NULL;
        -:   28:        }
        -:   29:        else
        -:   30:        {
        9:   31:            if (source_set_address(source, address_value) != 0)
        -:   32:            {
    #####:   33:                LogError("Cannot set address on source");
    #####:   34:                result = NULL;
        -:   35:            }
        -:   36:            else
        -:   37:            {
        9:   38:                result = amqpvalue_create_source(source);
        9:   39:                if (result == NULL)
        -:   40:                {
    #####:   41:                    LogError("Cannot create source");
        -:   42:                }
        -:   43:                else
        -:   44:                {
        -:   45:                    /* all ok */
        -:   46:                }
        -:   47:            }
        -:   48:
        9:   49:            amqpvalue_destroy(address_value);
        -:   50:        }
        -:   51:
        9:   52:        source_destroy(source);
        -:   53:    }
        -:   54:
        9:   55:    return result;
        -:   56:}
        -:   57:
        9:   58:AMQP_VALUE messaging_create_target(const char* address)
        -:   59:{
        -:   60:    AMQP_VALUE result;
        9:   61:    TARGET_HANDLE target = target_create();
        -:   62:
        9:   63:    if (target == NULL)
        -:   64:    {
    #####:   65:        LogError("NULL target");
    #####:   66:        result = NULL;
        -:   67:    }
        -:   68:    else
        -:   69:    {
        9:   70:        AMQP_VALUE address_value = amqpvalue_create_string(address);
        9:   71:        if (address_value == NULL)
        -:   72:        {
    #####:   73:            LogError("Cannot create address AMQP string");
    #####:   74:            result = NULL;
        -:   75:        }
        -:   76:        else
        -:   77:        {
        9:   78:            if (target_set_address(target, address_value) != 0)
        -:   79:            {
    #####:   80:                LogError("Cannot set address on target");
    #####:   81:                result = NULL;
        -:   82:            }
        -:   83:            else
        -:   84:            {
        9:   85:                result = amqpvalue_create_target(target);
        9:   86:                if (result == NULL)
        -:   87:                {
    #####:   88:                    LogError("Cannot create target");
        -:   89:                }
        -:   90:                else
        -:   91:                {
        -:   92:                    /* all ok */
        -:   93:                }
        -:   94:            }
        -:   95:
        9:   96:            amqpvalue_destroy(address_value);
        -:   97:        }
        -:   98:
        9:   99:        target_destroy(target);
        -:  100:    }
        -:  101:
        9:  102:    return result;
        -:  103:}
        -:  104:
    #####:  105:AMQP_VALUE messaging_delivery_received(uint32_t section_number, uint64_t section_offset)
        -:  106:{
        -:  107:    AMQP_VALUE result;
    #####:  108:    RECEIVED_HANDLE received = received_create(section_number, section_offset);
    #####:  109:    if (received == NULL)
        -:  110:    {
    #####:  111:        LogError("Cannot create RECEIVED delivery state handle");
    #####:  112:        result = NULL;
        -:  113:    }
        -:  114:    else
        -:  115:    {
    #####:  116:        result = amqpvalue_create_received(received);
    #####:  117:        if (result == NULL)
        -:  118:        {
    #####:  119:            LogError("Cannot create RECEIVED delivery state AMQP value");
        -:  120:        }
        -:  121:        else
        -:  122:        {
        -:  123:            /* all ok */
        -:  124:        }
        -:  125:
    #####:  126:        received_destroy(received);
        -:  127:    }
        -:  128:
    #####:  129:    return result;
        -:  130:}
        -:  131:
    #####:  132:AMQP_VALUE messaging_delivery_accepted(void)
        -:  133:{
        -:  134:    AMQP_VALUE result;
    #####:  135:    ACCEPTED_HANDLE accepted = accepted_create();
    #####:  136:    if (accepted == NULL)
        -:  137:    {
    #####:  138:        LogError("Cannot create ACCEPTED delivery state handle");
    #####:  139:        result = NULL;
        -:  140:    }
        -:  141:    else
        -:  142:    {
    #####:  143:        result = amqpvalue_create_accepted(accepted);
    #####:  144:        if (result == NULL)
        -:  145:        {
    #####:  146:            LogError("Cannot create ACCEPTED delivery state AMQP value");
        -:  147:        }
        -:  148:        else
        -:  149:        {
        -:  150:            /* all ok */
        -:  151:        }
        -:  152:
    #####:  153:        accepted_destroy(accepted);
        -:  154:    }
        -:  155:
    #####:  156:    return result;
        -:  157:}
        -:  158:
    #####:  159:AMQP_VALUE messaging_delivery_rejected(const char* error_condition, const char* error_description)
        -:  160:{
        -:  161:    AMQP_VALUE result;
    #####:  162:    REJECTED_HANDLE rejected = rejected_create();
    #####:  163:    if (rejected == NULL)
        -:  164:    {
    #####:  165:        LogError("Cannot create REJECTED delivery state handle");
    #####:  166:        result = NULL;
        -:  167:    }
        -:  168:    else
        -:  169:    {
    #####:  170:        ERROR_HANDLE error_handle = NULL;
    #####:  171:        bool error_constructing = false;
        -:  172:
    #####:  173:        if (error_condition != NULL)
        -:  174:        {
    #####:  175:            error_handle = error_create(error_condition);
    #####:  176:            if (error_handle == NULL)
        -:  177:            {
    #####:  178:                LogError("Cannot create error AMQP value for REJECTED state");
    #####:  179:                error_constructing = true;
        -:  180:            }
        -:  181:            else
        -:  182:            {
    #####:  183:                if ((error_description != NULL) &&
    #####:  184:                    (error_set_description(error_handle, error_description) != 0))
        -:  185:                {
    #####:  186:                    LogError("Cannot set error description on error AMQP value for REJECTED state");
    #####:  187:                    error_constructing = true;
        -:  188:                }
        -:  189:                else
        -:  190:                {
    #####:  191:                    if (rejected_set_error(rejected, error_handle) != 0)
        -:  192:                    {
    #####:  193:                        LogError("Cannot set error on REJECTED state handle");
    #####:  194:                        error_constructing = true;
        -:  195:                    }
        -:  196:                }
        -:  197:
    #####:  198:                error_destroy(error_handle);
        -:  199:            }
        -:  200:        }
        -:  201:
    #####:  202:        if (error_constructing)
        -:  203:        {
    #####:  204:            result = NULL;
        -:  205:        }
        -:  206:        else
        -:  207:        {
    #####:  208:            result = amqpvalue_create_rejected(rejected);
    #####:  209:            if (result == NULL)
        -:  210:            {
    #####:  211:                LogError("Cannot create REJECTED delivery state AMQP value");
        -:  212:            }
        -:  213:            else
        -:  214:            {
        -:  215:                /* all ok */
        -:  216:            }
        -:  217:        }
        -:  218:
    #####:  219:        rejected_destroy(rejected);
        -:  220:    }
        -:  221:
    #####:  222:    return result;
        -:  223:}
        -:  224:
    #####:  225:AMQP_VALUE messaging_delivery_released(void)
        -:  226:{
        -:  227:    AMQP_VALUE result;
    #####:  228:    RELEASED_HANDLE released = released_create();
    #####:  229:    if (released == NULL)
        -:  230:    {
    #####:  231:        LogError("Cannot create RELEASED delivery state handle");
    #####:  232:        result = NULL;
        -:  233:    }
        -:  234:    else
        -:  235:    {
    #####:  236:        result = amqpvalue_create_released(released);
    #####:  237:        if (result == NULL)
        -:  238:        {
    #####:  239:            LogError("Cannot create RELEASED delivery state AMQP value");
        -:  240:        }
        -:  241:        else
        -:  242:        {
        -:  243:            /* all ok */
        -:  244:        }
        -:  245:
    #####:  246:        released_destroy(released);
        -:  247:    }
        -:  248:
    #####:  249:    return result;
        -:  250:}
        -:  251:
    #####:  252:AMQP_VALUE messaging_delivery_modified(bool delivery_failed, bool undeliverable_here, fields message_annotations)
        -:  253:{
        -:  254:    AMQP_VALUE result;
    #####:  255:    MODIFIED_HANDLE modified = modified_create();
    #####:  256:    if (modified == NULL)
        -:  257:    {
    #####:  258:        LogError("Cannot create MODIFIED delivery state handle");
    #####:  259:        result = NULL;
        -:  260:    }
        -:  261:    else
        -:  262:    {
    #####:  263:        if (modified_set_delivery_failed(modified, delivery_failed) != 0)
        -:  264:        {
    #####:  265:            LogError("Cannot set delivery failed on MODIFIED delivery state");
    #####:  266:            result = NULL;
        -:  267:        }
    #####:  268:        else if (modified_set_undeliverable_here(modified, undeliverable_here) != 0)
        -:  269:        {
    #####:  270:            LogError("Cannot set undeliverable here on MODIFIED delivery state");
    #####:  271:            result = NULL;
        -:  272:        }
    #####:  273:        else if ((message_annotations != NULL) && (modified_set_message_annotations(modified, message_annotations) != 0))
        -:  274:        {
    #####:  275:            LogError("Cannot set message annotations on MODIFIED delivery state");
    #####:  276:            result = NULL;
        -:  277:        }
        -:  278:        else
        -:  279:        {
    #####:  280:            result = amqpvalue_create_modified(modified);
    #####:  281:            if (result == NULL)
        -:  282:            {
    #####:  283:                LogError("Cannot create MODIFIED delivery state AMQP value");
        -:  284:            }
        -:  285:            else
        -:  286:            {
        -:  287:                /* all ok */
        -:  288:            }
        -:  289:        }
        -:  290:
    #####:  291:        modified_destroy(modified);
        -:  292:    }
        -:  293:
    #####:  294:    return result;
        -:  295:}
