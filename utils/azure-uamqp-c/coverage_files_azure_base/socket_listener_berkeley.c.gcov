        -:    0:Source:/home/ryan/TARGETS/azure-uamqp-c/src/socket_listener_berkeley.c
        -:    0:Programs:101
        -:    1:// Copyright (c) Microsoft. All rights reserved.
        -:    2:// Licensed under the MIT license. See LICENSE file in the project root for full license information.
        -:    3:
        -:    4:#include <sys/types.h>
        -:    5:#include <sys/socket.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <fcntl.h>
        -:    8:#include <netinet/in.h>
        -:    9:#include <netinet/tcp.h>
        -:   10:#include <unistd.h>
        -:   11:#include "azure_c_shared_utility/gballoc.h"
        -:   12:#include "azure_uamqp_c/socket_listener.h"
        -:   13:#include "azure_c_shared_utility/optimize_size.h"
        -:   14:#include "azure_c_shared_utility/socketio.h"
        -:   15:
        -:   16:typedef struct SOCKET_LISTENER_INSTANCE_TAG
        -:   17:{
        -:   18:    int port;
        -:   19:    int socket;
        -:   20:    ON_SOCKET_ACCEPTED on_socket_accepted;
        -:   21:    void* callback_context;
        -:   22:} SOCKET_LISTENER_INSTANCE;
        -:   23:
    #####:   24:SOCKET_LISTENER_HANDLE socketlistener_create(int port)
        -:   25:{
    #####:   26:    SOCKET_LISTENER_INSTANCE* result = (SOCKET_LISTENER_INSTANCE*)malloc(sizeof(SOCKET_LISTENER_INSTANCE));
    #####:   27:    if (result != NULL)
        -:   28:    {
    #####:   29:        result->port = port;
    #####:   30:        result->on_socket_accepted = NULL;
    #####:   31:        result->callback_context = NULL;
        -:   32:    }
        -:   33:
    #####:   34:    return (SOCKET_LISTENER_HANDLE)result;
        -:   35:}
        -:   36:
    #####:   37:void socketlistener_destroy(SOCKET_LISTENER_HANDLE socket_listener)
        -:   38:{
    #####:   39:    if (socket_listener != NULL)
        -:   40:    {
    #####:   41:        socketlistener_stop(socket_listener);
    #####:   42:        free(socket_listener);
        -:   43:    }
    #####:   44:}
        -:   45:
    #####:   46:int socketlistener_start(SOCKET_LISTENER_HANDLE socket_listener, ON_SOCKET_ACCEPTED on_socket_accepted, void* callback_context)
        -:   47:{
        -:   48:    int result;
        -:   49:
    #####:   50:    if (socket_listener == NULL)
        -:   51:    {
    #####:   52:        LogError("NULL socket_listener");
    #####:   53:        result = MU_FAILURE;
        -:   54:    }
        -:   55:    else
        -:   56:    {
    #####:   57:        SOCKET_LISTENER_INSTANCE* socket_listener_instance = (SOCKET_LISTENER_INSTANCE*)socket_listener;
        -:   58:
    #####:   59:        socket_listener_instance->socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    #####:   60:        if (socket_listener_instance->socket == -1)
        -:   61:        {
    #####:   62:            LogError("Creating socket failed");
    #####:   63:            result = MU_FAILURE;
        -:   64:        }
        -:   65:        else
        -:   66:        {
        -:   67:            struct sockaddr_in sa;
        -:   68:
    #####:   69:            socket_listener_instance->on_socket_accepted = on_socket_accepted;
    #####:   70:            socket_listener_instance->callback_context = callback_context;
        -:   71:
    #####:   72:            sa.sin_family = AF_INET;
    #####:   73:            sa.sin_port = htons(socket_listener_instance->port);
    #####:   74:            sa.sin_addr.s_addr = htonl(INADDR_ANY);
        -:   75:
        -:   76:            int flags;
    #####:   77:            if ((-1 == (flags = fcntl(socket_listener_instance->socket, F_GETFL, 0))) ||
    #####:   78:                (fcntl(socket_listener_instance->socket, F_SETFL, flags | O_NONBLOCK) == -1))
        -:   79:            {
    #####:   80:                LogError("Failure: fcntl failure.");
    #####:   81:                close(socket_listener_instance->socket);
    #####:   82:                socket_listener_instance->socket = -1;
    #####:   83:                result = MU_FAILURE;
        -:   84:            }
    #####:   85:            else if (bind(socket_listener_instance->socket, (const struct sockaddr*)&sa, sizeof(sa)) == -1)
        -:   86:            {
    #####:   87:                LogError("bind socket failed");
    #####:   88:                (void)close(socket_listener_instance->socket);
    #####:   89:                socket_listener_instance->socket = -1;
    #####:   90:                result = MU_FAILURE;
        -:   91:            }
        -:   92:            else
        -:   93:            {
    #####:   94:                if (listen(socket_listener_instance->socket, SOMAXCONN) == -1)
        -:   95:                {
    #####:   96:                    LogError("listen on socket failed");
    #####:   97:                    (void)close(socket_listener_instance->socket);
    #####:   98:                    socket_listener_instance->socket = -1;
    #####:   99:                    result = MU_FAILURE;
        -:  100:                }
        -:  101:                else
        -:  102:                {
    #####:  103:                    result = 0;
        -:  104:                }
        -:  105:            }
        -:  106:        }
        -:  107:    }
        -:  108:
    #####:  109:    return result;
        -:  110:}
        -:  111:
    #####:  112:int socketlistener_stop(SOCKET_LISTENER_HANDLE socket_listener)
        -:  113:{
        -:  114:    int result;
        -:  115:
    #####:  116:    if (socket_listener == NULL)
        -:  117:    {
    #####:  118:        LogError("NULL socket_listener");
    #####:  119:        result = MU_FAILURE;
        -:  120:    }
        -:  121:    else
        -:  122:    {
    #####:  123:        SOCKET_LISTENER_INSTANCE* socket_listener_instance = (SOCKET_LISTENER_INSTANCE*)socket_listener;
        -:  124:
    #####:  125:        socket_listener_instance->on_socket_accepted = NULL;
    #####:  126:        socket_listener_instance->callback_context = NULL;
        -:  127:
    #####:  128:        (void)close(socket_listener_instance->socket);
    #####:  129:        socket_listener_instance->socket = -1;
        -:  130:
    #####:  131:        result = 0;
        -:  132:    }
        -:  133:
    #####:  134:    return result;
        -:  135:}
        -:  136:
    #####:  137:void socketlistener_dowork(SOCKET_LISTENER_HANDLE socket_listener)
        -:  138:{
    #####:  139:    if (socket_listener != NULL)
        -:  140:    {
    #####:  141:        SOCKET_LISTENER_INSTANCE* socket_listener_instance = (SOCKET_LISTENER_INSTANCE*)socket_listener;
    #####:  142:        int accepted_socket = accept(socket_listener_instance->socket, NULL, NULL);
    #####:  143:        if (accepted_socket != -1)
        -:  144:        {
        -:  145:            int flags;
    #####:  146:            if ((-1 == (flags = fcntl(accepted_socket, F_GETFL, 0))) ||
    #####:  147:                (fcntl(accepted_socket, F_SETFL, flags | O_NONBLOCK) == -1))
        -:  148:            {
    #####:  149:                LogError("Failure: fcntl failure on accepted socket.");
    #####:  150:                close(accepted_socket);
        -:  151:            }
    #####:  152:            else if (socket_listener_instance->on_socket_accepted != NULL)
        -:  153:            {
        -:  154:                SOCKETIO_CONFIG socketio_config;
    #####:  155:                socketio_config.hostname = NULL;
    #####:  156:                socketio_config.port = socket_listener_instance->port;
    #####:  157:                socketio_config.accepted_socket = &accepted_socket;
    #####:  158:                socket_listener_instance->on_socket_accepted(socket_listener_instance->callback_context, socketio_get_interface_description(), &socketio_config);
        -:  159:            }
        -:  160:            else
        -:  161:            {
    #####:  162:                (void)close(accepted_socket);
        -:  163:            }
        -:  164:        }
        -:  165:    }
    #####:  166:}
