2c2
<         -:    0:Programs:92
---
>         -:    0:Programs:80
39c39
<         6:   37:int gballoc_init(void)
---
>     #####:   37:int gballoc_init(void)
43c43
<         6:   41:    if (gballocState != GBALLOC_STATE_NOT_INIT)
---
>     #####:   41:    if (gballocState != GBALLOC_STATE_NOT_INIT)
49c49
<         6:   47:    else if ((gballocThreadSafeLock = Lock_Init()) == NULL)
---
>     #####:   47:    else if ((gballocThreadSafeLock = Lock_Init()) == NULL)
56c56
<         6:   54:        gballocState = GBALLOC_STATE_INIT;
---
>     #####:   54:        gballocState = GBALLOC_STATE_INIT;
59,61c59,61
<         6:   57:        totalSize = 0;
<         6:   58:        maxSize = 0;
<         6:   59:        g_allocations = 0;
---
>     #####:   57:        totalSize = 0;
>     #####:   58:        maxSize = 0;
>     #####:   59:        g_allocations = 0;
64c64
<         6:   62:        result = 0;
---
>     #####:   62:        result = 0;
67c67
<         6:   65:    return result;
---
>     #####:   65:    return result;
70c70
<         6:   68:void gballoc_deinit(void)
---
>     #####:   68:void gballoc_deinit(void)
72c72
<         6:   70:    if (gballocState == GBALLOC_STATE_INIT)
---
>     #####:   70:    if (gballocState == GBALLOC_STATE_INIT)
75c75
<         6:   73:        (void)Lock_Deinit(gballocThreadSafeLock);
---
>     #####:   73:        (void)Lock_Deinit(gballocThreadSafeLock);
78,79c78,79
<         6:   76:    gballocState = GBALLOC_STATE_NOT_INIT;
<         6:   77:}
---
>     #####:   76:    gballocState = GBALLOC_STATE_NOT_INIT;
>     #####:   77:}
81c81
<       461:   79:void* gballoc_malloc(size_t size)
---
>     #####:   79:void* gballoc_malloc(size_t size)
85c85
<       461:   83:    if (gballocState != GBALLOC_STATE_INIT)
---
>     #####:   83:    if (gballocState != GBALLOC_STATE_INIT)
88c88
<        10:   86:        result = malloc(size);
---
>     #####:   86:        result = malloc(size);
91c91
<       451:   89:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
---
>     #####:   89:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
99,100c99,100
<       451:   97:        ALLOCATION* allocation = (ALLOCATION*)malloc(sizeof(ALLOCATION));
<       451:   98:        if (allocation == NULL)
---
>     #####:   97:        ALLOCATION* allocation = (ALLOCATION*)malloc(sizeof(ALLOCATION));
>     #####:   98:        if (allocation == NULL)
107,108c107,108
<       451:  105:            result = malloc(size);
<       451:  106:            if (result == NULL)
---
>     #####:  105:            result = malloc(size);
>     #####:  106:            if (result == NULL)
116,119c116,119
<       451:  114:                allocation->ptr = result;
<       451:  115:                allocation->size = size;
<       451:  116:                allocation->next = head;
<       451:  117:                head = allocation;
---
>     #####:  114:                allocation->ptr = result;
>     #####:  115:                allocation->size = size;
>     #####:  116:                allocation->next = head;
>     #####:  117:                head = allocation;
121,122c121,122
<       451:  119:                g_allocations++;
<       451:  120:                totalSize += size;
---
>     #####:  119:                g_allocations++;
>     #####:  120:                totalSize += size;
124c124
<       451:  122:                if (maxSize < totalSize)
---
>     #####:  122:                if (maxSize < totalSize)
126c126
<       397:  124:                    maxSize = totalSize;
---
>     #####:  124:                    maxSize = totalSize;
131c131
<       451:  129:        (void)Unlock(gballocThreadSafeLock);
---
>     #####:  129:        (void)Unlock(gballocThreadSafeLock);
134c134
<       461:  132:    return result;
---
>     #####:  132:    return result;
193c193
<        62:  191:void* gballoc_realloc(void* ptr, size_t size)
---
>     #####:  191:void* gballoc_realloc(void* ptr, size_t size)
197c197
<        62:  195:    ALLOCATION* allocation = NULL;
---
>     #####:  195:    ALLOCATION* allocation = NULL;
199c199
<        62:  197:    if (gballocState != GBALLOC_STATE_INIT)
---
>     #####:  197:    if (gballocState != GBALLOC_STATE_INIT)
205c205
<        62:  203:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
---
>     #####:  203:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
213c213
<        62:  211:        if (ptr == NULL)
---
>     #####:  211:        if (ptr == NULL)
216c216
<        37:  214:            allocation = (ALLOCATION*)malloc(sizeof(ALLOCATION));
---
>     #####:  214:            allocation = (ALLOCATION*)malloc(sizeof(ALLOCATION));
220,221c220,221
<        25:  218:            curr = head;
<       345:  219:            while (curr != NULL)
---
>     #####:  218:            curr = head;
>     #####:  219:            while (curr != NULL)
223c223
<       345:  221:                if (curr->ptr == ptr)
---
>     #####:  221:                if (curr->ptr == ptr)
225,226c225,226
<        25:  223:                    allocation = curr;
<        25:  224:                    break;
---
>     #####:  223:                    allocation = curr;
>     #####:  224:                    break;
230c230
<       320:  228:                    curr = (ALLOCATION*)curr->next;
---
>     #####:  228:                    curr = (ALLOCATION*)curr->next;
235c235
<        62:  233:        if (allocation == NULL)
---
>     #####:  233:        if (allocation == NULL)
243,244c243,244
<        62:  241:            result = realloc(ptr, size);
<        62:  242:            if (result == NULL)
---
>     #####:  241:            result = realloc(ptr, size);
>     #####:  242:            if (result == NULL)
254c254
<        62:  252:                if (ptr != NULL)
---
>     #####:  252:                if (ptr != NULL)
257,259c257,259
<        25:  255:                    allocation->ptr = result;
<        25:  256:                    totalSize -= allocation->size;
<        25:  257:                    allocation->size = size;
---
>     #####:  255:                    allocation->ptr = result;
>     #####:  256:                    totalSize -= allocation->size;
>     #####:  257:                    allocation->size = size;
264,267c264,267
<        37:  262:                    allocation->ptr = result;
<        37:  263:                    allocation->size = size;
<        37:  264:                    allocation->next = head;
<        37:  265:                    head = allocation;
---
>     #####:  262:                    allocation->ptr = result;
>     #####:  263:                    allocation->size = size;
>     #####:  264:                    allocation->next = head;
>     #####:  265:                    head = allocation;
271,272c271,272
<        62:  269:                totalSize += size;
<        62:  270:                g_allocations++;
---
>     #####:  269:                totalSize += size;
>     #####:  270:                g_allocations++;
275c275
<        62:  273:                if (maxSize < totalSize)
---
>     #####:  273:                if (maxSize < totalSize)
277c277
<        51:  275:                    maxSize = totalSize;
---
>     #####:  275:                    maxSize = totalSize;
282c282
<        62:  280:        (void)Unlock(gballocThreadSafeLock);
---
>     #####:  280:        (void)Unlock(gballocThreadSafeLock);
285c285
<        62:  283:    return result;
---
>     #####:  283:    return result;
288c288
<       490:  286:void gballoc_free(void* ptr)
---
>     #####:  286:void gballoc_free(void* ptr)
290,291c290,291
<       490:  288:    ALLOCATION* curr = head;
<       490:  289:    ALLOCATION* prev = NULL;
---
>     #####:  288:    ALLOCATION* curr = head;
>     #####:  289:    ALLOCATION* prev = NULL;
293c293
<       490:  291:    if (gballocState != GBALLOC_STATE_INIT)
---
>     #####:  291:    if (gballocState != GBALLOC_STATE_INIT)
299c299
<       490:  297:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
---
>     #####:  297:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
307c307
<      5233:  305:        while (curr != NULL)
---
>     #####:  305:        while (curr != NULL)
309c309
<      5206:  307:            if (curr->ptr == ptr)
---
>     #####:  307:            if (curr->ptr == ptr)
312,314c312,314
<       463:  310:                free(ptr);
<       463:  311:                totalSize -= curr->size;
<       463:  312:                if (prev != NULL)
---
>     #####:  310:                free(ptr);
>     #####:  311:                totalSize -= curr->size;
>     #####:  312:                if (prev != NULL)
316c316
<       369:  314:                    prev->next = curr->next;
---
>     #####:  314:                    prev->next = curr->next;
320c320
<        94:  318:                    head = (ALLOCATION*)curr->next;
---
>     #####:  318:                    head = (ALLOCATION*)curr->next;
323,324c323,324
<       463:  321:                free(curr);
<       463:  322:                break;
---
>     #####:  321:                free(curr);
>     #####:  322:                break;
327,328c327,328
<      4743:  325:            prev = curr;
<      4743:  326:            curr = (ALLOCATION*)curr->next;
---
>     #####:  325:            prev = curr;
>     #####:  326:            curr = (ALLOCATION*)curr->next;
331c331
<       490:  329:        if ((curr == NULL) && (ptr != NULL))
---
>     #####:  329:        if ((curr == NULL) && (ptr != NULL))
336c336
<        10:  334:            LogError("Could not free allocation for address %p (not found)", ptr);
---
>     #####:  334:            LogError("Could not free allocation for address %p (not found)", ptr);
338c338
<       490:  336:        (void)Unlock(gballocThreadSafeLock);
---
>     #####:  336:        (void)Unlock(gballocThreadSafeLock);
340c340
<       490:  338:}
---
>     #####:  338:}
342c342
<         6:  340:size_t gballoc_getMaximumMemoryUsed(void)
---
>     #####:  340:size_t gballoc_getMaximumMemoryUsed(void)
347c347
<         6:  345:    if (gballocState != GBALLOC_STATE_INIT)
---
>     #####:  345:    if (gballocState != GBALLOC_STATE_INIT)
353c353
<         6:  351:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
---
>     #####:  351:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
362,363c362,363
<         6:  360:        result = maxSize;
<         6:  361:        (void)Unlock(gballocThreadSafeLock);
---
>     #####:  360:        result = maxSize;
>     #####:  361:        (void)Unlock(gballocThreadSafeLock);
366c366
<         6:  364:    return result;
---
>     #####:  364:    return result;
369c369
<         6:  367:size_t gballoc_getCurrentMemoryUsed(void)
---
>     #####:  367:size_t gballoc_getCurrentMemoryUsed(void)
374c374
<         6:  372:    if (gballocState != GBALLOC_STATE_INIT)
---
>     #####:  372:    if (gballocState != GBALLOC_STATE_INIT)
380c380
<         6:  378:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
---
>     #####:  378:    else if (LOCK_OK != Lock(gballocThreadSafeLock))
389,390c389,390
<         6:  387:        result = totalSize;
<         6:  388:        (void)Unlock(gballocThreadSafeLock);
---
>     #####:  387:        result = totalSize;
>     #####:  388:        (void)Unlock(gballocThreadSafeLock);
393c393
<         6:  391:    return result;
---
>     #####:  391:    return result;
