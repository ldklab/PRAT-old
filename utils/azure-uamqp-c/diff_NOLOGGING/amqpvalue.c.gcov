2c2
<         -:    0:Programs:95
---
>         -:    0:Programs:101
221c221
<         -:  209:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  209:        LogError("Could not allocate memory for AMQP value");
239c239
<         -:  227:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  227:        LogError("Could not allocate memory for AMQP value");
259c259
<         -:  247:        LogError("Bad arguments: value = %p, bool_value = %p",
---
>     #####:  247:        LogError("Bad arguments: value = %p, bool_value = %p",
269c269
<         -:  257:            LogError("Value is not of type bool");
---
>     #####:  257:            LogError("Value is not of type bool");
307c307
<         -:  295:        LogError("Bad arguments: value = %p, ubyte_value = %p",
---
>     #####:  295:        LogError("Bad arguments: value = %p, ubyte_value = %p",
317c317
<         -:  305:            LogError("Value is not of type UBYTE");
---
>     #####:  305:            LogError("Value is not of type UBYTE");
340c340
<         -:  328:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  328:        LogError("Could not allocate memory for AMQP value");
360c360
<         -:  348:        LogError("Bad arguments: value = %p, ushort_value = %p",
---
>     #####:  348:        LogError("Bad arguments: value = %p, ushort_value = %p",
370c370
<         -:  358:            LogError("Value is not of type USHORT");
---
>     #####:  358:            LogError("Value is not of type USHORT");
393c393
<         -:  381:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  381:        LogError("Could not allocate memory for AMQP value");
413c413
<         -:  401:        LogError("Bad arguments: value = %p, uint_value = %p",
---
>     #####:  401:        LogError("Bad arguments: value = %p, uint_value = %p",
423c423
<         -:  411:            LogError("Value is not of type UINT");
---
>     #####:  411:            LogError("Value is not of type UINT");
446c446
<         -:  434:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  434:        LogError("Could not allocate memory for AMQP value");
466c466
<         -:  454:        LogError("Bad arguments: value = %p, ulong_value = %p",
---
>     #####:  454:        LogError("Bad arguments: value = %p, ulong_value = %p",
476c476
<         -:  464:            LogError("Value is not of type ULONG");
---
>     #####:  464:            LogError("Value is not of type ULONG");
499c499
<         -:  487:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  487:        LogError("Could not allocate memory for AMQP value");
519c519
<         -:  507:        LogError("Bad arguments: value = %p, byte_value = %p",
---
>     #####:  507:        LogError("Bad arguments: value = %p, byte_value = %p",
529c529
<         -:  517:            LogError("Value is not of type BYTE");
---
>     #####:  517:            LogError("Value is not of type BYTE");
552c552
<         -:  540:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  540:        LogError("Could not allocate memory for AMQP value");
571c571
<         -:  559:        LogError("Bad arguments: value = %p, short_value = %p",
---
>     #####:  559:        LogError("Bad arguments: value = %p, short_value = %p",
581c581
<         -:  569:            LogError("Value is not of type SHORT");
---
>     #####:  569:            LogError("Value is not of type SHORT");
604c604
<         -:  592:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  592:        LogError("Could not allocate memory for AMQP value");
624c624
<         -:  612:        LogError("Bad arguments: value = %p, int_value = %p",
---
>     #####:  612:        LogError("Bad arguments: value = %p, int_value = %p",
634c634
<         -:  622:            LogError("Value is not of type INT");
---
>     #####:  622:            LogError("Value is not of type INT");
657c657
<         -:  645:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  645:        LogError("Could not allocate memory for AMQP value");
677c677
<         -:  665:        LogError("Bad arguments: value = %p, long_value = %p",
---
>     #####:  665:        LogError("Bad arguments: value = %p, long_value = %p",
687c687
<         -:  675:            LogError("Value is not of type LONG");
---
>     #####:  675:            LogError("Value is not of type LONG");
710c710
<         -:  698:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  698:        LogError("Could not allocate memory for AMQP value");
730c730
<         -:  718:        LogError("Bad arguments: value = %p, float_value = %p",
---
>     #####:  718:        LogError("Bad arguments: value = %p, float_value = %p",
740c740
<         -:  728:            LogError("Value is not of type FLOAT");
---
>     #####:  728:            LogError("Value is not of type FLOAT");
763c763
<         -:  751:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  751:        LogError("Could not allocate memory for AMQP value");
783c783
<         -:  771:        LogError("Bad arguments: value = %p, double_value = %p",
---
>     #####:  771:        LogError("Bad arguments: value = %p, double_value = %p",
793c793
<         -:  781:            LogError("Value is not of type DOUBLE");
---
>     #####:  781:            LogError("Value is not of type DOUBLE");
817c817
<         -:  805:        LogError("Invalid value for a Unicode char");
---
>     #####:  805:        LogError("Invalid value for a Unicode char");
826c826
<         -:  814:            LogError("Could not allocate memory for AMQP value");
---
>     #####:  814:            LogError("Could not allocate memory for AMQP value");
847c847
<         -:  835:        LogError("Bad arguments: value = %p, double_value = %p",
---
>     #####:  835:        LogError("Bad arguments: value = %p, double_value = %p",
857c857
<         -:  845:            LogError("Value is not of type CHAR");
---
>     #####:  845:            LogError("Value is not of type CHAR");
880c880
<         -:  868:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  868:        LogError("Could not allocate memory for AMQP value");
900c900
<         -:  888:        LogError("Bad arguments: value = %p, timestamp_value = %p",
---
>     #####:  888:        LogError("Bad arguments: value = %p, timestamp_value = %p",
910c910
<         -:  898:            LogError("Value is not of type TIMESTAMP");
---
>     #####:  898:            LogError("Value is not of type TIMESTAMP");
933c933
<         -:  921:        LogError("Could not allocate memory for AMQP value");
---
>     #####:  921:        LogError("Could not allocate memory for AMQP value");
953c953
<         -:  941:        LogError("Bad arguments: value = %p, uuid_value = %p",
---
>     #####:  941:        LogError("Bad arguments: value = %p, uuid_value = %p",
963c963
<         -:  951:            LogError("Value is not of type UUID");
---
>     #####:  951:            LogError("Value is not of type UUID");
987c987
<         -:  975:        LogError("NULL bytes with non-zero length");
---
>     #####:  975:        LogError("NULL bytes with non-zero length");
996c996
<         -:  984:            LogError("Could not allocate memory for AMQP value");
---
>     #####:  984:            LogError("Could not allocate memory for AMQP value");
1016c1016
<         -: 1004:                LogError("Could not allocate memory for binary payload of AMQP value");
---
>     #####: 1004:                LogError("Could not allocate memory for binary payload of AMQP value");
1041c1041
<         -: 1029:        LogError("Bad arguments: value = %p, binary_value = %p",
---
>     #####: 1029:        LogError("Bad arguments: value = %p, binary_value = %p",
1051c1051
<         -: 1039:            LogError("Value is not of type BINARY");
---
>     #####: 1039:            LogError("Value is not of type BINARY");
1074c1074
<         -: 1062:        LogError("NULL argument value");
---
>     #####: 1062:        LogError("NULL argument value");
1085c1085
<         -: 1073:            LogError("Could not allocate memory for AMQP value");
---
>     #####: 1073:            LogError("Could not allocate memory for AMQP value");
1094c1094
<         -: 1082:                LogError("Could not allocate memory for string AMQP value");
---
>     #####: 1082:                LogError("Could not allocate memory for string AMQP value");
1116c1116
<         -: 1104:        LogError("Bad arguments: value = %p, string_value = %p",
---
>     #####: 1104:        LogError("Bad arguments: value = %p, string_value = %p",
1127c1127
<         -: 1115:            LogError("Value is not of type STRING");
---
>     #####: 1115:            LogError("Value is not of type STRING");
1150c1150
<         -: 1138:        LogError("NULL argument");
---
>     #####: 1138:        LogError("NULL argument");
1159c1159
<         -: 1147:            LogError("string too long to be represented as a symbol");
---
>     #####: 1147:            LogError("string too long to be represented as a symbol");
1168c1168
<         -: 1156:                LogError("Cannot allocate memory for AMQP value");
---
>     #####: 1156:                LogError("Cannot allocate memory for AMQP value");
1178c1178
<         -: 1166:                    LogError("Cannot allocate memory for symbol string");
---
>     #####: 1166:                    LogError("Cannot allocate memory for symbol string");
1201c1201
<         -: 1189:        LogError("Bad arguments: value = %p, symbol_value = %p",
---
>     #####: 1189:        LogError("Bad arguments: value = %p, symbol_value = %p",
1212c1212
<         -: 1200:            LogError("Value is not of type SYMBOL");
---
>     #####: 1200:            LogError("Value is not of type SYMBOL");
1235c1235
<         -: 1223:        LogError("Could not allocate memory for AMQP value");
---
>     #####: 1223:        LogError("Could not allocate memory for AMQP value");
1257c1257
<         -: 1245:        LogError("NULL list value");
---
>     #####: 1245:        LogError("NULL list value");
1266c1266
<         -: 1254:            LogError("Value is not of type LIST");
---
>     #####: 1254:            LogError("Value is not of type LIST");
1280c1280
<         -: 1268:                    LogError("Could not reallocate list memory");
---
>     #####: 1268:                    LogError("Could not reallocate list memory");
1294c1294
<         -: 1282:                            LogError("Could not create NULL AMQP value to be inserted in list");
---
>     #####: 1282:                            LogError("Could not create NULL AMQP value to be inserted in list");
1353c1353
<         -: 1341:        LogError("Bad arguments: value = %p, size = %p",
---
>     #####: 1341:        LogError("Bad arguments: value = %p, size = %p",
1364c1364
<         -: 1352:            LogError("Value is not of type LIST");
---
>     #####: 1352:            LogError("Value is not of type LIST");
1387c1387
<         -: 1375:        LogError("NULL list value");
---
>     #####: 1375:        LogError("NULL list value");
1395c1395
<         -: 1383:            LogError("Value is not of type LIST");
---
>     #####: 1383:            LogError("Value is not of type LIST");
1406c1406
<         -: 1394:                LogError("Could not clone list item");
---
>     #####: 1394:                LogError("Could not clone list item");
1417c1417
<         -: 1405:                        LogError("Could not reallocate list storage");
---
>     #####: 1405:                        LogError("Could not reallocate list storage");
1432c1432
<         -: 1420:                                LogError("Could not allocate NULL value for list entries");
---
>     #####: 1420:                                LogError("Could not allocate NULL value for list entries");
1487c1487
<         -: 1475:        LogError("NULL list value");
---
>     #####: 1475:        LogError("NULL list value");
1497c1497
<         -: 1485:            LogError("Value is not of type LIST");
---
>     #####: 1485:            LogError("Value is not of type LIST");
1503c1503
<         -: 1491:            LogError("Bad index value %u", (unsigned int)index);
---
>     #####: 1491:            LogError("Bad index value %u", (unsigned int)index);
1525c1525
<         -: 1513:        LogError("Could not allocate memory for AMQP value");
---
>     #####: 1513:        LogError("Could not allocate memory for AMQP value");
1548c1548
<         -: 1536:        LogError("Bad arguments: map = %p, key = %p, value = %p",
---
>     #####: 1536:        LogError("Bad arguments: map = %p, key = %p, value = %p",
1559c1559
<         -: 1547:            LogError("Value is not of type MAP");
---
>     #####: 1547:            LogError("Value is not of type MAP");
1571c1571
<         -: 1559:                LogError("Could not clone value to set in the map");
---
>     #####: 1559:                LogError("Could not clone value to set in the map");
1583c1583
<         -: 1571:                        LogError("Could not allocate NULL value for map entries");
---
>     #####: 1571:                        LogError("Could not allocate NULL value for map entries");
1606c1606
<         -: 1594:                        LogError("Could not clone key for map");
---
>     #####: 1594:                        LogError("Could not clone key for map");
1617c1617
<         -: 1605:                            LogError("Could not reallocate memory for map");
---
>     #####: 1605:                            LogError("Could not reallocate memory for map");
1649c1649
<         -: 1637:        LogError("Bad arguments: map = %p, key = %p",
---
>     #####: 1637:        LogError("Bad arguments: map = %p, key = %p",
1660c1660
<         -: 1648:            LogError("Value is not of type MAP");
---
>     #####: 1648:            LogError("Value is not of type MAP");
1700c1700
<         -: 1688:        LogError("Bad arguments: map = %p, pair_count = %p",
---
>     #####: 1688:        LogError("Bad arguments: map = %p, pair_count = %p",
1711c1711
<         -: 1699:            LogError("Value is not of type MAP");
---
>     #####: 1699:            LogError("Value is not of type MAP");
1736c1736
<         -: 1724:        LogError("Bad arguments: map = %p, key = %p, value = %p",
---
>     #####: 1724:        LogError("Bad arguments: map = %p, key = %p, value = %p",
1747c1747
<         -: 1735:            LogError("Value is not of type MAP");
---
>     #####: 1735:            LogError("Value is not of type MAP");
1753c1753
<         -: 1741:            LogError("Index out of range: %u", (unsigned int)index);
---
>     #####: 1741:            LogError("Index out of range: %u", (unsigned int)index);
1763c1763
<         -: 1751:                LogError("Could not clone index %u key", (unsigned int)index);
---
>     #####: 1751:                LogError("Could not clone index %u key", (unsigned int)index);
1773c1773
<         -: 1761:                    LogError("Could not clone index %u value", (unsigned int)index);
---
>     #####: 1761:                    LogError("Could not clone index %u value", (unsigned int)index);
1795c1795
<         -: 1783:        LogError("Bad arguments: value = %p, map_value = %p",
---
>     #####: 1783:        LogError("Bad arguments: value = %p, map_value = %p",
1804c1804
<         -: 1792:            LogError("Value is not of type MAP");
---
>     #####: 1792:            LogError("Value is not of type MAP");
1824c1824
<         -: 1812:        LogError("Could not allocate memory for AMQP value");
---
>     #####: 1812:        LogError("Could not allocate memory for AMQP value");
1847c1847
<         -: 1835:        LogError("Bad arguments: value = %p, count = %p",
---
>     #####: 1835:        LogError("Bad arguments: value = %p, count = %p",
1858c1858
<         -: 1846:            LogError("Value is not of type ARRAY");
---
>     #####: 1846:            LogError("Value is not of type ARRAY");
1881c1881
<         -: 1869:        LogError("NULL value");
---
>     #####: 1869:        LogError("NULL value");
1890c1890
<         -: 1878:            LogError("Value is not of type ARRAY");
---
>     #####: 1878:            LogError("Value is not of type ARRAY");
1900c1900
<         -: 1888:                LogError("Cannot put different types in the same array");
---
>     #####: 1888:                LogError("Cannot put different types in the same array");
1911c1911
<         -: 1899:                    LogError("Cannot clone value to put in the array");
---
>     #####: 1899:                    LogError("Cannot clone value to put in the array");
1922c1922
<         -: 1910:                        LogError("Cannot resize array");
---
>     #####: 1910:                        LogError("Cannot resize array");
1951c1951
<         -: 1939:        LogError("NULL value");
---
>     #####: 1939:        LogError("NULL value");
1961c1961
<         -: 1949:            LogError("Value is not of type ARRAY");
---
>     #####: 1949:            LogError("Value is not of type ARRAY");
1967c1967
<         -: 1955:            LogError("Index out of range: %u", (unsigned int)index);
---
>     #####: 1955:            LogError("Index out of range: %u", (unsigned int)index);
1988c1988
<         -: 1976:        LogError("Bad arguments: value = %p, array_value = %p",
---
>     #####: 1976:        LogError("Bad arguments: value = %p, array_value = %p",
1997c1997
<         -: 1985:            LogError("Value is not of type ARRAY");
---
>     #####: 1985:            LogError("Value is not of type ARRAY");
2019c2019
<         -: 2007:        LogError("Bad arguments: value1 = %p, value2 = %p",
---
>     #####: 2007:        LogError("Bad arguments: value1 = %p, value2 = %p",
2231c2231
<         -: 2219:        LogError("NULL value");
---
>     #####: 2219:        LogError("NULL value");
2294c2294
<         -: 2282:        LogError("Failed encoding NULL constructor");
---
>     #####: 2282:        LogError("Failed encoding NULL constructor");
2324c2324
<         -: 2312:        LogError("Failed encoding NULL");
---
>     #####: 2312:        LogError("Failed encoding NULL");
2344c2344
<         -: 2332:        LogError("Failed encoding boolean constructor");
---
>     #####: 2332:        LogError("Failed encoding boolean constructor");
2366c2366
<         -: 2354:            LogError("Failed encoding boolean value");
---
>     #####: 2354:            LogError("Failed encoding boolean value");
2380c2380
<         -: 2368:            LogError("Failed encoding boolean value");
---
>     #####: 2368:            LogError("Failed encoding boolean value");
2402c2402
<         -: 2390:            LogError("Failed encoding boolean");
---
>     #####: 2390:            LogError("Failed encoding boolean");
2416c2416
<         -: 2404:            LogError("Failed encoding boolean");
---
>     #####: 2404:            LogError("Failed encoding boolean");
2436c2436
<         -: 2424:        LogError("Failed encoding ubyte constructor");
---
>     #####: 2424:        LogError("Failed encoding ubyte constructor");
2456c2456
<         -: 2444:        LogError("Failed encoding ubyte value");
---
>     #####: 2444:        LogError("Failed encoding ubyte value");
2476c2476
<         -: 2464:        LogError("Failed encoding ubyte");
---
>     #####: 2464:        LogError("Failed encoding ubyte");
2496c2496
<         -: 2484:        LogError("Failed encoding ushort constructor");
---
>     #####: 2484:        LogError("Failed encoding ushort constructor");
2517c2517
<         -: 2505:        LogError("Failed encoding ushort value");
---
>     #####: 2505:        LogError("Failed encoding ushort value");
2537c2537
<         -: 2525:        LogError("Failed encoding ushort");
---
>     #####: 2525:        LogError("Failed encoding ushort");
2560c2560
<         -: 2548:            LogError("Failed encoding small uint constructor");
---
>     #####: 2548:            LogError("Failed encoding small uint constructor");
2575c2575
<         -: 2563:            LogError("Failed encoding uint constructor");
---
>     #####: 2563:            LogError("Failed encoding uint constructor");
2599c2599
<         -: 2587:            LogError("Failed encoding small uint value");
---
>     #####: 2587:            LogError("Failed encoding small uint value");
2617c2617
<         -: 2605:            LogError("Failed encoding uint value");
---
>     #####: 2605:            LogError("Failed encoding uint value");
2640c2640
<         -: 2628:            LogError("Failed encoding uint");
---
>     #####: 2628:            LogError("Failed encoding uint");
2657c2657
<         -: 2645:            LogError("Failed encoding uint");
---
>     #####: 2645:            LogError("Failed encoding uint");
2681c2681
<         -: 2669:            LogError("Failed encoding small ulong constructor");
---
>     #####: 2669:            LogError("Failed encoding small ulong constructor");
2696c2696
<         -: 2684:            LogError("Failed encoding ulong constructor");
---
>     #####: 2684:            LogError("Failed encoding ulong constructor");
2720c2720
<         -: 2708:            LogError("Failed encoding small ulong value");
---
>     #####: 2708:            LogError("Failed encoding small ulong value");
2742c2742
<         -: 2730:            LogError("Failed encoding ulong value");
---
>     #####: 2730:            LogError("Failed encoding ulong value");
2765c2765
<         -: 2753:            LogError("Failed encoding ulong");
---
>     #####: 2753:            LogError("Failed encoding ulong");
2782c2782
<         -: 2770:            LogError("Failed encoding ulong");
---
>     #####: 2770:            LogError("Failed encoding ulong");
2803c2803
<         -: 2791:        LogError("Failed encoding byte constructor");
---
>     #####: 2791:        LogError("Failed encoding byte constructor");
2823c2823
<         -: 2811:        LogError("Failed encoding byte value");
---
>     #####: 2811:        LogError("Failed encoding byte value");
2843c2843
<         -: 2831:        LogError("Failed encoding byte");
---
>     #####: 2831:        LogError("Failed encoding byte");
2863c2863
<         -: 2851:        LogError("Failed encoding short constructor");
---
>     #####: 2851:        LogError("Failed encoding short constructor");
2884c2884
<         -: 2872:        LogError("Failed encoding short value");
---
>     #####: 2872:        LogError("Failed encoding short value");
2904c2904
<         -: 2892:        LogError("Failed encoding short");
---
>     #####: 2892:        LogError("Failed encoding short");
2926c2926
<         -: 2914:            LogError("Failed encoding small int constructor");
---
>     #####: 2914:            LogError("Failed encoding small int constructor");
2941c2941
<         -: 2929:            LogError("Failed encoding int constructor");
---
>     #####: 2929:            LogError("Failed encoding int constructor");
2964c2964
<         -: 2952:            LogError("Failed encoding small int value");
---
>     #####: 2952:            LogError("Failed encoding small int value");
2982c2982
<         -: 2970:            LogError("Failed encoding int value");
---
>     #####: 2970:            LogError("Failed encoding int value");
3004c3004
<         -: 2992:        LogError("Failed encoding int");
---
>     #####: 2992:        LogError("Failed encoding int");
3026c3026
<         -: 3014:            LogError("Failed encoding small long constructor");
---
>     #####: 3014:            LogError("Failed encoding small long constructor");
3041c3041
<         -: 3029:            LogError("Failed encoding long constructor");
---
>     #####: 3029:            LogError("Failed encoding long constructor");
3064c3064
<         -: 3052:            LogError("Failed encoding small long value");
---
>     #####: 3052:            LogError("Failed encoding small long value");
3086c3086
<         -: 3074:            LogError("Failed encoding long value");
---
>     #####: 3074:            LogError("Failed encoding long value");
3108c3108
<         -: 3096:        LogError("Failed encoding long");
---
>     #####: 3096:        LogError("Failed encoding long");
3128c3128
<         -: 3116:        LogError("Failure encoding constructor for float");
---
>     #####: 3116:        LogError("Failure encoding constructor for float");
3152c3152
<         -: 3140:        LogError("Failure encoding bytes for float");
---
>     #####: 3140:        LogError("Failure encoding bytes for float");
3172c3172
<         -: 3160:        LogError("Failure encoding float value");
---
>     #####: 3160:        LogError("Failure encoding float value");
3192c3192
<         -: 3180:        LogError("Failure encoding constructor for double");
---
>     #####: 3180:        LogError("Failure encoding constructor for double");
3220c3220
<         -: 3208:        LogError("Failure encoding bytes for double");
---
>     #####: 3208:        LogError("Failure encoding bytes for double");
3240c3240
<         -: 3228:        LogError("Failure encoding double value");
---
>     #####: 3228:        LogError("Failure encoding double value");
3260c3260
<         -: 3248:        LogError("Failed encoding timestamp constructor");
---
>     #####: 3248:        LogError("Failed encoding timestamp constructor");
3287c3287
<         -: 3275:        LogError("Failed encoding timestamp value");
---
>     #####: 3275:        LogError("Failed encoding timestamp value");
3307c3307
<         -: 3295:        LogError("Failed encoding timestamp");
---
>     #####: 3295:        LogError("Failed encoding timestamp");
3327c3327
<         -: 3315:        LogError("Failed encoding uuid constructor");
---
>     #####: 3315:        LogError("Failed encoding uuid constructor");
3347c3347
<         -: 3335:        LogError("Failed encoding uuid value");
---
>     #####: 3335:        LogError("Failed encoding uuid value");
3367c3367
<         -: 3355:        LogError("Failed encoding uuid");
---
>     #####: 3355:        LogError("Failed encoding uuid");
3388c3388
<         -: 3376:            LogError("Failed encoding small binary constructor");
---
>     #####: 3376:            LogError("Failed encoding small binary constructor");
3403c3403
<         -: 3391:            LogError("Failed encoding large binary constructor");
---
>     #####: 3391:            LogError("Failed encoding large binary constructor");
3426c3426
<         -: 3414:            LogError("Failed encoding small binary value");
---
>     #####: 3414:            LogError("Failed encoding small binary value");
3445c3445
<         -: 3433:            LogError("Failed encoding large binary value");
---
>     #####: 3433:            LogError("Failed encoding large binary value");
3467c3467
<         -: 3455:        LogError("Failed encoding binary");
---
>     #####: 3455:        LogError("Failed encoding binary");
3489c3489
<         -: 3477:            LogError("Failed encoding small string constructor");
---
>     #####: 3477:            LogError("Failed encoding small string constructor");
3504c3504
<         -: 3492:            LogError("Failed encoding large string constructor");
---
>     #####: 3492:            LogError("Failed encoding large string constructor");
3528c3528
<         -: 3516:            LogError("Failed encoding small string value");
---
>     #####: 3516:            LogError("Failed encoding small string value");
3547c3547
<         -: 3535:            LogError("Failed encoding large string value");
---
>     #####: 3535:            LogError("Failed encoding large string value");
3571c3571
<         -: 3559:        LogError("Failed encoding string");
---
>     #####: 3559:        LogError("Failed encoding string");
3593c3593
<         -: 3581:            LogError("Failed encoding small symbol constructor");
---
>     #####: 3581:            LogError("Failed encoding small symbol constructor");
3608c3608
<         -: 3596:            LogError("Failed encoding large symbol constructor");
---
>     #####: 3596:            LogError("Failed encoding large symbol constructor");
3632c3632
<         -: 3620:            LogError("Failed encoding small symbol value");
---
>     #####: 3620:            LogError("Failed encoding small symbol value");
3652c3652
<         -: 3640:            LogError("Failed encoding large symbol value");
---
>     #####: 3640:            LogError("Failed encoding large symbol value");
3675c3675
<         -: 3663:        LogError("Failed encoding symbol");
---
>     #####: 3663:        LogError("Failed encoding symbol");
3697c3697
<         -: 3685:            LogError("Failed encoding list constructor");
---
>     #####: 3685:            LogError("Failed encoding list constructor");
3712c3712
<         -: 3700:            LogError("Failed encoding large list constructor");
---
>     #####: 3700:            LogError("Failed encoding large list constructor");
3732c3732
<         -: 3720:        LogError("Bad arguments: encoded_size = %p", encoded_size);
---
>     #####: 3720:        LogError("Bad arguments: encoded_size = %p", encoded_size);
3745c3745
<         -: 3733:                LogError("Could not get encoded size for element %u of the list", (unsigned int)i);
---
>     #####: 3733:                LogError("Could not get encoded size for element %u of the list", (unsigned int)i);
3752,3753c3752,3753
<         -: 3740:                LogError("Overflow in list size computation");
<         -: 3741:                break;
---
>     #####: 3740:                LogError("Overflow in list size computation");
>     #####: 3741:                break;
3785c3785
<         -: 3773:            LogError("Failed encoding list value");
---
>     #####: 3773:            LogError("Failed encoding list value");
3809c3809
<         -: 3797:            LogError("Failed encoding large list value");
---
>     #####: 3797:            LogError("Failed encoding large list value");
3831c3831
<         -: 3819:            LogError("Failed encoding element %u of the list", (unsigned int)i);
---
>     #####: 3819:            LogError("Failed encoding element %u of the list", (unsigned int)i);
3852c3852
<         -: 3840:            LogError("Could not output list constructor byte");
---
>     #####: 3840:            LogError("Could not output list constructor byte");
3879c3879
<         -: 3867:                    LogError("Failed encoding small list");
---
>     #####: 3867:                    LogError("Failed encoding small list");
3895c3895
<         -: 3883:                    LogError("Failed encoding large list");
---
>     #####: 3883:                    LogError("Failed encoding large list");
3920c3920
<         -: 3908:            LogError("Could not encode small map constructor");
---
>     #####: 3908:            LogError("Could not encode small map constructor");
3935c3935
<         -: 3923:            LogError("Could not encode large map constructor");
---
>     #####: 3923:            LogError("Could not encode large map constructor");
3955c3955
<         -: 3943:        LogError("Bad arguments: encoded_size = %p", encoded_size);
---
>     #####: 3943:        LogError("Bad arguments: encoded_size = %p", encoded_size);
3968c3968
<         -: 3956:                LogError("Could not get encoded size for key element %u of the map", (unsigned int)i);
---
>     #####: 3956:                LogError("Could not get encoded size for key element %u of the map", (unsigned int)i);
3975,3976c3975,3976
<         -: 3963:                LogError("Encoded data is more than the max size for a map");
<         -: 3964:                break;
---
>     #####: 3963:                LogError("Encoded data is more than the max size for a map");
>     #####: 3964:                break;
3983c3983
<         -: 3971:                LogError("Could not get encoded size for value element %u of the map", (unsigned int)i);
---
>     #####: 3971:                LogError("Could not get encoded size for value element %u of the map", (unsigned int)i);
3990,3991c3990,3991
<         -: 3978:                LogError("Encoded data is more than the max size for a map");
<         -: 3979:                break;
---
>     #####: 3978:                LogError("Encoded data is more than the max size for a map");
>     #####: 3979:                break;
4026c4026
<         -: 4014:            LogError("Could not encode small map header");
---
>     #####: 4014:            LogError("Could not encode small map header");
4050c4050
<         -: 4038:            LogError("Could not encode large map header");
---
>     #####: 4038:            LogError("Could not encode large map header");
4068,4069c4068,4069
<         -: 4056:                LogError("Failed encoding map element %u", (unsigned int)i);
<         -: 4057:                break;
---
>     #####: 4056:                LogError("Failed encoding map element %u", (unsigned int)i);
>     #####: 4057:                break;
4075c4075
<         -: 4063:            LogError("Could not encode map");
---
>     #####: 4063:            LogError("Could not encode map");
4108c4108
<         -: 4096:                LogError("Could not encode small map");
---
>     #####: 4096:                LogError("Could not encode small map");
4124c4124
<         -: 4112:                LogError("Could not encode large map");
---
>     #####: 4112:                LogError("Could not encode large map");
4148c4148
<         -: 4136:            LogError("Could not encode small array constructor");
---
>     #####: 4136:            LogError("Could not encode small array constructor");
4163c4163
<         -: 4151:            LogError("Could not encode large array constructor");
---
>     #####: 4151:            LogError("Could not encode large array constructor");
4183c4183
<         -: 4171:        LogError("Bad arguments: encoded_size = %p", encoded_size);
---
>     #####: 4171:        LogError("Bad arguments: encoded_size = %p", encoded_size);
4196c4196
<         -: 4184:                LogError("Could not get encoded size for element %u of the array", (unsigned int)i);
---
>     #####: 4184:                LogError("Could not get encoded size for element %u of the array", (unsigned int)i);
4203,4204c4203,4204
<         -: 4191:                LogError("Overflow in array size computation");
<         -: 4192:                break;
---
>     #####: 4191:                LogError("Overflow in array size computation");
>     #####: 4192:                break;
4241c4241
<         -: 4229:            LogError("Could not encode small array header");
---
>     #####: 4229:            LogError("Could not encode small array header");
4265c4265
<         -: 4253:            LogError("Could not encode large array header");
---
>     #####: 4253:            LogError("Could not encode large array header");
4283c4283
<         -: 4271:                LogError("Failed encoding element %u of the array", (unsigned int)i);
---
>     #####: 4271:                LogError("Failed encoding element %u of the array", (unsigned int)i);
4291c4291
<         -: 4279:            LogError("Could not encode array");
---
>     #####: 4279:            LogError("Could not encode array");
4321c4321
<         -: 4309:                LogError("Could not encode small array");
---
>     #####: 4309:                LogError("Could not encode small array");
4337c4337
<         -: 4325:                LogError("Could not encode large array");
---
>     #####: 4325:                LogError("Could not encode large array");
4357c4357
<         -: 4345:        LogError("Failed encoding descriptor header");
---
>     #####: 4345:        LogError("Failed encoding descriptor header");
4377c4377
<         -: 4365:        LogError("Bad arguments: value = %p, encoder_output = %p",
---
>     #####: 4365:        LogError("Bad arguments: value = %p, encoder_output = %p",
4389c4389
<         -: 4377:            LogError("Invalid type: %d", (int)value_data->type);
---
>     #####: 4377:            LogError("Invalid type: %d", (int)value_data->type);
4481c4481
<         -: 4469:                LogError("Failed encoding described or composite type");
---
>     #####: 4469:                LogError("Failed encoding described or composite type");
4504c4504
<         -: 4492:        LogError("Bad arguments: item = %p, encoder_output = %p", item, encoder_output);
---
>     #####: 4492:        LogError("Bad arguments: item = %p, encoder_output = %p", item, encoder_output);
4514c4514
<         -: 4502:                LogError("Unsupported array type: %d", (int)value_data->type);
---
>     #####: 4502:                LogError("Unsupported array type: %d", (int)value_data->type);
4752c4752
<         -: 4740:        LogError("Bad arguments: value = %p, encoded_size = %p",
---
>     #####: 4740:        LogError("Bad arguments: value = %p, encoded_size = %p",
4772c4772
<         -: 4760:        LogError("Bad arguments: item = %p, encoded_size = %p", item, encoded_size);
---
>     #####: 4760:        LogError("Bad arguments: item = %p, encoded_size = %p", item, encoded_size);
4861c4861
<         -: 4849:        LogError("NULL value");
---
>     #####: 4849:        LogError("NULL value");
4880c4880
<         -: 4868:        LogError("Cannot allocate memory for internal decoder structure");
---
>     #####: 4868:        LogError("Cannot allocate memory for internal decoder structure");
4922c4922
<         -: 4910:        LogError("NULL internal_decoder_data");
---
>     #####: 4910:        LogError("NULL internal_decoder_data");
4934c4934
<         -: 4922:                LogError("Invalid decoder state: %d", (int)internal_decoder_data->decoder_state);
---
>     #####: 4922:                LogError("Invalid decoder state: %d", (int)internal_decoder_data->decoder_state);
4953c4953
<         -: 4941:                    LogError("Cannot allocate decode value");
---
>     #####: 4941:                    LogError("Cannot allocate decode value");
4966c4966
<         -: 4954:                    LogError("Invalid constructor byte: 0x%02x", internal_decoder_data->constructor_byte);
---
>     #####: 4954:                    LogError("Invalid constructor byte: 0x%02x", internal_decoder_data->constructor_byte);
4978c4978
<         -: 4966:                        LogError("Could not allocate memory for descriptor");
---
>     #####: 4966:                        LogError("Could not allocate memory for descriptor");
4989c4989
<         -: 4977:                            LogError("Could not create inner decoder for descriptor");
---
>     #####: 4977:                            LogError("Could not create inner decoder for descriptor");
5392c5392
<         -: 5380:                    LogError("Invalid constructor byte: 0x%02x", internal_decoder_data->constructor_byte);
---
>     #####: 5380:                    LogError("Invalid constructor byte: 0x%02x", internal_decoder_data->constructor_byte);
5402c5402
<         -: 5390:                        LogError("Invalid described value decode step: %d", step);
---
>     #####: 5390:                        LogError("Invalid described value decode step: %d", step);
5411c5411
<         -: 5399:                            LogError("Decoding bytes for described value failed");
---
>     #####: 5399:                            LogError("Decoding bytes for described value failed");
5429c5429
<         -: 5417:                                    LogError("Could not allocate memory for AMQP value");
---
>     #####: 5417:                                    LogError("Could not allocate memory for AMQP value");
5440c5440
<         -: 5428:                                        LogError("Could not create inner decoder");
---
>     #####: 5428:                                        LogError("Could not create inner decoder");
5462c5462
<         -: 5450:                            LogError("Decoding bytes for described value failed");
---
>     #####: 5450:                            LogError("Decoding bytes for described value failed");
5492c5492
<         -: 5480:                        LogError("Bad boolean value: %02X", buffer[0]);
---
>     #####: 5480:                        LogError("Bad boolean value: %02X", buffer[0]);
5852c5852
<         -: 5840:                                LogError("Cannot allocate memory for decoded binary value");
---
>     #####: 5840:                                LogError("Cannot allocate memory for decoded binary value");
5920c5920
<         -: 5908:                                    LogError("Cannot allocate memory for decoded binary value");
---
>     #####: 5908:                                    LogError("Cannot allocate memory for decoded binary value");
5973c5973
<         -: 5961:                            LogError("Could not allocate memory for decoded string value");
---
>     #####: 5961:                            LogError("Could not allocate memory for decoded string value");
6036c6036
<         -: 6024:                                LogError("Could not allocate memory for decoded string value");
---
>     #####: 6024:                                LogError("Could not allocate memory for decoded string value");
6102c6102
<         -: 6090:                            LogError("Could not allocate memory for decoded symbol value");
---
>     #####: 6090:                            LogError("Could not allocate memory for decoded symbol value");
6165c6165
<         -: 6153:                                LogError("Could not allocate memory for decoded symbol value");
---
>     #####: 6153:                                LogError("Could not allocate memory for decoded symbol value");
6226c6226
<         -: 6214:                        LogError("Invalid step in decoding list value: %d", step);
---
>     #####: 6214:                        LogError("Invalid step in decoding list value: %d", step);
6288c6288
<         -: 6276:                                    LogError("Could not allocate memory for decoded list value");
---
>     #####: 6276:                                    LogError("Could not allocate memory for decoded list value");
6327c6327
<         -: 6315:                                        LogError("Could not allocate memory for decoded list value");
---
>     #####: 6315:                                        LogError("Could not allocate memory for decoded list value");
6371c6371
<         -: 6359:                                    LogError("Could not create inner decoder for list items");
---
>     #####: 6359:                                    LogError("Could not create inner decoder for list items");
6384c6384
<         -: 6372:                            LogError("NULL inner decoder. This should not happen under normal circumstances");
---
>     #####: 6372:                            LogError("NULL inner decoder. This should not happen under normal circumstances");
6389c6389
<         -: 6377:                            LogError("Decoding list items failed");
---
>     #####: 6377:                            LogError("Decoding list items failed");
6435c6435
<         -: 6423:                        LogError("Invalid step in decoding map value: %d", step);
---
>     #####: 6423:                        LogError("Invalid step in decoding map value: %d", step);
6495c6495
<         -: 6483:                                    LogError("Could not allocate memory for map value items");
---
>     #####: 6483:                                    LogError("Could not allocate memory for map value items");
6534c6534
<         -: 6522:                                        LogError("Could not allocate memory for map value items");
---
>     #####: 6522:                                        LogError("Could not allocate memory for map value items");
6569c6569
<         -: 6557:                                LogError("Could not allocate memory for map item");
---
>     #####: 6557:                                LogError("Could not allocate memory for map item");
6587c6587
<         -: 6575:                                    LogError("Could not create inner decoder for map item");
---
>     #####: 6575:                                    LogError("Could not create inner decoder for map item");
6600c6600
<         -: 6588:                            LogError("NULL inner decoder. This should not happen under normal circumstances");
---
>     #####: 6588:                            LogError("NULL inner decoder. This should not happen under normal circumstances");
6605c6605
<         -: 6593:                            LogError("Could not decode map item");
---
>     #####: 6593:                            LogError("Could not decode map item");
6650c6650
<         -: 6638:                        LogError("Invalid step in decoding array value: %d", step);
---
>     #####: 6638:                        LogError("Invalid step in decoding array value: %d", step);
6708c6708
<         -: 6696:                                    LogError("Could not allocate memory for array items");
---
>     #####: 6696:                                    LogError("Could not allocate memory for array items");
6742c6742
<         -: 6730:                                        LogError("Could not allocate memory for array items");
---
>     #####: 6730:                                        LogError("Could not allocate memory for array items");
6778c6778
<         -: 6766:                                LogError("Could not allocate memory for array item to be decoded");
---
>     #####: 6766:                                LogError("Could not allocate memory for array item to be decoded");
6790c6790
<         -: 6778:                                    LogError("Could not create inner decoder for array items");
---
>     #####: 6778:                                    LogError("Could not create inner decoder for array items");
6802c6802
<         -: 6790:                            LogError("NULL inner decoder. This should not happen under normal circumstances");
---
>     #####: 6790:                            LogError("NULL inner decoder. This should not happen under normal circumstances");
6807c6807
<         -: 6795:                            LogError("Could not decode array item");
---
>     #####: 6795:                            LogError("Could not decode array item");
6853c6853
<         -: 6841:                                        LogError("Could not allocate memory for array item");
---
>     #####: 6841:                                        LogError("Could not allocate memory for array item");
6864c6864
<         -: 6852:                                            LogError("Could not create inner decoder for array item");
---
>     #####: 6852:                                            LogError("Could not create inner decoder for array item");
6872c6872
<         -: 6860:                                                LogError("Could not decode array item data");
---
>     #####: 6860:                                                LogError("Could not decode array item data");
6923c6923
<         -: 6911:        LogError("NULL on_value_decoded");
---
>     #####: 6911:        LogError("NULL on_value_decoded");
6932c6932
<         -: 6920:            LogError("Could not allocate memory for AMQP value decoder");
---
>     #####: 6920:            LogError("Could not allocate memory for AMQP value decoder");
6940c6940
<         -: 6928:                LogError("Could not allocate memory for decoded AMQP value");
---
>     #####: 6928:                LogError("Could not allocate memory for decoded AMQP value");
6951c6951
<         -: 6939:                    LogError("Could not create the internal decoder");
---
>     #####: 6939:                    LogError("Could not create the internal decoder");
6969c6969
<         -: 6957:        LogError("NULL handle");
---
>     #####: 6957:        LogError("NULL handle");
6993c6993
<         -: 6981:        LogError("Bad arguments: decoder_instance = %p, buffer = %p, size = %lu",
---
>     #####: 6981:        LogError("Bad arguments: decoder_instance = %p, buffer = %p, size = %lu",
7004c7004
<         -: 6992:            LogError("Failed decoding bytes");
---
>     #####: 6992:            LogError("Failed decoding bytes");
7023c7023
<         -: 7011:        LogError("NULL value");
---
>     #####: 7011:        LogError("NULL value");
7032c7032
<         -: 7020:            LogError("Type is not described or composite");
---
>     #####: 7020:            LogError("Type is not described or composite");
7050c7050
<         -: 7038:        LogError("NULL value");
---
>     #####: 7038:        LogError("NULL value");
7059c7059
<         -: 7047:            LogError("Type is not described or composite");
---
>     #####: 7047:            LogError("Type is not described or composite");
7076c7076
<         -: 7064:        LogError("Cannot allocate memory for described type");
---
>     #####: 7064:        LogError("Cannot allocate memory for described type");
7093c7093
<         -: 7081:        LogError("Cannot allocate memory for composite type");
---
>     #####: 7081:        LogError("Cannot allocate memory for composite type");
7101c7101
<         -: 7089:            LogError("Cannot clone descriptor for composite type");
---
>     #####: 7089:            LogError("Cannot clone descriptor for composite type");
7110c7110
<         -: 7098:                LogError("Cannot create list for composite type");
---
>     #####: 7098:                LogError("Cannot create list for composite type");
7119c7119
<         -: 7107:                    LogError("Cannot set list item count for composite type");
---
>     #####: 7107:                    LogError("Cannot set list item count for composite type");
7137c7137
<         -: 7125:        LogError("Cannot allocate memory for composite type");
---
>     #####: 7125:        LogError("Cannot allocate memory for composite type");
7144c7144
<         -: 7132:            LogError("Cannot create ulong descriptor for composite type");
---
>     #####: 7132:            LogError("Cannot create ulong descriptor for composite type");
7155c7155
<         -: 7143:                LogError("Cannot create list for composite type");
---
>     #####: 7143:                LogError("Cannot create list for composite type");
7172c7172
<         -: 7160:        LogError("NULL value");
---
>     #####: 7160:        LogError("NULL value");
7181c7181
<         -: 7169:            LogError("Attempt to set composite item on a non-composite type");
---
>     #####: 7169:            LogError("Attempt to set composite item on a non-composite type");
7188c7188
<         -: 7176:                LogError("amqpvalue_set_list_item failed for composite item");
---
>     #####: 7176:                LogError("amqpvalue_set_list_item failed for composite item");
7207c7207
<         -: 7195:        LogError("NULL value");
---
>     #####: 7195:        LogError("NULL value");
7216c7216
<         -: 7204:            LogError("Attempt to get composite item on a non-composite type");
---
>     #####: 7204:            LogError("Attempt to get composite item on a non-composite type");
7222c7222
<         -: 7210:            if (result == NULL)
---
>     #####: 7210:            if (result == NULL)
7224c7224
<         -: 7212:                LogError("amqpvalue_get_list_item failed for composite item");
---
>     #####: 7212:                LogError("amqpvalue_get_list_item failed for composite item");
7238c7238
<         -: 7226:        LogError("NULL value");
---
>     #####: 7226:        LogError("NULL value");
7247c7247
<         -: 7235:            LogError("Attempt to get composite item in place on a non-composite type");
---
>     #####: 7235:            LogError("Attempt to get composite item in place on a non-composite type");
7253c7253
<         -: 7241:            if (result == NULL)
---
>     #####: 7241:            if (result == NULL)
7255c7255
<         -: 7243:                LogError("amqpvalue_get_list_item_in_place failed for composite item");
---
>     #####: 7243:                LogError("amqpvalue_get_list_item_in_place failed for composite item");
7269c7269
<         -: 7257:        LogError("NULL value");
---
>     #####: 7257:        LogError("NULL value");
7278c7278
<         -: 7266:            LogError("Attempt to get composite item in place on a non-composite type");
---
>     #####: 7266:            LogError("Attempt to get composite item in place on a non-composite type");
7285c7285
<         -: 7273:                LogError("amqpvalue_get_list_item_in_place failed for composite item");
---
>     #####: 7273:                LogError("amqpvalue_get_list_item_in_place failed for composite item");
7304c7304
<         -: 7292:        LogError("NULL value");
---
>     #####: 7292:        LogError("NULL value");
7314c7314
<         -: 7302:            LogError("Attempt to get list item in place on a non-list type");
---
>     #####: 7302:            LogError("Attempt to get list item in place on a non-list type");
