2c2
<         -:    0:Programs:101
---
>         -:    0:Programs:82
170c170
<      257*:  168:DEFINE_REFCOUNT_TYPE(AMQP_VALUE_DATA);
---
>      203*:  168:DEFINE_REFCOUNT_TYPE(AMQP_VALUE_DATA);
173c173
<        85:  168:DEFINE_REFCOUNT_TYPE(AMQP_VALUE_DATA);
---
>        67:  168:DEFINE_REFCOUNT_TYPE(AMQP_VALUE_DATA);
176c176
<        86:  168:DEFINE_REFCOUNT_TYPE(AMQP_VALUE_DATA);
---
>        68:  168:DEFINE_REFCOUNT_TYPE(AMQP_VALUE_DATA);
179c179
<       86*:  168:DEFINE_REFCOUNT_TYPE(AMQP_VALUE_DATA);
---
>       68*:  168:DEFINE_REFCOUNT_TYPE(AMQP_VALUE_DATA);
440c440
<        18:  428:AMQP_VALUE amqpvalue_create_ulong(uint64_t value)
---
>        14:  428:AMQP_VALUE amqpvalue_create_ulong(uint64_t value)
442,443c442,443
<        18:  430:    AMQP_VALUE result = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
<        18:  431:    if (result == NULL)
---
>        14:  430:    AMQP_VALUE result = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
>        14:  431:    if (result == NULL)
451,452c451,452
<        18:  439:        result->type = AMQP_TYPE_ULONG;
<        18:  440:        result->value.ulong_value = value;
---
>        14:  439:        result->type = AMQP_TYPE_ULONG;
>        14:  440:        result->value.ulong_value = value;
455c455
<        18:  443:    return result;
---
>        14:  443:    return result;
1069c1069
<        20: 1057:AMQP_VALUE amqpvalue_create_string(const char* value)
---
>        16: 1057:AMQP_VALUE amqpvalue_create_string(const char* value)
1072c1072
<        20: 1060:    if (value == NULL)
---
>        16: 1060:    if (value == NULL)
1079c1079
<        20: 1067:        size_t length = strlen(value);
---
>        16: 1067:        size_t length = strlen(value);
1081,1082c1081,1082
<        20: 1069:        result = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
<        20: 1070:        if (result == NULL)
---
>        16: 1069:        result = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
>        16: 1070:        if (result == NULL)
1089,1091c1089,1091
<        20: 1077:            result->type = AMQP_TYPE_STRING;
<        20: 1078:            result->value.string_value.chars = (char*)malloc(length + 1);
<        20: 1079:            if (result->value.string_value.chars == NULL)
---
>        16: 1077:            result->type = AMQP_TYPE_STRING;
>        16: 1078:            result->value.string_value.chars = (char*)malloc(length + 1);
>        16: 1079:            if (result->value.string_value.chars == NULL)
1100c1100
<        20: 1088:                (void)memcpy(result->value.string_value.chars, value, length + 1);
---
>        16: 1088:                (void)memcpy(result->value.string_value.chars, value, length + 1);
1105c1105
<        20: 1093:    return result;
---
>        16: 1093:    return result;
1229c1229
<        18: 1217:AMQP_VALUE amqpvalue_create_list(void)
---
>        14: 1217:AMQP_VALUE amqpvalue_create_list(void)
1231,1232c1231,1232
<        18: 1219:    AMQP_VALUE result = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
<        18: 1220:    if (result == NULL)
---
>        14: 1219:    AMQP_VALUE result = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
>        14: 1220:    if (result == NULL)
1240c1240
<        18: 1228:        result->type = AMQP_TYPE_LIST;
---
>        14: 1228:        result->type = AMQP_TYPE_LIST;
1243,1244c1243,1244
<        18: 1231:        result->value.list_value.count = 0;
<        18: 1232:        result->value.list_value.items = NULL;
---
>        14: 1231:        result->value.list_value.count = 0;
>        14: 1232:        result->value.list_value.items = NULL;
1247c1247
<        18: 1235:    return result;
---
>        14: 1235:    return result;
1380c1380
<        18: 1368:int amqpvalue_set_list_item(AMQP_VALUE value, uint32_t index, AMQP_VALUE list_item_value)
---
>        14: 1368:int amqpvalue_set_list_item(AMQP_VALUE value, uint32_t index, AMQP_VALUE list_item_value)
1385c1385
<        18: 1373:    if (value == NULL)
---
>        14: 1373:    if (value == NULL)
1392,1393c1392,1393
<        18: 1380:        AMQP_VALUE_DATA* value_data = (AMQP_VALUE_DATA*)value;
<        18: 1381:        if (value_data->type != AMQP_TYPE_LIST)
---
>        14: 1380:        AMQP_VALUE_DATA* value_data = (AMQP_VALUE_DATA*)value;
>        14: 1381:        if (value_data->type != AMQP_TYPE_LIST)
1401,1402c1401,1402
<        18: 1389:            AMQP_VALUE cloned_item = amqpvalue_clone(list_item_value);
<        18: 1390:            if (cloned_item == NULL)
---
>        14: 1389:            AMQP_VALUE cloned_item = amqpvalue_clone(list_item_value);
>        14: 1390:            if (cloned_item == NULL)
1411c1411
<        18: 1399:                if (index >= value_data->value.list_value.count)
---
>        14: 1399:                if (index >= value_data->value.list_value.count)
1413,1414c1413,1414
<        18: 1401:                    AMQP_VALUE* new_list = (AMQP_VALUE*)realloc(value_data->value.list_value.items, (index + 1) * sizeof(AMQP_VALUE));
<        18: 1402:                    if (new_list == NULL)
---
>        14: 1401:                    AMQP_VALUE* new_list = (AMQP_VALUE*)realloc(value_data->value.list_value.items, (index + 1) * sizeof(AMQP_VALUE));
>        14: 1402:                    if (new_list == NULL)
1425c1425
<        18: 1413:                        value_data->value.list_value.items = new_list;
---
>        14: 1413:                        value_data->value.list_value.items = new_list;
1427c1427
<       18*: 1415:                        for (i = value_data->value.list_value.count; i < index; i++)
---
>       14*: 1415:                        for (i = value_data->value.list_value.count; i < index; i++)
1437c1437
<        18: 1425:                        if (i < index)
---
>        14: 1425:                        if (i < index)
1454,1455c1454,1455
<        18: 1442:                            value_data->value.list_value.count = index + 1;
<        18: 1443:                            value_data->value.list_value.items[index] = cloned_item;
---
>        14: 1442:                            value_data->value.list_value.count = index + 1;
>        14: 1443:                            value_data->value.list_value.items[index] = cloned_item;
1458c1458
<        18: 1446:                            result = 0;
---
>        14: 1446:                            result = 0;
1477c1477
<        18: 1465:    return result;
---
>        14: 1465:    return result;
2224c2224
<        81: 2212:AMQP_VALUE amqpvalue_clone(AMQP_VALUE value)
---
>        63: 2212:AMQP_VALUE amqpvalue_clone(AMQP_VALUE value)
2228c2228
<        81: 2216:    if (value == NULL)
---
>        63: 2216:    if (value == NULL)
2237,2238c2237,2238
<        81: 2225:        INC_REF(AMQP_VALUE_DATA, value);
<        81: 2226:        result = value;
---
>        63: 2225:        INC_REF(AMQP_VALUE_DATA, value);
>        63: 2226:        result = value;
2241c2241
<        81: 2229:    return result;
---
>        63: 2229:    return result;
4784c4784
<        85: 4772:static void amqpvalue_clear(AMQP_VALUE_DATA* value_data)
---
>        67: 4772:static void amqpvalue_clear(AMQP_VALUE_DATA* value_data)
4786c4786
<        85: 4774:    switch (value_data->type)
---
>        67: 4774:    switch (value_data->type)
4788,4789c4788,4789
<        28: 4776:    default:
<        28: 4777:        break;
---
>        22: 4776:    default:
>        22: 4777:        break;
4797,4798c4797,4798
<        20: 4785:    case AMQP_TYPE_STRING:
<        20: 4786:        if (value_data->value.string_value.chars != NULL)
---
>        16: 4785:    case AMQP_TYPE_STRING:
>        16: 4786:        if (value_data->value.string_value.chars != NULL)
4800c4800
<        20: 4788:            free(value_data->value.string_value.chars);
---
>        16: 4788:            free(value_data->value.string_value.chars);
4802c4802
<        20: 4790:        break;
---
>        16: 4790:        break;
4809c4809
<        18: 4797:    case AMQP_TYPE_LIST:
---
>        14: 4797:    case AMQP_TYPE_LIST:
4812c4812
<        36: 4800:        for (i = 0; i < value_data->value.list_value.count; i++)
---
>        28: 4800:        for (i = 0; i < value_data->value.list_value.count; i++)
4814c4814
<        18: 4802:            amqpvalue_destroy(value_data->value.list_value.items[i]);
---
>        14: 4802:            amqpvalue_destroy(value_data->value.list_value.items[i]);
4817,4819c4817,4819
<        18: 4805:        free(value_data->value.list_value.items);
<        18: 4806:        value_data->value.list_value.items = NULL;
<        18: 4807:        break;
---
>        14: 4805:        free(value_data->value.list_value.items);
>        14: 4806:        value_data->value.list_value.items = NULL;
>        14: 4807:        break;
4846c4846
<        18: 4834:    case AMQP_TYPE_COMPOSITE:
---
>        14: 4834:    case AMQP_TYPE_COMPOSITE:
4848,4850c4848,4850
<        18: 4836:        amqpvalue_destroy(value_data->value.described_value.descriptor);
<        18: 4837:        amqpvalue_destroy(value_data->value.described_value.value);
<        18: 4838:        break;
---
>        14: 4836:        amqpvalue_destroy(value_data->value.described_value.descriptor);
>        14: 4837:        amqpvalue_destroy(value_data->value.described_value.value);
>        14: 4838:        break;
4853,4854c4853,4854
<        85: 4841:    value_data->type = AMQP_TYPE_UNKNOWN;
<        85: 4842:}
---
>        67: 4841:    value_data->type = AMQP_TYPE_UNKNOWN;
>        67: 4842:}
4856c4856
<       166: 4844:void amqpvalue_destroy(AMQP_VALUE value)
---
>       130: 4844:void amqpvalue_destroy(AMQP_VALUE value)
4859c4859
<       166: 4847:    if (value == NULL)
---
>       130: 4847:    if (value == NULL)
4865c4865
<       166: 4853:        if (DEC_REF(AMQP_VALUE_DATA, value) == DEC_RETURN_ZERO)
---
>       130: 4853:        if (DEC_REF(AMQP_VALUE_DATA, value) == DEC_RETURN_ZERO)
4868,4870c4868,4870
<        85: 4856:            AMQP_VALUE_DATA* value_data = (AMQP_VALUE_DATA*)value;
<        85: 4857:            amqpvalue_clear(value_data);
<        85: 4858:            REFCOUNT_TYPE_DESTROY(AMQP_VALUE_DATA, value);
---
>        67: 4856:            AMQP_VALUE_DATA* value_data = (AMQP_VALUE_DATA*)value;
>        67: 4857:            amqpvalue_clear(value_data);
>        67: 4858:            REFCOUNT_TYPE_DESTROY(AMQP_VALUE_DATA, value);
4873c4873
<       166: 4861:}
---
>       130: 4861:}
4875c4875
<        11: 4863:static INTERNAL_DECODER_DATA* internal_decoder_create(ON_VALUE_DECODED on_value_decoded, void* callback_context, AMQP_VALUE_DATA* value_data, bool is_internal)
---
>         9: 4863:static INTERNAL_DECODER_DATA* internal_decoder_create(ON_VALUE_DECODED on_value_decoded, void* callback_context, AMQP_VALUE_DATA* value_data, bool is_internal)
4877,4878c4877,4878
<        11: 4865:    INTERNAL_DECODER_DATA* internal_decoder_data = (INTERNAL_DECODER_DATA*)malloc(sizeof(INTERNAL_DECODER_DATA));
<        11: 4866:    if (internal_decoder_data == NULL)
---
>         9: 4865:    INTERNAL_DECODER_DATA* internal_decoder_data = (INTERNAL_DECODER_DATA*)malloc(sizeof(INTERNAL_DECODER_DATA));
>         9: 4866:    if (internal_decoder_data == NULL)
4884,4889c4884,4889
<        11: 4872:        internal_decoder_data->is_internal = is_internal;
<        11: 4873:        internal_decoder_data->on_value_decoded = on_value_decoded;
<        11: 4874:        internal_decoder_data->on_value_decoded_context = callback_context;
<        11: 4875:        internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;
<        11: 4876:        internal_decoder_data->inner_decoder = NULL;
<        11: 4877:        internal_decoder_data->decode_to_value = value_data;
---
>         9: 4872:        internal_decoder_data->is_internal = is_internal;
>         9: 4873:        internal_decoder_data->on_value_decoded = on_value_decoded;
>         9: 4874:        internal_decoder_data->on_value_decoded_context = callback_context;
>         9: 4875:        internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;
>         9: 4876:        internal_decoder_data->inner_decoder = NULL;
>         9: 4877:        internal_decoder_data->decode_to_value = value_data;
4892c4892
<        11: 4880:    return internal_decoder_data;
---
>         9: 4880:    return internal_decoder_data;
4895c4895
<        20: 4883:static void internal_decoder_destroy(INTERNAL_DECODER_DATA* internal_decoder)
---
>        16: 4883:static void internal_decoder_destroy(INTERNAL_DECODER_DATA* internal_decoder)
4897c4897
<        20: 4885:    if (internal_decoder != NULL)
---
>        16: 4885:    if (internal_decoder != NULL)
4899,4900c4899,4900
<        10: 4887:        internal_decoder_destroy(internal_decoder->inner_decoder);
<        10: 4888:        free(internal_decoder);
---
>         8: 4887:        internal_decoder_destroy(internal_decoder->inner_decoder);
>         8: 4888:        free(internal_decoder);
4902c4902
<        20: 4890:}
---
>        16: 4890:}
6916c6916
<        11: 6904:AMQPVALUE_DECODER_HANDLE amqpvalue_decoder_create(ON_VALUE_DECODED on_value_decoded, void* callback_context)
---
>         9: 6904:AMQPVALUE_DECODER_HANDLE amqpvalue_decoder_create(ON_VALUE_DECODED on_value_decoded, void* callback_context)
6921c6921
<        11: 6909:    if (on_value_decoded == NULL)
---
>         9: 6909:    if (on_value_decoded == NULL)
6928c6928
<        11: 6916:        decoder_instance = (AMQPVALUE_DECODER_HANDLE_DATA*)malloc(sizeof(AMQPVALUE_DECODER_HANDLE_DATA));
---
>         9: 6916:        decoder_instance = (AMQPVALUE_DECODER_HANDLE_DATA*)malloc(sizeof(AMQPVALUE_DECODER_HANDLE_DATA));
6930c6930
<        11: 6918:        if (decoder_instance == NULL)
---
>         9: 6918:        if (decoder_instance == NULL)
6936,6937c6936,6937
<        11: 6924:            decoder_instance->decode_to_value = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
<        11: 6925:            if (decoder_instance->decode_to_value == NULL)
---
>         9: 6924:            decoder_instance->decode_to_value = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
>         9: 6925:            if (decoder_instance->decode_to_value == NULL)
6946,6948c6946,6948
<        11: 6934:                decoder_instance->decode_to_value->type = AMQP_TYPE_UNKNOWN;
<        11: 6935:                decoder_instance->internal_decoder = internal_decoder_create(on_value_decoded, callback_context, decoder_instance->decode_to_value, false);
<        11: 6936:                if (decoder_instance->internal_decoder == NULL)
---
>         9: 6934:                decoder_instance->decode_to_value->type = AMQP_TYPE_UNKNOWN;
>         9: 6935:                decoder_instance->internal_decoder = internal_decoder_create(on_value_decoded, callback_context, decoder_instance->decode_to_value, false);
>         9: 6936:                if (decoder_instance->internal_decoder == NULL)
6961c6961
<        11: 6949:    return decoder_instance;
---
>         9: 6949:    return decoder_instance;
6964c6964
<        10: 6952:void amqpvalue_decoder_destroy(AMQPVALUE_DECODER_HANDLE handle)
---
>         8: 6952:void amqpvalue_decoder_destroy(AMQPVALUE_DECODER_HANDLE handle)
6966c6966
<        10: 6954:    if (handle == NULL)
---
>         8: 6954:    if (handle == NULL)
6973c6973
<        10: 6961:        AMQPVALUE_DECODER_HANDLE_DATA* decoder_instance = (AMQPVALUE_DECODER_HANDLE_DATA*)handle;
---
>         8: 6961:        AMQPVALUE_DECODER_HANDLE_DATA* decoder_instance = (AMQPVALUE_DECODER_HANDLE_DATA*)handle;
6975,6977c6975,6977
<        10: 6963:        amqpvalue_destroy(decoder_instance->internal_decoder->decode_to_value);
<        10: 6964:        internal_decoder_destroy(decoder_instance->internal_decoder);
<        10: 6965:        free(handle);
---
>         8: 6963:        amqpvalue_destroy(decoder_instance->internal_decoder->decode_to_value);
>         8: 6964:        internal_decoder_destroy(decoder_instance->internal_decoder);
>         8: 6965:        free(handle);
6979c6979
<        10: 6967:}
---
>         8: 6967:}
7132c7132
<        18: 7120:AMQP_VALUE amqpvalue_create_composite_with_ulong_descriptor(uint64_t descriptor)
---
>        14: 7120:AMQP_VALUE amqpvalue_create_composite_with_ulong_descriptor(uint64_t descriptor)
7134,7135c7134,7135
<        18: 7122:    AMQP_VALUE_DATA* result = (AMQP_VALUE_DATA*)REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
<        18: 7123:    if (result == NULL)
---
>        14: 7122:    AMQP_VALUE_DATA* result = (AMQP_VALUE_DATA*)REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);
>        14: 7123:    if (result == NULL)
7141,7142c7141,7142
<        18: 7129:        AMQP_VALUE descriptor_ulong_value = amqpvalue_create_ulong(descriptor);
<        18: 7130:        if (descriptor_ulong_value == NULL)
---
>        14: 7129:        AMQP_VALUE descriptor_ulong_value = amqpvalue_create_ulong(descriptor);
>        14: 7130:        if (descriptor_ulong_value == NULL)
7150,7153c7150,7153
<        18: 7138:            result->type = AMQP_TYPE_COMPOSITE;
<        18: 7139:            result->value.described_value.descriptor = descriptor_ulong_value;
<        18: 7140:            result->value.described_value.value = amqpvalue_create_list();
<        18: 7141:            if (result->value.described_value.value == NULL)
---
>        14: 7138:            result->type = AMQP_TYPE_COMPOSITE;
>        14: 7139:            result->value.described_value.descriptor = descriptor_ulong_value;
>        14: 7140:            result->value.described_value.value = amqpvalue_create_list();
>        14: 7141:            if (result->value.described_value.value == NULL)
7163c7163
<        18: 7151:    return result;
---
>        14: 7151:    return result;
7166c7166
<        18: 7154:int amqpvalue_set_composite_item(AMQP_VALUE value, uint32_t index, AMQP_VALUE item_value)
---
>        14: 7154:int amqpvalue_set_composite_item(AMQP_VALUE value, uint32_t index, AMQP_VALUE item_value)
7170c7170
<        18: 7158:    if (value == NULL)
---
>        14: 7158:    if (value == NULL)
7177,7178c7177,7178
<        18: 7165:        AMQP_VALUE_DATA* value_data = (AMQP_VALUE_DATA*)value;
<       18*: 7166:        if ((value_data->type != AMQP_TYPE_COMPOSITE) &&
---
>        14: 7165:        AMQP_VALUE_DATA* value_data = (AMQP_VALUE_DATA*)value;
>       14*: 7166:        if ((value_data->type != AMQP_TYPE_COMPOSITE) &&
7186c7186
<        18: 7174:            if (amqpvalue_set_list_item(value_data->value.described_value.value, index, item_value) != 0)
---
>        14: 7174:            if (amqpvalue_set_list_item(value_data->value.described_value.value, index, item_value) != 0)
7193c7193
<        18: 7181:                result = 0;
---
>        14: 7181:                result = 0;
7198c7198
<        18: 7186:    return result;
---
>        14: 7186:    return result;
