846c846
<     #####:  275:	int j;
---
>         -:  275:	int j;
890,895c890,895
<     #####:  319:	if(config->bridges){
<     #####:  320:		for(i=0; i<config->bridge_count; i++){
<     #####:  321:			mosquitto__free(config->bridges[i].name);
<     #####:  322:			if(config->bridges[i].addresses){
<     #####:  323:				for(j=0; j<config->bridges[i].address_count; j++){
<     #####:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
---
>         -:  319:	if(config->bridges){
>         -:  320:		for(i=0; i<config->bridge_count; i++){
>         -:  321:			mosquitto__free(config->bridges[i].name);
>         -:  322:			if(config->bridges[i].addresses){
>         -:  323:				for(j=0; j<config->bridges[i].address_count; j++){
>         -:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
897c897
<     #####:  326:				mosquitto__free(config->bridges[i].addresses);
---
>         -:  326:				mosquitto__free(config->bridges[i].addresses);
899,911c899,911
<     #####:  328:			mosquitto__free(config->bridges[i].remote_clientid);
<     #####:  329:			mosquitto__free(config->bridges[i].remote_username);
<     #####:  330:			mosquitto__free(config->bridges[i].remote_password);
<     #####:  331:			mosquitto__free(config->bridges[i].local_clientid);
<     #####:  332:			mosquitto__free(config->bridges[i].local_username);
<     #####:  333:			mosquitto__free(config->bridges[i].local_password);
<     #####:  334:			if(config->bridges[i].topics){
<     #####:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
<     #####:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
<     #####:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
<     #####:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
<     #####:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
<     #####:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
---
>         -:  328:			mosquitto__free(config->bridges[i].remote_clientid);
>         -:  329:			mosquitto__free(config->bridges[i].remote_username);
>         -:  330:			mosquitto__free(config->bridges[i].remote_password);
>         -:  331:			mosquitto__free(config->bridges[i].local_clientid);
>         -:  332:			mosquitto__free(config->bridges[i].local_username);
>         -:  333:			mosquitto__free(config->bridges[i].local_password);
>         -:  334:			if(config->bridges[i].topics){
>         -:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
>         -:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
>         -:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
>         -:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
>         -:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
>         -:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
913c913
<     #####:  342:				mosquitto__free(config->bridges[i].topics);
---
>         -:  342:				mosquitto__free(config->bridges[i].topics);
915c915
<     #####:  344:			mosquitto__free(config->bridges[i].notification_topic);
---
>         -:  344:			mosquitto__free(config->bridges[i].notification_topic);
917,918c917,918
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
920,921c920,921
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
925c925
<     #####:  354:		mosquitto__free(config->bridges);
---
>         -:  354:		mosquitto__free(config->bridges);
945c945
<     #####:  275:	int j;
---
>         -:  275:	int j;
989,994c989,994
<     #####:  319:	if(config->bridges){
<     #####:  320:		for(i=0; i<config->bridge_count; i++){
<     #####:  321:			mosquitto__free(config->bridges[i].name);
<     #####:  322:			if(config->bridges[i].addresses){
<     #####:  323:				for(j=0; j<config->bridges[i].address_count; j++){
<     #####:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
---
>         -:  319:	if(config->bridges){
>         -:  320:		for(i=0; i<config->bridge_count; i++){
>         -:  321:			mosquitto__free(config->bridges[i].name);
>         -:  322:			if(config->bridges[i].addresses){
>         -:  323:				for(j=0; j<config->bridges[i].address_count; j++){
>         -:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
996c996
<     #####:  326:				mosquitto__free(config->bridges[i].addresses);
---
>         -:  326:				mosquitto__free(config->bridges[i].addresses);
998,1010c998,1010
<     #####:  328:			mosquitto__free(config->bridges[i].remote_clientid);
<     #####:  329:			mosquitto__free(config->bridges[i].remote_username);
<     #####:  330:			mosquitto__free(config->bridges[i].remote_password);
<     #####:  331:			mosquitto__free(config->bridges[i].local_clientid);
<     #####:  332:			mosquitto__free(config->bridges[i].local_username);
<     #####:  333:			mosquitto__free(config->bridges[i].local_password);
<     #####:  334:			if(config->bridges[i].topics){
<     #####:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
<     #####:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
<     #####:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
<     #####:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
<     #####:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
<     #####:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
---
>         -:  328:			mosquitto__free(config->bridges[i].remote_clientid);
>         -:  329:			mosquitto__free(config->bridges[i].remote_username);
>         -:  330:			mosquitto__free(config->bridges[i].remote_password);
>         -:  331:			mosquitto__free(config->bridges[i].local_clientid);
>         -:  332:			mosquitto__free(config->bridges[i].local_username);
>         -:  333:			mosquitto__free(config->bridges[i].local_password);
>         -:  334:			if(config->bridges[i].topics){
>         -:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
>         -:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
>         -:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
>         -:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
>         -:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
>         -:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
1012c1012
<     #####:  342:				mosquitto__free(config->bridges[i].topics);
---
>         -:  342:				mosquitto__free(config->bridges[i].topics);
1014c1014
<     #####:  344:			mosquitto__free(config->bridges[i].notification_topic);
---
>         -:  344:			mosquitto__free(config->bridges[i].notification_topic);
1016,1017c1016,1017
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
1019,1020c1019,1020
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
1024c1024
<     #####:  354:		mosquitto__free(config->bridges);
---
>         -:  354:		mosquitto__free(config->bridges);
1044c1044
<     #####:  275:	int j;
---
>         -:  275:	int j;
1088,1093c1088,1093
<     #####:  319:	if(config->bridges){
<     #####:  320:		for(i=0; i<config->bridge_count; i++){
<     #####:  321:			mosquitto__free(config->bridges[i].name);
<     #####:  322:			if(config->bridges[i].addresses){
<     #####:  323:				for(j=0; j<config->bridges[i].address_count; j++){
<     #####:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
---
>         -:  319:	if(config->bridges){
>         -:  320:		for(i=0; i<config->bridge_count; i++){
>         -:  321:			mosquitto__free(config->bridges[i].name);
>         -:  322:			if(config->bridges[i].addresses){
>         -:  323:				for(j=0; j<config->bridges[i].address_count; j++){
>         -:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
1095c1095
<     #####:  326:				mosquitto__free(config->bridges[i].addresses);
---
>         -:  326:				mosquitto__free(config->bridges[i].addresses);
1097,1109c1097,1109
<     #####:  328:			mosquitto__free(config->bridges[i].remote_clientid);
<     #####:  329:			mosquitto__free(config->bridges[i].remote_username);
<     #####:  330:			mosquitto__free(config->bridges[i].remote_password);
<     #####:  331:			mosquitto__free(config->bridges[i].local_clientid);
<     #####:  332:			mosquitto__free(config->bridges[i].local_username);
<     #####:  333:			mosquitto__free(config->bridges[i].local_password);
<     #####:  334:			if(config->bridges[i].topics){
<     #####:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
<     #####:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
<     #####:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
<     #####:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
<     #####:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
<     #####:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
---
>         -:  328:			mosquitto__free(config->bridges[i].remote_clientid);
>         -:  329:			mosquitto__free(config->bridges[i].remote_username);
>         -:  330:			mosquitto__free(config->bridges[i].remote_password);
>         -:  331:			mosquitto__free(config->bridges[i].local_clientid);
>         -:  332:			mosquitto__free(config->bridges[i].local_username);
>         -:  333:			mosquitto__free(config->bridges[i].local_password);
>         -:  334:			if(config->bridges[i].topics){
>         -:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
>         -:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
>         -:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
>         -:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
>         -:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
>         -:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
1111c1111
<     #####:  342:				mosquitto__free(config->bridges[i].topics);
---
>         -:  342:				mosquitto__free(config->bridges[i].topics);
1113c1113
<     #####:  344:			mosquitto__free(config->bridges[i].notification_topic);
---
>         -:  344:			mosquitto__free(config->bridges[i].notification_topic);
1115,1116c1115,1116
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
1118,1119c1118,1119
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
1123c1123
<     #####:  354:		mosquitto__free(config->bridges);
---
>         -:  354:		mosquitto__free(config->bridges);
1143c1143
<     #####:  275:	int j;
---
>         -:  275:	int j;
1187,1192c1187,1192
<     #####:  319:	if(config->bridges){
<     #####:  320:		for(i=0; i<config->bridge_count; i++){
<     #####:  321:			mosquitto__free(config->bridges[i].name);
<     #####:  322:			if(config->bridges[i].addresses){
<     #####:  323:				for(j=0; j<config->bridges[i].address_count; j++){
<     #####:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
---
>         -:  319:	if(config->bridges){
>         -:  320:		for(i=0; i<config->bridge_count; i++){
>         -:  321:			mosquitto__free(config->bridges[i].name);
>         -:  322:			if(config->bridges[i].addresses){
>         -:  323:				for(j=0; j<config->bridges[i].address_count; j++){
>         -:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
1194c1194
<     #####:  326:				mosquitto__free(config->bridges[i].addresses);
---
>         -:  326:				mosquitto__free(config->bridges[i].addresses);
1196,1208c1196,1208
<     #####:  328:			mosquitto__free(config->bridges[i].remote_clientid);
<     #####:  329:			mosquitto__free(config->bridges[i].remote_username);
<     #####:  330:			mosquitto__free(config->bridges[i].remote_password);
<     #####:  331:			mosquitto__free(config->bridges[i].local_clientid);
<     #####:  332:			mosquitto__free(config->bridges[i].local_username);
<     #####:  333:			mosquitto__free(config->bridges[i].local_password);
<     #####:  334:			if(config->bridges[i].topics){
<     #####:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
<     #####:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
<     #####:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
<     #####:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
<     #####:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
<     #####:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
---
>         -:  328:			mosquitto__free(config->bridges[i].remote_clientid);
>         -:  329:			mosquitto__free(config->bridges[i].remote_username);
>         -:  330:			mosquitto__free(config->bridges[i].remote_password);
>         -:  331:			mosquitto__free(config->bridges[i].local_clientid);
>         -:  332:			mosquitto__free(config->bridges[i].local_username);
>         -:  333:			mosquitto__free(config->bridges[i].local_password);
>         -:  334:			if(config->bridges[i].topics){
>         -:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
>         -:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
>         -:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
>         -:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
>         -:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
>         -:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
1210c1210
<     #####:  342:				mosquitto__free(config->bridges[i].topics);
---
>         -:  342:				mosquitto__free(config->bridges[i].topics);
1212c1212
<     #####:  344:			mosquitto__free(config->bridges[i].notification_topic);
---
>         -:  344:			mosquitto__free(config->bridges[i].notification_topic);
1214,1215c1214,1215
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
1217,1218c1217,1218
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
1222c1222
<     #####:  354:		mosquitto__free(config->bridges);
---
>         -:  354:		mosquitto__free(config->bridges);
1437c1437
<     #####:  519:	return config__check(config);
---
>         -:  519:	return config__check(config);
1576c1576
<     #####:  519:	return config__check(config);
---
>         -:  519:	return config__check(config);
1715c1715
<     #####:  519:	return config__check(config);
---
>         -:  519:	return config__check(config);
1854c1854
<     #####:  519:	return config__check(config);
---
>         -:  519:	return config__check(config);
2217,2220c2217,2220
<     #####:  691:	for(i=0; i<config->bridge_count; i++){
<     #####:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
<     #####:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  694:			return MOSQ_ERR_INVAL;
---
>         -:  691:	for(i=0; i<config->bridge_count; i++){
>         -:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
>         -:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  694:			return MOSQ_ERR_INVAL;
2223,2225c2223,2225
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
2227,2229c2227,2229
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
2353,2356c2353,2356
<     #####:  691:	for(i=0; i<config->bridge_count; i++){
<     #####:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
<     #####:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  694:			return MOSQ_ERR_INVAL;
---
>         -:  691:	for(i=0; i<config->bridge_count; i++){
>         -:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
>         -:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  694:			return MOSQ_ERR_INVAL;
2359,2361c2359,2361
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
2363,2365c2363,2365
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
2489,2492c2489,2492
<     #####:  691:	for(i=0; i<config->bridge_count; i++){
<     #####:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
<     #####:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  694:			return MOSQ_ERR_INVAL;
---
>         -:  691:	for(i=0; i<config->bridge_count; i++){
>         -:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
>         -:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  694:			return MOSQ_ERR_INVAL;
2495,2497c2495,2497
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
2499,2501c2499,2501
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
2625,2628c2625,2628
<     #####:  691:	for(i=0; i<config->bridge_count; i++){
<     #####:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
<     #####:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  694:			return MOSQ_ERR_INVAL;
---
>         -:  691:	for(i=0; i<config->bridge_count; i++){
>         -:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
>         -:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  694:			return MOSQ_ERR_INVAL;
2631,2633c2631,2633
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
2635,2637c2635,2637
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
2662,2665c2662,2665
<     #####:  727:	char *tmp_char;
<     #####:  728:	struct mosquitto__bridge *cur_bridge = NULL;
<     #####:  729:	struct mosquitto__bridge_topic *cur_topic;
<     #####:  730:	int len;
---
>         -:  727:	char *tmp_char;
>         -:  728:	struct mosquitto__bridge *cur_bridge = NULL;
>         -:  729:	struct mosquitto__bridge_topic *cur_topic;
>         -:  730:	int len;
2694,2697c2694,2697
<     #####:  759:					if(reload) continue; // FIXME
<     #####:  760:					if(!cur_bridge || cur_bridge->addresses){
<     #####:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  762:						return MOSQ_ERR_INVAL;
---
>         -:  759:					if(reload) continue; // FIXME
>         -:  760:					if(!cur_bridge || cur_bridge->addresses){
>         -:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  762:						return MOSQ_ERR_INVAL;
2699,2700c2699,2700
<     #####:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
<     #####:  765:						if (token[0] == '#'){
---
>         -:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
>         -:  765:						if (token[0] == '#'){
2703,2707c2703,2707
<     #####:  768:						cur_bridge->address_count++;
<     #####:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
<     #####:  770:						if(!cur_bridge->addresses){
<     #####:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####:  772:							return MOSQ_ERR_NOMEM;
---
>         -:  768:						cur_bridge->address_count++;
>         -:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
>         -:  770:						if(!cur_bridge->addresses){
>         -:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -:  772:							return MOSQ_ERR_NOMEM;
2709c2709
<     #####:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
---
>         -:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
2711c2711
<     #####:  776:					for(i=0; i<cur_bridge->address_count; i++){
---
>         -:  776:					for(i=0; i<cur_bridge->address_count; i++){
2716,2717c2716,2717
<     #####:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
<     #####:  782:						if(tmp_char){
---
>         -:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
>         -:  782:						if(tmp_char){
2720c2720
<     #####:  785:							tmp_char[0] = '\0';
---
>         -:  785:							tmp_char[0] = '\0';
2723,2726c2723,2726
<     #####:  788:							tmp_int = atoi(&tmp_char[1]);
<     #####:  789:							if(tmp_int < 1 || tmp_int > 65535){
<     #####:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
<     #####:  791:								return MOSQ_ERR_INVAL;
---
>         -:  788:							tmp_int = atoi(&tmp_char[1]);
>         -:  789:							if(tmp_int < 1 || tmp_int > 65535){
>         -:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
>         -:  791:								return MOSQ_ERR_INVAL;
2728c2728
<     #####:  793:							cur_bridge->addresses[i].port = tmp_int;
---
>         -:  793:							cur_bridge->addresses[i].port = tmp_int;
2730c2730
<     #####:  795:							cur_bridge->addresses[i].port = 1883;
---
>         -:  795:							cur_bridge->addresses[i].port = 1883;
2737,2738c2737,2738
<     #####:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
<     #####:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
---
>         -:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
>         -:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
2740,2742c2740,2742
<     #####:  805:					if(cur_bridge->address_count == 0){
<     #####:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
<     #####:  807:						return MOSQ_ERR_INVAL;
---
>         -:  805:					if(cur_bridge->address_count == 0){
>         -:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
>         -:  807:						return MOSQ_ERR_INVAL;
2745c2745
<         -:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
2842,2845c2842,2845
<     #####:  907:					if(reload) continue; // FIXME
<     #####:  908:					if(!cur_bridge){
<     #####:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  910:						return MOSQ_ERR_INVAL;
---
>         -:  907:					if(reload) continue; // FIXME
>         -:  908:					if(!cur_bridge){
>         -:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  910:						return MOSQ_ERR_INVAL;
2847c2847
<     #####:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
2849c2849
<         -:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
2853,2856c2853,2856
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
2859,2861c2859,2861
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
2864c2864
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
2866c2866
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
2870,2873c2870,2873
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
2876,2878c2876,2878
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
2881c2881
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
2883c2883
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
2887,2890c2887,2890
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
2893,2895c2893,2895
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
2898c2898
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
2900c2900
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
2904,2907c2904,2907
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
2909,2911c2909,2911
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
2913c2913
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
2915c2915
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
2919,2922c2919,2922
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
2924,2926c2924,2926
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
2929c2929
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
2933,2936c2933,2936
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
2939,2941c2939,2941
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
2944c2944
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
2946c2946
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
2950,2953c2950,2953
<     #####: 1015:					if(reload) continue; // FIXME
<     #####: 1016:					if(!cur_bridge){
<     #####: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1018:						return MOSQ_ERR_INVAL;
---
>         -: 1015:					if(reload) continue; // FIXME
>         -: 1016:					if(!cur_bridge){
>         -: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1018:						return MOSQ_ERR_INVAL;
2955,2960c2955,2960
<     #####: 1020:					token = strtok_r(NULL, "", &saveptr);
<     #####: 1021:					if(token){
<     #####: 1022:						if(!strcmp(token, "mqttv31")){
<     #####: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
<     #####: 1024:						}else if(!strcmp(token, "mqttv311")){
<     #####: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
---
>         -: 1020:					token = strtok_r(NULL, "", &saveptr);
>         -: 1021:					if(token){
>         -: 1022:						if(!strcmp(token, "mqttv31")){
>         -: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
>         -: 1024:						}else if(!strcmp(token, "mqttv311")){
>         -: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
2962,2963c2962,2963
<     #####: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
<     #####: 1028:							return MOSQ_ERR_INVAL;
---
>         -: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
>         -: 1028:							return MOSQ_ERR_INVAL;
2966,2967c2966,2967
<     #####: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
<     #####: 1032:						return MOSQ_ERR_INVAL;
---
>         -: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
>         -: 1032:						return MOSQ_ERR_INVAL;
2970c2970
<         -: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
2974,2977c2974,2977
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
2979,2981c2979,2981
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
2983c2983
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
2985c2985
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
2989,2992c2989,2992
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
2994c2994
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
2996c2996
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
3039,3042c3039,3042
<     #####: 1104:					if(reload) continue; // FIXME
<     #####: 1105:					if(!cur_bridge){
<     #####: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1107:						return MOSQ_ERR_INVAL;
---
>         -: 1104:					if(reload) continue; // FIXME
>         -: 1105:					if(!cur_bridge){
>         -: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1107:						return MOSQ_ERR_INVAL;
3044c3044
<     #####: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
3046c3046
<         -: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3050,3053c3050,3053
<     #####: 1115:					if(reload) continue; // FIXME
<     #####: 1116:					if(!cur_bridge){
<     #####: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1118:						return MOSQ_ERR_INVAL;
---
>         -: 1115:					if(reload) continue; // FIXME
>         -: 1116:					if(!cur_bridge){
>         -: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1118:						return MOSQ_ERR_INVAL;
3055c3055
<     #####: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
3057c3057
<         -: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3067,3069c3067,3069
<     #####: 1132:					if(reload) continue; // FIXME
<     #####: 1133:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1134:					if(token){
---
>         -: 1132:					if(reload) continue; // FIXME
>         -: 1133:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1134:					if(token){
3071,3074c3071,3074
<     #####: 1136:						for(i=0; i<config->bridge_count; i++){
<     #####: 1137:							if(!strcmp(config->bridges[i].name, token)){
<     #####: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
<     #####: 1139:								return MOSQ_ERR_INVAL;
---
>         -: 1136:						for(i=0; i<config->bridge_count; i++){
>         -: 1137:							if(!strcmp(config->bridges[i].name, token)){
>         -: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
>         -: 1139:								return MOSQ_ERR_INVAL;
3078,3082c3078,3082
<     #####: 1143:						config->bridge_count++;
<     #####: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
<     #####: 1145:						if(!config->bridges){
<     #####: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1147:							return MOSQ_ERR_NOMEM;
---
>         -: 1143:						config->bridge_count++;
>         -: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
>         -: 1145:						if(!config->bridges){
>         -: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1147:							return MOSQ_ERR_NOMEM;
3084,3089c3084,3089
<     #####: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
<     #####: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
<     #####: 1151:						cur_bridge->name = mosquitto__strdup(token);
<     #####: 1152:						if(!cur_bridge->name){
<     #####: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1154:							return MOSQ_ERR_NOMEM;
---
>         -: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
>         -: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
>         -: 1151:						cur_bridge->name = mosquitto__strdup(token);
>         -: 1152:						if(!cur_bridge->name){
>         -: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1154:							return MOSQ_ERR_NOMEM;
3091,3101c3091,3101
<     #####: 1156:						cur_bridge->keepalive = 60;
<     #####: 1157:						cur_bridge->notifications = true;
<     #####: 1158:						cur_bridge->notifications_local_only = false;
<     #####: 1159:						cur_bridge->start_type = bst_automatic;
<     #####: 1160:						cur_bridge->idle_timeout = 60;
<     #####: 1161:						cur_bridge->restart_timeout = 30;
<     #####: 1162:						cur_bridge->threshold = 10;
<     #####: 1163:						cur_bridge->try_private = true;
<     #####: 1164:						cur_bridge->attempt_unsubscribe = true;
<     #####: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
<     #####: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
---
>         -: 1156:						cur_bridge->keepalive = 60;
>         -: 1157:						cur_bridge->notifications = true;
>         -: 1158:						cur_bridge->notifications_local_only = false;
>         -: 1159:						cur_bridge->start_type = bst_automatic;
>         -: 1160:						cur_bridge->idle_timeout = 60;
>         -: 1161:						cur_bridge->restart_timeout = 30;
>         -: 1162:						cur_bridge->threshold = 10;
>         -: 1163:						cur_bridge->try_private = true;
>         -: 1164:						cur_bridge->attempt_unsubscribe = true;
>         -: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
>         -: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
3103,3104c3103,3104
<     #####: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
<     #####: 1169:						return MOSQ_ERR_INVAL;
---
>         -: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
>         -: 1169:						return MOSQ_ERR_INVAL;
3107c3107
<         -: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3127,3130c3127,3130
<     #####: 1192:					if(reload) continue; // FIXME
<     #####: 1193:					if(!cur_bridge){
<     #####: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1195:						return MOSQ_ERR_INVAL;
---
>         -: 1192:					if(reload) continue; // FIXME
>         -: 1193:					if(!cur_bridge){
>         -: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1195:						return MOSQ_ERR_INVAL;
3132,3135c3132,3135
<     #####: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1198:					if(cur_bridge->idle_timeout < 1){
<     #####: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
<     #####: 1200:						cur_bridge->idle_timeout = 1;
---
>         -: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1198:					if(cur_bridge->idle_timeout < 1){
>         -: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
>         -: 1200:						cur_bridge->idle_timeout = 1;
3138c3138
<         -: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3172,3175c3172,3175
<     #####: 1237:					if(reload) continue; // FIXME
<     #####: 1238:					if(!cur_bridge){
<     #####: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1240:						return MOSQ_ERR_INVAL;
---
>         -: 1237:					if(reload) continue; // FIXME
>         -: 1238:					if(!cur_bridge){
>         -: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1240:						return MOSQ_ERR_INVAL;
3177,3180c3177,3180
<     #####: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1243:					if(cur_bridge->keepalive < 5){
<     #####: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
<     #####: 1245:						cur_bridge->keepalive = 5;
---
>         -: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1243:					if(cur_bridge->keepalive < 5){
>         -: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
>         -: 1245:						cur_bridge->keepalive = 5;
3183c3183
<         -: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3244,3247c3244,3247
<     #####: 1309:					if(reload) continue; // FIXME
<     #####: 1310:					if(!cur_bridge){
<     #####: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1312:						return MOSQ_ERR_INVAL;
---
>         -: 1309:					if(reload) continue; // FIXME
>         -: 1310:					if(!cur_bridge){
>         -: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1312:						return MOSQ_ERR_INVAL;
3249c3249
<     #####: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
3251c3251
<         -: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3255,3258c3255,3258
<     #####: 1320:					if(reload) continue; // FIXME
<     #####: 1321:					if(!cur_bridge){
<     #####: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1323:						return MOSQ_ERR_INVAL;
---
>         -: 1320:					if(reload) continue; // FIXME
>         -: 1321:					if(!cur_bridge){
>         -: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1323:						return MOSQ_ERR_INVAL;
3260c3260
<     #####: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
3262c3262
<         -: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3266,3269c3266,3269
<     #####: 1331:					if(reload) continue; // FIXME
<     #####: 1332:					if(!cur_bridge){
<     #####: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1334:						return MOSQ_ERR_INVAL;
---
>         -: 1331:					if(reload) continue; // FIXME
>         -: 1332:					if(!cur_bridge){
>         -: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1334:						return MOSQ_ERR_INVAL;
3271c3271
<     #####: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
3273c3273
<         -: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3464,3467c3464,3467
<     #####: 1529:					if(reload) continue; // FIXME
<     #####: 1530:					if(!cur_bridge){
<     #####: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1532:						return MOSQ_ERR_INVAL;
---
>         -: 1529:					if(reload) continue; // FIXME
>         -: 1530:					if(!cur_bridge){
>         -: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1532:						return MOSQ_ERR_INVAL;
3469c3469
<     #####: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
3471c3471
<         -: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3475,3478c3475,3478
<     #####: 1540:					if(reload) continue; // FIXME
<     #####: 1541:					if(!cur_bridge){
<     #####: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
<     #####: 1543:						return MOSQ_ERR_INVAL;
---
>         -: 1540:					if(reload) continue; // FIXME
>         -: 1541:					if(!cur_bridge){
>         -: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
>         -: 1543:						return MOSQ_ERR_INVAL;
3480c3480
<     #####: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
3482c3482
<         -: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3486,3489c3486,3489
<     #####: 1551:					if(reload) continue; // FIXME
<     #####: 1552:					if(!cur_bridge){
<     #####: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1554:						return MOSQ_ERR_INVAL;
---
>         -: 1551:					if(reload) continue; // FIXME
>         -: 1552:					if(!cur_bridge){
>         -: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1554:						return MOSQ_ERR_INVAL;
3491c3491
<     #####: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
3493c3493
<         -: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3497,3500c3497,3500
<     #####: 1562:					if(reload) continue; // FIXME
<     #####: 1563:					if(!cur_bridge){
<     #####: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1565:						return MOSQ_ERR_INVAL;
---
>         -: 1562:					if(reload) continue; // FIXME
>         -: 1563:					if(!cur_bridge){
>         -: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1565:						return MOSQ_ERR_INVAL;
3502c3502
<     #####: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
3504c3504
<         -: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3624,3627c3624,3627
<     #####: 1689:					if(reload) continue; // FIXME
<     #####: 1690:					if(!cur_bridge){
<     #####: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1692:						return MOSQ_ERR_INVAL;
---
>         -: 1689:					if(reload) continue; // FIXME
>         -: 1690:					if(!cur_bridge){
>         -: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1692:						return MOSQ_ERR_INVAL;
3629,3632c3629,3632
<     #####: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1695:					if(cur_bridge->restart_timeout < 1){
<     #####: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
<     #####: 1697:						cur_bridge->restart_timeout = 1;
---
>         -: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1695:					if(cur_bridge->restart_timeout < 1){
>         -: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
>         -: 1697:						cur_bridge->restart_timeout = 1;
3635c3635
<         -: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3641,3644c3641,3644
<     #####: 1706:					if(reload) continue; // FIXME
<     #####: 1707:					if(!cur_bridge){
<     #####: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1709:						return MOSQ_ERR_INVAL;
---
>         -: 1706:					if(reload) continue; // FIXME
>         -: 1707:					if(!cur_bridge){
>         -: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1709:						return MOSQ_ERR_INVAL;
3646c3646
<     #####: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
3648c3648
<         -: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3654,3657c3654,3657
<     #####: 1719:					if(reload) continue; // FIXME
<     #####: 1720:					if(!cur_bridge){
<     #####: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1722:						return MOSQ_ERR_INVAL;
---
>         -: 1719:					if(reload) continue; // FIXME
>         -: 1720:					if(!cur_bridge){
>         -: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1722:						return MOSQ_ERR_INVAL;
3659,3669c3659,3669
<     #####: 1724:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1725:					if(token){
<     #####: 1726:						if(!strcmp(token, "automatic")){
<     #####: 1727:							cur_bridge->start_type = bst_automatic;
<     #####: 1728:						}else if(!strcmp(token, "lazy")){
<     #####: 1729:							cur_bridge->start_type = bst_lazy;
<     #####: 1730:						}else if(!strcmp(token, "manual")){
<     #####: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
<     #####: 1732:							return MOSQ_ERR_INVAL;
<     #####: 1733:						}else if(!strcmp(token, "once")){
<     #####: 1734:							cur_bridge->start_type = bst_once;
---
>         -: 1724:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1725:					if(token){
>         -: 1726:						if(!strcmp(token, "automatic")){
>         -: 1727:							cur_bridge->start_type = bst_automatic;
>         -: 1728:						}else if(!strcmp(token, "lazy")){
>         -: 1729:							cur_bridge->start_type = bst_lazy;
>         -: 1730:						}else if(!strcmp(token, "manual")){
>         -: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
>         -: 1732:							return MOSQ_ERR_INVAL;
>         -: 1733:						}else if(!strcmp(token, "once")){
>         -: 1734:							cur_bridge->start_type = bst_once;
3671,3672c3671,3672
<     #####: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
<     #####: 1737:							return MOSQ_ERR_INVAL;
---
>         -: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
>         -: 1737:							return MOSQ_ERR_INVAL;
3675,3676c3675,3676
<     #####: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
<     #####: 1741:						return MOSQ_ERR_INVAL;
---
>         -: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
>         -: 1741:						return MOSQ_ERR_INVAL;
3679c3679
<         -: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3707,3710c3707,3710
<     #####: 1772:					if(reload) continue; // FIXME
<     #####: 1773:					if(!cur_bridge){
<     #####: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1775:						return MOSQ_ERR_INVAL;
---
>         -: 1772:					if(reload) continue; // FIXME
>         -: 1773:					if(!cur_bridge){
>         -: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1775:						return MOSQ_ERR_INVAL;
3712,3715c3712,3715
<     #####: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1778:					if(cur_bridge->threshold < 1){
<     #####: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
<     #####: 1780:						cur_bridge->threshold = 1;
---
>         -: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1778:					if(cur_bridge->threshold < 1){
>         -: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
>         -: 1780:						cur_bridge->threshold = 1;
3718c3718
<         -: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3729,3732c3729,3732
<     #####: 1794:					if(reload) continue; // FIXME
<     #####: 1795:					if(!cur_bridge){
<     #####: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1797:						return MOSQ_ERR_INVAL;
---
>         -: 1794:					if(reload) continue; // FIXME
>         -: 1795:					if(!cur_bridge){
>         -: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1797:						return MOSQ_ERR_INVAL;
3734,3741c3734,3741
<     #####: 1799:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1800:					if(token){
<     #####: 1801:						cur_bridge->topic_count++;
<     #####: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
<     #####: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
<     #####: 1804:						if(!cur_bridge->topics){
<     #####: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1806:							return MOSQ_ERR_NOMEM;
---
>         -: 1799:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1800:					if(token){
>         -: 1801:						cur_bridge->topic_count++;
>         -: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
>         -: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
>         -: 1804:						if(!cur_bridge->topics){
>         -: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1806:							return MOSQ_ERR_NOMEM;
3743,3745c3743,3745
<     #####: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
<     #####: 1809:						if(!strcmp(token, "\"\"")){
<     #####: 1810:							cur_topic->topic = NULL;
---
>         -: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
>         -: 1809:						if(!strcmp(token, "\"\"")){
>         -: 1810:							cur_topic->topic = NULL;
3747,3750c3747,3750
<     #####: 1812:							cur_topic->topic = mosquitto__strdup(token);
<     #####: 1813:							if(!cur_topic->topic){
<     #####: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1815:								return MOSQ_ERR_NOMEM;
---
>         -: 1812:							cur_topic->topic = mosquitto__strdup(token);
>         -: 1813:							if(!cur_topic->topic){
>         -: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1815:								return MOSQ_ERR_NOMEM;
3753,3756c3753,3756
<     #####: 1818:						cur_topic->direction = bd_out;
<     #####: 1819:						cur_topic->qos = 0;
<     #####: 1820:						cur_topic->local_prefix = NULL;
<     #####: 1821:						cur_topic->remote_prefix = NULL;
---
>         -: 1818:						cur_topic->direction = bd_out;
>         -: 1819:						cur_topic->qos = 0;
>         -: 1820:						cur_topic->local_prefix = NULL;
>         -: 1821:						cur_topic->remote_prefix = NULL;
3758,3759c3758,3759
<     #####: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
<     #####: 1824:						return MOSQ_ERR_INVAL;
---
>         -: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
>         -: 1824:						return MOSQ_ERR_INVAL;
3761,3768c3761,3768
<     #####: 1826:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1827:					if(token){
<     #####: 1828:						if(!strcasecmp(token, "out")){
<     #####: 1829:							cur_topic->direction = bd_out;
<     #####: 1830:						}else if(!strcasecmp(token, "in")){
<     #####: 1831:							cur_topic->direction = bd_in;
<     #####: 1832:						}else if(!strcasecmp(token, "both")){
<     #####: 1833:							cur_topic->direction = bd_both;
---
>         -: 1826:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1827:					if(token){
>         -: 1828:						if(!strcasecmp(token, "out")){
>         -: 1829:							cur_topic->direction = bd_out;
>         -: 1830:						}else if(!strcasecmp(token, "in")){
>         -: 1831:							cur_topic->direction = bd_in;
>         -: 1832:						}else if(!strcasecmp(token, "both")){
>         -: 1833:							cur_topic->direction = bd_both;
3770,3771c3770,3771
<     #####: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
<     #####: 1836:							return MOSQ_ERR_INVAL;
---
>         -: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
>         -: 1836:							return MOSQ_ERR_INVAL;
3773,3776c3773,3776
<     #####: 1838:						token = strtok_r(NULL, " ", &saveptr);
<     #####: 1839:						if(token){
<     #####: 1840:							if (token[0] == '#'){
<     #####: 1841:								strtok_r(NULL, "", &saveptr);
---
>         -: 1838:						token = strtok_r(NULL, " ", &saveptr);
>         -: 1839:						if(token){
>         -: 1840:							if (token[0] == '#'){
>         -: 1841:								strtok_r(NULL, "", &saveptr);
3778,3781c3778,3781
<     #####: 1843:							cur_topic->qos = atoi(token);
<     #####: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
<     #####: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
<     #####: 1846:								return MOSQ_ERR_INVAL;
---
>         -: 1843:							cur_topic->qos = atoi(token);
>         -: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
>         -: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
>         -: 1846:								return MOSQ_ERR_INVAL;
3784,3790c3784,3790
<     #####: 1849:							token = strtok_r(NULL, " ", &saveptr);
<     #####: 1850:							if(token){
<     #####: 1851:								cur_bridge->topic_remapping = true;
<     #####: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1853:									cur_topic->local_prefix = NULL;
<     #####: 1854:									if (token[0] == '#'){
<     #####: 1855:										strtok_r(NULL, "", &saveptr);
---
>         -: 1849:							token = strtok_r(NULL, " ", &saveptr);
>         -: 1850:							if(token){
>         -: 1851:								cur_bridge->topic_remapping = true;
>         -: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1853:									cur_topic->local_prefix = NULL;
>         -: 1854:									if (token[0] == '#'){
>         -: 1855:										strtok_r(NULL, "", &saveptr);
3793,3795c3793,3795
<     #####: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
<     #####: 1860:										return MOSQ_ERR_INVAL;
---
>         -: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
>         -: 1860:										return MOSQ_ERR_INVAL;
3797,3800c3797,3800
<     #####: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
<     #####: 1863:									if(!cur_topic->local_prefix){
<     #####: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1865:										return MOSQ_ERR_NOMEM;
---
>         -: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
>         -: 1863:									if(!cur_topic->local_prefix){
>         -: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1865:										return MOSQ_ERR_NOMEM;
3804,3807c3804,3807
<     #####: 1869:								token = strtok_r(NULL, " ", &saveptr);
<     #####: 1870:								if(token){
<     #####: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1872:										cur_topic->remote_prefix = NULL;
---
>         -: 1869:								token = strtok_r(NULL, " ", &saveptr);
>         -: 1870:								if(token){
>         -: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1872:										cur_topic->remote_prefix = NULL;
3809,3811c3809,3811
<     #####: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
<     #####: 1876:											return MOSQ_ERR_INVAL;
---
>         -: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
>         -: 1876:											return MOSQ_ERR_INVAL;
3813,3816c3813,3816
<     #####: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
<     #####: 1879:										if(!cur_topic->remote_prefix){
<     #####: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1881:											return MOSQ_ERR_NOMEM;
---
>         -: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
>         -: 1879:										if(!cur_topic->remote_prefix){
>         -: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1881:											return MOSQ_ERR_NOMEM;
3823,3824c3823,3824
<     #####: 1888:					if(cur_topic->topic == NULL &&
<     #####: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
---
>         -: 1888:					if(cur_topic->topic == NULL &&
>         -: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
3826,3827c3826,3827
<     #####: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
<     #####: 1892:						return MOSQ_ERR_INVAL;
---
>         -: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
>         -: 1892:						return MOSQ_ERR_INVAL;
3829,3835c3829,3835
<     #####: 1894:					if(cur_topic->local_prefix){
<     #####: 1895:						if(cur_topic->topic){
<     #####: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
<     #####: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
<     #####: 1898:							if(!cur_topic->local_topic){
<     #####: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1900:								return MOSQ_ERR_NOMEM;
---
>         -: 1894:					if(cur_topic->local_prefix){
>         -: 1895:						if(cur_topic->topic){
>         -: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
>         -: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
>         -: 1898:							if(!cur_topic->local_topic){
>         -: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1900:								return MOSQ_ERR_NOMEM;
3837,3838c3837,3838
<     #####: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
<     #####: 1903:							cur_topic->local_topic[len] = '\0';
---
>         -: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
>         -: 1903:							cur_topic->local_topic[len] = '\0';
3840,3843c3840,3843
<     #####: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
<     #####: 1906:							if(!cur_topic->local_topic){
<     #####: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1908:								return MOSQ_ERR_NOMEM;
---
>         -: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
>         -: 1906:							if(!cur_topic->local_topic){
>         -: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1908:								return MOSQ_ERR_NOMEM;
3847,3850c3847,3850
<     #####: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1913:						if(!cur_topic->local_topic){
<     #####: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1915:							return MOSQ_ERR_NOMEM;
---
>         -: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1913:						if(!cur_topic->local_topic){
>         -: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1915:							return MOSQ_ERR_NOMEM;
3854,3860c3854,3860
<     #####: 1919:					if(cur_topic->remote_prefix){
<     #####: 1920:						if(cur_topic->topic){
<     #####: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
<     #####: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
<     #####: 1923:							if(!cur_topic->remote_topic){
<     #####: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1925:								return MOSQ_ERR_NOMEM;
---
>         -: 1919:					if(cur_topic->remote_prefix){
>         -: 1920:						if(cur_topic->topic){
>         -: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
>         -: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
>         -: 1923:							if(!cur_topic->remote_topic){
>         -: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1925:								return MOSQ_ERR_NOMEM;
3862,3863c3862,3863
<     #####: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
<     #####: 1928:							cur_topic->remote_topic[len] = '\0';
---
>         -: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
>         -: 1928:							cur_topic->remote_topic[len] = '\0';
3865,3868c3865,3868
<     #####: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
<     #####: 1931:							if(!cur_topic->remote_topic){
<     #####: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1933:								return MOSQ_ERR_NOMEM;
---
>         -: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
>         -: 1931:							if(!cur_topic->remote_topic){
>         -: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1933:								return MOSQ_ERR_NOMEM;
3872,3875c3872,3875
<     #####: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1938:						if(!cur_topic->remote_topic){
<     #####: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1940:							return MOSQ_ERR_NOMEM;
---
>         -: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1938:						if(!cur_topic->remote_topic){
>         -: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1940:							return MOSQ_ERR_NOMEM;
3879c3879
<         -: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3883,3886c3883,3886
<     #####: 1948:					if(reload) continue; // FIXME
<     #####: 1949:					if(!cur_bridge){
<     #####: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1951:						return MOSQ_ERR_INVAL;
---
>         -: 1948:					if(reload) continue; // FIXME
>         -: 1949:					if(!cur_bridge){
>         -: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1951:						return MOSQ_ERR_INVAL;
3888c3888
<     #####: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
3890c3890
<         -: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3916,3919c3916,3919
<     #####: 1981:					if(reload) continue; // FIXME
<     #####: 1982:					if(!cur_bridge){
<     #####: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1984:						return MOSQ_ERR_INVAL;
---
>         -: 1981:					if(reload) continue; // FIXME
>         -: 1982:					if(!cur_bridge){
>         -: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1984:						return MOSQ_ERR_INVAL;
3921c3921
<     #####: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
3923c3923
<         -: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
3954,3957c3954,3957
<     #####:  727:	char *tmp_char;
<     #####:  728:	struct mosquitto__bridge *cur_bridge = NULL;
<     #####:  729:	struct mosquitto__bridge_topic *cur_topic;
<     #####:  730:	int len;
---
>         -:  727:	char *tmp_char;
>         -:  728:	struct mosquitto__bridge *cur_bridge = NULL;
>         -:  729:	struct mosquitto__bridge_topic *cur_topic;
>         -:  730:	int len;
3986,3989c3986,3989
<     #####:  759:					if(reload) continue; // FIXME
<     #####:  760:					if(!cur_bridge || cur_bridge->addresses){
<     #####:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  762:						return MOSQ_ERR_INVAL;
---
>         -:  759:					if(reload) continue; // FIXME
>         -:  760:					if(!cur_bridge || cur_bridge->addresses){
>         -:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  762:						return MOSQ_ERR_INVAL;
3991,3992c3991,3992
<     #####:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
<     #####:  765:						if (token[0] == '#'){
---
>         -:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
>         -:  765:						if (token[0] == '#'){
3995,3999c3995,3999
<     #####:  768:						cur_bridge->address_count++;
<     #####:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
<     #####:  770:						if(!cur_bridge->addresses){
<     #####:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####:  772:							return MOSQ_ERR_NOMEM;
---
>         -:  768:						cur_bridge->address_count++;
>         -:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
>         -:  770:						if(!cur_bridge->addresses){
>         -:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -:  772:							return MOSQ_ERR_NOMEM;
4001c4001
<     #####:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
---
>         -:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
4003c4003
<     #####:  776:					for(i=0; i<cur_bridge->address_count; i++){
---
>         -:  776:					for(i=0; i<cur_bridge->address_count; i++){
4008,4009c4008,4009
<     #####:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
<     #####:  782:						if(tmp_char){
---
>         -:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
>         -:  782:						if(tmp_char){
4012c4012
<     #####:  785:							tmp_char[0] = '\0';
---
>         -:  785:							tmp_char[0] = '\0';
4015,4018c4015,4018
<     #####:  788:							tmp_int = atoi(&tmp_char[1]);
<     #####:  789:							if(tmp_int < 1 || tmp_int > 65535){
<     #####:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
<     #####:  791:								return MOSQ_ERR_INVAL;
---
>         -:  788:							tmp_int = atoi(&tmp_char[1]);
>         -:  789:							if(tmp_int < 1 || tmp_int > 65535){
>         -:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
>         -:  791:								return MOSQ_ERR_INVAL;
4020c4020
<     #####:  793:							cur_bridge->addresses[i].port = tmp_int;
---
>         -:  793:							cur_bridge->addresses[i].port = tmp_int;
4022c4022
<     #####:  795:							cur_bridge->addresses[i].port = 1883;
---
>         -:  795:							cur_bridge->addresses[i].port = 1883;
4029,4030c4029,4030
<     #####:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
<     #####:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
---
>         -:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
>         -:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
4032,4034c4032,4034
<     #####:  805:					if(cur_bridge->address_count == 0){
<     #####:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
<     #####:  807:						return MOSQ_ERR_INVAL;
---
>         -:  805:					if(cur_bridge->address_count == 0){
>         -:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
>         -:  807:						return MOSQ_ERR_INVAL;
4037c4037
<         -:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4134,4137c4134,4137
<     #####:  907:					if(reload) continue; // FIXME
<     #####:  908:					if(!cur_bridge){
<     #####:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  910:						return MOSQ_ERR_INVAL;
---
>         -:  907:					if(reload) continue; // FIXME
>         -:  908:					if(!cur_bridge){
>         -:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  910:						return MOSQ_ERR_INVAL;
4139c4139
<     #####:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
4141c4141
<         -:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4145,4148c4145,4148
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
4151,4153c4151,4153
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
4156c4156
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
4158c4158
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4162,4165c4162,4165
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
4168,4170c4168,4170
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
4173c4173
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
4175c4175
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4179,4182c4179,4182
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
4185,4187c4185,4187
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
4190c4190
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
4192c4192
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4196,4199c4196,4199
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
4201,4203c4201,4203
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
4205c4205
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
4207c4207
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
4211,4214c4211,4214
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
4216,4218c4216,4218
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
4221c4221
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
4225,4228c4225,4228
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
4231,4233c4231,4233
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
4236c4236
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
4238c4238
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4242,4245c4242,4245
<     #####: 1015:					if(reload) continue; // FIXME
<     #####: 1016:					if(!cur_bridge){
<     #####: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1018:						return MOSQ_ERR_INVAL;
---
>         -: 1015:					if(reload) continue; // FIXME
>         -: 1016:					if(!cur_bridge){
>         -: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1018:						return MOSQ_ERR_INVAL;
4247,4252c4247,4252
<     #####: 1020:					token = strtok_r(NULL, "", &saveptr);
<     #####: 1021:					if(token){
<     #####: 1022:						if(!strcmp(token, "mqttv31")){
<     #####: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
<     #####: 1024:						}else if(!strcmp(token, "mqttv311")){
<     #####: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
---
>         -: 1020:					token = strtok_r(NULL, "", &saveptr);
>         -: 1021:					if(token){
>         -: 1022:						if(!strcmp(token, "mqttv31")){
>         -: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
>         -: 1024:						}else if(!strcmp(token, "mqttv311")){
>         -: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
4254,4255c4254,4255
<     #####: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
<     #####: 1028:							return MOSQ_ERR_INVAL;
---
>         -: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
>         -: 1028:							return MOSQ_ERR_INVAL;
4258,4259c4258,4259
<     #####: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
<     #####: 1032:						return MOSQ_ERR_INVAL;
---
>         -: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
>         -: 1032:						return MOSQ_ERR_INVAL;
4262c4262
<         -: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4266,4269c4266,4269
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
4271,4273c4271,4273
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
4275c4275
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
4277c4277
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
4281,4284c4281,4284
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
4286c4286
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
4288c4288
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4331,4334c4331,4334
<     #####: 1104:					if(reload) continue; // FIXME
<     #####: 1105:					if(!cur_bridge){
<     #####: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1107:						return MOSQ_ERR_INVAL;
---
>         -: 1104:					if(reload) continue; // FIXME
>         -: 1105:					if(!cur_bridge){
>         -: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1107:						return MOSQ_ERR_INVAL;
4336c4336
<     #####: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
4338c4338
<         -: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4342,4345c4342,4345
<     #####: 1115:					if(reload) continue; // FIXME
<     #####: 1116:					if(!cur_bridge){
<     #####: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1118:						return MOSQ_ERR_INVAL;
---
>         -: 1115:					if(reload) continue; // FIXME
>         -: 1116:					if(!cur_bridge){
>         -: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1118:						return MOSQ_ERR_INVAL;
4347c4347
<     #####: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
4349c4349
<         -: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4359,4361c4359,4361
<     #####: 1132:					if(reload) continue; // FIXME
<     #####: 1133:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1134:					if(token){
---
>         -: 1132:					if(reload) continue; // FIXME
>         -: 1133:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1134:					if(token){
4363,4366c4363,4366
<     #####: 1136:						for(i=0; i<config->bridge_count; i++){
<     #####: 1137:							if(!strcmp(config->bridges[i].name, token)){
<     #####: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
<     #####: 1139:								return MOSQ_ERR_INVAL;
---
>         -: 1136:						for(i=0; i<config->bridge_count; i++){
>         -: 1137:							if(!strcmp(config->bridges[i].name, token)){
>         -: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
>         -: 1139:								return MOSQ_ERR_INVAL;
4370,4374c4370,4374
<     #####: 1143:						config->bridge_count++;
<     #####: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
<     #####: 1145:						if(!config->bridges){
<     #####: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1147:							return MOSQ_ERR_NOMEM;
---
>         -: 1143:						config->bridge_count++;
>         -: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
>         -: 1145:						if(!config->bridges){
>         -: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1147:							return MOSQ_ERR_NOMEM;
4376,4381c4376,4381
<     #####: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
<     #####: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
<     #####: 1151:						cur_bridge->name = mosquitto__strdup(token);
<     #####: 1152:						if(!cur_bridge->name){
<     #####: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1154:							return MOSQ_ERR_NOMEM;
---
>         -: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
>         -: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
>         -: 1151:						cur_bridge->name = mosquitto__strdup(token);
>         -: 1152:						if(!cur_bridge->name){
>         -: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1154:							return MOSQ_ERR_NOMEM;
4383,4393c4383,4393
<     #####: 1156:						cur_bridge->keepalive = 60;
<     #####: 1157:						cur_bridge->notifications = true;
<     #####: 1158:						cur_bridge->notifications_local_only = false;
<     #####: 1159:						cur_bridge->start_type = bst_automatic;
<     #####: 1160:						cur_bridge->idle_timeout = 60;
<     #####: 1161:						cur_bridge->restart_timeout = 30;
<     #####: 1162:						cur_bridge->threshold = 10;
<     #####: 1163:						cur_bridge->try_private = true;
<     #####: 1164:						cur_bridge->attempt_unsubscribe = true;
<     #####: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
<     #####: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
---
>         -: 1156:						cur_bridge->keepalive = 60;
>         -: 1157:						cur_bridge->notifications = true;
>         -: 1158:						cur_bridge->notifications_local_only = false;
>         -: 1159:						cur_bridge->start_type = bst_automatic;
>         -: 1160:						cur_bridge->idle_timeout = 60;
>         -: 1161:						cur_bridge->restart_timeout = 30;
>         -: 1162:						cur_bridge->threshold = 10;
>         -: 1163:						cur_bridge->try_private = true;
>         -: 1164:						cur_bridge->attempt_unsubscribe = true;
>         -: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
>         -: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
4395,4396c4395,4396
<     #####: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
<     #####: 1169:						return MOSQ_ERR_INVAL;
---
>         -: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
>         -: 1169:						return MOSQ_ERR_INVAL;
4399c4399
<         -: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4419,4422c4419,4422
<     #####: 1192:					if(reload) continue; // FIXME
<     #####: 1193:					if(!cur_bridge){
<     #####: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1195:						return MOSQ_ERR_INVAL;
---
>         -: 1192:					if(reload) continue; // FIXME
>         -: 1193:					if(!cur_bridge){
>         -: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1195:						return MOSQ_ERR_INVAL;
4424,4427c4424,4427
<     #####: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1198:					if(cur_bridge->idle_timeout < 1){
<     #####: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
<     #####: 1200:						cur_bridge->idle_timeout = 1;
---
>         -: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1198:					if(cur_bridge->idle_timeout < 1){
>         -: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
>         -: 1200:						cur_bridge->idle_timeout = 1;
4430c4430
<         -: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4464,4467c4464,4467
<     #####: 1237:					if(reload) continue; // FIXME
<     #####: 1238:					if(!cur_bridge){
<     #####: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1240:						return MOSQ_ERR_INVAL;
---
>         -: 1237:					if(reload) continue; // FIXME
>         -: 1238:					if(!cur_bridge){
>         -: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1240:						return MOSQ_ERR_INVAL;
4469,4472c4469,4472
<     #####: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1243:					if(cur_bridge->keepalive < 5){
<     #####: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
<     #####: 1245:						cur_bridge->keepalive = 5;
---
>         -: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1243:					if(cur_bridge->keepalive < 5){
>         -: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
>         -: 1245:						cur_bridge->keepalive = 5;
4475c4475
<         -: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4536,4539c4536,4539
<     #####: 1309:					if(reload) continue; // FIXME
<     #####: 1310:					if(!cur_bridge){
<     #####: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1312:						return MOSQ_ERR_INVAL;
---
>         -: 1309:					if(reload) continue; // FIXME
>         -: 1310:					if(!cur_bridge){
>         -: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1312:						return MOSQ_ERR_INVAL;
4541c4541
<     #####: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
4543c4543
<         -: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4547,4550c4547,4550
<     #####: 1320:					if(reload) continue; // FIXME
<     #####: 1321:					if(!cur_bridge){
<     #####: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1323:						return MOSQ_ERR_INVAL;
---
>         -: 1320:					if(reload) continue; // FIXME
>         -: 1321:					if(!cur_bridge){
>         -: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1323:						return MOSQ_ERR_INVAL;
4552c4552
<     #####: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
4554c4554
<         -: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4558,4561c4558,4561
<     #####: 1331:					if(reload) continue; // FIXME
<     #####: 1332:					if(!cur_bridge){
<     #####: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1334:						return MOSQ_ERR_INVAL;
---
>         -: 1331:					if(reload) continue; // FIXME
>         -: 1332:					if(!cur_bridge){
>         -: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1334:						return MOSQ_ERR_INVAL;
4563c4563
<     #####: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
4565c4565
<         -: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4756,4759c4756,4759
<     #####: 1529:					if(reload) continue; // FIXME
<     #####: 1530:					if(!cur_bridge){
<     #####: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1532:						return MOSQ_ERR_INVAL;
---
>         -: 1529:					if(reload) continue; // FIXME
>         -: 1530:					if(!cur_bridge){
>         -: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1532:						return MOSQ_ERR_INVAL;
4761c4761
<     #####: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
4763c4763
<         -: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4767,4770c4767,4770
<     #####: 1540:					if(reload) continue; // FIXME
<     #####: 1541:					if(!cur_bridge){
<     #####: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
<     #####: 1543:						return MOSQ_ERR_INVAL;
---
>         -: 1540:					if(reload) continue; // FIXME
>         -: 1541:					if(!cur_bridge){
>         -: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
>         -: 1543:						return MOSQ_ERR_INVAL;
4772c4772
<     #####: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
4774c4774
<         -: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4778,4781c4778,4781
<     #####: 1551:					if(reload) continue; // FIXME
<     #####: 1552:					if(!cur_bridge){
<     #####: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1554:						return MOSQ_ERR_INVAL;
---
>         -: 1551:					if(reload) continue; // FIXME
>         -: 1552:					if(!cur_bridge){
>         -: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1554:						return MOSQ_ERR_INVAL;
4783c4783
<     #####: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
4785c4785
<         -: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4789,4792c4789,4792
<     #####: 1562:					if(reload) continue; // FIXME
<     #####: 1563:					if(!cur_bridge){
<     #####: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1565:						return MOSQ_ERR_INVAL;
---
>         -: 1562:					if(reload) continue; // FIXME
>         -: 1563:					if(!cur_bridge){
>         -: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1565:						return MOSQ_ERR_INVAL;
4794c4794
<     #####: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
4796c4796
<         -: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4916,4919c4916,4919
<     #####: 1689:					if(reload) continue; // FIXME
<     #####: 1690:					if(!cur_bridge){
<     #####: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1692:						return MOSQ_ERR_INVAL;
---
>         -: 1689:					if(reload) continue; // FIXME
>         -: 1690:					if(!cur_bridge){
>         -: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1692:						return MOSQ_ERR_INVAL;
4921,4924c4921,4924
<     #####: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1695:					if(cur_bridge->restart_timeout < 1){
<     #####: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
<     #####: 1697:						cur_bridge->restart_timeout = 1;
---
>         -: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1695:					if(cur_bridge->restart_timeout < 1){
>         -: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
>         -: 1697:						cur_bridge->restart_timeout = 1;
4927c4927
<         -: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4933,4936c4933,4936
<     #####: 1706:					if(reload) continue; // FIXME
<     #####: 1707:					if(!cur_bridge){
<     #####: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1709:						return MOSQ_ERR_INVAL;
---
>         -: 1706:					if(reload) continue; // FIXME
>         -: 1707:					if(!cur_bridge){
>         -: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1709:						return MOSQ_ERR_INVAL;
4938c4938
<     #####: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
4940c4940
<         -: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4946,4949c4946,4949
<     #####: 1719:					if(reload) continue; // FIXME
<     #####: 1720:					if(!cur_bridge){
<     #####: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1722:						return MOSQ_ERR_INVAL;
---
>         -: 1719:					if(reload) continue; // FIXME
>         -: 1720:					if(!cur_bridge){
>         -: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1722:						return MOSQ_ERR_INVAL;
4951,4961c4951,4961
<     #####: 1724:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1725:					if(token){
<     #####: 1726:						if(!strcmp(token, "automatic")){
<     #####: 1727:							cur_bridge->start_type = bst_automatic;
<     #####: 1728:						}else if(!strcmp(token, "lazy")){
<     #####: 1729:							cur_bridge->start_type = bst_lazy;
<     #####: 1730:						}else if(!strcmp(token, "manual")){
<     #####: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
<     #####: 1732:							return MOSQ_ERR_INVAL;
<     #####: 1733:						}else if(!strcmp(token, "once")){
<     #####: 1734:							cur_bridge->start_type = bst_once;
---
>         -: 1724:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1725:					if(token){
>         -: 1726:						if(!strcmp(token, "automatic")){
>         -: 1727:							cur_bridge->start_type = bst_automatic;
>         -: 1728:						}else if(!strcmp(token, "lazy")){
>         -: 1729:							cur_bridge->start_type = bst_lazy;
>         -: 1730:						}else if(!strcmp(token, "manual")){
>         -: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
>         -: 1732:							return MOSQ_ERR_INVAL;
>         -: 1733:						}else if(!strcmp(token, "once")){
>         -: 1734:							cur_bridge->start_type = bst_once;
4963,4964c4963,4964
<     #####: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
<     #####: 1737:							return MOSQ_ERR_INVAL;
---
>         -: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
>         -: 1737:							return MOSQ_ERR_INVAL;
4967,4968c4967,4968
<     #####: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
<     #####: 1741:						return MOSQ_ERR_INVAL;
---
>         -: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
>         -: 1741:						return MOSQ_ERR_INVAL;
4971c4971
<         -: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
4999,5002c4999,5002
<     #####: 1772:					if(reload) continue; // FIXME
<     #####: 1773:					if(!cur_bridge){
<     #####: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1775:						return MOSQ_ERR_INVAL;
---
>         -: 1772:					if(reload) continue; // FIXME
>         -: 1773:					if(!cur_bridge){
>         -: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1775:						return MOSQ_ERR_INVAL;
5004,5007c5004,5007
<     #####: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1778:					if(cur_bridge->threshold < 1){
<     #####: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
<     #####: 1780:						cur_bridge->threshold = 1;
---
>         -: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1778:					if(cur_bridge->threshold < 1){
>         -: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
>         -: 1780:						cur_bridge->threshold = 1;
5010c5010
<         -: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5021,5024c5021,5024
<     #####: 1794:					if(reload) continue; // FIXME
<     #####: 1795:					if(!cur_bridge){
<     #####: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1797:						return MOSQ_ERR_INVAL;
---
>         -: 1794:					if(reload) continue; // FIXME
>         -: 1795:					if(!cur_bridge){
>         -: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1797:						return MOSQ_ERR_INVAL;
5026,5033c5026,5033
<     #####: 1799:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1800:					if(token){
<     #####: 1801:						cur_bridge->topic_count++;
<     #####: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
<     #####: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
<     #####: 1804:						if(!cur_bridge->topics){
<     #####: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1806:							return MOSQ_ERR_NOMEM;
---
>         -: 1799:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1800:					if(token){
>         -: 1801:						cur_bridge->topic_count++;
>         -: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
>         -: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
>         -: 1804:						if(!cur_bridge->topics){
>         -: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1806:							return MOSQ_ERR_NOMEM;
5035,5037c5035,5037
<     #####: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
<     #####: 1809:						if(!strcmp(token, "\"\"")){
<     #####: 1810:							cur_topic->topic = NULL;
---
>         -: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
>         -: 1809:						if(!strcmp(token, "\"\"")){
>         -: 1810:							cur_topic->topic = NULL;
5039,5042c5039,5042
<     #####: 1812:							cur_topic->topic = mosquitto__strdup(token);
<     #####: 1813:							if(!cur_topic->topic){
<     #####: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1815:								return MOSQ_ERR_NOMEM;
---
>         -: 1812:							cur_topic->topic = mosquitto__strdup(token);
>         -: 1813:							if(!cur_topic->topic){
>         -: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1815:								return MOSQ_ERR_NOMEM;
5045,5048c5045,5048
<     #####: 1818:						cur_topic->direction = bd_out;
<     #####: 1819:						cur_topic->qos = 0;
<     #####: 1820:						cur_topic->local_prefix = NULL;
<     #####: 1821:						cur_topic->remote_prefix = NULL;
---
>         -: 1818:						cur_topic->direction = bd_out;
>         -: 1819:						cur_topic->qos = 0;
>         -: 1820:						cur_topic->local_prefix = NULL;
>         -: 1821:						cur_topic->remote_prefix = NULL;
5050,5051c5050,5051
<     #####: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
<     #####: 1824:						return MOSQ_ERR_INVAL;
---
>         -: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
>         -: 1824:						return MOSQ_ERR_INVAL;
5053,5060c5053,5060
<     #####: 1826:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1827:					if(token){
<     #####: 1828:						if(!strcasecmp(token, "out")){
<     #####: 1829:							cur_topic->direction = bd_out;
<     #####: 1830:						}else if(!strcasecmp(token, "in")){
<     #####: 1831:							cur_topic->direction = bd_in;
<     #####: 1832:						}else if(!strcasecmp(token, "both")){
<     #####: 1833:							cur_topic->direction = bd_both;
---
>         -: 1826:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1827:					if(token){
>         -: 1828:						if(!strcasecmp(token, "out")){
>         -: 1829:							cur_topic->direction = bd_out;
>         -: 1830:						}else if(!strcasecmp(token, "in")){
>         -: 1831:							cur_topic->direction = bd_in;
>         -: 1832:						}else if(!strcasecmp(token, "both")){
>         -: 1833:							cur_topic->direction = bd_both;
5062,5063c5062,5063
<     #####: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
<     #####: 1836:							return MOSQ_ERR_INVAL;
---
>         -: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
>         -: 1836:							return MOSQ_ERR_INVAL;
5065,5068c5065,5068
<     #####: 1838:						token = strtok_r(NULL, " ", &saveptr);
<     #####: 1839:						if(token){
<     #####: 1840:							if (token[0] == '#'){
<     #####: 1841:								strtok_r(NULL, "", &saveptr);
---
>         -: 1838:						token = strtok_r(NULL, " ", &saveptr);
>         -: 1839:						if(token){
>         -: 1840:							if (token[0] == '#'){
>         -: 1841:								strtok_r(NULL, "", &saveptr);
5070,5073c5070,5073
<     #####: 1843:							cur_topic->qos = atoi(token);
<     #####: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
<     #####: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
<     #####: 1846:								return MOSQ_ERR_INVAL;
---
>         -: 1843:							cur_topic->qos = atoi(token);
>         -: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
>         -: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
>         -: 1846:								return MOSQ_ERR_INVAL;
5076,5082c5076,5082
<     #####: 1849:							token = strtok_r(NULL, " ", &saveptr);
<     #####: 1850:							if(token){
<     #####: 1851:								cur_bridge->topic_remapping = true;
<     #####: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1853:									cur_topic->local_prefix = NULL;
<     #####: 1854:									if (token[0] == '#'){
<     #####: 1855:										strtok_r(NULL, "", &saveptr);
---
>         -: 1849:							token = strtok_r(NULL, " ", &saveptr);
>         -: 1850:							if(token){
>         -: 1851:								cur_bridge->topic_remapping = true;
>         -: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1853:									cur_topic->local_prefix = NULL;
>         -: 1854:									if (token[0] == '#'){
>         -: 1855:										strtok_r(NULL, "", &saveptr);
5085,5087c5085,5087
<     #####: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
<     #####: 1860:										return MOSQ_ERR_INVAL;
---
>         -: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
>         -: 1860:										return MOSQ_ERR_INVAL;
5089,5092c5089,5092
<     #####: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
<     #####: 1863:									if(!cur_topic->local_prefix){
<     #####: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1865:										return MOSQ_ERR_NOMEM;
---
>         -: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
>         -: 1863:									if(!cur_topic->local_prefix){
>         -: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1865:										return MOSQ_ERR_NOMEM;
5096,5099c5096,5099
<     #####: 1869:								token = strtok_r(NULL, " ", &saveptr);
<     #####: 1870:								if(token){
<     #####: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1872:										cur_topic->remote_prefix = NULL;
---
>         -: 1869:								token = strtok_r(NULL, " ", &saveptr);
>         -: 1870:								if(token){
>         -: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1872:										cur_topic->remote_prefix = NULL;
5101,5103c5101,5103
<     #####: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
<     #####: 1876:											return MOSQ_ERR_INVAL;
---
>         -: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
>         -: 1876:											return MOSQ_ERR_INVAL;
5105,5108c5105,5108
<     #####: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
<     #####: 1879:										if(!cur_topic->remote_prefix){
<     #####: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1881:											return MOSQ_ERR_NOMEM;
---
>         -: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
>         -: 1879:										if(!cur_topic->remote_prefix){
>         -: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1881:											return MOSQ_ERR_NOMEM;
5115,5116c5115,5116
<     #####: 1888:					if(cur_topic->topic == NULL &&
<     #####: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
---
>         -: 1888:					if(cur_topic->topic == NULL &&
>         -: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
5118,5119c5118,5119
<     #####: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
<     #####: 1892:						return MOSQ_ERR_INVAL;
---
>         -: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
>         -: 1892:						return MOSQ_ERR_INVAL;
5121,5127c5121,5127
<     #####: 1894:					if(cur_topic->local_prefix){
<     #####: 1895:						if(cur_topic->topic){
<     #####: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
<     #####: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
<     #####: 1898:							if(!cur_topic->local_topic){
<     #####: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1900:								return MOSQ_ERR_NOMEM;
---
>         -: 1894:					if(cur_topic->local_prefix){
>         -: 1895:						if(cur_topic->topic){
>         -: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
>         -: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
>         -: 1898:							if(!cur_topic->local_topic){
>         -: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1900:								return MOSQ_ERR_NOMEM;
5129,5130c5129,5130
<     #####: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
<     #####: 1903:							cur_topic->local_topic[len] = '\0';
---
>         -: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
>         -: 1903:							cur_topic->local_topic[len] = '\0';
5132,5135c5132,5135
<     #####: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
<     #####: 1906:							if(!cur_topic->local_topic){
<     #####: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1908:								return MOSQ_ERR_NOMEM;
---
>         -: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
>         -: 1906:							if(!cur_topic->local_topic){
>         -: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1908:								return MOSQ_ERR_NOMEM;
5139,5142c5139,5142
<     #####: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1913:						if(!cur_topic->local_topic){
<     #####: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1915:							return MOSQ_ERR_NOMEM;
---
>         -: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1913:						if(!cur_topic->local_topic){
>         -: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1915:							return MOSQ_ERR_NOMEM;
5146,5152c5146,5152
<     #####: 1919:					if(cur_topic->remote_prefix){
<     #####: 1920:						if(cur_topic->topic){
<     #####: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
<     #####: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
<     #####: 1923:							if(!cur_topic->remote_topic){
<     #####: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1925:								return MOSQ_ERR_NOMEM;
---
>         -: 1919:					if(cur_topic->remote_prefix){
>         -: 1920:						if(cur_topic->topic){
>         -: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
>         -: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
>         -: 1923:							if(!cur_topic->remote_topic){
>         -: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1925:								return MOSQ_ERR_NOMEM;
5154,5155c5154,5155
<     #####: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
<     #####: 1928:							cur_topic->remote_topic[len] = '\0';
---
>         -: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
>         -: 1928:							cur_topic->remote_topic[len] = '\0';
5157,5160c5157,5160
<     #####: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
<     #####: 1931:							if(!cur_topic->remote_topic){
<     #####: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1933:								return MOSQ_ERR_NOMEM;
---
>         -: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
>         -: 1931:							if(!cur_topic->remote_topic){
>         -: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1933:								return MOSQ_ERR_NOMEM;
5164,5167c5164,5167
<     #####: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1938:						if(!cur_topic->remote_topic){
<     #####: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1940:							return MOSQ_ERR_NOMEM;
---
>         -: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1938:						if(!cur_topic->remote_topic){
>         -: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1940:							return MOSQ_ERR_NOMEM;
5171c5171
<         -: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5175,5178c5175,5178
<     #####: 1948:					if(reload) continue; // FIXME
<     #####: 1949:					if(!cur_bridge){
<     #####: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1951:						return MOSQ_ERR_INVAL;
---
>         -: 1948:					if(reload) continue; // FIXME
>         -: 1949:					if(!cur_bridge){
>         -: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1951:						return MOSQ_ERR_INVAL;
5180c5180
<     #####: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
5182c5182
<         -: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5208,5211c5208,5211
<     #####: 1981:					if(reload) continue; // FIXME
<     #####: 1982:					if(!cur_bridge){
<     #####: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1984:						return MOSQ_ERR_INVAL;
---
>         -: 1981:					if(reload) continue; // FIXME
>         -: 1982:					if(!cur_bridge){
>         -: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1984:						return MOSQ_ERR_INVAL;
5213c5213
<     #####: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
5215c5215
<         -: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5246,5249c5246,5249
<     #####:  727:	char *tmp_char;
<     #####:  728:	struct mosquitto__bridge *cur_bridge = NULL;
<     #####:  729:	struct mosquitto__bridge_topic *cur_topic;
<     #####:  730:	int len;
---
>         -:  727:	char *tmp_char;
>         -:  728:	struct mosquitto__bridge *cur_bridge = NULL;
>         -:  729:	struct mosquitto__bridge_topic *cur_topic;
>         -:  730:	int len;
5278,5281c5278,5281
<     #####:  759:					if(reload) continue; // FIXME
<     #####:  760:					if(!cur_bridge || cur_bridge->addresses){
<     #####:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  762:						return MOSQ_ERR_INVAL;
---
>         -:  759:					if(reload) continue; // FIXME
>         -:  760:					if(!cur_bridge || cur_bridge->addresses){
>         -:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  762:						return MOSQ_ERR_INVAL;
5283,5284c5283,5284
<     #####:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
<     #####:  765:						if (token[0] == '#'){
---
>         -:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
>         -:  765:						if (token[0] == '#'){
5287,5291c5287,5291
<     #####:  768:						cur_bridge->address_count++;
<     #####:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
<     #####:  770:						if(!cur_bridge->addresses){
<     #####:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####:  772:							return MOSQ_ERR_NOMEM;
---
>         -:  768:						cur_bridge->address_count++;
>         -:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
>         -:  770:						if(!cur_bridge->addresses){
>         -:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -:  772:							return MOSQ_ERR_NOMEM;
5293c5293
<     #####:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
---
>         -:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
5295c5295
<     #####:  776:					for(i=0; i<cur_bridge->address_count; i++){
---
>         -:  776:					for(i=0; i<cur_bridge->address_count; i++){
5300,5301c5300,5301
<     #####:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
<     #####:  782:						if(tmp_char){
---
>         -:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
>         -:  782:						if(tmp_char){
5304c5304
<     #####:  785:							tmp_char[0] = '\0';
---
>         -:  785:							tmp_char[0] = '\0';
5307,5310c5307,5310
<     #####:  788:							tmp_int = atoi(&tmp_char[1]);
<     #####:  789:							if(tmp_int < 1 || tmp_int > 65535){
<     #####:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
<     #####:  791:								return MOSQ_ERR_INVAL;
---
>         -:  788:							tmp_int = atoi(&tmp_char[1]);
>         -:  789:							if(tmp_int < 1 || tmp_int > 65535){
>         -:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
>         -:  791:								return MOSQ_ERR_INVAL;
5312c5312
<     #####:  793:							cur_bridge->addresses[i].port = tmp_int;
---
>         -:  793:							cur_bridge->addresses[i].port = tmp_int;
5314c5314
<     #####:  795:							cur_bridge->addresses[i].port = 1883;
---
>         -:  795:							cur_bridge->addresses[i].port = 1883;
5321,5322c5321,5322
<     #####:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
<     #####:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
---
>         -:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
>         -:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
5324,5326c5324,5326
<     #####:  805:					if(cur_bridge->address_count == 0){
<     #####:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
<     #####:  807:						return MOSQ_ERR_INVAL;
---
>         -:  805:					if(cur_bridge->address_count == 0){
>         -:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
>         -:  807:						return MOSQ_ERR_INVAL;
5329c5329
<         -:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5426,5429c5426,5429
<     #####:  907:					if(reload) continue; // FIXME
<     #####:  908:					if(!cur_bridge){
<     #####:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  910:						return MOSQ_ERR_INVAL;
---
>         -:  907:					if(reload) continue; // FIXME
>         -:  908:					if(!cur_bridge){
>         -:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  910:						return MOSQ_ERR_INVAL;
5431c5431
<     #####:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
5433c5433
<         -:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5437,5440c5437,5440
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
5443,5445c5443,5445
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
5448c5448
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
5450c5450
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5454,5457c5454,5457
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
5460,5462c5460,5462
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
5465c5465
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
5467c5467
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5471,5474c5471,5474
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
5477,5479c5477,5479
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
5482c5482
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
5484c5484
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5488,5491c5488,5491
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
5493,5495c5493,5495
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
5497c5497
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
5499c5499
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
5503,5506c5503,5506
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
5508,5510c5508,5510
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
5513c5513
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
5517,5520c5517,5520
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
5523,5525c5523,5525
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
5528c5528
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
5530c5530
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5534,5537c5534,5537
<     #####: 1015:					if(reload) continue; // FIXME
<     #####: 1016:					if(!cur_bridge){
<     #####: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1018:						return MOSQ_ERR_INVAL;
---
>         -: 1015:					if(reload) continue; // FIXME
>         -: 1016:					if(!cur_bridge){
>         -: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1018:						return MOSQ_ERR_INVAL;
5539,5544c5539,5544
<     #####: 1020:					token = strtok_r(NULL, "", &saveptr);
<     #####: 1021:					if(token){
<     #####: 1022:						if(!strcmp(token, "mqttv31")){
<     #####: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
<     #####: 1024:						}else if(!strcmp(token, "mqttv311")){
<     #####: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
---
>         -: 1020:					token = strtok_r(NULL, "", &saveptr);
>         -: 1021:					if(token){
>         -: 1022:						if(!strcmp(token, "mqttv31")){
>         -: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
>         -: 1024:						}else if(!strcmp(token, "mqttv311")){
>         -: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
5546,5547c5546,5547
<     #####: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
<     #####: 1028:							return MOSQ_ERR_INVAL;
---
>         -: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
>         -: 1028:							return MOSQ_ERR_INVAL;
5550,5551c5550,5551
<     #####: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
<     #####: 1032:						return MOSQ_ERR_INVAL;
---
>         -: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
>         -: 1032:						return MOSQ_ERR_INVAL;
5554c5554
<         -: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5558,5561c5558,5561
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
5563,5565c5563,5565
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
5567c5567
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
5569c5569
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
5573,5576c5573,5576
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
5578c5578
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
5580c5580
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5623,5626c5623,5626
<     #####: 1104:					if(reload) continue; // FIXME
<     #####: 1105:					if(!cur_bridge){
<     #####: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1107:						return MOSQ_ERR_INVAL;
---
>         -: 1104:					if(reload) continue; // FIXME
>         -: 1105:					if(!cur_bridge){
>         -: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1107:						return MOSQ_ERR_INVAL;
5628c5628
<     #####: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
5630c5630
<         -: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5634,5637c5634,5637
<     #####: 1115:					if(reload) continue; // FIXME
<     #####: 1116:					if(!cur_bridge){
<     #####: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1118:						return MOSQ_ERR_INVAL;
---
>         -: 1115:					if(reload) continue; // FIXME
>         -: 1116:					if(!cur_bridge){
>         -: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1118:						return MOSQ_ERR_INVAL;
5639c5639
<     #####: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
5641c5641
<         -: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5651,5653c5651,5653
<     #####: 1132:					if(reload) continue; // FIXME
<     #####: 1133:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1134:					if(token){
---
>         -: 1132:					if(reload) continue; // FIXME
>         -: 1133:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1134:					if(token){
5655,5658c5655,5658
<     #####: 1136:						for(i=0; i<config->bridge_count; i++){
<     #####: 1137:							if(!strcmp(config->bridges[i].name, token)){
<     #####: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
<     #####: 1139:								return MOSQ_ERR_INVAL;
---
>         -: 1136:						for(i=0; i<config->bridge_count; i++){
>         -: 1137:							if(!strcmp(config->bridges[i].name, token)){
>         -: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
>         -: 1139:								return MOSQ_ERR_INVAL;
5662,5666c5662,5666
<     #####: 1143:						config->bridge_count++;
<     #####: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
<     #####: 1145:						if(!config->bridges){
<     #####: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1147:							return MOSQ_ERR_NOMEM;
---
>         -: 1143:						config->bridge_count++;
>         -: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
>         -: 1145:						if(!config->bridges){
>         -: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1147:							return MOSQ_ERR_NOMEM;
5668,5673c5668,5673
<     #####: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
<     #####: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
<     #####: 1151:						cur_bridge->name = mosquitto__strdup(token);
<     #####: 1152:						if(!cur_bridge->name){
<     #####: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1154:							return MOSQ_ERR_NOMEM;
---
>         -: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
>         -: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
>         -: 1151:						cur_bridge->name = mosquitto__strdup(token);
>         -: 1152:						if(!cur_bridge->name){
>         -: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1154:							return MOSQ_ERR_NOMEM;
5675,5685c5675,5685
<     #####: 1156:						cur_bridge->keepalive = 60;
<     #####: 1157:						cur_bridge->notifications = true;
<     #####: 1158:						cur_bridge->notifications_local_only = false;
<     #####: 1159:						cur_bridge->start_type = bst_automatic;
<     #####: 1160:						cur_bridge->idle_timeout = 60;
<     #####: 1161:						cur_bridge->restart_timeout = 30;
<     #####: 1162:						cur_bridge->threshold = 10;
<     #####: 1163:						cur_bridge->try_private = true;
<     #####: 1164:						cur_bridge->attempt_unsubscribe = true;
<     #####: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
<     #####: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
---
>         -: 1156:						cur_bridge->keepalive = 60;
>         -: 1157:						cur_bridge->notifications = true;
>         -: 1158:						cur_bridge->notifications_local_only = false;
>         -: 1159:						cur_bridge->start_type = bst_automatic;
>         -: 1160:						cur_bridge->idle_timeout = 60;
>         -: 1161:						cur_bridge->restart_timeout = 30;
>         -: 1162:						cur_bridge->threshold = 10;
>         -: 1163:						cur_bridge->try_private = true;
>         -: 1164:						cur_bridge->attempt_unsubscribe = true;
>         -: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
>         -: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
5687,5688c5687,5688
<     #####: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
<     #####: 1169:						return MOSQ_ERR_INVAL;
---
>         -: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
>         -: 1169:						return MOSQ_ERR_INVAL;
5691c5691
<         -: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5711,5714c5711,5714
<     #####: 1192:					if(reload) continue; // FIXME
<     #####: 1193:					if(!cur_bridge){
<     #####: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1195:						return MOSQ_ERR_INVAL;
---
>         -: 1192:					if(reload) continue; // FIXME
>         -: 1193:					if(!cur_bridge){
>         -: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1195:						return MOSQ_ERR_INVAL;
5716,5719c5716,5719
<     #####: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1198:					if(cur_bridge->idle_timeout < 1){
<     #####: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
<     #####: 1200:						cur_bridge->idle_timeout = 1;
---
>         -: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1198:					if(cur_bridge->idle_timeout < 1){
>         -: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
>         -: 1200:						cur_bridge->idle_timeout = 1;
5722c5722
<         -: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5756,5759c5756,5759
<     #####: 1237:					if(reload) continue; // FIXME
<     #####: 1238:					if(!cur_bridge){
<     #####: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1240:						return MOSQ_ERR_INVAL;
---
>         -: 1237:					if(reload) continue; // FIXME
>         -: 1238:					if(!cur_bridge){
>         -: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1240:						return MOSQ_ERR_INVAL;
5761,5764c5761,5764
<     #####: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1243:					if(cur_bridge->keepalive < 5){
<     #####: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
<     #####: 1245:						cur_bridge->keepalive = 5;
---
>         -: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1243:					if(cur_bridge->keepalive < 5){
>         -: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
>         -: 1245:						cur_bridge->keepalive = 5;
5767c5767
<         -: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5828,5831c5828,5831
<     #####: 1309:					if(reload) continue; // FIXME
<     #####: 1310:					if(!cur_bridge){
<     #####: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1312:						return MOSQ_ERR_INVAL;
---
>         -: 1309:					if(reload) continue; // FIXME
>         -: 1310:					if(!cur_bridge){
>         -: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1312:						return MOSQ_ERR_INVAL;
5833c5833
<     #####: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
5835c5835
<         -: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5839,5842c5839,5842
<     #####: 1320:					if(reload) continue; // FIXME
<     #####: 1321:					if(!cur_bridge){
<     #####: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1323:						return MOSQ_ERR_INVAL;
---
>         -: 1320:					if(reload) continue; // FIXME
>         -: 1321:					if(!cur_bridge){
>         -: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1323:						return MOSQ_ERR_INVAL;
5844c5844
<     #####: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
5846c5846
<         -: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
5850,5853c5850,5853
<     #####: 1331:					if(reload) continue; // FIXME
<     #####: 1332:					if(!cur_bridge){
<     #####: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1334:						return MOSQ_ERR_INVAL;
---
>         -: 1331:					if(reload) continue; // FIXME
>         -: 1332:					if(!cur_bridge){
>         -: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1334:						return MOSQ_ERR_INVAL;
5855c5855
<     #####: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
5857c5857
<         -: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6048,6051c6048,6051
<     #####: 1529:					if(reload) continue; // FIXME
<     #####: 1530:					if(!cur_bridge){
<     #####: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1532:						return MOSQ_ERR_INVAL;
---
>         -: 1529:					if(reload) continue; // FIXME
>         -: 1530:					if(!cur_bridge){
>         -: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1532:						return MOSQ_ERR_INVAL;
6053c6053
<     #####: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
6055c6055
<         -: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6059,6062c6059,6062
<     #####: 1540:					if(reload) continue; // FIXME
<     #####: 1541:					if(!cur_bridge){
<     #####: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
<     #####: 1543:						return MOSQ_ERR_INVAL;
---
>         -: 1540:					if(reload) continue; // FIXME
>         -: 1541:					if(!cur_bridge){
>         -: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
>         -: 1543:						return MOSQ_ERR_INVAL;
6064c6064
<     #####: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
6066c6066
<         -: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6070,6073c6070,6073
<     #####: 1551:					if(reload) continue; // FIXME
<     #####: 1552:					if(!cur_bridge){
<     #####: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1554:						return MOSQ_ERR_INVAL;
---
>         -: 1551:					if(reload) continue; // FIXME
>         -: 1552:					if(!cur_bridge){
>         -: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1554:						return MOSQ_ERR_INVAL;
6075c6075
<     #####: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
6077c6077
<         -: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6081,6084c6081,6084
<     #####: 1562:					if(reload) continue; // FIXME
<     #####: 1563:					if(!cur_bridge){
<     #####: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1565:						return MOSQ_ERR_INVAL;
---
>         -: 1562:					if(reload) continue; // FIXME
>         -: 1563:					if(!cur_bridge){
>         -: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1565:						return MOSQ_ERR_INVAL;
6086c6086
<     #####: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
6088c6088
<         -: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6208,6211c6208,6211
<     #####: 1689:					if(reload) continue; // FIXME
<     #####: 1690:					if(!cur_bridge){
<     #####: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1692:						return MOSQ_ERR_INVAL;
---
>         -: 1689:					if(reload) continue; // FIXME
>         -: 1690:					if(!cur_bridge){
>         -: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1692:						return MOSQ_ERR_INVAL;
6213,6216c6213,6216
<     #####: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1695:					if(cur_bridge->restart_timeout < 1){
<     #####: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
<     #####: 1697:						cur_bridge->restart_timeout = 1;
---
>         -: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1695:					if(cur_bridge->restart_timeout < 1){
>         -: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
>         -: 1697:						cur_bridge->restart_timeout = 1;
6219c6219
<         -: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6225,6228c6225,6228
<     #####: 1706:					if(reload) continue; // FIXME
<     #####: 1707:					if(!cur_bridge){
<     #####: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1709:						return MOSQ_ERR_INVAL;
---
>         -: 1706:					if(reload) continue; // FIXME
>         -: 1707:					if(!cur_bridge){
>         -: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1709:						return MOSQ_ERR_INVAL;
6230c6230
<     #####: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
6232c6232
<         -: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6238,6241c6238,6241
<     #####: 1719:					if(reload) continue; // FIXME
<     #####: 1720:					if(!cur_bridge){
<     #####: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1722:						return MOSQ_ERR_INVAL;
---
>         -: 1719:					if(reload) continue; // FIXME
>         -: 1720:					if(!cur_bridge){
>         -: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1722:						return MOSQ_ERR_INVAL;
6243,6253c6243,6253
<     #####: 1724:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1725:					if(token){
<     #####: 1726:						if(!strcmp(token, "automatic")){
<     #####: 1727:							cur_bridge->start_type = bst_automatic;
<     #####: 1728:						}else if(!strcmp(token, "lazy")){
<     #####: 1729:							cur_bridge->start_type = bst_lazy;
<     #####: 1730:						}else if(!strcmp(token, "manual")){
<     #####: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
<     #####: 1732:							return MOSQ_ERR_INVAL;
<     #####: 1733:						}else if(!strcmp(token, "once")){
<     #####: 1734:							cur_bridge->start_type = bst_once;
---
>         -: 1724:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1725:					if(token){
>         -: 1726:						if(!strcmp(token, "automatic")){
>         -: 1727:							cur_bridge->start_type = bst_automatic;
>         -: 1728:						}else if(!strcmp(token, "lazy")){
>         -: 1729:							cur_bridge->start_type = bst_lazy;
>         -: 1730:						}else if(!strcmp(token, "manual")){
>         -: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
>         -: 1732:							return MOSQ_ERR_INVAL;
>         -: 1733:						}else if(!strcmp(token, "once")){
>         -: 1734:							cur_bridge->start_type = bst_once;
6255,6256c6255,6256
<     #####: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
<     #####: 1737:							return MOSQ_ERR_INVAL;
---
>         -: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
>         -: 1737:							return MOSQ_ERR_INVAL;
6259,6260c6259,6260
<     #####: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
<     #####: 1741:						return MOSQ_ERR_INVAL;
---
>         -: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
>         -: 1741:						return MOSQ_ERR_INVAL;
6263c6263
<         -: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6291,6294c6291,6294
<     #####: 1772:					if(reload) continue; // FIXME
<     #####: 1773:					if(!cur_bridge){
<     #####: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1775:						return MOSQ_ERR_INVAL;
---
>         -: 1772:					if(reload) continue; // FIXME
>         -: 1773:					if(!cur_bridge){
>         -: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1775:						return MOSQ_ERR_INVAL;
6296,6299c6296,6299
<     #####: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1778:					if(cur_bridge->threshold < 1){
<     #####: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
<     #####: 1780:						cur_bridge->threshold = 1;
---
>         -: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1778:					if(cur_bridge->threshold < 1){
>         -: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
>         -: 1780:						cur_bridge->threshold = 1;
6302c6302
<         -: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6313,6316c6313,6316
<     #####: 1794:					if(reload) continue; // FIXME
<     #####: 1795:					if(!cur_bridge){
<     #####: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1797:						return MOSQ_ERR_INVAL;
---
>         -: 1794:					if(reload) continue; // FIXME
>         -: 1795:					if(!cur_bridge){
>         -: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1797:						return MOSQ_ERR_INVAL;
6318,6325c6318,6325
<     #####: 1799:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1800:					if(token){
<     #####: 1801:						cur_bridge->topic_count++;
<     #####: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
<     #####: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
<     #####: 1804:						if(!cur_bridge->topics){
<     #####: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1806:							return MOSQ_ERR_NOMEM;
---
>         -: 1799:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1800:					if(token){
>         -: 1801:						cur_bridge->topic_count++;
>         -: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
>         -: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
>         -: 1804:						if(!cur_bridge->topics){
>         -: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1806:							return MOSQ_ERR_NOMEM;
6327,6329c6327,6329
<     #####: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
<     #####: 1809:						if(!strcmp(token, "\"\"")){
<     #####: 1810:							cur_topic->topic = NULL;
---
>         -: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
>         -: 1809:						if(!strcmp(token, "\"\"")){
>         -: 1810:							cur_topic->topic = NULL;
6331,6334c6331,6334
<     #####: 1812:							cur_topic->topic = mosquitto__strdup(token);
<     #####: 1813:							if(!cur_topic->topic){
<     #####: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1815:								return MOSQ_ERR_NOMEM;
---
>         -: 1812:							cur_topic->topic = mosquitto__strdup(token);
>         -: 1813:							if(!cur_topic->topic){
>         -: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1815:								return MOSQ_ERR_NOMEM;
6337,6340c6337,6340
<     #####: 1818:						cur_topic->direction = bd_out;
<     #####: 1819:						cur_topic->qos = 0;
<     #####: 1820:						cur_topic->local_prefix = NULL;
<     #####: 1821:						cur_topic->remote_prefix = NULL;
---
>         -: 1818:						cur_topic->direction = bd_out;
>         -: 1819:						cur_topic->qos = 0;
>         -: 1820:						cur_topic->local_prefix = NULL;
>         -: 1821:						cur_topic->remote_prefix = NULL;
6342,6343c6342,6343
<     #####: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
<     #####: 1824:						return MOSQ_ERR_INVAL;
---
>         -: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
>         -: 1824:						return MOSQ_ERR_INVAL;
6345,6352c6345,6352
<     #####: 1826:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1827:					if(token){
<     #####: 1828:						if(!strcasecmp(token, "out")){
<     #####: 1829:							cur_topic->direction = bd_out;
<     #####: 1830:						}else if(!strcasecmp(token, "in")){
<     #####: 1831:							cur_topic->direction = bd_in;
<     #####: 1832:						}else if(!strcasecmp(token, "both")){
<     #####: 1833:							cur_topic->direction = bd_both;
---
>         -: 1826:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1827:					if(token){
>         -: 1828:						if(!strcasecmp(token, "out")){
>         -: 1829:							cur_topic->direction = bd_out;
>         -: 1830:						}else if(!strcasecmp(token, "in")){
>         -: 1831:							cur_topic->direction = bd_in;
>         -: 1832:						}else if(!strcasecmp(token, "both")){
>         -: 1833:							cur_topic->direction = bd_both;
6354,6355c6354,6355
<     #####: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
<     #####: 1836:							return MOSQ_ERR_INVAL;
---
>         -: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
>         -: 1836:							return MOSQ_ERR_INVAL;
6357,6360c6357,6360
<     #####: 1838:						token = strtok_r(NULL, " ", &saveptr);
<     #####: 1839:						if(token){
<     #####: 1840:							if (token[0] == '#'){
<     #####: 1841:								strtok_r(NULL, "", &saveptr);
---
>         -: 1838:						token = strtok_r(NULL, " ", &saveptr);
>         -: 1839:						if(token){
>         -: 1840:							if (token[0] == '#'){
>         -: 1841:								strtok_r(NULL, "", &saveptr);
6362,6365c6362,6365
<     #####: 1843:							cur_topic->qos = atoi(token);
<     #####: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
<     #####: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
<     #####: 1846:								return MOSQ_ERR_INVAL;
---
>         -: 1843:							cur_topic->qos = atoi(token);
>         -: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
>         -: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
>         -: 1846:								return MOSQ_ERR_INVAL;
6368,6374c6368,6374
<     #####: 1849:							token = strtok_r(NULL, " ", &saveptr);
<     #####: 1850:							if(token){
<     #####: 1851:								cur_bridge->topic_remapping = true;
<     #####: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1853:									cur_topic->local_prefix = NULL;
<     #####: 1854:									if (token[0] == '#'){
<     #####: 1855:										strtok_r(NULL, "", &saveptr);
---
>         -: 1849:							token = strtok_r(NULL, " ", &saveptr);
>         -: 1850:							if(token){
>         -: 1851:								cur_bridge->topic_remapping = true;
>         -: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1853:									cur_topic->local_prefix = NULL;
>         -: 1854:									if (token[0] == '#'){
>         -: 1855:										strtok_r(NULL, "", &saveptr);
6377,6379c6377,6379
<     #####: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
<     #####: 1860:										return MOSQ_ERR_INVAL;
---
>         -: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
>         -: 1860:										return MOSQ_ERR_INVAL;
6381,6384c6381,6384
<     #####: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
<     #####: 1863:									if(!cur_topic->local_prefix){
<     #####: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1865:										return MOSQ_ERR_NOMEM;
---
>         -: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
>         -: 1863:									if(!cur_topic->local_prefix){
>         -: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1865:										return MOSQ_ERR_NOMEM;
6388,6391c6388,6391
<     #####: 1869:								token = strtok_r(NULL, " ", &saveptr);
<     #####: 1870:								if(token){
<     #####: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1872:										cur_topic->remote_prefix = NULL;
---
>         -: 1869:								token = strtok_r(NULL, " ", &saveptr);
>         -: 1870:								if(token){
>         -: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1872:										cur_topic->remote_prefix = NULL;
6393,6395c6393,6395
<     #####: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
<     #####: 1876:											return MOSQ_ERR_INVAL;
---
>         -: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
>         -: 1876:											return MOSQ_ERR_INVAL;
6397,6400c6397,6400
<     #####: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
<     #####: 1879:										if(!cur_topic->remote_prefix){
<     #####: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1881:											return MOSQ_ERR_NOMEM;
---
>         -: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
>         -: 1879:										if(!cur_topic->remote_prefix){
>         -: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1881:											return MOSQ_ERR_NOMEM;
6407,6408c6407,6408
<     #####: 1888:					if(cur_topic->topic == NULL &&
<     #####: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
---
>         -: 1888:					if(cur_topic->topic == NULL &&
>         -: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
6410,6411c6410,6411
<     #####: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
<     #####: 1892:						return MOSQ_ERR_INVAL;
---
>         -: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
>         -: 1892:						return MOSQ_ERR_INVAL;
6413,6419c6413,6419
<     #####: 1894:					if(cur_topic->local_prefix){
<     #####: 1895:						if(cur_topic->topic){
<     #####: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
<     #####: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
<     #####: 1898:							if(!cur_topic->local_topic){
<     #####: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1900:								return MOSQ_ERR_NOMEM;
---
>         -: 1894:					if(cur_topic->local_prefix){
>         -: 1895:						if(cur_topic->topic){
>         -: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
>         -: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
>         -: 1898:							if(!cur_topic->local_topic){
>         -: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1900:								return MOSQ_ERR_NOMEM;
6421,6422c6421,6422
<     #####: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
<     #####: 1903:							cur_topic->local_topic[len] = '\0';
---
>         -: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
>         -: 1903:							cur_topic->local_topic[len] = '\0';
6424,6427c6424,6427
<     #####: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
<     #####: 1906:							if(!cur_topic->local_topic){
<     #####: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1908:								return MOSQ_ERR_NOMEM;
---
>         -: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
>         -: 1906:							if(!cur_topic->local_topic){
>         -: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1908:								return MOSQ_ERR_NOMEM;
6431,6434c6431,6434
<     #####: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1913:						if(!cur_topic->local_topic){
<     #####: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1915:							return MOSQ_ERR_NOMEM;
---
>         -: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1913:						if(!cur_topic->local_topic){
>         -: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1915:							return MOSQ_ERR_NOMEM;
6438,6444c6438,6444
<     #####: 1919:					if(cur_topic->remote_prefix){
<     #####: 1920:						if(cur_topic->topic){
<     #####: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
<     #####: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
<     #####: 1923:							if(!cur_topic->remote_topic){
<     #####: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1925:								return MOSQ_ERR_NOMEM;
---
>         -: 1919:					if(cur_topic->remote_prefix){
>         -: 1920:						if(cur_topic->topic){
>         -: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
>         -: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
>         -: 1923:							if(!cur_topic->remote_topic){
>         -: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1925:								return MOSQ_ERR_NOMEM;
6446,6447c6446,6447
<     #####: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
<     #####: 1928:							cur_topic->remote_topic[len] = '\0';
---
>         -: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
>         -: 1928:							cur_topic->remote_topic[len] = '\0';
6449,6452c6449,6452
<     #####: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
<     #####: 1931:							if(!cur_topic->remote_topic){
<     #####: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1933:								return MOSQ_ERR_NOMEM;
---
>         -: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
>         -: 1931:							if(!cur_topic->remote_topic){
>         -: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1933:								return MOSQ_ERR_NOMEM;
6456,6459c6456,6459
<     #####: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1938:						if(!cur_topic->remote_topic){
<     #####: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1940:							return MOSQ_ERR_NOMEM;
---
>         -: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1938:						if(!cur_topic->remote_topic){
>         -: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1940:							return MOSQ_ERR_NOMEM;
6463c6463
<         -: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6467,6470c6467,6470
<     #####: 1948:					if(reload) continue; // FIXME
<     #####: 1949:					if(!cur_bridge){
<     #####: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1951:						return MOSQ_ERR_INVAL;
---
>         -: 1948:					if(reload) continue; // FIXME
>         -: 1949:					if(!cur_bridge){
>         -: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1951:						return MOSQ_ERR_INVAL;
6472c6472
<     #####: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
6474c6474
<         -: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6500,6503c6500,6503
<     #####: 1981:					if(reload) continue; // FIXME
<     #####: 1982:					if(!cur_bridge){
<     #####: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1984:						return MOSQ_ERR_INVAL;
---
>         -: 1981:					if(reload) continue; // FIXME
>         -: 1982:					if(!cur_bridge){
>         -: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1984:						return MOSQ_ERR_INVAL;
6505c6505
<     #####: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
6507c6507
<         -: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6538,6541c6538,6541
<     #####:  727:	char *tmp_char;
<     #####:  728:	struct mosquitto__bridge *cur_bridge = NULL;
<     #####:  729:	struct mosquitto__bridge_topic *cur_topic;
<     #####:  730:	int len;
---
>         -:  727:	char *tmp_char;
>         -:  728:	struct mosquitto__bridge *cur_bridge = NULL;
>         -:  729:	struct mosquitto__bridge_topic *cur_topic;
>         -:  730:	int len;
6570,6573c6570,6573
<     #####:  759:					if(reload) continue; // FIXME
<     #####:  760:					if(!cur_bridge || cur_bridge->addresses){
<     #####:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  762:						return MOSQ_ERR_INVAL;
---
>         -:  759:					if(reload) continue; // FIXME
>         -:  760:					if(!cur_bridge || cur_bridge->addresses){
>         -:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  762:						return MOSQ_ERR_INVAL;
6575,6576c6575,6576
<     #####:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
<     #####:  765:						if (token[0] == '#'){
---
>         -:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
>         -:  765:						if (token[0] == '#'){
6579,6583c6579,6583
<     #####:  768:						cur_bridge->address_count++;
<     #####:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
<     #####:  770:						if(!cur_bridge->addresses){
<     #####:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####:  772:							return MOSQ_ERR_NOMEM;
---
>         -:  768:						cur_bridge->address_count++;
>         -:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
>         -:  770:						if(!cur_bridge->addresses){
>         -:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -:  772:							return MOSQ_ERR_NOMEM;
6585c6585
<     #####:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
---
>         -:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
6587c6587
<     #####:  776:					for(i=0; i<cur_bridge->address_count; i++){
---
>         -:  776:					for(i=0; i<cur_bridge->address_count; i++){
6592,6593c6592,6593
<     #####:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
<     #####:  782:						if(tmp_char){
---
>         -:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
>         -:  782:						if(tmp_char){
6596c6596
<     #####:  785:							tmp_char[0] = '\0';
---
>         -:  785:							tmp_char[0] = '\0';
6599,6602c6599,6602
<     #####:  788:							tmp_int = atoi(&tmp_char[1]);
<     #####:  789:							if(tmp_int < 1 || tmp_int > 65535){
<     #####:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
<     #####:  791:								return MOSQ_ERR_INVAL;
---
>         -:  788:							tmp_int = atoi(&tmp_char[1]);
>         -:  789:							if(tmp_int < 1 || tmp_int > 65535){
>         -:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
>         -:  791:								return MOSQ_ERR_INVAL;
6604c6604
<     #####:  793:							cur_bridge->addresses[i].port = tmp_int;
---
>         -:  793:							cur_bridge->addresses[i].port = tmp_int;
6606c6606
<     #####:  795:							cur_bridge->addresses[i].port = 1883;
---
>         -:  795:							cur_bridge->addresses[i].port = 1883;
6613,6614c6613,6614
<     #####:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
<     #####:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
---
>         -:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
>         -:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
6616,6618c6616,6618
<     #####:  805:					if(cur_bridge->address_count == 0){
<     #####:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
<     #####:  807:						return MOSQ_ERR_INVAL;
---
>         -:  805:					if(cur_bridge->address_count == 0){
>         -:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
>         -:  807:						return MOSQ_ERR_INVAL;
6621c6621
<         -:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6718,6721c6718,6721
<     #####:  907:					if(reload) continue; // FIXME
<     #####:  908:					if(!cur_bridge){
<     #####:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  910:						return MOSQ_ERR_INVAL;
---
>         -:  907:					if(reload) continue; // FIXME
>         -:  908:					if(!cur_bridge){
>         -:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  910:						return MOSQ_ERR_INVAL;
6723c6723
<     #####:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
6725c6725
<         -:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6729,6732c6729,6732
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
6735,6737c6735,6737
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
6740c6740
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
6742c6742
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6746,6749c6746,6749
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
6752,6754c6752,6754
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
6757c6757
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
6759c6759
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6763,6766c6763,6766
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
6769,6771c6769,6771
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
6774c6774
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
6776c6776
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6780,6783c6780,6783
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
6785,6787c6785,6787
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
6789c6789
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
6791c6791
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
6795,6798c6795,6798
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
6800,6802c6800,6802
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
6805c6805
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
6809,6812c6809,6812
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
6815,6817c6815,6817
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
6820c6820
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
6822c6822
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6826,6829c6826,6829
<     #####: 1015:					if(reload) continue; // FIXME
<     #####: 1016:					if(!cur_bridge){
<     #####: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1018:						return MOSQ_ERR_INVAL;
---
>         -: 1015:					if(reload) continue; // FIXME
>         -: 1016:					if(!cur_bridge){
>         -: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1018:						return MOSQ_ERR_INVAL;
6831,6836c6831,6836
<     #####: 1020:					token = strtok_r(NULL, "", &saveptr);
<     #####: 1021:					if(token){
<     #####: 1022:						if(!strcmp(token, "mqttv31")){
<     #####: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
<     #####: 1024:						}else if(!strcmp(token, "mqttv311")){
<     #####: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
---
>         -: 1020:					token = strtok_r(NULL, "", &saveptr);
>         -: 1021:					if(token){
>         -: 1022:						if(!strcmp(token, "mqttv31")){
>         -: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
>         -: 1024:						}else if(!strcmp(token, "mqttv311")){
>         -: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
6838,6839c6838,6839
<     #####: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
<     #####: 1028:							return MOSQ_ERR_INVAL;
---
>         -: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
>         -: 1028:							return MOSQ_ERR_INVAL;
6842,6843c6842,6843
<     #####: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
<     #####: 1032:						return MOSQ_ERR_INVAL;
---
>         -: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
>         -: 1032:						return MOSQ_ERR_INVAL;
6846c6846
<         -: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6850,6853c6850,6853
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
6855,6857c6855,6857
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
6859c6859
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
6861c6861
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
6865,6868c6865,6868
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
6870c6870
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
6872c6872
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6915,6918c6915,6918
<     #####: 1104:					if(reload) continue; // FIXME
<     #####: 1105:					if(!cur_bridge){
<     #####: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1107:						return MOSQ_ERR_INVAL;
---
>         -: 1104:					if(reload) continue; // FIXME
>         -: 1105:					if(!cur_bridge){
>         -: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1107:						return MOSQ_ERR_INVAL;
6920c6920
<     #####: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
6922c6922
<         -: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6926,6929c6926,6929
<     #####: 1115:					if(reload) continue; // FIXME
<     #####: 1116:					if(!cur_bridge){
<     #####: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1118:						return MOSQ_ERR_INVAL;
---
>         -: 1115:					if(reload) continue; // FIXME
>         -: 1116:					if(!cur_bridge){
>         -: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1118:						return MOSQ_ERR_INVAL;
6931c6931
<     #####: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
6933c6933
<         -: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
6943,6945c6943,6945
<     #####: 1132:					if(reload) continue; // FIXME
<     #####: 1133:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1134:					if(token){
---
>         -: 1132:					if(reload) continue; // FIXME
>         -: 1133:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1134:					if(token){
6947,6950c6947,6950
<     #####: 1136:						for(i=0; i<config->bridge_count; i++){
<     #####: 1137:							if(!strcmp(config->bridges[i].name, token)){
<     #####: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
<     #####: 1139:								return MOSQ_ERR_INVAL;
---
>         -: 1136:						for(i=0; i<config->bridge_count; i++){
>         -: 1137:							if(!strcmp(config->bridges[i].name, token)){
>         -: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
>         -: 1139:								return MOSQ_ERR_INVAL;
6954,6958c6954,6958
<     #####: 1143:						config->bridge_count++;
<     #####: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
<     #####: 1145:						if(!config->bridges){
<     #####: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1147:							return MOSQ_ERR_NOMEM;
---
>         -: 1143:						config->bridge_count++;
>         -: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
>         -: 1145:						if(!config->bridges){
>         -: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1147:							return MOSQ_ERR_NOMEM;
6960,6965c6960,6965
<     #####: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
<     #####: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
<     #####: 1151:						cur_bridge->name = mosquitto__strdup(token);
<     #####: 1152:						if(!cur_bridge->name){
<     #####: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1154:							return MOSQ_ERR_NOMEM;
---
>         -: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
>         -: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
>         -: 1151:						cur_bridge->name = mosquitto__strdup(token);
>         -: 1152:						if(!cur_bridge->name){
>         -: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1154:							return MOSQ_ERR_NOMEM;
6967,6977c6967,6977
<     #####: 1156:						cur_bridge->keepalive = 60;
<     #####: 1157:						cur_bridge->notifications = true;
<     #####: 1158:						cur_bridge->notifications_local_only = false;
<     #####: 1159:						cur_bridge->start_type = bst_automatic;
<     #####: 1160:						cur_bridge->idle_timeout = 60;
<     #####: 1161:						cur_bridge->restart_timeout = 30;
<     #####: 1162:						cur_bridge->threshold = 10;
<     #####: 1163:						cur_bridge->try_private = true;
<     #####: 1164:						cur_bridge->attempt_unsubscribe = true;
<     #####: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
<     #####: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
---
>         -: 1156:						cur_bridge->keepalive = 60;
>         -: 1157:						cur_bridge->notifications = true;
>         -: 1158:						cur_bridge->notifications_local_only = false;
>         -: 1159:						cur_bridge->start_type = bst_automatic;
>         -: 1160:						cur_bridge->idle_timeout = 60;
>         -: 1161:						cur_bridge->restart_timeout = 30;
>         -: 1162:						cur_bridge->threshold = 10;
>         -: 1163:						cur_bridge->try_private = true;
>         -: 1164:						cur_bridge->attempt_unsubscribe = true;
>         -: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
>         -: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
6979,6980c6979,6980
<     #####: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
<     #####: 1169:						return MOSQ_ERR_INVAL;
---
>         -: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
>         -: 1169:						return MOSQ_ERR_INVAL;
6983c6983
<         -: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7003,7006c7003,7006
<     #####: 1192:					if(reload) continue; // FIXME
<     #####: 1193:					if(!cur_bridge){
<     #####: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1195:						return MOSQ_ERR_INVAL;
---
>         -: 1192:					if(reload) continue; // FIXME
>         -: 1193:					if(!cur_bridge){
>         -: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1195:						return MOSQ_ERR_INVAL;
7008,7011c7008,7011
<     #####: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1198:					if(cur_bridge->idle_timeout < 1){
<     #####: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
<     #####: 1200:						cur_bridge->idle_timeout = 1;
---
>         -: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1198:					if(cur_bridge->idle_timeout < 1){
>         -: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
>         -: 1200:						cur_bridge->idle_timeout = 1;
7014c7014
<         -: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7048,7051c7048,7051
<     #####: 1237:					if(reload) continue; // FIXME
<     #####: 1238:					if(!cur_bridge){
<     #####: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1240:						return MOSQ_ERR_INVAL;
---
>         -: 1237:					if(reload) continue; // FIXME
>         -: 1238:					if(!cur_bridge){
>         -: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1240:						return MOSQ_ERR_INVAL;
7053,7056c7053,7056
<     #####: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1243:					if(cur_bridge->keepalive < 5){
<     #####: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
<     #####: 1245:						cur_bridge->keepalive = 5;
---
>         -: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1243:					if(cur_bridge->keepalive < 5){
>         -: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
>         -: 1245:						cur_bridge->keepalive = 5;
7059c7059
<         -: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7120,7123c7120,7123
<     #####: 1309:					if(reload) continue; // FIXME
<     #####: 1310:					if(!cur_bridge){
<     #####: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1312:						return MOSQ_ERR_INVAL;
---
>         -: 1309:					if(reload) continue; // FIXME
>         -: 1310:					if(!cur_bridge){
>         -: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1312:						return MOSQ_ERR_INVAL;
7125c7125
<     #####: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
7127c7127
<         -: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7131,7134c7131,7134
<     #####: 1320:					if(reload) continue; // FIXME
<     #####: 1321:					if(!cur_bridge){
<     #####: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1323:						return MOSQ_ERR_INVAL;
---
>         -: 1320:					if(reload) continue; // FIXME
>         -: 1321:					if(!cur_bridge){
>         -: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1323:						return MOSQ_ERR_INVAL;
7136c7136
<     #####: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
7138c7138
<         -: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7142,7145c7142,7145
<     #####: 1331:					if(reload) continue; // FIXME
<     #####: 1332:					if(!cur_bridge){
<     #####: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1334:						return MOSQ_ERR_INVAL;
---
>         -: 1331:					if(reload) continue; // FIXME
>         -: 1332:					if(!cur_bridge){
>         -: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1334:						return MOSQ_ERR_INVAL;
7147c7147
<     #####: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
7149c7149
<         -: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7340,7343c7340,7343
<     #####: 1529:					if(reload) continue; // FIXME
<     #####: 1530:					if(!cur_bridge){
<     #####: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1532:						return MOSQ_ERR_INVAL;
---
>         -: 1529:					if(reload) continue; // FIXME
>         -: 1530:					if(!cur_bridge){
>         -: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1532:						return MOSQ_ERR_INVAL;
7345c7345
<     #####: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
7347c7347
<         -: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7351,7354c7351,7354
<     #####: 1540:					if(reload) continue; // FIXME
<     #####: 1541:					if(!cur_bridge){
<     #####: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
<     #####: 1543:						return MOSQ_ERR_INVAL;
---
>         -: 1540:					if(reload) continue; // FIXME
>         -: 1541:					if(!cur_bridge){
>         -: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
>         -: 1543:						return MOSQ_ERR_INVAL;
7356c7356
<     #####: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
7358c7358
<         -: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7362,7365c7362,7365
<     #####: 1551:					if(reload) continue; // FIXME
<     #####: 1552:					if(!cur_bridge){
<     #####: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1554:						return MOSQ_ERR_INVAL;
---
>         -: 1551:					if(reload) continue; // FIXME
>         -: 1552:					if(!cur_bridge){
>         -: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1554:						return MOSQ_ERR_INVAL;
7367c7367
<     #####: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
7369c7369
<         -: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7373,7376c7373,7376
<     #####: 1562:					if(reload) continue; // FIXME
<     #####: 1563:					if(!cur_bridge){
<     #####: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1565:						return MOSQ_ERR_INVAL;
---
>         -: 1562:					if(reload) continue; // FIXME
>         -: 1563:					if(!cur_bridge){
>         -: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1565:						return MOSQ_ERR_INVAL;
7378c7378
<     #####: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
7380c7380
<         -: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7500,7503c7500,7503
<     #####: 1689:					if(reload) continue; // FIXME
<     #####: 1690:					if(!cur_bridge){
<     #####: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1692:						return MOSQ_ERR_INVAL;
---
>         -: 1689:					if(reload) continue; // FIXME
>         -: 1690:					if(!cur_bridge){
>         -: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1692:						return MOSQ_ERR_INVAL;
7505,7508c7505,7508
<     #####: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1695:					if(cur_bridge->restart_timeout < 1){
<     #####: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
<     #####: 1697:						cur_bridge->restart_timeout = 1;
---
>         -: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1695:					if(cur_bridge->restart_timeout < 1){
>         -: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
>         -: 1697:						cur_bridge->restart_timeout = 1;
7511c7511
<         -: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7517,7520c7517,7520
<     #####: 1706:					if(reload) continue; // FIXME
<     #####: 1707:					if(!cur_bridge){
<     #####: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1709:						return MOSQ_ERR_INVAL;
---
>         -: 1706:					if(reload) continue; // FIXME
>         -: 1707:					if(!cur_bridge){
>         -: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1709:						return MOSQ_ERR_INVAL;
7522c7522
<     #####: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
7524c7524
<         -: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7530,7533c7530,7533
<     #####: 1719:					if(reload) continue; // FIXME
<     #####: 1720:					if(!cur_bridge){
<     #####: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1722:						return MOSQ_ERR_INVAL;
---
>         -: 1719:					if(reload) continue; // FIXME
>         -: 1720:					if(!cur_bridge){
>         -: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1722:						return MOSQ_ERR_INVAL;
7535,7545c7535,7545
<     #####: 1724:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1725:					if(token){
<     #####: 1726:						if(!strcmp(token, "automatic")){
<     #####: 1727:							cur_bridge->start_type = bst_automatic;
<     #####: 1728:						}else if(!strcmp(token, "lazy")){
<     #####: 1729:							cur_bridge->start_type = bst_lazy;
<     #####: 1730:						}else if(!strcmp(token, "manual")){
<     #####: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
<     #####: 1732:							return MOSQ_ERR_INVAL;
<     #####: 1733:						}else if(!strcmp(token, "once")){
<     #####: 1734:							cur_bridge->start_type = bst_once;
---
>         -: 1724:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1725:					if(token){
>         -: 1726:						if(!strcmp(token, "automatic")){
>         -: 1727:							cur_bridge->start_type = bst_automatic;
>         -: 1728:						}else if(!strcmp(token, "lazy")){
>         -: 1729:							cur_bridge->start_type = bst_lazy;
>         -: 1730:						}else if(!strcmp(token, "manual")){
>         -: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
>         -: 1732:							return MOSQ_ERR_INVAL;
>         -: 1733:						}else if(!strcmp(token, "once")){
>         -: 1734:							cur_bridge->start_type = bst_once;
7547,7548c7547,7548
<     #####: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
<     #####: 1737:							return MOSQ_ERR_INVAL;
---
>         -: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
>         -: 1737:							return MOSQ_ERR_INVAL;
7551,7552c7551,7552
<     #####: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
<     #####: 1741:						return MOSQ_ERR_INVAL;
---
>         -: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
>         -: 1741:						return MOSQ_ERR_INVAL;
7555c7555
<         -: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7583,7586c7583,7586
<     #####: 1772:					if(reload) continue; // FIXME
<     #####: 1773:					if(!cur_bridge){
<     #####: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1775:						return MOSQ_ERR_INVAL;
---
>         -: 1772:					if(reload) continue; // FIXME
>         -: 1773:					if(!cur_bridge){
>         -: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1775:						return MOSQ_ERR_INVAL;
7588,7591c7588,7591
<     #####: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1778:					if(cur_bridge->threshold < 1){
<     #####: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
<     #####: 1780:						cur_bridge->threshold = 1;
---
>         -: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1778:					if(cur_bridge->threshold < 1){
>         -: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
>         -: 1780:						cur_bridge->threshold = 1;
7594c7594
<         -: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7605,7608c7605,7608
<     #####: 1794:					if(reload) continue; // FIXME
<     #####: 1795:					if(!cur_bridge){
<     #####: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1797:						return MOSQ_ERR_INVAL;
---
>         -: 1794:					if(reload) continue; // FIXME
>         -: 1795:					if(!cur_bridge){
>         -: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1797:						return MOSQ_ERR_INVAL;
7610,7617c7610,7617
<     #####: 1799:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1800:					if(token){
<     #####: 1801:						cur_bridge->topic_count++;
<     #####: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
<     #####: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
<     #####: 1804:						if(!cur_bridge->topics){
<     #####: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1806:							return MOSQ_ERR_NOMEM;
---
>         -: 1799:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1800:					if(token){
>         -: 1801:						cur_bridge->topic_count++;
>         -: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
>         -: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
>         -: 1804:						if(!cur_bridge->topics){
>         -: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1806:							return MOSQ_ERR_NOMEM;
7619,7621c7619,7621
<     #####: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
<     #####: 1809:						if(!strcmp(token, "\"\"")){
<     #####: 1810:							cur_topic->topic = NULL;
---
>         -: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
>         -: 1809:						if(!strcmp(token, "\"\"")){
>         -: 1810:							cur_topic->topic = NULL;
7623,7626c7623,7626
<     #####: 1812:							cur_topic->topic = mosquitto__strdup(token);
<     #####: 1813:							if(!cur_topic->topic){
<     #####: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1815:								return MOSQ_ERR_NOMEM;
---
>         -: 1812:							cur_topic->topic = mosquitto__strdup(token);
>         -: 1813:							if(!cur_topic->topic){
>         -: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1815:								return MOSQ_ERR_NOMEM;
7629,7632c7629,7632
<     #####: 1818:						cur_topic->direction = bd_out;
<     #####: 1819:						cur_topic->qos = 0;
<     #####: 1820:						cur_topic->local_prefix = NULL;
<     #####: 1821:						cur_topic->remote_prefix = NULL;
---
>         -: 1818:						cur_topic->direction = bd_out;
>         -: 1819:						cur_topic->qos = 0;
>         -: 1820:						cur_topic->local_prefix = NULL;
>         -: 1821:						cur_topic->remote_prefix = NULL;
7634,7635c7634,7635
<     #####: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
<     #####: 1824:						return MOSQ_ERR_INVAL;
---
>         -: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
>         -: 1824:						return MOSQ_ERR_INVAL;
7637,7644c7637,7644
<     #####: 1826:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1827:					if(token){
<     #####: 1828:						if(!strcasecmp(token, "out")){
<     #####: 1829:							cur_topic->direction = bd_out;
<     #####: 1830:						}else if(!strcasecmp(token, "in")){
<     #####: 1831:							cur_topic->direction = bd_in;
<     #####: 1832:						}else if(!strcasecmp(token, "both")){
<     #####: 1833:							cur_topic->direction = bd_both;
---
>         -: 1826:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1827:					if(token){
>         -: 1828:						if(!strcasecmp(token, "out")){
>         -: 1829:							cur_topic->direction = bd_out;
>         -: 1830:						}else if(!strcasecmp(token, "in")){
>         -: 1831:							cur_topic->direction = bd_in;
>         -: 1832:						}else if(!strcasecmp(token, "both")){
>         -: 1833:							cur_topic->direction = bd_both;
7646,7647c7646,7647
<     #####: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
<     #####: 1836:							return MOSQ_ERR_INVAL;
---
>         -: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
>         -: 1836:							return MOSQ_ERR_INVAL;
7649,7652c7649,7652
<     #####: 1838:						token = strtok_r(NULL, " ", &saveptr);
<     #####: 1839:						if(token){
<     #####: 1840:							if (token[0] == '#'){
<     #####: 1841:								strtok_r(NULL, "", &saveptr);
---
>         -: 1838:						token = strtok_r(NULL, " ", &saveptr);
>         -: 1839:						if(token){
>         -: 1840:							if (token[0] == '#'){
>         -: 1841:								strtok_r(NULL, "", &saveptr);
7654,7657c7654,7657
<     #####: 1843:							cur_topic->qos = atoi(token);
<     #####: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
<     #####: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
<     #####: 1846:								return MOSQ_ERR_INVAL;
---
>         -: 1843:							cur_topic->qos = atoi(token);
>         -: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
>         -: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
>         -: 1846:								return MOSQ_ERR_INVAL;
7660,7666c7660,7666
<     #####: 1849:							token = strtok_r(NULL, " ", &saveptr);
<     #####: 1850:							if(token){
<     #####: 1851:								cur_bridge->topic_remapping = true;
<     #####: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1853:									cur_topic->local_prefix = NULL;
<     #####: 1854:									if (token[0] == '#'){
<     #####: 1855:										strtok_r(NULL, "", &saveptr);
---
>         -: 1849:							token = strtok_r(NULL, " ", &saveptr);
>         -: 1850:							if(token){
>         -: 1851:								cur_bridge->topic_remapping = true;
>         -: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1853:									cur_topic->local_prefix = NULL;
>         -: 1854:									if (token[0] == '#'){
>         -: 1855:										strtok_r(NULL, "", &saveptr);
7669,7671c7669,7671
<     #####: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
<     #####: 1860:										return MOSQ_ERR_INVAL;
---
>         -: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
>         -: 1860:										return MOSQ_ERR_INVAL;
7673,7676c7673,7676
<     #####: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
<     #####: 1863:									if(!cur_topic->local_prefix){
<     #####: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1865:										return MOSQ_ERR_NOMEM;
---
>         -: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
>         -: 1863:									if(!cur_topic->local_prefix){
>         -: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1865:										return MOSQ_ERR_NOMEM;
7680,7683c7680,7683
<     #####: 1869:								token = strtok_r(NULL, " ", &saveptr);
<     #####: 1870:								if(token){
<     #####: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1872:										cur_topic->remote_prefix = NULL;
---
>         -: 1869:								token = strtok_r(NULL, " ", &saveptr);
>         -: 1870:								if(token){
>         -: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1872:										cur_topic->remote_prefix = NULL;
7685,7687c7685,7687
<     #####: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
<     #####: 1876:											return MOSQ_ERR_INVAL;
---
>         -: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
>         -: 1876:											return MOSQ_ERR_INVAL;
7689,7692c7689,7692
<     #####: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
<     #####: 1879:										if(!cur_topic->remote_prefix){
<     #####: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1881:											return MOSQ_ERR_NOMEM;
---
>         -: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
>         -: 1879:										if(!cur_topic->remote_prefix){
>         -: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1881:											return MOSQ_ERR_NOMEM;
7699,7700c7699,7700
<     #####: 1888:					if(cur_topic->topic == NULL &&
<     #####: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
---
>         -: 1888:					if(cur_topic->topic == NULL &&
>         -: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
7702,7703c7702,7703
<     #####: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
<     #####: 1892:						return MOSQ_ERR_INVAL;
---
>         -: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
>         -: 1892:						return MOSQ_ERR_INVAL;
7705,7711c7705,7711
<     #####: 1894:					if(cur_topic->local_prefix){
<     #####: 1895:						if(cur_topic->topic){
<     #####: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
<     #####: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
<     #####: 1898:							if(!cur_topic->local_topic){
<     #####: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1900:								return MOSQ_ERR_NOMEM;
---
>         -: 1894:					if(cur_topic->local_prefix){
>         -: 1895:						if(cur_topic->topic){
>         -: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
>         -: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
>         -: 1898:							if(!cur_topic->local_topic){
>         -: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1900:								return MOSQ_ERR_NOMEM;
7713,7714c7713,7714
<     #####: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
<     #####: 1903:							cur_topic->local_topic[len] = '\0';
---
>         -: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
>         -: 1903:							cur_topic->local_topic[len] = '\0';
7716,7719c7716,7719
<     #####: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
<     #####: 1906:							if(!cur_topic->local_topic){
<     #####: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1908:								return MOSQ_ERR_NOMEM;
---
>         -: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
>         -: 1906:							if(!cur_topic->local_topic){
>         -: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1908:								return MOSQ_ERR_NOMEM;
7723,7726c7723,7726
<     #####: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1913:						if(!cur_topic->local_topic){
<     #####: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1915:							return MOSQ_ERR_NOMEM;
---
>         -: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1913:						if(!cur_topic->local_topic){
>         -: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1915:							return MOSQ_ERR_NOMEM;
7730,7736c7730,7736
<     #####: 1919:					if(cur_topic->remote_prefix){
<     #####: 1920:						if(cur_topic->topic){
<     #####: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
<     #####: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
<     #####: 1923:							if(!cur_topic->remote_topic){
<     #####: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1925:								return MOSQ_ERR_NOMEM;
---
>         -: 1919:					if(cur_topic->remote_prefix){
>         -: 1920:						if(cur_topic->topic){
>         -: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
>         -: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
>         -: 1923:							if(!cur_topic->remote_topic){
>         -: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1925:								return MOSQ_ERR_NOMEM;
7738,7739c7738,7739
<     #####: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
<     #####: 1928:							cur_topic->remote_topic[len] = '\0';
---
>         -: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
>         -: 1928:							cur_topic->remote_topic[len] = '\0';
7741,7744c7741,7744
<     #####: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
<     #####: 1931:							if(!cur_topic->remote_topic){
<     #####: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1933:								return MOSQ_ERR_NOMEM;
---
>         -: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
>         -: 1931:							if(!cur_topic->remote_topic){
>         -: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1933:								return MOSQ_ERR_NOMEM;
7748,7751c7748,7751
<     #####: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1938:						if(!cur_topic->remote_topic){
<     #####: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1940:							return MOSQ_ERR_NOMEM;
---
>         -: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1938:						if(!cur_topic->remote_topic){
>         -: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1940:							return MOSQ_ERR_NOMEM;
7755c7755
<         -: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7759,7762c7759,7762
<     #####: 1948:					if(reload) continue; // FIXME
<     #####: 1949:					if(!cur_bridge){
<     #####: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1951:						return MOSQ_ERR_INVAL;
---
>         -: 1948:					if(reload) continue; // FIXME
>         -: 1949:					if(!cur_bridge){
>         -: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1951:						return MOSQ_ERR_INVAL;
7764c7764
<     #####: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
7766c7766
<         -: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7792,7795c7792,7795
<     #####: 1981:					if(reload) continue; // FIXME
<     #####: 1982:					if(!cur_bridge){
<     #####: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1984:						return MOSQ_ERR_INVAL;
---
>         -: 1981:					if(reload) continue; // FIXME
>         -: 1982:					if(!cur_bridge){
>         -: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1984:						return MOSQ_ERR_INVAL;
7797c7797
<     #####: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
7799c7799
<         -: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
7945,7948c7945,7948
<     #####: 2045:	int i, j;
<     #####: 2046:	struct mosquitto__bridge *bridge1, *bridge2;
<     #####: 2047:	char hostname[256];
<     #####: 2048:	int len;
---
>         -: 2045:	int i, j;
>         -: 2046:	struct mosquitto__bridge *bridge1, *bridge2;
>         -: 2047:	char hostname[256];
>         -: 2048:	int len;
7952,7953c7952,7953
<     #####: 2052:	for(i=0; i<config->bridge_count; i++){
<     #####: 2053:		bridge1 = &config->bridges[i];
---
>         -: 2052:	for(i=0; i<config->bridge_count; i++){
>         -: 2053:		bridge1 = &config->bridges[i];
7955,7960c7955,7960
<     #####: 2055:		if(!bridge1->remote_clientid){
<     #####: 2056:			if(!gethostname(hostname, 256)){
<     #####: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
<     #####: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
<     #####: 2059:				if(!bridge1->remote_clientid){
<     #####: 2060:					return MOSQ_ERR_NOMEM;
---
>         -: 2055:		if(!bridge1->remote_clientid){
>         -: 2056:			if(!gethostname(hostname, 256)){
>         -: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
>         -: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
>         -: 2059:				if(!bridge1->remote_clientid){
>         -: 2060:					return MOSQ_ERR_NOMEM;
7962c7962
<     #####: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
---
>         -: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
7964c7964
<     #####: 2064:				return 1;
---
>         -: 2064:				return 1;
7968,7973c7968,7973
<     #####: 2068:		if(!bridge1->local_clientid){
<     #####: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
<     #####: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
<     #####: 2071:			if(!bridge1->local_clientid){
<     #####: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 2073:				return MOSQ_ERR_NOMEM;
---
>         -: 2068:		if(!bridge1->local_clientid){
>         -: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
>         -: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
>         -: 2071:			if(!bridge1->local_clientid){
>         -: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 2073:				return MOSQ_ERR_NOMEM;
7975c7975
<     #####: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
---
>         -: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
7979,7984c7979,7984
<     #####: 2079:	for(i=0; i<config->bridge_count; i++){
<     #####: 2080:		bridge1 = &config->bridges[i];
<     #####: 2081:		for(j=i+1; j<config->bridge_count; j++){
<     #####: 2082:			bridge2 = &config->bridges[j];
<     #####: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
<     #####: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
---
>         -: 2079:	for(i=0; i<config->bridge_count; i++){
>         -: 2080:		bridge1 = &config->bridges[i];
>         -: 2081:		for(j=i+1; j<config->bridge_count; j++){
>         -: 2082:			bridge2 = &config->bridges[j];
>         -: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
>         -: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
7988c7988
<     #####: 2088:				return MOSQ_ERR_INVAL;
---
>         -: 2088:				return MOSQ_ERR_INVAL;
7993c7993
<         -: 2093:	return MOSQ_ERR_SUCCESS;
---
>     #####: 2093:	return MOSQ_ERR_SUCCESS;
8002,8005c8002,8005
<     #####: 2045:	int i, j;
<     #####: 2046:	struct mosquitto__bridge *bridge1, *bridge2;
<     #####: 2047:	char hostname[256];
<     #####: 2048:	int len;
---
>         -: 2045:	int i, j;
>         -: 2046:	struct mosquitto__bridge *bridge1, *bridge2;
>         -: 2047:	char hostname[256];
>         -: 2048:	int len;
8009,8010c8009,8010
<     #####: 2052:	for(i=0; i<config->bridge_count; i++){
<     #####: 2053:		bridge1 = &config->bridges[i];
---
>         -: 2052:	for(i=0; i<config->bridge_count; i++){
>         -: 2053:		bridge1 = &config->bridges[i];
8012,8017c8012,8017
<     #####: 2055:		if(!bridge1->remote_clientid){
<     #####: 2056:			if(!gethostname(hostname, 256)){
<     #####: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
<     #####: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
<     #####: 2059:				if(!bridge1->remote_clientid){
<     #####: 2060:					return MOSQ_ERR_NOMEM;
---
>         -: 2055:		if(!bridge1->remote_clientid){
>         -: 2056:			if(!gethostname(hostname, 256)){
>         -: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
>         -: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
>         -: 2059:				if(!bridge1->remote_clientid){
>         -: 2060:					return MOSQ_ERR_NOMEM;
8019c8019
<     #####: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
---
>         -: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
8021c8021
<     #####: 2064:				return 1;
---
>         -: 2064:				return 1;
8025,8030c8025,8030
<     #####: 2068:		if(!bridge1->local_clientid){
<     #####: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
<     #####: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
<     #####: 2071:			if(!bridge1->local_clientid){
<     #####: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 2073:				return MOSQ_ERR_NOMEM;
---
>         -: 2068:		if(!bridge1->local_clientid){
>         -: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
>         -: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
>         -: 2071:			if(!bridge1->local_clientid){
>         -: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 2073:				return MOSQ_ERR_NOMEM;
8032c8032
<     #####: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
---
>         -: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
8036,8041c8036,8041
<     #####: 2079:	for(i=0; i<config->bridge_count; i++){
<     #####: 2080:		bridge1 = &config->bridges[i];
<     #####: 2081:		for(j=i+1; j<config->bridge_count; j++){
<     #####: 2082:			bridge2 = &config->bridges[j];
<     #####: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
<     #####: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
---
>         -: 2079:	for(i=0; i<config->bridge_count; i++){
>         -: 2080:		bridge1 = &config->bridges[i];
>         -: 2081:		for(j=i+1; j<config->bridge_count; j++){
>         -: 2082:			bridge2 = &config->bridges[j];
>         -: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
>         -: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
8045c8045
<     #####: 2088:				return MOSQ_ERR_INVAL;
---
>         -: 2088:				return MOSQ_ERR_INVAL;
8050c8050
<         -: 2093:	return MOSQ_ERR_SUCCESS;
---
>     #####: 2093:	return MOSQ_ERR_SUCCESS;
8059,8062c8059,8062
<     #####: 2045:	int i, j;
<     #####: 2046:	struct mosquitto__bridge *bridge1, *bridge2;
<     #####: 2047:	char hostname[256];
<     #####: 2048:	int len;
---
>         -: 2045:	int i, j;
>         -: 2046:	struct mosquitto__bridge *bridge1, *bridge2;
>         -: 2047:	char hostname[256];
>         -: 2048:	int len;
8066,8067c8066,8067
<     #####: 2052:	for(i=0; i<config->bridge_count; i++){
<     #####: 2053:		bridge1 = &config->bridges[i];
---
>         -: 2052:	for(i=0; i<config->bridge_count; i++){
>         -: 2053:		bridge1 = &config->bridges[i];
8069,8074c8069,8074
<     #####: 2055:		if(!bridge1->remote_clientid){
<     #####: 2056:			if(!gethostname(hostname, 256)){
<     #####: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
<     #####: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
<     #####: 2059:				if(!bridge1->remote_clientid){
<     #####: 2060:					return MOSQ_ERR_NOMEM;
---
>         -: 2055:		if(!bridge1->remote_clientid){
>         -: 2056:			if(!gethostname(hostname, 256)){
>         -: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
>         -: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
>         -: 2059:				if(!bridge1->remote_clientid){
>         -: 2060:					return MOSQ_ERR_NOMEM;
8076c8076
<     #####: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
---
>         -: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
8078c8078
<     #####: 2064:				return 1;
---
>         -: 2064:				return 1;
8082,8087c8082,8087
<     #####: 2068:		if(!bridge1->local_clientid){
<     #####: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
<     #####: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
<     #####: 2071:			if(!bridge1->local_clientid){
<     #####: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 2073:				return MOSQ_ERR_NOMEM;
---
>         -: 2068:		if(!bridge1->local_clientid){
>         -: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
>         -: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
>         -: 2071:			if(!bridge1->local_clientid){
>         -: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 2073:				return MOSQ_ERR_NOMEM;
8089c8089
<     #####: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
---
>         -: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
8093,8098c8093,8098
<     #####: 2079:	for(i=0; i<config->bridge_count; i++){
<     #####: 2080:		bridge1 = &config->bridges[i];
<     #####: 2081:		for(j=i+1; j<config->bridge_count; j++){
<     #####: 2082:			bridge2 = &config->bridges[j];
<     #####: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
<     #####: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
---
>         -: 2079:	for(i=0; i<config->bridge_count; i++){
>         -: 2080:		bridge1 = &config->bridges[i];
>         -: 2081:		for(j=i+1; j<config->bridge_count; j++){
>         -: 2082:			bridge2 = &config->bridges[j];
>         -: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
>         -: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
8102c8102
<     #####: 2088:				return MOSQ_ERR_INVAL;
---
>         -: 2088:				return MOSQ_ERR_INVAL;
8107c8107
<         -: 2093:	return MOSQ_ERR_SUCCESS;
---
>     #####: 2093:	return MOSQ_ERR_SUCCESS;
8116,8119c8116,8119
<     #####: 2045:	int i, j;
<     #####: 2046:	struct mosquitto__bridge *bridge1, *bridge2;
<     #####: 2047:	char hostname[256];
<     #####: 2048:	int len;
---
>         -: 2045:	int i, j;
>         -: 2046:	struct mosquitto__bridge *bridge1, *bridge2;
>         -: 2047:	char hostname[256];
>         -: 2048:	int len;
8123,8124c8123,8124
<     #####: 2052:	for(i=0; i<config->bridge_count; i++){
<     #####: 2053:		bridge1 = &config->bridges[i];
---
>         -: 2052:	for(i=0; i<config->bridge_count; i++){
>         -: 2053:		bridge1 = &config->bridges[i];
8126,8131c8126,8131
<     #####: 2055:		if(!bridge1->remote_clientid){
<     #####: 2056:			if(!gethostname(hostname, 256)){
<     #####: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
<     #####: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
<     #####: 2059:				if(!bridge1->remote_clientid){
<     #####: 2060:					return MOSQ_ERR_NOMEM;
---
>         -: 2055:		if(!bridge1->remote_clientid){
>         -: 2056:			if(!gethostname(hostname, 256)){
>         -: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
>         -: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
>         -: 2059:				if(!bridge1->remote_clientid){
>         -: 2060:					return MOSQ_ERR_NOMEM;
8133c8133
<     #####: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
---
>         -: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
8135c8135
<     #####: 2064:				return 1;
---
>         -: 2064:				return 1;
8139,8144c8139,8144
<     #####: 2068:		if(!bridge1->local_clientid){
<     #####: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
<     #####: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
<     #####: 2071:			if(!bridge1->local_clientid){
<     #####: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 2073:				return MOSQ_ERR_NOMEM;
---
>         -: 2068:		if(!bridge1->local_clientid){
>         -: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
>         -: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
>         -: 2071:			if(!bridge1->local_clientid){
>         -: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 2073:				return MOSQ_ERR_NOMEM;
8146c8146
<     #####: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
---
>         -: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
8150,8155c8150,8155
<     #####: 2079:	for(i=0; i<config->bridge_count; i++){
<     #####: 2080:		bridge1 = &config->bridges[i];
<     #####: 2081:		for(j=i+1; j<config->bridge_count; j++){
<     #####: 2082:			bridge2 = &config->bridges[j];
<     #####: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
<     #####: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
---
>         -: 2079:	for(i=0; i<config->bridge_count; i++){
>         -: 2080:		bridge1 = &config->bridges[i];
>         -: 2081:		for(j=i+1; j<config->bridge_count; j++){
>         -: 2082:			bridge2 = &config->bridges[j];
>         -: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
>         -: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
8159c8159
<     #####: 2088:				return MOSQ_ERR_INVAL;
---
>         -: 2088:				return MOSQ_ERR_INVAL;
8164c8164
<         -: 2093:	return MOSQ_ERR_SUCCESS;
---
>     #####: 2093:	return MOSQ_ERR_SUCCESS;
