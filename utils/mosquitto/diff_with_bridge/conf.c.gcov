321,326c321,326
<     #####:  319:	if(config->bridges){
<     #####:  320:		for(i=0; i<config->bridge_count; i++){
<     #####:  321:			mosquitto__free(config->bridges[i].name);
<     #####:  322:			if(config->bridges[i].addresses){
<     #####:  323:				for(j=0; j<config->bridges[i].address_count; j++){
<     #####:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
---
>         -:  319:	if(config->bridges){
>         -:  320:		for(i=0; i<config->bridge_count; i++){
>         -:  321:			mosquitto__free(config->bridges[i].name);
>         -:  322:			if(config->bridges[i].addresses){
>         -:  323:				for(j=0; j<config->bridges[i].address_count; j++){
>         -:  324:					mosquitto__free(config->bridges[i].addresses[j].address);
328c328
<     #####:  326:				mosquitto__free(config->bridges[i].addresses);
---
>         -:  326:				mosquitto__free(config->bridges[i].addresses);
330,342c330,342
<     #####:  328:			mosquitto__free(config->bridges[i].remote_clientid);
<     #####:  329:			mosquitto__free(config->bridges[i].remote_username);
<     #####:  330:			mosquitto__free(config->bridges[i].remote_password);
<     #####:  331:			mosquitto__free(config->bridges[i].local_clientid);
<     #####:  332:			mosquitto__free(config->bridges[i].local_username);
<     #####:  333:			mosquitto__free(config->bridges[i].local_password);
<     #####:  334:			if(config->bridges[i].topics){
<     #####:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
<     #####:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
<     #####:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
<     #####:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
<     #####:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
<     #####:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
---
>         -:  328:			mosquitto__free(config->bridges[i].remote_clientid);
>         -:  329:			mosquitto__free(config->bridges[i].remote_username);
>         -:  330:			mosquitto__free(config->bridges[i].remote_password);
>         -:  331:			mosquitto__free(config->bridges[i].local_clientid);
>         -:  332:			mosquitto__free(config->bridges[i].local_username);
>         -:  333:			mosquitto__free(config->bridges[i].local_password);
>         -:  334:			if(config->bridges[i].topics){
>         -:  335:				for(j=0; j<config->bridges[i].topic_count; j++){
>         -:  336:					mosquitto__free(config->bridges[i].topics[j].topic);
>         -:  337:					mosquitto__free(config->bridges[i].topics[j].local_prefix);
>         -:  338:					mosquitto__free(config->bridges[i].topics[j].remote_prefix);
>         -:  339:					mosquitto__free(config->bridges[i].topics[j].local_topic);
>         -:  340:					mosquitto__free(config->bridges[i].topics[j].remote_topic);
344c344
<     #####:  342:				mosquitto__free(config->bridges[i].topics);
---
>         -:  342:				mosquitto__free(config->bridges[i].topics);
346c346
<     #####:  344:			mosquitto__free(config->bridges[i].notification_topic);
---
>         -:  344:			mosquitto__free(config->bridges[i].notification_topic);
348,349c348,349
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
351,352c351,352
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
356c356
<     #####:  354:		mosquitto__free(config->bridges);
---
>         -:  354:		mosquitto__free(config->bridges);
521c521
<     #####:  519:	return config__check(config);
---
>         -:  519:	return config__check(config);
693,696c693,696
<     #####:  691:	for(i=0; i<config->bridge_count; i++){
<     #####:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
<     #####:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  694:			return MOSQ_ERR_INVAL;
---
>         -:  691:	for(i=0; i<config->bridge_count; i++){
>         -:  692:		if(!config->bridges[i].name || !config->bridges[i].addresses || !config->bridges[i].topic_count){
>         -:  693:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  694:			return MOSQ_ERR_INVAL;
699,701c699,701
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
703,705c703,705
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
730c730
<     #####:  728:	struct mosquitto__bridge *cur_bridge = NULL;
---
>         -:  728:	struct mosquitto__bridge *cur_bridge = NULL;
761,764c761,764
<     #####:  759:					if(reload) continue; // FIXME
<     #####:  760:					if(!cur_bridge || cur_bridge->addresses){
<     #####:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  762:						return MOSQ_ERR_INVAL;
---
>         -:  759:					if(reload) continue; // FIXME
>         -:  760:					if(!cur_bridge || cur_bridge->addresses){
>         -:  761:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  762:						return MOSQ_ERR_INVAL;
766,767c766,767
<     #####:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
<     #####:  765:						if (token[0] == '#'){
---
>         -:  764:					while((token = strtok_r(NULL, " ", &saveptr))){
>         -:  765:						if (token[0] == '#'){
770,774c770,774
<     #####:  768:						cur_bridge->address_count++;
<     #####:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
<     #####:  770:						if(!cur_bridge->addresses){
<     #####:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####:  772:							return MOSQ_ERR_NOMEM;
---
>         -:  768:						cur_bridge->address_count++;
>         -:  769:						cur_bridge->addresses = mosquitto__realloc(cur_bridge->addresses, sizeof(struct bridge_address)*cur_bridge->address_count);
>         -:  770:						if(!cur_bridge->addresses){
>         -:  771:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -:  772:							return MOSQ_ERR_NOMEM;
776c776
<     #####:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
---
>         -:  774:						cur_bridge->addresses[cur_bridge->address_count-1].address = token;
778c778
<     #####:  776:					for(i=0; i<cur_bridge->address_count; i++){
---
>         -:  776:					for(i=0; i<cur_bridge->address_count; i++){
783,784c783,784
<     #####:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
<     #####:  782:						if(tmp_char){
---
>         -:  781:						tmp_char = strrchr(cur_bridge->addresses[i].address, ':');
>         -:  782:						if(tmp_char){
787c787
<     #####:  785:							tmp_char[0] = '\0';
---
>         -:  785:							tmp_char[0] = '\0';
790,793c790,793
<     #####:  788:							tmp_int = atoi(&tmp_char[1]);
<     #####:  789:							if(tmp_int < 1 || tmp_int > 65535){
<     #####:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
<     #####:  791:								return MOSQ_ERR_INVAL;
---
>         -:  788:							tmp_int = atoi(&tmp_char[1]);
>         -:  789:							if(tmp_int < 1 || tmp_int > 65535){
>         -:  790:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid port value (%d).", tmp_int);
>         -:  791:								return MOSQ_ERR_INVAL;
795c795
<     #####:  793:							cur_bridge->addresses[i].port = tmp_int;
---
>         -:  793:							cur_bridge->addresses[i].port = tmp_int;
797c797
<     #####:  795:							cur_bridge->addresses[i].port = 1883;
---
>         -:  795:							cur_bridge->addresses[i].port = 1883;
804,805c804,805
<     #####:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
<     #####:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
---
>         -:  802:						cur_bridge->addresses[i].address = mosquitto__strdup(cur_bridge->addresses[i].address);
>         -:  803:						conf__attempt_resolve(cur_bridge->addresses[i].address, "bridge address", MOSQ_LOG_WARNING, "Warning");
807,809c807,809
<     #####:  805:					if(cur_bridge->address_count == 0){
<     #####:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
<     #####:  807:						return MOSQ_ERR_INVAL;
---
>         -:  805:					if(cur_bridge->address_count == 0){
>         -:  806:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty address value in configuration.");
>         -:  807:						return MOSQ_ERR_INVAL;
812c812
<         -:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  810:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
909,912c909,912
<     #####:  907:					if(reload) continue; // FIXME
<     #####:  908:					if(!cur_bridge){
<     #####:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  910:						return MOSQ_ERR_INVAL;
---
>         -:  907:					if(reload) continue; // FIXME
>         -:  908:					if(!cur_bridge){
>         -:  909:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  910:						return MOSQ_ERR_INVAL;
914c914
<     #####:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  912:					if(conf__parse_bool(&token, "bridge_attempt_unsubscribe", &cur_bridge->attempt_unsubscribe, saveptr)) return MOSQ_ERR_INVAL;
916c916
<         -:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####:  914:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
920,923c920,923
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
926,928c926,928
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
931c931
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
933c933
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
937,940c937,940
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
943,945c943,945
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
948c948
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
950c950
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
954,957c954,957
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
960,962c960,962
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
965c965
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
967c967
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
971,974c971,974
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
976,978c976,978
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
980c980
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
982c982
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
986,989c986,989
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
991,993c991,993
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
996c996
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
1000,1003c1000,1003
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
1006,1008c1006,1008
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
1011c1011
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
1013c1013
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
1017,1020c1017,1020
<     #####: 1015:					if(reload) continue; // FIXME
<     #####: 1016:					if(!cur_bridge){
<     #####: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1018:						return MOSQ_ERR_INVAL;
---
>         -: 1015:					if(reload) continue; // FIXME
>         -: 1016:					if(!cur_bridge){
>         -: 1017:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1018:						return MOSQ_ERR_INVAL;
1022,1027c1022,1027
<     #####: 1020:					token = strtok_r(NULL, "", &saveptr);
<     #####: 1021:					if(token){
<     #####: 1022:						if(!strcmp(token, "mqttv31")){
<     #####: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
<     #####: 1024:						}else if(!strcmp(token, "mqttv311")){
<     #####: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
---
>         -: 1020:					token = strtok_r(NULL, "", &saveptr);
>         -: 1021:					if(token){
>         -: 1022:						if(!strcmp(token, "mqttv31")){
>         -: 1023:							cur_bridge->protocol_version = mosq_p_mqtt31;
>         -: 1024:						}else if(!strcmp(token, "mqttv311")){
>         -: 1025:							cur_bridge->protocol_version = mosq_p_mqtt311;
1029,1030c1029,1030
<     #####: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
<     #####: 1028:							return MOSQ_ERR_INVAL;
---
>         -: 1027:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge_protocol_version value (%s).", token);
>         -: 1028:							return MOSQ_ERR_INVAL;
1033,1034c1033,1034
<     #####: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
<     #####: 1032:						return MOSQ_ERR_INVAL;
---
>         -: 1031:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty bridge_protocol_version value in configuration.");
>         -: 1032:						return MOSQ_ERR_INVAL;
1037c1037
<         -: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1035:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1041,1044c1041,1044
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
1046,1048c1046,1048
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
1050c1050
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
1052c1052
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
1056,1059c1056,1059
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
1061c1061
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
1063c1063
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
1106,1109c1106,1109
<     #####: 1104:					if(reload) continue; // FIXME
<     #####: 1105:					if(!cur_bridge){
<     #####: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1107:						return MOSQ_ERR_INVAL;
---
>         -: 1104:					if(reload) continue; // FIXME
>         -: 1105:					if(!cur_bridge){
>         -: 1106:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1107:						return MOSQ_ERR_INVAL;
1111c1111
<     #####: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1109:					if(conf__parse_string(&token, "bridge remote clientid", &cur_bridge->remote_clientid, saveptr)) return MOSQ_ERR_INVAL;
1113c1113
<         -: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1111:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1117,1120c1117,1120
<     #####: 1115:					if(reload) continue; // FIXME
<     #####: 1116:					if(!cur_bridge){
<     #####: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1118:						return MOSQ_ERR_INVAL;
---
>         -: 1115:					if(reload) continue; // FIXME
>         -: 1116:					if(!cur_bridge){
>         -: 1117:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1118:						return MOSQ_ERR_INVAL;
1122c1122
<     #####: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1120:					if(conf__parse_bool(&token, "cleansession", &cur_bridge->clean_session, saveptr)) return MOSQ_ERR_INVAL;
1124c1124
<         -: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1122:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1134,1136c1134,1136
<     #####: 1132:					if(reload) continue; // FIXME
<     #####: 1133:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1134:					if(token){
---
>         -: 1132:					if(reload) continue; // FIXME
>         -: 1133:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1134:					if(token){
1138,1141c1138,1141
<     #####: 1136:						for(i=0; i<config->bridge_count; i++){
<     #####: 1137:							if(!strcmp(config->bridges[i].name, token)){
<     #####: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
<     #####: 1139:								return MOSQ_ERR_INVAL;
---
>         -: 1136:						for(i=0; i<config->bridge_count; i++){
>         -: 1137:							if(!strcmp(config->bridges[i].name, token)){
>         -: 1138:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Duplicate bridge name \"%s\".", token);
>         -: 1139:								return MOSQ_ERR_INVAL;
1145,1149c1145,1149
<     #####: 1143:						config->bridge_count++;
<     #####: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
<     #####: 1145:						if(!config->bridges){
<     #####: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1147:							return MOSQ_ERR_NOMEM;
---
>         -: 1143:						config->bridge_count++;
>         -: 1144:						config->bridges = mosquitto__realloc(config->bridges, config->bridge_count*sizeof(struct mosquitto__bridge));
>         -: 1145:						if(!config->bridges){
>         -: 1146:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1147:							return MOSQ_ERR_NOMEM;
1151,1156c1151,1156
<     #####: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
<     #####: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
<     #####: 1151:						cur_bridge->name = mosquitto__strdup(token);
<     #####: 1152:						if(!cur_bridge->name){
<     #####: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1154:							return MOSQ_ERR_NOMEM;
---
>         -: 1149:						cur_bridge = &(config->bridges[config->bridge_count-1]);
>         -: 1150:						memset(cur_bridge, 0, sizeof(struct mosquitto__bridge));
>         -: 1151:						cur_bridge->name = mosquitto__strdup(token);
>         -: 1152:						if(!cur_bridge->name){
>         -: 1153:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1154:							return MOSQ_ERR_NOMEM;
1158,1168c1158,1168
<     #####: 1156:						cur_bridge->keepalive = 60;
<     #####: 1157:						cur_bridge->notifications = true;
<     #####: 1158:						cur_bridge->notifications_local_only = false;
<     #####: 1159:						cur_bridge->start_type = bst_automatic;
<     #####: 1160:						cur_bridge->idle_timeout = 60;
<     #####: 1161:						cur_bridge->restart_timeout = 30;
<     #####: 1162:						cur_bridge->threshold = 10;
<     #####: 1163:						cur_bridge->try_private = true;
<     #####: 1164:						cur_bridge->attempt_unsubscribe = true;
<     #####: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
<     #####: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
---
>         -: 1156:						cur_bridge->keepalive = 60;
>         -: 1157:						cur_bridge->notifications = true;
>         -: 1158:						cur_bridge->notifications_local_only = false;
>         -: 1159:						cur_bridge->start_type = bst_automatic;
>         -: 1160:						cur_bridge->idle_timeout = 60;
>         -: 1161:						cur_bridge->restart_timeout = 30;
>         -: 1162:						cur_bridge->threshold = 10;
>         -: 1163:						cur_bridge->try_private = true;
>         -: 1164:						cur_bridge->attempt_unsubscribe = true;
>         -: 1165:						cur_bridge->protocol_version = mosq_p_mqtt311;
>         -: 1166:						cur_bridge->primary_retry_sock = INVALID_SOCKET;
1170,1171c1170,1171
<     #####: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
<     #####: 1169:						return MOSQ_ERR_INVAL;
---
>         -: 1168:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty connection value in configuration.");
>         -: 1169:						return MOSQ_ERR_INVAL;
1174c1174
<         -: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1172:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1194,1197c1194,1197
<     #####: 1192:					if(reload) continue; // FIXME
<     #####: 1193:					if(!cur_bridge){
<     #####: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1195:						return MOSQ_ERR_INVAL;
---
>         -: 1192:					if(reload) continue; // FIXME
>         -: 1193:					if(!cur_bridge){
>         -: 1194:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1195:						return MOSQ_ERR_INVAL;
1199,1202c1199,1202
<     #####: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1198:					if(cur_bridge->idle_timeout < 1){
<     #####: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
<     #####: 1200:						cur_bridge->idle_timeout = 1;
---
>         -: 1197:					if(conf__parse_int(&token, "idle_timeout", &cur_bridge->idle_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1198:					if(cur_bridge->idle_timeout < 1){
>         -: 1199:						log__printf(NULL, MOSQ_LOG_NOTICE, "idle_timeout interval too low, using 1 second.");
>         -: 1200:						cur_bridge->idle_timeout = 1;
1205c1205
<         -: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1203:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1239,1242c1239,1242
<     #####: 1237:					if(reload) continue; // FIXME
<     #####: 1238:					if(!cur_bridge){
<     #####: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1240:						return MOSQ_ERR_INVAL;
---
>         -: 1237:					if(reload) continue; // FIXME
>         -: 1238:					if(!cur_bridge){
>         -: 1239:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1240:						return MOSQ_ERR_INVAL;
1244,1247c1244,1247
<     #####: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1243:					if(cur_bridge->keepalive < 5){
<     #####: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
<     #####: 1245:						cur_bridge->keepalive = 5;
---
>         -: 1242:					if(conf__parse_int(&token, "keepalive_interval", &cur_bridge->keepalive, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1243:					if(cur_bridge->keepalive < 5){
>         -: 1244:						log__printf(NULL, MOSQ_LOG_NOTICE, "keepalive interval too low, using 5 seconds.");
>         -: 1245:						cur_bridge->keepalive = 5;
1250c1250
<         -: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1248:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1311,1314c1311,1314
<     #####: 1309:					if(reload) continue; // FIXME
<     #####: 1310:					if(!cur_bridge){
<     #####: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1312:						return MOSQ_ERR_INVAL;
---
>         -: 1309:					if(reload) continue; // FIXME
>         -: 1310:					if(!cur_bridge){
>         -: 1311:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1312:						return MOSQ_ERR_INVAL;
1316c1316
<     #####: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1314:					if(conf__parse_string(&token, "bridge local clientd", &cur_bridge->local_clientid, saveptr)) return MOSQ_ERR_INVAL;
1318c1318
<         -: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1316:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1322,1325c1322,1325
<     #####: 1320:					if(reload) continue; // FIXME
<     #####: 1321:					if(!cur_bridge){
<     #####: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1323:						return MOSQ_ERR_INVAL;
---
>         -: 1320:					if(reload) continue; // FIXME
>         -: 1321:					if(!cur_bridge){
>         -: 1322:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1323:						return MOSQ_ERR_INVAL;
1327c1327
<     #####: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1325:					if(conf__parse_string(&token, "bridge local_password", &cur_bridge->local_password, saveptr)) return MOSQ_ERR_INVAL;
1329c1329
<         -: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1327:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1333,1336c1333,1336
<     #####: 1331:					if(reload) continue; // FIXME
<     #####: 1332:					if(!cur_bridge){
<     #####: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1334:						return MOSQ_ERR_INVAL;
---
>         -: 1331:					if(reload) continue; // FIXME
>         -: 1332:					if(!cur_bridge){
>         -: 1333:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1334:						return MOSQ_ERR_INVAL;
1338c1338
<     #####: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1336:					if(conf__parse_string(&token, "bridge local_username", &cur_bridge->local_username, saveptr)) return MOSQ_ERR_INVAL;
1340c1340
<         -: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1338:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1531,1534c1531,1534
<     #####: 1529:					if(reload) continue; // FIXME
<     #####: 1530:					if(!cur_bridge){
<     #####: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1532:						return MOSQ_ERR_INVAL;
---
>         -: 1529:					if(reload) continue; // FIXME
>         -: 1530:					if(!cur_bridge){
>         -: 1531:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1532:						return MOSQ_ERR_INVAL;
1536c1536
<     #####: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1534:					if(conf__parse_bool(&token, "notifications", &cur_bridge->notifications, saveptr)) return MOSQ_ERR_INVAL;
1538c1538
<         -: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1536:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1542,1545c1542,1545
<     #####: 1540:					if(reload) continue; // FIXME
<     #####: 1541:					if(!cur_bridge){
<     #####: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
<     #####: 1543:						return MOSQ_ERR_INVAL;
---
>         -: 1540:					if(reload) continue; // FIXME
>         -: 1541:					if(!cur_bridge){
>         -: 1542:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration");
>         -: 1543:						return MOSQ_ERR_INVAL;
1547c1547
<     #####: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1545:					if(conf__parse_bool(&token, "notifications_local_only", &cur_bridge->notifications_local_only, saveptr)) return MOSQ_ERR_INVAL;
1549c1549
<         -: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1547:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1553,1556c1553,1556
<     #####: 1551:					if(reload) continue; // FIXME
<     #####: 1552:					if(!cur_bridge){
<     #####: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1554:						return MOSQ_ERR_INVAL;
---
>         -: 1551:					if(reload) continue; // FIXME
>         -: 1552:					if(!cur_bridge){
>         -: 1553:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1554:						return MOSQ_ERR_INVAL;
1558c1558
<     #####: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1556:					if(conf__parse_string(&token, "notification_topic", &cur_bridge->notification_topic, saveptr)) return MOSQ_ERR_INVAL;
1560c1560
<         -: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1558:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1564,1567c1564,1567
<     #####: 1562:					if(reload) continue; // FIXME
<     #####: 1563:					if(!cur_bridge){
<     #####: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1565:						return MOSQ_ERR_INVAL;
---
>         -: 1562:					if(reload) continue; // FIXME
>         -: 1563:					if(!cur_bridge){
>         -: 1564:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1565:						return MOSQ_ERR_INVAL;
1569c1569
<     #####: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1567:					if(conf__parse_string(&token, "bridge remote_password", &cur_bridge->remote_password, saveptr)) return MOSQ_ERR_INVAL;
1571c1571
<         -: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1569:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1691,1694c1691,1694
<     #####: 1689:					if(reload) continue; // FIXME
<     #####: 1690:					if(!cur_bridge){
<     #####: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1692:						return MOSQ_ERR_INVAL;
---
>         -: 1689:					if(reload) continue; // FIXME
>         -: 1690:					if(!cur_bridge){
>         -: 1691:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1692:						return MOSQ_ERR_INVAL;
1696,1699c1696,1699
<     #####: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1695:					if(cur_bridge->restart_timeout < 1){
<     #####: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
<     #####: 1697:						cur_bridge->restart_timeout = 1;
---
>         -: 1694:					if(conf__parse_int(&token, "restart_timeout", &cur_bridge->restart_timeout, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1695:					if(cur_bridge->restart_timeout < 1){
>         -: 1696:						log__printf(NULL, MOSQ_LOG_NOTICE, "restart_timeout interval too low, using 1 second.");
>         -: 1697:						cur_bridge->restart_timeout = 1;
1702c1702
<         -: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1700:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1708,1711c1708,1711
<     #####: 1706:					if(reload) continue; // FIXME
<     #####: 1707:					if(!cur_bridge){
<     #####: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1709:						return MOSQ_ERR_INVAL;
---
>         -: 1706:					if(reload) continue; // FIXME
>         -: 1707:					if(!cur_bridge){
>         -: 1708:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1709:						return MOSQ_ERR_INVAL;
1713c1713
<     #####: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1711:					if(conf__parse_bool(&token, "round_robin", &cur_bridge->round_robin, saveptr)) return MOSQ_ERR_INVAL;
1715c1715
<         -: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1713:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1721,1724c1721,1724
<     #####: 1719:					if(reload) continue; // FIXME
<     #####: 1720:					if(!cur_bridge){
<     #####: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1722:						return MOSQ_ERR_INVAL;
---
>         -: 1719:					if(reload) continue; // FIXME
>         -: 1720:					if(!cur_bridge){
>         -: 1721:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1722:						return MOSQ_ERR_INVAL;
1726,1736c1726,1736
<     #####: 1724:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1725:					if(token){
<     #####: 1726:						if(!strcmp(token, "automatic")){
<     #####: 1727:							cur_bridge->start_type = bst_automatic;
<     #####: 1728:						}else if(!strcmp(token, "lazy")){
<     #####: 1729:							cur_bridge->start_type = bst_lazy;
<     #####: 1730:						}else if(!strcmp(token, "manual")){
<     #####: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
<     #####: 1732:							return MOSQ_ERR_INVAL;
<     #####: 1733:						}else if(!strcmp(token, "once")){
<     #####: 1734:							cur_bridge->start_type = bst_once;
---
>         -: 1724:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1725:					if(token){
>         -: 1726:						if(!strcmp(token, "automatic")){
>         -: 1727:							cur_bridge->start_type = bst_automatic;
>         -: 1728:						}else if(!strcmp(token, "lazy")){
>         -: 1729:							cur_bridge->start_type = bst_lazy;
>         -: 1730:						}else if(!strcmp(token, "manual")){
>         -: 1731:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Manual start_type not supported.");
>         -: 1732:							return MOSQ_ERR_INVAL;
>         -: 1733:						}else if(!strcmp(token, "once")){
>         -: 1734:							cur_bridge->start_type = bst_once;
1738,1739c1738,1739
<     #####: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
<     #####: 1737:							return MOSQ_ERR_INVAL;
---
>         -: 1736:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid start_type value in configuration (%s).", token);
>         -: 1737:							return MOSQ_ERR_INVAL;
1742,1743c1742,1743
<     #####: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
<     #####: 1741:						return MOSQ_ERR_INVAL;
---
>         -: 1740:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty start_type value in configuration.");
>         -: 1741:						return MOSQ_ERR_INVAL;
1746c1746
<         -: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1744:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1774,1777c1774,1777
<     #####: 1772:					if(reload) continue; // FIXME
<     #####: 1773:					if(!cur_bridge){
<     #####: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1775:						return MOSQ_ERR_INVAL;
---
>         -: 1772:					if(reload) continue; // FIXME
>         -: 1773:					if(!cur_bridge){
>         -: 1774:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1775:						return MOSQ_ERR_INVAL;
1779,1782c1779,1782
<     #####: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
<     #####: 1778:					if(cur_bridge->threshold < 1){
<     #####: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
<     #####: 1780:						cur_bridge->threshold = 1;
---
>         -: 1777:					if(conf__parse_int(&token, "threshold", &cur_bridge->threshold, saveptr)) return MOSQ_ERR_INVAL;
>         -: 1778:					if(cur_bridge->threshold < 1){
>         -: 1779:						log__printf(NULL, MOSQ_LOG_NOTICE, "threshold too low, using 1 message.");
>         -: 1780:						cur_bridge->threshold = 1;
1785c1785
<         -: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1783:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1796,1799c1796,1799
<     #####: 1794:					if(reload) continue; // FIXME
<     #####: 1795:					if(!cur_bridge){
<     #####: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1797:						return MOSQ_ERR_INVAL;
---
>         -: 1794:					if(reload) continue; // FIXME
>         -: 1795:					if(!cur_bridge){
>         -: 1796:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1797:						return MOSQ_ERR_INVAL;
1801,1808c1801,1808
<     #####: 1799:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1800:					if(token){
<     #####: 1801:						cur_bridge->topic_count++;
<     #####: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
<     #####: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
<     #####: 1804:						if(!cur_bridge->topics){
<     #####: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1806:							return MOSQ_ERR_NOMEM;
---
>         -: 1799:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1800:					if(token){
>         -: 1801:						cur_bridge->topic_count++;
>         -: 1802:						cur_bridge->topics = mosquitto__realloc(cur_bridge->topics,
>         -: 1803:								sizeof(struct mosquitto__bridge_topic)*cur_bridge->topic_count);
>         -: 1804:						if(!cur_bridge->topics){
>         -: 1805:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1806:							return MOSQ_ERR_NOMEM;
1810,1812c1810,1812
<     #####: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
<     #####: 1809:						if(!strcmp(token, "\"\"")){
<     #####: 1810:							cur_topic->topic = NULL;
---
>         -: 1808:						cur_topic = &cur_bridge->topics[cur_bridge->topic_count-1];
>         -: 1809:						if(!strcmp(token, "\"\"")){
>         -: 1810:							cur_topic->topic = NULL;
1814,1817c1814,1817
<     #####: 1812:							cur_topic->topic = mosquitto__strdup(token);
<     #####: 1813:							if(!cur_topic->topic){
<     #####: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1815:								return MOSQ_ERR_NOMEM;
---
>         -: 1812:							cur_topic->topic = mosquitto__strdup(token);
>         -: 1813:							if(!cur_topic->topic){
>         -: 1814:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1815:								return MOSQ_ERR_NOMEM;
1820,1823c1820,1823
<     #####: 1818:						cur_topic->direction = bd_out;
<     #####: 1819:						cur_topic->qos = 0;
<     #####: 1820:						cur_topic->local_prefix = NULL;
<     #####: 1821:						cur_topic->remote_prefix = NULL;
---
>         -: 1818:						cur_topic->direction = bd_out;
>         -: 1819:						cur_topic->qos = 0;
>         -: 1820:						cur_topic->local_prefix = NULL;
>         -: 1821:						cur_topic->remote_prefix = NULL;
1825,1826c1825,1826
<     #####: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
<     #####: 1824:						return MOSQ_ERR_INVAL;
---
>         -: 1823:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Empty topic value in configuration.");
>         -: 1824:						return MOSQ_ERR_INVAL;
1828,1835c1828,1835
<     #####: 1826:					token = strtok_r(NULL, " ", &saveptr);
<     #####: 1827:					if(token){
<     #####: 1828:						if(!strcasecmp(token, "out")){
<     #####: 1829:							cur_topic->direction = bd_out;
<     #####: 1830:						}else if(!strcasecmp(token, "in")){
<     #####: 1831:							cur_topic->direction = bd_in;
<     #####: 1832:						}else if(!strcasecmp(token, "both")){
<     #####: 1833:							cur_topic->direction = bd_both;
---
>         -: 1826:					token = strtok_r(NULL, " ", &saveptr);
>         -: 1827:					if(token){
>         -: 1828:						if(!strcasecmp(token, "out")){
>         -: 1829:							cur_topic->direction = bd_out;
>         -: 1830:						}else if(!strcasecmp(token, "in")){
>         -: 1831:							cur_topic->direction = bd_in;
>         -: 1832:						}else if(!strcasecmp(token, "both")){
>         -: 1833:							cur_topic->direction = bd_both;
1837,1838c1837,1838
<     #####: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
<     #####: 1836:							return MOSQ_ERR_INVAL;
---
>         -: 1835:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic direction '%s'.", token);
>         -: 1836:							return MOSQ_ERR_INVAL;
1840,1843c1840,1843
<     #####: 1838:						token = strtok_r(NULL, " ", &saveptr);
<     #####: 1839:						if(token){
<     #####: 1840:							if (token[0] == '#'){
<     #####: 1841:								strtok_r(NULL, "", &saveptr);
---
>         -: 1838:						token = strtok_r(NULL, " ", &saveptr);
>         -: 1839:						if(token){
>         -: 1840:							if (token[0] == '#'){
>         -: 1841:								strtok_r(NULL, "", &saveptr);
1845,1848c1845,1848
<     #####: 1843:							cur_topic->qos = atoi(token);
<     #####: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
<     #####: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
<     #####: 1846:								return MOSQ_ERR_INVAL;
---
>         -: 1843:							cur_topic->qos = atoi(token);
>         -: 1844:							if(cur_topic->qos < 0 || cur_topic->qos > 2){
>         -: 1845:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge QoS level '%s'.", token);
>         -: 1846:								return MOSQ_ERR_INVAL;
1851,1857c1851,1857
<     #####: 1849:							token = strtok_r(NULL, " ", &saveptr);
<     #####: 1850:							if(token){
<     #####: 1851:								cur_bridge->topic_remapping = true;
<     #####: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1853:									cur_topic->local_prefix = NULL;
<     #####: 1854:									if (token[0] == '#'){
<     #####: 1855:										strtok_r(NULL, "", &saveptr);
---
>         -: 1849:							token = strtok_r(NULL, " ", &saveptr);
>         -: 1850:							if(token){
>         -: 1851:								cur_bridge->topic_remapping = true;
>         -: 1852:								if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1853:									cur_topic->local_prefix = NULL;
>         -: 1854:									if (token[0] == '#'){
>         -: 1855:										strtok_r(NULL, "", &saveptr);
1860,1862c1860,1862
<     #####: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
<     #####: 1860:										return MOSQ_ERR_INVAL;
---
>         -: 1858:									if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1859:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic local prefix '%s'.", token);
>         -: 1860:										return MOSQ_ERR_INVAL;
1864,1867c1864,1867
<     #####: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
<     #####: 1863:									if(!cur_topic->local_prefix){
<     #####: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1865:										return MOSQ_ERR_NOMEM;
---
>         -: 1862:									cur_topic->local_prefix = mosquitto__strdup(token);
>         -: 1863:									if(!cur_topic->local_prefix){
>         -: 1864:										log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1865:										return MOSQ_ERR_NOMEM;
1871,1874c1871,1874
<     #####: 1869:								token = strtok_r(NULL, " ", &saveptr);
<     #####: 1870:								if(token){
<     #####: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
<     #####: 1872:										cur_topic->remote_prefix = NULL;
---
>         -: 1869:								token = strtok_r(NULL, " ", &saveptr);
>         -: 1870:								if(token){
>         -: 1871:									if(!strcmp(token, "\"\"") || token[0] == '#'){
>         -: 1872:										cur_topic->remote_prefix = NULL;
1876,1878c1876,1878
<     #####: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
<     #####: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
<     #####: 1876:											return MOSQ_ERR_INVAL;
---
>         -: 1874:										if(mosquitto_pub_topic_check(token) != MOSQ_ERR_SUCCESS){
>         -: 1875:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge topic remote prefix '%s'.", token);
>         -: 1876:											return MOSQ_ERR_INVAL;
1880,1883c1880,1883
<     #####: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
<     #####: 1879:										if(!cur_topic->remote_prefix){
<     #####: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1881:											return MOSQ_ERR_NOMEM;
---
>         -: 1878:										cur_topic->remote_prefix = mosquitto__strdup(token);
>         -: 1879:										if(!cur_topic->remote_prefix){
>         -: 1880:											log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1881:											return MOSQ_ERR_NOMEM;
1890,1891c1890,1891
<     #####: 1888:					if(cur_topic->topic == NULL &&
<     #####: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
---
>         -: 1888:					if(cur_topic->topic == NULL &&
>         -: 1889:							(cur_topic->local_prefix == NULL || cur_topic->remote_prefix == NULL)){
1893,1894c1893,1894
<     #####: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
<     #####: 1892:						return MOSQ_ERR_INVAL;
---
>         -: 1891:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge remapping.");
>         -: 1892:						return MOSQ_ERR_INVAL;
1896,1902c1896,1902
<     #####: 1894:					if(cur_topic->local_prefix){
<     #####: 1895:						if(cur_topic->topic){
<     #####: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
<     #####: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
<     #####: 1898:							if(!cur_topic->local_topic){
<     #####: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1900:								return MOSQ_ERR_NOMEM;
---
>         -: 1894:					if(cur_topic->local_prefix){
>         -: 1895:						if(cur_topic->topic){
>         -: 1896:							len = strlen(cur_topic->topic) + strlen(cur_topic->local_prefix)+1;
>         -: 1897:							cur_topic->local_topic = mosquitto__malloc(len+1);
>         -: 1898:							if(!cur_topic->local_topic){
>         -: 1899:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1900:								return MOSQ_ERR_NOMEM;
1904,1905c1904,1905
<     #####: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
<     #####: 1903:							cur_topic->local_topic[len] = '\0';
---
>         -: 1902:							snprintf(cur_topic->local_topic, len+1, "%s%s", cur_topic->local_prefix, cur_topic->topic);
>         -: 1903:							cur_topic->local_topic[len] = '\0';
1907,1910c1907,1910
<     #####: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
<     #####: 1906:							if(!cur_topic->local_topic){
<     #####: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1908:								return MOSQ_ERR_NOMEM;
---
>         -: 1905:							cur_topic->local_topic = mosquitto__strdup(cur_topic->local_prefix);
>         -: 1906:							if(!cur_topic->local_topic){
>         -: 1907:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1908:								return MOSQ_ERR_NOMEM;
1914,1917c1914,1917
<     #####: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1913:						if(!cur_topic->local_topic){
<     #####: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1915:							return MOSQ_ERR_NOMEM;
---
>         -: 1912:						cur_topic->local_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1913:						if(!cur_topic->local_topic){
>         -: 1914:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1915:							return MOSQ_ERR_NOMEM;
1921,1927c1921,1927
<     #####: 1919:					if(cur_topic->remote_prefix){
<     #####: 1920:						if(cur_topic->topic){
<     #####: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
<     #####: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
<     #####: 1923:							if(!cur_topic->remote_topic){
<     #####: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1925:								return MOSQ_ERR_NOMEM;
---
>         -: 1919:					if(cur_topic->remote_prefix){
>         -: 1920:						if(cur_topic->topic){
>         -: 1921:							len = strlen(cur_topic->topic) + strlen(cur_topic->remote_prefix)+1;
>         -: 1922:							cur_topic->remote_topic = mosquitto__malloc(len+1);
>         -: 1923:							if(!cur_topic->remote_topic){
>         -: 1924:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1925:								return MOSQ_ERR_NOMEM;
1929,1930c1929,1930
<     #####: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
<     #####: 1928:							cur_topic->remote_topic[len] = '\0';
---
>         -: 1927:							snprintf(cur_topic->remote_topic, len, "%s%s", cur_topic->remote_prefix, cur_topic->topic);
>         -: 1928:							cur_topic->remote_topic[len] = '\0';
1932,1935c1932,1935
<     #####: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
<     #####: 1931:							if(!cur_topic->remote_topic){
<     #####: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1933:								return MOSQ_ERR_NOMEM;
---
>         -: 1930:							cur_topic->remote_topic = mosquitto__strdup(cur_topic->remote_prefix);
>         -: 1931:							if(!cur_topic->remote_topic){
>         -: 1932:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1933:								return MOSQ_ERR_NOMEM;
1939,1942c1939,1942
<     #####: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
<     #####: 1938:						if(!cur_topic->remote_topic){
<     #####: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
<     #####: 1940:							return MOSQ_ERR_NOMEM;
---
>         -: 1937:						cur_topic->remote_topic = mosquitto__strdup(cur_topic->topic);
>         -: 1938:						if(!cur_topic->remote_topic){
>         -: 1939:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
>         -: 1940:							return MOSQ_ERR_NOMEM;
1946c1946
<         -: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1944:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1950,1953c1950,1953
<     #####: 1948:					if(reload) continue; // FIXME
<     #####: 1949:					if(!cur_bridge){
<     #####: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1951:						return MOSQ_ERR_INVAL;
---
>         -: 1948:					if(reload) continue; // FIXME
>         -: 1949:					if(!cur_bridge){
>         -: 1950:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1951:						return MOSQ_ERR_INVAL;
1955c1955
<     #####: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1953:					if(conf__parse_bool(&token, "try_private", &cur_bridge->try_private, saveptr)) return MOSQ_ERR_INVAL;
1957c1957
<         -: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1955:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
1983,1986c1983,1986
<     #####: 1981:					if(reload) continue; // FIXME
<     #####: 1982:					if(!cur_bridge){
<     #####: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1984:						return MOSQ_ERR_INVAL;
---
>         -: 1981:					if(reload) continue; // FIXME
>         -: 1982:					if(!cur_bridge){
>         -: 1983:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1984:						return MOSQ_ERR_INVAL;
1988c1988
<     #####: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1986:					if(conf__parse_string(&token, "bridge remote_username", &cur_bridge->remote_username, saveptr)) return MOSQ_ERR_INVAL;
1990c1990
<         -: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
---
>     #####: 1988:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge support not available.");
2042c2042
<     #####: 2040:static int config__check(struct mosquitto__config *config)
---
>         -: 2040:static int config__check(struct mosquitto__config *config)
2054,2055c2054,2055
<     #####: 2052:	for(i=0; i<config->bridge_count; i++){
<     #####: 2053:		bridge1 = &config->bridges[i];
---
>         -: 2052:	for(i=0; i<config->bridge_count; i++){
>         -: 2053:		bridge1 = &config->bridges[i];
2057,2061c2057,2061
<     #####: 2055:		if(!bridge1->remote_clientid){
<     #####: 2056:			if(!gethostname(hostname, 256)){
<     #####: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
<     #####: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
<     #####: 2059:				if(!bridge1->remote_clientid){
---
>         -: 2055:		if(!bridge1->remote_clientid){
>         -: 2056:			if(!gethostname(hostname, 256)){
>         -: 2057:				len = strlen(hostname) + strlen(bridge1->name) + 2;
>         -: 2058:				bridge1->remote_clientid = mosquitto__malloc(len);
>         -: 2059:				if(!bridge1->remote_clientid){
2064c2064
<     #####: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
---
>         -: 2062:				snprintf(bridge1->remote_clientid, len, "%s.%s", hostname, bridge1->name);
2070,2074c2070,2074
<     #####: 2068:		if(!bridge1->local_clientid){
<     #####: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
<     #####: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
<     #####: 2071:			if(!bridge1->local_clientid){
<     #####: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
---
>         -: 2068:		if(!bridge1->local_clientid){
>         -: 2069:			len = strlen(bridge1->remote_clientid) + strlen("local.") + 2;
>         -: 2070:			bridge1->local_clientid = mosquitto__malloc(len);
>         -: 2071:			if(!bridge1->local_clientid){
>         -: 2072:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
2077c2077
<     #####: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
---
>         -: 2075:			snprintf(bridge1->local_clientid, len, "local.%s", bridge1->remote_clientid);
2081,2086c2081,2086
<     #####: 2079:	for(i=0; i<config->bridge_count; i++){
<     #####: 2080:		bridge1 = &config->bridges[i];
<     #####: 2081:		for(j=i+1; j<config->bridge_count; j++){
<     #####: 2082:			bridge2 = &config->bridges[j];
<     #####: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
<     #####: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
---
>         -: 2079:	for(i=0; i<config->bridge_count; i++){
>         -: 2080:		bridge1 = &config->bridges[i];
>         -: 2081:		for(j=i+1; j<config->bridge_count; j++){
>         -: 2082:			bridge2 = &config->bridges[j];
>         -: 2083:			if(!strcmp(bridge1->local_clientid, bridge2->local_clientid)){
>         -: 2084:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Bridge local_clientid "
