203,210c203,210
<     #####:  201:	for(i=0; i<db->config->listener_count; i++){
<     #####:  202:		for(j=0; j<db->config->listeners[i].sock_count; j++){
<     #####:  203:			if(db->config->listeners[i].socks[j] == listensock){
<     #####:  204:				if(db->config->listeners[i].ssl_ctx){
<     #####:  205:					new_context->ssl = SSL_new(db->config->listeners[i].ssl_ctx);
<     #####:  206:					if(!new_context->ssl){
<     #####:  207:						context__cleanup(db, new_context, true);
<     #####:  208:						return -1;
---
>         -:  201:	for(i=0; i<db->config->listener_count; i++){
>         -:  202:		for(j=0; j<db->config->listeners[i].sock_count; j++){
>         -:  203:			if(db->config->listeners[i].socks[j] == listensock){
>         -:  204:				if(db->config->listeners[i].ssl_ctx){
>         -:  205:					new_context->ssl = SSL_new(db->config->listeners[i].ssl_ctx);
>         -:  206:					if(!new_context->ssl){
>         -:  207:						context__cleanup(db, new_context, true);
>         -:  208:						return -1;
212,221c212,221
<     #####:  210:					SSL_set_ex_data(new_context->ssl, tls_ex_index_context, new_context);
<     #####:  211:					SSL_set_ex_data(new_context->ssl, tls_ex_index_listener, &db->config->listeners[i]);
<     #####:  212:					new_context->want_write = true;
<     #####:  213:					bio = BIO_new_socket(new_sock, BIO_NOCLOSE);
<     #####:  214:					SSL_set_bio(new_context->ssl, bio, bio);
<     #####:  215:					ERR_clear_error();
<     #####:  216:					rc = SSL_accept(new_context->ssl);
<     #####:  217:					if(rc != 1){
<     #####:  218:						rc = SSL_get_error(new_context->ssl, rc);
<     #####:  219:						if(rc == SSL_ERROR_WANT_READ){
---
>         -:  210:					SSL_set_ex_data(new_context->ssl, tls_ex_index_context, new_context);
>         -:  211:					SSL_set_ex_data(new_context->ssl, tls_ex_index_listener, &db->config->listeners[i]);
>         -:  212:					new_context->want_write = true;
>         -:  213:					bio = BIO_new_socket(new_sock, BIO_NOCLOSE);
>         -:  214:					SSL_set_bio(new_context->ssl, bio, bio);
>         -:  215:					ERR_clear_error();
>         -:  216:					rc = SSL_accept(new_context->ssl);
>         -:  217:					if(rc != 1){
>         -:  218:						rc = SSL_get_error(new_context->ssl, rc);
>         -:  219:						if(rc == SSL_ERROR_WANT_READ){
223,224c223,224
<     #####:  221:						}else if(rc == SSL_ERROR_WANT_WRITE){
<     #####:  222:							new_context->want_write = true;
---
>         -:  221:						}else if(rc == SSL_ERROR_WANT_WRITE){
>         -:  222:							new_context->want_write = true;
226,229c226,229
<     #####:  224:							if(db->config->connection_messages == true){
<     #####:  225:								e = ERR_get_error();
<     #####:  226:								while(e){
<     #####:  227:									log__printf(NULL, MOSQ_LOG_NOTICE,
---
>         -:  224:							if(db->config->connection_messages == true){
>         -:  225:								e = ERR_get_error();
>         -:  226:								while(e){
>         -:  227:									log__printf(NULL, MOSQ_LOG_NOTICE,
232c232
<     #####:  230:									e = ERR_get_error();
---
>         -:  230:									e = ERR_get_error();
235,236c235,236
<     #####:  233:							context__cleanup(db, new_context, true);
<     #####:  234:							return -1;
---
>         -:  233:							context__cleanup(db, new_context, true);
>         -:  234:							return -1;
253c253
<     #####:  251:static int client_certificate_verify(int preverify_ok, X509_STORE_CTX *ctx)
---
>         -:  251:static int client_certificate_verify(int preverify_ok, X509_STORE_CTX *ctx)
256c256
<     #####:  254:	return preverify_ok;
---
>         -:  254:	return preverify_ok;
261c261
<     #####:  259:static unsigned int psk_server_callback(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len)
---
>         -:  259:static unsigned int psk_server_callback(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len)
266c266
<     #####:  264:	char *psk_key = NULL;
---
>         -:  264:	char *psk_key = NULL;
270c270
<     #####:  268:	if(!identity) return 0;
---
>         -:  268:	if(!identity) return 0;
272c272
<     #####:  270:	db = mosquitto__get_db();
---
>         -:  270:	db = mosquitto__get_db();
274,275c274,275
<     #####:  272:	context = SSL_get_ex_data(ssl, tls_ex_index_context);
<     #####:  273:	if(!context) return 0;
---
>         -:  272:	context = SSL_get_ex_data(ssl, tls_ex_index_context);
>         -:  273:	if(!context) return 0;
277,278c277,278
<     #####:  275:	listener = SSL_get_ex_data(ssl, tls_ex_index_listener);
<     #####:  276:	if(!listener) return 0;
---
>         -:  275:	listener = SSL_get_ex_data(ssl, tls_ex_index_listener);
>         -:  276:	if(!listener) return 0;
280c280
<     #####:  278:	psk_hint = listener->psk_hint;
---
>         -:  278:	psk_hint = listener->psk_hint;
284,285c284,285
<     #####:  282:	psk_key = mosquitto__calloc(1, max_psk_len*2 + 1);
<     #####:  283:	if(!psk_key) return 0;
---
>         -:  282:	psk_key = mosquitto__calloc(1, max_psk_len*2 + 1);
>         -:  283:	if(!psk_key) return 0;
287,289c287,289
<     #####:  285:	if(mosquitto_psk_key_get(db, context, psk_hint, identity, psk_key, max_psk_len*2) != MOSQ_ERR_SUCCESS){
<     #####:  286:		mosquitto__free(psk_key);
<     #####:  287:		return 0;
---
>         -:  285:	if(mosquitto_psk_key_get(db, context, psk_hint, identity, psk_key, max_psk_len*2) != MOSQ_ERR_SUCCESS){
>         -:  286:		mosquitto__free(psk_key);
>         -:  287:		return 0;
292,295c292,295
<     #####:  290:	len = mosquitto__hex2bin(psk_key, psk, max_psk_len);
<     #####:  291:	if (len < 0){
<     #####:  292:		mosquitto__free(psk_key);
<     #####:  293:		return 0;
---
>         -:  290:	len = mosquitto__hex2bin(psk_key, psk, max_psk_len);
>         -:  291:	if (len < 0){
>         -:  292:		mosquitto__free(psk_key);
>         -:  293:		return 0;
298,302c298,302
<     #####:  296:	if(listener->use_identity_as_username){
<     #####:  297:		context->username = mosquitto__strdup(identity);
<     #####:  298:		if(!context->username){
<     #####:  299:			mosquitto__free(psk_key);
<     #####:  300:			return 0;
---
>         -:  296:	if(listener->use_identity_as_username){
>         -:  297:		context->username = mosquitto__strdup(identity);
>         -:  298:		if(!context->username){
>         -:  299:			mosquitto__free(psk_key);
>         -:  300:			return 0;
306,307c306,307
<     #####:  304:	mosquitto__free(psk_key);
<     #####:  305:	return len;
---
>         -:  304:	mosquitto__free(psk_key);
>         -:  305:	return len;
312c312
<     #####:  310:static int mosquitto__tls_server_ctx(struct mosquitto__listener *listener)
---
>         -:  310:static int mosquitto__tls_server_ctx(struct mosquitto__listener *listener)
321c321
<     #####:  319:	listener->ssl_ctx = SSL_CTX_new(TLS_server_method());
---
>         -:  319:	listener->ssl_ctx = SSL_CTX_new(TLS_server_method());
324,326c324,326
<     #####:  322:	if(!listener->ssl_ctx){
<     #####:  323:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to create TLS context.");
<     #####:  324:		return 1;
---
>         -:  322:	if(!listener->ssl_ctx){
>         -:  323:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to create TLS context.");
>         -:  324:		return 1;
329,336c329,336
<     #####:  327:	if(listener->tls_version == NULL){
<     #####:  328:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3);
<     #####:  329:	}else if(!strcmp(listener->tls_version, "tlsv1.2")){
<     #####:  330:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1);
<     #####:  331:	}else if(!strcmp(listener->tls_version, "tlsv1.1")){
<     #####:  332:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1);
<     #####:  333:	}else if(!strcmp(listener->tls_version, "tlsv1")){
<     #####:  334:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_1);
---
>         -:  327:	if(listener->tls_version == NULL){
>         -:  328:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3);
>         -:  329:	}else if(!strcmp(listener->tls_version, "tlsv1.2")){
>         -:  330:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1);
>         -:  331:	}else if(!strcmp(listener->tls_version, "tlsv1.1")){
>         -:  332:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1);
>         -:  333:	}else if(!strcmp(listener->tls_version, "tlsv1")){
>         -:  334:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_1);
341c341
<     #####:  339:	SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_COMPRESSION);
---
>         -:  339:	SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_COMPRESSION);
345c345
<     #####:  343:	SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
---
>         -:  343:	SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
350c350
<     #####:  348:	SSL_CTX_set_mode(listener->ssl_ctx, SSL_MODE_RELEASE_BUFFERS);
---
>         -:  348:	SSL_CTX_set_mode(listener->ssl_ctx, SSL_MODE_RELEASE_BUFFERS);
359,360c359,360
<     #####:  357:	snprintf(buf, 256, "mosquitto-%d", listener->port);
<     #####:  358:	SSL_CTX_set_session_id_context(listener->ssl_ctx, (unsigned char *)buf, strlen(buf));
---
>         -:  357:	snprintf(buf, 256, "mosquitto-%d", listener->port);
>         -:  358:	SSL_CTX_set_session_id_context(listener->ssl_ctx, (unsigned char *)buf, strlen(buf));
362,366c362,366
<     #####:  360:	if(listener->ciphers){
<     #####:  361:		rc = SSL_CTX_set_cipher_list(listener->ssl_ctx, listener->ciphers);
<     #####:  362:		if(rc == 0){
<     #####:  363:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS ciphers. Check cipher list \"%s\".", listener->ciphers);
<     #####:  364:			return 1;
---
>         -:  360:	if(listener->ciphers){
>         -:  361:		rc = SSL_CTX_set_cipher_list(listener->ssl_ctx, listener->ciphers);
>         -:  362:		if(rc == 0){
>         -:  363:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS ciphers. Check cipher list \"%s\".", listener->ciphers);
>         -:  364:			return 1;
369,372c369,372
<     #####:  367:		rc = SSL_CTX_set_cipher_list(listener->ssl_ctx, "DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:@STRENGTH");
<     #####:  368:		if(rc == 0){
<     #####:  369:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS ciphers. Check cipher list \"%s\".", listener->ciphers);
<     #####:  370:			return 1;
---
>         -:  367:		rc = SSL_CTX_set_cipher_list(listener->ssl_ctx, "DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:@STRENGTH");
>         -:  368:		if(rc == 0){
>         -:  369:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS ciphers. Check cipher list \"%s\".", listener->ciphers);
>         -:  370:			return 1;
467,470c467,470
<     #####:  465:		if((listener->cafile || listener->capath) && listener->certfile && listener->keyfile){
<     #####:  466:			if(mosquitto__tls_server_ctx(listener)){
<     #####:  467:				COMPAT_CLOSE(sock);
<     #####:  468:				return 1;
---
>         -:  465:		if((listener->cafile || listener->capath) && listener->certfile && listener->keyfile){
>         -:  466:			if(mosquitto__tls_server_ctx(listener)){
>         -:  467:				COMPAT_CLOSE(sock);
>         -:  468:				return 1;
473,478c473,478
<     #####:  471:			rc = SSL_CTX_load_verify_locations(listener->ssl_ctx, listener->cafile, listener->capath);
<     #####:  472:			if(rc == 0){
<     #####:  473:				if(listener->cafile && listener->capath){
<     #####:  474:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check cafile \"%s\" and capath \"%s\".", listener->cafile, listener->capath);
<     #####:  475:				}else if(listener->cafile){
<     #####:  476:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check cafile \"%s\".", listener->cafile);
---
>         -:  471:			rc = SSL_CTX_load_verify_locations(listener->ssl_ctx, listener->cafile, listener->capath);
>         -:  472:			if(rc == 0){
>         -:  473:				if(listener->cafile && listener->capath){
>         -:  474:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check cafile \"%s\" and capath \"%s\".", listener->cafile, listener->capath);
>         -:  475:				}else if(listener->cafile){
>         -:  476:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check cafile \"%s\".", listener->cafile);
480c480
<     #####:  478:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check capath \"%s\".", listener->capath);
---
>         -:  478:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check capath \"%s\".", listener->capath);
482,484c482,484
<     #####:  480:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
<     #####:  481:				COMPAT_CLOSE(sock);
<     #####:  482:				return 1;
---
>         -:  480:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
>         -:  481:				COMPAT_CLOSE(sock);
>         -:  482:				return 1;
487,488c487,488
<     #####:  485:			if(listener->require_certificate){
<     #####:  486:				SSL_CTX_set_verify(listener->ssl_ctx, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT, client_certificate_verify);
---
>         -:  485:			if(listener->require_certificate){
>         -:  486:				SSL_CTX_set_verify(listener->ssl_ctx, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT, client_certificate_verify);
490c490
<     #####:  488:				SSL_CTX_set_verify(listener->ssl_ctx, SSL_VERIFY_NONE, client_certificate_verify);
---
>         -:  488:				SSL_CTX_set_verify(listener->ssl_ctx, SSL_VERIFY_NONE, client_certificate_verify);
492,497c492,497
<     #####:  490:			rc = SSL_CTX_use_certificate_chain_file(listener->ssl_ctx, listener->certfile);
<     #####:  491:			if(rc != 1){
<     #####:  492:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load server certificate \"%s\". Check certfile.", listener->certfile);
<     #####:  493:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
<     #####:  494:				COMPAT_CLOSE(sock);
<     #####:  495:				return 1;
---
>         -:  490:			rc = SSL_CTX_use_certificate_chain_file(listener->ssl_ctx, listener->certfile);
>         -:  491:			if(rc != 1){
>         -:  492:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load server certificate \"%s\". Check certfile.", listener->certfile);
>         -:  493:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
>         -:  494:				COMPAT_CLOSE(sock);
>         -:  495:				return 1;
499,504c499,504
<     #####:  497:			rc = SSL_CTX_use_PrivateKey_file(listener->ssl_ctx, listener->keyfile, SSL_FILETYPE_PEM);
<     #####:  498:			if(rc != 1){
<     #####:  499:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load server key file \"%s\". Check keyfile.", listener->keyfile);
<     #####:  500:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
<     #####:  501:				COMPAT_CLOSE(sock);
<     #####:  502:				return 1;
---
>         -:  497:			rc = SSL_CTX_use_PrivateKey_file(listener->ssl_ctx, listener->keyfile, SSL_FILETYPE_PEM);
>         -:  498:			if(rc != 1){
>         -:  499:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load server key file \"%s\". Check keyfile.", listener->keyfile);
>         -:  500:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
>         -:  501:				COMPAT_CLOSE(sock);
>         -:  502:				return 1;
506,511c506,511
<     #####:  504:			rc = SSL_CTX_check_private_key(listener->ssl_ctx);
<     #####:  505:			if(rc != 1){
<     #####:  506:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Server certificate/key are inconsistent.");
<     #####:  507:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
<     #####:  508:				COMPAT_CLOSE(sock);
<     #####:  509:				return 1;
---
>         -:  504:			rc = SSL_CTX_check_private_key(listener->ssl_ctx);
>         -:  505:			if(rc != 1){
>         -:  506:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Server certificate/key are inconsistent.");
>         -:  507:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
>         -:  508:				COMPAT_CLOSE(sock);
>         -:  509:				return 1;
514,520c514,520
<     #####:  512:			if(listener->crlfile){
<     #####:  513:				store = SSL_CTX_get_cert_store(listener->ssl_ctx);
<     #####:  514:				if(!store){
<     #####:  515:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to obtain TLS store.");
<     #####:  516:					net__print_error(MOSQ_LOG_ERR, "Error: %s");
<     #####:  517:					COMPAT_CLOSE(sock);
<     #####:  518:					return 1;
---
>         -:  512:			if(listener->crlfile){
>         -:  513:				store = SSL_CTX_get_cert_store(listener->ssl_ctx);
>         -:  514:				if(!store){
>         -:  515:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to obtain TLS store.");
>         -:  516:					net__print_error(MOSQ_LOG_ERR, "Error: %s");
>         -:  517:					COMPAT_CLOSE(sock);
>         -:  518:					return 1;
522,528c522,528
<     #####:  520:				lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());
<     #####:  521:				rc = X509_load_crl_file(lookup, listener->crlfile, X509_FILETYPE_PEM);
<     #####:  522:				if(rc != 1){
<     #####:  523:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load certificate revocation file \"%s\". Check crlfile.", listener->crlfile);
<     #####:  524:					net__print_error(MOSQ_LOG_ERR, "Error: %s");
<     #####:  525:					COMPAT_CLOSE(sock);
<     #####:  526:					return 1;
---
>         -:  520:				lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());
>         -:  521:				rc = X509_load_crl_file(lookup, listener->crlfile, X509_FILETYPE_PEM);
>         -:  522:				if(rc != 1){
>         -:  523:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load certificate revocation file \"%s\". Check crlfile.", listener->crlfile);
>         -:  524:					net__print_error(MOSQ_LOG_ERR, "Error: %s");
>         -:  525:					COMPAT_CLOSE(sock);
>         -:  526:					return 1;
530c530
<     #####:  528:				X509_STORE_set_flags(store, X509_V_FLAG_CRL_CHECK);
---
>         -:  528:				X509_STORE_set_flags(store, X509_V_FLAG_CRL_CHECK);
534,536c534,536
<     #####:  532:		}else if(listener->psk_hint){
<     #####:  533:			if(tls_ex_index_context == -1){
<     #####:  534:				tls_ex_index_context = SSL_get_ex_new_index(0, "client context", NULL, NULL, NULL);
---
>         -:  532:		}else if(listener->psk_hint){
>         -:  533:			if(tls_ex_index_context == -1){
>         -:  534:				tls_ex_index_context = SSL_get_ex_new_index(0, "client context", NULL, NULL, NULL);
538,539c538,539
<     #####:  536:			if(tls_ex_index_listener == -1){
<     #####:  537:				tls_ex_index_listener = SSL_get_ex_new_index(0, "listener", NULL, NULL, NULL);
---
>         -:  536:			if(tls_ex_index_listener == -1){
>         -:  537:				tls_ex_index_listener = SSL_get_ex_new_index(0, "listener", NULL, NULL, NULL);
542,544c542,544
<     #####:  540:			if(mosquitto__tls_server_ctx(listener)){
<     #####:  541:				COMPAT_CLOSE(sock);
<     #####:  542:				return 1;
---
>         -:  540:			if(mosquitto__tls_server_ctx(listener)){
>         -:  541:				COMPAT_CLOSE(sock);
>         -:  542:				return 1;
546,553c546,553
<     #####:  544:			SSL_CTX_set_psk_server_callback(listener->ssl_ctx, psk_server_callback);
<     #####:  545:			if(listener->psk_hint){
<     #####:  546:				rc = SSL_CTX_use_psk_identity_hint(listener->ssl_ctx, listener->psk_hint);
<     #####:  547:				if(rc == 0){
<     #####:  548:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS PSK hint.");
<     #####:  549:					net__print_error(MOSQ_LOG_ERR, "Error: %s");
<     #####:  550:					COMPAT_CLOSE(sock);
<     #####:  551:					return 1;
---
>         -:  544:			SSL_CTX_set_psk_server_callback(listener->ssl_ctx, psk_server_callback);
>         -:  545:			if(listener->psk_hint){
>         -:  546:				rc = SSL_CTX_use_psk_identity_hint(listener->ssl_ctx, listener->psk_hint);
>         -:  547:				if(rc == 0){
>         -:  548:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS PSK hint.");
>         -:  549:					net__print_error(MOSQ_LOG_ERR, "Error: %s");
>         -:  550:					COMPAT_CLOSE(sock);
>         -:  551:					return 1;
561c561
<         -:  559:		return 1;
---
>     #####:  559:		return 1;
