93,95c93,95
<     #####:   91:	SSL_load_error_strings();
<     #####:   92:	SSL_library_init();
<     #####:   93:	OpenSSL_add_all_algorithms();
---
>         -:   91:	SSL_load_error_strings();
>         -:   92:	SSL_library_init();
>         -:   93:	OpenSSL_add_all_algorithms();
97,98c97,98
<     #####:   95:	if(tls_ex_index_mosq == -1){
<     #####:   96:		tls_ex_index_mosq = SSL_get_ex_new_index(0, "client context", NULL, NULL, NULL);
---
>         -:   95:	if(tls_ex_index_mosq == -1){
>         -:   96:		tls_ex_index_mosq = SSL_get_ex_new_index(0, "client context", NULL, NULL, NULL);
110c110
<     #####:  108:	ERR_remove_state(0);
---
>         -:  108:	ERR_remove_state(0);
118c118
<     #####:  116:	CONF_modules_unload(1);
---
>         -:  116:	CONF_modules_unload(1);
149,152c149,152
<     #####:  147:		if(mosq->ssl){
<     #####:  148:			SSL_shutdown(mosq->ssl);
<     #####:  149:			SSL_free(mosq->ssl);
<     #####:  150:			mosq->ssl = NULL;
---
>         -:  147:		if(mosq->ssl){
>         -:  148:			SSL_shutdown(mosq->ssl);
>         -:  149:			SSL_free(mosq->ssl);
>         -:  150:			mosq->ssl = NULL;
187c187
<     #####:  185:static unsigned int psk_client_callback(SSL *ssl, const char *hint,
---
>         -:  185:static unsigned int psk_client_callback(SSL *ssl, const char *hint,
194,195c194,195
<     #####:  192:	mosq = SSL_get_ex_data(ssl, tls_ex_index_mosq);
<     #####:  193:	if(!mosq) return 0;
---
>         -:  192:	mosq = SSL_get_ex_data(ssl, tls_ex_index_mosq);
>         -:  193:	if(!mosq) return 0;
197c197
<     #####:  195:	snprintf(identity, max_identity_len, "%s", mosq->tls_psk_identity);
---
>         -:  195:	snprintf(identity, max_identity_len, "%s", mosq->tls_psk_identity);
199,201c199,201
<     #####:  197:	len = mosquitto__hex2bin(mosq->tls_psk, psk, max_psk_len);
<     #####:  198:	if (len < 0) return 0;
<     #####:  199:	return len;
---
>         -:  197:	len = mosquitto__hex2bin(mosq->tls_psk, psk, max_psk_len);
>         -:  198:	if (len < 0) return 0;
>         -:  199:	return len;
411c411
<     #####:  409:void net__print_ssl_error(struct mosquitto *mosq)
---
>         -:  409:void net__print_ssl_error(struct mosquitto *mosq)
416,419c416,419
<     #####:  414:	e = ERR_get_error();
<     #####:  415:	while(e){
<     #####:  416:		log__printf(mosq, MOSQ_LOG_ERR, "OpenSSL Error: %s", ERR_error_string(e, ebuf));
<     #####:  417:		e = ERR_get_error();
---
>         -:  414:	e = ERR_get_error();
>         -:  415:	while(e){
>         -:  416:		log__printf(mosq, MOSQ_LOG_ERR, "OpenSSL Error: %s", ERR_error_string(e, ebuf));
>         -:  417:		e = ERR_get_error();
421c421
<     #####:  419:}
---
>         -:  419:}
424c424
<     #####:  422:int net__socket_connect_tls(struct mosquitto *mosq)
---
>         -:  422:int net__socket_connect_tls(struct mosquitto *mosq)
428,434c428,434
<     #####:  426:	ERR_clear_error();
<     #####:  427:	ret = SSL_connect(mosq->ssl);
<     #####:  428:	if(ret != 1) {
<     #####:  429:		err = SSL_get_error(mosq->ssl, ret);
<     #####:  430:		if (err == SSL_ERROR_SYSCALL) {
<     #####:  431:			mosq->want_connect = true;
<     #####:  432:			return MOSQ_ERR_SUCCESS;
---
>         -:  426:	ERR_clear_error();
>         -:  427:	ret = SSL_connect(mosq->ssl);
>         -:  428:	if(ret != 1) {
>         -:  429:		err = SSL_get_error(mosq->ssl, ret);
>         -:  430:		if (err == SSL_ERROR_SYSCALL) {
>         -:  431:			mosq->want_connect = true;
>         -:  432:			return MOSQ_ERR_SUCCESS;
436,437c436,437
<     #####:  434:		if(err == SSL_ERROR_WANT_READ){
<     #####:  435:			mosq->want_connect = true;
---
>         -:  434:		if(err == SSL_ERROR_WANT_READ){
>         -:  435:			mosq->want_connect = true;
439,441c439,441
<     #####:  437:		}else if(err == SSL_ERROR_WANT_WRITE){
<     #####:  438:			mosq->want_write = true;
<     #####:  439:			mosq->want_connect = true;
---
>         -:  437:		}else if(err == SSL_ERROR_WANT_WRITE){
>         -:  438:			mosq->want_write = true;
>         -:  439:			mosq->want_connect = true;
443c443
<     #####:  441:			net__print_ssl_error(mosq);
---
>         -:  441:			net__print_ssl_error(mosq);
445,448c445,448
<     #####:  443:			COMPAT_CLOSE(mosq->sock);
<     #####:  444:			mosq->sock = INVALID_SOCKET;
<     #####:  445:			net__print_ssl_error(mosq);
<     #####:  446:			return MOSQ_ERR_TLS;
---
>         -:  443:			COMPAT_CLOSE(mosq->sock);
>         -:  444:			mosq->sock = INVALID_SOCKET;
>         -:  445:			net__print_ssl_error(mosq);
>         -:  446:			return MOSQ_ERR_TLS;
451c451
<     #####:  449:		mosq->want_connect = false;
---
>         -:  449:		mosq->want_connect = false;
459c459
<     #####:  457:static int net__init_ssl_ctx(struct mosquitto *mosq)
---
>         -:  457:static int net__init_ssl_ctx(struct mosquitto *mosq)
463,464c463,464
<     #####:  461:	if(mosq->ssl_ctx){
<     #####:  462:		if(!mosq->ssl_ctx_defaults){
---
>         -:  461:	if(mosq->ssl_ctx){
>         -:  462:		if(!mosq->ssl_ctx_defaults){
466,468c466,468
<     #####:  464:		}else if(!mosq->tls_cafile && !mosq->tls_capath && !mosq->tls_psk){
<     #####:  465:			log__printf(mosq, MOSQ_LOG_ERR, "Error: MOSQ_OPT_SSL_CTX_WITH_DEFAULTS used without specifying cafile, capath or psk.");
<     #####:  466:			return MOSQ_ERR_INVAL;
---
>         -:  464:		}else if(!mosq->tls_cafile && !mosq->tls_capath && !mosq->tls_psk){
>         -:  465:			log__printf(mosq, MOSQ_LOG_ERR, "Error: MOSQ_OPT_SSL_CTX_WITH_DEFAULTS used without specifying cafile, capath or psk.");
>         -:  466:			return MOSQ_ERR_INVAL;
475,476c475,476
<     #####:  473:	if(mosq->tls_cafile || mosq->tls_capath || mosq->tls_psk){
<     #####:  474:		if(!mosq->ssl_ctx){
---
>         -:  473:	if(mosq->tls_cafile || mosq->tls_capath || mosq->tls_psk){
>         -:  474:		if(!mosq->ssl_ctx){
480c480
<     #####:  478:			mosq->ssl_ctx = SSL_CTX_new(TLS_client_method());
---
>         -:  478:			mosq->ssl_ctx = SSL_CTX_new(TLS_client_method());
483,488c483,488
<     #####:  481:			if(!mosq->ssl_ctx){
<     #####:  482:				log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to create TLS context.");
<     #####:  483:				COMPAT_CLOSE(mosq->sock);
<     #####:  484:				mosq->sock = INVALID_SOCKET;
<     #####:  485:				net__print_ssl_error(mosq);
<     #####:  486:				return MOSQ_ERR_TLS;
---
>         -:  481:			if(!mosq->ssl_ctx){
>         -:  482:				log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to create TLS context.");
>         -:  483:				COMPAT_CLOSE(mosq->sock);
>         -:  484:				mosq->sock = INVALID_SOCKET;
>         -:  485:				net__print_ssl_error(mosq);
>         -:  486:				return MOSQ_ERR_TLS;
492,499c492,499
<     #####:  490:		if(!mosq->tls_version){
<     #####:  491:			SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_SSLv3);
<     #####:  492:		}else if(!strcmp(mosq->tls_version, "tlsv1.2")){
<     #####:  493:			SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1);
<     #####:  494:		}else if(!strcmp(mosq->tls_version, "tlsv1.1")){
<     #####:  495:			SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1);
<     #####:  496:		}else if(!strcmp(mosq->tls_version, "tlsv1")){
<     #####:  497:			SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_1);
---
>         -:  490:		if(!mosq->tls_version){
>         -:  491:			SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_SSLv3);
>         -:  492:		}else if(!strcmp(mosq->tls_version, "tlsv1.2")){
>         -:  493:			SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1);
>         -:  494:		}else if(!strcmp(mosq->tls_version, "tlsv1.1")){
>         -:  495:			SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1);
>         -:  496:		}else if(!strcmp(mosq->tls_version, "tlsv1")){
>         -:  497:			SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_1);
501,504c501,504
<     #####:  499:			log__printf(mosq, MOSQ_LOG_ERR, "Error: Protocol %s not supported.", mosq->tls_version);
<     #####:  500:			COMPAT_CLOSE(mosq->sock);
<     #####:  501:			mosq->sock = INVALID_SOCKET;
<     #####:  502:			return MOSQ_ERR_INVAL;
---
>         -:  499:			log__printf(mosq, MOSQ_LOG_ERR, "Error: Protocol %s not supported.", mosq->tls_version);
>         -:  500:			COMPAT_CLOSE(mosq->sock);
>         -:  501:			mosq->sock = INVALID_SOCKET;
>         -:  502:			return MOSQ_ERR_INVAL;
508c508
<     #####:  506:		SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_COMPRESSION);
---
>         -:  506:		SSL_CTX_set_options(mosq->ssl_ctx, SSL_OP_NO_COMPRESSION);
512c512
<     #####:  510:			SSL_CTX_set_mode(mosq->ssl_ctx, SSL_MODE_RELEASE_BUFFERS);
---
>         -:  510:			SSL_CTX_set_mode(mosq->ssl_ctx, SSL_MODE_RELEASE_BUFFERS);
515,522c515,522
<     #####:  513:		if(mosq->tls_ciphers){
<     #####:  514:			ret = SSL_CTX_set_cipher_list(mosq->ssl_ctx, mosq->tls_ciphers);
<     #####:  515:			if(ret == 0){
<     #####:  516:				log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to set TLS ciphers. Check cipher list \"%s\".", mosq->tls_ciphers);
<     #####:  517:				COMPAT_CLOSE(mosq->sock);
<     #####:  518:				mosq->sock = INVALID_SOCKET;
<     #####:  519:				net__print_ssl_error(mosq);
<     #####:  520:				return MOSQ_ERR_TLS;
---
>         -:  513:		if(mosq->tls_ciphers){
>         -:  514:			ret = SSL_CTX_set_cipher_list(mosq->ssl_ctx, mosq->tls_ciphers);
>         -:  515:			if(ret == 0){
>         -:  516:				log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to set TLS ciphers. Check cipher list \"%s\".", mosq->tls_ciphers);
>         -:  517:				COMPAT_CLOSE(mosq->sock);
>         -:  518:				mosq->sock = INVALID_SOCKET;
>         -:  519:				net__print_ssl_error(mosq);
>         -:  520:				return MOSQ_ERR_TLS;
525,527c525,527
<     #####:  523:		if(mosq->tls_cafile || mosq->tls_capath){
<     #####:  524:			ret = SSL_CTX_load_verify_locations(mosq->ssl_ctx, mosq->tls_cafile, mosq->tls_capath);
<     #####:  525:			if(ret == 0){
---
>         -:  523:		if(mosq->tls_cafile || mosq->tls_capath){
>         -:  524:			ret = SSL_CTX_load_verify_locations(mosq->ssl_ctx, mosq->tls_cafile, mosq->tls_capath);
>         -:  525:			if(ret == 0){
529,532c529,532
<     #####:  527:				if(mosq->tls_cafile && mosq->tls_capath){
<     #####:  528:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load CA certificates, check bridge_cafile \"%s\" and bridge_capath \"%s\".", mosq->tls_cafile, mosq->tls_capath);
<     #####:  529:				}else if(mosq->tls_cafile){
<     #####:  530:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load CA certificates, check bridge_cafile \"%s\".", mosq->tls_cafile);
---
>         -:  527:				if(mosq->tls_cafile && mosq->tls_capath){
>         -:  528:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load CA certificates, check bridge_cafile \"%s\" and bridge_capath \"%s\".", mosq->tls_cafile, mosq->tls_capath);
>         -:  529:				}else if(mosq->tls_cafile){
>         -:  530:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load CA certificates, check bridge_cafile \"%s\".", mosq->tls_cafile);
534c534
<     #####:  532:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load CA certificates, check bridge_capath \"%s\".", mosq->tls_capath);
---
>         -:  532:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load CA certificates, check bridge_capath \"%s\".", mosq->tls_capath);
545,548c545,548
<     #####:  543:				COMPAT_CLOSE(mosq->sock);
<     #####:  544:				mosq->sock = INVALID_SOCKET;
<     #####:  545:				net__print_ssl_error(mosq);
<     #####:  546:				return MOSQ_ERR_TLS;
---
>         -:  543:				COMPAT_CLOSE(mosq->sock);
>         -:  544:				mosq->sock = INVALID_SOCKET;
>         -:  545:				net__print_ssl_error(mosq);
>         -:  546:				return MOSQ_ERR_TLS;
550,551c550,551
<     #####:  548:			if(mosq->tls_cert_reqs == 0){
<     #####:  549:				SSL_CTX_set_verify(mosq->ssl_ctx, SSL_VERIFY_NONE, NULL);
---
>         -:  548:			if(mosq->tls_cert_reqs == 0){
>         -:  549:				SSL_CTX_set_verify(mosq->ssl_ctx, SSL_VERIFY_NONE, NULL);
553c553
<     #####:  551:				SSL_CTX_set_verify(mosq->ssl_ctx, SSL_VERIFY_PEER, mosquitto__server_certificate_verify);
---
>         -:  551:				SSL_CTX_set_verify(mosq->ssl_ctx, SSL_VERIFY_PEER, mosquitto__server_certificate_verify);
556,558c556,558
<     #####:  554:			if(mosq->tls_pw_callback){
<     #####:  555:				SSL_CTX_set_default_passwd_cb(mosq->ssl_ctx, mosq->tls_pw_callback);
<     #####:  556:				SSL_CTX_set_default_passwd_cb_userdata(mosq->ssl_ctx, mosq);
---
>         -:  554:			if(mosq->tls_pw_callback){
>         -:  555:				SSL_CTX_set_default_passwd_cb(mosq->ssl_ctx, mosq->tls_pw_callback);
>         -:  556:				SSL_CTX_set_default_passwd_cb_userdata(mosq->ssl_ctx, mosq);
561,563c561,563
<     #####:  559:			if(mosq->tls_certfile){
<     #####:  560:				ret = SSL_CTX_use_certificate_chain_file(mosq->ssl_ctx, mosq->tls_certfile);
<     #####:  561:				if(ret != 1){
---
>         -:  559:			if(mosq->tls_certfile){
>         -:  560:				ret = SSL_CTX_use_certificate_chain_file(mosq->ssl_ctx, mosq->tls_certfile);
>         -:  561:				if(ret != 1){
565c565
<     #####:  563:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load client certificate, check bridge_certfile \"%s\".", mosq->tls_certfile);
---
>         -:  563:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load client certificate, check bridge_certfile \"%s\".", mosq->tls_certfile);
569,572c569,572
<     #####:  567:					COMPAT_CLOSE(mosq->sock);
<     #####:  568:					mosq->sock = INVALID_SOCKET;
<     #####:  569:					net__print_ssl_error(mosq);
<     #####:  570:					return MOSQ_ERR_TLS;
---
>         -:  567:					COMPAT_CLOSE(mosq->sock);
>         -:  568:					mosq->sock = INVALID_SOCKET;
>         -:  569:					net__print_ssl_error(mosq);
>         -:  570:					return MOSQ_ERR_TLS;
575,577c575,577
<     #####:  573:			if(mosq->tls_keyfile){
<     #####:  574:				ret = SSL_CTX_use_PrivateKey_file(mosq->ssl_ctx, mosq->tls_keyfile, SSL_FILETYPE_PEM);
<     #####:  575:				if(ret != 1){
---
>         -:  573:			if(mosq->tls_keyfile){
>         -:  574:				ret = SSL_CTX_use_PrivateKey_file(mosq->ssl_ctx, mosq->tls_keyfile, SSL_FILETYPE_PEM);
>         -:  575:				if(ret != 1){
579c579
<     #####:  577:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load client key file, check bridge_keyfile \"%s\".", mosq->tls_keyfile);
---
>         -:  577:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Unable to load client key file, check bridge_keyfile \"%s\".", mosq->tls_keyfile);
583,586c583,586
<     #####:  581:					COMPAT_CLOSE(mosq->sock);
<     #####:  582:					mosq->sock = INVALID_SOCKET;
<     #####:  583:					net__print_ssl_error(mosq);
<     #####:  584:					return MOSQ_ERR_TLS;
---
>         -:  581:					COMPAT_CLOSE(mosq->sock);
>         -:  582:					mosq->sock = INVALID_SOCKET;
>         -:  583:					net__print_ssl_error(mosq);
>         -:  584:					return MOSQ_ERR_TLS;
588,594c588,594
<     #####:  586:				ret = SSL_CTX_check_private_key(mosq->ssl_ctx);
<     #####:  587:				if(ret != 1){
<     #####:  588:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Client certificate/key are inconsistent.");
<     #####:  589:					COMPAT_CLOSE(mosq->sock);
<     #####:  590:					mosq->sock = INVALID_SOCKET;
<     #####:  591:					net__print_ssl_error(mosq);
<     #####:  592:					return MOSQ_ERR_TLS;
---
>         -:  586:				ret = SSL_CTX_check_private_key(mosq->ssl_ctx);
>         -:  587:				if(ret != 1){
>         -:  588:					log__printf(mosq, MOSQ_LOG_ERR, "Error: Client certificate/key are inconsistent.");
>         -:  589:					COMPAT_CLOSE(mosq->sock);
>         -:  590:					mosq->sock = INVALID_SOCKET;
>         -:  591:					net__print_ssl_error(mosq);
>         -:  592:					return MOSQ_ERR_TLS;
598,599c598,599
<     #####:  596:		}else if(mosq->tls_psk){
<     #####:  597:			SSL_CTX_set_psk_client_callback(mosq->ssl_ctx, psk_client_callback);
---
>         -:  596:		}else if(mosq->tls_psk){
>         -:  597:			SSL_CTX_set_psk_client_callback(mosq->ssl_ctx, psk_client_callback);
614,615c614,615
<     #####:  612:	int rc = net__init_ssl_ctx(mosq);
<     #####:  613:	if(rc) return rc;
---
>         -:  612:	int rc = net__init_ssl_ctx(mosq);
>         -:  613:	if(rc) return rc;
617,619c617,619
<     #####:  615:	if(mosq->ssl_ctx){
<     #####:  616:		if(mosq->ssl){
<     #####:  617:			SSL_free(mosq->ssl);
---
>         -:  615:	if(mosq->ssl_ctx){
>         -:  616:		if(mosq->ssl){
>         -:  617:			SSL_free(mosq->ssl);
621,626c621,626
<     #####:  619:		mosq->ssl = SSL_new(mosq->ssl_ctx);
<     #####:  620:		if(!mosq->ssl){
<     #####:  621:			COMPAT_CLOSE(mosq->sock);
<     #####:  622:			mosq->sock = INVALID_SOCKET;
<     #####:  623:			net__print_ssl_error(mosq);
<     #####:  624:			return MOSQ_ERR_TLS;
---
>         -:  619:		mosq->ssl = SSL_new(mosq->ssl_ctx);
>         -:  620:		if(!mosq->ssl){
>         -:  621:			COMPAT_CLOSE(mosq->sock);
>         -:  622:			mosq->sock = INVALID_SOCKET;
>         -:  623:			net__print_ssl_error(mosq);
>         -:  624:			return MOSQ_ERR_TLS;
629,635c629,635
<     #####:  627:		SSL_set_ex_data(mosq->ssl, tls_ex_index_mosq, mosq);
<     #####:  628:		bio = BIO_new_socket(mosq->sock, BIO_NOCLOSE);
<     #####:  629:		if(!bio){
<     #####:  630:			COMPAT_CLOSE(mosq->sock);
<     #####:  631:			mosq->sock = INVALID_SOCKET;
<     #####:  632:			net__print_ssl_error(mosq);
<     #####:  633:			return MOSQ_ERR_TLS;
---
>         -:  627:		SSL_set_ex_data(mosq->ssl, tls_ex_index_mosq, mosq);
>         -:  628:		bio = BIO_new_socket(mosq->sock, BIO_NOCLOSE);
>         -:  629:		if(!bio){
>         -:  630:			COMPAT_CLOSE(mosq->sock);
>         -:  631:			mosq->sock = INVALID_SOCKET;
>         -:  632:			net__print_ssl_error(mosq);
>         -:  633:			return MOSQ_ERR_TLS;
637c637
<     #####:  635:		SSL_set_bio(mosq->ssl, bio, bio);
---
>         -:  635:		SSL_set_bio(mosq->ssl, bio, bio);
642,645c642,645
<     #####:  640:		if(SSL_set_tlsext_host_name(mosq->ssl, host) != 1) {
<     #####:  641:			COMPAT_CLOSE(mosq->sock);
<     #####:  642:			mosq->sock = INVALID_SOCKET;
<     #####:  643:			return MOSQ_ERR_TLS;
---
>         -:  640:		if(SSL_set_tlsext_host_name(mosq->ssl, host) != 1) {
>         -:  641:			COMPAT_CLOSE(mosq->sock);
>         -:  642:			mosq->sock = INVALID_SOCKET;
>         -:  643:			return MOSQ_ERR_TLS;
648c648
<     #####:  646:		if(net__socket_connect_tls(mosq)){
---
>         -:  646:		if(net__socket_connect_tls(mosq)){
654c654
<         -:  652:	return MOSQ_ERR_SUCCESS;
---
>     #####:  652:	return MOSQ_ERR_SUCCESS;
675c675
<     #####:  673:		if(rc) return rc;
---
>         -:  673:		if(rc) return rc;
691,702c691,702
<     #####:  689:	if(mosq->ssl){
<     #####:  690:		ERR_clear_error();
<     #####:  691:		ret = SSL_read(mosq->ssl, buf, count);
<     #####:  692:		if(ret <= 0){
<     #####:  693:			err = SSL_get_error(mosq->ssl, ret);
<     #####:  694:			if(err == SSL_ERROR_WANT_READ){
<     #####:  695:				ret = -1;
<     #####:  696:				errno = EAGAIN;
<     #####:  697:			}else if(err == SSL_ERROR_WANT_WRITE){
<     #####:  698:				ret = -1;
<     #####:  699:				mosq->want_write = true;
<     #####:  700:				errno = EAGAIN;
---
>         -:  689:	if(mosq->ssl){
>         -:  690:		ERR_clear_error();
>         -:  691:		ret = SSL_read(mosq->ssl, buf, count);
>         -:  692:		if(ret <= 0){
>         -:  693:			err = SSL_get_error(mosq->ssl, ret);
>         -:  694:			if(err == SSL_ERROR_WANT_READ){
>         -:  695:				ret = -1;
>         -:  696:				errno = EAGAIN;
>         -:  697:			}else if(err == SSL_ERROR_WANT_WRITE){
>         -:  698:				ret = -1;
>         -:  699:				mosq->want_write = true;
>         -:  700:				errno = EAGAIN;
704,705c704,705
<     #####:  702:				net__print_ssl_error(mosq);
<     #####:  703:				errno = EPROTO;
---
>         -:  702:				net__print_ssl_error(mosq);
>         -:  703:				errno = EPROTO;
711c711
<     #####:  709:		return (ssize_t )ret;
---
>         -:  709:		return (ssize_t )ret;
738,750c738,750
<     #####:  736:	if(mosq->ssl){
<     #####:  737:		mosq->want_write = false;
<     #####:  738:		ERR_clear_error();
<     #####:  739:		ret = SSL_write(mosq->ssl, buf, count);
<     #####:  740:		if(ret < 0){
<     #####:  741:			err = SSL_get_error(mosq->ssl, ret);
<     #####:  742:			if(err == SSL_ERROR_WANT_READ){
<     #####:  743:				ret = -1;
<     #####:  744:				errno = EAGAIN;
<     #####:  745:			}else if(err == SSL_ERROR_WANT_WRITE){
<     #####:  746:				ret = -1;
<     #####:  747:				mosq->want_write = true;
<     #####:  748:				errno = EAGAIN;
---
>         -:  736:	if(mosq->ssl){
>         -:  737:		mosq->want_write = false;
>         -:  738:		ERR_clear_error();
>         -:  739:		ret = SSL_write(mosq->ssl, buf, count);
>         -:  740:		if(ret < 0){
>         -:  741:			err = SSL_get_error(mosq->ssl, ret);
>         -:  742:			if(err == SSL_ERROR_WANT_READ){
>         -:  743:				ret = -1;
>         -:  744:				errno = EAGAIN;
>         -:  745:			}else if(err == SSL_ERROR_WANT_WRITE){
>         -:  746:				ret = -1;
>         -:  747:				mosq->want_write = true;
>         -:  748:				errno = EAGAIN;
752,753c752,753
<     #####:  750:				net__print_ssl_error(mosq);
<     #####:  751:				errno = EPROTO;
---
>         -:  750:				net__print_ssl_error(mosq);
>         -:  751:				errno = EPROTO;
759c759
<     #####:  757:		return (ssize_t )ret;
---
>         -:  757:		return (ssize_t )ret;
