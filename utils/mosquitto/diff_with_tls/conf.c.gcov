299,306c299,306
<     #####:  297:			mosquitto__free(config->listeners[i].cafile);
<     #####:  298:			mosquitto__free(config->listeners[i].capath);
<     #####:  299:			mosquitto__free(config->listeners[i].certfile);
<     #####:  300:			mosquitto__free(config->listeners[i].keyfile);
<     #####:  301:			mosquitto__free(config->listeners[i].ciphers);
<     #####:  302:			mosquitto__free(config->listeners[i].psk_hint);
<     #####:  303:			mosquitto__free(config->listeners[i].crlfile);
<     #####:  304:			mosquitto__free(config->listeners[i].tls_version);
---
>         -:  297:			mosquitto__free(config->listeners[i].cafile);
>         -:  298:			mosquitto__free(config->listeners[i].capath);
>         -:  299:			mosquitto__free(config->listeners[i].certfile);
>         -:  300:			mosquitto__free(config->listeners[i].keyfile);
>         -:  301:			mosquitto__free(config->listeners[i].ciphers);
>         -:  302:			mosquitto__free(config->listeners[i].psk_hint);
>         -:  303:			mosquitto__free(config->listeners[i].crlfile);
>         -:  304:			mosquitto__free(config->listeners[i].tls_version);
311c311
<     #####:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
---
>         -:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
348,349c348,349
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
351,352c351,352
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
438,445c438,445
<     #####:  436:			|| config->default_listener.cafile
<     #####:  437:			|| config->default_listener.capath
<     #####:  438:			|| config->default_listener.certfile
<     #####:  439:			|| config->default_listener.keyfile
<     #####:  440:			|| config->default_listener.ciphers
<     #####:  441:			|| config->default_listener.psk_hint
<     #####:  442:			|| config->default_listener.require_certificate
<     #####:  443:			|| config->default_listener.crlfile
---
>         -:  436:			|| config->default_listener.cafile
>         -:  437:			|| config->default_listener.capath
>         -:  438:			|| config->default_listener.certfile
>         -:  439:			|| config->default_listener.keyfile
>         -:  440:			|| config->default_listener.ciphers
>         -:  441:			|| config->default_listener.psk_hint
>         -:  442:			|| config->default_listener.require_certificate
>         -:  443:			|| config->default_listener.crlfile
447c447
<     #####:  445:			|| config->default_listener.use_subject_as_username
---
>         -:  445:			|| config->default_listener.use_subject_as_username
493,504c493,504
<     #####:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
<     #####:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
<     #####:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
<     #####:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
<     #####:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
<     #####:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
<     #####:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
<     #####:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
<     #####:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
<     #####:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
<     #####:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
<     #####:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
---
>         -:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
>         -:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
>         -:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
>         -:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
>         -:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
>         -:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
>         -:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
>         -:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
>         -:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
>         -:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
>         -:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
>         -:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
699,701c699,701
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
703,705c703,705
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
920,923c920,923
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
926,928c926,928
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
931c931
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
933c933
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
937,940c937,940
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
943,945c943,945
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
948c948
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
950c950
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
954,957c954,957
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
960,962c960,962
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
965c965
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
967c967
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
971,974c971,974
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
976,978c976,978
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
980c980
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
982c982
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
986,989c986,989
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
991,993c991,993
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
996c996
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
1000,1003c1000,1003
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
1006,1008c1006,1008
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
1011c1011
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
1013c1013
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
1041,1044c1041,1044
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
1046,1048c1046,1048
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
1050c1050
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
1052c1052
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
1056,1059c1056,1059
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
1061c1061
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
1063c1063
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
1067,1070c1067,1070
<     #####: 1065:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1066:					if(cur_listener->psk_hint){
<     #####: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1068:						return MOSQ_ERR_INVAL;
---
>         -: 1065:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1066:					if(cur_listener->psk_hint){
>         -: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1068:						return MOSQ_ERR_INVAL;
1072c1072
<     #####: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
1074c1074
<         -: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1078,1079c1078,1079
<     #####: 1076:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1076:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
1081c1081
<         -: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1085,1088c1085,1088
<     #####: 1083:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1084:					if(cur_listener->psk_hint){
<     #####: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1086:						return MOSQ_ERR_INVAL;
---
>         -: 1083:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1084:					if(cur_listener->psk_hint){
>         -: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1086:						return MOSQ_ERR_INVAL;
1090c1090
<     #####: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
1092c1092
<         -: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1099,1100c1099,1100
<     #####: 1097:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1097:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
1102c1102
<         -: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1180,1181c1180,1181
<     #####: 1178:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1178:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
1183c1183
<         -: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1254,1255c1254,1255
<     #####: 1252:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1252:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
1257c1257
<         -: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1664,1667c1664,1667
<     #####: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
<     #####: 1663:					if(reload){
<     #####: 1664:						mosquitto__free(cur_security_options->psk_file);
<     #####: 1665:						cur_security_options->psk_file = NULL;
---
>         -: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
>         -: 1663:					if(reload){
>         -: 1664:						mosquitto__free(cur_security_options->psk_file);
>         -: 1665:						cur_security_options->psk_file = NULL;
1669c1669
<     #####: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
1671c1671
<         -: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
1675,1676c1675,1676
<     #####: 1673:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1673:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
1678c1678
<         -: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
1684,1685c1684,1685
<     #####: 1682:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1682:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
1687c1687
<         -: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1789,1790c1789,1790
<     #####: 1787:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1787:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
1792c1792
<         -: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1963,1964c1963,1964
<     #####: 1961:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1961:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
1966c1966
<         -: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
1970,1971c1970,1971
<     #####: 1968:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1968:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
1973c1973
<         -: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
