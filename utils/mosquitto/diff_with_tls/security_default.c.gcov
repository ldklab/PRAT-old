725c725
<     #####:  723:static int unpwd__file_parse(struct mosquitto__unpwd **unpwd, const char *password_file)
---
>         -:  723:static int unpwd__file_parse(struct mosquitto__unpwd **unpwd, const char *password_file)
737c737
<     #####:  735:	if(!unpwd) return MOSQ_ERR_INVAL;
---
>         -:  735:	if(!unpwd) return MOSQ_ERR_INVAL;
739c739
<     #####:  737:	if(!password_file) return MOSQ_ERR_SUCCESS;
---
>         -:  737:	if(!password_file) return MOSQ_ERR_SUCCESS;
743c743
<     #####:  741:	if(rc) return rc;
---
>         -:  741:	if(rc) return rc;
745c745
<     #####:  743:	HASH_ITER(hh, *unpwd, u, tmp){
---
>         -:  743:	HASH_ITER(hh, *unpwd, u, tmp){
747,762c747,762
<     #####:  745:		if(u->password){
<     #####:  746:			token = strtok(u->password, "$");
<     #####:  747:			if(token && !strcmp(token, "6")){
<     #####:  748:				token = strtok(NULL, "$");
<     #####:  749:				if(token){
<     #####:  750:					rc = base64__decode(token, &salt, &salt_len);
<     #####:  751:					if(rc == MOSQ_ERR_SUCCESS && salt_len == 12){
<     #####:  752:						u->salt = salt;
<     #####:  753:						u->salt_len = salt_len;
<     #####:  754:						token = strtok(NULL, "$");
<     #####:  755:						if(token){
<     #####:  756:							rc = base64__decode(token, &password, &password_len);
<     #####:  757:							if(rc == MOSQ_ERR_SUCCESS && password_len == 64){
<     #####:  758:								mosquitto__free(u->password);
<     #####:  759:								u->password = (char *)password;
<     #####:  760:								u->password_len = password_len;
---
>         -:  745:		if(u->password){
>         -:  746:			token = strtok(u->password, "$");
>         -:  747:			if(token && !strcmp(token, "6")){
>         -:  748:				token = strtok(NULL, "$");
>         -:  749:				if(token){
>         -:  750:					rc = base64__decode(token, &salt, &salt_len);
>         -:  751:					if(rc == MOSQ_ERR_SUCCESS && salt_len == 12){
>         -:  752:						u->salt = salt;
>         -:  753:						u->salt_len = salt_len;
>         -:  754:						token = strtok(NULL, "$");
>         -:  755:						if(token){
>         -:  756:							rc = base64__decode(token, &password, &password_len);
>         -:  757:							if(rc == MOSQ_ERR_SUCCESS && password_len == 64){
>         -:  758:								mosquitto__free(u->password);
>         -:  759:								u->password = (char *)password;
>         -:  760:								u->password_len = password_len;
764,765c764,765
<     #####:  762:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password for user %s, removing entry.", u->username);
<     #####:  763:								HASH_DEL(*unpwd, u);
---
>         -:  762:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password for user %s, removing entry.", u->username);
>         -:  763:								HASH_DEL(*unpwd, u);
768,769c768,769
<     #####:  766:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  767:							HASH_DEL(*unpwd, u);
---
>         -:  766:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
>         -:  767:							HASH_DEL(*unpwd, u);
772,773c772,773
<     #####:  770:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password salt for user %s, removing entry.", u->username);
<     #####:  771:						HASH_DEL(*unpwd, u);
---
>         -:  770:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password salt for user %s, removing entry.", u->username);
>         -:  771:						HASH_DEL(*unpwd, u);
776,777c776,777
<     #####:  774:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  775:					HASH_DEL(*unpwd, u);
---
>         -:  774:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
>         -:  775:					HASH_DEL(*unpwd, u);
780,781c780,781
<     #####:  778:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  779:				HASH_DEL(*unpwd, u);
---
>         -:  778:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
>         -:  779:				HASH_DEL(*unpwd, u);
784,785c784,785
<     #####:  782:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Missing password hash for user %s, removing entry.", u->username);
<     #####:  783:			HASH_DEL(*unpwd, u);
---
>         -:  782:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Missing password hash for user %s, removing entry.", u->username);
>         -:  783:			HASH_DEL(*unpwd, u);
824c824
<     #####:  822:	int rc = 0;
---
>         -:  822:	int rc = 0;
826c826
<     #####:  824:	if(!a || !b) return 1;
---
>         -:  824:	if(!a || !b) return 1;
828,830c828,830
<     #####:  826:	for(i=0; i<len; i++){
<     #####:  827:		if( ((char *)a)[i] != ((char *)b)[i] ){
<     #####:  828:			rc = 1;
---
>         -:  826:	for(i=0; i<len; i++){
>         -:  827:		if( ((char *)a)[i] != ((char *)b)[i] ){
>         -:  828:			rc = 1;
866,868c866,868
<     #####:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
<     #####:  865:					if(rc == MOSQ_ERR_SUCCESS){
<     #####:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
---
>         -:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
>         -:  865:					if(rc == MOSQ_ERR_SUCCESS){
>         -:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
877c877
<         -:  875:					if(!strcmp(u->password, password)){
---
>     #####:  875:					if(!strcmp(u->password, password)){
904c904
<     #####:  902:		mosquitto__free(u->salt);
---
>         -:  902:		mosquitto__free(u->salt);
1020c1020
<     #####: 1018:int pw__digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)
---
>         -: 1018:int pw__digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)
1042,1043c1042,1043
<     #####: 1040:	digest = EVP_get_digestbyname("sha512");
<     #####: 1041:	if(!digest){
---
>         -: 1040:	digest = EVP_get_digestbyname("sha512");
>         -: 1041:	if(!digest){
1048,1051c1048,1051
<     #####: 1046:	context = EVP_MD_CTX_new();
<     #####: 1047:	EVP_DigestInit_ex(context, digest, NULL);
<     #####: 1048:	EVP_DigestUpdate(context, password, strlen(password));
<     #####: 1049:	EVP_DigestUpdate(context, salt, salt_len);
---
>         -: 1046:	context = EVP_MD_CTX_new();
>         -: 1047:	EVP_DigestInit_ex(context, digest, NULL);
>         -: 1048:	EVP_DigestUpdate(context, password, strlen(password));
>         -: 1049:	EVP_DigestUpdate(context, salt, salt_len);
1053,1054c1053,1054
<     #####: 1051:	EVP_DigestFinal_ex(context, hash, hash_len);
<     #####: 1052:	EVP_MD_CTX_free(context);
---
>         -: 1051:	EVP_DigestFinal_ex(context, hash, hash_len);
>         -: 1052:	EVP_MD_CTX_free(context);
1057c1057
<     #####: 1055:	return MOSQ_ERR_SUCCESS;
---
>         -: 1055:	return MOSQ_ERR_SUCCESS;
1060c1060
<     #####: 1058:int base64__decode(char *in, unsigned char **decoded, unsigned int *decoded_len)
---
>         -: 1058:int base64__decode(char *in, unsigned char **decoded, unsigned int *decoded_len)
1064,1068c1064,1068
<     #####: 1062:	b64 = BIO_new(BIO_f_base64());
<     #####: 1063:	BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
<     #####: 1064:	bmem = BIO_new(BIO_s_mem());
<     #####: 1065:	b64 = BIO_push(b64, bmem);
<     #####: 1066:	BIO_write(bmem, in, strlen(in));
---
>         -: 1062:	b64 = BIO_new(BIO_f_base64());
>         -: 1063:	BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
>         -: 1064:	bmem = BIO_new(BIO_s_mem());
>         -: 1065:	b64 = BIO_push(b64, bmem);
>         -: 1066:	BIO_write(bmem, in, strlen(in));
1070,1072c1070,1072
<     #####: 1068:	if(BIO_flush(bmem) != 1){
<     #####: 1069:		BIO_free_all(b64);
<     #####: 1070:		return 1;
---
>         -: 1068:	if(BIO_flush(bmem) != 1){
>         -: 1069:		BIO_free_all(b64);
>         -: 1070:		return 1;
1074,1076c1074,1076
<     #####: 1072:	*decoded = mosquitto__calloc(strlen(in), 1);
<     #####: 1073:	*decoded_len =  BIO_read(b64, *decoded, strlen(in));
<     #####: 1074:	BIO_free_all(b64);
---
>         -: 1072:	*decoded = mosquitto__calloc(strlen(in), 1);
>         -: 1073:	*decoded_len =  BIO_read(b64, *decoded, strlen(in));
>         -: 1074:	BIO_free_all(b64);
1078c1078
<     #####: 1076:	return 0;
---
>         -: 1076:	return 0;
