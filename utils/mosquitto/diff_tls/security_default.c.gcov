2803c2803
<     #####:  723:static int unpwd__file_parse(struct mosquitto__unpwd **unpwd, const char *password_file)
---
>         -:  723:static int unpwd__file_parse(struct mosquitto__unpwd **unpwd, const char *password_file)
2807,2812c2807,2812
<     #####:  727:	struct mosquitto__unpwd *u, *tmp;
<     #####:  728:	char *token;
<     #####:  729:	unsigned char *salt;
<     #####:  730:	unsigned int salt_len;
<     #####:  731:	unsigned char *password;
<     #####:  732:	unsigned int password_len;
---
>         -:  727:	struct mosquitto__unpwd *u, *tmp;
>         -:  728:	char *token;
>         -:  729:	unsigned char *salt;
>         -:  730:	unsigned int salt_len;
>         -:  731:	unsigned char *password;
>         -:  732:	unsigned int password_len;
2821c2821
<     #####:  741:	if(rc) return rc;
---
>         -:  741:	if(rc) return rc;
2823c2823
<     #####:  743:	HASH_ITER(hh, *unpwd, u, tmp){
---
>         -:  743:	HASH_ITER(hh, *unpwd, u, tmp){
2825,2840c2825,2840
<     #####:  745:		if(u->password){
<     #####:  746:			token = strtok(u->password, "$");
<     #####:  747:			if(token && !strcmp(token, "6")){
<     #####:  748:				token = strtok(NULL, "$");
<     #####:  749:				if(token){
<     #####:  750:					rc = base64__decode(token, &salt, &salt_len);
<     #####:  751:					if(rc == MOSQ_ERR_SUCCESS && salt_len == 12){
<     #####:  752:						u->salt = salt;
<     #####:  753:						u->salt_len = salt_len;
<     #####:  754:						token = strtok(NULL, "$");
<     #####:  755:						if(token){
<     #####:  756:							rc = base64__decode(token, &password, &password_len);
<     #####:  757:							if(rc == MOSQ_ERR_SUCCESS && password_len == 64){
<     #####:  758:								mosquitto__free(u->password);
<     #####:  759:								u->password = (char *)password;
<     #####:  760:								u->password_len = password_len;
---
>         -:  745:		if(u->password){
>         -:  746:			token = strtok(u->password, "$");
>         -:  747:			if(token && !strcmp(token, "6")){
>         -:  748:				token = strtok(NULL, "$");
>         -:  749:				if(token){
>         -:  750:					rc = base64__decode(token, &salt, &salt_len);
>         -:  751:					if(rc == MOSQ_ERR_SUCCESS && salt_len == 12){
>         -:  752:						u->salt = salt;
>         -:  753:						u->salt_len = salt_len;
>         -:  754:						token = strtok(NULL, "$");
>         -:  755:						if(token){
>         -:  756:							rc = base64__decode(token, &password, &password_len);
>         -:  757:							if(rc == MOSQ_ERR_SUCCESS && password_len == 64){
>         -:  758:								mosquitto__free(u->password);
>         -:  759:								u->password = (char *)password;
>         -:  760:								u->password_len = password_len;
2842,2843c2842,2843
<     #####:  762:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password for user %s, removing entry.", u->username);
<     #####:  763:								HASH_DEL(*unpwd, u);
---
>         -:  762:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password for user %s, removing entry.", u->username);
>         -:  763:								HASH_DEL(*unpwd, u);
2846,2847c2846,2847
<     #####:  766:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  767:							HASH_DEL(*unpwd, u);
---
>         -:  766:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
>         -:  767:							HASH_DEL(*unpwd, u);
2850,2851c2850,2851
<     #####:  770:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password salt for user %s, removing entry.", u->username);
<     #####:  771:						HASH_DEL(*unpwd, u);
---
>         -:  770:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password salt for user %s, removing entry.", u->username);
>         -:  771:						HASH_DEL(*unpwd, u);
2854,2855c2854,2855
<     #####:  774:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  775:					HASH_DEL(*unpwd, u);
---
>         -:  774:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
>         -:  775:					HASH_DEL(*unpwd, u);
2858,2859c2858,2859
<     #####:  778:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  779:				HASH_DEL(*unpwd, u);
---
>         -:  778:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
>         -:  779:				HASH_DEL(*unpwd, u);
2862,2863c2862,2863
<     #####:  782:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Missing password hash for user %s, removing entry.", u->username);
<     #####:  783:			HASH_DEL(*unpwd, u);
---
>         -:  782:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Missing password hash for user %s, removing entry.", u->username);
>         -:  783:			HASH_DEL(*unpwd, u);
2867c2867
<         -:  787:	return rc;
---
>     #####:  787:	return rc;
2869,3073d2868
< ------------------
< unpwd__file_parse:
<     #####:  723:static int unpwd__file_parse(struct mosquitto__unpwd **unpwd, const char *password_file)
<         -:  724:{
<     #####:  725:	int rc;
<         -:  726:#ifdef WITH_TLS
<     #####:  727:	struct mosquitto__unpwd *u, *tmp;
<     #####:  728:	char *token;
<     #####:  729:	unsigned char *salt;
<     #####:  730:	unsigned int salt_len;
<     #####:  731:	unsigned char *password;
<     #####:  732:	unsigned int password_len;
<         -:  733:#endif
<         -:  734:
<     #####:  735:	if(!unpwd) return MOSQ_ERR_INVAL;
<         -:  736:
<     #####:  737:	if(!password_file) return MOSQ_ERR_SUCCESS;
<         -:  738:
<     #####:  739:	rc = pwfile__parse(password_file, unpwd);
<         -:  740:#ifdef WITH_TLS
<     #####:  741:	if(rc) return rc;
<         -:  742:
<     #####:  743:	HASH_ITER(hh, *unpwd, u, tmp){
<         -:  744:		/* Need to decode password into hashed data + salt. */
<     #####:  745:		if(u->password){
<     #####:  746:			token = strtok(u->password, "$");
<     #####:  747:			if(token && !strcmp(token, "6")){
<     #####:  748:				token = strtok(NULL, "$");
<     #####:  749:				if(token){
<     #####:  750:					rc = base64__decode(token, &salt, &salt_len);
<     #####:  751:					if(rc == MOSQ_ERR_SUCCESS && salt_len == 12){
<     #####:  752:						u->salt = salt;
<     #####:  753:						u->salt_len = salt_len;
<     #####:  754:						token = strtok(NULL, "$");
<     #####:  755:						if(token){
<     #####:  756:							rc = base64__decode(token, &password, &password_len);
<     #####:  757:							if(rc == MOSQ_ERR_SUCCESS && password_len == 64){
<     #####:  758:								mosquitto__free(u->password);
<     #####:  759:								u->password = (char *)password;
<     #####:  760:								u->password_len = password_len;
<         -:  761:							}else{
<     #####:  762:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password for user %s, removing entry.", u->username);
<     #####:  763:								HASH_DEL(*unpwd, u);
<         -:  764:							}
<         -:  765:						}else{
<     #####:  766:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  767:							HASH_DEL(*unpwd, u);
<         -:  768:						}
<         -:  769:					}else{
<     #####:  770:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password salt for user %s, removing entry.", u->username);
<     #####:  771:						HASH_DEL(*unpwd, u);
<         -:  772:					}
<         -:  773:				}else{
<     #####:  774:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  775:					HASH_DEL(*unpwd, u);
<         -:  776:				}
<         -:  777:			}else{
<     #####:  778:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  779:				HASH_DEL(*unpwd, u);
<         -:  780:			}
<         -:  781:		}else{
<     #####:  782:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Missing password hash for user %s, removing entry.", u->username);
<     #####:  783:			HASH_DEL(*unpwd, u);
<         -:  784:		}
<         -:  785:	}
<         -:  786:#endif
<         -:  787:	return rc;
<         -:  788:}
< ------------------
< unpwd__file_parse:
<     #####:  723:static int unpwd__file_parse(struct mosquitto__unpwd **unpwd, const char *password_file)
<         -:  724:{
<     #####:  725:	int rc;
<         -:  726:#ifdef WITH_TLS
<     #####:  727:	struct mosquitto__unpwd *u, *tmp;
<     #####:  728:	char *token;
<     #####:  729:	unsigned char *salt;
<     #####:  730:	unsigned int salt_len;
<     #####:  731:	unsigned char *password;
<     #####:  732:	unsigned int password_len;
<         -:  733:#endif
<         -:  734:
<     #####:  735:	if(!unpwd) return MOSQ_ERR_INVAL;
<         -:  736:
<     #####:  737:	if(!password_file) return MOSQ_ERR_SUCCESS;
<         -:  738:
<     #####:  739:	rc = pwfile__parse(password_file, unpwd);
<         -:  740:#ifdef WITH_TLS
<     #####:  741:	if(rc) return rc;
<         -:  742:
<     #####:  743:	HASH_ITER(hh, *unpwd, u, tmp){
<         -:  744:		/* Need to decode password into hashed data + salt. */
<     #####:  745:		if(u->password){
<     #####:  746:			token = strtok(u->password, "$");
<     #####:  747:			if(token && !strcmp(token, "6")){
<     #####:  748:				token = strtok(NULL, "$");
<     #####:  749:				if(token){
<     #####:  750:					rc = base64__decode(token, &salt, &salt_len);
<     #####:  751:					if(rc == MOSQ_ERR_SUCCESS && salt_len == 12){
<     #####:  752:						u->salt = salt;
<     #####:  753:						u->salt_len = salt_len;
<     #####:  754:						token = strtok(NULL, "$");
<     #####:  755:						if(token){
<     #####:  756:							rc = base64__decode(token, &password, &password_len);
<     #####:  757:							if(rc == MOSQ_ERR_SUCCESS && password_len == 64){
<     #####:  758:								mosquitto__free(u->password);
<     #####:  759:								u->password = (char *)password;
<     #####:  760:								u->password_len = password_len;
<         -:  761:							}else{
<     #####:  762:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password for user %s, removing entry.", u->username);
<     #####:  763:								HASH_DEL(*unpwd, u);
<         -:  764:							}
<         -:  765:						}else{
<     #####:  766:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  767:							HASH_DEL(*unpwd, u);
<         -:  768:						}
<         -:  769:					}else{
<     #####:  770:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password salt for user %s, removing entry.", u->username);
<     #####:  771:						HASH_DEL(*unpwd, u);
<         -:  772:					}
<         -:  773:				}else{
<     #####:  774:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  775:					HASH_DEL(*unpwd, u);
<         -:  776:				}
<         -:  777:			}else{
<     #####:  778:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  779:				HASH_DEL(*unpwd, u);
<         -:  780:			}
<         -:  781:		}else{
<     #####:  782:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Missing password hash for user %s, removing entry.", u->username);
<     #####:  783:			HASH_DEL(*unpwd, u);
<         -:  784:		}
<         -:  785:	}
<         -:  786:#endif
<         -:  787:	return rc;
<         -:  788:}
< ------------------
< unpwd__file_parse:
<     #####:  723:static int unpwd__file_parse(struct mosquitto__unpwd **unpwd, const char *password_file)
<         -:  724:{
<     #####:  725:	int rc;
<         -:  726:#ifdef WITH_TLS
<     #####:  727:	struct mosquitto__unpwd *u, *tmp;
<     #####:  728:	char *token;
<     #####:  729:	unsigned char *salt;
<     #####:  730:	unsigned int salt_len;
<     #####:  731:	unsigned char *password;
<     #####:  732:	unsigned int password_len;
<         -:  733:#endif
<         -:  734:
<     #####:  735:	if(!unpwd) return MOSQ_ERR_INVAL;
<         -:  736:
<     #####:  737:	if(!password_file) return MOSQ_ERR_SUCCESS;
<         -:  738:
<     #####:  739:	rc = pwfile__parse(password_file, unpwd);
<         -:  740:#ifdef WITH_TLS
<     #####:  741:	if(rc) return rc;
<         -:  742:
<     #####:  743:	HASH_ITER(hh, *unpwd, u, tmp){
<         -:  744:		/* Need to decode password into hashed data + salt. */
<     #####:  745:		if(u->password){
<     #####:  746:			token = strtok(u->password, "$");
<     #####:  747:			if(token && !strcmp(token, "6")){
<     #####:  748:				token = strtok(NULL, "$");
<     #####:  749:				if(token){
<     #####:  750:					rc = base64__decode(token, &salt, &salt_len);
<     #####:  751:					if(rc == MOSQ_ERR_SUCCESS && salt_len == 12){
<     #####:  752:						u->salt = salt;
<     #####:  753:						u->salt_len = salt_len;
<     #####:  754:						token = strtok(NULL, "$");
<     #####:  755:						if(token){
<     #####:  756:							rc = base64__decode(token, &password, &password_len);
<     #####:  757:							if(rc == MOSQ_ERR_SUCCESS && password_len == 64){
<     #####:  758:								mosquitto__free(u->password);
<     #####:  759:								u->password = (char *)password;
<     #####:  760:								u->password_len = password_len;
<         -:  761:							}else{
<     #####:  762:								log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password for user %s, removing entry.", u->username);
<     #####:  763:								HASH_DEL(*unpwd, u);
<         -:  764:							}
<         -:  765:						}else{
<     #####:  766:							log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  767:							HASH_DEL(*unpwd, u);
<         -:  768:						}
<         -:  769:					}else{
<     #####:  770:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to decode password salt for user %s, removing entry.", u->username);
<     #####:  771:						HASH_DEL(*unpwd, u);
<         -:  772:					}
<         -:  773:				}else{
<     #####:  774:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  775:					HASH_DEL(*unpwd, u);
<         -:  776:				}
<         -:  777:			}else{
<     #####:  778:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid password hash for user %s, removing entry.", u->username);
<     #####:  779:				HASH_DEL(*unpwd, u);
<         -:  780:			}
<         -:  781:		}else{
<     #####:  782:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Missing password hash for user %s, removing entry.", u->username);
<     #####:  783:			HASH_DEL(*unpwd, u);
<         -:  784:		}
<         -:  785:	}
<         -:  786:#endif
<         -:  787:	return rc;
<         -:  788:}
< ------------------
3191,3192c2986,2987
<     #####:  821:	int i;
<     #####:  822:	int rc = 0;
---
>         -:  821:	int i;
>         -:  822:	int rc = 0;
3194c2989
<     #####:  824:	if(!a || !b) return 1;
---
>         -:  824:	if(!a || !b) return 1;
3196,3198c2991,2993
<     #####:  826:	for(i=0; i<len; i++){
<     #####:  827:		if( ((char *)a)[i] != ((char *)b)[i] ){
<     #####:  828:			rc = 1;
---
>         -:  826:	for(i=0; i<len; i++){
>         -:  827:		if( ((char *)a)[i] != ((char *)b)[i] ){
>         -:  828:			rc = 1;
3211,3213c3006,3008
<     #####:  841:	unsigned char hash[EVP_MAX_MD_SIZE];
<     #####:  842:	unsigned int hash_len;
<     #####:  843:	int rc;
---
>         -:  841:	unsigned char hash[EVP_MAX_MD_SIZE];
>         -:  842:	unsigned int hash_len;
>         -:  843:	int rc;
3234,3236c3029,3031
<     #####:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
<     #####:  865:					if(rc == MOSQ_ERR_SUCCESS){
<     #####:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
---
>         -:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
>         -:  865:					if(rc == MOSQ_ERR_SUCCESS){
>         -:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
3239c3034
<     #####:  869:							return MOSQ_ERR_AUTH;
---
>         -:  869:							return MOSQ_ERR_AUTH;
3245c3040
<         -:  875:					if(!strcmp(u->password, password)){
---
>     #####:  875:					if(!strcmp(u->password, password)){
3267,3269c3062,3064
<     #####:  841:	unsigned char hash[EVP_MAX_MD_SIZE];
<     #####:  842:	unsigned int hash_len;
<     #####:  843:	int rc;
---
>         -:  841:	unsigned char hash[EVP_MAX_MD_SIZE];
>         -:  842:	unsigned int hash_len;
>         -:  843:	int rc;
3290,3292c3085,3087
<     #####:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
<     #####:  865:					if(rc == MOSQ_ERR_SUCCESS){
<     #####:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
---
>         -:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
>         -:  865:					if(rc == MOSQ_ERR_SUCCESS){
>         -:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
3295c3090
<     #####:  869:							return MOSQ_ERR_AUTH;
---
>         -:  869:							return MOSQ_ERR_AUTH;
3301c3096
<         -:  875:					if(!strcmp(u->password, password)){
---
>     #####:  875:					if(!strcmp(u->password, password)){
3323,3325c3118,3120
<     #####:  841:	unsigned char hash[EVP_MAX_MD_SIZE];
<     #####:  842:	unsigned int hash_len;
<     #####:  843:	int rc;
---
>         -:  841:	unsigned char hash[EVP_MAX_MD_SIZE];
>         -:  842:	unsigned int hash_len;
>         -:  843:	int rc;
3346,3348c3141,3143
<     #####:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
<     #####:  865:					if(rc == MOSQ_ERR_SUCCESS){
<     #####:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
---
>         -:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
>         -:  865:					if(rc == MOSQ_ERR_SUCCESS){
>         -:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
3351c3146
<     #####:  869:							return MOSQ_ERR_AUTH;
---
>         -:  869:							return MOSQ_ERR_AUTH;
3357c3152
<         -:  875:					if(!strcmp(u->password, password)){
---
>     #####:  875:					if(!strcmp(u->password, password)){
3379,3381c3174,3176
<     #####:  841:	unsigned char hash[EVP_MAX_MD_SIZE];
<     #####:  842:	unsigned int hash_len;
<     #####:  843:	int rc;
---
>         -:  841:	unsigned char hash[EVP_MAX_MD_SIZE];
>         -:  842:	unsigned int hash_len;
>         -:  843:	int rc;
3402,3404c3197,3199
<     #####:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
<     #####:  865:					if(rc == MOSQ_ERR_SUCCESS){
<     #####:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
---
>         -:  864:					rc = pw__digest(password, u->salt, u->salt_len, hash, &hash_len);
>         -:  865:					if(rc == MOSQ_ERR_SUCCESS){
>         -:  866:						if(hash_len == u->password_len && !mosquitto__memcmp_const(u->password, hash, hash_len)){
3407c3202
<     #####:  869:							return MOSQ_ERR_AUTH;
---
>         -:  869:							return MOSQ_ERR_AUTH;
3413c3208
<         -:  875:					if(!strcmp(u->password, password)){
---
>     #####:  875:					if(!strcmp(u->password, password)){
3441c3236
<     #####:  902:		mosquitto__free(u->salt);
---
>         -:  902:		mosquitto__free(u->salt);
3463c3258
<     #####:  902:		mosquitto__free(u->salt);
---
>         -:  902:		mosquitto__free(u->salt);
3485c3280
<     #####:  902:		mosquitto__free(u->salt);
---
>         -:  902:		mosquitto__free(u->salt);
3507c3302
<     #####:  902:		mosquitto__free(u->salt);
---
>         -:  902:		mosquitto__free(u->salt);
3842,3926d3636
< ------------------
< mosquitto_psk_key_get_default:
<     #####:  990:int mosquitto_psk_key_get_default(struct mosquitto_db *db, struct mosquitto *context, const char *hint, const char *identity, char *key, int max_key_len)
<         -:  991:{
<     #####:  992:	struct mosquitto__unpwd *u, *tmp;
<     #####:  993:	struct mosquitto__unpwd *psk_id_ref = NULL;
<         -:  994:
<     #####:  995:	if(!db || !hint || !identity || !key) return MOSQ_ERR_INVAL;
<         -:  996:
<     #####:  997:	if(db->config->per_listener_settings){
<     #####:  998:		if(!context->listener) return MOSQ_ERR_INVAL;
<     #####:  999:		if(!context->listener->psk_id) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1000:		psk_id_ref = context->listener->psk_id;
<         -: 1001:	}else{
<     #####: 1002:		if(!db->psk_id) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1003:		psk_id_ref = db->psk_id;
<         -: 1004:	}
<     #####: 1005:	if(!psk_id_ref) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1006:
<     #####: 1007:	HASH_ITER(hh, psk_id_ref, u, tmp){
<     #####: 1008:		if(!strcmp(u->username, identity)){
<     #####: 1009:			strncpy(key, u->password, max_key_len);
<     #####: 1010:			return MOSQ_ERR_SUCCESS;
<         -: 1011:		}
<         -: 1012:	}
<         -: 1013:
<         -: 1014:	return MOSQ_ERR_AUTH;
<         -: 1015:}
< ------------------
< mosquitto_psk_key_get_default:
<     #####:  990:int mosquitto_psk_key_get_default(struct mosquitto_db *db, struct mosquitto *context, const char *hint, const char *identity, char *key, int max_key_len)
<         -:  991:{
<     #####:  992:	struct mosquitto__unpwd *u, *tmp;
<     #####:  993:	struct mosquitto__unpwd *psk_id_ref = NULL;
<         -:  994:
<     #####:  995:	if(!db || !hint || !identity || !key) return MOSQ_ERR_INVAL;
<         -:  996:
<     #####:  997:	if(db->config->per_listener_settings){
<     #####:  998:		if(!context->listener) return MOSQ_ERR_INVAL;
<     #####:  999:		if(!context->listener->psk_id) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1000:		psk_id_ref = context->listener->psk_id;
<         -: 1001:	}else{
<     #####: 1002:		if(!db->psk_id) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1003:		psk_id_ref = db->psk_id;
<         -: 1004:	}
<     #####: 1005:	if(!psk_id_ref) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1006:
<     #####: 1007:	HASH_ITER(hh, psk_id_ref, u, tmp){
<     #####: 1008:		if(!strcmp(u->username, identity)){
<     #####: 1009:			strncpy(key, u->password, max_key_len);
<     #####: 1010:			return MOSQ_ERR_SUCCESS;
<         -: 1011:		}
<         -: 1012:	}
<         -: 1013:
<         -: 1014:	return MOSQ_ERR_AUTH;
<         -: 1015:}
< ------------------
< mosquitto_psk_key_get_default:
<     #####:  990:int mosquitto_psk_key_get_default(struct mosquitto_db *db, struct mosquitto *context, const char *hint, const char *identity, char *key, int max_key_len)
<         -:  991:{
<     #####:  992:	struct mosquitto__unpwd *u, *tmp;
<     #####:  993:	struct mosquitto__unpwd *psk_id_ref = NULL;
<         -:  994:
<     #####:  995:	if(!db || !hint || !identity || !key) return MOSQ_ERR_INVAL;
<         -:  996:
<     #####:  997:	if(db->config->per_listener_settings){
<     #####:  998:		if(!context->listener) return MOSQ_ERR_INVAL;
<     #####:  999:		if(!context->listener->psk_id) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1000:		psk_id_ref = context->listener->psk_id;
<         -: 1001:	}else{
<     #####: 1002:		if(!db->psk_id) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1003:		psk_id_ref = db->psk_id;
<         -: 1004:	}
<     #####: 1005:	if(!psk_id_ref) return MOSQ_ERR_PLUGIN_DEFER;
<         -: 1006:
<     #####: 1007:	HASH_ITER(hh, psk_id_ref, u, tmp){
<     #####: 1008:		if(!strcmp(u->username, identity)){
<     #####: 1009:			strncpy(key, u->password, max_key_len);
<     #####: 1010:			return MOSQ_ERR_SUCCESS;
<         -: 1011:		}
<         -: 1012:	}
<         -: 1013:
<         -: 1014:	return MOSQ_ERR_AUTH;
<         -: 1015:}
< ------------------
3929c3639
<     #####: 1018:int pw__digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)
---
>         -: 1018:int pw__digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)
3931c3641
<     #####: 1020:	const EVP_MD *digest;
---
>         -: 1020:	const EVP_MD *digest;
3949c3659
<     #####: 1038:	EVP_MD_CTX *context;
---
>         -: 1038:	EVP_MD_CTX *context;
3951,3952c3661,3662
<     #####: 1040:	digest = EVP_get_digestbyname("sha512");
<     #####: 1041:	if(!digest){
---
>         -: 1040:	digest = EVP_get_digestbyname("sha512");
>         -: 1041:	if(!digest){
3957,3960c3667,3670
<     #####: 1046:	context = EVP_MD_CTX_new();
<     #####: 1047:	EVP_DigestInit_ex(context, digest, NULL);
<     #####: 1048:	EVP_DigestUpdate(context, password, strlen(password));
<     #####: 1049:	EVP_DigestUpdate(context, salt, salt_len);
---
>         -: 1046:	context = EVP_MD_CTX_new();
>         -: 1047:	EVP_DigestInit_ex(context, digest, NULL);
>         -: 1048:	EVP_DigestUpdate(context, password, strlen(password));
>         -: 1049:	EVP_DigestUpdate(context, salt, salt_len);
3962,3963c3672,3673
<     #####: 1051:	EVP_DigestFinal_ex(context, hash, hash_len);
<     #####: 1052:	EVP_MD_CTX_free(context);
---
>         -: 1051:	EVP_DigestFinal_ex(context, hash, hash_len);
>         -: 1052:	EVP_MD_CTX_free(context);
3966c3676
<     #####: 1055:	return MOSQ_ERR_SUCCESS;
---
>         -: 1055:	return MOSQ_ERR_SUCCESS;
3968,4091d3677
< ------------------
< pw__digest:
<     #####: 1018:int pw__digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)
<         -: 1019:{
<     #####: 1020:	const EVP_MD *digest;
<         -: 1021:#if OPENSSL_VERSION_NUMBER < 0x10100000L
<         -: 1022:	EVP_MD_CTX context;
<         -: 1023:
<         -: 1024:	digest = EVP_get_digestbyname("sha512");
<         -: 1025:	if(!digest){
<         -: 1026:		// FIXME fprintf(stderr, "Error: Unable to create openssl digest.\n");
<         -: 1027:		return 1;
<         -: 1028:	}
<         -: 1029:
<         -: 1030:	EVP_MD_CTX_init(&context);
<         -: 1031:	EVP_DigestInit_ex(&context, digest, NULL);
<         -: 1032:	EVP_DigestUpdate(&context, password, strlen(password));
<         -: 1033:	EVP_DigestUpdate(&context, salt, salt_len);
<         -: 1034:	/* hash is assumed to be EVP_MAX_MD_SIZE bytes long. */
<         -: 1035:	EVP_DigestFinal_ex(&context, hash, hash_len);
<         -: 1036:	EVP_MD_CTX_cleanup(&context);
<         -: 1037:#else
<     #####: 1038:	EVP_MD_CTX *context;
<         -: 1039:
<     #####: 1040:	digest = EVP_get_digestbyname("sha512");
<     #####: 1041:	if(!digest){
<         -: 1042:		// FIXME fprintf(stderr, "Error: Unable to create openssl digest.\n");
<         -: 1043:		return 1;
<         -: 1044:	}
<         -: 1045:
<     #####: 1046:	context = EVP_MD_CTX_new();
<     #####: 1047:	EVP_DigestInit_ex(context, digest, NULL);
<     #####: 1048:	EVP_DigestUpdate(context, password, strlen(password));
<     #####: 1049:	EVP_DigestUpdate(context, salt, salt_len);
<         -: 1050:	/* hash is assumed to be EVP_MAX_MD_SIZE bytes long. */
<     #####: 1051:	EVP_DigestFinal_ex(context, hash, hash_len);
<     #####: 1052:	EVP_MD_CTX_free(context);
<         -: 1053:#endif
<         -: 1054:
<     #####: 1055:	return MOSQ_ERR_SUCCESS;
<         -: 1056:}
< ------------------
< pw__digest:
<     #####: 1018:int pw__digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)
<         -: 1019:{
<     #####: 1020:	const EVP_MD *digest;
<         -: 1021:#if OPENSSL_VERSION_NUMBER < 0x10100000L
<         -: 1022:	EVP_MD_CTX context;
<         -: 1023:
<         -: 1024:	digest = EVP_get_digestbyname("sha512");
<         -: 1025:	if(!digest){
<         -: 1026:		// FIXME fprintf(stderr, "Error: Unable to create openssl digest.\n");
<         -: 1027:		return 1;
<         -: 1028:	}
<         -: 1029:
<         -: 1030:	EVP_MD_CTX_init(&context);
<         -: 1031:	EVP_DigestInit_ex(&context, digest, NULL);
<         -: 1032:	EVP_DigestUpdate(&context, password, strlen(password));
<         -: 1033:	EVP_DigestUpdate(&context, salt, salt_len);
<         -: 1034:	/* hash is assumed to be EVP_MAX_MD_SIZE bytes long. */
<         -: 1035:	EVP_DigestFinal_ex(&context, hash, hash_len);
<         -: 1036:	EVP_MD_CTX_cleanup(&context);
<         -: 1037:#else
<     #####: 1038:	EVP_MD_CTX *context;
<         -: 1039:
<     #####: 1040:	digest = EVP_get_digestbyname("sha512");
<     #####: 1041:	if(!digest){
<         -: 1042:		// FIXME fprintf(stderr, "Error: Unable to create openssl digest.\n");
<         -: 1043:		return 1;
<         -: 1044:	}
<         -: 1045:
<     #####: 1046:	context = EVP_MD_CTX_new();
<     #####: 1047:	EVP_DigestInit_ex(context, digest, NULL);
<     #####: 1048:	EVP_DigestUpdate(context, password, strlen(password));
<     #####: 1049:	EVP_DigestUpdate(context, salt, salt_len);
<         -: 1050:	/* hash is assumed to be EVP_MAX_MD_SIZE bytes long. */
<     #####: 1051:	EVP_DigestFinal_ex(context, hash, hash_len);
<     #####: 1052:	EVP_MD_CTX_free(context);
<         -: 1053:#endif
<         -: 1054:
<     #####: 1055:	return MOSQ_ERR_SUCCESS;
<         -: 1056:}
< ------------------
< pw__digest:
<     #####: 1018:int pw__digest(const char *password, const unsigned char *salt, unsigned int salt_len, unsigned char *hash, unsigned int *hash_len)
<         -: 1019:{
<     #####: 1020:	const EVP_MD *digest;
<         -: 1021:#if OPENSSL_VERSION_NUMBER < 0x10100000L
<         -: 1022:	EVP_MD_CTX context;
<         -: 1023:
<         -: 1024:	digest = EVP_get_digestbyname("sha512");
<         -: 1025:	if(!digest){
<         -: 1026:		// FIXME fprintf(stderr, "Error: Unable to create openssl digest.\n");
<         -: 1027:		return 1;
<         -: 1028:	}
<         -: 1029:
<         -: 1030:	EVP_MD_CTX_init(&context);
<         -: 1031:	EVP_DigestInit_ex(&context, digest, NULL);
<         -: 1032:	EVP_DigestUpdate(&context, password, strlen(password));
<         -: 1033:	EVP_DigestUpdate(&context, salt, salt_len);
<         -: 1034:	/* hash is assumed to be EVP_MAX_MD_SIZE bytes long. */
<         -: 1035:	EVP_DigestFinal_ex(&context, hash, hash_len);
<         -: 1036:	EVP_MD_CTX_cleanup(&context);
<         -: 1037:#else
<     #####: 1038:	EVP_MD_CTX *context;
<         -: 1039:
<     #####: 1040:	digest = EVP_get_digestbyname("sha512");
<     #####: 1041:	if(!digest){
<         -: 1042:		// FIXME fprintf(stderr, "Error: Unable to create openssl digest.\n");
<         -: 1043:		return 1;
<         -: 1044:	}
<         -: 1045:
<     #####: 1046:	context = EVP_MD_CTX_new();
<     #####: 1047:	EVP_DigestInit_ex(context, digest, NULL);
<     #####: 1048:	EVP_DigestUpdate(context, password, strlen(password));
<     #####: 1049:	EVP_DigestUpdate(context, salt, salt_len);
<         -: 1050:	/* hash is assumed to be EVP_MAX_MD_SIZE bytes long. */
<     #####: 1051:	EVP_DigestFinal_ex(context, hash, hash_len);
<     #####: 1052:	EVP_MD_CTX_free(context);
<         -: 1053:#endif
<         -: 1054:
<     #####: 1055:	return MOSQ_ERR_SUCCESS;
<         -: 1056:}
< ------------------
4093c3679
<     #####: 1058:int base64__decode(char *in, unsigned char **decoded, unsigned int *decoded_len)
---
>         -: 1058:int base64__decode(char *in, unsigned char **decoded, unsigned int *decoded_len)
4095c3681
<     #####: 1060:	BIO *bmem, *b64;
---
>         -: 1060:	BIO *bmem, *b64;
4097,4101c3683,3687
<     #####: 1062:	b64 = BIO_new(BIO_f_base64());
<     #####: 1063:	BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
<     #####: 1064:	bmem = BIO_new(BIO_s_mem());
<     #####: 1065:	b64 = BIO_push(b64, bmem);
<     #####: 1066:	BIO_write(bmem, in, strlen(in));
---
>         -: 1062:	b64 = BIO_new(BIO_f_base64());
>         -: 1063:	BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
>         -: 1064:	bmem = BIO_new(BIO_s_mem());
>         -: 1065:	b64 = BIO_push(b64, bmem);
>         -: 1066:	BIO_write(bmem, in, strlen(in));
4103,4105c3689,3691
<     #####: 1068:	if(BIO_flush(bmem) != 1){
<     #####: 1069:		BIO_free_all(b64);
<     #####: 1070:		return 1;
---
>         -: 1068:	if(BIO_flush(bmem) != 1){
>         -: 1069:		BIO_free_all(b64);
>         -: 1070:		return 1;
4107,4109c3693,3695
<     #####: 1072:	*decoded = mosquitto__calloc(strlen(in), 1);
<     #####: 1073:	*decoded_len =  BIO_read(b64, *decoded, strlen(in));
<     #####: 1074:	BIO_free_all(b64);
---
>         -: 1072:	*decoded = mosquitto__calloc(strlen(in), 1);
>         -: 1073:	*decoded_len =  BIO_read(b64, *decoded, strlen(in));
>         -: 1074:	BIO_free_all(b64);
4111c3697
<     #####: 1076:	return 0;
---
>         -: 1076:	return 0;
