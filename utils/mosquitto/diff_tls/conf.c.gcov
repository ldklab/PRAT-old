868,875c868,875
<     #####:  297:			mosquitto__free(config->listeners[i].cafile);
<     #####:  298:			mosquitto__free(config->listeners[i].capath);
<     #####:  299:			mosquitto__free(config->listeners[i].certfile);
<     #####:  300:			mosquitto__free(config->listeners[i].keyfile);
<     #####:  301:			mosquitto__free(config->listeners[i].ciphers);
<     #####:  302:			mosquitto__free(config->listeners[i].psk_hint);
<     #####:  303:			mosquitto__free(config->listeners[i].crlfile);
<     #####:  304:			mosquitto__free(config->listeners[i].tls_version);
---
>         -:  297:			mosquitto__free(config->listeners[i].cafile);
>         -:  298:			mosquitto__free(config->listeners[i].capath);
>         -:  299:			mosquitto__free(config->listeners[i].certfile);
>         -:  300:			mosquitto__free(config->listeners[i].keyfile);
>         -:  301:			mosquitto__free(config->listeners[i].ciphers);
>         -:  302:			mosquitto__free(config->listeners[i].psk_hint);
>         -:  303:			mosquitto__free(config->listeners[i].crlfile);
>         -:  304:			mosquitto__free(config->listeners[i].tls_version);
880c880
<     #####:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
---
>         -:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
917,918c917,918
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
920,921c920,921
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
967,974c967,974
<     #####:  297:			mosquitto__free(config->listeners[i].cafile);
<     #####:  298:			mosquitto__free(config->listeners[i].capath);
<     #####:  299:			mosquitto__free(config->listeners[i].certfile);
<     #####:  300:			mosquitto__free(config->listeners[i].keyfile);
<     #####:  301:			mosquitto__free(config->listeners[i].ciphers);
<     #####:  302:			mosquitto__free(config->listeners[i].psk_hint);
<     #####:  303:			mosquitto__free(config->listeners[i].crlfile);
<     #####:  304:			mosquitto__free(config->listeners[i].tls_version);
---
>         -:  297:			mosquitto__free(config->listeners[i].cafile);
>         -:  298:			mosquitto__free(config->listeners[i].capath);
>         -:  299:			mosquitto__free(config->listeners[i].certfile);
>         -:  300:			mosquitto__free(config->listeners[i].keyfile);
>         -:  301:			mosquitto__free(config->listeners[i].ciphers);
>         -:  302:			mosquitto__free(config->listeners[i].psk_hint);
>         -:  303:			mosquitto__free(config->listeners[i].crlfile);
>         -:  304:			mosquitto__free(config->listeners[i].tls_version);
979c979
<     #####:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
---
>         -:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
1016,1017c1016,1017
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
1019,1020c1019,1020
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
1066,1073c1066,1073
<     #####:  297:			mosquitto__free(config->listeners[i].cafile);
<     #####:  298:			mosquitto__free(config->listeners[i].capath);
<     #####:  299:			mosquitto__free(config->listeners[i].certfile);
<     #####:  300:			mosquitto__free(config->listeners[i].keyfile);
<     #####:  301:			mosquitto__free(config->listeners[i].ciphers);
<     #####:  302:			mosquitto__free(config->listeners[i].psk_hint);
<     #####:  303:			mosquitto__free(config->listeners[i].crlfile);
<     #####:  304:			mosquitto__free(config->listeners[i].tls_version);
---
>         -:  297:			mosquitto__free(config->listeners[i].cafile);
>         -:  298:			mosquitto__free(config->listeners[i].capath);
>         -:  299:			mosquitto__free(config->listeners[i].certfile);
>         -:  300:			mosquitto__free(config->listeners[i].keyfile);
>         -:  301:			mosquitto__free(config->listeners[i].ciphers);
>         -:  302:			mosquitto__free(config->listeners[i].psk_hint);
>         -:  303:			mosquitto__free(config->listeners[i].crlfile);
>         -:  304:			mosquitto__free(config->listeners[i].tls_version);
1078c1078
<     #####:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
---
>         -:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
1115,1116c1115,1116
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
1118,1119c1118,1119
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
1165,1172c1165,1172
<     #####:  297:			mosquitto__free(config->listeners[i].cafile);
<     #####:  298:			mosquitto__free(config->listeners[i].capath);
<     #####:  299:			mosquitto__free(config->listeners[i].certfile);
<     #####:  300:			mosquitto__free(config->listeners[i].keyfile);
<     #####:  301:			mosquitto__free(config->listeners[i].ciphers);
<     #####:  302:			mosquitto__free(config->listeners[i].psk_hint);
<     #####:  303:			mosquitto__free(config->listeners[i].crlfile);
<     #####:  304:			mosquitto__free(config->listeners[i].tls_version);
---
>         -:  297:			mosquitto__free(config->listeners[i].cafile);
>         -:  298:			mosquitto__free(config->listeners[i].capath);
>         -:  299:			mosquitto__free(config->listeners[i].certfile);
>         -:  300:			mosquitto__free(config->listeners[i].keyfile);
>         -:  301:			mosquitto__free(config->listeners[i].ciphers);
>         -:  302:			mosquitto__free(config->listeners[i].psk_hint);
>         -:  303:			mosquitto__free(config->listeners[i].crlfile);
>         -:  304:			mosquitto__free(config->listeners[i].tls_version);
1177c1177
<     #####:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
---
>         -:  309:				SSL_CTX_free(config->listeners[i].ssl_ctx);
1214,1215c1214,1215
<     #####:  346:			mosquitto__free(config->bridges[i].tls_version);
<     #####:  347:			mosquitto__free(config->bridges[i].tls_cafile);
---
>         -:  346:			mosquitto__free(config->bridges[i].tls_version);
>         -:  347:			mosquitto__free(config->bridges[i].tls_cafile);
1217,1218c1217,1218
<     #####:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
<     #####:  350:			mosquitto__free(config->bridges[i].tls_psk);
---
>         -:  349:			mosquitto__free(config->bridges[i].tls_psk_identity);
>         -:  350:			mosquitto__free(config->bridges[i].tls_psk);
1354,1361c1354,1361
<     #####:  436:			|| config->default_listener.cafile
<     #####:  437:			|| config->default_listener.capath
<     #####:  438:			|| config->default_listener.certfile
<     #####:  439:			|| config->default_listener.keyfile
<     #####:  440:			|| config->default_listener.ciphers
<     #####:  441:			|| config->default_listener.psk_hint
<     #####:  442:			|| config->default_listener.require_certificate
<     #####:  443:			|| config->default_listener.crlfile
---
>         -:  436:			|| config->default_listener.cafile
>         -:  437:			|| config->default_listener.capath
>         -:  438:			|| config->default_listener.certfile
>         -:  439:			|| config->default_listener.keyfile
>         -:  440:			|| config->default_listener.ciphers
>         -:  441:			|| config->default_listener.psk_hint
>         -:  442:			|| config->default_listener.require_certificate
>         -:  443:			|| config->default_listener.crlfile
1363c1363
<     #####:  445:			|| config->default_listener.use_subject_as_username
---
>         -:  445:			|| config->default_listener.use_subject_as_username
1409,1420c1409,1420
<     #####:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
<     #####:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
<     #####:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
<     #####:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
<     #####:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
<     #####:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
<     #####:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
<     #####:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
<     #####:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
<     #####:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
<     #####:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
<     #####:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
---
>         -:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
>         -:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
>         -:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
>         -:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
>         -:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
>         -:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
>         -:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
>         -:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
>         -:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
>         -:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
>         -:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
>         -:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
1493,1500c1493,1500
<     #####:  436:			|| config->default_listener.cafile
<     #####:  437:			|| config->default_listener.capath
<     #####:  438:			|| config->default_listener.certfile
<     #####:  439:			|| config->default_listener.keyfile
<     #####:  440:			|| config->default_listener.ciphers
<     #####:  441:			|| config->default_listener.psk_hint
<     #####:  442:			|| config->default_listener.require_certificate
<     #####:  443:			|| config->default_listener.crlfile
---
>         -:  436:			|| config->default_listener.cafile
>         -:  437:			|| config->default_listener.capath
>         -:  438:			|| config->default_listener.certfile
>         -:  439:			|| config->default_listener.keyfile
>         -:  440:			|| config->default_listener.ciphers
>         -:  441:			|| config->default_listener.psk_hint
>         -:  442:			|| config->default_listener.require_certificate
>         -:  443:			|| config->default_listener.crlfile
1502c1502
<     #####:  445:			|| config->default_listener.use_subject_as_username
---
>         -:  445:			|| config->default_listener.use_subject_as_username
1548,1559c1548,1559
<     #####:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
<     #####:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
<     #####:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
<     #####:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
<     #####:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
<     #####:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
<     #####:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
<     #####:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
<     #####:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
<     #####:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
<     #####:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
<     #####:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
---
>         -:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
>         -:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
>         -:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
>         -:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
>         -:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
>         -:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
>         -:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
>         -:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
>         -:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
>         -:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
>         -:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
>         -:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
1632,1639c1632,1639
<     #####:  436:			|| config->default_listener.cafile
<     #####:  437:			|| config->default_listener.capath
<     #####:  438:			|| config->default_listener.certfile
<     #####:  439:			|| config->default_listener.keyfile
<     #####:  440:			|| config->default_listener.ciphers
<     #####:  441:			|| config->default_listener.psk_hint
<     #####:  442:			|| config->default_listener.require_certificate
<     #####:  443:			|| config->default_listener.crlfile
---
>         -:  436:			|| config->default_listener.cafile
>         -:  437:			|| config->default_listener.capath
>         -:  438:			|| config->default_listener.certfile
>         -:  439:			|| config->default_listener.keyfile
>         -:  440:			|| config->default_listener.ciphers
>         -:  441:			|| config->default_listener.psk_hint
>         -:  442:			|| config->default_listener.require_certificate
>         -:  443:			|| config->default_listener.crlfile
1641c1641
<     #####:  445:			|| config->default_listener.use_subject_as_username
---
>         -:  445:			|| config->default_listener.use_subject_as_username
1687,1698c1687,1698
<     #####:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
<     #####:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
<     #####:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
<     #####:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
<     #####:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
<     #####:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
<     #####:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
<     #####:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
<     #####:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
<     #####:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
<     #####:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
<     #####:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
---
>         -:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
>         -:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
>         -:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
>         -:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
>         -:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
>         -:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
>         -:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
>         -:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
>         -:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
>         -:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
>         -:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
>         -:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
1771,1778c1771,1778
<     #####:  436:			|| config->default_listener.cafile
<     #####:  437:			|| config->default_listener.capath
<     #####:  438:			|| config->default_listener.certfile
<     #####:  439:			|| config->default_listener.keyfile
<     #####:  440:			|| config->default_listener.ciphers
<     #####:  441:			|| config->default_listener.psk_hint
<     #####:  442:			|| config->default_listener.require_certificate
<     #####:  443:			|| config->default_listener.crlfile
---
>         -:  436:			|| config->default_listener.cafile
>         -:  437:			|| config->default_listener.capath
>         -:  438:			|| config->default_listener.certfile
>         -:  439:			|| config->default_listener.keyfile
>         -:  440:			|| config->default_listener.ciphers
>         -:  441:			|| config->default_listener.psk_hint
>         -:  442:			|| config->default_listener.require_certificate
>         -:  443:			|| config->default_listener.crlfile
1780c1780
<     #####:  445:			|| config->default_listener.use_subject_as_username
---
>         -:  445:			|| config->default_listener.use_subject_as_username
1826,1837c1826,1837
<     #####:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
<     #####:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
<     #####:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
<     #####:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
<     #####:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
<     #####:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
<     #####:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
<     #####:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
<     #####:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
<     #####:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
<     #####:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
<     #####:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
---
>         -:  491:		config->listeners[config->listener_count-1].tls_version = config->default_listener.tls_version;
>         -:  492:		config->listeners[config->listener_count-1].cafile = config->default_listener.cafile;
>         -:  493:		config->listeners[config->listener_count-1].capath = config->default_listener.capath;
>         -:  494:		config->listeners[config->listener_count-1].certfile = config->default_listener.certfile;
>         -:  495:		config->listeners[config->listener_count-1].keyfile = config->default_listener.keyfile;
>         -:  496:		config->listeners[config->listener_count-1].ciphers = config->default_listener.ciphers;
>         -:  497:		config->listeners[config->listener_count-1].psk_hint = config->default_listener.psk_hint;
>         -:  498:		config->listeners[config->listener_count-1].require_certificate = config->default_listener.require_certificate;
>         -:  499:		config->listeners[config->listener_count-1].ssl_ctx = NULL;
>         -:  500:		config->listeners[config->listener_count-1].crlfile = config->default_listener.crlfile;
>         -:  501:		config->listeners[config->listener_count-1].use_identity_as_username = config->default_listener.use_identity_as_username;
>         -:  502:		config->listeners[config->listener_count-1].use_subject_as_username = config->default_listener.use_subject_as_username;
2223,2225c2223,2225
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
2227,2229c2227,2229
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
2359,2361c2359,2361
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
2363,2365c2363,2365
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
2495,2497c2495,2497
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
2499,2501c2499,2501
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
2631,2633c2631,2633
<     #####:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
<     #####:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
<     #####:  699:			return MOSQ_ERR_INVAL;
---
>         -:  697:		if(config->bridges[i].tls_psk && !config->bridges[i].tls_psk_identity){
>         -:  698:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_identity.\n");
>         -:  699:			return MOSQ_ERR_INVAL;
2635,2637c2635,2637
<     #####:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
<     #####:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
<     #####:  703:			return MOSQ_ERR_INVAL;
---
>         -:  701:		if(config->bridges[i].tls_psk_identity && !config->bridges[i].tls_psk){
>         -:  702:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration: missing bridge_psk.\n");
>         -:  703:			return MOSQ_ERR_INVAL;
2853,2856c2853,2856
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
2859,2861c2859,2861
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
2864c2864
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
2866c2866
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
2870,2873c2870,2873
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
2876,2878c2876,2878
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
2881c2881
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
2883c2883
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
2887,2890c2887,2890
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
2893,2895c2893,2895
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
2898c2898
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
2900c2900
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
2904,2907c2904,2907
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
2909,2911c2909,2911
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
2913c2913
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
2915c2915
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
2919,2922c2919,2922
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
2924,2926c2924,2926
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
2929c2929
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
2933,2936c2933,2936
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
2939,2941c2939,2941
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
2944c2944
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
2946c2946
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
2974,2977c2974,2977
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
2979,2981c2979,2981
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
2983c2983
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
2985c2985
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
2989,2992c2989,2992
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
2994c2994
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
2996c2996
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
3000,3003c3000,3003
<     #####: 1065:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1066:					if(cur_listener->psk_hint){
<     #####: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1068:						return MOSQ_ERR_INVAL;
---
>         -: 1065:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1066:					if(cur_listener->psk_hint){
>         -: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1068:						return MOSQ_ERR_INVAL;
3005c3005
<     #####: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
3007c3007
<         -: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3011,3012c3011,3012
<     #####: 1076:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1076:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
3014c3014
<         -: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3018,3021c3018,3021
<     #####: 1083:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1084:					if(cur_listener->psk_hint){
<     #####: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1086:						return MOSQ_ERR_INVAL;
---
>         -: 1083:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1084:					if(cur_listener->psk_hint){
>         -: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1086:						return MOSQ_ERR_INVAL;
3023c3023
<     #####: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
3025c3025
<         -: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3032,3033c3032,3033
<     #####: 1097:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1097:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
3035c3035
<         -: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3113,3114c3113,3114
<     #####: 1178:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1178:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
3116c3116
<         -: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3187,3188c3187,3188
<     #####: 1252:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1252:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
3190c3190
<         -: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3597,3600c3597,3600
<     #####: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
<     #####: 1663:					if(reload){
<     #####: 1664:						mosquitto__free(cur_security_options->psk_file);
<     #####: 1665:						cur_security_options->psk_file = NULL;
---
>         -: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
>         -: 1663:					if(reload){
>         -: 1664:						mosquitto__free(cur_security_options->psk_file);
>         -: 1665:						cur_security_options->psk_file = NULL;
3602c3602
<     #####: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
3604c3604
<         -: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
3608,3609c3608,3609
<     #####: 1673:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1673:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
3611c3611
<         -: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
3617,3618c3617,3618
<     #####: 1682:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1682:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
3620c3620
<         -: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3722,3723c3722,3723
<     #####: 1787:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1787:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
3725c3725
<         -: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3896,3897c3896,3897
<     #####: 1961:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1961:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
3899c3899
<         -: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
3903,3904c3903,3904
<     #####: 1968:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1968:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
3906c3906
<         -: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
4145,4148c4145,4148
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
4151,4153c4151,4153
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
4156c4156
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
4158c4158
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4162,4165c4162,4165
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
4168,4170c4168,4170
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
4173c4173
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
4175c4175
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4179,4182c4179,4182
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
4185,4187c4185,4187
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
4190c4190
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
4192c4192
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4196,4199c4196,4199
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
4201,4203c4201,4203
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
4205c4205
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
4207c4207
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
4211,4214c4211,4214
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
4216,4218c4216,4218
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
4221c4221
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
4225,4228c4225,4228
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
4231,4233c4231,4233
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
4236c4236
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
4238c4238
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4266,4269c4266,4269
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
4271,4273c4271,4273
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
4275c4275
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
4277c4277
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
4281,4284c4281,4284
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
4286c4286
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
4288c4288
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
4292,4295c4292,4295
<     #####: 1065:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1066:					if(cur_listener->psk_hint){
<     #####: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1068:						return MOSQ_ERR_INVAL;
---
>         -: 1065:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1066:					if(cur_listener->psk_hint){
>         -: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1068:						return MOSQ_ERR_INVAL;
4297c4297
<     #####: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
4299c4299
<         -: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
4303,4304c4303,4304
<     #####: 1076:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1076:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
4306c4306
<         -: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
4310,4313c4310,4313
<     #####: 1083:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1084:					if(cur_listener->psk_hint){
<     #####: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1086:						return MOSQ_ERR_INVAL;
---
>         -: 1083:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1084:					if(cur_listener->psk_hint){
>         -: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1086:						return MOSQ_ERR_INVAL;
4315c4315
<     #####: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
4317c4317
<         -: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
4324,4325c4324,4325
<     #####: 1097:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1097:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
4327c4327
<         -: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
4405,4406c4405,4406
<     #####: 1178:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1178:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
4408c4408
<         -: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
4479,4480c4479,4480
<     #####: 1252:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1252:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
4482c4482
<         -: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
4889,4892c4889,4892
<     #####: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
<     #####: 1663:					if(reload){
<     #####: 1664:						mosquitto__free(cur_security_options->psk_file);
<     #####: 1665:						cur_security_options->psk_file = NULL;
---
>         -: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
>         -: 1663:					if(reload){
>         -: 1664:						mosquitto__free(cur_security_options->psk_file);
>         -: 1665:						cur_security_options->psk_file = NULL;
4894c4894
<     #####: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
4896c4896
<         -: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
4900,4901c4900,4901
<     #####: 1673:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1673:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
4903c4903
<         -: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
4909,4910c4909,4910
<     #####: 1682:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1682:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
4912c4912
<         -: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5014,5015c5014,5015
<     #####: 1787:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1787:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
5017c5017
<         -: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5188,5189c5188,5189
<     #####: 1961:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1961:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
5191c5191
<         -: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5195,5196c5195,5196
<     #####: 1968:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1968:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
5198c5198
<         -: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5437,5440c5437,5440
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
5443,5445c5443,5445
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
5448c5448
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
5450c5450
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5454,5457c5454,5457
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
5460,5462c5460,5462
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
5465c5465
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
5467c5467
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5471,5474c5471,5474
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
5477,5479c5477,5479
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
5482c5482
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
5484c5484
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5488,5491c5488,5491
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
5493,5495c5493,5495
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
5497c5497
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
5499c5499
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
5503,5506c5503,5506
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
5508,5510c5508,5510
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
5513c5513
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
5517,5520c5517,5520
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
5523,5525c5523,5525
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
5528c5528
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
5530c5530
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5558,5561c5558,5561
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
5563,5565c5563,5565
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
5567c5567
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
5569c5569
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
5573,5576c5573,5576
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
5578c5578
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
5580c5580
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
5584,5587c5584,5587
<     #####: 1065:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1066:					if(cur_listener->psk_hint){
<     #####: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1068:						return MOSQ_ERR_INVAL;
---
>         -: 1065:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1066:					if(cur_listener->psk_hint){
>         -: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1068:						return MOSQ_ERR_INVAL;
5589c5589
<     #####: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
5591c5591
<         -: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5595,5596c5595,5596
<     #####: 1076:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1076:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
5598c5598
<         -: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5602,5605c5602,5605
<     #####: 1083:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1084:					if(cur_listener->psk_hint){
<     #####: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1086:						return MOSQ_ERR_INVAL;
---
>         -: 1083:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1084:					if(cur_listener->psk_hint){
>         -: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1086:						return MOSQ_ERR_INVAL;
5607c5607
<     #####: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
5609c5609
<         -: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5616,5617c5616,5617
<     #####: 1097:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1097:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
5619c5619
<         -: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5697,5698c5697,5698
<     #####: 1178:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1178:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
5700c5700
<         -: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
5771,5772c5771,5772
<     #####: 1252:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1252:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
5774c5774
<         -: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6181,6184c6181,6184
<     #####: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
<     #####: 1663:					if(reload){
<     #####: 1664:						mosquitto__free(cur_security_options->psk_file);
<     #####: 1665:						cur_security_options->psk_file = NULL;
---
>         -: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
>         -: 1663:					if(reload){
>         -: 1664:						mosquitto__free(cur_security_options->psk_file);
>         -: 1665:						cur_security_options->psk_file = NULL;
6186c6186
<     #####: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
6188c6188
<         -: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
6192,6193c6192,6193
<     #####: 1673:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1673:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
6195c6195
<         -: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
6201,6202c6201,6202
<     #####: 1682:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1682:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
6204c6204
<         -: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6306,6307c6306,6307
<     #####: 1787:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1787:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
6309c6309
<         -: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6480,6481c6480,6481
<     #####: 1961:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1961:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
6483c6483
<         -: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6487,6488c6487,6488
<     #####: 1968:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1968:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
6490c6490
<         -: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6729,6732c6729,6732
<     #####:  918:					if(reload) continue; // FIXME
<     #####:  919:					if(!cur_bridge){
<     #####:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  921:						return MOSQ_ERR_INVAL;
---
>         -:  918:					if(reload) continue; // FIXME
>         -:  919:					if(!cur_bridge){
>         -:  920:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  921:						return MOSQ_ERR_INVAL;
6735,6737c6735,6737
<     #####:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  926:						return MOSQ_ERR_INVAL;
---
>         -:  924:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  925:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  926:						return MOSQ_ERR_INVAL;
6740c6740
<     #####:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  929:					if(conf__parse_string(&token, "bridge_cafile", &cur_bridge->tls_cafile, saveptr)) return MOSQ_ERR_INVAL;
6742c6742
<         -:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  931:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6746,6749c6746,6749
<     #####:  935:					if(reload) continue; // FIXME
<     #####:  936:					if(!cur_bridge){
<     #####:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  938:						return MOSQ_ERR_INVAL;
---
>         -:  935:					if(reload) continue; // FIXME
>         -:  936:					if(!cur_bridge){
>         -:  937:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  938:						return MOSQ_ERR_INVAL;
6752,6754c6752,6754
<     #####:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  943:						return MOSQ_ERR_INVAL;
---
>         -:  941:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  942:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  943:						return MOSQ_ERR_INVAL;
6757c6757
<     #####:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  946:					if(conf__parse_string(&token, "bridge_capath", &cur_bridge->tls_capath, saveptr)) return MOSQ_ERR_INVAL;
6759c6759
<         -:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  948:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6763,6766c6763,6766
<     #####:  952:					if(reload) continue; // FIXME
<     #####:  953:					if(!cur_bridge){
<     #####:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  955:						return MOSQ_ERR_INVAL;
---
>         -:  952:					if(reload) continue; // FIXME
>         -:  953:					if(!cur_bridge){
>         -:  954:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  955:						return MOSQ_ERR_INVAL;
6769,6771c6769,6771
<     #####:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####:  960:						return MOSQ_ERR_INVAL;
---
>         -:  958:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -:  959:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -:  960:						return MOSQ_ERR_INVAL;
6774c6774
<     #####:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  963:					if(conf__parse_string(&token, "bridge_certfile", &cur_bridge->tls_certfile, saveptr)) return MOSQ_ERR_INVAL;
6776c6776
<         -:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####:  965:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6780,6783c6780,6783
<     #####:  969:					if(reload) continue; // FIXME
<     #####:  970:					if(!cur_bridge){
<     #####:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  972:						return MOSQ_ERR_INVAL;
---
>         -:  969:					if(reload) continue; // FIXME
>         -:  970:					if(!cur_bridge){
>         -:  971:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  972:						return MOSQ_ERR_INVAL;
6785,6787c6785,6787
<     #####:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
<     #####:  976:						return MOSQ_ERR_INVAL;
---
>         -:  974:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -:  975:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and identity encryption in a single bridge.");
>         -:  976:						return MOSQ_ERR_INVAL;
6789c6789
<     #####:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
---
>         -:  978:					if(conf__parse_string(&token, "bridge_identity", &cur_bridge->tls_psk_identity, saveptr)) return MOSQ_ERR_INVAL;
6791c6791
<         -:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  980:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
6795,6798c6795,6798
<     #####:  984:					if(reload) continue; // FIXME
<     #####:  985:					if(!cur_bridge){
<     #####:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####:  987:						return MOSQ_ERR_INVAL;
---
>         -:  984:					if(reload) continue; // FIXME
>         -:  985:					if(!cur_bridge){
>         -:  986:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -:  987:						return MOSQ_ERR_INVAL;
6800,6802c6800,6802
<     #####:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
<     #####:  990:					if(cur_bridge->tls_insecure){
<     #####:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
---
>         -:  989:					if(conf__parse_bool(&token, "bridge_insecure", &cur_bridge->tls_insecure, saveptr)) return MOSQ_ERR_INVAL;
>         -:  990:					if(cur_bridge->tls_insecure){
>         -:  991:						log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge %s using insecure mode.", cur_bridge->name);
6805c6805
<         -:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####:  994:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
6809,6812c6809,6812
<     #####:  998:					if(reload) continue; // FIXME
<     #####:  999:					if(!cur_bridge){
<     #####: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1001:						return MOSQ_ERR_INVAL;
---
>         -:  998:					if(reload) continue; // FIXME
>         -:  999:					if(!cur_bridge){
>         -: 1000:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1001:						return MOSQ_ERR_INVAL;
6815,6817c6815,6817
<     #####: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
<     #####: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1006:						return MOSQ_ERR_INVAL;
---
>         -: 1004:					if(cur_bridge->tls_psk_identity || cur_bridge->tls_psk){
>         -: 1005:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1006:						return MOSQ_ERR_INVAL;
6820c6820
<     #####: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1009:					if(conf__parse_string(&token, "bridge_keyfile", &cur_bridge->tls_keyfile, saveptr)) return MOSQ_ERR_INVAL;
6822c6822
<         -: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1011:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6850,6853c6850,6853
<     #####: 1039:					if(reload) continue; // FIXME
<     #####: 1040:					if(!cur_bridge){
<     #####: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1042:						return MOSQ_ERR_INVAL;
---
>         -: 1039:					if(reload) continue; // FIXME
>         -: 1040:					if(!cur_bridge){
>         -: 1041:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1042:						return MOSQ_ERR_INVAL;
6855,6857c6855,6857
<     #####: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
<     #####: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
<     #####: 1046:						return MOSQ_ERR_INVAL;
---
>         -: 1044:					if(cur_bridge->tls_cafile || cur_bridge->tls_capath || cur_bridge->tls_certfile || cur_bridge->tls_keyfile){
>         -: 1045:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single bridge.");
>         -: 1046:						return MOSQ_ERR_INVAL;
6859c6859
<     #####: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1048:					if(conf__parse_string(&token, "bridge_psk", &cur_bridge->tls_psk, saveptr)) return MOSQ_ERR_INVAL;
6861c6861
<         -: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
---
>     #####: 1050:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS-PSK support not available.");
6865,6868c6865,6868
<     #####: 1054:					if(reload) continue; // FIXME
<     #####: 1055:					if(!cur_bridge){
<     #####: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
<     #####: 1057:						return MOSQ_ERR_INVAL;
---
>         -: 1054:					if(reload) continue; // FIXME
>         -: 1055:					if(!cur_bridge){
>         -: 1056:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid bridge configuration.");
>         -: 1057:						return MOSQ_ERR_INVAL;
6870c6870
<     #####: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1059:					if(conf__parse_string(&token, "bridge_tls_version", &cur_bridge->tls_version, saveptr)) return MOSQ_ERR_INVAL;
6872c6872
<         -: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
---
>     #####: 1061:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Bridge and/or TLS support not available.");
6876,6879c6876,6879
<     #####: 1065:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1066:					if(cur_listener->psk_hint){
<     #####: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1068:						return MOSQ_ERR_INVAL;
---
>         -: 1065:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1066:					if(cur_listener->psk_hint){
>         -: 1067:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1068:						return MOSQ_ERR_INVAL;
6881c6881
<     #####: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1070:					if(conf__parse_string(&token, "cafile", &cur_listener->cafile, saveptr)) return MOSQ_ERR_INVAL;
6883c6883
<         -: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1072:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6887,6888c6887,6888
<     #####: 1076:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1076:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1077:					if(conf__parse_string(&token, "capath", &cur_listener->capath, saveptr)) return MOSQ_ERR_INVAL;
6890c6890
<         -: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1079:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6894,6897c6894,6897
<     #####: 1083:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1084:					if(cur_listener->psk_hint){
<     #####: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
<     #####: 1086:						return MOSQ_ERR_INVAL;
---
>         -: 1083:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1084:					if(cur_listener->psk_hint){
>         -: 1085:						log__printf(NULL, MOSQ_LOG_ERR, "Error: Cannot use both certificate and psk encryption in a single listener.");
>         -: 1086:						return MOSQ_ERR_INVAL;
6899c6899
<     #####: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1088:					if(conf__parse_string(&token, "certfile", &cur_listener->certfile, saveptr)) return MOSQ_ERR_INVAL;
6901c6901
<         -: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1090:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6908,6909c6908,6909
<     #####: 1097:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1097:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1098:					if(conf__parse_string(&token, "ciphers", &cur_listener->ciphers, saveptr)) return MOSQ_ERR_INVAL;
6911c6911
<         -: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1100:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
6989,6990c6989,6990
<     #####: 1178:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1178:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1179:					if(conf__parse_string(&token, "crlfile", &cur_listener->crlfile, saveptr)) return MOSQ_ERR_INVAL;
6992c6992
<         -: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1181:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
7063,7064c7063,7064
<     #####: 1252:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1252:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1253:					if(conf__parse_string(&token, "keyfile", &cur_listener->keyfile, saveptr)) return MOSQ_ERR_INVAL;
7066c7066
<         -: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1255:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
7473,7476c7473,7476
<     #####: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
<     #####: 1663:					if(reload){
<     #####: 1664:						mosquitto__free(cur_security_options->psk_file);
<     #####: 1665:						cur_security_options->psk_file = NULL;
---
>         -: 1662:					conf__set_cur_security_options(config, cur_listener, &cur_security_options);
>         -: 1663:					if(reload){
>         -: 1664:						mosquitto__free(cur_security_options->psk_file);
>         -: 1665:						cur_security_options->psk_file = NULL;
7478c7478
<     #####: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1667:					if(conf__parse_string(&token, "psk_file", &cur_security_options->psk_file, saveptr)) return MOSQ_ERR_INVAL;
7480c7480
<         -: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1669:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
7484,7485c7484,7485
<     #####: 1673:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1673:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1674:					if(conf__parse_string(&token, "psk_hint", &cur_listener->psk_hint, saveptr)) return MOSQ_ERR_INVAL;
7487c7487
<         -: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
---
>     #####: 1676:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS/TLS-PSK support not available.");
7493,7494c7493,7494
<     #####: 1682:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1682:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1683:					if(conf__parse_bool(&token, "require_certificate", &cur_listener->require_certificate, saveptr)) return MOSQ_ERR_INVAL;
7496c7496
<         -: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1685:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
7598,7599c7598,7599
<     #####: 1787:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1787:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1788:					if(conf__parse_string(&token, "tls_version", &cur_listener->tls_version, saveptr)) return MOSQ_ERR_INVAL;
7601c7601
<         -: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1790:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
7772,7773c7772,7773
<     #####: 1961:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1961:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1962:					if(conf__parse_bool(&token, "use_identity_as_username", &cur_listener->use_identity_as_username, saveptr)) return MOSQ_ERR_INVAL;
7775c7775
<         -: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1964:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
7779,7780c7779,7780
<     #####: 1968:					if(reload) continue; // Listeners not valid for reloading.
<     #####: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
---
>         -: 1968:					if(reload) continue; // Listeners not valid for reloading.
>         -: 1969:					if(conf__parse_bool(&token, "use_subject_as_username", &cur_listener->use_subject_as_username, saveptr)) return MOSQ_ERR_INVAL;
7782c7782
<         -: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
---
>     #####: 1971:					log__printf(NULL, MOSQ_LOG_WARNING, "Warning: TLS support not available.");
