366c366
<     #####:  364:int mosquitto__hex2bin(const char *hex, unsigned char *bin, int bin_max_len)
---
>         -:  364:int mosquitto__hex2bin(const char *hex, unsigned char *bin, int bin_max_len)
368c368
<     #####:  366:	BIGNUM *bn = NULL;
---
>         -:  366:	BIGNUM *bn = NULL;
370,372c370,372
<     #####:  368:	int leading_zero = 0;
<     #####:  369:	int start = 0;
<     #####:  370:	int i = 0;
---
>         -:  368:	int leading_zero = 0;
>         -:  369:	int start = 0;
>         -:  370:	int i = 0;
375,377c375,377
<     #####:  373:	for(i=0; i<strlen(hex); i=i+2) {
<     #####:  374:		if(strncmp(hex + i, "00", 2) == 0) {
<     #####:  375:			leading_zero++;
---
>         -:  373:	for(i=0; i<strlen(hex); i=i+2) {
>         -:  374:		if(strncmp(hex + i, "00", 2) == 0) {
>         -:  375:			leading_zero++;
379c379
<     #####:  377:			bin[start++] = 0;
---
>         -:  377:			bin[start++] = 0;
385,386c385,386
<     #####:  383:	if(BN_hex2bn(&bn, hex) == 0){
<     #####:  384:		if(bn) BN_free(bn);
---
>         -:  383:	if(BN_hex2bn(&bn, hex) == 0){
>         -:  384:		if(bn) BN_free(bn);
389,391c389,391
<     #####:  387:	if(BN_num_bytes(bn) + leading_zero > bin_max_len){
<     #####:  388:		BN_free(bn);
<     #####:  389:		return 0;
---
>         -:  387:	if(BN_num_bytes(bn) + leading_zero > bin_max_len){
>         -:  388:		BN_free(bn);
>         -:  389:		return 0;
394,396c394,396
<     #####:  392:	len = BN_bn2bin(bn, bin + leading_zero);
<     #####:  393:	BN_free(bn);
<     #####:  394:	return len + leading_zero;
---
>         -:  392:	len = BN_bn2bin(bn, bin + leading_zero);
>         -:  393:	BN_free(bn);
>         -:  394:	return len + leading_zero;
