1,2c1,2
<         -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/TAO/tao/Generic_Sequence_T.h
<         -:    0:Programs:51
---
>         -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/TAO/tao/Generic_Sequence_T.h
>         -:    0:Programs:15
56c56
<         -:   54: * $Id$
---
>         -:   54: * $Id: Generic_Sequence_T.h 2179 2013-05-28 22:16:51Z mesnierp $
112,113c112,113
<         -:  110:  generic_sequence(void)
<         -:  111:    : maximum_(allocation_traits::default_maximum())
---
>     #####:  110:  generic_sequence(void)
>     #####:  111:    : maximum_(allocation_traits::default_maximum())
115,116c115,116
<         -:  113:    , buffer_(allocation_traits::default_buffer_allocation())
<         -:  114:    , release_(buffer_ != 0)
---
>     #####:  113:    , buffer_(allocation_traits::default_buffer_allocation())
>     #####:  114:    , release_(buffer_ != 0)
118c118
<         -:  116:  }
---
>     #####:  116:  }
140,218d139
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEC2EjjPS4_b:
<     #####:  127:  generic_sequence(
<         -:  128:      CORBA::ULong maximum,
<         -:  129:      CORBA::ULong length,
<         -:  130:      value_type * data,
<         -:  131:      CORBA::Boolean release)
<         -:  132:    : maximum_(maximum)
<         -:  133:    , length_(length)
<         -:  134:    , buffer_(data)
<     #####:  135:    , release_(release)
<         -:  136:  {
<     #####:  137:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEC2EjjPS4_b:
<     #####:  127:  generic_sequence(
<         -:  128:      CORBA::ULong maximum,
<         -:  129:      CORBA::ULong length,
<         -:  130:      value_type * data,
<         -:  131:      CORBA::Boolean release)
<         -:  132:    : maximum_(maximum)
<         -:  133:    , length_(length)
<         -:  134:    , buffer_(data)
<     #####:  135:    , release_(release)
<         -:  136:  {
<     #####:  137:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEC2EjjPS4_b:
<     #####:  127:  generic_sequence(
<         -:  128:      CORBA::ULong maximum,
<         -:  129:      CORBA::ULong length,
<         -:  130:      value_type * data,
<         -:  131:      CORBA::Boolean release)
<         -:  132:    : maximum_(maximum)
<         -:  133:    , length_(length)
<         -:  134:    , buffer_(data)
<     #####:  135:    , release_(release)
<         -:  136:  {
<     #####:  137:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEC2EjjPS4_b:
<     #####:  127:  generic_sequence(
<         -:  128:      CORBA::ULong maximum,
<         -:  129:      CORBA::ULong length,
<         -:  130:      value_type * data,
<         -:  131:      CORBA::Boolean release)
<         -:  132:    : maximum_(maximum)
<         -:  133:    , length_(length)
<         -:  134:    , buffer_(data)
<     #####:  135:    , release_(release)
<         -:  136:  {
<     #####:  137:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEC2EjjPS4_b:
<     #####:  127:  generic_sequence(
<         -:  128:      CORBA::ULong maximum,
<         -:  129:      CORBA::ULong length,
<         -:  130:      value_type * data,
<         -:  131:      CORBA::Boolean release)
<         -:  132:    : maximum_(maximum)
<         -:  133:    , length_(length)
<         -:  134:    , buffer_(data)
<     #####:  135:    , release_(release)
<         -:  136:  {
<     #####:  137:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIPcNS0_37unbounded_reference_allocation_traitsIS2_NS0_13string_traitsIcLb1EEELb1EEES5_EC2EjjPS2_b:
<     #####:  127:  generic_sequence(
<         -:  128:      CORBA::ULong maximum,
<         -:  129:      CORBA::ULong length,
<         -:  130:      value_type * data,
<         -:  131:      CORBA::Boolean release)
<         -:  132:    : maximum_(maximum)
<         -:  133:    , length_(length)
<         -:  134:    , buffer_(data)
<     #####:  135:    , release_(release)
<         -:  136:  {
<     #####:  137:  }
< ------------------
221c142
<     #####:  140:  generic_sequence(generic_sequence const & rhs)
---
>         -:  140:  generic_sequence(generic_sequence const & rhs)
225c146
<     #####:  144:    , release_(false)
---
>         -:  144:    , release_(false)
227c148
<     #####:  146:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
---
>         -:  146:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
229,231c150,152
<     #####:  148:      maximum_ = rhs.maximum_;
<     #####:  149:      length_ = rhs.length_;
<     #####:  150:      return;
---
>         -:  148:      maximum_ = rhs.maximum_;
>         -:  149:      length_ = rhs.length_;
>         -:  150:      return;
233,234c154,155
<     #####:  152:    generic_sequence tmp(rhs.maximum_, rhs.length_,
<     #####:  153:                         allocation_traits::allocbuf_noinit(rhs.maximum_),
---
>         -:  152:    generic_sequence tmp(rhs.maximum_, rhs.length_,
>         -:  153:                         allocation_traits::allocbuf_noinit(rhs.maximum_),
236,238c157,159
<     #####:  155:    element_traits::initialize_range(
<     #####:  156:        tmp.buffer_ + tmp.length_, tmp.buffer_ + tmp.maximum_);
<     #####:  157:    element_traits::copy_range(
---
>         -:  155:    element_traits::initialize_range(
>         -:  156:        tmp.buffer_ + tmp.length_, tmp.buffer_ + tmp.maximum_);
>         -:  157:    element_traits::copy_range(
240,242c161,163
<     #####:  159:        rhs.buffer_ + rhs.length_,
<     #####:  160:        ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<     #####:  161:    swap(tmp);
---
>         -:  159:        rhs.buffer_ + rhs.length_,
>         -:  160:        ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
>         -:  161:    swap(tmp);
244,319d164
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEC2ERKS9_:
<     #####:  140:  generic_sequence(generic_sequence const & rhs)
<         -:  141:    : maximum_(0)
<         -:  142:    , length_(0)
<         -:  143:    , buffer_(0)
<     #####:  144:    , release_(false)
<         -:  145:  {
<     #####:  146:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
<         -:  147:    {
<     #####:  148:      maximum_ = rhs.maximum_;
<     #####:  149:      length_ = rhs.length_;
<     #####:  150:      return;
<         -:  151:    }
<     #####:  152:    generic_sequence tmp(rhs.maximum_, rhs.length_,
<     #####:  153:                         allocation_traits::allocbuf_noinit(rhs.maximum_),
<         -:  154:                         true);
<     #####:  155:    element_traits::initialize_range(
<     #####:  156:        tmp.buffer_ + tmp.length_, tmp.buffer_ + tmp.maximum_);
<     #####:  157:    element_traits::copy_range(
<         -:  158:        rhs.buffer_,
<     #####:  159:        rhs.buffer_ + rhs.length_,
<     #####:  160:        ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<     #####:  161:    swap(tmp);
<         -:  162:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEC2ERKS9_:
<     #####:  140:  generic_sequence(generic_sequence const & rhs)
<         -:  141:    : maximum_(0)
<         -:  142:    , length_(0)
<         -:  143:    , buffer_(0)
<     #####:  144:    , release_(false)
<         -:  145:  {
<     #####:  146:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
<         -:  147:    {
<     #####:  148:      maximum_ = rhs.maximum_;
<     #####:  149:      length_ = rhs.length_;
<     #####:  150:      return;
<         -:  151:    }
<     #####:  152:    generic_sequence tmp(rhs.maximum_, rhs.length_,
<     #####:  153:                         allocation_traits::allocbuf_noinit(rhs.maximum_),
<         -:  154:                         true);
<     #####:  155:    element_traits::initialize_range(
<     #####:  156:        tmp.buffer_ + tmp.length_, tmp.buffer_ + tmp.maximum_);
<     #####:  157:    element_traits::copy_range(
<         -:  158:        rhs.buffer_,
<     #####:  159:        rhs.buffer_ + rhs.length_,
<     #####:  160:        ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<     #####:  161:    swap(tmp);
<         -:  162:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIPcNS0_37unbounded_reference_allocation_traitsIS2_NS0_13string_traitsIcLb1EEELb1EEES5_EC2ERKS7_:
<     #####:  140:  generic_sequence(generic_sequence const & rhs)
<         -:  141:    : maximum_(0)
<         -:  142:    , length_(0)
<         -:  143:    , buffer_(0)
<     #####:  144:    , release_(false)
<         -:  145:  {
<     #####:  146:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
<         -:  147:    {
<     #####:  148:      maximum_ = rhs.maximum_;
<     #####:  149:      length_ = rhs.length_;
<     #####:  150:      return;
<         -:  151:    }
<     #####:  152:    generic_sequence tmp(rhs.maximum_, rhs.length_,
<     #####:  153:                         allocation_traits::allocbuf_noinit(rhs.maximum_),
<         -:  154:                         true);
<     #####:  155:    element_traits::initialize_range(
<     #####:  156:        tmp.buffer_ + tmp.length_, tmp.buffer_ + tmp.maximum_);
<     #####:  157:    element_traits::copy_range(
<         -:  158:        rhs.buffer_,
<     #####:  159:        rhs.buffer_ + rhs.length_,
<     #####:  160:        ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<     #####:  161:    swap(tmp);
<         -:  162:  }
< ------------------
322c167
<     #####:  165:  generic_sequence & operator=(generic_sequence const & rhs)
---
>         -:  165:  generic_sequence & operator=(generic_sequence const & rhs)
324,326c169,171
<     #####:  167:    generic_sequence tmp(rhs);
<     #####:  168:    swap(tmp);
<     #####:  169:    return * this;
---
>         -:  167:    generic_sequence tmp(rhs);
>         -:  168:    swap(tmp);
>         -:  169:    return * this;
328,352d172
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEaSERKS9_:
<     #####:  165:  generic_sequence & operator=(generic_sequence const & rhs)
<         -:  166:  {
<     #####:  167:    generic_sequence tmp(rhs);
<     #####:  168:    swap(tmp);
<     #####:  169:    return * this;
<         -:  170:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEaSERKS9_:
<     #####:  165:  generic_sequence & operator=(generic_sequence const & rhs)
<         -:  166:  {
<     #####:  167:    generic_sequence tmp(rhs);
<     #####:  168:    swap(tmp);
<     #####:  169:    return * this;
<         -:  170:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIPcNS0_37unbounded_reference_allocation_traitsIS2_NS0_13string_traitsIcLb1EEELb1EEES5_EaSERKS7_:
<     #####:  165:  generic_sequence & operator=(generic_sequence const & rhs)
<         -:  166:  {
<     #####:  167:    generic_sequence tmp(rhs);
<     #####:  168:    swap(tmp);
<     #####:  169:    return * this;
<         -:  170:  }
< ------------------
362,416d181
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEED2Ev:
<     #####:  173:  ~generic_sequence()
<         -:  174:  {
<     #####:  175:    if (release_)
<         -:  176:    {
<     #####:  177:      freebuf(buffer_);
<         -:  178:    }
<     #####:  179:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEED2Ev:
<     #####:  173:  ~generic_sequence()
<         -:  174:  {
<     #####:  175:    if (release_)
<         -:  176:    {
<     #####:  177:      freebuf(buffer_);
<         -:  178:    }
<     #####:  179:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEED2Ev:
<     #####:  173:  ~generic_sequence()
<         -:  174:  {
<     #####:  175:    if (release_)
<         -:  176:    {
<     #####:  177:      freebuf(buffer_);
<         -:  178:    }
<     #####:  179:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEED2Ev:
<     #####:  173:  ~generic_sequence()
<         -:  174:  {
<     #####:  175:    if (release_)
<         -:  176:    {
<     #####:  177:      freebuf(buffer_);
<         -:  178:    }
<     #####:  179:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEED2Ev:
<     #####:  173:  ~generic_sequence()
<         -:  174:  {
<     #####:  175:    if (release_)
<         -:  176:    {
<     #####:  177:      freebuf(buffer_);
<         -:  178:    }
<     #####:  179:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIPcNS0_37unbounded_reference_allocation_traitsIS2_NS0_13string_traitsIcLb1EEELb1EEES5_ED2Ev:
<     #####:  173:  ~generic_sequence()
<         -:  174:  {
<     #####:  175:    if (release_)
<         -:  176:    {
<     #####:  177:      freebuf(buffer_);
<         -:  178:    }
<     #####:  179:  }
< ------------------
425c190
<         -:  188:  inline CORBA::Boolean release() const
---
>     #####:  188:  inline CORBA::Boolean release() const
427c192
<         -:  190:    return release_;
---
>     #####:  190:    return release_;
435,465d199
< ------------------
< _ZNK3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEv:
<     #####:  194:  inline CORBA::ULong length() const
<         -:  195:  {
<     #####:  196:    return length_;
<         -:  197:  }
< ------------------
< _ZNK3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEv:
<     #####:  194:  inline CORBA::ULong length() const
<         -:  195:  {
<     #####:  196:    return length_;
<         -:  197:  }
< ------------------
< _ZNK3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEv:
<     #####:  194:  inline CORBA::ULong length() const
<         -:  195:  {
<     #####:  196:    return length_;
<         -:  197:  }
< ------------------
< _ZNK3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEv:
<     #####:  194:  inline CORBA::ULong length() const
<         -:  195:  {
<     #####:  196:    return length_;
<         -:  197:  }
< ------------------
< _ZNK3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEv:
<     #####:  194:  inline CORBA::ULong length() const
<         -:  195:  {
<     #####:  196:    return length_;
<         -:  197:  }
< ------------------
516,716d249
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEj:
<     #####:  200:  void length(CORBA::ULong length)
<         -:  201:  {
<     #####:  202:    if (length <= maximum_)
<         -:  203:    {
<     #####:  204:      if (buffer_ == 0)
<         -:  205:        {
<     #####:  206:          buffer_ = allocbuf(maximum_);
<     #####:  207:          release_ = true;
<     #####:  208:          length_ = length;
<         -:  209:          // Since allocbuf returns completely initialized buffer
<         -:  210:          // no further actions are required.
<     #####:  211:          return;
<         -:  212:        }
<         -:  213:
<         -:  214:      // When sequence doesn't own a buffer it's not allowed
<         -:  215:      // to change it in any way.
<     #####:  216:      if (length < length_ && release_)
<         -:  217:      {
<         -:  218:        // TODO This code does not provide the strong-exception
<         -:  219:        //      guarantee, but it does provide the weak-exception
<         -:  220:        //      guarantee.  The problem would appear when
<         -:  221:        //      initialize_range() raises an exception after several
<         -:  222:        //      elements have been modified.  One could argue that
<         -:  223:        //      this problem is irrelevant, as the elements already
<         -:  224:        //      modified are unreachable to conforming applications.
<     #####:  225:        element_traits::release_range(
<     #####:  226:          buffer_ + length, buffer_ + length_);
<     #####:  227:        element_traits::initialize_range(
<     #####:  228:          buffer_ + length, buffer_ + length_);
<         -:  229:      }
<     #####:  230:      length_ = length;
<     #####:  231:      return;
<         -:  232:    }
<         -:  233:
<     #####:  234:    generic_sequence tmp(length, length,
<         -:  235:                         allocation_traits::allocbuf_noinit(length),
<         -:  236:                         true);
<         -:  237:    // First do initialize_range. If it will throw then tmp will be
<         -:  238:    // destructed but *this will remain unchanged.
<     #####:  239:    element_traits::initialize_range(
<     #####:  240:        tmp.buffer_ + length_, tmp.buffer_ + length);
<     #####:  241:    element_traits::copy_swap_range(
<         -:  242:      buffer_,
<     #####:  243:      buffer_ + length_,
<     #####:  244:      ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<         -:  245:
<     #####:  246:    swap(tmp);
<         -:  247:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEj:
<     #####:  200:  void length(CORBA::ULong length)
<         -:  201:  {
<     #####:  202:    if (length <= maximum_)
<         -:  203:    {
<     #####:  204:      if (buffer_ == 0)
<         -:  205:        {
<     #####:  206:          buffer_ = allocbuf(maximum_);
<     #####:  207:          release_ = true;
<     #####:  208:          length_ = length;
<         -:  209:          // Since allocbuf returns completely initialized buffer
<         -:  210:          // no further actions are required.
<     #####:  211:          return;
<         -:  212:        }
<         -:  213:
<         -:  214:      // When sequence doesn't own a buffer it's not allowed
<         -:  215:      // to change it in any way.
<     #####:  216:      if (length < length_ && release_)
<         -:  217:      {
<         -:  218:        // TODO This code does not provide the strong-exception
<         -:  219:        //      guarantee, but it does provide the weak-exception
<         -:  220:        //      guarantee.  The problem would appear when
<         -:  221:        //      initialize_range() raises an exception after several
<         -:  222:        //      elements have been modified.  One could argue that
<         -:  223:        //      this problem is irrelevant, as the elements already
<         -:  224:        //      modified are unreachable to conforming applications.
<     #####:  225:        element_traits::release_range(
<     #####:  226:          buffer_ + length, buffer_ + length_);
<     #####:  227:        element_traits::initialize_range(
<     #####:  228:          buffer_ + length, buffer_ + length_);
<         -:  229:      }
<     #####:  230:      length_ = length;
<     #####:  231:      return;
<         -:  232:    }
<         -:  233:
<     #####:  234:    generic_sequence tmp(length, length,
<         -:  235:                         allocation_traits::allocbuf_noinit(length),
<         -:  236:                         true);
<         -:  237:    // First do initialize_range. If it will throw then tmp will be
<         -:  238:    // destructed but *this will remain unchanged.
<     #####:  239:    element_traits::initialize_range(
<     #####:  240:        tmp.buffer_ + length_, tmp.buffer_ + length);
<     #####:  241:    element_traits::copy_swap_range(
<         -:  242:      buffer_,
<     #####:  243:      buffer_ + length_,
<     #####:  244:      ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<         -:  245:
<     #####:  246:    swap(tmp);
<         -:  247:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEj:
<     #####:  200:  void length(CORBA::ULong length)
<         -:  201:  {
<     #####:  202:    if (length <= maximum_)
<         -:  203:    {
<     #####:  204:      if (buffer_ == 0)
<         -:  205:        {
<     #####:  206:          buffer_ = allocbuf(maximum_);
<     #####:  207:          release_ = true;
<     #####:  208:          length_ = length;
<         -:  209:          // Since allocbuf returns completely initialized buffer
<         -:  210:          // no further actions are required.
<     #####:  211:          return;
<         -:  212:        }
<         -:  213:
<         -:  214:      // When sequence doesn't own a buffer it's not allowed
<         -:  215:      // to change it in any way.
<     #####:  216:      if (length < length_ && release_)
<         -:  217:      {
<         -:  218:        // TODO This code does not provide the strong-exception
<         -:  219:        //      guarantee, but it does provide the weak-exception
<         -:  220:        //      guarantee.  The problem would appear when
<         -:  221:        //      initialize_range() raises an exception after several
<         -:  222:        //      elements have been modified.  One could argue that
<         -:  223:        //      this problem is irrelevant, as the elements already
<         -:  224:        //      modified are unreachable to conforming applications.
<     #####:  225:        element_traits::release_range(
<     #####:  226:          buffer_ + length, buffer_ + length_);
<     #####:  227:        element_traits::initialize_range(
<     #####:  228:          buffer_ + length, buffer_ + length_);
<         -:  229:      }
<     #####:  230:      length_ = length;
<     #####:  231:      return;
<         -:  232:    }
<         -:  233:
<     #####:  234:    generic_sequence tmp(length, length,
<         -:  235:                         allocation_traits::allocbuf_noinit(length),
<         -:  236:                         true);
<         -:  237:    // First do initialize_range. If it will throw then tmp will be
<         -:  238:    // destructed but *this will remain unchanged.
<     #####:  239:    element_traits::initialize_range(
<     #####:  240:        tmp.buffer_ + length_, tmp.buffer_ + length);
<     #####:  241:    element_traits::copy_swap_range(
<         -:  242:      buffer_,
<     #####:  243:      buffer_ + length_,
<     #####:  244:      ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<         -:  245:
<     #####:  246:    swap(tmp);
<         -:  247:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE6lengthEj:
<     #####:  200:  void length(CORBA::ULong length)
<         -:  201:  {
<     #####:  202:    if (length <= maximum_)
<         -:  203:    {
<     #####:  204:      if (buffer_ == 0)
<         -:  205:        {
<     #####:  206:          buffer_ = allocbuf(maximum_);
<     #####:  207:          release_ = true;
<     #####:  208:          length_ = length;
<         -:  209:          // Since allocbuf returns completely initialized buffer
<         -:  210:          // no further actions are required.
<     #####:  211:          return;
<         -:  212:        }
<         -:  213:
<         -:  214:      // When sequence doesn't own a buffer it's not allowed
<         -:  215:      // to change it in any way.
<     #####:  216:      if (length < length_ && release_)
<         -:  217:      {
<         -:  218:        // TODO This code does not provide the strong-exception
<         -:  219:        //      guarantee, but it does provide the weak-exception
<         -:  220:        //      guarantee.  The problem would appear when
<         -:  221:        //      initialize_range() raises an exception after several
<         -:  222:        //      elements have been modified.  One could argue that
<         -:  223:        //      this problem is irrelevant, as the elements already
<         -:  224:        //      modified are unreachable to conforming applications.
<     #####:  225:        element_traits::release_range(
<     #####:  226:          buffer_ + length, buffer_ + length_);
<     #####:  227:        element_traits::initialize_range(
<     #####:  228:          buffer_ + length, buffer_ + length_);
<         -:  229:      }
<     #####:  230:      length_ = length;
<     #####:  231:      return;
<         -:  232:    }
<         -:  233:
<     #####:  234:    generic_sequence tmp(length, length,
<         -:  235:                         allocation_traits::allocbuf_noinit(length),
<         -:  236:                         true);
<         -:  237:    // First do initialize_range. If it will throw then tmp will be
<         -:  238:    // destructed but *this will remain unchanged.
<     #####:  239:    element_traits::initialize_range(
<     #####:  240:        tmp.buffer_ + length_, tmp.buffer_ + length);
<     #####:  241:    element_traits::copy_swap_range(
<         -:  242:      buffer_,
<     #####:  243:      buffer_ + length_,
<     #####:  244:      ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<         -:  245:
<     #####:  246:    swap(tmp);
<         -:  247:  }
< ------------------
724,738d256
< ------------------
< _ZNK3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEixEj:
<     #####:  250:  value_type const & operator[](CORBA::ULong i) const
<         -:  251:  {
<     #####:  252:    range::check(i, length_, maximum_, "operator[]() const");
<     #####:  253:    return buffer_[i];
<         -:  254:  }
< ------------------
< _ZNK3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEixEj:
<     #####:  250:  value_type const & operator[](CORBA::ULong i) const
<         -:  251:  {
<     #####:  252:    range::check(i, length_, maximum_, "operator[]() const");
<     #####:  253:    return buffer_[i];
<         -:  254:  }
< ------------------
741,762c259
<     #####:  257:  value_type & operator[](CORBA::ULong i)
<         -:  258:  {
<     #####:  259:    range::check(i, length_, maximum_, "operator[]() non-const");
<     #####:  260:    return buffer_[i];
<         -:  261:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEixEj:
<     #####:  257:  value_type & operator[](CORBA::ULong i)
<         -:  258:  {
<     #####:  259:    range::check(i, length_, maximum_, "operator[]() non-const");
<     #####:  260:    return buffer_[i];
<         -:  261:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEixEj:
<     #####:  257:  value_type & operator[](CORBA::ULong i)
<         -:  258:  {
<     #####:  259:    range::check(i, length_, maximum_, "operator[]() non-const");
<     #####:  260:    return buffer_[i];
<         -:  261:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEixEj:
<     #####:  257:  value_type & operator[](CORBA::ULong i)
---
>         -:  257:  value_type & operator[](CORBA::ULong i)
764,765c261,262
<     #####:  259:    range::check(i, length_, maximum_, "operator[]() non-const");
<     #####:  260:    return buffer_[i];
---
>         -:  259:    range::check(i, length_, maximum_, "operator[]() non-const");
>         -:  260:    return buffer_[i];
767,774d263
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEEixEj:
<     #####:  257:  value_type & operator[](CORBA::ULong i)
<         -:  258:  {
<     #####:  259:    range::check(i, length_, maximum_, "operator[]() non-const");
<     #####:  260:    return buffer_[i];
<         -:  261:  }
< ------------------
797c286
<         -:  284:  value_type const * get_buffer() const
---
>     #####:  284:  value_type const * get_buffer() const
799c288
<         -:  286:    if (buffer_ == 0)
---
>     #####:  286:    if (buffer_ == 0)
801,802c290,291
<         -:  288:      buffer_ = allocbuf(maximum_);
<         -:  289:      release_ = true;
---
>     #####:  288:      buffer_ = allocbuf(maximum_);
>     #####:  289:      release_ = true;
804c293
<         -:  291:    return buffer_;
---
>     #####:  291:    return buffer_;
835c324
<         -:  322:  value_type * get_buffer(CORBA::Boolean orphan)
---
>     #####:  322:  value_type * get_buffer(CORBA::Boolean orphan)
837c326
<         -:  324:    if (orphan && !release_)
---
>     #####:  324:    if (orphan && !release_)
839c328
<         -:  326:      return 0;
---
>     #####:  326:      return 0;
841c330
<         -:  328:    if (buffer_ == 0)
---
>     #####:  328:    if (buffer_ == 0)
843,844c332,333
<         -:  330:      buffer_ = allocbuf(maximum_);
<         -:  331:      if (!orphan)
---
>     #####:  330:      buffer_ = allocbuf(maximum_);
>     #####:  331:      if (!orphan)
846c335
<         -:  333:          release_ = true;
---
>     #####:  333:          release_ = true;
849c338
<         -:  336:    if (!orphan)
---
>     #####:  336:    if (!orphan)
851c340
<         -:  338:      return buffer_;
---
>     #####:  338:      return buffer_;
854,856c343,345
<         -:  341:    generic_sequence tmp;
<         -:  342:    swap(tmp);
<         -:  343:    tmp.release_ = false;
---
>     #####:  341:    generic_sequence tmp;
>     #####:  342:    swap(tmp);
>     #####:  343:    tmp.release_ = false;
858c347
<         -:  345:    return tmp.buffer_;
---
>     #####:  345:    return tmp.buffer_;
868,922d356
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE4swapERS9_:
<     #####:  348:  void swap(generic_sequence & rhs) throw()
<         -:  349:  {
<     #####:  350:    std::swap(maximum_, rhs.maximum_);
<     #####:  351:    std::swap(length_, rhs.length_);
<     #####:  352:    std::swap(buffer_, rhs.buffer_);
<     #####:  353:    std::swap(release_, rhs.release_);
<     #####:  354:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE4swapERS9_:
<     #####:  348:  void swap(generic_sequence & rhs) throw()
<         -:  349:  {
<     #####:  350:    std::swap(maximum_, rhs.maximum_);
<     #####:  351:    std::swap(length_, rhs.length_);
<     #####:  352:    std::swap(buffer_, rhs.buffer_);
<     #####:  353:    std::swap(release_, rhs.release_);
<     #####:  354:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE4swapERS9_:
<     #####:  348:  void swap(generic_sequence & rhs) throw()
<         -:  349:  {
<     #####:  350:    std::swap(maximum_, rhs.maximum_);
<     #####:  351:    std::swap(length_, rhs.length_);
<     #####:  352:    std::swap(buffer_, rhs.buffer_);
<     #####:  353:    std::swap(release_, rhs.release_);
<     #####:  354:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE4swapERS9_:
<     #####:  348:  void swap(generic_sequence & rhs) throw()
<         -:  349:  {
<     #####:  350:    std::swap(maximum_, rhs.maximum_);
<     #####:  351:    std::swap(length_, rhs.length_);
<     #####:  352:    std::swap(buffer_, rhs.buffer_);
<     #####:  353:    std::swap(release_, rhs.release_);
<     #####:  354:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE4swapERS9_:
<     #####:  348:  void swap(generic_sequence & rhs) throw()
<         -:  349:  {
<     #####:  350:    std::swap(maximum_, rhs.maximum_);
<     #####:  351:    std::swap(length_, rhs.length_);
<     #####:  352:    std::swap(buffer_, rhs.buffer_);
<     #####:  353:    std::swap(release_, rhs.release_);
<     #####:  354:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIPcNS0_37unbounded_reference_allocation_traitsIS2_NS0_13string_traitsIcLb1EEELb1EEES5_E4swapERS7_:
<     #####:  348:  void swap(generic_sequence & rhs) throw()
<         -:  349:  {
<     #####:  350:    std::swap(maximum_, rhs.maximum_);
<     #####:  351:    std::swap(length_, rhs.length_);
<     #####:  352:    std::swap(buffer_, rhs.buffer_);
<     #####:  353:    std::swap(release_, rhs.release_);
<     #####:  354:  }
< ------------------
928,952d361
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE8allocbufEj:
<     #####:  356:  static value_type * allocbuf(CORBA::ULong maximum)
<         -:  357:  {
<     #####:  358:    return allocation_traits::allocbuf(maximum);
<         -:  359:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE8allocbufEj:
<     #####:  356:  static value_type * allocbuf(CORBA::ULong maximum)
<         -:  357:  {
<     #####:  358:    return allocation_traits::allocbuf(maximum);
<         -:  359:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE8allocbufEj:
<     #####:  356:  static value_type * allocbuf(CORBA::ULong maximum)
<         -:  357:  {
<     #####:  358:    return allocation_traits::allocbuf(maximum);
<         -:  359:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE8allocbufEj:
<     #####:  356:  static value_type * allocbuf(CORBA::ULong maximum)
<         -:  357:  {
<     #####:  358:    return allocation_traits::allocbuf(maximum);
<         -:  359:  }
< ------------------
958,994d366
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE7freebufEPS4_:
<     #####:  361:  static void freebuf(value_type * buffer)
<         -:  362:  {
<     #####:  363:    allocation_traits::freebuf(buffer);
<     #####:  364:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE7freebufEPS4_:
<     #####:  361:  static void freebuf(value_type * buffer)
<         -:  362:  {
<     #####:  363:    allocation_traits::freebuf(buffer);
<     #####:  364:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE7freebufEPS4_:
<     #####:  361:  static void freebuf(value_type * buffer)
<         -:  362:  {
<     #####:  363:    allocation_traits::freebuf(buffer);
<     #####:  364:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS16TransportLocatorENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE7freebufEPS4_:
<     #####:  361:  static void freebuf(value_type * buffer)
<         -:  362:  {
<     #####:  363:    allocation_traits::freebuf(buffer);
<     #####:  364:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIN7OpenDDS4DCPS6GUID_tENS0_33unbounded_value_allocation_traitsIS4_Lb1EEENS0_12value_traitsIS4_Lb1EEEE7freebufEPS4_:
<     #####:  361:  static void freebuf(value_type * buffer)
<         -:  362:  {
<     #####:  363:    allocation_traits::freebuf(buffer);
<     #####:  364:  }
< ------------------
< _ZN3TAO7details16generic_sequenceIPcNS0_37unbounded_reference_allocation_traitsIS2_NS0_13string_traitsIcLb1EEELb1EEES5_E7freebufEPS2_:
<     #####:  361:  static void freebuf(value_type * buffer)
<         -:  362:  {
<     #####:  363:    allocation_traits::freebuf(buffer);
<     #####:  364:  }
< ------------------
