1c1
<         -:    0:Source:/usr/include/c++/8/bits/ios_base.h
---
>         -:    0:Source:/usr/include/c++/7/bits/ios_base.h
5c5
<         -:    3:// Copyright (C) 1997-2018 Free Software Foundation, Inc.
---
>         -:    3:// Copyright (C) 1997-2017 Free Software Foundation, Inc.
474,560c474,560
<         -:  472:#if __cplusplus <= 201402L
<         -:  473:    // Annex D.6 (removed in C++17)
<         -:  474:    typedef int io_state;
<         -:  475:    typedef int open_mode;
<         -:  476:    typedef int seek_dir;
<         -:  477:
<         -:  478:    typedef std::streampos streampos;
<         -:  479:    typedef std::streamoff streamoff;
<         -:  480:#endif
<         -:  481:
<         -:  482:    // Callbacks;
<         -:  483:    /**
<         -:  484:     *  @brief  The set of events that may be passed to an event callback.
<         -:  485:     *
<         -:  486:     *  erase_event is used during ~ios() and copyfmt().  imbue_event is used
<         -:  487:     *  during imbue().  copyfmt_event is used during copyfmt().
<         -:  488:    */
<         -:  489:    enum event
<         -:  490:    {
<         -:  491:      erase_event,
<         -:  492:      imbue_event,
<         -:  493:      copyfmt_event
<         -:  494:    };
<         -:  495:
<         -:  496:    /**
<         -:  497:     *  @brief  The type of an event callback function.
<         -:  498:     *  @param  __e  One of the members of the event enum.
<         -:  499:     *  @param  __b  Reference to the ios_base object.
<         -:  500:     *  @param  __i  The integer provided when the callback was registered.
<         -:  501:     *
<         -:  502:     *  Event callbacks are user defined functions that get called during
<         -:  503:     *  several ios_base and basic_ios functions, specifically imbue(),
<         -:  504:     *  copyfmt(), and ~ios().
<         -:  505:    */
<         -:  506:    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
<         -:  507:
<         -:  508:    /**
<         -:  509:     *  @brief  Add the callback __fn with parameter __index.
<         -:  510:     *  @param  __fn  The function to add.
<         -:  511:     *  @param  __index  The integer to pass to the function when invoked.
<         -:  512:     *
<         -:  513:     *  Registers a function as an event callback with an integer parameter to
<         -:  514:     *  be passed to the function when invoked.  Multiple copies of the
<         -:  515:     *  function are allowed.  If there are multiple callbacks, they are
<         -:  516:     *  invoked in the order they were registered.
<         -:  517:    */
<         -:  518:    void
<         -:  519:    register_callback(event_callback __fn, int __index);
<         -:  520:
<         -:  521:  protected:
<         -:  522:    streamsize		_M_precision;
<         -:  523:    streamsize		_M_width;
<         -:  524:    fmtflags		_M_flags;
<         -:  525:    iostate		_M_exception;
<         -:  526:    iostate		_M_streambuf_state;
<         -:  527:
<         -:  528:    // 27.4.2.6  Members for callbacks
<         -:  529:    // 27.4.2.6  ios_base callbacks
<         -:  530:    struct _Callback_list
<         -:  531:    {
<         -:  532:      // Data Members
<         -:  533:      _Callback_list*		_M_next;
<         -:  534:      ios_base::event_callback	_M_fn;
<         -:  535:      int			_M_index;
<         -:  536:      _Atomic_word		_M_refcount;  // 0 means one reference.
<         -:  537:
<         -:  538:      _Callback_list(ios_base::event_callback __fn, int __index,
<         -:  539:		     _Callback_list* __cb)
<         -:  540:      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }
<         -:  541:
<         -:  542:      void
<         -:  543:      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }
<         -:  544:
<         -:  545:      // 0 => OK to delete.
<         -:  546:      int
<         -:  547:      _M_remove_reference() 
<         -:  548:      {
<         -:  549:        // Be race-detector-friendly.  For more info see bits/c++config.
<         -:  550:        _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_refcount);
<         -:  551:        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
<         -:  552:        if (__res == 0)
<         -:  553:          {
<         -:  554:            _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_refcount);
<         -:  555:          }
<         -:  556:        return __res;
<         -:  557:      }
<         -:  558:    };
---
>         -:  472:    // Annex D.6
>         -:  473:    typedef int io_state;
>         -:  474:    typedef int open_mode;
>         -:  475:    typedef int seek_dir;
>         -:  476:
>         -:  477:    typedef std::streampos streampos;
>         -:  478:    typedef std::streamoff streamoff;
>         -:  479:
>         -:  480:    // Callbacks;
>         -:  481:    /**
>         -:  482:     *  @brief  The set of events that may be passed to an event callback.
>         -:  483:     *
>         -:  484:     *  erase_event is used during ~ios() and copyfmt().  imbue_event is used
>         -:  485:     *  during imbue().  copyfmt_event is used during copyfmt().
>         -:  486:    */
>         -:  487:    enum event
>         -:  488:    {
>         -:  489:      erase_event,
>         -:  490:      imbue_event,
>         -:  491:      copyfmt_event
>         -:  492:    };
>         -:  493:
>         -:  494:    /**
>         -:  495:     *  @brief  The type of an event callback function.
>         -:  496:     *  @param  __e  One of the members of the event enum.
>         -:  497:     *  @param  __b  Reference to the ios_base object.
>         -:  498:     *  @param  __i  The integer provided when the callback was registered.
>         -:  499:     *
>         -:  500:     *  Event callbacks are user defined functions that get called during
>         -:  501:     *  several ios_base and basic_ios functions, specifically imbue(),
>         -:  502:     *  copyfmt(), and ~ios().
>         -:  503:    */
>         -:  504:    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
>         -:  505:
>         -:  506:    /**
>         -:  507:     *  @brief  Add the callback __fn with parameter __index.
>         -:  508:     *  @param  __fn  The function to add.
>         -:  509:     *  @param  __index  The integer to pass to the function when invoked.
>         -:  510:     *
>         -:  511:     *  Registers a function as an event callback with an integer parameter to
>         -:  512:     *  be passed to the function when invoked.  Multiple copies of the
>         -:  513:     *  function are allowed.  If there are multiple callbacks, they are
>         -:  514:     *  invoked in the order they were registered.
>         -:  515:    */
>         -:  516:    void
>         -:  517:    register_callback(event_callback __fn, int __index);
>         -:  518:
>         -:  519:  protected:
>         -:  520:    streamsize		_M_precision;
>         -:  521:    streamsize		_M_width;
>         -:  522:    fmtflags		_M_flags;
>         -:  523:    iostate		_M_exception;
>         -:  524:    iostate		_M_streambuf_state;
>         -:  525:
>         -:  526:    // 27.4.2.6  Members for callbacks
>         -:  527:    // 27.4.2.6  ios_base callbacks
>         -:  528:    struct _Callback_list
>         -:  529:    {
>         -:  530:      // Data Members
>         -:  531:      _Callback_list*		_M_next;
>         -:  532:      ios_base::event_callback	_M_fn;
>         -:  533:      int			_M_index;
>         -:  534:      _Atomic_word		_M_refcount;  // 0 means one reference.
>         -:  535:
>         -:  536:      _Callback_list(ios_base::event_callback __fn, int __index,
>         -:  537:		     _Callback_list* __cb)
>         -:  538:      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }
>         -:  539:
>         -:  540:      void
>         -:  541:      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }
>         -:  542:
>         -:  543:      // 0 => OK to delete.
>         -:  544:      int
>         -:  545:      _M_remove_reference() 
>         -:  546:      {
>         -:  547:        // Be race-detector-friendly.  For more info see bits/c++config.
>         -:  548:        _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_refcount);
>         -:  549:        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
>         -:  550:        if (__res == 0)
>         -:  551:          {
>         -:  552:            _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_refcount);
>         -:  553:          }
>         -:  554:        return __res;
>         -:  555:      }
>         -:  556:    };
>         -:  557:
>         -:  558:     _Callback_list*	_M_callbacks;
562,597c562,597
<         -:  560:     _Callback_list*	_M_callbacks;
<         -:  561:
<         -:  562:    void
<         -:  563:    _M_call_callbacks(event __ev) throw();
<         -:  564:
<         -:  565:    void
<         -:  566:    _M_dispose_callbacks(void) throw();
<         -:  567:
<         -:  568:    // 27.4.2.5  Members for iword/pword storage
<         -:  569:    struct _Words
<         -:  570:    {
<         -:  571:      void*	_M_pword;
<         -:  572:      long	_M_iword;
<         -:  573:      _Words() : _M_pword(0), _M_iword(0) { }
<         -:  574:    };
<         -:  575:
<         -:  576:    // Only for failed iword/pword calls.
<         -:  577:    _Words		_M_word_zero;
<         -:  578:
<         -:  579:    // Guaranteed storage.
<         -:  580:    // The first 5 iword and pword slots are reserved for internal use.
<         -:  581:    enum { _S_local_word_size = 8 };
<         -:  582:    _Words		_M_local_word[_S_local_word_size];
<         -:  583:
<         -:  584:    // Allocated storage.
<         -:  585:    int			_M_word_size;
<         -:  586:    _Words*		_M_word;
<         -:  587:
<         -:  588:    _Words&
<         -:  589:    _M_grow_words(int __index, bool __iword);
<         -:  590:
<         -:  591:    // Members for locale and locale caching.
<         -:  592:    locale		_M_ios_locale;
<         -:  593:
<         -:  594:    void
<         -:  595:    _M_init() throw();
---
>         -:  560:    void
>         -:  561:    _M_call_callbacks(event __ev) throw();
>         -:  562:
>         -:  563:    void
>         -:  564:    _M_dispose_callbacks(void) throw();
>         -:  565:
>         -:  566:    // 27.4.2.5  Members for iword/pword storage
>         -:  567:    struct _Words
>         -:  568:    {
>         -:  569:      void*	_M_pword;
>         -:  570:      long	_M_iword;
>         -:  571:      _Words() : _M_pword(0), _M_iword(0) { }
>         -:  572:    };
>         -:  573:
>         -:  574:    // Only for failed iword/pword calls.
>         -:  575:    _Words		_M_word_zero;
>         -:  576:
>         -:  577:    // Guaranteed storage.
>         -:  578:    // The first 5 iword and pword slots are reserved for internal use.
>         -:  579:    enum { _S_local_word_size = 8 };
>         -:  580:    _Words		_M_local_word[_S_local_word_size];
>         -:  581:
>         -:  582:    // Allocated storage.
>         -:  583:    int			_M_word_size;
>         -:  584:    _Words*		_M_word;
>         -:  585:
>         -:  586:    _Words&
>         -:  587:    _M_grow_words(int __index, bool __iword);
>         -:  588:
>         -:  589:    // Members for locale and locale caching.
>         -:  590:    locale		_M_ios_locale;
>         -:  591:
>         -:  592:    void
>         -:  593:    _M_init() throw();
>         -:  594:
>         -:  595:  public:
599,1083c599,1081
<         -:  597:  public:
<         -:  598:
<         -:  599:    // 27.4.2.1.6  Class ios_base::Init
<         -:  600:    // Used to initialize standard streams. In theory, g++ could use
<         -:  601:    // -finit-priority to order this stuff correctly without going
<         -:  602:    // through these machinations.
<         -:  603:    class Init
<         -:  604:    {
<         -:  605:      friend class ios_base;
<         -:  606:    public:
<         -:  607:      Init();
<         -:  608:      ~Init();
<         -:  609:
<         -:  610:    private:
<         -:  611:      static _Atomic_word	_S_refcount;
<         -:  612:      static bool		_S_synced_with_stdio;
<         -:  613:    };
<         -:  614:
<         -:  615:    // [27.4.2.2] fmtflags state functions
<         -:  616:    /**
<         -:  617:     *  @brief  Access to format flags.
<         -:  618:     *  @return  The format control flags for both input and output.
<         -:  619:    */
<         -:  620:    fmtflags
<         -:  621:    flags() const
<         -:  622:    { return _M_flags; }
<         -:  623:
<         -:  624:    /**
<         -:  625:     *  @brief  Setting new format flags all at once.
<         -:  626:     *  @param  __fmtfl  The new flags to set.
<         -:  627:     *  @return  The previous format control flags.
<         -:  628:     *
<         -:  629:     *  This function overwrites all the format flags with @a __fmtfl.
<         -:  630:    */
<         -:  631:    fmtflags
<         -:  632:    flags(fmtflags __fmtfl)
<         -:  633:    {
<         -:  634:      fmtflags __old = _M_flags;
<         -:  635:      _M_flags = __fmtfl;
<         -:  636:      return __old;
<         -:  637:    }
<         -:  638:
<         -:  639:    /**
<         -:  640:     *  @brief  Setting new format flags.
<         -:  641:     *  @param  __fmtfl  Additional flags to set.
<         -:  642:     *  @return  The previous format control flags.
<         -:  643:     *
<         -:  644:     *  This function sets additional flags in format control.  Flags that
<         -:  645:     *  were previously set remain set.
<         -:  646:    */
<         -:  647:    fmtflags
<         -:  648:    setf(fmtflags __fmtfl)
<         -:  649:    {
<         -:  650:      fmtflags __old = _M_flags;
<         -:  651:      _M_flags |= __fmtfl;
<         -:  652:      return __old;
<         -:  653:    }
<         -:  654:
<         -:  655:    /**
<         -:  656:     *  @brief  Setting new format flags.
<         -:  657:     *  @param  __fmtfl  Additional flags to set.
<         -:  658:     *  @param  __mask  The flags mask for @a fmtfl.
<         -:  659:     *  @return  The previous format control flags.
<         -:  660:     *
<         -:  661:     *  This function clears @a mask in the format flags, then sets
<         -:  662:     *  @a fmtfl @c & @a mask.  An example mask is @c ios_base::adjustfield.
<         -:  663:    */
<         -:  664:    fmtflags
<         -:  665:    setf(fmtflags __fmtfl, fmtflags __mask)
<         -:  666:    {
<         -:  667:      fmtflags __old = _M_flags;
<         -:  668:      _M_flags &= ~__mask;
<         -:  669:      _M_flags |= (__fmtfl & __mask);
<         -:  670:      return __old;
<         -:  671:    }
<         -:  672:
<         -:  673:    /**
<         -:  674:     *  @brief  Clearing format flags.
<         -:  675:     *  @param  __mask  The flags to unset.
<         -:  676:     *
<         -:  677:     *  This function clears @a __mask in the format flags.
<         -:  678:    */
<         -:  679:    void
<         -:  680:    unsetf(fmtflags __mask)
<         -:  681:    { _M_flags &= ~__mask; }
<         -:  682:
<         -:  683:    /**
<         -:  684:     *  @brief  Flags access.
<         -:  685:     *  @return  The precision to generate on certain output operations.
<         -:  686:     *
<         -:  687:     *  Be careful if you try to give a definition of @a precision here; see
<         -:  688:     *  DR 189.
<         -:  689:    */
<         -:  690:    streamsize
<         -:  691:    precision() const
<         -:  692:    { return _M_precision; }
<         -:  693:
<         -:  694:    /**
<         -:  695:     *  @brief  Changing flags.
<         -:  696:     *  @param  __prec  The new precision value.
<         -:  697:     *  @return  The previous value of precision().
<         -:  698:    */
<         -:  699:    streamsize
<         -:  700:    precision(streamsize __prec)
<         -:  701:    {
<         -:  702:      streamsize __old = _M_precision;
<         -:  703:      _M_precision = __prec;
<         -:  704:      return __old;
<         -:  705:    }
<         -:  706:
<         -:  707:    /**
<         -:  708:     *  @brief  Flags access.
<         -:  709:     *  @return  The minimum field width to generate on output operations.
<         -:  710:     *
<         -:  711:     *  <em>Minimum field width</em> refers to the number of characters.
<         -:  712:    */
<         -:  713:    streamsize
<         -:  714:    width() const
<         -:  715:    { return _M_width; }
<         -:  716:
<         -:  717:    /**
<         -:  718:     *  @brief  Changing flags.
<         -:  719:     *  @param  __wide  The new width value.
<         -:  720:     *  @return  The previous value of width().
<         -:  721:    */
<         -:  722:    streamsize
<         -:  723:    width(streamsize __wide)
<         -:  724:    {
<         -:  725:      streamsize __old = _M_width;
<         -:  726:      _M_width = __wide;
<         -:  727:      return __old;
<         -:  728:    }
<         -:  729:
<         -:  730:    // [27.4.2.4] ios_base static members
<         -:  731:    /**
<         -:  732:     *  @brief  Interaction with the standard C I/O objects.
<         -:  733:     *  @param  __sync  Whether to synchronize or not.
<         -:  734:     *  @return  True if the standard streams were previously synchronized.
<         -:  735:     *
<         -:  736:     *  The synchronization referred to is @e only that between the standard
<         -:  737:     *  C facilities (e.g., stdout) and the standard C++ objects (e.g.,
<         -:  738:     *  cout).  User-declared streams are unaffected.  See
<         -:  739:     *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/fstreams.html#std.io.filestreams.binary
<         -:  740:    */
<         -:  741:    static bool
<         -:  742:    sync_with_stdio(bool __sync = true);
<         -:  743:
<         -:  744:    // [27.4.2.3] ios_base locale functions
<         -:  745:    /**
<         -:  746:     *  @brief  Setting a new locale.
<         -:  747:     *  @param  __loc  The new locale.
<         -:  748:     *  @return  The previous locale.
<         -:  749:     *
<         -:  750:     *  Sets the new locale for this stream, and then invokes each callback
<         -:  751:     *  with imbue_event.
<         -:  752:    */
<         -:  753:    locale
<         -:  754:    imbue(const locale& __loc) throw();
<         -:  755:
<         -:  756:    /**
<         -:  757:     *  @brief  Locale access
<         -:  758:     *  @return  A copy of the current locale.
<         -:  759:     *
<         -:  760:     *  If @c imbue(loc) has previously been called, then this function
<         -:  761:     *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),
<         -:  762:     *  the global C++ locale.
<         -:  763:    */
<         -:  764:    locale
<         -:  765:    getloc() const
<         -:  766:    { return _M_ios_locale; }
<         -:  767:
<         -:  768:    /**
<         -:  769:     *  @brief  Locale access
<         -:  770:     *  @return  A reference to the current locale.
<         -:  771:     *
<         -:  772:     *  Like getloc above, but returns a reference instead of
<         -:  773:     *  generating a copy.
<         -:  774:    */
<         -:  775:    const locale&
<         -:  776:    _M_getloc() const
<         -:  777:    { return _M_ios_locale; }
<         -:  778:
<         -:  779:    // [27.4.2.5] ios_base storage functions
<         -:  780:    /**
<         -:  781:     *  @brief  Access to unique indices.
<         -:  782:     *  @return  An integer different from all previous calls.
<         -:  783:     *
<         -:  784:     *  This function returns a unique integer every time it is called.  It
<         -:  785:     *  can be used for any purpose, but is primarily intended to be a unique
<         -:  786:     *  index for the iword and pword functions.  The expectation is that an
<         -:  787:     *  application calls xalloc in order to obtain an index in the iword and
<         -:  788:     *  pword arrays that can be used without fear of conflict.
<         -:  789:     *
<         -:  790:     *  The implementation maintains a static variable that is incremented and
<         -:  791:     *  returned on each invocation.  xalloc is guaranteed to return an index
<         -:  792:     *  that is safe to use in the iword and pword arrays.
<         -:  793:    */
<         -:  794:    static int
<         -:  795:    xalloc() throw();
<         -:  796:
<         -:  797:    /**
<         -:  798:     *  @brief  Access to integer array.
<         -:  799:     *  @param  __ix  Index into the array.
<         -:  800:     *  @return  A reference to an integer associated with the index.
<         -:  801:     *
<         -:  802:     *  The iword function provides access to an array of integers that can be
<         -:  803:     *  used for any purpose.  The array grows as required to hold the
<         -:  804:     *  supplied index.  All integers in the array are initialized to 0.
<         -:  805:     *
<         -:  806:     *  The implementation reserves several indices.  You should use xalloc to
<         -:  807:     *  obtain an index that is safe to use.  Also note that since the array
<         -:  808:     *  can grow dynamically, it is not safe to hold onto the reference.
<         -:  809:    */
<         -:  810:    long&
<         -:  811:    iword(int __ix)
<         -:  812:    {
<         -:  813:      _Words& __word = (__ix < _M_word_size)
<         -:  814:			? _M_word[__ix] : _M_grow_words(__ix, true);
<         -:  815:      return __word._M_iword;
<         -:  816:    }
<         -:  817:
<         -:  818:    /**
<         -:  819:     *  @brief  Access to void pointer array.
<         -:  820:     *  @param  __ix  Index into the array.
<         -:  821:     *  @return  A reference to a void* associated with the index.
<         -:  822:     *
<         -:  823:     *  The pword function provides access to an array of pointers that can be
<         -:  824:     *  used for any purpose.  The array grows as required to hold the
<         -:  825:     *  supplied index.  All pointers in the array are initialized to 0.
<         -:  826:     *
<         -:  827:     *  The implementation reserves several indices.  You should use xalloc to
<         -:  828:     *  obtain an index that is safe to use.  Also note that since the array
<         -:  829:     *  can grow dynamically, it is not safe to hold onto the reference.
<         -:  830:    */
<         -:  831:    void*&
<         -:  832:    pword(int __ix)
<         -:  833:    {
<         -:  834:      _Words& __word = (__ix < _M_word_size)
<         -:  835:			? _M_word[__ix] : _M_grow_words(__ix, false);
<         -:  836:      return __word._M_pword;
<         -:  837:    }
<         -:  838:
<         -:  839:    // Destructor
<         -:  840:    /**
<         -:  841:     *  Invokes each callback with erase_event.  Destroys local storage.
<         -:  842:     *
<         -:  843:     *  Note that the ios_base object for the standard streams never gets
<         -:  844:     *  destroyed.  As a result, any callbacks registered with the standard
<         -:  845:     *  streams will not get invoked with erase_event (unless copyfmt is
<         -:  846:     *  used).
<         -:  847:    */
<         -:  848:    virtual ~ios_base();
<         -:  849:
<         -:  850:  protected:
<         -:  851:    ios_base() throw ();
<         -:  852:
<         -:  853:#if __cplusplus < 201103L
<         -:  854:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
<         -:  855:  // 50.  Copy constructor and assignment operator of ios_base
<         -:  856:  private:
<         -:  857:    ios_base(const ios_base&);
<         -:  858:
<         -:  859:    ios_base&
<         -:  860:    operator=(const ios_base&);
<         -:  861:#else
<         -:  862:  public:
<         -:  863:    ios_base(const ios_base&) = delete;
<         -:  864:
<         -:  865:    ios_base&
<         -:  866:    operator=(const ios_base&) = delete;
<         -:  867:
<         -:  868:  protected:
<         -:  869:    void
<         -:  870:    _M_move(ios_base&) noexcept;
<         -:  871:
<         -:  872:    void
<         -:  873:    _M_swap(ios_base& __rhs) noexcept;
<         -:  874:#endif
<         -:  875:  };
<         -:  876:
<         -:  877:  // [27.4.5.1] fmtflags manipulators
<         -:  878:  /// Calls base.setf(ios_base::boolalpha).
<         -:  879:  inline ios_base&
<         -:  880:  boolalpha(ios_base& __base)
<         -:  881:  {
<         -:  882:    __base.setf(ios_base::boolalpha);
<         -:  883:    return __base;
<         -:  884:  }
<         -:  885:
<         -:  886:  /// Calls base.unsetf(ios_base::boolalpha).
<         -:  887:  inline ios_base&
<         -:  888:  noboolalpha(ios_base& __base)
<         -:  889:  {
<         -:  890:    __base.unsetf(ios_base::boolalpha);
<         -:  891:    return __base;
<         -:  892:  }
<         -:  893:
<         -:  894:  /// Calls base.setf(ios_base::showbase).
<         -:  895:  inline ios_base&
<         -:  896:  showbase(ios_base& __base)
<         -:  897:  {
<         -:  898:    __base.setf(ios_base::showbase);
<         -:  899:    return __base;
<         -:  900:  }
<         -:  901:
<         -:  902:  /// Calls base.unsetf(ios_base::showbase).
<         -:  903:  inline ios_base&
<         -:  904:  noshowbase(ios_base& __base)
<         -:  905:  {
<         -:  906:    __base.unsetf(ios_base::showbase);
<         -:  907:    return __base;
<         -:  908:  }
<         -:  909:
<         -:  910:  /// Calls base.setf(ios_base::showpoint).
<         -:  911:  inline ios_base&
<         -:  912:  showpoint(ios_base& __base)
<         -:  913:  {
<         -:  914:    __base.setf(ios_base::showpoint);
<         -:  915:    return __base;
<         -:  916:  }
<         -:  917:
<         -:  918:  /// Calls base.unsetf(ios_base::showpoint).
<         -:  919:  inline ios_base&
<         -:  920:  noshowpoint(ios_base& __base)
<         -:  921:  {
<         -:  922:    __base.unsetf(ios_base::showpoint);
<         -:  923:    return __base;
<         -:  924:  }
<         -:  925:
<         -:  926:  /// Calls base.setf(ios_base::showpos).
<         -:  927:  inline ios_base&
<         -:  928:  showpos(ios_base& __base)
<         -:  929:  {
<         -:  930:    __base.setf(ios_base::showpos);
<         -:  931:    return __base;
<         -:  932:  }
<         -:  933:
<         -:  934:  /// Calls base.unsetf(ios_base::showpos).
<         -:  935:  inline ios_base&
<         -:  936:  noshowpos(ios_base& __base)
<         -:  937:  {
<         -:  938:    __base.unsetf(ios_base::showpos);
<         -:  939:    return __base;
<         -:  940:  }
<         -:  941:
<         -:  942:  /// Calls base.setf(ios_base::skipws).
<         -:  943:  inline ios_base&
<         -:  944:  skipws(ios_base& __base)
<         -:  945:  {
<         -:  946:    __base.setf(ios_base::skipws);
<         -:  947:    return __base;
<         -:  948:  }
<         -:  949:
<         -:  950:  /// Calls base.unsetf(ios_base::skipws).
<         -:  951:  inline ios_base&
<         -:  952:  noskipws(ios_base& __base)
<         -:  953:  {
<         -:  954:    __base.unsetf(ios_base::skipws);
<         -:  955:    return __base;
<         -:  956:  }
<         -:  957:
<         -:  958:  /// Calls base.setf(ios_base::uppercase).
<         -:  959:  inline ios_base&
<         -:  960:  uppercase(ios_base& __base)
<         -:  961:  {
<         -:  962:    __base.setf(ios_base::uppercase);
<         -:  963:    return __base;
<         -:  964:  }
<         -:  965:
<         -:  966:  /// Calls base.unsetf(ios_base::uppercase).
<         -:  967:  inline ios_base&
<         -:  968:  nouppercase(ios_base& __base)
<         -:  969:  {
<         -:  970:    __base.unsetf(ios_base::uppercase);
<         -:  971:    return __base;
<         -:  972:  }
<         -:  973:
<         -:  974:  /// Calls base.setf(ios_base::unitbuf).
<         -:  975:  inline ios_base&
<         -:  976:  unitbuf(ios_base& __base)
<         -:  977:  {
<         -:  978:     __base.setf(ios_base::unitbuf);
<         -:  979:     return __base;
<         -:  980:  }
<         -:  981:
<         -:  982:  /// Calls base.unsetf(ios_base::unitbuf).
<         -:  983:  inline ios_base&
<         -:  984:  nounitbuf(ios_base& __base)
<         -:  985:  {
<         -:  986:     __base.unsetf(ios_base::unitbuf);
<         -:  987:     return __base;
<         -:  988:  }
<         -:  989:
<         -:  990:  // [27.4.5.2] adjustfield manipulators
<         -:  991:  /// Calls base.setf(ios_base::internal, ios_base::adjustfield).
<         -:  992:  inline ios_base&
<         -:  993:  internal(ios_base& __base)
<         -:  994:  {
<         -:  995:     __base.setf(ios_base::internal, ios_base::adjustfield);
<         -:  996:     return __base;
<         -:  997:  }
<         -:  998:
<         -:  999:  /// Calls base.setf(ios_base::left, ios_base::adjustfield).
<         -: 1000:  inline ios_base&
<         -: 1001:  left(ios_base& __base)
<         -: 1002:  {
<         -: 1003:    __base.setf(ios_base::left, ios_base::adjustfield);
<         -: 1004:    return __base;
<         -: 1005:  }
<         -: 1006:
<         -: 1007:  /// Calls base.setf(ios_base::right, ios_base::adjustfield).
<         -: 1008:  inline ios_base&
<         -: 1009:  right(ios_base& __base)
<         -: 1010:  {
<         -: 1011:    __base.setf(ios_base::right, ios_base::adjustfield);
<         -: 1012:    return __base;
<         -: 1013:  }
<         -: 1014:
<         -: 1015:  // [27.4.5.3] basefield manipulators
<         -: 1016:  /// Calls base.setf(ios_base::dec, ios_base::basefield).
<         -: 1017:  inline ios_base&
<         -: 1018:  dec(ios_base& __base)
<         -: 1019:  {
<         -: 1020:    __base.setf(ios_base::dec, ios_base::basefield);
<         -: 1021:    return __base;
<         -: 1022:  }
<         -: 1023:
<         -: 1024:  /// Calls base.setf(ios_base::hex, ios_base::basefield).
<         -: 1025:  inline ios_base&
<         -: 1026:  hex(ios_base& __base)
<         -: 1027:  {
<         -: 1028:    __base.setf(ios_base::hex, ios_base::basefield);
<         -: 1029:    return __base;
<         -: 1030:  }
<         -: 1031:
<         -: 1032:  /// Calls base.setf(ios_base::oct, ios_base::basefield).
<         -: 1033:  inline ios_base&
<         -: 1034:  oct(ios_base& __base)
<         -: 1035:  {
<         -: 1036:    __base.setf(ios_base::oct, ios_base::basefield);
<         -: 1037:    return __base;
<         -: 1038:  }
<         -: 1039:
<         -: 1040:  // [27.4.5.4] floatfield manipulators
<         -: 1041:  /// Calls base.setf(ios_base::fixed, ios_base::floatfield).
<         -: 1042:  inline ios_base&
<         -: 1043:  fixed(ios_base& __base)
<         -: 1044:  {
<         -: 1045:    __base.setf(ios_base::fixed, ios_base::floatfield);
<         -: 1046:    return __base;
<         -: 1047:  }
<         -: 1048:
<         -: 1049:  /// Calls base.setf(ios_base::scientific, ios_base::floatfield).
<         -: 1050:  inline ios_base&
<         -: 1051:  scientific(ios_base& __base)
<         -: 1052:  {
<         -: 1053:    __base.setf(ios_base::scientific, ios_base::floatfield);
<         -: 1054:    return __base;
<         -: 1055:  }
<         -: 1056:
<         -: 1057:#if __cplusplus >= 201103L
<         -: 1058:  // New C++11 floatfield manipulators
<         -: 1059:
<         -: 1060:  /// Calls
<         -: 1061:  /// base.setf(ios_base::fixed|ios_base::scientific, ios_base::floatfield)
<         -: 1062:  inline ios_base&
<         -: 1063:  hexfloat(ios_base& __base)
<         -: 1064:  {
<         -: 1065:    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
<         -: 1066:    return __base;
<         -: 1067:  }
<         -: 1068:
<         -: 1069:  /// Calls @c base.unsetf(ios_base::floatfield)
<         -: 1070:  inline ios_base&
<         -: 1071:  defaultfloat(ios_base& __base)
<         -: 1072:  {
<         -: 1073:    __base.unsetf(ios_base::floatfield);
<         -: 1074:    return __base;
<         -: 1075:  }
<         -: 1076:#endif
<         -: 1077:
<         -: 1078:_GLIBCXX_END_NAMESPACE_VERSION
<         -: 1079:} // namespace
<         -: 1080:
<         -: 1081:#endif /* _IOS_BASE_H */
---
>         -:  597:    // 27.4.2.1.6  Class ios_base::Init
>         -:  598:    // Used to initialize standard streams. In theory, g++ could use
>         -:  599:    // -finit-priority to order this stuff correctly without going
>         -:  600:    // through these machinations.
>         -:  601:    class Init
>         -:  602:    {
>         -:  603:      friend class ios_base;
>         -:  604:    public:
>         -:  605:      Init();
>         -:  606:      ~Init();
>         -:  607:
>         -:  608:    private:
>         -:  609:      static _Atomic_word	_S_refcount;
>         -:  610:      static bool		_S_synced_with_stdio;
>         -:  611:    };
>         -:  612:
>         -:  613:    // [27.4.2.2] fmtflags state functions
>         -:  614:    /**
>         -:  615:     *  @brief  Access to format flags.
>         -:  616:     *  @return  The format control flags for both input and output.
>         -:  617:    */
>         -:  618:    fmtflags
>         -:  619:    flags() const
>         -:  620:    { return _M_flags; }
>         -:  621:
>         -:  622:    /**
>         -:  623:     *  @brief  Setting new format flags all at once.
>         -:  624:     *  @param  __fmtfl  The new flags to set.
>         -:  625:     *  @return  The previous format control flags.
>         -:  626:     *
>         -:  627:     *  This function overwrites all the format flags with @a __fmtfl.
>         -:  628:    */
>         -:  629:    fmtflags
>         -:  630:    flags(fmtflags __fmtfl)
>         -:  631:    {
>         -:  632:      fmtflags __old = _M_flags;
>         -:  633:      _M_flags = __fmtfl;
>         -:  634:      return __old;
>         -:  635:    }
>         -:  636:
>         -:  637:    /**
>         -:  638:     *  @brief  Setting new format flags.
>         -:  639:     *  @param  __fmtfl  Additional flags to set.
>         -:  640:     *  @return  The previous format control flags.
>         -:  641:     *
>         -:  642:     *  This function sets additional flags in format control.  Flags that
>         -:  643:     *  were previously set remain set.
>         -:  644:    */
>         -:  645:    fmtflags
>         -:  646:    setf(fmtflags __fmtfl)
>         -:  647:    {
>         -:  648:      fmtflags __old = _M_flags;
>         -:  649:      _M_flags |= __fmtfl;
>         -:  650:      return __old;
>         -:  651:    }
>         -:  652:
>         -:  653:    /**
>         -:  654:     *  @brief  Setting new format flags.
>         -:  655:     *  @param  __fmtfl  Additional flags to set.
>         -:  656:     *  @param  __mask  The flags mask for @a fmtfl.
>         -:  657:     *  @return  The previous format control flags.
>         -:  658:     *
>         -:  659:     *  This function clears @a mask in the format flags, then sets
>         -:  660:     *  @a fmtfl @c & @a mask.  An example mask is @c ios_base::adjustfield.
>         -:  661:    */
>         -:  662:    fmtflags
>         -:  663:    setf(fmtflags __fmtfl, fmtflags __mask)
>         -:  664:    {
>         -:  665:      fmtflags __old = _M_flags;
>         -:  666:      _M_flags &= ~__mask;
>         -:  667:      _M_flags |= (__fmtfl & __mask);
>         -:  668:      return __old;
>         -:  669:    }
>         -:  670:
>         -:  671:    /**
>         -:  672:     *  @brief  Clearing format flags.
>         -:  673:     *  @param  __mask  The flags to unset.
>         -:  674:     *
>         -:  675:     *  This function clears @a __mask in the format flags.
>         -:  676:    */
>         -:  677:    void
>         -:  678:    unsetf(fmtflags __mask)
>         -:  679:    { _M_flags &= ~__mask; }
>         -:  680:
>         -:  681:    /**
>         -:  682:     *  @brief  Flags access.
>         -:  683:     *  @return  The precision to generate on certain output operations.
>         -:  684:     *
>         -:  685:     *  Be careful if you try to give a definition of @a precision here; see
>         -:  686:     *  DR 189.
>         -:  687:    */
>         -:  688:    streamsize
>         -:  689:    precision() const
>         -:  690:    { return _M_precision; }
>         -:  691:
>         -:  692:    /**
>         -:  693:     *  @brief  Changing flags.
>         -:  694:     *  @param  __prec  The new precision value.
>         -:  695:     *  @return  The previous value of precision().
>         -:  696:    */
>         -:  697:    streamsize
>         -:  698:    precision(streamsize __prec)
>         -:  699:    {
>         -:  700:      streamsize __old = _M_precision;
>         -:  701:      _M_precision = __prec;
>         -:  702:      return __old;
>         -:  703:    }
>         -:  704:
>         -:  705:    /**
>         -:  706:     *  @brief  Flags access.
>         -:  707:     *  @return  The minimum field width to generate on output operations.
>         -:  708:     *
>         -:  709:     *  <em>Minimum field width</em> refers to the number of characters.
>         -:  710:    */
>         -:  711:    streamsize
>         -:  712:    width() const
>         -:  713:    { return _M_width; }
>         -:  714:
>         -:  715:    /**
>         -:  716:     *  @brief  Changing flags.
>         -:  717:     *  @param  __wide  The new width value.
>         -:  718:     *  @return  The previous value of width().
>         -:  719:    */
>         -:  720:    streamsize
>         -:  721:    width(streamsize __wide)
>         -:  722:    {
>         -:  723:      streamsize __old = _M_width;
>         -:  724:      _M_width = __wide;
>         -:  725:      return __old;
>         -:  726:    }
>         -:  727:
>         -:  728:    // [27.4.2.4] ios_base static members
>         -:  729:    /**
>         -:  730:     *  @brief  Interaction with the standard C I/O objects.
>         -:  731:     *  @param  __sync  Whether to synchronize or not.
>         -:  732:     *  @return  True if the standard streams were previously synchronized.
>         -:  733:     *
>         -:  734:     *  The synchronization referred to is @e only that between the standard
>         -:  735:     *  C facilities (e.g., stdout) and the standard C++ objects (e.g.,
>         -:  736:     *  cout).  User-declared streams are unaffected.  See
>         -:  737:     *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/fstreams.html#std.io.filestreams.binary
>         -:  738:    */
>         -:  739:    static bool
>         -:  740:    sync_with_stdio(bool __sync = true);
>         -:  741:
>         -:  742:    // [27.4.2.3] ios_base locale functions
>         -:  743:    /**
>         -:  744:     *  @brief  Setting a new locale.
>         -:  745:     *  @param  __loc  The new locale.
>         -:  746:     *  @return  The previous locale.
>         -:  747:     *
>         -:  748:     *  Sets the new locale for this stream, and then invokes each callback
>         -:  749:     *  with imbue_event.
>         -:  750:    */
>         -:  751:    locale
>         -:  752:    imbue(const locale& __loc) throw();
>         -:  753:
>         -:  754:    /**
>         -:  755:     *  @brief  Locale access
>         -:  756:     *  @return  A copy of the current locale.
>         -:  757:     *
>         -:  758:     *  If @c imbue(loc) has previously been called, then this function
>         -:  759:     *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),
>         -:  760:     *  the global C++ locale.
>         -:  761:    */
>         -:  762:    locale
>         -:  763:    getloc() const
>         -:  764:    { return _M_ios_locale; }
>         -:  765:
>         -:  766:    /**
>         -:  767:     *  @brief  Locale access
>         -:  768:     *  @return  A reference to the current locale.
>         -:  769:     *
>         -:  770:     *  Like getloc above, but returns a reference instead of
>         -:  771:     *  generating a copy.
>         -:  772:    */
>         -:  773:    const locale&
>         -:  774:    _M_getloc() const
>         -:  775:    { return _M_ios_locale; }
>         -:  776:
>         -:  777:    // [27.4.2.5] ios_base storage functions
>         -:  778:    /**
>         -:  779:     *  @brief  Access to unique indices.
>         -:  780:     *  @return  An integer different from all previous calls.
>         -:  781:     *
>         -:  782:     *  This function returns a unique integer every time it is called.  It
>         -:  783:     *  can be used for any purpose, but is primarily intended to be a unique
>         -:  784:     *  index for the iword and pword functions.  The expectation is that an
>         -:  785:     *  application calls xalloc in order to obtain an index in the iword and
>         -:  786:     *  pword arrays that can be used without fear of conflict.
>         -:  787:     *
>         -:  788:     *  The implementation maintains a static variable that is incremented and
>         -:  789:     *  returned on each invocation.  xalloc is guaranteed to return an index
>         -:  790:     *  that is safe to use in the iword and pword arrays.
>         -:  791:    */
>         -:  792:    static int
>         -:  793:    xalloc() throw();
>         -:  794:
>         -:  795:    /**
>         -:  796:     *  @brief  Access to integer array.
>         -:  797:     *  @param  __ix  Index into the array.
>         -:  798:     *  @return  A reference to an integer associated with the index.
>         -:  799:     *
>         -:  800:     *  The iword function provides access to an array of integers that can be
>         -:  801:     *  used for any purpose.  The array grows as required to hold the
>         -:  802:     *  supplied index.  All integers in the array are initialized to 0.
>         -:  803:     *
>         -:  804:     *  The implementation reserves several indices.  You should use xalloc to
>         -:  805:     *  obtain an index that is safe to use.  Also note that since the array
>         -:  806:     *  can grow dynamically, it is not safe to hold onto the reference.
>         -:  807:    */
>         -:  808:    long&
>         -:  809:    iword(int __ix)
>         -:  810:    {
>         -:  811:      _Words& __word = (__ix < _M_word_size)
>         -:  812:			? _M_word[__ix] : _M_grow_words(__ix, true);
>         -:  813:      return __word._M_iword;
>         -:  814:    }
>         -:  815:
>         -:  816:    /**
>         -:  817:     *  @brief  Access to void pointer array.
>         -:  818:     *  @param  __ix  Index into the array.
>         -:  819:     *  @return  A reference to a void* associated with the index.
>         -:  820:     *
>         -:  821:     *  The pword function provides access to an array of pointers that can be
>         -:  822:     *  used for any purpose.  The array grows as required to hold the
>         -:  823:     *  supplied index.  All pointers in the array are initialized to 0.
>         -:  824:     *
>         -:  825:     *  The implementation reserves several indices.  You should use xalloc to
>         -:  826:     *  obtain an index that is safe to use.  Also note that since the array
>         -:  827:     *  can grow dynamically, it is not safe to hold onto the reference.
>         -:  828:    */
>         -:  829:    void*&
>         -:  830:    pword(int __ix)
>         -:  831:    {
>         -:  832:      _Words& __word = (__ix < _M_word_size)
>         -:  833:			? _M_word[__ix] : _M_grow_words(__ix, false);
>         -:  834:      return __word._M_pword;
>         -:  835:    }
>         -:  836:
>         -:  837:    // Destructor
>         -:  838:    /**
>         -:  839:     *  Invokes each callback with erase_event.  Destroys local storage.
>         -:  840:     *
>         -:  841:     *  Note that the ios_base object for the standard streams never gets
>         -:  842:     *  destroyed.  As a result, any callbacks registered with the standard
>         -:  843:     *  streams will not get invoked with erase_event (unless copyfmt is
>         -:  844:     *  used).
>         -:  845:    */
>         -:  846:    virtual ~ios_base();
>         -:  847:
>         -:  848:  protected:
>         -:  849:    ios_base() throw ();
>         -:  850:
>         -:  851:#if __cplusplus < 201103L
>         -:  852:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
>         -:  853:  // 50.  Copy constructor and assignment operator of ios_base
>         -:  854:  private:
>         -:  855:    ios_base(const ios_base&);
>         -:  856:
>         -:  857:    ios_base&
>         -:  858:    operator=(const ios_base&);
>         -:  859:#else
>         -:  860:  public:
>         -:  861:    ios_base(const ios_base&) = delete;
>         -:  862:
>         -:  863:    ios_base&
>         -:  864:    operator=(const ios_base&) = delete;
>         -:  865:
>         -:  866:  protected:
>         -:  867:    void
>         -:  868:    _M_move(ios_base&) noexcept;
>         -:  869:
>         -:  870:    void
>         -:  871:    _M_swap(ios_base& __rhs) noexcept;
>         -:  872:#endif
>         -:  873:  };
>         -:  874:
>         -:  875:  // [27.4.5.1] fmtflags manipulators
>         -:  876:  /// Calls base.setf(ios_base::boolalpha).
>         -:  877:  inline ios_base&
>         -:  878:  boolalpha(ios_base& __base)
>         -:  879:  {
>         -:  880:    __base.setf(ios_base::boolalpha);
>         -:  881:    return __base;
>         -:  882:  }
>         -:  883:
>         -:  884:  /// Calls base.unsetf(ios_base::boolalpha).
>         -:  885:  inline ios_base&
>         -:  886:  noboolalpha(ios_base& __base)
>         -:  887:  {
>         -:  888:    __base.unsetf(ios_base::boolalpha);
>         -:  889:    return __base;
>         -:  890:  }
>         -:  891:
>         -:  892:  /// Calls base.setf(ios_base::showbase).
>         -:  893:  inline ios_base&
>         -:  894:  showbase(ios_base& __base)
>         -:  895:  {
>         -:  896:    __base.setf(ios_base::showbase);
>         -:  897:    return __base;
>         -:  898:  }
>         -:  899:
>         -:  900:  /// Calls base.unsetf(ios_base::showbase).
>         -:  901:  inline ios_base&
>         -:  902:  noshowbase(ios_base& __base)
>         -:  903:  {
>         -:  904:    __base.unsetf(ios_base::showbase);
>         -:  905:    return __base;
>         -:  906:  }
>         -:  907:
>         -:  908:  /// Calls base.setf(ios_base::showpoint).
>         -:  909:  inline ios_base&
>         -:  910:  showpoint(ios_base& __base)
>         -:  911:  {
>         -:  912:    __base.setf(ios_base::showpoint);
>         -:  913:    return __base;
>         -:  914:  }
>         -:  915:
>         -:  916:  /// Calls base.unsetf(ios_base::showpoint).
>         -:  917:  inline ios_base&
>         -:  918:  noshowpoint(ios_base& __base)
>         -:  919:  {
>         -:  920:    __base.unsetf(ios_base::showpoint);
>         -:  921:    return __base;
>         -:  922:  }
>         -:  923:
>         -:  924:  /// Calls base.setf(ios_base::showpos).
>         -:  925:  inline ios_base&
>         -:  926:  showpos(ios_base& __base)
>         -:  927:  {
>         -:  928:    __base.setf(ios_base::showpos);
>         -:  929:    return __base;
>         -:  930:  }
>         -:  931:
>         -:  932:  /// Calls base.unsetf(ios_base::showpos).
>         -:  933:  inline ios_base&
>         -:  934:  noshowpos(ios_base& __base)
>         -:  935:  {
>         -:  936:    __base.unsetf(ios_base::showpos);
>         -:  937:    return __base;
>         -:  938:  }
>         -:  939:
>         -:  940:  /// Calls base.setf(ios_base::skipws).
>         -:  941:  inline ios_base&
>         -:  942:  skipws(ios_base& __base)
>         -:  943:  {
>         -:  944:    __base.setf(ios_base::skipws);
>         -:  945:    return __base;
>         -:  946:  }
>         -:  947:
>         -:  948:  /// Calls base.unsetf(ios_base::skipws).
>         -:  949:  inline ios_base&
>         -:  950:  noskipws(ios_base& __base)
>         -:  951:  {
>         -:  952:    __base.unsetf(ios_base::skipws);
>         -:  953:    return __base;
>         -:  954:  }
>         -:  955:
>         -:  956:  /// Calls base.setf(ios_base::uppercase).
>         -:  957:  inline ios_base&
>         -:  958:  uppercase(ios_base& __base)
>         -:  959:  {
>         -:  960:    __base.setf(ios_base::uppercase);
>         -:  961:    return __base;
>         -:  962:  }
>         -:  963:
>         -:  964:  /// Calls base.unsetf(ios_base::uppercase).
>         -:  965:  inline ios_base&
>         -:  966:  nouppercase(ios_base& __base)
>         -:  967:  {
>         -:  968:    __base.unsetf(ios_base::uppercase);
>         -:  969:    return __base;
>         -:  970:  }
>         -:  971:
>         -:  972:  /// Calls base.setf(ios_base::unitbuf).
>         -:  973:  inline ios_base&
>         -:  974:  unitbuf(ios_base& __base)
>         -:  975:  {
>         -:  976:     __base.setf(ios_base::unitbuf);
>         -:  977:     return __base;
>         -:  978:  }
>         -:  979:
>         -:  980:  /// Calls base.unsetf(ios_base::unitbuf).
>         -:  981:  inline ios_base&
>         -:  982:  nounitbuf(ios_base& __base)
>         -:  983:  {
>         -:  984:     __base.unsetf(ios_base::unitbuf);
>         -:  985:     return __base;
>         -:  986:  }
>         -:  987:
>         -:  988:  // [27.4.5.2] adjustfield manipulators
>         -:  989:  /// Calls base.setf(ios_base::internal, ios_base::adjustfield).
>         -:  990:  inline ios_base&
>         -:  991:  internal(ios_base& __base)
>         -:  992:  {
>         -:  993:     __base.setf(ios_base::internal, ios_base::adjustfield);
>         -:  994:     return __base;
>         -:  995:  }
>         -:  996:
>         -:  997:  /// Calls base.setf(ios_base::left, ios_base::adjustfield).
>         -:  998:  inline ios_base&
>         -:  999:  left(ios_base& __base)
>         -: 1000:  {
>         -: 1001:    __base.setf(ios_base::left, ios_base::adjustfield);
>         -: 1002:    return __base;
>         -: 1003:  }
>         -: 1004:
>         -: 1005:  /// Calls base.setf(ios_base::right, ios_base::adjustfield).
>         -: 1006:  inline ios_base&
>         -: 1007:  right(ios_base& __base)
>         -: 1008:  {
>         -: 1009:    __base.setf(ios_base::right, ios_base::adjustfield);
>         -: 1010:    return __base;
>         -: 1011:  }
>         -: 1012:
>         -: 1013:  // [27.4.5.3] basefield manipulators
>         -: 1014:  /// Calls base.setf(ios_base::dec, ios_base::basefield).
>         -: 1015:  inline ios_base&
>         -: 1016:  dec(ios_base& __base)
>         -: 1017:  {
>         -: 1018:    __base.setf(ios_base::dec, ios_base::basefield);
>         -: 1019:    return __base;
>         -: 1020:  }
>         -: 1021:
>         -: 1022:  /// Calls base.setf(ios_base::hex, ios_base::basefield).
>         -: 1023:  inline ios_base&
>         -: 1024:  hex(ios_base& __base)
>         -: 1025:  {
>         -: 1026:    __base.setf(ios_base::hex, ios_base::basefield);
>         -: 1027:    return __base;
>         -: 1028:  }
>         -: 1029:
>         -: 1030:  /// Calls base.setf(ios_base::oct, ios_base::basefield).
>         -: 1031:  inline ios_base&
>         -: 1032:  oct(ios_base& __base)
>         -: 1033:  {
>         -: 1034:    __base.setf(ios_base::oct, ios_base::basefield);
>         -: 1035:    return __base;
>         -: 1036:  }
>         -: 1037:
>         -: 1038:  // [27.4.5.4] floatfield manipulators
>         -: 1039:  /// Calls base.setf(ios_base::fixed, ios_base::floatfield).
>         -: 1040:  inline ios_base&
>         -: 1041:  fixed(ios_base& __base)
>         -: 1042:  {
>         -: 1043:    __base.setf(ios_base::fixed, ios_base::floatfield);
>         -: 1044:    return __base;
>         -: 1045:  }
>         -: 1046:
>         -: 1047:  /// Calls base.setf(ios_base::scientific, ios_base::floatfield).
>         -: 1048:  inline ios_base&
>         -: 1049:  scientific(ios_base& __base)
>         -: 1050:  {
>         -: 1051:    __base.setf(ios_base::scientific, ios_base::floatfield);
>         -: 1052:    return __base;
>         -: 1053:  }
>         -: 1054:
>         -: 1055:#if __cplusplus >= 201103L
>         -: 1056:  // New C++11 floatfield manipulators
>         -: 1057:
>         -: 1058:  /// Calls
>         -: 1059:  /// base.setf(ios_base::fixed|ios_base::scientific, ios_base::floatfield)
>         -: 1060:  inline ios_base&
>         -: 1061:  hexfloat(ios_base& __base)
>         -: 1062:  {
>         -: 1063:    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
>         -: 1064:    return __base;
>         -: 1065:  }
>         -: 1066:
>         -: 1067:  /// Calls @c base.unsetf(ios_base::floatfield)
>         -: 1068:  inline ios_base&
>         -: 1069:  defaultfloat(ios_base& __base)
>         -: 1070:  {
>         -: 1071:    __base.unsetf(ios_base::floatfield);
>         -: 1072:    return __base;
>         -: 1073:  }
>         -: 1074:#endif
>         -: 1075:
>         -: 1076:_GLIBCXX_END_NAMESPACE_VERSION
>         -: 1077:} // namespace
>         -: 1078:
>         -: 1079:#endif /* _IOS_BASE_H */
