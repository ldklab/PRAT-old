1,2c1,2
<         -:    0:Source:/usr/include/c++/8/bits/stl_iterator.h
<         -:    0:Programs:51
---
>         -:    0:Source:/usr/include/c++/7/bits/stl_iterator.h
>         -:    0:Programs:3
5c5
<         -:    3:// Copyright (C) 2001-2018 Free Software Foundation, Inc.
---
>         -:    3:// Copyright (C) 2001-2017 Free Software Foundation, Inc.
135c135
<     #####:  133:      reverse_iterator(iterator_type __x) : current(__x) { }
---
>         -:  133:      reverse_iterator(iterator_type __x) : current(__x) { }
171c171
<     #####:  169:      operator*() const
---
>         -:  169:      operator*() const
173,174c173,174
<     #####:  171:	_Iterator __tmp = current;
<     #####:  172:	return *--__tmp;
---
>         -:  171:	_Iterator __tmp = current;
>         -:  172:	return *--__tmp;
185,186c185,186
<     #####:  183:      operator->() const
<     #####:  184:      { return std::__addressof(operator*()); }
---
>         -:  183:      operator->() const
>         -:  184:      { return std::__addressof(operator*()); }
469,483c469,470
<        9*:  467:      back_insert_iterator(_Container& __x)
<        9*:  468:      : container(std::__addressof(__x)) { }
< ------------------
< _ZNSt20back_insert_iteratorISt6vectorIPN7OpenDDS4DCPS13TransportImplESaIS4_EEEC2ERS6_:
<         9:  467:      back_insert_iterator(_Container& __x)
<         9:  468:      : container(std::__addressof(__x)) { }
< ------------------
< _ZNSt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEEC2ERS6_:
<     #####:  467:      back_insert_iterator(_Container& __x)
<     #####:  468:      : container(std::__addressof(__x)) { }
< ------------------
< _ZNSt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEEC2ERS6_:
<     #####:  467:      back_insert_iterator(_Container& __x)
<     #####:  468:      : container(std::__addressof(__x)) { }
< ------------------
---
>         -:  467:      back_insert_iterator(_Container& __x)
>         -:  468:      : container(std::__addressof(__x)) { }
505c492
<        9*:  490:      operator=(const typename _Container::value_type& __value)
---
>         -:  490:      operator=(const typename _Container::value_type& __value)
507,508c494,495
<        9*:  492:	container->push_back(__value);
<        9*:  493:	return *this;
---
>         -:  492:	container->push_back(__value);
>         -:  493:	return *this;
510,531d496
< ------------------
< _ZNSt20back_insert_iteratorISt6vectorIPN7OpenDDS4DCPS13TransportImplESaIS4_EEEaSERKS4_:
<         9:  490:      operator=(const typename _Container::value_type& __value)
<         -:  491:      {
<         9:  492:	container->push_back(__value);
<         9:  493:	return *this;
<         -:  494:      }
< ------------------
< _ZNSt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEEaSERKS4_:
<     #####:  490:      operator=(const typename _Container::value_type& __value)
<         -:  491:      {
<     #####:  492:	container->push_back(__value);
<     #####:  493:	return *this;
<         -:  494:      }
< ------------------
< _ZNSt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEEaSERKS4_:
<     #####:  490:      operator=(const typename _Container::value_type& __value)
<         -:  491:      {
<     #####:  492:	container->push_back(__value);
<     #####:  493:	return *this;
<         -:  494:      }
< ------------------
543,557c508,509
<        9*:  506:      operator*()
<        9*:  507:      { return *this; }
< ------------------
< _ZNSt20back_insert_iteratorISt6vectorIPN7OpenDDS4DCPS13TransportImplESaIS4_EEEdeEv:
<         9:  506:      operator*()
<         9:  507:      { return *this; }
< ------------------
< _ZNSt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEEdeEv:
<     #####:  506:      operator*()
<     #####:  507:      { return *this; }
< ------------------
< _ZNSt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEEdeEv:
<     #####:  506:      operator*()
<     #####:  507:      { return *this; }
< ------------------
---
>         -:  506:      operator*()
>         -:  507:      { return *this; }
561,575c513,514
<        9*:  511:      operator++()
<        9*:  512:      { return *this; }
< ------------------
< _ZNSt20back_insert_iteratorISt6vectorIPN7OpenDDS4DCPS13TransportImplESaIS4_EEEppEv:
<         9:  511:      operator++()
<         9:  512:      { return *this; }
< ------------------
< _ZNSt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEEppEv:
<     #####:  511:      operator++()
<     #####:  512:      { return *this; }
< ------------------
< _ZNSt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEEppEv:
<     #####:  511:      operator++()
<     #####:  512:      { return *this; }
< ------------------
---
>         -:  511:      operator++()
>         -:  512:      { return *this; }
596,610c535,536
<        9*:  533:    back_inserter(_Container& __x)
<        9*:  534:    { return back_insert_iterator<_Container>(__x); }
< ------------------
< _ZSt13back_inserterISt6vectorIPN7OpenDDS4DCPS13TransportImplESaIS4_EEESt20back_insert_iteratorIT_ERS8_:
<         9:  533:    back_inserter(_Container& __x)
<         9:  534:    { return back_insert_iterator<_Container>(__x); }
< ------------------
< _ZSt13back_inserterISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEESt20back_insert_iteratorIT_ERS8_:
<     #####:  533:    back_inserter(_Container& __x)
<     #####:  534:    { return back_insert_iterator<_Container>(__x); }
< ------------------
< _ZSt13back_inserterISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS4_EEESt20back_insert_iteratorIT_ERS8_:
<     #####:  533:    back_inserter(_Container& __x)
<     #####:  534:    { return back_insert_iterator<_Container>(__x); }
< ------------------
---
>         -:  533:    back_inserter(_Container& __x)
>         -:  534:    { return back_insert_iterator<_Container>(__x); }
803,1535c729,992
<         -:  727:   *  @param __i  An iterator into the container.
<         -:  728:   *  @return  An instance of insert_iterator working on @p __x.
<         -:  729:   *
<         -:  730:   *  This wrapper function helps in creating insert_iterator instances.
<         -:  731:   *  Typing the name of the %iterator requires knowing the precise full
<         -:  732:   *  type of the container, which can be tedious and impedes generic
<         -:  733:   *  programming.  Using this function lets you take advantage of automatic
<         -:  734:   *  template parameter deduction, making the compiler match the correct
<         -:  735:   *  types for you.
<         -:  736:  */
<         -:  737:  template<typename _Container, typename _Iterator>
<         -:  738:    inline insert_iterator<_Container>
<         -:  739:    inserter(_Container& __x, _Iterator __i)
<         -:  740:    {
<         -:  741:      return insert_iterator<_Container>(__x,
<         -:  742:					 typename _Container::iterator(__i));
<         -:  743:    }
<         -:  744:
<         -:  745:  // @} group iterators
<         -:  746:
<         -:  747:_GLIBCXX_END_NAMESPACE_VERSION
<         -:  748:} // namespace
<         -:  749:
<         -:  750:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
<         -:  751:{
<         -:  752:_GLIBCXX_BEGIN_NAMESPACE_VERSION
<         -:  753:
<         -:  754:  // This iterator adapter is @a normal in the sense that it does not
<         -:  755:  // change the semantics of any of the operators of its iterator
<         -:  756:  // parameter.  Its primary purpose is to convert an iterator that is
<         -:  757:  // not a class, e.g. a pointer, into an iterator that is a class.
<         -:  758:  // The _Container parameter exists solely so that different containers
<         -:  759:  // using this template can instantiate different types, even if the
<         -:  760:  // _Iterator parameter is the same.
<         -:  761:  using std::iterator_traits;
<         -:  762:  using std::iterator;
<         -:  763:  template<typename _Iterator, typename _Container>
<         -:  764:    class __normal_iterator
<         -:  765:    {
<         -:  766:    protected:
<         -:  767:      _Iterator _M_current;
<         -:  768:
<         -:  769:      typedef iterator_traits<_Iterator>		__traits_type;
<         -:  770:
<         -:  771:    public:
<         -:  772:      typedef _Iterator					iterator_type;
<         -:  773:      typedef typename __traits_type::iterator_category iterator_category;
<         -:  774:      typedef typename __traits_type::value_type  	value_type;
<         -:  775:      typedef typename __traits_type::difference_type 	difference_type;
<         -:  776:      typedef typename __traits_type::reference 	reference;
<         -:  777:      typedef typename __traits_type::pointer   	pointer;
<         -:  778:
<         -:  779:      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
<         -:  780:      : _M_current(_Iterator()) { }
<         -:  781:
<         -:  782:      explicit
<     1067*:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     1067*:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEC2ERKS7_:
<     #####:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     #####:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEC2ERKS9_:
<        38:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<        38:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEC2ERKSA_:
<         4:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<         4:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC2ERKS7_:
<     #####:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     #####:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS8RcHandleINS3_15TransportConfigEEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISD_EEES7_ISG_SaISG_EEEC2ERKSH_:
<     #####:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     #####:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC2ERKS8_:
<     #####:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     #####:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEC2ERKS6_:
<       623:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<       623:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEC2ERKS7_:
<        93:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<        93:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEC2ERKS6_:
<     #####:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     #####:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEC2ERKSA_:
<        29:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<        29:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEEC2ERKS5_:
<        82:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<        82:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEC2ERKS7_:
<     #####:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     #####:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEEC2ERKS6_:
<        82:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<        82:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS12WeakRcHandleINS2_24TransportReceiveListenerEEESt6vectorIS5_SaIS5_EEEC2ERKS6_:
<        84:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<        84:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS12HostnameInfoESt6vectorIS3_SaIS3_EEEC2ERKS4_:
<        18:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<        18:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIP13ACE_INET_AddrSt6vectorIS1_SaIS1_EEEC2ERKS2_:
<     #####:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     #####:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPK13ACE_INET_AddrSt6vectorIS1_SaIS1_EEEC2ERKS3_:
<     #####:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<     #####:  784:      : _M_current(__i) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEC2ERKS9_:
<        14:  783:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
<        14:  784:      : _M_current(__i) { }
< ------------------
<         -:  785:
<         -:  786:      // Allow iterator to const_iterator conversion
<         -:  787:      template<typename _Iter>
<        95:  788:        __normal_iterator(const __normal_iterator<_Iter,
<         -:  789:			  typename __enable_if<
<         -:  790:      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
<         -:  791:		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
<        95:  792:        : _M_current(__i.base()) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEC2IPS8_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISH_SG_E7__valueESD_E6__typeEEE:
<         2:  788:        __normal_iterator(const __normal_iterator<_Iter,
<         -:  789:			  typename __enable_if<
<         -:  790:      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
<         -:  791:		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
<         2:  792:        : _M_current(__i.base()) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEC2IPS5_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISE_SD_E7__valueESA_E6__typeEEE:
<        89:  788:        __normal_iterator(const __normal_iterator<_Iter,
<         -:  789:			  typename __enable_if<
<         -:  790:      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
<         -:  791:		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
<        89:  792:        : _M_current(__i.base()) { }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEC2IPS8_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISH_SG_E7__valueESD_E6__typeEEE:
<         4:  788:        __normal_iterator(const __normal_iterator<_Iter,
<         -:  789:			  typename __enable_if<
<         -:  790:      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
<         -:  791:		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
<         4:  792:        : _M_current(__i.base()) { }
< ------------------
<         -:  793:
<         -:  794:      // Forward iterator requirements
<         -:  795:      reference
<       24*:  796:      operator*() const _GLIBCXX_NOEXCEPT
<       24*:  797:      { return *_M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEdeEv:
<         2:  796:      operator*() const _GLIBCXX_NOEXCEPT
<         2:  797:      { return *_M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEEdeEv:
<        18:  796:      operator*() const _GLIBCXX_NOEXCEPT
<        18:  797:      { return *_M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEdeEv:
<     #####:  796:      operator*() const _GLIBCXX_NOEXCEPT
<     #####:  797:      { return *_M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEdeEv:
<     #####:  796:      operator*() const _GLIBCXX_NOEXCEPT
<     #####:  797:      { return *_M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv:
<     #####:  796:      operator*() const _GLIBCXX_NOEXCEPT
<     #####:  797:      { return *_M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv:
<     #####:  796:      operator*() const _GLIBCXX_NOEXCEPT
<     #####:  797:      { return *_M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEdeEv:
<         4:  796:      operator*() const _GLIBCXX_NOEXCEPT
<         4:  797:      { return *_M_current; }
< ------------------
<         -:  798:
<         -:  799:      pointer
<        23:  800:      operator->() const _GLIBCXX_NOEXCEPT
<        23:  801:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS12HostnameInfoESt6vectorIS3_SaIS3_EEEptEv:
<        15:  800:      operator->() const _GLIBCXX_NOEXCEPT
<        15:  801:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEptEv:
<         8:  800:      operator->() const _GLIBCXX_NOEXCEPT
<         8:  801:      { return _M_current; }
< ------------------
<         -:  802:
<         -:  803:      __normal_iterator&
<        3*:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<        3*:  806:	++_M_current;
<        3*:  807:	return *this;
<         -:  808:      }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEppEv:
<     #####:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<     #####:  806:	++_M_current;
<     #####:  807:	return *this;
<         -:  808:      }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS12HostnameInfoESt6vectorIS3_SaIS3_EEEppEv:
<         3:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<         3:  806:	++_M_current;
<         3:  807:	return *this;
<         -:  808:      }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEEppEv:
<     #####:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<     #####:  806:	++_M_current;
<     #####:  807:	return *this;
<         -:  808:      }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEppEv:
<     #####:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<     #####:  806:	++_M_current;
<     #####:  807:	return *this;
<         -:  808:      }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEppEv:
<     #####:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<     #####:  806:	++_M_current;
<     #####:  807:	return *this;
<         -:  808:      }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv:
<     #####:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<     #####:  806:	++_M_current;
<     #####:  807:	return *this;
<         -:  808:      }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv:
<     #####:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<     #####:  806:	++_M_current;
<     #####:  807:	return *this;
<         -:  808:      }
< ------------------
< _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEppEv:
<     #####:  804:      operator++() _GLIBCXX_NOEXCEPT
<         -:  805:      {
<     #####:  806:	++_M_current;
<     #####:  807:	return *this;
<         -:  808:      }
< ------------------
<         -:  809:
<         -:  810:      __normal_iterator
<         -:  811:      operator++(int) _GLIBCXX_NOEXCEPT
<         -:  812:      { return __normal_iterator(_M_current++); }
<         -:  813:
<         -:  814:      // Bidirectional iterator requirements
<         -:  815:      __normal_iterator&
<         9:  816:      operator--() _GLIBCXX_NOEXCEPT
<         -:  817:      {
<         9:  818:	--_M_current;
<         9:  819:	return *this;
<         -:  820:      }
<         -:  821:
<         -:  822:      __normal_iterator
<         -:  823:      operator--(int) _GLIBCXX_NOEXCEPT
<         -:  824:      { return __normal_iterator(_M_current--); }
<         -:  825:
<         -:  826:      // Random access iterator requirements
<         -:  827:      reference
<         -:  828:      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
<         -:  829:      { return _M_current[__n]; }
<         -:  830:
<         -:  831:      __normal_iterator&
<         -:  832:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
<         -:  833:      { _M_current += __n; return *this; }
<         -:  834:
<         -:  835:      __normal_iterator
<       101:  836:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
<       101:  837:      { return __normal_iterator(_M_current + __n); }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEplEl:
<         2:  836:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
<         2:  837:      { return __normal_iterator(_M_current + __n); }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEplEl:
<        89:  836:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
<        89:  837:      { return __normal_iterator(_M_current + __n); }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEplEl:
<        10:  836:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
<        10:  837:      { return __normal_iterator(_M_current + __n); }
< ------------------
<         -:  838:
<         -:  839:      __normal_iterator&
<         -:  840:      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
<         -:  841:      { _M_current -= __n; return *this; }
<         -:  842:
<         -:  843:      __normal_iterator
<        11:  844:      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
<        11:  845:      { return __normal_iterator(_M_current - __n); }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEmiEl:
<         2:  844:      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
<         2:  845:      { return __normal_iterator(_M_current - __n); }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEEmiEl:
<         9:  844:      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
<         9:  845:      { return __normal_iterator(_M_current - __n); }
< ------------------
<         -:  846:
<         -:  847:      const _Iterator&
<     1501*:  848:      base() const _GLIBCXX_NOEXCEPT
<     1501*:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEE4baseEv:
<        46:  848:      base() const _GLIBCXX_NOEXCEPT
<        46:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEE4baseEv:
<         8:  848:      base() const _GLIBCXX_NOEXCEPT
<         8:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS8RcHandleINS3_15TransportConfigEEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISD_EEES7_ISG_SaISG_EEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEE4baseEv:
<       712:  848:      base() const _GLIBCXX_NOEXCEPT
<       712:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEE4baseEv:
<       271:  848:      base() const _GLIBCXX_NOEXCEPT
<       271:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEE4baseEv:
<        32:  848:      base() const _GLIBCXX_NOEXCEPT
<        32:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEE4baseEv:
<       128:  848:      base() const _GLIBCXX_NOEXCEPT
<       128:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPKPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEE4baseEv:
<        82:  848:      base() const _GLIBCXX_NOEXCEPT
<        82:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS12WeakRcHandleINS2_24TransportReceiveListenerEEESt6vectorIS5_SaIS5_EEE4baseEv:
<       168:  848:      base() const _GLIBCXX_NOEXCEPT
<       168:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPN7OpenDDS4DCPS12HostnameInfoESt6vectorIS3_SaIS3_EEE4baseEv:
<        36:  848:      base() const _GLIBCXX_NOEXCEPT
<        36:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIP13ACE_INET_AddrSt6vectorIS1_SaIS1_EEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPK13ACE_INET_AddrSt6vectorIS1_SaIS1_EEE4baseEv:
<     #####:  848:      base() const _GLIBCXX_NOEXCEPT
<     #####:  849:      { return _M_current; }
< ------------------
< _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEE4baseEv:
<        18:  848:      base() const _GLIBCXX_NOEXCEPT
<        18:  849:      { return _M_current; }
< ------------------
<         -:  850:    };
<         -:  851:
<         -:  852:  // Note: In what follows, the left- and right-hand-side iterators are
<         -:  853:  // allowed to vary in types (conceptually in cv-qualification) so that
<         -:  854:  // comparison between cv-qualified and non-cv-qualified iterators be
<         -:  855:  // valid.  However, the greedy and unfriendly operators in std::rel_ops
<         -:  856:  // will make overload resolution ambiguous (when in scope) if we don't
<         -:  857:  // provide overloads whose operands are of the same type.  Can someone
<         -:  858:  // remind me what generic programming is about? -- Gaby
<         -:  859:
<         -:  860:  // Forward iterator requirements
<         -:  861:  template<typename _IteratorL, typename _IteratorR, typename _Container>
<         -:  862:    inline bool
<     #####:  863:    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
<         -:  864:	       const __normal_iterator<_IteratorR, _Container>& __rhs)
<         -:  865:    _GLIBCXX_NOEXCEPT
<     #####:  866:    { return __lhs.base() == __rhs.base(); }
<         -:  867:
<         -:  868:  template<typename _Iterator, typename _Container>
<         -:  869:    inline bool
<       58*:  870:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  871:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  872:    _GLIBCXX_NOEXCEPT
<       58*:  873:    { return __lhs.base() == __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxeqIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESI_:
<         1:  870:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  871:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  872:    _GLIBCXX_NOEXCEPT
<         1:  873:    { return __lhs.base() == __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxeqIPKSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_:
<        14:  870:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  871:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  872:    _GLIBCXX_NOEXCEPT
<        14:  873:    { return __lhs.base() == __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxeqIPK13ACE_INET_AddrSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
<     #####:  870:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  871:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  872:    _GLIBCXX_NOEXCEPT
<     #####:  873:    { return __lhs.base() == __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxeqIPKPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_:
<        41:  870:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  871:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  872:    _GLIBCXX_NOEXCEPT
<        41:  873:    { return __lhs.base() == __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxeqIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_:
<     #####:  870:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  871:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  872:    _GLIBCXX_NOEXCEPT
<     #####:  873:    { return __lhs.base() == __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxeqIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_:
<         2:  870:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  871:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  872:    _GLIBCXX_NOEXCEPT
<         2:  873:    { return __lhs.base() == __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxeqIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESH_:
<     #####:  870:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  871:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  872:    _GLIBCXX_NOEXCEPT
<     #####:  873:    { return __lhs.base() == __rhs.base(); }
< ------------------
<         -:  874:
<         -:  875:  template<typename _IteratorL, typename _IteratorR, typename _Container>
<         -:  876:    inline bool
<         -:  877:    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
<         -:  878:	       const __normal_iterator<_IteratorR, _Container>& __rhs)
<         -:  879:    _GLIBCXX_NOEXCEPT
<         -:  880:    { return __lhs.base() != __rhs.base(); }
<         -:  881:
<         -:  882:  template<typename _Iterator, typename _Container>
<         -:  883:    inline bool
<      124*:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<      124*:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxneIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESI_:
<         1:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<         1:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxneIPN7OpenDDS4DCPS12HostnameInfoESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:
<         6:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<         6:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxneIPPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_:
<        18:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<        18:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxneIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_:
<     #####:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<     #####:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxneIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_:
<        89:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<        89:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_:
<     #####:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<     #####:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxneIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESH_:
<     #####:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<     #####:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxneIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESI_:
<        10:  884:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  885:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  886:    _GLIBCXX_NOEXCEPT
<        10:  887:    { return __lhs.base() != __rhs.base(); }
< ------------------
<         -:  888:
<         -:  889:  // Random access iterator requirements
<         -:  890:  template<typename _IteratorL, typename _IteratorR, typename _Container>
<         -:  891:    inline bool
<         -:  892:    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
<         -:  893:	      const __normal_iterator<_IteratorR, _Container>& __rhs)
<         -:  894:    _GLIBCXX_NOEXCEPT
<         -:  895:    { return __lhs.base() < __rhs.base(); }
<         -:  896:
<         -:  897:  template<typename _Iterator, typename _Container>
<         -:  898:    inline bool
<         -:  899:    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  900:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  901:    _GLIBCXX_NOEXCEPT
<         -:  902:    { return __lhs.base() < __rhs.base(); }
<         -:  903:
<         -:  904:  template<typename _IteratorL, typename _IteratorR, typename _Container>
<         -:  905:    inline bool
<         -:  906:    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
<         -:  907:	      const __normal_iterator<_IteratorR, _Container>& __rhs)
<         -:  908:    _GLIBCXX_NOEXCEPT
<         -:  909:    { return __lhs.base() > __rhs.base(); }
<         -:  910:
<         -:  911:  template<typename _Iterator, typename _Container>
<         -:  912:    inline bool
<         -:  913:    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  914:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  915:    _GLIBCXX_NOEXCEPT
<         -:  916:    { return __lhs.base() > __rhs.base(); }
<         -:  917:
<         -:  918:  template<typename _IteratorL, typename _IteratorR, typename _Container>
<         -:  919:    inline bool
<         -:  920:    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
<         -:  921:	       const __normal_iterator<_IteratorR, _Container>& __rhs)
<         -:  922:    _GLIBCXX_NOEXCEPT
<         -:  923:    { return __lhs.base() <= __rhs.base(); }
<         -:  924:
<         -:  925:  template<typename _Iterator, typename _Container>
<         -:  926:    inline bool
<         -:  927:    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  928:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  929:    _GLIBCXX_NOEXCEPT
<         -:  930:    { return __lhs.base() <= __rhs.base(); }
<         -:  931:
<         -:  932:  template<typename _IteratorL, typename _IteratorR, typename _Container>
<         -:  933:    inline bool
<         -:  934:    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
<         -:  935:	       const __normal_iterator<_IteratorR, _Container>& __rhs)
<         -:  936:    _GLIBCXX_NOEXCEPT
<         -:  937:    { return __lhs.base() >= __rhs.base(); }
<         -:  938:
<         -:  939:  template<typename _Iterator, typename _Container>
<         -:  940:    inline bool
<         -:  941:    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  942:	       const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  943:    _GLIBCXX_NOEXCEPT
<         -:  944:    { return __lhs.base() >= __rhs.base(); }
<         -:  945:
<         -:  946:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
<         -:  947:  // According to the resolution of DR179 not only the various comparison
<         -:  948:  // operators but also operator- must accept mixed iterator/const_iterator
<         -:  949:  // parameters.
<         -:  950:  template<typename _IteratorL, typename _IteratorR, typename _Container>
<         -:  951:#if __cplusplus >= 201103L
<         -:  952:    // DR 685.
<         -:  953:    inline auto
<        89:  954:    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
<         -:  955:	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
<         -:  956:    -> decltype(__lhs.base() - __rhs.base())
<         -:  957:#else
<         -:  958:    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
<         -:  959:    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
<         -:  960:	      const __normal_iterator<_IteratorR, _Container>& __rhs)
<         -:  961:#endif
<        89:  962:    { return __lhs.base() - __rhs.base(); }
<         -:  963:
<         -:  964:  template<typename _Iterator, typename _Container>
<         -:  965:    inline typename __normal_iterator<_Iterator, _Container>::difference_type
<      263*:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<      263*:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSG_SJ_:
<         4:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<         4:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPKSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS3_15TransportClientEEENS3_6GUID_tEESt6vectorIS8_SaIS8_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSH_SK_:
<         2:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<         2:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIP13ACE_INET_AddrSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_:
<     #####:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<     #####:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPN7OpenDDS4DCPS12HostnameInfoESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_:
<         6:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<         6:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPN7OpenDDS4DCPS12WeakRcHandleINS2_24TransportReceiveListenerEEESt6vectorIS5_SaIS5_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_:
<        42:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<        42:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPPN7OpenDDS4DCPS13TransportImplESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_:
<        23:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<        23:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_:
<     #####:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<     #####:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPKN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_:
<        89:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<        89:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPN7OpenDDS4DCPS8RcHandleINS2_13TransportInstEEESt6vectorIS5_SaIS5_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_:
<        89:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<        89:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPSt4pairIN7OpenDDS4DCPS8RcHandleINS3_15TransportConfigEEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISD_EEES7_ISG_SaISG_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSN_SQ_:
<     #####:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<     #####:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_:
<     #####:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<     #####:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSG_SJ_:
<         4:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<         4:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
< _ZN9__gnu_cxxmiIPKSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS3_21TransportSendStrategy8SendModeEESt6vectorIS8_SaIS8_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSH_SK_:
<         4:  966:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
<         -:  967:	      const __normal_iterator<_Iterator, _Container>& __rhs)
<         -:  968:    _GLIBCXX_NOEXCEPT
<         4:  969:    { return __lhs.base() - __rhs.base(); }
< ------------------
<         -:  970:
<         -:  971:  template<typename _Iterator, typename _Container>
<         -:  972:    inline __normal_iterator<_Iterator, _Container>
<         -:  973:    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
<         -:  974:	      __n, const __normal_iterator<_Iterator, _Container>& __i)
<         -:  975:    _GLIBCXX_NOEXCEPT
<         -:  976:    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
<         -:  977:
<         -:  978:_GLIBCXX_END_NAMESPACE_VERSION
<         -:  979:} // namespace
<         -:  980:
<         -:  981:namespace std _GLIBCXX_VISIBILITY(default)
<         -:  982:{
<         -:  983:_GLIBCXX_BEGIN_NAMESPACE_VERSION
<         -:  984:
<         -:  985:  template<typename _Iterator, typename _Container>
<         -:  986:    _Iterator
<        6*:  987:    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
<        6*:  988:    { return __it.base(); }
< ------------------
< _ZSt12__niter_baseIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS2_15TransportClientEEENS2_6GUID_tEESt6vectorIS7_SaIS7_EEET_N9__gnu_cxx17__normal_iteratorISC_T0_EE:
<     #####:  987:    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
<     #####:  988:    { return __it.base(); }
< ------------------
< _ZSt12__niter_baseIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEESt6vectorIS7_SaIS7_EEET_N9__gnu_cxx17__normal_iteratorISC_T0_EE:
<         6:  987:    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
<         6:  988:    { return __it.base(); }
< ------------------
<         -:  989:
<         -:  990:#if __cplusplus >= 201103L
---
>         -:  727:   *  @return  An instance of insert_iterator working on @p __x.
>         -:  728:   *
>         -:  729:   *  This wrapper function helps in creating insert_iterator instances.
>         -:  730:   *  Typing the name of the %iterator requires knowing the precise full
>         -:  731:   *  type of the container, which can be tedious and impedes generic
>         -:  732:   *  programming.  Using this function lets you take advantage of automatic
>         -:  733:   *  template parameter deduction, making the compiler match the correct
>         -:  734:   *  types for you.
>         -:  735:  */
>         -:  736:  template<typename _Container, typename _Iterator>
>         -:  737:    inline insert_iterator<_Container>
>         -:  738:    inserter(_Container& __x, _Iterator __i)
>         -:  739:    {
>         -:  740:      return insert_iterator<_Container>(__x,
>         -:  741:					 typename _Container::iterator(__i));
>         -:  742:    }
>         -:  743:
>         -:  744:  // @} group iterators
>         -:  745:
>         -:  746:_GLIBCXX_END_NAMESPACE_VERSION
>         -:  747:} // namespace
>         -:  748:
>         -:  749:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
>         -:  750:{
>         -:  751:_GLIBCXX_BEGIN_NAMESPACE_VERSION
>         -:  752:
>         -:  753:  // This iterator adapter is @a normal in the sense that it does not
>         -:  754:  // change the semantics of any of the operators of its iterator
>         -:  755:  // parameter.  Its primary purpose is to convert an iterator that is
>         -:  756:  // not a class, e.g. a pointer, into an iterator that is a class.
>         -:  757:  // The _Container parameter exists solely so that different containers
>         -:  758:  // using this template can instantiate different types, even if the
>         -:  759:  // _Iterator parameter is the same.
>         -:  760:  using std::iterator_traits;
>         -:  761:  using std::iterator;
>         -:  762:  template<typename _Iterator, typename _Container>
>         -:  763:    class __normal_iterator
>         -:  764:    {
>         -:  765:    protected:
>         -:  766:      _Iterator _M_current;
>         -:  767:
>         -:  768:      typedef iterator_traits<_Iterator>		__traits_type;
>         -:  769:
>         -:  770:    public:
>         -:  771:      typedef _Iterator					iterator_type;
>         -:  772:      typedef typename __traits_type::iterator_category iterator_category;
>         -:  773:      typedef typename __traits_type::value_type  	value_type;
>         -:  774:      typedef typename __traits_type::difference_type 	difference_type;
>         -:  775:      typedef typename __traits_type::reference 	reference;
>         -:  776:      typedef typename __traits_type::pointer   	pointer;
>         -:  777:
>         -:  778:      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
>         -:  779:      : _M_current(_Iterator()) { }
>         -:  780:
>         -:  781:      explicit
>     #####:  782:      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
>     #####:  783:      : _M_current(__i) { }
>         -:  784:
>         -:  785:      // Allow iterator to const_iterator conversion
>         -:  786:      template<typename _Iter>
>         -:  787:        __normal_iterator(const __normal_iterator<_Iter,
>         -:  788:			  typename __enable_if<
>         -:  789:      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
>         -:  790:		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
>         -:  791:        : _M_current(__i.base()) { }
>         -:  792:
>         -:  793:      // Forward iterator requirements
>         -:  794:      reference
>     #####:  795:      operator*() const _GLIBCXX_NOEXCEPT
>     #####:  796:      { return *_M_current; }
>         -:  797:
>         -:  798:      pointer
>     #####:  799:      operator->() const _GLIBCXX_NOEXCEPT
>     #####:  800:      { return _M_current; }
>         -:  801:
>         -:  802:      __normal_iterator&
>     #####:  803:      operator++() _GLIBCXX_NOEXCEPT
>         -:  804:      {
>     #####:  805:	++_M_current;
>     #####:  806:	return *this;
>         -:  807:      }
>         -:  808:
>         -:  809:      __normal_iterator
>         -:  810:      operator++(int) _GLIBCXX_NOEXCEPT
>         -:  811:      { return __normal_iterator(_M_current++); }
>         -:  812:
>         -:  813:      // Bidirectional iterator requirements
>         -:  814:      __normal_iterator&
>         -:  815:      operator--() _GLIBCXX_NOEXCEPT
>         -:  816:      {
>         -:  817:	--_M_current;
>         -:  818:	return *this;
>         -:  819:      }
>         -:  820:
>         -:  821:      __normal_iterator
>         -:  822:      operator--(int) _GLIBCXX_NOEXCEPT
>         -:  823:      { return __normal_iterator(_M_current--); }
>         -:  824:
>         -:  825:      // Random access iterator requirements
>         -:  826:      reference
>         -:  827:      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
>         -:  828:      { return _M_current[__n]; }
>         -:  829:
>         -:  830:      __normal_iterator&
>         -:  831:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
>         -:  832:      { _M_current += __n; return *this; }
>         -:  833:
>         -:  834:      __normal_iterator
>         -:  835:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
>         -:  836:      { return __normal_iterator(_M_current + __n); }
>         -:  837:
>         -:  838:      __normal_iterator&
>         -:  839:      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
>         -:  840:      { _M_current -= __n; return *this; }
>         -:  841:
>         -:  842:      __normal_iterator
>         -:  843:      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
>         -:  844:      { return __normal_iterator(_M_current - __n); }
>         -:  845:
>         -:  846:      const _Iterator&
>     #####:  847:      base() const _GLIBCXX_NOEXCEPT
>     #####:  848:      { return _M_current; }
>         -:  849:    };
>         -:  850:
>         -:  851:  // Note: In what follows, the left- and right-hand-side iterators are
>         -:  852:  // allowed to vary in types (conceptually in cv-qualification) so that
>         -:  853:  // comparison between cv-qualified and non-cv-qualified iterators be
>         -:  854:  // valid.  However, the greedy and unfriendly operators in std::rel_ops
>         -:  855:  // will make overload resolution ambiguous (when in scope) if we don't
>         -:  856:  // provide overloads whose operands are of the same type.  Can someone
>         -:  857:  // remind me what generic programming is about? -- Gaby
>         -:  858:
>         -:  859:  // Forward iterator requirements
>         -:  860:  template<typename _IteratorL, typename _IteratorR, typename _Container>
>         -:  861:    inline bool
>         -:  862:    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
>         -:  863:	       const __normal_iterator<_IteratorR, _Container>& __rhs)
>         -:  864:    _GLIBCXX_NOEXCEPT
>         -:  865:    { return __lhs.base() == __rhs.base(); }
>         -:  866:
>         -:  867:  template<typename _Iterator, typename _Container>
>         -:  868:    inline bool
>         -:  869:    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
>         -:  870:	       const __normal_iterator<_Iterator, _Container>& __rhs)
>         -:  871:    _GLIBCXX_NOEXCEPT
>         -:  872:    { return __lhs.base() == __rhs.base(); }
>         -:  873:
>         -:  874:  template<typename _IteratorL, typename _IteratorR, typename _Container>
>         -:  875:    inline bool
>         -:  876:    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
>         -:  877:	       const __normal_iterator<_IteratorR, _Container>& __rhs)
>         -:  878:    _GLIBCXX_NOEXCEPT
>         -:  879:    { return __lhs.base() != __rhs.base(); }
>         -:  880:
>         -:  881:  template<typename _Iterator, typename _Container>
>         -:  882:    inline bool
>     #####:  883:    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
>         -:  884:	       const __normal_iterator<_Iterator, _Container>& __rhs)
>         -:  885:    _GLIBCXX_NOEXCEPT
>     #####:  886:    { return __lhs.base() != __rhs.base(); }
>         -:  887:
>         -:  888:  // Random access iterator requirements
>         -:  889:  template<typename _IteratorL, typename _IteratorR, typename _Container>
>         -:  890:    inline bool
>         -:  891:    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
>         -:  892:	      const __normal_iterator<_IteratorR, _Container>& __rhs)
>         -:  893:    _GLIBCXX_NOEXCEPT
>         -:  894:    { return __lhs.base() < __rhs.base(); }
>         -:  895:
>         -:  896:  template<typename _Iterator, typename _Container>
>         -:  897:    inline bool
>         -:  898:    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
>         -:  899:	      const __normal_iterator<_Iterator, _Container>& __rhs)
>         -:  900:    _GLIBCXX_NOEXCEPT
>         -:  901:    { return __lhs.base() < __rhs.base(); }
>         -:  902:
>         -:  903:  template<typename _IteratorL, typename _IteratorR, typename _Container>
>         -:  904:    inline bool
>         -:  905:    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
>         -:  906:	      const __normal_iterator<_IteratorR, _Container>& __rhs)
>         -:  907:    _GLIBCXX_NOEXCEPT
>         -:  908:    { return __lhs.base() > __rhs.base(); }
>         -:  909:
>         -:  910:  template<typename _Iterator, typename _Container>
>         -:  911:    inline bool
>         -:  912:    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
>         -:  913:	      const __normal_iterator<_Iterator, _Container>& __rhs)
>         -:  914:    _GLIBCXX_NOEXCEPT
>         -:  915:    { return __lhs.base() > __rhs.base(); }
>         -:  916:
>         -:  917:  template<typename _IteratorL, typename _IteratorR, typename _Container>
>         -:  918:    inline bool
>         -:  919:    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
>         -:  920:	       const __normal_iterator<_IteratorR, _Container>& __rhs)
>         -:  921:    _GLIBCXX_NOEXCEPT
>         -:  922:    { return __lhs.base() <= __rhs.base(); }
>         -:  923:
>         -:  924:  template<typename _Iterator, typename _Container>
>         -:  925:    inline bool
>         -:  926:    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
>         -:  927:	       const __normal_iterator<_Iterator, _Container>& __rhs)
>         -:  928:    _GLIBCXX_NOEXCEPT
>         -:  929:    { return __lhs.base() <= __rhs.base(); }
>         -:  930:
>         -:  931:  template<typename _IteratorL, typename _IteratorR, typename _Container>
>         -:  932:    inline bool
>         -:  933:    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
>         -:  934:	       const __normal_iterator<_IteratorR, _Container>& __rhs)
>         -:  935:    _GLIBCXX_NOEXCEPT
>         -:  936:    { return __lhs.base() >= __rhs.base(); }
>         -:  937:
>         -:  938:  template<typename _Iterator, typename _Container>
>         -:  939:    inline bool
>         -:  940:    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
>         -:  941:	       const __normal_iterator<_Iterator, _Container>& __rhs)
>         -:  942:    _GLIBCXX_NOEXCEPT
>         -:  943:    { return __lhs.base() >= __rhs.base(); }
>         -:  944:
>         -:  945:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
>         -:  946:  // According to the resolution of DR179 not only the various comparison
>         -:  947:  // operators but also operator- must accept mixed iterator/const_iterator
>         -:  948:  // parameters.
>         -:  949:  template<typename _IteratorL, typename _IteratorR, typename _Container>
>         -:  950:#if __cplusplus >= 201103L
>         -:  951:    // DR 685.
>         -:  952:    inline auto
>         -:  953:    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
>         -:  954:	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
>         -:  955:    -> decltype(__lhs.base() - __rhs.base())
>         -:  956:#else
>         -:  957:    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
>         -:  958:    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
>         -:  959:	      const __normal_iterator<_IteratorR, _Container>& __rhs)
>         -:  960:#endif
>         -:  961:    { return __lhs.base() - __rhs.base(); }
>         -:  962:
>         -:  963:  template<typename _Iterator, typename _Container>
>         -:  964:    inline typename __normal_iterator<_Iterator, _Container>::difference_type
>     #####:  965:    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
>         -:  966:	      const __normal_iterator<_Iterator, _Container>& __rhs)
>         -:  967:    _GLIBCXX_NOEXCEPT
>     #####:  968:    { return __lhs.base() - __rhs.base(); }
>         -:  969:
>         -:  970:  template<typename _Iterator, typename _Container>
>         -:  971:    inline __normal_iterator<_Iterator, _Container>
>         -:  972:    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
>         -:  973:	      __n, const __normal_iterator<_Iterator, _Container>& __i)
>         -:  974:    _GLIBCXX_NOEXCEPT
>         -:  975:    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
>         -:  976:
>         -:  977:_GLIBCXX_END_NAMESPACE_VERSION
>         -:  978:} // namespace
>         -:  979:
>         -:  980:namespace std _GLIBCXX_VISIBILITY(default)
>         -:  981:{
>         -:  982:_GLIBCXX_BEGIN_NAMESPACE_VERSION
>         -:  983:
>         -:  984:  template<typename _Iterator, typename _Container>
>         -:  985:    _Iterator
>         -:  986:    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
>         -:  987:    { return __it.base(); }
>         -:  988:
>         -:  989:_GLIBCXX_END_NAMESPACE_VERSION
>         -:  990:} // namespace
1537,1542c994,999
<         -:  992:  /**
<         -:  993:   * @addtogroup iterators
<         -:  994:   * @{
<         -:  995:   */
<         -:  996:
<         -:  997:  // 24.4.3  Move iterators
---
>         -:  992:#if __cplusplus >= 201103L
>         -:  993:
>         -:  994:namespace std _GLIBCXX_VISIBILITY(default)
>         -:  995:{
>         -:  996:_GLIBCXX_BEGIN_NAMESPACE_VERSION
>         -:  997:
1544,1733c1001,1121
<         -:  999:   *  Class template move_iterator is an iterator adapter with the same
<         -: 1000:   *  behavior as the underlying iterator except that its dereference
<         -: 1001:   *  operator implicitly converts the value returned by the underlying
<         -: 1002:   *  iterator's dereference operator to an rvalue reference.  Some
<         -: 1003:   *  generic algorithms can be called with move iterators to replace
<         -: 1004:   *  copying with moving.
<         -: 1005:   */
<         -: 1006:  template<typename _Iterator>
<         -: 1007:    class move_iterator
<         -: 1008:    {
<         -: 1009:    protected:
<         -: 1010:      _Iterator _M_current;
<         -: 1011:
<         -: 1012:      typedef iterator_traits<_Iterator>		__traits_type;
<         -: 1013:      typedef typename __traits_type::reference		__base_ref;
<         -: 1014:
<         -: 1015:    public:
<         -: 1016:      typedef _Iterator					iterator_type;
<         -: 1017:      typedef typename __traits_type::iterator_category iterator_category;
<         -: 1018:      typedef typename __traits_type::value_type  	value_type;
<         -: 1019:      typedef typename __traits_type::difference_type	difference_type;
<         -: 1020:      // NB: DR 680.
<         -: 1021:      typedef _Iterator					pointer;
<         -: 1022:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
<         -: 1023:      // 2106. move_iterator wrapping iterators returning prvalues
<         -: 1024:      typedef typename conditional<is_reference<__base_ref>::value,
<         -: 1025:			 typename remove_reference<__base_ref>::type&&,
<         -: 1026:			 __base_ref>::type		reference;
<         -: 1027:
<         -: 1028:      _GLIBCXX17_CONSTEXPR
<         -: 1029:      move_iterator()
<         -: 1030:      : _M_current() { }
<         -: 1031:
<         -: 1032:      explicit _GLIBCXX17_CONSTEXPR
<      162*: 1033:      move_iterator(iterator_type __i)
<      162*: 1034:      : _M_current(__i) { }
< ------------------
< _ZNSt13move_iteratorIPN7OpenDDS4DCPS12HostnameInfoEEC2ES3_:
<        24: 1033:      move_iterator(iterator_type __i)
<        24: 1034:      : _M_current(__i) { }
< ------------------
< _ZNSt13move_iteratorIPPN7OpenDDS4DCPS13TransportImplEEC2ES4_:
<       110: 1033:      move_iterator(iterator_type __i)
<       110: 1034:      : _M_current(__i) { }
< ------------------
< _ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ES6_:
<     #####: 1033:      move_iterator(iterator_type __i)
<     #####: 1034:      : _M_current(__i) { }
< ------------------
< _ZNSt13move_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEEEC2ES8_:
<        28: 1033:      move_iterator(iterator_type __i)
<        28: 1034:      : _M_current(__i) { }
< ------------------
<         -: 1035:
<         -: 1036:      template<typename _Iter>
<         -: 1037:	_GLIBCXX17_CONSTEXPR
<         -: 1038:	move_iterator(const move_iterator<_Iter>& __i)
<         -: 1039:	: _M_current(__i.base()) { }
<         -: 1040:
<         -: 1041:      _GLIBCXX17_CONSTEXPR iterator_type
<      172*: 1042:      base() const
<      172*: 1043:      { return _M_current; }
< ------------------
< _ZNKSt13move_iteratorIPN7OpenDDS4DCPS12HostnameInfoEE4baseEv:
<        30: 1042:      base() const
<        30: 1043:      { return _M_current; }
< ------------------
< _ZNKSt13move_iteratorIPPN7OpenDDS4DCPS13TransportImplEE4baseEv:
<       110: 1042:      base() const
<       110: 1043:      { return _M_current; }
< ------------------
< _ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv:
<     #####: 1042:      base() const
<     #####: 1043:      { return _M_current; }
< ------------------
< _ZNKSt13move_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEEE4baseEv:
<        32: 1042:      base() const
<        32: 1043:      { return _M_current; }
< ------------------
<         -: 1044:
<         -: 1045:      _GLIBCXX17_CONSTEXPR reference
<        5*: 1046:      operator*() const
<        5*: 1047:      { return static_cast<reference>(*_M_current); }
< ------------------
< _ZNKSt13move_iteratorIPN7OpenDDS4DCPS12HostnameInfoEEdeEv:
<         3: 1046:      operator*() const
<         3: 1047:      { return static_cast<reference>(*_M_current); }
< ------------------
< _ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv:
<     #####: 1046:      operator*() const
<     #####: 1047:      { return static_cast<reference>(*_M_current); }
< ------------------
< _ZNKSt13move_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEEEdeEv:
<         2: 1046:      operator*() const
<         2: 1047:      { return static_cast<reference>(*_M_current); }
< ------------------
<         -: 1048:
<         -: 1049:      _GLIBCXX17_CONSTEXPR pointer
<         -: 1050:      operator->() const
<         -: 1051:      { return _M_current; }
<         -: 1052:
<         -: 1053:      _GLIBCXX17_CONSTEXPR move_iterator&
<        5*: 1054:      operator++()
<         -: 1055:      {
<        5*: 1056:	++_M_current;
<        5*: 1057:	return *this;
<         -: 1058:      }
< ------------------
< _ZNSt13move_iteratorIPN7OpenDDS4DCPS12HostnameInfoEEppEv:
<         3: 1054:      operator++()
<         -: 1055:      {
<         3: 1056:	++_M_current;
<         3: 1057:	return *this;
<         -: 1058:      }
< ------------------
< _ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv:
<     #####: 1054:      operator++()
<         -: 1055:      {
<     #####: 1056:	++_M_current;
<     #####: 1057:	return *this;
<         -: 1058:      }
< ------------------
< _ZNSt13move_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEEEppEv:
<         2: 1054:      operator++()
<         -: 1055:      {
<         2: 1056:	++_M_current;
<         2: 1057:	return *this;
<         -: 1058:      }
< ------------------
<         -: 1059:
<         -: 1060:      _GLIBCXX17_CONSTEXPR move_iterator
<         -: 1061:      operator++(int)
<         -: 1062:      {
<         -: 1063:	move_iterator __tmp = *this;
<         -: 1064:	++_M_current;
<         -: 1065:	return __tmp;
<         -: 1066:      }
<         -: 1067:
<         -: 1068:      _GLIBCXX17_CONSTEXPR move_iterator&
<         -: 1069:      operator--()
<         -: 1070:      {
<         -: 1071:	--_M_current;
<         -: 1072:	return *this;
<         -: 1073:      }
<         -: 1074:
<         -: 1075:      _GLIBCXX17_CONSTEXPR move_iterator
<         -: 1076:      operator--(int)
<         -: 1077:      {
<         -: 1078:	move_iterator __tmp = *this;
<         -: 1079:	--_M_current;
<         -: 1080:	return __tmp;
<         -: 1081:      }
<         -: 1082:
<         -: 1083:      _GLIBCXX17_CONSTEXPR move_iterator
<         -: 1084:      operator+(difference_type __n) const
<         -: 1085:      { return move_iterator(_M_current + __n); }
<         -: 1086:
<         -: 1087:      _GLIBCXX17_CONSTEXPR move_iterator&
<         -: 1088:      operator+=(difference_type __n)
<         -: 1089:      {
<         -: 1090:	_M_current += __n;
<         -: 1091:	return *this;
<         -: 1092:      }
<         -: 1093:
<         -: 1094:      _GLIBCXX17_CONSTEXPR move_iterator
<         -: 1095:      operator-(difference_type __n) const
<         -: 1096:      { return move_iterator(_M_current - __n); }
<         -: 1097:    
<         -: 1098:      _GLIBCXX17_CONSTEXPR move_iterator&
<         -: 1099:      operator-=(difference_type __n)
<         -: 1100:      { 
<         -: 1101:	_M_current -= __n;
<         -: 1102:	return *this;
<         -: 1103:      }
<         -: 1104:
<         -: 1105:      _GLIBCXX17_CONSTEXPR reference
<         -: 1106:      operator[](difference_type __n) const
<         -: 1107:      { return std::move(_M_current[__n]); }
<         -: 1108:    };
<         -: 1109:
<         -: 1110:  // Note: See __normal_iterator operators note from Gaby to understand
<         -: 1111:  // why there are always 2 versions for most of the move_iterator
<         -: 1112:  // operators.
<         -: 1113:  template<typename _IteratorL, typename _IteratorR>
<         -: 1114:    inline _GLIBCXX17_CONSTEXPR bool
<         -: 1115:    operator==(const move_iterator<_IteratorL>& __x,
<         -: 1116:	       const move_iterator<_IteratorR>& __y)
<         -: 1117:    { return __x.base() == __y.base(); }
<         -: 1118:
<         -: 1119:  template<typename _Iterator>
---
>         -:  999:   * @addtogroup iterators
>         -: 1000:   * @{
>         -: 1001:   */
>         -: 1002:
>         -: 1003:  // 24.4.3  Move iterators
>         -: 1004:  /**
>         -: 1005:   *  Class template move_iterator is an iterator adapter with the same
>         -: 1006:   *  behavior as the underlying iterator except that its dereference
>         -: 1007:   *  operator implicitly converts the value returned by the underlying
>         -: 1008:   *  iterator's dereference operator to an rvalue reference.  Some
>         -: 1009:   *  generic algorithms can be called with move iterators to replace
>         -: 1010:   *  copying with moving.
>         -: 1011:   */
>         -: 1012:  template<typename _Iterator>
>         -: 1013:    class move_iterator
>         -: 1014:    {
>         -: 1015:    protected:
>         -: 1016:      _Iterator _M_current;
>         -: 1017:
>         -: 1018:      typedef iterator_traits<_Iterator>		__traits_type;
>         -: 1019:      typedef typename __traits_type::reference		__base_ref;
>         -: 1020:
>         -: 1021:    public:
>         -: 1022:      typedef _Iterator					iterator_type;
>         -: 1023:      typedef typename __traits_type::iterator_category iterator_category;
>         -: 1024:      typedef typename __traits_type::value_type  	value_type;
>         -: 1025:      typedef typename __traits_type::difference_type	difference_type;
>         -: 1026:      // NB: DR 680.
>         -: 1027:      typedef _Iterator					pointer;
>         -: 1028:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
>         -: 1029:      // 2106. move_iterator wrapping iterators returning prvalues
>         -: 1030:      typedef typename conditional<is_reference<__base_ref>::value,
>         -: 1031:			 typename remove_reference<__base_ref>::type&&,
>         -: 1032:			 __base_ref>::type		reference;
>         -: 1033:
>         -: 1034:      _GLIBCXX17_CONSTEXPR
>         -: 1035:      move_iterator()
>         -: 1036:      : _M_current() { }
>         -: 1037:
>         -: 1038:      explicit _GLIBCXX17_CONSTEXPR
>     #####: 1039:      move_iterator(iterator_type __i)
>     #####: 1040:      : _M_current(__i) { }
>         -: 1041:
>         -: 1042:      template<typename _Iter>
>         -: 1043:	_GLIBCXX17_CONSTEXPR
>         -: 1044:	move_iterator(const move_iterator<_Iter>& __i)
>         -: 1045:	: _M_current(__i.base()) { }
>         -: 1046:
>         -: 1047:      _GLIBCXX17_CONSTEXPR iterator_type
>     #####: 1048:      base() const
>     #####: 1049:      { return _M_current; }
>         -: 1050:
>         -: 1051:      _GLIBCXX17_CONSTEXPR reference
>     #####: 1052:      operator*() const
>     #####: 1053:      { return static_cast<reference>(*_M_current); }
>         -: 1054:
>         -: 1055:      _GLIBCXX17_CONSTEXPR pointer
>         -: 1056:      operator->() const
>         -: 1057:      { return _M_current; }
>         -: 1058:
>         -: 1059:      _GLIBCXX17_CONSTEXPR move_iterator&
>     #####: 1060:      operator++()
>         -: 1061:      {
>     #####: 1062:	++_M_current;
>     #####: 1063:	return *this;
>         -: 1064:      }
>         -: 1065:
>         -: 1066:      _GLIBCXX17_CONSTEXPR move_iterator
>         -: 1067:      operator++(int)
>         -: 1068:      {
>         -: 1069:	move_iterator __tmp = *this;
>         -: 1070:	++_M_current;
>         -: 1071:	return __tmp;
>         -: 1072:      }
>         -: 1073:
>         -: 1074:      _GLIBCXX17_CONSTEXPR move_iterator&
>         -: 1075:      operator--()
>         -: 1076:      {
>         -: 1077:	--_M_current;
>         -: 1078:	return *this;
>         -: 1079:      }
>         -: 1080:
>         -: 1081:      _GLIBCXX17_CONSTEXPR move_iterator
>         -: 1082:      operator--(int)
>         -: 1083:      {
>         -: 1084:	move_iterator __tmp = *this;
>         -: 1085:	--_M_current;
>         -: 1086:	return __tmp;
>         -: 1087:      }
>         -: 1088:
>         -: 1089:      _GLIBCXX17_CONSTEXPR move_iterator
>         -: 1090:      operator+(difference_type __n) const
>         -: 1091:      { return move_iterator(_M_current + __n); }
>         -: 1092:
>         -: 1093:      _GLIBCXX17_CONSTEXPR move_iterator&
>         -: 1094:      operator+=(difference_type __n)
>         -: 1095:      {
>         -: 1096:	_M_current += __n;
>         -: 1097:	return *this;
>         -: 1098:      }
>         -: 1099:
>         -: 1100:      _GLIBCXX17_CONSTEXPR move_iterator
>         -: 1101:      operator-(difference_type __n) const
>         -: 1102:      { return move_iterator(_M_current - __n); }
>         -: 1103:    
>         -: 1104:      _GLIBCXX17_CONSTEXPR move_iterator&
>         -: 1105:      operator-=(difference_type __n)
>         -: 1106:      { 
>         -: 1107:	_M_current -= __n;
>         -: 1108:	return *this;
>         -: 1109:      }
>         -: 1110:
>         -: 1111:      _GLIBCXX17_CONSTEXPR reference
>         -: 1112:      operator[](difference_type __n) const
>         -: 1113:      { return std::move(_M_current[__n]); }
>         -: 1114:    };
>         -: 1115:
>         -: 1116:  // Note: See __normal_iterator operators note from Gaby to understand
>         -: 1117:  // why there are always 2 versions for most of the move_iterator
>         -: 1118:  // operators.
>         -: 1119:  template<typename _IteratorL, typename _IteratorR>
1735,1753c1123,1125
<       31*: 1121:    operator==(const move_iterator<_Iterator>& __x,
<         -: 1122:	       const move_iterator<_Iterator>& __y)
<       31*: 1123:    { return __x.base() == __y.base(); }
< ------------------
< _ZSteqIPN7OpenDDS4DCPS12HostnameInfoEEbRKSt13move_iteratorIT_ES8_:
<        15: 1121:    operator==(const move_iterator<_Iterator>& __x,
<         -: 1122:	       const move_iterator<_Iterator>& __y)
<        15: 1123:    { return __x.base() == __y.base(); }
< ------------------
< _ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_:
<     #####: 1121:    operator==(const move_iterator<_Iterator>& __x,
<         -: 1122:	       const move_iterator<_Iterator>& __y)
<     #####: 1123:    { return __x.base() == __y.base(); }
< ------------------
< _ZSteqIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEEEbRKSt13move_iteratorIT_ESD_:
<        16: 1121:    operator==(const move_iterator<_Iterator>& __x,
<         -: 1122:	       const move_iterator<_Iterator>& __y)
<        16: 1123:    { return __x.base() == __y.base(); }
< ------------------
---
>         -: 1121:    operator==(const move_iterator<_IteratorL>& __x,
>         -: 1122:	       const move_iterator<_IteratorR>& __y)
>         -: 1123:    { return __x.base() == __y.base(); }
1755c1127
<         -: 1125:  template<typename _IteratorL, typename _IteratorR>
---
>         -: 1125:  template<typename _Iterator>
1757,1759c1129,1131
<         -: 1127:    operator!=(const move_iterator<_IteratorL>& __x,
<         -: 1128:	       const move_iterator<_IteratorR>& __y)
<         -: 1129:    { return !(__x == __y); }
---
>     #####: 1127:    operator==(const move_iterator<_Iterator>& __x,
>         -: 1128:	       const move_iterator<_Iterator>& __y)
>     #####: 1129:    { return __x.base() == __y.base(); }
1761c1133
<         -: 1131:  template<typename _Iterator>
---
>         -: 1131:  template<typename _IteratorL, typename _IteratorR>
1763,1781c1135,1137
<       31*: 1133:    operator!=(const move_iterator<_Iterator>& __x,
<         -: 1134:	       const move_iterator<_Iterator>& __y)
<       31*: 1135:    { return !(__x == __y); }
< ------------------
< _ZStneIPN7OpenDDS4DCPS12HostnameInfoEEbRKSt13move_iteratorIT_ES8_:
<        15: 1133:    operator!=(const move_iterator<_Iterator>& __x,
<         -: 1134:	       const move_iterator<_Iterator>& __y)
<        15: 1135:    { return !(__x == __y); }
< ------------------
< _ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_:
<     #####: 1133:    operator!=(const move_iterator<_Iterator>& __x,
<         -: 1134:	       const move_iterator<_Iterator>& __y)
<     #####: 1135:    { return !(__x == __y); }
< ------------------
< _ZStneIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEEEbRKSt13move_iteratorIT_ESD_:
<        16: 1133:    operator!=(const move_iterator<_Iterator>& __x,
<         -: 1134:	       const move_iterator<_Iterator>& __y)
<        16: 1135:    { return !(__x == __y); }
< ------------------
---
>         -: 1133:    operator!=(const move_iterator<_IteratorL>& __x,
>         -: 1134:	       const move_iterator<_IteratorR>& __y)
>         -: 1135:    { return !(__x == __y); }
1783c1139
<         -: 1137:  template<typename _IteratorL, typename _IteratorR>
---
>         -: 1137:  template<typename _Iterator>
1785,1787c1141,1143
<         -: 1139:    operator<(const move_iterator<_IteratorL>& __x,
<         -: 1140:	      const move_iterator<_IteratorR>& __y)
<         -: 1141:    { return __x.base() < __y.base(); }
---
>     #####: 1139:    operator!=(const move_iterator<_Iterator>& __x,
>         -: 1140:	       const move_iterator<_Iterator>& __y)
>     #####: 1141:    { return !(__x == __y); }
1789c1145
<         -: 1143:  template<typename _Iterator>
---
>         -: 1143:  template<typename _IteratorL, typename _IteratorR>
1791,1792c1147,1148
<         -: 1145:    operator<(const move_iterator<_Iterator>& __x,
<         -: 1146:	      const move_iterator<_Iterator>& __y)
---
>         -: 1145:    operator<(const move_iterator<_IteratorL>& __x,
>         -: 1146:	      const move_iterator<_IteratorR>& __y)
1795c1151
<         -: 1149:  template<typename _IteratorL, typename _IteratorR>
---
>         -: 1149:  template<typename _Iterator>
1797,1799c1153,1155
<         -: 1151:    operator<=(const move_iterator<_IteratorL>& __x,
<         -: 1152:	       const move_iterator<_IteratorR>& __y)
<         -: 1153:    { return !(__y < __x); }
---
>         -: 1151:    operator<(const move_iterator<_Iterator>& __x,
>         -: 1152:	      const move_iterator<_Iterator>& __y)
>         -: 1153:    { return __x.base() < __y.base(); }
1801c1157
<         -: 1155:  template<typename _Iterator>
---
>         -: 1155:  template<typename _IteratorL, typename _IteratorR>
1803,1804c1159,1160
<         -: 1157:    operator<=(const move_iterator<_Iterator>& __x,
<         -: 1158:	       const move_iterator<_Iterator>& __y)
---
>         -: 1157:    operator<=(const move_iterator<_IteratorL>& __x,
>         -: 1158:	       const move_iterator<_IteratorR>& __y)
1807c1163
<         -: 1161:  template<typename _IteratorL, typename _IteratorR>
---
>         -: 1161:  template<typename _Iterator>
1809,1811c1165,1167
<         -: 1163:    operator>(const move_iterator<_IteratorL>& __x,
<         -: 1164:	      const move_iterator<_IteratorR>& __y)
<         -: 1165:    { return __y < __x; }
---
>         -: 1163:    operator<=(const move_iterator<_Iterator>& __x,
>         -: 1164:	       const move_iterator<_Iterator>& __y)
>         -: 1165:    { return !(__y < __x); }
1813c1169
<         -: 1167:  template<typename _Iterator>
---
>         -: 1167:  template<typename _IteratorL, typename _IteratorR>
1815,1816c1171,1172
<         -: 1169:    operator>(const move_iterator<_Iterator>& __x,
<         -: 1170:	      const move_iterator<_Iterator>& __y)
---
>         -: 1169:    operator>(const move_iterator<_IteratorL>& __x,
>         -: 1170:	      const move_iterator<_IteratorR>& __y)
1819c1175
<         -: 1173:  template<typename _IteratorL, typename _IteratorR>
---
>         -: 1173:  template<typename _Iterator>
1821,1823c1177,1179
<         -: 1175:    operator>=(const move_iterator<_IteratorL>& __x,
<         -: 1176:	       const move_iterator<_IteratorR>& __y)
<         -: 1177:    { return !(__x < __y); }
---
>         -: 1175:    operator>(const move_iterator<_Iterator>& __x,
>         -: 1176:	      const move_iterator<_Iterator>& __y)
>         -: 1177:    { return __y < __x; }
1825c1181
<         -: 1179:  template<typename _Iterator>
---
>         -: 1179:  template<typename _IteratorL, typename _IteratorR>
1827,1828c1183,1184
<         -: 1181:    operator>=(const move_iterator<_Iterator>& __x,
<         -: 1182:	       const move_iterator<_Iterator>& __y)
---
>         -: 1181:    operator>=(const move_iterator<_IteratorL>& __x,
>         -: 1182:	       const move_iterator<_IteratorR>& __y)
1831,1843c1187,1199
<         -: 1185:  // DR 685.
<         -: 1186:  template<typename _IteratorL, typename _IteratorR>
<         -: 1187:    inline _GLIBCXX17_CONSTEXPR auto
<         -: 1188:    operator-(const move_iterator<_IteratorL>& __x,
<         -: 1189:	      const move_iterator<_IteratorR>& __y)
<         -: 1190:    -> decltype(__x.base() - __y.base())
<         -: 1191:    { return __x.base() - __y.base(); }
<         -: 1192:
<         -: 1193:  template<typename _Iterator>
<         -: 1194:    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
<         -: 1195:    operator+(typename move_iterator<_Iterator>::difference_type __n,
<         -: 1196:	      const move_iterator<_Iterator>& __x)
<         -: 1197:    { return __x + __n; }
---
>         -: 1185:  template<typename _Iterator>
>         -: 1186:    inline _GLIBCXX17_CONSTEXPR bool
>         -: 1187:    operator>=(const move_iterator<_Iterator>& __x,
>         -: 1188:	       const move_iterator<_Iterator>& __y)
>         -: 1189:    { return !(__x < __y); }
>         -: 1190:
>         -: 1191:  // DR 685.
>         -: 1192:  template<typename _IteratorL, typename _IteratorR>
>         -: 1193:    inline _GLIBCXX17_CONSTEXPR auto
>         -: 1194:    operator-(const move_iterator<_IteratorL>& __x,
>         -: 1195:	      const move_iterator<_IteratorR>& __y)
>         -: 1196:    -> decltype(__x.base() - __y.base())
>         -: 1197:    { return __x.base() - __y.base(); }
1847,1914c1203,1229
<         -: 1201:    make_move_iterator(_Iterator __i)
<         -: 1202:    { return move_iterator<_Iterator>(__i); }
<         -: 1203:
<         -: 1204:  template<typename _Iterator, typename _ReturnType
<         -: 1205:    = typename conditional<__move_if_noexcept_cond
<         -: 1206:      <typename iterator_traits<_Iterator>::value_type>::value,
<         -: 1207:                _Iterator, move_iterator<_Iterator>>::type>
<         -: 1208:    inline _GLIBCXX17_CONSTEXPR _ReturnType
<         -: 1209:    __make_move_if_noexcept_iterator(_Iterator __i)
<         -: 1210:    { return _ReturnType(__i); }
<         -: 1211:
<         -: 1212:  // Overload for pointers that matches std::move_if_noexcept more closely,
<         -: 1213:  // returning a constant iterator when we don't want to move.
<         -: 1214:  template<typename _Tp, typename _ReturnType
<         -: 1215:    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
<         -: 1216:			   const _Tp*, move_iterator<_Tp*>>::type>
<         -: 1217:    inline _GLIBCXX17_CONSTEXPR _ReturnType
<      694*: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<      694*: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorISt4pairIN7OpenDDS4DCPS12WeakRcHandleINS2_15TransportClientEEENS2_6GUID_tEEPKS7_ET0_PT_:
<         8: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<         8: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorI13ACE_INET_AddrPKS0_ET0_PT_:
<     #####: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<     #####: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorIN7OpenDDS4DCPS12HostnameInfoESt13move_iteratorIPS2_EET0_PT_:
<        24: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<        24: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorIN7OpenDDS4DCPS12WeakRcHandleINS1_24TransportReceiveListenerEEEPKS4_ET0_PT_:
<       168: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<       168: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorIPN7OpenDDS4DCPS13TransportImplESt13move_iteratorIPS3_EET0_PT_:
<       110: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<       110: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorIN7OpenDDS4DCPS8RcHandleINS1_13TransportInstEEEPKS4_ET0_PT_:
<     #####: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<     #####: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorIN7OpenDDS4DCPS8RcHandleINS1_13TransportInstEEEPKS4_ET0_PT_:
<       356: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<       356: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorISt4pairIN7OpenDDS4DCPS8RcHandleINS2_15TransportConfigEEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEPKSF_ET0_PT_:
<     #####: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<     #####: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_:
<     #####: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<     #####: 1219:    { return _ReturnType(__i); }
< ------------------
< _ZSt32__make_move_if_noexcept_iteratorISt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEESt13move_iteratorIPS7_EET0_PT_:
<        28: 1218:    __make_move_if_noexcept_iterator(_Tp* __i)
<        28: 1219:    { return _ReturnType(__i); }
< ------------------
<         -: 1220:
<         -: 1221:  // @} group iterators
<         -: 1222:
<         -: 1223:  template<typename _Iterator>
<         -: 1224:    auto
<         -: 1225:    __niter_base(move_iterator<_Iterator> __it)
<         -: 1226:    -> decltype(make_move_iterator(__niter_base(__it.base())))
<         -: 1227:    { return make_move_iterator(__niter_base(__it.base())); }
---
>         -: 1201:    operator+(typename move_iterator<_Iterator>::difference_type __n,
>         -: 1202:	      const move_iterator<_Iterator>& __x)
>         -: 1203:    { return __x + __n; }
>         -: 1204:
>         -: 1205:  template<typename _Iterator>
>         -: 1206:    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
>         -: 1207:    make_move_iterator(_Iterator __i)
>         -: 1208:    { return move_iterator<_Iterator>(__i); }
>         -: 1209:
>         -: 1210:  template<typename _Iterator, typename _ReturnType
>         -: 1211:    = typename conditional<__move_if_noexcept_cond
>         -: 1212:      <typename iterator_traits<_Iterator>::value_type>::value,
>         -: 1213:                _Iterator, move_iterator<_Iterator>>::type>
>         -: 1214:    inline _GLIBCXX17_CONSTEXPR _ReturnType
>         -: 1215:    __make_move_if_noexcept_iterator(_Iterator __i)
>         -: 1216:    { return _ReturnType(__i); }
>         -: 1217:
>         -: 1218:  // Overload for pointers that matches std::move_if_noexcept more closely,
>         -: 1219:  // returning a constant iterator when we don't want to move.
>         -: 1220:  template<typename _Tp, typename _ReturnType
>         -: 1221:    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
>         -: 1222:			   const _Tp*, move_iterator<_Tp*>>::type>
>         -: 1223:    inline _GLIBCXX17_CONSTEXPR _ReturnType
>     #####: 1224:    __make_move_if_noexcept_iterator(_Tp* __i)
>     #####: 1225:    { return _ReturnType(__i); }
>         -: 1226:
>         -: 1227:  // @} group iterators
1917,1927c1232,1242
<         -: 1230:    struct __is_move_iterator<move_iterator<_Iterator> >
<         -: 1231:    {
<         -: 1232:      enum { __value = 1 };
<         -: 1233:      typedef __true_type __type;
<         -: 1234:    };
<         -: 1235:
<         -: 1236:  template<typename _Iterator>
<         -: 1237:    auto
<       110: 1238:    __miter_base(move_iterator<_Iterator> __it)
<         -: 1239:    -> decltype(__miter_base(__it.base()))
<       110: 1240:    { return __miter_base(__it.base()); }
---
>         -: 1230:    auto
>         -: 1231:    __niter_base(move_iterator<_Iterator> __it)
>         -: 1232:    -> decltype(make_move_iterator(__niter_base(__it.base())))
>         -: 1233:    { return make_move_iterator(__niter_base(__it.base())); }
>         -: 1234:
>         -: 1235:  template<typename _Iterator>
>         -: 1236:    struct __is_move_iterator<move_iterator<_Iterator> >
>         -: 1237:    {
>         -: 1238:      enum { __value = 1 };
>         -: 1239:      typedef __true_type __type;
>         -: 1240:    };
1929,1965c1244,1265
<         -: 1242:#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)
<         -: 1243:#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) \
<         -: 1244:  std::__make_move_if_noexcept_iterator(_Iter)
<         -: 1245:#else
<         -: 1246:#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) (_Iter)
<         -: 1247:#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)
<         -: 1248:#endif // C++11
<         -: 1249:
<         -: 1250:#if __cpp_deduction_guides >= 201606
<         -: 1251:  // These helper traits are used for deduction guides
<         -: 1252:  // of associative containers.
<         -: 1253:  template<typename _InputIterator>
<         -: 1254:    using __iter_key_t = remove_const_t<
<         -: 1255:    typename iterator_traits<_InputIterator>::value_type::first_type>;
<         -: 1256:
<         -: 1257:  template<typename _InputIterator>
<         -: 1258:    using __iter_val_t =
<         -: 1259:    typename iterator_traits<_InputIterator>::value_type::second_type;
<         -: 1260:
<         -: 1261:  template<typename _T1, typename _T2>
<         -: 1262:    struct pair;
<         -: 1263:
<         -: 1264:  template<typename _InputIterator>
<         -: 1265:    using __iter_to_alloc_t =
<         -: 1266:    pair<add_const_t<__iter_key_t<_InputIterator>>,
<         -: 1267:	 __iter_val_t<_InputIterator>>;
<         -: 1268:
<         -: 1269:#endif
<         -: 1270:
<         -: 1271:_GLIBCXX_END_NAMESPACE_VERSION
<         -: 1272:} // namespace
<         -: 1273:
<         -: 1274:#ifdef _GLIBCXX_DEBUG
<         -: 1275:# include <debug/stl_iterator.h>
<         -: 1276:#endif
<         -: 1277:
<         -: 1278:#endif
---
>         -: 1242:  template<typename _Iterator>
>         -: 1243:    auto
>         -: 1244:    __miter_base(move_iterator<_Iterator> __it)
>         -: 1245:    -> decltype(__miter_base(__it.base()))
>         -: 1246:    { return __miter_base(__it.base()); }
>         -: 1247:
>         -: 1248:_GLIBCXX_END_NAMESPACE_VERSION
>         -: 1249:} // namespace
>         -: 1250:
>         -: 1251:#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)
>         -: 1252:#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) \
>         -: 1253:  std::__make_move_if_noexcept_iterator(_Iter)
>         -: 1254:#else
>         -: 1255:#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) (_Iter)
>         -: 1256:#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)
>         -: 1257:#endif // C++11
>         -: 1258:
>         -: 1259:#ifdef _GLIBCXX_DEBUG
>         -: 1260:# include <debug/stl_iterator.h>
>         -: 1261:#endif
>         -: 1262:
>         -: 1263:#endif
