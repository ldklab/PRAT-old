27c27
<         4:   25:ACE_Unbounded_Queue<T>::ACE_Unbounded_Queue (ACE_Allocator *alloc)
---
>         5:   25:ACE_Unbounded_Queue<T>::ACE_Unbounded_Queue (ACE_Allocator *alloc)
30c30
<         4:   28:    allocator_ (alloc)
---
>         5:   28:    allocator_ (alloc)
34,35c34,35
<         4:   32:  if (this->allocator_ == 0)
<         4:   33:    this->allocator_ = ACE_Allocator::instance ();
---
>         5:   32:  if (this->allocator_ == 0)
>         5:   33:    this->allocator_ = ACE_Allocator::instance ();
37c37
<         4:   35:  ACE_NEW_MALLOC (this->head_,
---
>         5:   35:  ACE_NEW_MALLOC (this->head_,
41c41
<         4:   39:  this->head_->next_ = this->head_;
---
>         5:   39:  this->head_->next_ = this->head_;
125c125
<         4:  123:ACE_Unbounded_Queue<T>::delete_nodes (void)
---
>         5:  123:ACE_Unbounded_Queue<T>::delete_nodes (void)
127c127
<         4:  125:  for (ACE_Node<T> *curr = this->head_->next_;
---
>         5:  125:  for (ACE_Node<T> *curr = this->head_->next_;
129c129
<         4:  127:       curr != this->head_;
---
>         5:  127:       curr != this->head_;
146,147c146,147
<         4:  144:  this->head_->next_ = this->head_;
<         4:  145:}
---
>         5:  144:  this->head_->next_ = this->head_;
>         5:  145:}
150c150
<         4:  148:ACE_Unbounded_Queue<T>::~ACE_Unbounded_Queue (void)
---
>         5:  148:ACE_Unbounded_Queue<T>::~ACE_Unbounded_Queue (void)
154,155c154,155
<         4:  152:  this->delete_nodes ();
<         4:  153:  ACE_DES_FREE_TEMPLATE (head_,
---
>         5:  152:  this->delete_nodes ();
>         5:  153:  ACE_DES_FREE_TEMPLATE (head_,
159c159
<         4:  157:}
---
>         5:  157:}
183c183
<         8:  181:ACE_Unbounded_Queue<T>::enqueue_tail (const T &new_item)
---
>        15:  181:ACE_Unbounded_Queue<T>::enqueue_tail (const T &new_item)
190c190
<         8:  188:  this->head_->item_ = new_item;
---
>        15:  188:  this->head_->item_ = new_item;
192c192
<         8:  190:  ACE_Node<T> *temp = 0;
---
>        15:  190:  ACE_Node<T> *temp = 0;
195c195
<         8:  193:  ACE_NEW_MALLOC_RETURN (temp,
---
>        15:  193:  ACE_NEW_MALLOC_RETURN (temp,
200c200
<         8:  198:  this->head_->next_ = temp;
---
>        15:  198:  this->head_->next_ = temp;
203c203
<         8:  201:  this->head_ = temp;
---
>        15:  201:  this->head_ = temp;
205,206c205,206
<         8:  203:  ++this->cur_size_;
<         8:  204:  return 0;
---
>        15:  203:  ++this->cur_size_;
>        15:  204:  return 0;
210c210
<         8:  208:ACE_Unbounded_Queue<T>::dequeue_head (T &item)
---
>        15:  208:ACE_Unbounded_Queue<T>::dequeue_head (T &item)
215c215
<         8:  213:  if (this->is_empty ())
---
>        15:  213:  if (this->is_empty ())
218c218
<         8:  216:  ACE_Node<T> *temp = this->head_->next_;
---
>        15:  216:  ACE_Node<T> *temp = this->head_->next_;
220,222c220,222
<         8:  218:  item = temp->item_;
<         8:  219:  this->head_->next_ = temp->next_;
<         8:  220:  ACE_DES_FREE_TEMPLATE (temp,
---
>        15:  218:  item = temp->item_;
>        15:  219:  this->head_->next_ = temp->next_;
>        15:  220:  ACE_DES_FREE_TEMPLATE (temp,
226,227c226,227
<         8:  224:  --this->cur_size_;
<         8:  225:  return 0;
---
>        15:  224:  --this->cur_size_;
>        15:  225:  return 0;
