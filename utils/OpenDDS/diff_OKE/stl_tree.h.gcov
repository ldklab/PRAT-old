148c148
<         4:  146:      _Rb_tree_key_compare()
---
>         5:  146:      _Rb_tree_key_compare()
152c152
<         4:  150:      { }
---
>         5:  150:      { }
236,237c236,237
<       331:  234:      _M_valptr()
<       331:  235:      { return _M_storage._M_ptr(); }
---
>       375:  234:      _M_valptr()
>       375:  235:      { return _M_storage._M_ptr(); }
240,241c240,241
<       258:  238:      _M_valptr() const
<       258:  239:      { return _M_storage._M_ptr(); }
---
>       319:  238:      _M_valptr() const
>       319:  239:      { return _M_storage._M_ptr(); }
275,276c275,276
<       911:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
<       911:  274:      : _M_node(__x) { }
---
>      1109:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
>      1109:  274:      : _M_node(__x) { }
279,280c279,280
<        52:  277:      operator*() const _GLIBCXX_NOEXCEPT
<        52:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
---
>        57:  277:      operator*() const _GLIBCXX_NOEXCEPT
>        57:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
283,284c283,284
<       128:  281:      operator->() const _GLIBCXX_NOEXCEPT
<       128:  282:      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
---
>       137:  281:      operator->() const _GLIBCXX_NOEXCEPT
>       137:  282:      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
287c287
<        62:  285:      operator++() _GLIBCXX_NOEXCEPT
---
>        64:  285:      operator++() _GLIBCXX_NOEXCEPT
289,290c289,290
<        62:  287:	_M_node = _Rb_tree_increment(_M_node);
<        62:  288:	return *this;
---
>        64:  287:	_M_node = _Rb_tree_increment(_M_node);
>        64:  288:	return *this;
317,318c317,318
<       222:  315:      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
<       222:  316:      { return _M_node == __x._M_node; }
---
>       253:  315:      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
>       253:  316:      { return _M_node == __x._M_node; }
321,322c321,322
<       180:  319:      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
<       180:  320:      { return _M_node != __x._M_node; }
---
>       233:  319:      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
>       233:  320:      { return _M_node != __x._M_node; }
347,348c347,348
<       108:  345:      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
<       108:  346:      : _M_node(__x) { }
---
>       132:  345:      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
>       132:  346:      : _M_node(__x) { }
350,351c350,351
<       128:  348:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
<       128:  349:      : _M_node(__it._M_node) { }
---
>       140:  348:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
>       140:  349:      : _M_node(__it._M_node) { }
354,355c354,355
<        36:  352:      _M_const_cast() const _GLIBCXX_NOEXCEPT
<        36:  353:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
---
>        41:  352:      _M_const_cast() const _GLIBCXX_NOEXCEPT
>        41:  353:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
362,363c362,363
<        18:  360:      operator->() const _GLIBCXX_NOEXCEPT
<        18:  361:      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
---
>        22:  360:      operator->() const _GLIBCXX_NOEXCEPT
>        22:  361:      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
373c373
<         1:  371:      operator++(int) _GLIBCXX_NOEXCEPT
---
>         2:  371:      operator++(int) _GLIBCXX_NOEXCEPT
375,377c375,377
<         1:  373:	_Self __tmp = *this;
<         1:  374:	_M_node = _Rb_tree_increment(_M_node);
<         1:  375:	return __tmp;
---
>         2:  373:	_Self __tmp = *this;
>         2:  374:	_M_node = _Rb_tree_increment(_M_node);
>         2:  375:	return __tmp;
396,397c396,397
<        90:  394:      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
<        90:  395:      { return _M_node == __x._M_node; }
---
>       105:  394:      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
>       105:  395:      { return _M_node == __x._M_node; }
400,401c400,401
<        14:  398:      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
<        14:  399:      { return _M_node != __x._M_node; }
---
>        18:  398:      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
>        18:  399:      { return _M_node != __x._M_node; }
464,465c464,465
<         8:  462:	_Reuse_or_alloc_node(_Rb_tree& __t)
<         8:  463:	  : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
---
>        15:  462:	_Reuse_or_alloc_node(_Rb_tree& __t)
>        15:  463:	  : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
467c467
<         8:  465:	  if (_M_root)
---
>        15:  465:	  if (_M_root)
475,476c475,476
<         8:  473:	    _M_nodes = 0;
<         8:  474:	}
---
>        15:  473:	    _M_nodes = 0;
>        15:  474:	}
482,483c482,483
<         8:  480:	~_Reuse_or_alloc_node()
<         8:  481:	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
---
>        15:  480:	~_Reuse_or_alloc_node()
>        15:  481:	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
548,549c548,549
<        25:  546:	_Alloc_node(_Rb_tree& __t)
<        25:  547:	  : _M_t(__t) { }
---
>        26:  546:	_Alloc_node(_Rb_tree& __t)
>        26:  547:	  : _M_t(__t) { }
556c556
<        25:  554:	  operator()(_Arg&& __arg) const
---
>        26:  554:	  operator()(_Arg&& __arg) const
558c558
<        25:  556:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
---
>        26:  556:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
576,577c576,577
<       316:  574:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
<       316:  575:      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
---
>       374:  574:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
>       374:  575:      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
589,590c589,590
<        81:  587:      _M_get_node()
<        81:  588:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
---
>        95:  587:      _M_get_node()
>        95:  588:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
593,594c593,594
<        77:  591:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
<        77:  592:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
---
>        92:  591:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
>        92:  592:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
623c623
<        81:  621:	_M_construct_node(_Link_type __node, _Args&&... __args)
---
>        95:  621:	_M_construct_node(_Link_type __node, _Args&&... __args)
627,628c627,628
<        81:  625:	      ::new(__node) _Rb_tree_node<_Val>;
<        81:  626:	      _Alloc_traits::construct(_M_get_Node_allocator(),
---
>        95:  625:	      ::new(__node) _Rb_tree_node<_Val>;
>        95:  626:	      _Alloc_traits::construct(_M_get_Node_allocator(),
638c638
<        81:  636:	}
---
>        95:  636:	}
642c642
<        81:  640:        _M_create_node(_Args&&... __args)
---
>        95:  640:        _M_create_node(_Args&&... __args)
644,646c644,646
<        81:  642:	  _Link_type __tmp = _M_get_node();
<        81:  643:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
<        81:  644:	  return __tmp;
---
>        95:  642:	  _Link_type __tmp = _M_get_node();
>        95:  643:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
>        95:  644:	  return __tmp;
650c650
<        77:  648:      _M_destroy_node(_Link_type __p) noexcept
---
>        92:  648:      _M_destroy_node(_Link_type __p) noexcept
652c652
<        77:  650:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
---
>        92:  650:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
654c654
<        77:  652:      }
---
>        92:  652:      }
658c658
<        77:  656:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
---
>        92:  656:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
660,662c660,662
<        77:  658:	_M_destroy_node(__p);
<        77:  659:	_M_put_node(__p);
<        77:  660:      }
---
>        92:  658:	_M_destroy_node(__p);
>        92:  659:	_M_put_node(__p);
>        92:  660:      }
679c679
<       164:  677:        struct _Rb_tree_impl
---
>       253:  677:        struct _Rb_tree_impl
690c690
<       168:  688:	  _Rb_tree_impl() = default;
---
>       253:  688:	  _Rb_tree_impl() = default;
714,715c714,715
<         8:  712:      _M_root() _GLIBCXX_NOEXCEPT
<         8:  713:      { return this->_M_impl._M_header._M_parent; }
---
>        15:  712:      _M_root() _GLIBCXX_NOEXCEPT
>        15:  713:      { return this->_M_impl._M_header._M_parent; }
718,719c718,719
<         8:  716:      _M_root() const _GLIBCXX_NOEXCEPT
<         8:  717:      { return this->_M_impl._M_header._M_parent; }
---
>        15:  716:      _M_root() const _GLIBCXX_NOEXCEPT
>        15:  717:      { return this->_M_impl._M_header._M_parent; }
730,731c730,731
<        24:  728:      _M_rightmost() _GLIBCXX_NOEXCEPT
<        24:  729:      { return this->_M_impl._M_header._M_right; }
---
>        35:  728:      _M_rightmost() _GLIBCXX_NOEXCEPT
>        35:  729:      { return this->_M_impl._M_header._M_right; }
738,739c738,739
<       457:  736:      _M_begin() _GLIBCXX_NOEXCEPT
<       457:  737:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
---
>       620:  736:      _M_begin() _GLIBCXX_NOEXCEPT
>       620:  737:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
742c742
<        31:  740:      _M_begin() const _GLIBCXX_NOEXCEPT
---
>        38:  740:      _M_begin() const _GLIBCXX_NOEXCEPT
745c745
<        31:  743:	  (this->_M_impl._M_header._M_parent);
---
>        38:  743:	  (this->_M_impl._M_header._M_parent);
749,750c749,750
<       316:  747:      _M_end() _GLIBCXX_NOEXCEPT
<       316:  748:      { return &this->_M_impl._M_header; }
---
>       363:  747:      _M_end() _GLIBCXX_NOEXCEPT
>       363:  748:      { return &this->_M_impl._M_header; }
753,754c753,754
<        31:  751:      _M_end() const _GLIBCXX_NOEXCEPT
<        31:  752:      { return &this->_M_impl._M_header; }
---
>        38:  751:      _M_end() const _GLIBCXX_NOEXCEPT
>        38:  752:      { return &this->_M_impl._M_header; }
757,758c757,758
<       173:  755:      _S_value(_Const_Link_type __x)
<       173:  756:      { return *__x->_M_valptr(); }
---
>       214:  755:      _S_value(_Const_Link_type __x)
>       214:  756:      { return *__x->_M_valptr(); }
761,762c761,762
<       173:  759:      _S_key(_Const_Link_type __x)
<       173:  760:      { return _KeyOfValue()(_S_value(__x)); }
---
>       214:  759:      _S_key(_Const_Link_type __x)
>       214:  760:      { return _KeyOfValue()(_S_value(__x)); }
765,766c765,766
<       119:  763:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
<       119:  764:      { return static_cast<_Link_type>(__x->_M_left); }
---
>       135:  763:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
>       135:  764:      { return static_cast<_Link_type>(__x->_M_left); }
769,770c769,770
<        16:  767:      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
<        16:  768:      { return static_cast<_Const_Link_type>(__x->_M_left); }
---
>        20:  767:      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
>        20:  768:      { return static_cast<_Const_Link_type>(__x->_M_left); }
773,774c773,774
<        85:  771:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
<        85:  772:      { return static_cast<_Link_type>(__x->_M_right); }
---
>       112:  771:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
>       112:  772:      { return static_cast<_Link_type>(__x->_M_right); }
777,778c777,778
<        12:  775:      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
<        12:  776:      { return static_cast<_Const_Link_type>(__x->_M_right); }
---
>        15:  775:      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
>        15:  776:      { return static_cast<_Const_Link_type>(__x->_M_right); }
781,782c781,782
<        67:  779:      _S_value(_Const_Base_ptr __x)
<        67:  780:      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
---
>        83:  779:      _S_value(_Const_Base_ptr __x)
>        83:  780:      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
785,786c785,786
<        67:  783:      _S_key(_Const_Base_ptr __x)
<        67:  784:      { return _KeyOfValue()(_S_value(__x)); }
---
>        83:  783:      _S_key(_Const_Base_ptr __x)
>        83:  784:      { return _KeyOfValue()(_S_value(__x)); }
915c915
<       168:  913:      _Rb_tree() = default;
---
>       253:  913:      _Rb_tree() = default;
950,951c950,951
<       164:  948:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
<       164:  949:      { _M_erase(_M_begin()); }
---
>       253:  948:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
>       253:  949:      { _M_erase(_M_begin()); }
962,963c962,963
<       195:  960:      begin() _GLIBCXX_NOEXCEPT
<       195:  961:      { return iterator(this->_M_impl._M_header._M_left); }
---
>       257:  960:      begin() _GLIBCXX_NOEXCEPT
>       257:  961:      { return iterator(this->_M_impl._M_header._M_left); }
970,971c970,971
<       385:  968:      end() _GLIBCXX_NOEXCEPT
<       385:  969:      { return iterator(&this->_M_impl._M_header); }
---
>       472:  968:      end() _GLIBCXX_NOEXCEPT
>       472:  969:      { return iterator(&this->_M_impl._M_header); }
974,975c974,975
<        77:  972:      end() const _GLIBCXX_NOEXCEPT
<        77:  973:      { return const_iterator(&this->_M_impl._M_header); }
---
>        94:  972:      end() const _GLIBCXX_NOEXCEPT
>        94:  973:      { return const_iterator(&this->_M_impl._M_header); }
994,995c994,995
<        60:  992:      empty() const _GLIBCXX_NOEXCEPT
<        60:  993:      { return _M_impl._M_node_count == 0; }
---
>        95:  992:      empty() const _GLIBCXX_NOEXCEPT
>        95:  993:      { return _M_impl._M_node_count == 0; }
998,999c998,999
<        86:  996:      size() const _GLIBCXX_NOEXCEPT 
<        86:  997:      { return _M_impl._M_node_count; }
---
>        95:  996:      size() const _GLIBCXX_NOEXCEPT 
>        95:  997:      { return _M_impl._M_node_count; }
1171c1171
<       108: 1169:      clear() _GLIBCXX_NOEXCEPT
---
>       160: 1169:      clear() _GLIBCXX_NOEXCEPT
1173,1175c1173,1175
<       108: 1171:        _M_erase(_M_begin());
<       108: 1172:	_M_impl._M_reset();
<       108: 1173:      }
---
>       160: 1171:        _M_erase(_M_begin());
>       160: 1172:	_M_impl._M_reset();
>       160: 1173:      }
1188,1189c1188,1189
<        44: 1186:      lower_bound(const key_type& __k)
<        44: 1187:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
---
>        49: 1186:      lower_bound(const key_type& __k)
>        49: 1187:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
1702c1702
<         8: 1700:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        15: 1700:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1705c1705
<         8: 1703:      if (this != &__x)
---
>        15: 1703:      if (this != &__x)
1709c1709
<         8: 1707:	  if (_Alloc_traits::_S_propagate_on_copy_assign())
---
>        15: 1707:	  if (_Alloc_traits::_S_propagate_on_copy_assign())
1724,1725c1724,1725
<        16: 1722:	  _Reuse_or_alloc_node __roan(*this);
<         8: 1723:	  _M_impl._M_reset();
---
>        30: 1722:	  _Reuse_or_alloc_node __roan(*this);
>        15: 1723:	  _M_impl._M_reset();
1727c1727
<         8: 1725:	  if (__x._M_root() != 0)
---
>        15: 1725:	  if (__x._M_root() != 0)
1731c1731
<         8: 1729:      return *this;
---
>        15: 1729:      return *this;
1742c1742
<        25: 1740:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        26: 1740:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1751,1752c1751,1752
<        50: 1749:	bool __insert_left = (__x != 0 || __p == _M_end()
<        51: 1750:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
---
>        52: 1749:	bool __insert_left = (__x != 0 || __p == _M_end()
>        53: 1750:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
1755c1755
<        25: 1753:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
---
>        26: 1753:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
1757c1757
<        25: 1755:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
---
>        26: 1755:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
1759,1760c1759,1760
<        25: 1757:	++_M_impl._M_node_count;
<        25: 1758:	return iterator(__z);
---
>        26: 1757:	++_M_impl._M_node_count;
>        26: 1758:	return iterator(__z);
1852c1852
<       408: 1850:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>       584: 1850:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1856c1856
<       472: 1854:      while (__x != 0)
---
>       662: 1854:      while (__x != 0)
1858,1861c1858,1861
<        64: 1856:	  _M_erase(_S_right(__x));
<        64: 1857:	  _Link_type __y = _S_left(__x);
<        64: 1858:	  _M_drop_node(__x);
<        64: 1859:	  __x = __y;
---
>        78: 1856:	  _M_erase(_S_right(__x));
>        78: 1857:	  _Link_type __y = _S_left(__x);
>        78: 1858:	  _M_drop_node(__x);
>        78: 1859:	  __x = __y;
1863c1863
<       344: 1861:    }
---
>       506: 1861:    }
1869c1869
<       166: 1867:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>       188: 1867:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1873,1874c1873,1874
<       212: 1871:      while (__x != 0)
<        46: 1872:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
---
>       240: 1871:      while (__x != 0)
>        52: 1872:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
1877,1878c1877,1878
<         8: 1875:	  __x = _S_right(__x);
<       120: 1876:      return iterator(__y);
---
>        14: 1875:	  __x = _S_right(__x);
>       136: 1876:      return iterator(__y);
1885c1885
<        59: 1883:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        73: 1883:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1889,1891c1889,1891
<        87: 1887:      while (__x != 0)
<        28: 1888:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
<        16: 1889:	  __y = __x, __x = _S_left(__x);
---
>       108: 1887:      while (__x != 0)
>        35: 1888:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
>        20: 1889:	  __y = __x, __x = _S_left(__x);
1893,1894c1893,1894
<        12: 1891:	  __x = _S_right(__x);
<        31: 1892:      return const_iterator(__y);
---
>        15: 1891:	  __x = _S_right(__x);
>        38: 1892:      return const_iterator(__y);
1901c1901
<        12: 1899:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        14: 1899:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1905c1905
<        12: 1903:      while (__x != 0)
---
>        14: 1903:      while (__x != 0)
1910c1910
<        12: 1908:      return iterator(__y);
---
>        14: 1908:      return iterator(__y);
1935c1935
<        18: 1933:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        20: 1933:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1938,1940c1938,1940
<        18: 1936:      _Link_type __x = _M_begin();
<        18: 1937:      _Base_ptr __y = _M_end();
<        20: 1938:      while (__x != 0)
---
>        20: 1936:      _Link_type __x = _M_begin();
>        20: 1937:      _Base_ptr __y = _M_end();
>        24: 1938:      while (__x != 0)
1942,1944c1942,1944
<        13: 1940:	  if (_M_impl._M_key_compare(_S_key(__x), __k))
<     #####: 1941:	    __x = _S_right(__x);
<        13: 1942:	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
---
>        16: 1940:	  if (_M_impl._M_key_compare(_S_key(__x), __k))
>         1: 1941:	    __x = _S_right(__x);
>        15: 1942:	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
1948,1951c1948,1951
<        12: 1946:	      _Link_type __xu(__x);
<        12: 1947:	      _Base_ptr __yu(__y);
<        12: 1948:	      __y = __x, __x = _S_left(__x);
<        12: 1949:	      __xu = _S_right(__xu);
---
>        14: 1946:	      _Link_type __xu(__x);
>        14: 1947:	      _Base_ptr __yu(__y);
>        14: 1948:	      __y = __x, __x = _S_left(__x);
>        14: 1949:	      __xu = _S_right(__xu);
1953,1954c1953,1954
<        24: 1951:		          iterator>(_M_lower_bound(__x, __y, __k),
<        36: 1952:				    _M_upper_bound(__xu, __yu, __k));
---
>        28: 1951:		          iterator>(_M_lower_bound(__x, __y, __k),
>        42: 1952:				    _M_upper_bound(__xu, __yu, __k));
2030c2030
<        70: 2028:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        82: 2028:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2034,2037c2034,2037
<        70: 2032:      _Link_type __x = _M_begin();
<        70: 2033:      _Base_ptr __y = _M_end();
<        70: 2034:      bool __comp = true;
<        78: 2035:      while (__x != 0)
---
>        82: 2032:      _Link_type __x = _M_begin();
>        82: 2033:      _Base_ptr __y = _M_end();
>        82: 2034:      bool __comp = true;
>        98: 2035:      while (__x != 0)
2039,2041c2039,2041
<         4: 2037:	  __y = __x;
<         4: 2038:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
<         4: 2039:	  __x = __comp ? _S_left(__x) : _S_right(__x);
---
>         8: 2037:	  __y = __x;
>         8: 2038:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
>         8: 2039:	  __x = __comp ? _S_left(__x) : _S_right(__x);
2043,2044c2043,2044
<        70: 2041:      iterator __j = iterator(__y);
<        70: 2042:      if (__comp)
---
>        82: 2041:      iterator __j = iterator(__y);
>        82: 2042:      if (__comp)
2046,2047c2046,2047
<        70: 2044:	  if (__j == begin())
<        70: 2045:	    return _Res(__x, __y);
---
>        78: 2044:	  if (__j == begin())
>        78: 2045:	    return _Res(__x, __y);
2051,2052c2051,2052
<     #####: 2049:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
<     #####: 2050:	return _Res(__x, __y);
---
>         4: 2049:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
>         4: 2050:	return _Res(__x, __y);
2084c2084
<        22: 2082:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        23: 2082:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2092,2093c2092,2093
<        22: 2090:      pair<_Base_ptr, _Base_ptr> __res
<        44: 2091:	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
---
>        23: 2090:      pair<_Base_ptr, _Base_ptr> __res
>        46: 2091:	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
2095c2095
<        22: 2093:      if (__res.second)
---
>        23: 2093:      if (__res.second)
2097,2098c2097,2098
<        22: 2095:	  _Alloc_node __an(*this);
<        44: 2096:	  return _Res(_M_insert_(__res.first, __res.second,
---
>        23: 2095:	  _Alloc_node __an(*this);
>        46: 2096:	  return _Res(_M_insert_(__res.first, __res.second,
2100c2100
<        66: 2098:		      true);
---
>        69: 2098:		      true);
2132c2132
<        36: 2130:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        41: 2130:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2136c2136
<        36: 2134:      iterator __pos = __position._M_const_cast();
---
>        41: 2134:      iterator __pos = __position._M_const_cast();
2140c2140
<        36: 2138:      if (__pos._M_node == _M_end())
---
>        41: 2138:      if (__pos._M_node == _M_end())
2142,2144c2142,2144
<        72: 2140:	  if (size() > 0
<        36: 2141:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
<         8: 2142:	    return _Res(0, _M_rightmost());
---
>        82: 2140:	  if (size() > 0
>        41: 2141:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
>        10: 2142:	    return _Res(0, _M_rightmost());
2146c2146
<        28: 2144:	    return _M_get_insert_unique_pos(__k);
---
>        31: 2144:	    return _M_get_insert_unique_pos(__k);
2299c2299
<        56: 2297:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        69: 2297:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2302,2303c2302,2303
<       112: 2300:      bool __insert_left = (__x != 0 || __p == _M_end()
<        68: 2301:			    || _M_impl._M_key_compare(_S_key(__z),
---
>       138: 2300:      bool __insert_left = (__x != 0 || __p == _M_end()
>        87: 2301:			    || _M_impl._M_key_compare(_S_key(__z),
2306c2306
<        56: 2304:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
---
>        69: 2304:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
2308,2309c2308,2309
<        56: 2306:      ++_M_impl._M_node_count;
<        56: 2307:      return iterator(__z);
---
>        69: 2306:      ++_M_impl._M_node_count;
>        69: 2307:      return iterator(__z);
2350c2350
<        20: 2348:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        28: 2348:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2353c2353
<        20: 2351:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
---
>        28: 2351:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2358,2360c2358,2360
<        20: 2356:	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
<        20: 2357:	    if (__res.second)
<        20: 2358:	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
---
>        28: 2356:	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
>        28: 2357:	    if (__res.second)
>        28: 2358:	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
2397c2397
<        36: 2395:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        41: 2395:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2400c2400
<        36: 2398:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
---
>        41: 2398:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2404c2404
<        36: 2402:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
---
>        41: 2402:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
2406,2407c2406,2407
<        36: 2404:	    if (__res.second)
<        36: 2405:	      return _M_insert_node(__res.first, __res.second, __z);
---
>        41: 2404:	    if (__res.second)
>        41: 2405:	      return _M_insert_node(__res.first, __res.second, __z);
2472c2472
<        13: 2470:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        14: 2470:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2475c2475
<        13: 2473:      _Link_type __y =
---
>        14: 2473:      _Link_type __y =
2477c2477
<        13: 2475:				(const_cast<_Base_ptr>(__position._M_node),
---
>        14: 2475:				(const_cast<_Base_ptr>(__position._M_node),
2479,2481c2479,2481
<        13: 2477:      _M_drop_node(__y);
<        13: 2478:      --_M_impl._M_node_count;
<        13: 2479:    }
---
>        14: 2477:      _M_drop_node(__y);
>        14: 2478:      --_M_impl._M_node_count;
>        14: 2479:    }
2486c2486
<        18: 2484:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        20: 2484:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2489,2490c2489,2490
<        18: 2487:      if (__first == begin() && __last == end())
<        17: 2488:	clear();
---
>        20: 2487:      if (__first == begin() && __last == end())
>        18: 2488:	clear();
2492,2494c2492,2494
<         1: 2490:	while (__first != __last)
<         1: 2491:	  _M_erase_aux(__first++);
<        18: 2492:    }
---
>         2: 2490:	while (__first != __last)
>         2: 2491:	  _M_erase_aux(__first++);
>        20: 2492:    }
2499c2499
<        18: 2497:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        20: 2497:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2502,2505c2502,2505
<        18: 2500:      pair<iterator, iterator> __p = equal_range(__x);
<        18: 2501:      const size_type __old_size = size();
<        18: 2502:      _M_erase_aux(__p.first, __p.second);
<        18: 2503:      return __old_size - size();
---
>        20: 2500:      pair<iterator, iterator> __p = equal_range(__x);
>        20: 2501:      const size_type __old_size = size();
>        20: 2502:      _M_erase_aux(__p.first, __p.second);
>        20: 2503:      return __old_size - size();
2522c2522
<        64: 2520:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        73: 2520:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2525,2526c2525,2526
<        64: 2523:      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
<       128: 2524:      return (__j == end()
---
>        73: 2523:      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
>       146: 2524:      return (__j == end()
2528c2528
<       196: 2526:					_S_key(__j._M_node))) ? end() : __j;
---
>       223: 2526:					_S_key(__j._M_node))) ? end() : __j;
2535c2535
<        31: 2533:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
---
>        38: 2533:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2538,2541c2538,2541
<        31: 2536:      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
<        62: 2537:      return (__j == end()
<        16: 2538:	      || _M_impl._M_key_compare(__k, 
<        77: 2539:					_S_key(__j._M_node))) ? end() : __j;
---
>        38: 2536:      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
>        76: 2537:      return (__j == end()
>        20: 2538:	      || _M_impl._M_key_compare(__k, 
>        94: 2539:					_S_key(__j._M_node))) ? end() : __j;
