1,2c1,2
<         -:    0:Source:/usr/include/c++/8/bits/stl_algobase.h
<         -:    0:Programs:51
---
>         -:    0:Source:/usr/include/c++/7/bits/stl_algobase.h
>         -:    0:Programs:15
5c5
<         -:    3:// Copyright (C) 2001-2018 Free Software Foundation, Inc.
---
>         -:    3:// Copyright (C) 2001-2017 Free Software Foundation, Inc.
72c72
<         -:   70:#include <bits/move.h> // For std::swap
---
>         -:   70:#include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
87,94c87,94
<         -:   85:	static void
<         -:   86:	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
<         -:   87:	{
<         -:   88:	  typedef typename iterator_traits<_ForwardIterator1>::value_type
<         -:   89:	    _ValueType1;
<         -:   90:	  _ValueType1 __tmp = *__a;
<         -:   91:	  *__a = *__b;
<         -:   92:	  *__b = __tmp;
---
>         -:   85:        static void
>         -:   86:        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
>         -:   87:        {
>         -:   88:          typedef typename iterator_traits<_ForwardIterator1>::value_type
>         -:   89:            _ValueType1;
>         -:   90:          _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
>         -:   91:          *__a = _GLIBCXX_MOVE(*__b);
>         -:   92:          *__b = _GLIBCXX_MOVE(__tmp);
102,106c102,106
<         -:  100:	static void
<         -:  101:	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
<         -:  102:	{
<         -:  103:	  swap(*__a, *__b);
<         -:  104:	}
---
>         -:  100:        static void 
>         -:  101:        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
>         -:  102:        {
>         -:  103:          swap(*__a, *__b);
>         -:  104:        }
122c122
<         -:  120:    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
---
>     #####:  120:    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
150c150
<         -:  148:      swap(*__a, *__b);
---
>     #####:  148:      swap(*__a, *__b);
152c152
<         -:  150:    }
---
>     #####:  150:    }
168c168
<         -:  166:    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
---
>     #####:  166:    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
178,180c178,180
<         -:  176:      for (; __first1 != __last1; ++__first1, (void)++__first2)
<         -:  177:	std::iter_swap(__first1, __first2);
<         -:  178:      return __first2;
---
>     #####:  176:      for (; __first1 != __last1; ++__first1, (void)++__first2)
>     #####:  177:	std::iter_swap(__first1, __first2);
>     #####:  178:      return __first2;
197c197
<        3*:  195:    min(const _Tp& __a, const _Tp& __b)
---
>         -:  195:    min(const _Tp& __a, const _Tp& __b)
202,204c202,204
<        3*:  200:      if (__b < __a)
<        3*:  201:	return __b;
<     #####:  202:      return __a;
---
>         -:  200:      if (__b < __a)
>         -:  201:	return __b;
>         -:  202:      return __a;
206,228d205
< ------------------
< _ZSt3minIiERKT_S2_S2_:
<         3:  195:    min(const _Tp& __a, const _Tp& __b)
<         -:  196:    {
<         -:  197:      // concept requirements
<         -:  198:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  199:      //return __b < __a ? __b : __a;
<         3:  200:      if (__b < __a)
<         3:  201:	return __b;
<     #####:  202:      return __a;
<         -:  203:    }
< ------------------
< _ZSt3minImERKT_S2_S2_:
<     #####:  195:    min(const _Tp& __a, const _Tp& __b)
<         -:  196:    {
<         -:  197:      // concept requirements
<         -:  198:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  199:      //return __b < __a ? __b : __a;
<     #####:  200:      if (__b < __a)
<     #####:  201:	return __b;
<     #####:  202:      return __a;
<         -:  203:    }
< ------------------
244,343c221
<        3*:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<        3*:  224:      if (__a < __b)
<     #####:  225:	return __b;
<        3*:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxIiERKT_S2_S2_:
<         3:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<         3:  224:      if (__a < __b)
<     #####:  225:	return __b;
<         3:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
---
>         -:  219:    max(const _Tp& __a, const _Tp& __b)
348,350c226,228
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
---
>         -:  224:      if (__a < __b)
>         -:  225:	return __b;
>         -:  226:      return __a;
352,374d229
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
< _ZSt3maxImERKT_S2_S2_:
<     #####:  219:    max(const _Tp& __a, const _Tp& __b)
<         -:  220:    {
<         -:  221:      // concept requirements
<         -:  222:      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
<         -:  223:      //return  __a < __b ? __b : __a;
<     #####:  224:      if (__a < __b)
<     #####:  225:	return __b;
<     #####:  226:      return __a;
<         -:  227:    }
< ------------------
424,498c279,280
<      321*:  277:    __niter_base(_Iterator __it)
<      321*:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPN7OpenDDS4DCPS6GUID_tEET_S4_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPKhET_S2_:
<       156:  277:    __niter_base(_Iterator __it)
<       156:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPhET_S1_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseISt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS4_PS4_EET_S8_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseISt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS5_EEEET_S9_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPPPN7OpenDDS4DCPS21TransportQueueElementEET_S6_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseISt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS4_PS4_EET_S8_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseISt20back_insert_iteratorISt5dequeIPN7OpenDDS4DCPS21TransportQueueElementESaIS5_EEEET_S9_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPPPN7OpenDDS4DCPS21TransportQueueElementEET_S6_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPPPN7OpenDDS4DCPS21TransportQueueElementEET_S6_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPN7OpenDDS4DCPS8RcHandleINS1_13TransportInstEEEET_S6_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPN7OpenDDS4DCPS16TransportLocatorEET_S4_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPN7OpenDDS4DCPS16TransportLocatorEET_S4_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPPN7OpenDDS4DCPS13TransportImplEET_S5_:
<       165:  277:    __niter_base(_Iterator __it)
<       165:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS4_EEET_SA_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPPPN7OpenDDS4DCPS11SendRequestEET_S6_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPN7OpenDDS4DCPS6GUID_tEET_S4_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
< _ZSt12__niter_baseIPN7OpenDDS4DCPS6GUID_tEET_S4_:
<     #####:  277:    __niter_base(_Iterator __it)
<     #####:  278:    { return __it; }
< ------------------
---
>         6:  277:    __niter_base(_Iterator __it)
>         6:  278:    { return __it; }
510,512c292,294
<         -:  290:	static _OI
<         -:  291:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  292:	{
---
>         -:  290:        static _OI
>         -:  291:        __copy_m(_II __first, _II __last, _OI __result)
>         -:  292:        {
524,526c306,308
<         -:  304:	static _OI
<         -:  305:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  306:	{
---
>         -:  304:        static _OI
>         -:  305:        __copy_m(_II __first, _II __last, _OI __result)
>         -:  306:        {
538,579c320,322
<         -:  318:	static _OI
<     #####:  319:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  320:	{
<         -:  321:	  typedef typename iterator_traits<_II>::difference_type _Distance;
<     #####:  322:	  for(_Distance __n = __last - __first; __n > 0; --__n)
<         -:  323:	    {
<     #####:  324:	      *__result = *__first;
<     #####:  325:	      ++__first;
<     #####:  326:	      ++__result;
<         -:  327:	    }
<     #####:  328:	  return __result;
<         -:  329:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPN7OpenDDS4DCPS16TransportLocatorES6_EET0_T_S8_S7_:
<     #####:  319:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  320:	{
<         -:  321:	  typedef typename iterator_traits<_II>::difference_type _Distance;
<     #####:  322:	  for(_Distance __n = __last - __first; __n > 0; --__n)
<         -:  323:	    {
<     #####:  324:	      *__result = *__first;
<     #####:  325:	      ++__first;
<     #####:  326:	      ++__result;
<         -:  327:	    }
<     #####:  328:	  return __result;
<         -:  329:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPN7OpenDDS4DCPS16TransportLocatorES6_EET0_T_S8_S7_:
<     #####:  319:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  320:	{
<         -:  321:	  typedef typename iterator_traits<_II>::difference_type _Distance;
<     #####:  322:	  for(_Distance __n = __last - __first; __n > 0; --__n)
<         -:  323:	    {
<     #####:  324:	      *__result = *__first;
<     #####:  325:	      ++__first;
<     #####:  326:	      ++__result;
<         -:  327:	    }
<     #####:  328:	  return __result;
<         -:  329:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS7_PS7_ESt20back_insert_iteratorISt5dequeIS7_SaIS7_EEEEET0_T_SH_SG_:
<     #####:  319:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  320:	{
---
>         -:  318:        static _OI
>         -:  319:        __copy_m(_II __first, _II __last, _OI __result)
>         -:  320:        { 
581c324
<     #####:  322:	  for(_Distance __n = __last - __first; __n > 0; --__n)
---
>         -:  322:	  for(_Distance __n = __last - __first; __n > 0; --__n)
583,585c326,328
<     #####:  324:	      *__result = *__first;
<     #####:  325:	      ++__first;
<     #####:  326:	      ++__result;
---
>         -:  324:	      *__result = *__first;
>         -:  325:	      ++__first;
>         -:  326:	      ++__result;
587c330
<     #####:  328:	  return __result;
---
>         -:  328:	  return __result;
589,602d331
< ------------------
< _ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS7_PS7_ESt20back_insert_iteratorISt5dequeIS7_SaIS7_EEEEET0_T_SH_SG_:
<     #####:  319:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  320:	{
<         -:  321:	  typedef typename iterator_traits<_II>::difference_type _Distance;
<     #####:  322:	  for(_Distance __n = __last - __first; __n > 0; --__n)
<         -:  323:	    {
<     #####:  324:	      *__result = *__first;
<     #####:  325:	      ++__first;
<     #####:  326:	      ++__result;
<         -:  327:	    }
<     #####:  328:	  return __result;
<         -:  329:	}
< ------------------
610,612c339,341
<         -:  337:	static _OI
<        2*:  338:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  339:	{
---
>         -:  337:        static _OI
>         -:  338:        __copy_m(_II __first, _II __last, _OI __result)
>         -:  339:        { 
614c343
<        4*:  341:	  for(_Distance __n = __last - __first; __n > 0; --__n)
---
>         -:  341:	  for(_Distance __n = __last - __first; __n > 0; --__n)
616,618c345,347
<        2*:  343:	      *__result = std::move(*__first);
<        2*:  344:	      ++__first;
<        2*:  345:	      ++__result;
---
>         -:  343:	      *__result = std::move(*__first);
>         -:  344:	      ++__first;
>         -:  345:	      ++__result;
620c349
<        2*:  347:	  return __result;
---
>         -:  347:	  return __result;
622,648d350
< ------------------
< _ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS5_15TransportClientEEENS5_6GUID_tEESB_EET0_T_SD_SC_:
<     #####:  338:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  339:	{
<         -:  340:	  typedef typename iterator_traits<_II>::difference_type _Distance;
<     #####:  341:	  for(_Distance __n = __last - __first; __n > 0; --__n)
<         -:  342:	    {
<     #####:  343:	      *__result = std::move(*__first);
<     #####:  344:	      ++__first;
<     #####:  345:	      ++__result;
<         -:  346:	    }
<     #####:  347:	  return __result;
<         -:  348:	}
< ------------------
< _ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS5_21TransportSendStrategy8SendModeEESB_EET0_T_SD_SC_:
<         2:  338:	__copy_m(_II __first, _II __last, _OI __result)
<         -:  339:	{
<         -:  340:	  typedef typename iterator_traits<_II>::difference_type _Distance;
<         4:  341:	  for(_Distance __n = __last - __first; __n > 0; --__n)
<         -:  342:	    {
<         2:  343:	      *__result = std::move(*__first);
<         2:  344:	      ++__first;
<         2:  345:	      ++__result;
<         -:  346:	    }
<         2:  347:	  return __result;
<         -:  348:	}
< ------------------
656,722c358,360
<         -:  356:	static _Tp*
<       55*:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<       55*:  366:	  const ptrdiff_t _Num = __last - __first;
<       55*:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<       55*:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPN7OpenDDS4DCPS21TransportQueueElementEEEPT_PKS8_SB_S9_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN7OpenDDS4DCPS6GUID_tEEEPT_PKS6_S9_S7_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN7OpenDDS4DCPS6GUID_tEEEPT_PKS6_S9_S7_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPN7OpenDDS4DCPS11SendRequestEEEPT_PKS8_SB_S9_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
---
>         -:  356:        static _Tp*
>        57:  357:        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
>         -:  358:        {
730,733c368,371
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
---
>        57:  366:	  const ptrdiff_t _Num = __last - __first;
>        57:  367:	  if (_Num)
>        20:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
>        57:  369:	  return __result + _Num;
735,831d372
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS7_EEEEPT_PKSC_SF_SD_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN7OpenDDS4DCPS13TransportImplEEEPT_PKS7_SA_S8_:
<        55:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<        55:  366:	  const ptrdiff_t _Num = __last - __first;
<        55:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<        55:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN7OpenDDS4DCPS6GUID_tEEEPT_PKS6_S9_S7_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPN7OpenDDS4DCPS21TransportQueueElementEEEPT_PKS8_SB_S9_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPN7OpenDDS4DCPS21TransportQueueElementEEEPT_PKS8_SB_S9_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
< _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_:
<     #####:  357:	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  358:	{
<         -:  359:#if __cplusplus >= 201103L
<         -:  360:	  using __assignable = conditional<_IsMove,
<         -:  361:					   is_move_assignable<_Tp>,
<         -:  362:					   is_copy_assignable<_Tp>>;
<         -:  363:	  // trivial types can have deleted assignment
<         -:  364:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  365:#endif
<     #####:  366:	  const ptrdiff_t _Num = __last - __first;
<     #####:  367:	  if (_Num)
<     #####:  368:	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
<     #####:  369:	  return __result + _Num;
<         -:  370:	}
< ------------------
836,971c377
<       69*:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<       69*:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<       69*:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPN7OpenDDS4DCPS6GUID_tES3_ET1_T0_S5_S4_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb1EPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS2_15TransportClientEEENS2_6GUID_tEES8_ET1_T0_SA_S9_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPN7OpenDDS4DCPS6GUID_tES3_ET1_T0_S5_S4_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPPPN7OpenDDS4DCPS11SendRequestES5_ET1_T0_S7_S6_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS4_EES9_ET1_T0_SB_SA_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb1EPPN7OpenDDS4DCPS13TransportImplES4_ET1_T0_S6_S5_:
<        55:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<        55:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<        55:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPN7OpenDDS4DCPS16TransportLocatorES3_ET1_T0_S5_S4_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPN7OpenDDS4DCPS16TransportLocatorES3_ET1_T0_S5_S4_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
---
>        53:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
976,978c382,384
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
---
>        53:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
>         -:  381:	                     && __is_pointer<_II>::__value
>         -:  382:	                     && __is_pointer<_OI>::__value
982c388
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
---
>        53:  386:	                      _Category>::__copy_m(__first, __last, __result);
984,1089d389
< ------------------
< _ZSt13__copy_move_aILb0EPN7OpenDDS4DCPS6GUID_tES3_ET1_T0_S5_S4_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0ESt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS4_PS4_ESt20back_insert_iteratorISt5dequeIS4_SaIS4_EEEET1_T0_SE_SD_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb1EPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS2_21TransportSendStrategy8SendModeEES8_ET1_T0_SA_S9_:
<         2:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<         2:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<         2:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0ESt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS4_PS4_ESt20back_insert_iteratorISt5dequeIS4_SaIS4_EEEET1_T0_SE_SD_:
<     #####:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<     #####:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<     #####:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
< _ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_:
<        12:  375:    __copy_move_a(_II __first, _II __last, _OI __result)
<         -:  376:    {
<         -:  377:      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
<         -:  378:      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
<         -:  379:      typedef typename iterator_traits<_II>::iterator_category _Category;
<        12:  380:      const bool __simple = (__is_trivial(_ValueTypeI)
<         -:  381:			     && __is_pointer<_II>::__value
<         -:  382:			     && __is_pointer<_OI>::__value
<         -:  383:			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
<         -:  384:
<         -:  385:      return std::__copy_move<_IsMove, __simple,
<        12:  386:			      _Category>::__copy_m(__first, __last, __result);
<         -:  387:    }
< ------------------
1103c403
<         -:  401:    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
---
>         -:  401:    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
1109c409
<         -:  407:    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
---
>         -:  407:    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
1122,1130c422
<       69*:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<       69*:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<       69*:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
---
>        53:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
1132c424
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
---
>        53:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
1134c426
<     #####:  424:					     std::__niter_base(__result)));
---
>        53:  424:					     std::__niter_base(__result)));
1136,1256d427
< ------------------
< _ZSt14__copy_move_a2ILb0EPN7OpenDDS4DCPS6GUID_tES3_ET1_T0_S5_S4_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS4_15TransportClientEEENS4_6GUID_tEESt6vectorIS9_SaIS9_EEEESE_ET1_T0_SG_SF_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPN7OpenDDS4DCPS6GUID_tES3_ET1_T0_S5_S4_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPPPN7OpenDDS4DCPS11SendRequestES5_ET1_T0_S7_S6_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS4_EES9_ET1_T0_SB_SA_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb1EPPN7OpenDDS4DCPS13TransportImplES4_ET1_T0_S6_S5_:
<        55:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<        55:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<        55:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPN7OpenDDS4DCPS16TransportLocatorES3_ET1_T0_S5_S4_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPN7OpenDDS4DCPS16TransportLocatorES3_ET1_T0_S5_S4_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPN7OpenDDS4DCPS6GUID_tES3_ET1_T0_S5_S4_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS4_PS4_ESt20back_insert_iteratorISt5dequeIS4_SaIS4_EEEET1_T0_SE_SD_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS4_21TransportSendStrategy8SendModeEESt6vectorIS9_SaIS9_EEEESE_ET1_T0_SG_SF_:
<         2:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<         2:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<         2:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS4_PS4_ESt20back_insert_iteratorISt5dequeIS4_SaIS4_EEEET1_T0_SE_SD_:
<     #####:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<     #####:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<     #####:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
< _ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_:
<        12:  420:    __copy_move_a2(_II __first, _II __last, _OI __result)
<         -:  421:    {
<        12:  422:      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
<         -:  423:					     std::__niter_base(__last),
<        12:  424:					     std::__niter_base(__result)));
<         -:  425:    }
< ------------------
1277c448
<       67*:  446:    copy(_II __first, _II __last, _OI __result)
---
>        53:  446:    copy(_II __first, _II __last, _OI __result)
1286,1287c457,458
<       67*:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<       67*:  456:	       __result));
---
>        53:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
>        53:  456:	       __result));
1289,1485d459
< ------------------
< _ZSt4copyIPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET0_T_S7_S6_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPN7OpenDDS4DCPS6GUID_tES3_ET0_T_S5_S4_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPN7OpenDDS4DCPS6GUID_tES3_ET0_T_S5_S4_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPPPN7OpenDDS4DCPS11SendRequestES5_ET0_T_S7_S6_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS4_EES9_ET0_T_SB_SA_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyISt13move_iteratorIPPN7OpenDDS4DCPS13TransportImplEES5_ET0_T_S8_S7_:
<        55:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<        55:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<        55:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPN7OpenDDS4DCPS16TransportLocatorES3_ET0_T_S5_S4_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPN7OpenDDS4DCPS16TransportLocatorES3_ET0_T_S5_S4_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPN7OpenDDS4DCPS6GUID_tES3_ET0_T_S5_S4_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET0_T_S7_S6_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyISt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS4_PS4_ESt20back_insert_iteratorISt5dequeIS4_SaIS4_EEEET0_T_SE_SD_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET0_T_S7_S6_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyISt15_Deque_iteratorIPN7OpenDDS4DCPS21TransportQueueElementERS4_PS4_ESt20back_insert_iteratorISt5dequeIS4_SaIS4_EEEET0_T_SE_SD_:
<     #####:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<     #####:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  456:	       __result));
<         -:  457:    }
< ------------------
< _ZSt4copyIPKhPhET0_T_S4_S3_:
<        12:  446:    copy(_II __first, _II __last, _OI __result)
<         -:  447:    {
<         -:  448:      // concept requirements
<         -:  449:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  450:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  451:	    typename iterator_traits<_II>::value_type>)
<         -:  452:      __glibcxx_requires_valid_range(__first, __last);
<         -:  453:
<         -:  454:      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
<        12:  455:	      (std::__miter_base(__first), std::__miter_base(__last),
<        12:  456:	       __result));
<         -:  457:    }
< ------------------
1507c481
<        2*:  479:    move(_II __first, _II __last, _OI __result)
---
>         -:  479:    move(_II __first, _II __last, _OI __result)
1515,1516c489,490
<        2*:  487:      return std::__copy_move_a2<true>(std::__miter_base(__first),
<        2*:  488:				       std::__miter_base(__last), __result);
---
>         -:  487:      return std::__copy_move_a2<true>(std::__miter_base(__first),
>         -:  488:				       std::__miter_base(__last), __result);
1518,1544d491
< ------------------
< _ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt4pairIN7OpenDDS4DCPS12WeakRcHandleINS4_15TransportClientEEENS4_6GUID_tEESt6vectorIS9_SaIS9_EEEESE_ET0_T_SG_SF_:
<     #####:  479:    move(_II __first, _II __last, _OI __result)
<         -:  480:    {
<         -:  481:      // concept requirements
<         -:  482:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  483:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  484:	    typename iterator_traits<_II>::value_type>)
<         -:  485:      __glibcxx_requires_valid_range(__first, __last);
<         -:  486:
<     #####:  487:      return std::__copy_move_a2<true>(std::__miter_base(__first),
<     #####:  488:				       std::__miter_base(__last), __result);
<         -:  489:    }
< ------------------
< _ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt4pairIPN7OpenDDS4DCPS21TransportQueueElementENS4_21TransportSendStrategy8SendModeEESt6vectorIS9_SaIS9_EEEESE_ET0_T_SG_SF_:
<         2:  479:    move(_II __first, _II __last, _OI __result)
<         -:  480:    {
<         -:  481:      // concept requirements
<         -:  482:      __glibcxx_function_requires(_InputIteratorConcept<_II>)
<         -:  483:      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
<         -:  484:	    typename iterator_traits<_II>::value_type>)
<         -:  485:      __glibcxx_requires_valid_range(__first, __last);
<         -:  486:
<         2:  487:      return std::__copy_move_a2<true>(std::__miter_base(__first),
<         2:  488:				       std::__miter_base(__last), __result);
<         -:  489:    }
< ------------------
1555,1557c502,504
<         -:  500:	static _BI2
<         -:  501:	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  502:	{
---
>         -:  500:        static _BI2
>         -:  501:        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
>         -:  502:        {
1569,1571c516,518
<         -:  514:	static _BI2
<         -:  515:	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  516:	{
---
>         -:  514:        static _BI2
>         -:  515:        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
>         -:  516:        {
1583,1585c530,532
<         -:  528:	static _BI2
<         -:  529:	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  530:	{
---
>         -:  528:        static _BI2
>         -:  529:        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
>         -:  530:        {
1598,1600c545,547
<         -:  543:	static _BI2
<     #####:  544:	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  545:	{
---
>         -:  543:        static _BI2
>         -:  544:        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
>         -:  545:        {
1602,1604c549,551
<     #####:  547:	  for (__n = __last - __first; __n > 0; --__n)
<     #####:  548:	    *--__result = std::move(*--__last);
<     #####:  549:	  return __result;
---
>         -:  547:	  for (__n = __last - __first; __n > 0; --__n)
>         -:  548:	    *--__result = std::move(*--__last);
>         -:  549:	  return __result;
1613,1631c560,562
<         -:  558:	static _Tp*
<     #####:  559:	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  560:	{
<         -:  561:#if __cplusplus >= 201103L
<         -:  562:	  using __assignable = conditional<_IsMove,
<         -:  563:					   is_move_assignable<_Tp>,
<         -:  564:					   is_copy_assignable<_Tp>>;
<         -:  565:	  // trivial types can have deleted assignment
<         -:  566:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  567:#endif
<     #####:  568:	  const ptrdiff_t _Num = __last - __first;
<     #####:  569:	  if (_Num)
<     #####:  570:	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
<     #####:  571:	  return __result - _Num;
<         -:  572:	}
< ------------------
< _ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPN7OpenDDS4DCPS21TransportQueueElementEEEPT_PKS8_SB_S9_:
<     #####:  559:	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  560:	{
---
>         -:  558:        static _Tp*
>         -:  559:        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
>         -:  560:        {
1639,1642c570,573
<     #####:  568:	  const ptrdiff_t _Num = __last - __first;
<     #####:  569:	  if (_Num)
<     #####:  570:	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
<     #####:  571:	  return __result - _Num;
---
>         -:  568:	  const ptrdiff_t _Num = __last - __first;
>         -:  569:	  if (_Num)
>         -:  570:	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
>         -:  571:	  return __result - _Num;
1644,1708d574
< ------------------
< _ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPN7OpenDDS4DCPS11SendRequestEEEPT_PKS8_SB_S9_:
<     #####:  559:	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  560:	{
<         -:  561:#if __cplusplus >= 201103L
<         -:  562:	  using __assignable = conditional<_IsMove,
<         -:  563:					   is_move_assignable<_Tp>,
<         -:  564:					   is_copy_assignable<_Tp>>;
<         -:  565:	  // trivial types can have deleted assignment
<         -:  566:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  567:#endif
<     #####:  568:	  const ptrdiff_t _Num = __last - __first;
<     #####:  569:	  if (_Num)
<     #####:  570:	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
<     #####:  571:	  return __result - _Num;
<         -:  572:	}
< ------------------
< _ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS7_EEEEPT_PKSC_SF_SD_:
<     #####:  559:	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  560:	{
<         -:  561:#if __cplusplus >= 201103L
<         -:  562:	  using __assignable = conditional<_IsMove,
<         -:  563:					   is_move_assignable<_Tp>,
<         -:  564:					   is_copy_assignable<_Tp>>;
<         -:  565:	  // trivial types can have deleted assignment
<         -:  566:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  567:#endif
<     #####:  568:	  const ptrdiff_t _Num = __last - __first;
<     #####:  569:	  if (_Num)
<     #####:  570:	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
<     #####:  571:	  return __result - _Num;
<         -:  572:	}
< ------------------
< _ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPN7OpenDDS4DCPS21TransportQueueElementEEEPT_PKS8_SB_S9_:
<     #####:  559:	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  560:	{
<         -:  561:#if __cplusplus >= 201103L
<         -:  562:	  using __assignable = conditional<_IsMove,
<         -:  563:					   is_move_assignable<_Tp>,
<         -:  564:					   is_copy_assignable<_Tp>>;
<         -:  565:	  // trivial types can have deleted assignment
<         -:  566:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  567:#endif
<     #####:  568:	  const ptrdiff_t _Num = __last - __first;
<     #####:  569:	  if (_Num)
<     #####:  570:	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
<     #####:  571:	  return __result - _Num;
<         -:  572:	}
< ------------------
< _ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPN7OpenDDS4DCPS21TransportQueueElementEEEPT_PKS8_SB_S9_:
<     #####:  559:	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
<         -:  560:	{
<         -:  561:#if __cplusplus >= 201103L
<         -:  562:	  using __assignable = conditional<_IsMove,
<         -:  563:					   is_move_assignable<_Tp>,
<         -:  564:					   is_copy_assignable<_Tp>>;
<         -:  565:	  // trivial types can have deleted assignment
<         -:  566:	  static_assert( __assignable::type::value, "type is not assignable" );
<         -:  567:#endif
<     #####:  568:	  const ptrdiff_t _Num = __last - __first;
<     #####:  569:	  if (_Num)
<     #####:  570:	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
<     #####:  571:	  return __result - _Num;
<         -:  572:	}
< ------------------
1713,1781c579
<     #####:  577:    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  578:    {
<         -:  579:      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
<         -:  580:      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
<         -:  581:      typedef typename iterator_traits<_BI1>::iterator_category _Category;
<     #####:  582:      const bool __simple = (__is_trivial(_ValueType1)
<         -:  583:			     && __is_pointer<_BI1>::__value
<         -:  584:			     && __is_pointer<_BI2>::__value
<         -:  585:			     && __are_same<_ValueType1, _ValueType2>::__value);
<         -:  586:
<         -:  587:      return std::__copy_move_backward<_IsMove, __simple,
<     #####:  588:				       _Category>::__copy_move_b(__first,
<         -:  589:								 __last,
<     #####:  590:								 __result);
<         -:  591:    }
< ------------------
< _ZSt22__copy_move_backward_aILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  577:    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  578:    {
<         -:  579:      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
<         -:  580:      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
<         -:  581:      typedef typename iterator_traits<_BI1>::iterator_category _Category;
<     #####:  582:      const bool __simple = (__is_trivial(_ValueType1)
<         -:  583:			     && __is_pointer<_BI1>::__value
<         -:  584:			     && __is_pointer<_BI2>::__value
<         -:  585:			     && __are_same<_ValueType1, _ValueType2>::__value);
<         -:  586:
<         -:  587:      return std::__copy_move_backward<_IsMove, __simple,
<     #####:  588:				       _Category>::__copy_move_b(__first,
<         -:  589:								 __last,
<     #####:  590:								 __result);
<         -:  591:    }
< ------------------
< _ZSt22__copy_move_backward_aILb0EPPPN7OpenDDS4DCPS11SendRequestES5_ET1_T0_S7_S6_:
<     #####:  577:    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  578:    {
<         -:  579:      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
<         -:  580:      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
<         -:  581:      typedef typename iterator_traits<_BI1>::iterator_category _Category;
<     #####:  582:      const bool __simple = (__is_trivial(_ValueType1)
<         -:  583:			     && __is_pointer<_BI1>::__value
<         -:  584:			     && __is_pointer<_BI2>::__value
<         -:  585:			     && __are_same<_ValueType1, _ValueType2>::__value);
<         -:  586:
<         -:  587:      return std::__copy_move_backward<_IsMove, __simple,
<     #####:  588:				       _Category>::__copy_move_b(__first,
<         -:  589:								 __last,
<     #####:  590:								 __result);
<         -:  591:    }
< ------------------
< _ZSt22__copy_move_backward_aILb0EPPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS4_EES9_ET1_T0_SB_SA_:
<     #####:  577:    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  578:    {
<         -:  579:      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
<         -:  580:      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
<         -:  581:      typedef typename iterator_traits<_BI1>::iterator_category _Category;
<     #####:  582:      const bool __simple = (__is_trivial(_ValueType1)
<         -:  583:			     && __is_pointer<_BI1>::__value
<         -:  584:			     && __is_pointer<_BI2>::__value
<         -:  585:			     && __are_same<_ValueType1, _ValueType2>::__value);
<         -:  586:
<         -:  587:      return std::__copy_move_backward<_IsMove, __simple,
<     #####:  588:				       _Category>::__copy_move_b(__first,
<         -:  589:								 __last,
<     #####:  590:								 __result);
<         -:  591:    }
< ------------------
< _ZSt22__copy_move_backward_aILb1EPN7OpenDDS4DCPS8RcHandleINS1_13TransportInstEEES5_ET1_T0_S7_S6_:
<     #####:  577:    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
---
>         -:  577:    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
1786,1788c584,586
<     #####:  582:      const bool __simple = (__is_trivial(_ValueType1)
<         -:  583:			     && __is_pointer<_BI1>::__value
<         -:  584:			     && __is_pointer<_BI2>::__value
---
>         -:  582:      const bool __simple = (__is_trivial(_ValueType1)
>         -:  583:	                     && __is_pointer<_BI1>::__value
>         -:  584:	                     && __is_pointer<_BI2>::__value
1792c590
<     #####:  588:				       _Category>::__copy_move_b(__first,
---
>         -:  588:	                               _Category>::__copy_move_b(__first,
1794c592
<     #####:  590:								 __result);
---
>         -:  590:								 __result);
1796,1830d593
< ------------------
< _ZSt22__copy_move_backward_aILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  577:    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  578:    {
<         -:  579:      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
<         -:  580:      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
<         -:  581:      typedef typename iterator_traits<_BI1>::iterator_category _Category;
<     #####:  582:      const bool __simple = (__is_trivial(_ValueType1)
<         -:  583:			     && __is_pointer<_BI1>::__value
<         -:  584:			     && __is_pointer<_BI2>::__value
<         -:  585:			     && __are_same<_ValueType1, _ValueType2>::__value);
<         -:  586:
<         -:  587:      return std::__copy_move_backward<_IsMove, __simple,
<     #####:  588:				       _Category>::__copy_move_b(__first,
<         -:  589:								 __last,
<     #####:  590:								 __result);
<         -:  591:    }
< ------------------
< _ZSt22__copy_move_backward_aILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  577:    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  578:    {
<         -:  579:      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
<         -:  580:      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
<         -:  581:      typedef typename iterator_traits<_BI1>::iterator_category _Category;
<     #####:  582:      const bool __simple = (__is_trivial(_ValueType1)
<         -:  583:			     && __is_pointer<_BI1>::__value
<         -:  584:			     && __is_pointer<_BI2>::__value
<         -:  585:			     && __are_same<_ValueType1, _ValueType2>::__value);
<         -:  586:
<         -:  587:      return std::__copy_move_backward<_IsMove, __simple,
<     #####:  588:				       _Category>::__copy_move_b(__first,
<         -:  589:								 __last,
<     #####:  590:								 __result);
<         -:  591:    }
< ------------------
1834,1842c597
<     #####:  595:    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  596:    {
<         -:  597:      return _BI2(std::__copy_move_backward_a<_IsMove>
<     #####:  598:		  (std::__niter_base(__first), std::__niter_base(__last),
<     #####:  599:		   std::__niter_base(__result)));
<         -:  600:    }
< ------------------
< _ZSt23__copy_move_backward_a2ILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  595:    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
---
>         -:  595:    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
1845,1846c600,601
<     #####:  598:		  (std::__niter_base(__first), std::__niter_base(__last),
<     #####:  599:		   std::__niter_base(__result)));
---
>         -:  598:		  (std::__niter_base(__first), std::__niter_base(__last),
>         -:  599:		   std::__niter_base(__result)));
1848,1888d602
< ------------------
< _ZSt23__copy_move_backward_a2ILb0EPPPN7OpenDDS4DCPS11SendRequestES5_ET1_T0_S7_S6_:
<     #####:  595:    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  596:    {
<         -:  597:      return _BI2(std::__copy_move_backward_a<_IsMove>
<     #####:  598:		  (std::__niter_base(__first), std::__niter_base(__last),
<     #####:  599:		   std::__niter_base(__result)));
<         -:  600:    }
< ------------------
< _ZSt23__copy_move_backward_a2ILb0EPPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS4_EES9_ET1_T0_SB_SA_:
<     #####:  595:    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  596:    {
<         -:  597:      return _BI2(std::__copy_move_backward_a<_IsMove>
<     #####:  598:		  (std::__niter_base(__first), std::__niter_base(__last),
<     #####:  599:		   std::__niter_base(__result)));
<         -:  600:    }
< ------------------
< _ZSt23__copy_move_backward_a2ILb1EPN7OpenDDS4DCPS8RcHandleINS1_13TransportInstEEES5_ET1_T0_S7_S6_:
<     #####:  595:    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  596:    {
<         -:  597:      return _BI2(std::__copy_move_backward_a<_IsMove>
<     #####:  598:		  (std::__niter_base(__first), std::__niter_base(__last),
<     #####:  599:		   std::__niter_base(__result)));
<         -:  600:    }
< ------------------
< _ZSt23__copy_move_backward_a2ILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  595:    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  596:    {
<         -:  597:      return _BI2(std::__copy_move_backward_a<_IsMove>
<     #####:  598:		  (std::__niter_base(__first), std::__niter_base(__last),
<     #####:  599:		   std::__niter_base(__result)));
<         -:  600:    }
< ------------------
< _ZSt23__copy_move_backward_a2ILb0EPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET1_T0_S7_S6_:
<     #####:  595:    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  596:    {
<         -:  597:      return _BI2(std::__copy_move_backward_a<_IsMove>
<     #####:  598:		  (std::__niter_base(__first), std::__niter_base(__last),
<     #####:  599:		   std::__niter_base(__result)));
<         -:  600:    }
< ------------------
1910,1990c624
<     #####:  622:    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  623:    {
<         -:  624:      // concept requirements
<         -:  625:      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
<         -:  626:      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
<         -:  627:      __glibcxx_function_requires(_ConvertibleConcept<
<         -:  628:	    typename iterator_traits<_BI1>::value_type,
<         -:  629:	    typename iterator_traits<_BI2>::value_type>)
<         -:  630:      __glibcxx_requires_valid_range(__first, __last);
<         -:  631:
<         -:  632:      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
<     #####:  633:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  634:	       __result));
<         -:  635:    }
< ------------------
< _ZSt13copy_backwardIPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET0_T_S7_S6_:
<     #####:  622:    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  623:    {
<         -:  624:      // concept requirements
<         -:  625:      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
<         -:  626:      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
<         -:  627:      __glibcxx_function_requires(_ConvertibleConcept<
<         -:  628:	    typename iterator_traits<_BI1>::value_type,
<         -:  629:	    typename iterator_traits<_BI2>::value_type>)
<         -:  630:      __glibcxx_requires_valid_range(__first, __last);
<         -:  631:
<         -:  632:      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
<     #####:  633:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  634:	       __result));
<         -:  635:    }
< ------------------
< _ZSt13copy_backwardIPPPN7OpenDDS4DCPS11SendRequestES5_ET0_T_S7_S6_:
<     #####:  622:    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  623:    {
<         -:  624:      // concept requirements
<         -:  625:      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
<         -:  626:      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
<         -:  627:      __glibcxx_function_requires(_ConvertibleConcept<
<         -:  628:	    typename iterator_traits<_BI1>::value_type,
<         -:  629:	    typename iterator_traits<_BI2>::value_type>)
<         -:  630:      __glibcxx_requires_valid_range(__first, __last);
<         -:  631:
<         -:  632:      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
<     #####:  633:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  634:	       __result));
<         -:  635:    }
< ------------------
< _ZSt13copy_backwardIPPSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS4_EES9_ET0_T_SB_SA_:
<     #####:  622:    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  623:    {
<         -:  624:      // concept requirements
<         -:  625:      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
<         -:  626:      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
<         -:  627:      __glibcxx_function_requires(_ConvertibleConcept<
<         -:  628:	    typename iterator_traits<_BI1>::value_type,
<         -:  629:	    typename iterator_traits<_BI2>::value_type>)
<         -:  630:      __glibcxx_requires_valid_range(__first, __last);
<         -:  631:
<         -:  632:      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
<     #####:  633:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  634:	       __result));
<         -:  635:    }
< ------------------
< _ZSt13copy_backwardIPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET0_T_S7_S6_:
<     #####:  622:    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
<         -:  623:    {
<         -:  624:      // concept requirements
<         -:  625:      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
<         -:  626:      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
<         -:  627:      __glibcxx_function_requires(_ConvertibleConcept<
<         -:  628:	    typename iterator_traits<_BI1>::value_type,
<         -:  629:	    typename iterator_traits<_BI2>::value_type>)
<         -:  630:      __glibcxx_requires_valid_range(__first, __last);
<         -:  631:
<         -:  632:      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
<     #####:  633:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  634:	       __result));
<         -:  635:    }
< ------------------
< _ZSt13copy_backwardIPPPN7OpenDDS4DCPS21TransportQueueElementES5_ET0_T_S7_S6_:
<     #####:  622:    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
---
>         -:  622:    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
2001,2002c635,636
<     #####:  633:	      (std::__miter_base(__first), std::__miter_base(__last),
<     #####:  634:	       __result));
---
>         -:  633:	      (std::__miter_base(__first), std::__miter_base(__last),
>         -:  634:	       __result));
2004d637
< ------------------
2027c660
<     #####:  658:    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
---
>         -:  658:    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
2037c670
<     #####:  668:      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
---
>         -:  668:      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
2039c672
<     #####:  670:						__result);
---
>         -:  670:						__result);
2050,2058c683
<     #####:  681:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
<         -:  682: 	     const _Tp& __value)
<         -:  683:    {
<     #####:  684:      for (; __first != __last; ++__first)
<     #####:  685:	*__first = __value;
<     #####:  686:    }
< ------------------
< _ZSt8__fill_aIPN7OpenDDS4DCPS6GUID_tES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_:
<     #####:  681:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
---
>         -:  681:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
2061,2097c686,689
<     #####:  684:      for (; __first != __last; ++__first)
<     #####:  685:	*__first = __value;
<     #####:  686:    }
< ------------------
< _ZSt8__fill_aIPN7OpenDDS4DCPS6GUID_tES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_:
<     #####:  681:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
<         -:  682: 	     const _Tp& __value)
<         -:  683:    {
<     #####:  684:      for (; __first != __last; ++__first)
<     #####:  685:	*__first = __value;
<     #####:  686:    }
< ------------------
< _ZSt8__fill_aIPN7OpenDDS4DCPS16TransportLocatorES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_:
<     #####:  681:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
<         -:  682: 	     const _Tp& __value)
<         -:  683:    {
<     #####:  684:      for (; __first != __last; ++__first)
<     #####:  685:	*__first = __value;
<     #####:  686:    }
< ------------------
< _ZSt8__fill_aIPN7OpenDDS4DCPS16TransportLocatorES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_:
<     #####:  681:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
<         -:  682: 	     const _Tp& __value)
<         -:  683:    {
<     #####:  684:      for (; __first != __last; ++__first)
<     #####:  685:	*__first = __value;
<     #####:  686:    }
< ------------------
< _ZSt8__fill_aIPN7OpenDDS4DCPS6GUID_tES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_:
<     #####:  681:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
<         -:  682: 	     const _Tp& __value)
<         -:  683:    {
<     #####:  684:      for (; __first != __last; ++__first)
<     #####:  685:	*__first = __value;
<     #####:  686:    }
< ------------------
<         -:  687:
---
>         -:  684:      for (; __first != __last; ++__first)
>         -:  685:	*__first = __value;
>         -:  686:    }
>         -:  687:    
2101c693
<         -:  691:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
---
>        62:  691:    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
2104,2107c696,699
<         -:  694:      const _Tp __tmp = __value;
<         -:  695:      for (; __first != __last; ++__first)
<         -:  696:	*__first = __tmp;
<         -:  697:    }
---
>        62:  694:      const _Tp __tmp = __value;
>       146:  695:      for (; __first != __last; ++__first)
>        42:  696:	*__first = __tmp;
>        62:  697:    }
2113c705
<         -:  703:    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
---
>     #####:  703:    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
2115,2118c707,710
<         -:  705:      const _Tp __tmp = __c;
<         -:  706:      if (const size_t __len = __last - __first)
<         -:  707:	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
<         -:  708:    }
---
>     #####:  705:      const _Tp __tmp = __c;
>     #####:  706:      if (const size_t __len = __last - __first)
>     #####:  707:	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
>     #####:  708:    }
2134,2194c726
<     #####:  724:    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
<         -:  725:    {
<         -:  726:      // concept requirements
<         -:  727:      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
<         -:  728:				  _ForwardIterator>)
<         -:  729:      __glibcxx_requires_valid_range(__first, __last);
<         -:  730:
<     #####:  731:      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
<         -:  732:		    __value);
<     #####:  733:    }
< ------------------
< _ZSt4fillIPN7OpenDDS4DCPS6GUID_tES2_EvT_S4_RKT0_:
<     #####:  724:    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
<         -:  725:    {
<         -:  726:      // concept requirements
<         -:  727:      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
<         -:  728:				  _ForwardIterator>)
<         -:  729:      __glibcxx_requires_valid_range(__first, __last);
<         -:  730:
<     #####:  731:      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
<         -:  732:		    __value);
<     #####:  733:    }
< ------------------
< _ZSt4fillIPN7OpenDDS4DCPS6GUID_tES2_EvT_S4_RKT0_:
<     #####:  724:    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
<         -:  725:    {
<         -:  726:      // concept requirements
<         -:  727:      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
<         -:  728:				  _ForwardIterator>)
<         -:  729:      __glibcxx_requires_valid_range(__first, __last);
<         -:  730:
<     #####:  731:      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
<         -:  732:		    __value);
<     #####:  733:    }
< ------------------
< _ZSt4fillIPN7OpenDDS4DCPS16TransportLocatorES2_EvT_S4_RKT0_:
<     #####:  724:    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
<         -:  725:    {
<         -:  726:      // concept requirements
<         -:  727:      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
<         -:  728:				  _ForwardIterator>)
<         -:  729:      __glibcxx_requires_valid_range(__first, __last);
<         -:  730:
<     #####:  731:      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
<         -:  732:		    __value);
<     #####:  733:    }
< ------------------
< _ZSt4fillIPN7OpenDDS4DCPS16TransportLocatorES2_EvT_S4_RKT0_:
<     #####:  724:    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
<         -:  725:    {
<         -:  726:      // concept requirements
<         -:  727:      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
<         -:  728:				  _ForwardIterator>)
<         -:  729:      __glibcxx_requires_valid_range(__first, __last);
<         -:  730:
<     #####:  731:      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
<         -:  732:		    __value);
<     #####:  733:    }
< ------------------
< _ZSt4fillIPN7OpenDDS4DCPS6GUID_tES2_EvT_S4_RKT0_:
<     #####:  724:    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
---
>        62:  724:    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
2201c733
<     #####:  731:      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
---
>        62:  731:      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
2203,2204c735
<     #####:  733:    }
< ------------------
---
>        62:  733:    }
2212c743
<         -:  741:	   __niter > 0; --__niter, (void) ++__first)
---
>         -:  741:	   __niter > 0; --__niter, ++__first)
2224c755
<         -:  753:	   __niter > 0; --__niter, (void) ++__first)
---
>         -:  753:	   __niter > 0; --__niter, ++__first)
2267,2270c798,801
<         -:  796:	static bool
<         -:  797:	equal(_II1 __first1, _II1 __last1, _II2 __first2)
<         -:  798:	{
<         -:  799:	  for (; __first1 != __last1; ++__first1, (void) ++__first2)
---
>         -:  796:        static bool
>         -:  797:        equal(_II1 __first1, _II1 __last1, _II2 __first2)
>         -:  798:        {
>         -:  799:	  for (; __first1 != __last1; ++__first1, (void)++__first2)
2281,2283c812,814
<         -:  810:	static bool
<         -:  811:	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
<         -:  812:	{
---
>         -:  810:        static bool
>         -:  811:        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
>         -:  812:        {
2298,2299c829,830
<         -:  827:			     && __is_pointer<_II1>::__value
<         -:  828:			     && __is_pointer<_II2>::__value
---
>         -:  827:	                     && __is_pointer<_II1>::__value
>         -:  828:	                     && __is_pointer<_II2>::__value
2309,2311c840,842
<         -:  838:	static _II1
<         -:  839:	__newlast1(_II1, _II1 __last1, _II2, _II2)
<         -:  840:	{ return __last1; }
---
>         -:  838:        static _II1
>         -:  839:        __newlast1(_II1, _II1 __last1, _II2, _II2)
>         -:  840:        { return __last1; }
2314,2316c845,847
<         -:  843:	static bool
<         -:  844:	__cnd2(_II __first, _II __last)
<         -:  845:	{ return __first != __last; }
---
>         -:  843:        static bool
>         -:  844:        __cnd2(_II __first, _II __last)
>         -:  845:        { return __first != __last; }
2323,2324c854,855
<         -:  852:	static _RAI1
<         -:  853:	__newlast1(_RAI1 __first1, _RAI1 __last1,
---
>         -:  852:        static _RAI1
>         -:  853:        __newlast1(_RAI1 __first1, _RAI1 __last1,
2326c857
<         -:  855:	{
---
>         -:  855:        {
2335,2337c866,868
<         -:  864:	static bool
<         -:  865:	__cnd2(_RAI, _RAI)
<         -:  866:	{ return true; }
---
>         -:  864:        static bool
>         -:  865:        __cnd2(_RAI, _RAI)
>         -:  866:        { return true; }
2366c897
<         -:  895:	static bool __lc(_II1, _II1, _II2, _II2);
---
>         -:  895:        static bool __lc(_II1, _II1, _II2, _II2);
2384,2385c915,916
<         -:  913:	static bool
<         -:  914:	__lc(const _Tp* __first1, const _Tp* __last1,
---
>         -:  913:        static bool
>         -:  914:        __lc(const _Tp* __first1, const _Tp* __last1,
2449c980
<         -:  978:   *                  than</em> @a val, or end() if every element is less than
---
>         -:  978:   *                  than</em> @a val, or end() if every element is less than 
2494c1025
<         -: 1023:_GLIBCXX_BEGIN_NAMESPACE_ALGO
---
>         -: 1023:_GLIBCXX_END_NAMESPACE_VERSION
2496,2587c1027,1118
<         -: 1025:  /**
<         -: 1026:   *  @brief Tests a range for element-wise equality.
<         -: 1027:   *  @ingroup non_mutating_algorithms
<         -: 1028:   *  @param  __first1  An input iterator.
<         -: 1029:   *  @param  __last1   An input iterator.
<         -: 1030:   *  @param  __first2  An input iterator.
<         -: 1031:   *  @return   A boolean true or false.
<         -: 1032:   *
<         -: 1033:   *  This compares the elements of two ranges using @c == and returns true or
<         -: 1034:   *  false depending on whether all of the corresponding elements of the
<         -: 1035:   *  ranges are equal.
<         -: 1036:  */
<         -: 1037:  template<typename _II1, typename _II2>
<         -: 1038:    inline bool
<         -: 1039:    equal(_II1 __first1, _II1 __last1, _II2 __first2)
<         -: 1040:    {
<         -: 1041:      // concept requirements
<         -: 1042:      __glibcxx_function_requires(_InputIteratorConcept<_II1>)
<         -: 1043:      __glibcxx_function_requires(_InputIteratorConcept<_II2>)
<         -: 1044:      __glibcxx_function_requires(_EqualOpConcept<
<         -: 1045:	    typename iterator_traits<_II1>::value_type,
<         -: 1046:	    typename iterator_traits<_II2>::value_type>)
<         -: 1047:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1048:
<         -: 1049:      return std::__equal_aux(std::__niter_base(__first1),
<         -: 1050:			      std::__niter_base(__last1),
<         -: 1051:			      std::__niter_base(__first2));
<         -: 1052:    }
<         -: 1053:
<         -: 1054:  /**
<         -: 1055:   *  @brief Tests a range for element-wise equality.
<         -: 1056:   *  @ingroup non_mutating_algorithms
<         -: 1057:   *  @param  __first1  An input iterator.
<         -: 1058:   *  @param  __last1   An input iterator.
<         -: 1059:   *  @param  __first2  An input iterator.
<         -: 1060:   *  @param __binary_pred A binary predicate @link functors
<         -: 1061:   *                  functor@endlink.
<         -: 1062:   *  @return         A boolean true or false.
<         -: 1063:   *
<         -: 1064:   *  This compares the elements of two ranges using the binary_pred
<         -: 1065:   *  parameter, and returns true or
<         -: 1066:   *  false depending on whether all of the corresponding elements of the
<         -: 1067:   *  ranges are equal.
<         -: 1068:  */
<         -: 1069:  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
<         -: 1070:    inline bool
<         -: 1071:    equal(_IIter1 __first1, _IIter1 __last1,
<         -: 1072:	  _IIter2 __first2, _BinaryPredicate __binary_pred)
<         -: 1073:    {
<         -: 1074:      // concept requirements
<         -: 1075:      __glibcxx_function_requires(_InputIteratorConcept<_IIter1>)
<         -: 1076:      __glibcxx_function_requires(_InputIteratorConcept<_IIter2>)
<         -: 1077:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1078:
<         -: 1079:      for (; __first1 != __last1; ++__first1, (void)++__first2)
<         -: 1080:	if (!bool(__binary_pred(*__first1, *__first2)))
<         -: 1081:	  return false;
<         -: 1082:      return true;
<         -: 1083:    }
<         -: 1084:
<         -: 1085:#if __cplusplus >= 201103L
<         -: 1086:  // 4-iterator version of std::equal<It1, It2> for use in C++11.
<         -: 1087:  template<typename _II1, typename _II2>
<         -: 1088:    inline bool
<         -: 1089:    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
<         -: 1090:    {
<         -: 1091:      using _RATag = random_access_iterator_tag;
<         -: 1092:      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
<         -: 1093:      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
<         -: 1094:      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
<         -: 1095:      if (_RAIters())
<         -: 1096:	{
<         -: 1097:	  auto __d1 = std::distance(__first1, __last1);
<         -: 1098:	  auto __d2 = std::distance(__first2, __last2);
<         -: 1099:	  if (__d1 != __d2)
<         -: 1100:	    return false;
<         -: 1101:	  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2);
<         -: 1102:	}
<         -: 1103:
<         -: 1104:      for (; __first1 != __last1 && __first2 != __last2;
<         -: 1105:	  ++__first1, (void)++__first2)
<         -: 1106:	if (!(*__first1 == *__first2))
<         -: 1107:	  return false;
<         -: 1108:      return __first1 == __last1 && __first2 == __last2;
<         -: 1109:    }
<         -: 1110:
<         -: 1111:  // 4-iterator version of std::equal<It1, It2, BinaryPred> for use in C++11.
<         -: 1112:  template<typename _II1, typename _II2, typename _BinaryPredicate>
<         -: 1113:    inline bool
<         -: 1114:    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
<         -: 1115:	     _BinaryPredicate __binary_pred)
<         -: 1116:    {
---
>         -: 1025:_GLIBCXX_BEGIN_NAMESPACE_ALGO
>         -: 1026:
>         -: 1027:  /**
>         -: 1028:   *  @brief Tests a range for element-wise equality.
>         -: 1029:   *  @ingroup non_mutating_algorithms
>         -: 1030:   *  @param  __first1  An input iterator.
>         -: 1031:   *  @param  __last1   An input iterator.
>         -: 1032:   *  @param  __first2  An input iterator.
>         -: 1033:   *  @return   A boolean true or false.
>         -: 1034:   *
>         -: 1035:   *  This compares the elements of two ranges using @c == and returns true or
>         -: 1036:   *  false depending on whether all of the corresponding elements of the
>         -: 1037:   *  ranges are equal.
>         -: 1038:  */
>         -: 1039:  template<typename _II1, typename _II2>
>         -: 1040:    inline bool
>         -: 1041:    equal(_II1 __first1, _II1 __last1, _II2 __first2)
>         -: 1042:    {
>         -: 1043:      // concept requirements
>         -: 1044:      __glibcxx_function_requires(_InputIteratorConcept<_II1>)
>         -: 1045:      __glibcxx_function_requires(_InputIteratorConcept<_II2>)
>         -: 1046:      __glibcxx_function_requires(_EqualOpConcept<
>         -: 1047:	    typename iterator_traits<_II1>::value_type,
>         -: 1048:	    typename iterator_traits<_II2>::value_type>)
>         -: 1049:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1050:
>         -: 1051:      return std::__equal_aux(std::__niter_base(__first1),
>         -: 1052:			      std::__niter_base(__last1),
>         -: 1053:			      std::__niter_base(__first2));
>         -: 1054:    }
>         -: 1055:
>         -: 1056:  /**
>         -: 1057:   *  @brief Tests a range for element-wise equality.
>         -: 1058:   *  @ingroup non_mutating_algorithms
>         -: 1059:   *  @param  __first1  An input iterator.
>         -: 1060:   *  @param  __last1   An input iterator.
>         -: 1061:   *  @param  __first2  An input iterator.
>         -: 1062:   *  @param __binary_pred A binary predicate @link functors
>         -: 1063:   *                  functor@endlink.
>         -: 1064:   *  @return         A boolean true or false.
>         -: 1065:   *
>         -: 1066:   *  This compares the elements of two ranges using the binary_pred
>         -: 1067:   *  parameter, and returns true or
>         -: 1068:   *  false depending on whether all of the corresponding elements of the
>         -: 1069:   *  ranges are equal.
>         -: 1070:  */
>         -: 1071:  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
>         -: 1072:    inline bool
>         -: 1073:    equal(_IIter1 __first1, _IIter1 __last1,
>         -: 1074:	  _IIter2 __first2, _BinaryPredicate __binary_pred)
>         -: 1075:    {
>         -: 1076:      // concept requirements
>         -: 1077:      __glibcxx_function_requires(_InputIteratorConcept<_IIter1>)
>         -: 1078:      __glibcxx_function_requires(_InputIteratorConcept<_IIter2>)
>         -: 1079:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1080:
>         -: 1081:      for (; __first1 != __last1; ++__first1, (void)++__first2)
>         -: 1082:	if (!bool(__binary_pred(*__first1, *__first2)))
>         -: 1083:	  return false;
>         -: 1084:      return true;
>         -: 1085:    }
>         -: 1086:
>         -: 1087:#if __cplusplus > 201103L
>         -: 1088:
>         -: 1089:#define __cpp_lib_robust_nonmodifying_seq_ops 201304
>         -: 1090:
>         -: 1091:  /**
>         -: 1092:   *  @brief Tests a range for element-wise equality.
>         -: 1093:   *  @ingroup non_mutating_algorithms
>         -: 1094:   *  @param  __first1  An input iterator.
>         -: 1095:   *  @param  __last1   An input iterator.
>         -: 1096:   *  @param  __first2  An input iterator.
>         -: 1097:   *  @param  __last2   An input iterator.
>         -: 1098:   *  @return   A boolean true or false.
>         -: 1099:   *
>         -: 1100:   *  This compares the elements of two ranges using @c == and returns true or
>         -: 1101:   *  false depending on whether all of the corresponding elements of the
>         -: 1102:   *  ranges are equal.
>         -: 1103:  */
>         -: 1104:  template<typename _II1, typename _II2>
>         -: 1105:    inline bool
>         -: 1106:    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
>         -: 1107:    {
>         -: 1108:      // concept requirements
>         -: 1109:      __glibcxx_function_requires(_InputIteratorConcept<_II1>)
>         -: 1110:      __glibcxx_function_requires(_InputIteratorConcept<_II2>)
>         -: 1111:      __glibcxx_function_requires(_EqualOpConcept<
>         -: 1112:	    typename iterator_traits<_II1>::value_type,
>         -: 1113:	    typename iterator_traits<_II2>::value_type>)
>         -: 1114:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1115:      __glibcxx_requires_valid_range(__first2, __last2);
>         -: 1116:
2598,2806c1129,1337
<         -: 1127:	  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2,
<         -: 1128:				       __binary_pred);
<         -: 1129:	}
<         -: 1130:
<         -: 1131:      for (; __first1 != __last1 && __first2 != __last2;
<         -: 1132:	  ++__first1, (void)++__first2)
<         -: 1133:	if (!bool(__binary_pred(*__first1, *__first2)))
<         -: 1134:	  return false;
<         -: 1135:      return __first1 == __last1 && __first2 == __last2;
<         -: 1136:    }
<         -: 1137:#endif // C++11
<         -: 1138:
<         -: 1139:#if __cplusplus > 201103L
<         -: 1140:
<         -: 1141:#define __cpp_lib_robust_nonmodifying_seq_ops 201304
<         -: 1142:
<         -: 1143:  /**
<         -: 1144:   *  @brief Tests a range for element-wise equality.
<         -: 1145:   *  @ingroup non_mutating_algorithms
<         -: 1146:   *  @param  __first1  An input iterator.
<         -: 1147:   *  @param  __last1   An input iterator.
<         -: 1148:   *  @param  __first2  An input iterator.
<         -: 1149:   *  @param  __last2   An input iterator.
<         -: 1150:   *  @return   A boolean true or false.
<         -: 1151:   *
<         -: 1152:   *  This compares the elements of two ranges using @c == and returns true or
<         -: 1153:   *  false depending on whether all of the corresponding elements of the
<         -: 1154:   *  ranges are equal.
<         -: 1155:  */
<         -: 1156:  template<typename _II1, typename _II2>
<         -: 1157:    inline bool
<         -: 1158:    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
<         -: 1159:    {
<         -: 1160:      // concept requirements
<         -: 1161:      __glibcxx_function_requires(_InputIteratorConcept<_II1>)
<         -: 1162:      __glibcxx_function_requires(_InputIteratorConcept<_II2>)
<         -: 1163:      __glibcxx_function_requires(_EqualOpConcept<
<         -: 1164:	    typename iterator_traits<_II1>::value_type,
<         -: 1165:	    typename iterator_traits<_II2>::value_type>)
<         -: 1166:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1167:      __glibcxx_requires_valid_range(__first2, __last2);
<         -: 1168:
<         -: 1169:      return _GLIBCXX_STD_A::__equal4(__first1, __last1, __first2, __last2);
<         -: 1170:    }
<         -: 1171:
<         -: 1172:  /**
<         -: 1173:   *  @brief Tests a range for element-wise equality.
<         -: 1174:   *  @ingroup non_mutating_algorithms
<         -: 1175:   *  @param  __first1  An input iterator.
<         -: 1176:   *  @param  __last1   An input iterator.
<         -: 1177:   *  @param  __first2  An input iterator.
<         -: 1178:   *  @param  __last2   An input iterator.
<         -: 1179:   *  @param __binary_pred A binary predicate @link functors
<         -: 1180:   *                  functor@endlink.
<         -: 1181:   *  @return         A boolean true or false.
<         -: 1182:   *
<         -: 1183:   *  This compares the elements of two ranges using the binary_pred
<         -: 1184:   *  parameter, and returns true or
<         -: 1185:   *  false depending on whether all of the corresponding elements of the
<         -: 1186:   *  ranges are equal.
<         -: 1187:  */
<         -: 1188:  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
<         -: 1189:    inline bool
<         -: 1190:    equal(_IIter1 __first1, _IIter1 __last1,
<         -: 1191:	  _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
<         -: 1192:    {
<         -: 1193:      // concept requirements
<         -: 1194:      __glibcxx_function_requires(_InputIteratorConcept<_IIter1>)
<         -: 1195:      __glibcxx_function_requires(_InputIteratorConcept<_IIter2>)
<         -: 1196:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1197:      __glibcxx_requires_valid_range(__first2, __last2);
<         -: 1198:
<         -: 1199:      return _GLIBCXX_STD_A::__equal4(__first1, __last1, __first2, __last2,
<         -: 1200:				      __binary_pred);
<         -: 1201:    }
<         -: 1202:#endif // C++14
<         -: 1203:
<         -: 1204:  /**
<         -: 1205:   *  @brief Performs @b dictionary comparison on ranges.
<         -: 1206:   *  @ingroup sorting_algorithms
<         -: 1207:   *  @param  __first1  An input iterator.
<         -: 1208:   *  @param  __last1   An input iterator.
<         -: 1209:   *  @param  __first2  An input iterator.
<         -: 1210:   *  @param  __last2   An input iterator.
<         -: 1211:   *  @return   A boolean true or false.
<         -: 1212:   *
<         -: 1213:   *  <em>Returns true if the sequence of elements defined by the range
<         -: 1214:   *  [first1,last1) is lexicographically less than the sequence of elements
<         -: 1215:   *  defined by the range [first2,last2).  Returns false otherwise.</em>
<         -: 1216:   *  (Quoted from [25.3.8]/1.)  If the iterators are all character pointers,
<         -: 1217:   *  then this is an inline call to @c memcmp.
<         -: 1218:  */
<         -: 1219:  template<typename _II1, typename _II2>
<         -: 1220:    inline bool
<         -: 1221:    lexicographical_compare(_II1 __first1, _II1 __last1,
<         -: 1222:			    _II2 __first2, _II2 __last2)
<         -: 1223:    {
<         -: 1224:#ifdef _GLIBCXX_CONCEPT_CHECKS
<         -: 1225:      // concept requirements
<         -: 1226:      typedef typename iterator_traits<_II1>::value_type _ValueType1;
<         -: 1227:      typedef typename iterator_traits<_II2>::value_type _ValueType2;
<         -: 1228:#endif
<         -: 1229:      __glibcxx_function_requires(_InputIteratorConcept<_II1>)
<         -: 1230:      __glibcxx_function_requires(_InputIteratorConcept<_II2>)
<         -: 1231:      __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)
<         -: 1232:      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)
<         -: 1233:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1234:      __glibcxx_requires_valid_range(__first2, __last2);
<         -: 1235:
<         -: 1236:      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
<         -: 1237:						std::__niter_base(__last1),
<         -: 1238:						std::__niter_base(__first2),
<         -: 1239:						std::__niter_base(__last2));
<         -: 1240:    }
<         -: 1241:
<         -: 1242:  /**
<         -: 1243:   *  @brief Performs @b dictionary comparison on ranges.
<         -: 1244:   *  @ingroup sorting_algorithms
<         -: 1245:   *  @param  __first1  An input iterator.
<         -: 1246:   *  @param  __last1   An input iterator.
<         -: 1247:   *  @param  __first2  An input iterator.
<         -: 1248:   *  @param  __last2   An input iterator.
<         -: 1249:   *  @param  __comp  A @link comparison_functors comparison functor@endlink.
<         -: 1250:   *  @return   A boolean true or false.
<         -: 1251:   *
<         -: 1252:   *  The same as the four-parameter @c lexicographical_compare, but uses the
<         -: 1253:   *  comp parameter instead of @c <.
<         -: 1254:  */
<         -: 1255:  template<typename _II1, typename _II2, typename _Compare>
<         -: 1256:    inline bool
<         -: 1257:    lexicographical_compare(_II1 __first1, _II1 __last1,
<         -: 1258:			    _II2 __first2, _II2 __last2, _Compare __comp)
<         -: 1259:    {
<         -: 1260:      // concept requirements
<         -: 1261:      __glibcxx_function_requires(_InputIteratorConcept<_II1>)
<         -: 1262:      __glibcxx_function_requires(_InputIteratorConcept<_II2>)
<         -: 1263:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1264:      __glibcxx_requires_valid_range(__first2, __last2);
<         -: 1265:
<         -: 1266:      return std::__lexicographical_compare_impl
<         -: 1267:	(__first1, __last1, __first2, __last2,
<         -: 1268:	 __gnu_cxx::__ops::__iter_comp_iter(__comp));
<         -: 1269:    }
<         -: 1270:
<         -: 1271:  template<typename _InputIterator1, typename _InputIterator2,
<         -: 1272:	   typename _BinaryPredicate>
<         -: 1273:    pair<_InputIterator1, _InputIterator2>
<         -: 1274:    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
<         -: 1275:	       _InputIterator2 __first2, _BinaryPredicate __binary_pred)
<         -: 1276:    {
<         -: 1277:      while (__first1 != __last1 && __binary_pred(__first1, __first2))
<         -: 1278:	{
<         -: 1279:	  ++__first1;
<         -: 1280:	  ++__first2;
<         -: 1281:	}
<         -: 1282:      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
<         -: 1283:    }
<         -: 1284:
<         -: 1285:  /**
<         -: 1286:   *  @brief Finds the places in ranges which don't match.
<         -: 1287:   *  @ingroup non_mutating_algorithms
<         -: 1288:   *  @param  __first1  An input iterator.
<         -: 1289:   *  @param  __last1   An input iterator.
<         -: 1290:   *  @param  __first2  An input iterator.
<         -: 1291:   *  @return   A pair of iterators pointing to the first mismatch.
<         -: 1292:   *
<         -: 1293:   *  This compares the elements of two ranges using @c == and returns a pair
<         -: 1294:   *  of iterators.  The first iterator points into the first range, the
<         -: 1295:   *  second iterator points into the second range, and the elements pointed
<         -: 1296:   *  to by the iterators are not equal.
<         -: 1297:  */
<         -: 1298:  template<typename _InputIterator1, typename _InputIterator2>
<         -: 1299:    inline pair<_InputIterator1, _InputIterator2>
<         -: 1300:    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
<         -: 1301:	     _InputIterator2 __first2)
<         -: 1302:    {
<         -: 1303:      // concept requirements
<         -: 1304:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
<         -: 1305:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
<         -: 1306:      __glibcxx_function_requires(_EqualOpConcept<
<         -: 1307:	    typename iterator_traits<_InputIterator1>::value_type,
<         -: 1308:	    typename iterator_traits<_InputIterator2>::value_type>)
<         -: 1309:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1310:
<         -: 1311:      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2,
<         -: 1312:			     __gnu_cxx::__ops::__iter_equal_to_iter());
<         -: 1313:    }
<         -: 1314:
<         -: 1315:  /**
<         -: 1316:   *  @brief Finds the places in ranges which don't match.
<         -: 1317:   *  @ingroup non_mutating_algorithms
<         -: 1318:   *  @param  __first1  An input iterator.
<         -: 1319:   *  @param  __last1   An input iterator.
<         -: 1320:   *  @param  __first2  An input iterator.
<         -: 1321:   *  @param __binary_pred A binary predicate @link functors
<         -: 1322:   *         functor@endlink.
<         -: 1323:   *  @return   A pair of iterators pointing to the first mismatch.
<         -: 1324:   *
<         -: 1325:   *  This compares the elements of two ranges using the binary_pred
<         -: 1326:   *  parameter, and returns a pair
<         -: 1327:   *  of iterators.  The first iterator points into the first range, the
<         -: 1328:   *  second iterator points into the second range, and the elements pointed
<         -: 1329:   *  to by the iterators are not equal.
<         -: 1330:  */
<         -: 1331:  template<typename _InputIterator1, typename _InputIterator2,
<         -: 1332:	   typename _BinaryPredicate>
<         -: 1333:    inline pair<_InputIterator1, _InputIterator2>
<         -: 1334:    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
<         -: 1335:	     _InputIterator2 __first2, _BinaryPredicate __binary_pred)
---
>         -: 1127:	  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2);
>         -: 1128:	}
>         -: 1129:
>         -: 1130:      for (; __first1 != __last1 && __first2 != __last2;
>         -: 1131:	  ++__first1, (void)++__first2)
>         -: 1132:	if (!(*__first1 == *__first2))
>         -: 1133:	  return false;
>         -: 1134:      return __first1 == __last1 && __first2 == __last2;
>         -: 1135:    }
>         -: 1136:
>         -: 1137:  /**
>         -: 1138:   *  @brief Tests a range for element-wise equality.
>         -: 1139:   *  @ingroup non_mutating_algorithms
>         -: 1140:   *  @param  __first1  An input iterator.
>         -: 1141:   *  @param  __last1   An input iterator.
>         -: 1142:   *  @param  __first2  An input iterator.
>         -: 1143:   *  @param  __last2   An input iterator.
>         -: 1144:   *  @param __binary_pred A binary predicate @link functors
>         -: 1145:   *                  functor@endlink.
>         -: 1146:   *  @return         A boolean true or false.
>         -: 1147:   *
>         -: 1148:   *  This compares the elements of two ranges using the binary_pred
>         -: 1149:   *  parameter, and returns true or
>         -: 1150:   *  false depending on whether all of the corresponding elements of the
>         -: 1151:   *  ranges are equal.
>         -: 1152:  */
>         -: 1153:  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
>         -: 1154:    inline bool
>         -: 1155:    equal(_IIter1 __first1, _IIter1 __last1,
>         -: 1156:	  _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
>         -: 1157:    {
>         -: 1158:      // concept requirements
>         -: 1159:      __glibcxx_function_requires(_InputIteratorConcept<_IIter1>)
>         -: 1160:      __glibcxx_function_requires(_InputIteratorConcept<_IIter2>)
>         -: 1161:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1162:      __glibcxx_requires_valid_range(__first2, __last2);
>         -: 1163:
>         -: 1164:      using _RATag = random_access_iterator_tag;
>         -: 1165:      using _Cat1 = typename iterator_traits<_IIter1>::iterator_category;
>         -: 1166:      using _Cat2 = typename iterator_traits<_IIter2>::iterator_category;
>         -: 1167:      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
>         -: 1168:      if (_RAIters())
>         -: 1169:	{
>         -: 1170:	  auto __d1 = std::distance(__first1, __last1);
>         -: 1171:	  auto __d2 = std::distance(__first2, __last2);
>         -: 1172:	  if (__d1 != __d2)
>         -: 1173:	    return false;
>         -: 1174:	  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2,
>         -: 1175:				       __binary_pred);
>         -: 1176:	}
>         -: 1177:
>         -: 1178:      for (; __first1 != __last1 && __first2 != __last2;
>         -: 1179:	  ++__first1, (void)++__first2)
>         -: 1180:	if (!bool(__binary_pred(*__first1, *__first2)))
>         -: 1181:	  return false;
>         -: 1182:      return __first1 == __last1 && __first2 == __last2;
>         -: 1183:    }
>         -: 1184:#endif
>         -: 1185:
>         -: 1186:  /**
>         -: 1187:   *  @brief Performs @b dictionary comparison on ranges.
>         -: 1188:   *  @ingroup sorting_algorithms
>         -: 1189:   *  @param  __first1  An input iterator.
>         -: 1190:   *  @param  __last1   An input iterator.
>         -: 1191:   *  @param  __first2  An input iterator.
>         -: 1192:   *  @param  __last2   An input iterator.
>         -: 1193:   *  @return   A boolean true or false.
>         -: 1194:   *
>         -: 1195:   *  <em>Returns true if the sequence of elements defined by the range
>         -: 1196:   *  [first1,last1) is lexicographically less than the sequence of elements
>         -: 1197:   *  defined by the range [first2,last2).  Returns false otherwise.</em>
>         -: 1198:   *  (Quoted from [25.3.8]/1.)  If the iterators are all character pointers,
>         -: 1199:   *  then this is an inline call to @c memcmp.
>         -: 1200:  */
>         -: 1201:  template<typename _II1, typename _II2>
>         -: 1202:    inline bool
>         -: 1203:    lexicographical_compare(_II1 __first1, _II1 __last1,
>         -: 1204:			    _II2 __first2, _II2 __last2)
>         -: 1205:    {
>         -: 1206:#ifdef _GLIBCXX_CONCEPT_CHECKS
>         -: 1207:      // concept requirements
>         -: 1208:      typedef typename iterator_traits<_II1>::value_type _ValueType1;
>         -: 1209:      typedef typename iterator_traits<_II2>::value_type _ValueType2;
>         -: 1210:#endif
>         -: 1211:      __glibcxx_function_requires(_InputIteratorConcept<_II1>)
>         -: 1212:      __glibcxx_function_requires(_InputIteratorConcept<_II2>)
>         -: 1213:      __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)
>         -: 1214:      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)
>         -: 1215:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1216:      __glibcxx_requires_valid_range(__first2, __last2);
>         -: 1217:
>         -: 1218:      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
>         -: 1219:						std::__niter_base(__last1),
>         -: 1220:						std::__niter_base(__first2),
>         -: 1221:						std::__niter_base(__last2));
>         -: 1222:    }
>         -: 1223:
>         -: 1224:  /**
>         -: 1225:   *  @brief Performs @b dictionary comparison on ranges.
>         -: 1226:   *  @ingroup sorting_algorithms
>         -: 1227:   *  @param  __first1  An input iterator.
>         -: 1228:   *  @param  __last1   An input iterator.
>         -: 1229:   *  @param  __first2  An input iterator.
>         -: 1230:   *  @param  __last2   An input iterator.
>         -: 1231:   *  @param  __comp  A @link comparison_functors comparison functor@endlink.
>         -: 1232:   *  @return   A boolean true or false.
>         -: 1233:   *
>         -: 1234:   *  The same as the four-parameter @c lexicographical_compare, but uses the
>         -: 1235:   *  comp parameter instead of @c <.
>         -: 1236:  */
>         -: 1237:  template<typename _II1, typename _II2, typename _Compare>
>         -: 1238:    inline bool
>         -: 1239:    lexicographical_compare(_II1 __first1, _II1 __last1,
>         -: 1240:			    _II2 __first2, _II2 __last2, _Compare __comp)
>         -: 1241:    {
>         -: 1242:      // concept requirements
>         -: 1243:      __glibcxx_function_requires(_InputIteratorConcept<_II1>)
>         -: 1244:      __glibcxx_function_requires(_InputIteratorConcept<_II2>)
>         -: 1245:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1246:      __glibcxx_requires_valid_range(__first2, __last2);
>         -: 1247:
>         -: 1248:      return std::__lexicographical_compare_impl
>         -: 1249:	(__first1, __last1, __first2, __last2,
>         -: 1250:	 __gnu_cxx::__ops::__iter_comp_iter(__comp));
>         -: 1251:    }
>         -: 1252:
>         -: 1253:  template<typename _InputIterator1, typename _InputIterator2,
>         -: 1254:	   typename _BinaryPredicate>
>         -: 1255:    pair<_InputIterator1, _InputIterator2>
>         -: 1256:    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
>         -: 1257:	       _InputIterator2 __first2, _BinaryPredicate __binary_pred)
>         -: 1258:    {
>         -: 1259:      while (__first1 != __last1 && __binary_pred(__first1, __first2))
>         -: 1260:        {
>         -: 1261:	  ++__first1;
>         -: 1262:	  ++__first2;
>         -: 1263:        }
>         -: 1264:      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
>         -: 1265:    }
>         -: 1266:
>         -: 1267:  /**
>         -: 1268:   *  @brief Finds the places in ranges which don't match.
>         -: 1269:   *  @ingroup non_mutating_algorithms
>         -: 1270:   *  @param  __first1  An input iterator.
>         -: 1271:   *  @param  __last1   An input iterator.
>         -: 1272:   *  @param  __first2  An input iterator.
>         -: 1273:   *  @return   A pair of iterators pointing to the first mismatch.
>         -: 1274:   *
>         -: 1275:   *  This compares the elements of two ranges using @c == and returns a pair
>         -: 1276:   *  of iterators.  The first iterator points into the first range, the
>         -: 1277:   *  second iterator points into the second range, and the elements pointed
>         -: 1278:   *  to by the iterators are not equal.
>         -: 1279:  */
>         -: 1280:  template<typename _InputIterator1, typename _InputIterator2>
>         -: 1281:    inline pair<_InputIterator1, _InputIterator2>
>         -: 1282:    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
>         -: 1283:	     _InputIterator2 __first2)
>         -: 1284:    {
>         -: 1285:      // concept requirements
>         -: 1286:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
>         -: 1287:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
>         -: 1288:      __glibcxx_function_requires(_EqualOpConcept<
>         -: 1289:	    typename iterator_traits<_InputIterator1>::value_type,
>         -: 1290:	    typename iterator_traits<_InputIterator2>::value_type>)
>         -: 1291:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1292:
>         -: 1293:      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2,
>         -: 1294:			     __gnu_cxx::__ops::__iter_equal_to_iter());
>         -: 1295:    }
>         -: 1296:
>         -: 1297:  /**
>         -: 1298:   *  @brief Finds the places in ranges which don't match.
>         -: 1299:   *  @ingroup non_mutating_algorithms
>         -: 1300:   *  @param  __first1  An input iterator.
>         -: 1301:   *  @param  __last1   An input iterator.
>         -: 1302:   *  @param  __first2  An input iterator.
>         -: 1303:   *  @param __binary_pred A binary predicate @link functors
>         -: 1304:   *         functor@endlink.
>         -: 1305:   *  @return   A pair of iterators pointing to the first mismatch.
>         -: 1306:   *
>         -: 1307:   *  This compares the elements of two ranges using the binary_pred
>         -: 1308:   *  parameter, and returns a pair
>         -: 1309:   *  of iterators.  The first iterator points into the first range, the
>         -: 1310:   *  second iterator points into the second range, and the elements pointed
>         -: 1311:   *  to by the iterators are not equal.
>         -: 1312:  */
>         -: 1313:  template<typename _InputIterator1, typename _InputIterator2,
>         -: 1314:	   typename _BinaryPredicate>
>         -: 1315:    inline pair<_InputIterator1, _InputIterator2>
>         -: 1316:    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
>         -: 1317:	     _InputIterator2 __first2, _BinaryPredicate __binary_pred)
>         -: 1318:    {
>         -: 1319:      // concept requirements
>         -: 1320:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
>         -: 1321:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
>         -: 1322:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1323:
>         -: 1324:      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2,
>         -: 1325:	__gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
>         -: 1326:    }
>         -: 1327:
>         -: 1328:#if __cplusplus > 201103L
>         -: 1329:
>         -: 1330:  template<typename _InputIterator1, typename _InputIterator2,
>         -: 1331:	   typename _BinaryPredicate>
>         -: 1332:    pair<_InputIterator1, _InputIterator2>
>         -: 1333:    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
>         -: 1334:	       _InputIterator2 __first2, _InputIterator2 __last2,
>         -: 1335:	       _BinaryPredicate __binary_pred)
2808,2814c1339,1345
<         -: 1337:      // concept requirements
<         -: 1338:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
<         -: 1339:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
<         -: 1340:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1341:
<         -: 1342:      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2,
<         -: 1343:	__gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
---
>         -: 1337:      while (__first1 != __last1 && __first2 != __last2
>         -: 1338:	     && __binary_pred(__first1, __first2))
>         -: 1339:        {
>         -: 1340:	  ++__first1;
>         -: 1341:	  ++__first2;
>         -: 1342:        }
>         -: 1343:      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
2817,2913c1348,1425
<         -: 1346:#if __cplusplus > 201103L
<         -: 1347:
<         -: 1348:  template<typename _InputIterator1, typename _InputIterator2,
<         -: 1349:	   typename _BinaryPredicate>
<         -: 1350:    pair<_InputIterator1, _InputIterator2>
<         -: 1351:    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
<         -: 1352:	       _InputIterator2 __first2, _InputIterator2 __last2,
<         -: 1353:	       _BinaryPredicate __binary_pred)
<         -: 1354:    {
<         -: 1355:      while (__first1 != __last1 && __first2 != __last2
<         -: 1356:	     && __binary_pred(__first1, __first2))
<         -: 1357:	{
<         -: 1358:	  ++__first1;
<         -: 1359:	  ++__first2;
<         -: 1360:	}
<         -: 1361:      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
<         -: 1362:    }
<         -: 1363:
<         -: 1364:  /**
<         -: 1365:   *  @brief Finds the places in ranges which don't match.
<         -: 1366:   *  @ingroup non_mutating_algorithms
<         -: 1367:   *  @param  __first1  An input iterator.
<         -: 1368:   *  @param  __last1   An input iterator.
<         -: 1369:   *  @param  __first2  An input iterator.
<         -: 1370:   *  @param  __last2   An input iterator.
<         -: 1371:   *  @return   A pair of iterators pointing to the first mismatch.
<         -: 1372:   *
<         -: 1373:   *  This compares the elements of two ranges using @c == and returns a pair
<         -: 1374:   *  of iterators.  The first iterator points into the first range, the
<         -: 1375:   *  second iterator points into the second range, and the elements pointed
<         -: 1376:   *  to by the iterators are not equal.
<         -: 1377:  */
<         -: 1378:  template<typename _InputIterator1, typename _InputIterator2>
<         -: 1379:    inline pair<_InputIterator1, _InputIterator2>
<         -: 1380:    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
<         -: 1381:	     _InputIterator2 __first2, _InputIterator2 __last2)
<         -: 1382:    {
<         -: 1383:      // concept requirements
<         -: 1384:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
<         -: 1385:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
<         -: 1386:      __glibcxx_function_requires(_EqualOpConcept<
<         -: 1387:	    typename iterator_traits<_InputIterator1>::value_type,
<         -: 1388:	    typename iterator_traits<_InputIterator2>::value_type>)
<         -: 1389:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1390:      __glibcxx_requires_valid_range(__first2, __last2);
<         -: 1391:
<         -: 1392:      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2, __last2,
<         -: 1393:			     __gnu_cxx::__ops::__iter_equal_to_iter());
<         -: 1394:    }
<         -: 1395:
<         -: 1396:  /**
<         -: 1397:   *  @brief Finds the places in ranges which don't match.
<         -: 1398:   *  @ingroup non_mutating_algorithms
<         -: 1399:   *  @param  __first1  An input iterator.
<         -: 1400:   *  @param  __last1   An input iterator.
<         -: 1401:   *  @param  __first2  An input iterator.
<         -: 1402:   *  @param  __last2   An input iterator.
<         -: 1403:   *  @param __binary_pred A binary predicate @link functors
<         -: 1404:   *         functor@endlink.
<         -: 1405:   *  @return   A pair of iterators pointing to the first mismatch.
<         -: 1406:   *
<         -: 1407:   *  This compares the elements of two ranges using the binary_pred
<         -: 1408:   *  parameter, and returns a pair
<         -: 1409:   *  of iterators.  The first iterator points into the first range, the
<         -: 1410:   *  second iterator points into the second range, and the elements pointed
<         -: 1411:   *  to by the iterators are not equal.
<         -: 1412:  */
<         -: 1413:  template<typename _InputIterator1, typename _InputIterator2,
<         -: 1414:	   typename _BinaryPredicate>
<         -: 1415:    inline pair<_InputIterator1, _InputIterator2>
<         -: 1416:    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
<         -: 1417:	     _InputIterator2 __first2, _InputIterator2 __last2,
<         -: 1418:	     _BinaryPredicate __binary_pred)
<         -: 1419:    {
<         -: 1420:      // concept requirements
<         -: 1421:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
<         -: 1422:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
<         -: 1423:      __glibcxx_requires_valid_range(__first1, __last1);
<         -: 1424:      __glibcxx_requires_valid_range(__first2, __last2);
<         -: 1425:
<         -: 1426:      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2, __last2,
<         -: 1427:			     __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
<         -: 1428:    }
<         -: 1429:#endif
<         -: 1430:
<         -: 1431:_GLIBCXX_END_NAMESPACE_ALGO
<         -: 1432:_GLIBCXX_END_NAMESPACE_VERSION
<         -: 1433:} // namespace std
<         -: 1434:
<         -: 1435:// NB: This file is included within many other C++ includes, as a way
<         -: 1436:// of getting the base algorithms. So, make sure that parallel bits
<         -: 1437:// come in too if requested.
<         -: 1438:#ifdef _GLIBCXX_PARALLEL
<         -: 1439:# include <parallel/algobase.h>
<         -: 1440:#endif
<         -: 1441:
<         -: 1442:#endif
---
>         -: 1346:  /**
>         -: 1347:   *  @brief Finds the places in ranges which don't match.
>         -: 1348:   *  @ingroup non_mutating_algorithms
>         -: 1349:   *  @param  __first1  An input iterator.
>         -: 1350:   *  @param  __last1   An input iterator.
>         -: 1351:   *  @param  __first2  An input iterator.
>         -: 1352:   *  @param  __last2   An input iterator.
>         -: 1353:   *  @return   A pair of iterators pointing to the first mismatch.
>         -: 1354:   *
>         -: 1355:   *  This compares the elements of two ranges using @c == and returns a pair
>         -: 1356:   *  of iterators.  The first iterator points into the first range, the
>         -: 1357:   *  second iterator points into the second range, and the elements pointed
>         -: 1358:   *  to by the iterators are not equal.
>         -: 1359:  */
>         -: 1360:  template<typename _InputIterator1, typename _InputIterator2>
>         -: 1361:    inline pair<_InputIterator1, _InputIterator2>
>         -: 1362:    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
>         -: 1363:	     _InputIterator2 __first2, _InputIterator2 __last2)
>         -: 1364:    {
>         -: 1365:      // concept requirements
>         -: 1366:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
>         -: 1367:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
>         -: 1368:      __glibcxx_function_requires(_EqualOpConcept<
>         -: 1369:	    typename iterator_traits<_InputIterator1>::value_type,
>         -: 1370:	    typename iterator_traits<_InputIterator2>::value_type>)
>         -: 1371:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1372:      __glibcxx_requires_valid_range(__first2, __last2);
>         -: 1373:
>         -: 1374:      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2, __last2,
>         -: 1375:			     __gnu_cxx::__ops::__iter_equal_to_iter());
>         -: 1376:    }
>         -: 1377:
>         -: 1378:  /**
>         -: 1379:   *  @brief Finds the places in ranges which don't match.
>         -: 1380:   *  @ingroup non_mutating_algorithms
>         -: 1381:   *  @param  __first1  An input iterator.
>         -: 1382:   *  @param  __last1   An input iterator.
>         -: 1383:   *  @param  __first2  An input iterator.
>         -: 1384:   *  @param  __last2   An input iterator.
>         -: 1385:   *  @param __binary_pred A binary predicate @link functors
>         -: 1386:   *         functor@endlink.
>         -: 1387:   *  @return   A pair of iterators pointing to the first mismatch.
>         -: 1388:   *
>         -: 1389:   *  This compares the elements of two ranges using the binary_pred
>         -: 1390:   *  parameter, and returns a pair
>         -: 1391:   *  of iterators.  The first iterator points into the first range, the
>         -: 1392:   *  second iterator points into the second range, and the elements pointed
>         -: 1393:   *  to by the iterators are not equal.
>         -: 1394:  */
>         -: 1395:  template<typename _InputIterator1, typename _InputIterator2,
>         -: 1396:	   typename _BinaryPredicate>
>         -: 1397:    inline pair<_InputIterator1, _InputIterator2>
>         -: 1398:    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
>         -: 1399:	     _InputIterator2 __first2, _InputIterator2 __last2,
>         -: 1400:	     _BinaryPredicate __binary_pred)
>         -: 1401:    {
>         -: 1402:      // concept requirements
>         -: 1403:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
>         -: 1404:      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
>         -: 1405:      __glibcxx_requires_valid_range(__first1, __last1);
>         -: 1406:      __glibcxx_requires_valid_range(__first2, __last2);
>         -: 1407:
>         -: 1408:      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2, __last2,
>         -: 1409:			     __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
>         -: 1410:    }
>         -: 1411:#endif
>         -: 1412:
>         -: 1413:_GLIBCXX_END_NAMESPACE_ALGO
>         -: 1414:} // namespace std
>         -: 1415:
>         -: 1416:// NB: This file is included within many other C++ includes, as a way
>         -: 1417:// of getting the base algorithms. So, make sure that parallel bits
>         -: 1418:// come in too if requested. 
>         -: 1419:#ifdef _GLIBCXX_PARALLEL
>         -: 1420:# include <parallel/algobase.h>
>         -: 1421:#endif
>         -: 1422:
>         -: 1423:#endif
