1c1
<         -:    0:Source:/usr/include/c++/8/bits/unique_ptr.h
---
>         -:    0:Source:/usr/include/c++/7/bits/unique_ptr.h
5c5
<         -:    3:// Copyright (C) 2008-2018 Free Software Foundation, Inc.
---
>         -:    3:// Copyright (C) 2008-2017 Free Software Foundation, Inc.
53,178c53,97
<         -:   51:#pragma GCC diagnostic push
<         -:   52:#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
<         -:   53:  template<typename> class auto_ptr;
<         -:   54:#pragma GCC diagnostic pop
<         -:   55:#endif
<         -:   56:
<         -:   57:  /// Primary template of default_delete, used by unique_ptr
<         -:   58:  template<typename _Tp>
<         -:   59:    struct default_delete
<         -:   60:    {
<         -:   61:      /// Default constructor
<         -:   62:      constexpr default_delete() noexcept = default;
<         -:   63:
<         -:   64:      /** @brief Converting constructor.
<         -:   65:       *
<         -:   66:       * Allows conversion from a deleter for arrays of another type, @p _Up,
<         -:   67:       * only if @p _Up* is convertible to @p _Tp*.
<         -:   68:       */
<         -:   69:      template<typename _Up, typename = typename
<         -:   70:	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
<         -:   71:        default_delete(const default_delete<_Up>&) noexcept { }
<         -:   72:
<         -:   73:      /// Calls @c delete @p __ptr
<         -:   74:      void
<       12*:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<       12*:   81:	delete __ptr;
<       12*:   82:      }
< ------------------
< _ZNKSt14default_deleteIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEEEclEPS5_:
<     #####:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<     #####:   81:	delete __ptr;
<     #####:   82:      }
< ------------------
< _ZNKSt14default_deleteIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEEEclEPS5_:
<     #####:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<     #####:   81:	delete __ptr;
<     #####:   82:      }
< ------------------
< _ZNKSt14default_deleteIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskEEclEPS2_:
<     #####:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<     #####:   81:	delete __ptr;
<     #####:   82:      }
< ------------------
< _ZNKSt14default_deleteIN7OpenDDS4DCPS19ThreadSynchResourceEEclEPS2_:
<         6:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<         6:   81:	delete __ptr;
<         6:   82:      }
< ------------------
< _ZNKSt14default_deleteIN7OpenDDS4DCPS18ReactorInterceptor7CommandEEclEPS3_:
<     #####:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<     #####:   81:	delete __ptr;
<     #####:   82:      }
< ------------------
< _ZNKSt14default_deleteIN7OpenDDS4DCPS11ThreadSynchEEclEPS2_:
<         6:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<         6:   81:	delete __ptr;
<         6:   82:      }
< ------------------
< _ZNKSt14default_deleteIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEEEclEPS5_:
<     #####:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<     #####:   81:	delete __ptr;
<     #####:   82:      }
< ------------------
< _ZNKSt14default_deleteIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEEEclEPS5_:
<     #####:   75:      operator()(_Tp* __ptr) const
<         -:   76:      {
<         -:   77:	static_assert(!is_void<_Tp>::value,
<         -:   78:		      "can't delete pointer to incomplete type");
<         -:   79:	static_assert(sizeof(_Tp)>0,
<         -:   80:		      "can't delete pointer to incomplete type");
<     #####:   81:	delete __ptr;
<     #####:   82:      }
< ------------------
<         -:   83:    };
<         -:   84:
<         -:   85:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
<         -:   86:  // DR 740 - omit specialization for array objects with a compile time length
<         -:   87:  /// Specialization for arrays, default_delete.
<         -:   88:  template<typename _Tp>
<         -:   89:    struct default_delete<_Tp[]>
<         -:   90:    {
<         -:   91:    public:
<         -:   92:      /// Default constructor
<         -:   93:      constexpr default_delete() noexcept = default;
<         -:   94:
<         -:   95:      /** @brief Converting constructor.
---
>         -:   51:  template<typename> class auto_ptr;
>         -:   52:#endif
>         -:   53:
>         -:   54:  /// Primary template of default_delete, used by unique_ptr
>         -:   55:  template<typename _Tp>
>         -:   56:    struct default_delete
>         -:   57:    {
>         -:   58:      /// Default constructor
>         -:   59:      constexpr default_delete() noexcept = default;
>         -:   60:
>         -:   61:      /** @brief Converting constructor.
>         -:   62:       *
>         -:   63:       * Allows conversion from a deleter for arrays of another type, @p _Up,
>         -:   64:       * only if @p _Up* is convertible to @p _Tp*.
>         -:   65:       */
>         -:   66:      template<typename _Up, typename = typename
>         -:   67:	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
>         -:   68:        default_delete(const default_delete<_Up>&) noexcept { }
>         -:   69:
>         -:   70:      /// Calls @c delete @p __ptr
>         -:   71:      void
>        24:   72:      operator()(_Tp* __ptr) const
>         -:   73:      {
>         -:   74:	static_assert(!is_void<_Tp>::value,
>         -:   75:		      "can't delete pointer to incomplete type");
>         -:   76:	static_assert(sizeof(_Tp)>0,
>         -:   77:		      "can't delete pointer to incomplete type");
>        24:   78:	delete __ptr;
>        24:   79:      }
>         -:   80:    };
>         -:   81:
>         -:   82:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
>         -:   83:  // DR 740 - omit specialization for array objects with a compile time length
>         -:   84:  /// Specialization for arrays, default_delete.
>         -:   85:  template<typename _Tp>
>         -:   86:    struct default_delete<_Tp[]>
>         -:   87:    {
>         -:   88:    public:
>         -:   89:      /// Default constructor
>         -:   90:      constexpr default_delete() noexcept = default;
>         -:   91:
>         -:   92:      /** @brief Converting constructor.
>         -:   93:       *
>         -:   94:       * Allows conversion from a deleter for arrays of another type, such as
>         -:   95:       * a const-qualified version of @p _Tp.
180,223c99,142
<         -:   97:       * Allows conversion from a deleter for arrays of another type, such as
<         -:   98:       * a const-qualified version of @p _Tp.
<         -:   99:       *
<         -:  100:       * Conversions from types derived from @c _Tp are not allowed because
<         -:  101:       * it is unsafe to @c delete[] an array of derived types through a
<         -:  102:       * pointer to the base type.
<         -:  103:       */
<         -:  104:      template<typename _Up, typename = typename
<         -:  105:	       enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type>
<         -:  106:        default_delete(const default_delete<_Up[]>&) noexcept { }
<         -:  107:
<         -:  108:      /// Calls @c delete[] @p __ptr
<         -:  109:      template<typename _Up>
<         -:  110:      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
<         -:  111:	operator()(_Up* __ptr) const
<         -:  112:      {
<         -:  113:	static_assert(sizeof(_Tp)>0,
<         -:  114:		      "can't delete pointer to incomplete type");
<         -:  115:	delete [] __ptr;
<         -:  116:      }
<         -:  117:    };
<         -:  118:
<         -:  119:  template <typename _Tp, typename _Dp>
<         -:  120:    class __uniq_ptr_impl
<         -:  121:    {
<         -:  122:      template <typename _Up, typename _Ep, typename = void>
<         -:  123:	struct _Ptr
<         -:  124:	{
<         -:  125:	  using type = _Up*;
<         -:  126:	};
<         -:  127:
<         -:  128:      template <typename _Up, typename _Ep>
<         -:  129:	struct
<         -:  130:	_Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
<         -:  131:	{
<         -:  132:	  using type = typename remove_reference<_Ep>::type::pointer;
<         -:  133:	};
<         -:  134:
<         -:  135:    public:
<         -:  136:      using _DeleterConstraint = enable_if<
<         -:  137:        __and_<__not_<is_pointer<_Dp>>,
<         -:  138:	       is_default_constructible<_Dp>>::value>;
<         -:  139:
<         -:  140:      using pointer = typename _Ptr<_Tp, _Dp>::type;
---
>         -:   97:       * Conversions from types derived from @c _Tp are not allowed because
>         -:   98:       * it is unsafe to @c delete[] an array of derived types through a
>         -:   99:       * pointer to the base type.
>         -:  100:       */
>         -:  101:      template<typename _Up, typename = typename
>         -:  102:	       enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type>
>         -:  103:        default_delete(const default_delete<_Up[]>&) noexcept { }
>         -:  104:
>         -:  105:      /// Calls @c delete[] @p __ptr
>         -:  106:      template<typename _Up>
>         -:  107:      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
>         -:  108:	operator()(_Up* __ptr) const
>         -:  109:      {
>         -:  110:	static_assert(sizeof(_Tp)>0,
>         -:  111:		      "can't delete pointer to incomplete type");
>         -:  112:	delete [] __ptr;
>         -:  113:      }
>         -:  114:    };
>         -:  115:
>         -:  116:  template <typename _Tp, typename _Dp>
>     #####:  117:    class __uniq_ptr_impl
>         -:  118:    {
>         -:  119:      template <typename _Up, typename _Ep, typename = void>
>         -:  120:	struct _Ptr
>         -:  121:	{
>         -:  122:	  using type = _Up*;
>         -:  123:	};
>         -:  124:
>         -:  125:      template <typename _Up, typename _Ep>
>         -:  126:	struct
>         -:  127:	_Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
>         -:  128:	{
>         -:  129:	  using type = typename remove_reference<_Ep>::type::pointer;
>         -:  130:	};
>         -:  131:
>         -:  132:    public:
>         -:  133:      using _DeleterConstraint = enable_if<
>         -:  134:        __and_<__not_<is_pointer<_Dp>>,
>         -:  135:	       is_default_constructible<_Dp>>::value>;
>         -:  136:
>         -:  137:      using pointer = typename _Ptr<_Tp, _Dp>::type;
>         -:  138:
>        24:  139:      __uniq_ptr_impl() = default;
>        12:  140:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
225,687c144,210
<       12*:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EEC2Ev:
<         6:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EEC2Ev:
<         6:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEC2Ev:
<     #####:  142:      __uniq_ptr_impl() = default;
< ------------------
<        6*:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEC2EPS2_:
<         6:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEC2EPS2_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEC2EPS2_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEC2EPS2_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2EPS0_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EEC2EPS3_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2EPS0_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2EPS0_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2EPS0_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2EPS0_:
<     #####:  143:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
< ------------------
<         -:  144:
<         -:  145:      template<typename _Del>
<     #####:  146:      __uniq_ptr_impl(pointer __p, _Del&& __d)
<     #####:  147:	: _M_t(__p, std::forward<_Del>(__d)) { }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_EEPS0_OT_:
<     #####:  146:      __uniq_ptr_impl(pointer __p, _Del&& __d)
<     #####:  147:	: _M_t(__p, std::forward<_Del>(__d)) { }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EEC2IS5_EEPS3_OT_:
<     #####:  146:      __uniq_ptr_impl(pointer __p, _Del&& __d)
<     #####:  147:	: _M_t(__p, std::forward<_Del>(__d)) { }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_EEPS0_OT_:
<     #####:  146:      __uniq_ptr_impl(pointer __p, _Del&& __d)
<     #####:  147:	: _M_t(__p, std::forward<_Del>(__d)) { }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_EEPS0_OT_:
<     #####:  146:      __uniq_ptr_impl(pointer __p, _Del&& __d)
<     #####:  147:	: _M_t(__p, std::forward<_Del>(__d)) { }
< ------------------
<         -:  148:
<       30*:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EE6_M_ptrEv:
<        12:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE6_M_ptrEv:
<        12:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EE6_M_ptrEv:
<         6:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE6_M_ptrEv:
<     #####:  149:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
< ------------------
<      161*:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EE6_M_ptrEv:
<        12:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE6_M_ptrEv:
<        12:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EE6_M_ptrEv:
<       137:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
< _ZNKSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE6_M_ptrEv:
<     #####:  150:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
< ------------------
<       12*:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EE10_M_deleterEv:
<         6:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE10_M_deleterEv:
<         6:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
< _ZNSt15__uniq_ptr_implIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE10_M_deleterEv:
<     #####:  151:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
< ------------------
<         -:  152:      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }
<         -:  153:
<         -:  154:    private:
<         -:  155:      tuple<pointer, _Dp> _M_t;
<         -:  156:    };
<         -:  157:
<         -:  158:  /// 20.7.1.2 unique_ptr for single objects.
<         -:  159:  template <typename _Tp, typename _Dp = default_delete<_Tp>>
<         -:  160:    class unique_ptr
<         -:  161:    {
<         -:  162:      template <class _Up>
<         -:  163:      using _DeleterConstraint =
<         -:  164:	typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
<         -:  165:
<         -:  166:      __uniq_ptr_impl<_Tp, _Dp> _M_t;
<         -:  167:
<         -:  168:    public:
<         -:  169:      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
<         -:  170:      using element_type  = _Tp;
<         -:  171:      using deleter_type  = _Dp;
<         -:  172:
<         -:  173:      // helper template for detecting a safe conversion from another
<         -:  174:      // unique_ptr
<         -:  175:      template<typename _Up, typename _Ep>
<         -:  176:	using __safe_conversion_up = __and_<
<         -:  177:	        is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
<         -:  178:                __not_<is_array<_Up>>,
<         -:  179:                __or_<__and_<is_reference<deleter_type>,
<         -:  180:                             is_same<deleter_type, _Ep>>,
<         -:  181:                      __and_<__not_<is_reference<deleter_type>>,
<         -:  182:                             is_convertible<_Ep, deleter_type>>
<         -:  183:                >
<         -:  184:              >;
<         -:  185:
<         -:  186:      // Constructors.
<         -:  187:
<         -:  188:      /// Default constructor, creates a unique_ptr that owns nothing.
<         -:  189:      template <typename _Up = _Dp,
<         -:  190:		typename = _DeleterConstraint<_Up>>
<       12*:  191:	constexpr unique_ptr() noexcept
<       12*:  192:	: _M_t()
<       12*:  193:	{ }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEC2IS7_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEC2IS7_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EEC2IS4_vEEv:
<         6:  191:	constexpr unique_ptr() noexcept
<         6:  192:	: _M_t()
<         6:  193:	{ }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC1IS3_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EEC2IS4_vEEv:
<         6:  191:	constexpr unique_ptr() noexcept
<         6:  192:	: _M_t()
<         6:  193:	{ }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEC2IS7_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEC2IS7_vEEv:
<     #####:  191:	constexpr unique_ptr() noexcept
<     #####:  192:	: _M_t()
<     #####:  193:	{ }
< ------------------
<         -:  194:
<         -:  195:      /** Takes ownership of a pointer.
<         -:  196:       *
<         -:  197:       * @param __p  A pointer to an object of @c element_type
<         -:  198:       *
<         -:  199:       * The deleter will be value-initialized.
<         -:  200:       */
<         -:  201:      template <typename _Up = _Dp,
<         -:  202:		typename = _DeleterConstraint<_Up>>
<         -:  203:	explicit
<        6*:  204:	unique_ptr(pointer __p) noexcept
<        6*:  205:	: _M_t(__p)
<        6*:  206:        { }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEC2IS4_vEEPS2_:
<         6:  204:	unique_ptr(pointer __p) noexcept
<         6:  205:	: _M_t(__p)
<         6:  206:        { }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEC2IS4_vEEPS2_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEC2IS4_vEEPS2_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEC2IS4_vEEPS2_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEPS0_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EEC2IS5_vEEPS3_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEPS0_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEPS0_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEPS0_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2IS3_vEEPS0_:
<     #####:  204:	unique_ptr(pointer __p) noexcept
<     #####:  205:	: _M_t(__p)
<     #####:  206:        { }
< ------------------
<         -:  207:
<         -:  208:      /** Takes ownership of a pointer.
---
>         -:  142:      template<typename _Del>
>     #####:  143:      __uniq_ptr_impl(pointer __p, _Del&& __d)
>     #####:  144:	: _M_t(__p, std::forward<_Del>(__d)) { }
>         -:  145:
>        60:  146:      pointer&   _M_ptr() { return std::get<0>(_M_t); }
>        86:  147:      pointer    _M_ptr() const { return std::get<0>(_M_t); }
>        24:  148:      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
>         -:  149:      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }
>         -:  150:
>         -:  151:    private:
>         -:  152:      tuple<pointer, _Dp> _M_t;
>         -:  153:    };
>         -:  154:
>         -:  155:  /// 20.7.1.2 unique_ptr for single objects.
>         -:  156:  template <typename _Tp, typename _Dp = default_delete<_Tp>>
>         -:  157:    class unique_ptr
>         -:  158:    {
>         -:  159:      template <class _Up>
>         -:  160:      using _DeleterConstraint =
>         -:  161:	typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
>         -:  162:
>         -:  163:      __uniq_ptr_impl<_Tp, _Dp> _M_t;
>         -:  164:
>         -:  165:    public:
>         -:  166:      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
>         -:  167:      using element_type  = _Tp;
>         -:  168:      using deleter_type  = _Dp;
>         -:  169:
>         -:  170:      // helper template for detecting a safe conversion from another
>         -:  171:      // unique_ptr
>         -:  172:      template<typename _Up, typename _Ep>
>         -:  173:	using __safe_conversion_up = __and_<
>         -:  174:	        is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
>         -:  175:                __not_<is_array<_Up>>,
>         -:  176:                __or_<__and_<is_reference<deleter_type>,
>         -:  177:                             is_same<deleter_type, _Ep>>,
>         -:  178:                      __and_<__not_<is_reference<deleter_type>>,
>         -:  179:                             is_convertible<_Ep, deleter_type>>
>         -:  180:                >
>         -:  181:              >;
>         -:  182:
>         -:  183:      // Constructors.
>         -:  184:
>         -:  185:      /// Default constructor, creates a unique_ptr that owns nothing.
>         -:  186:      template <typename _Up = _Dp,
>         -:  187:		typename = _DeleterConstraint<_Up>>
>        24:  188:	constexpr unique_ptr() noexcept
>        24:  189:	: _M_t()
>        24:  190:	{ }
>         -:  191:
>         -:  192:      /** Takes ownership of a pointer.
>         -:  193:       *
>         -:  194:       * @param __p  A pointer to an object of @c element_type
>         -:  195:       *
>         -:  196:       * The deleter will be value-initialized.
>         -:  197:       */
>         -:  198:      template <typename _Up = _Dp,
>         -:  199:		typename = _DeleterConstraint<_Up>>
>         -:  200:	explicit
>        12:  201:	unique_ptr(pointer __p) noexcept
>        12:  202:	: _M_t(__p)
>        12:  203:        { }
>         -:  204:
>         -:  205:      /** Takes ownership of a pointer.
>         -:  206:       *
>         -:  207:       * @param __p  A pointer to an object of @c element_type
>         -:  208:       * @param __d  A reference to a deleter.
689,699c212,222
<         -:  210:       * @param __p  A pointer to an object of @c element_type
<         -:  211:       * @param __d  A reference to a deleter.
<         -:  212:       *
<         -:  213:       * The deleter will be initialized with @p __d
<         -:  214:       */
<         -:  215:      unique_ptr(pointer __p,
<         -:  216:	  typename conditional<is_reference<deleter_type>::value,
<         -:  217:	    deleter_type, const deleter_type&>::type __d) noexcept
<         -:  218:      : _M_t(__p, __d) { }
<         -:  219:
<         -:  220:      /** Takes ownership of a pointer.
---
>         -:  210:       * The deleter will be initialized with @p __d
>         -:  211:       */
>         -:  212:      unique_ptr(pointer __p,
>         -:  213:	  typename conditional<is_reference<deleter_type>::value,
>         -:  214:	    deleter_type, const deleter_type&>::type __d) noexcept
>         -:  215:      : _M_t(__p, __d) { }
>         -:  216:
>         -:  217:      /** Takes ownership of a pointer.
>         -:  218:       *
>         -:  219:       * @param __p  A pointer to an object of @c element_type
>         -:  220:       * @param __d  An rvalue reference to a deleter.
701,1293c224,355
<         -:  222:       * @param __p  A pointer to an object of @c element_type
<         -:  223:       * @param __d  An rvalue reference to a deleter.
<         -:  224:       *
<         -:  225:       * The deleter will be initialized with @p std::move(__d)
<         -:  226:       */
<         -:  227:      unique_ptr(pointer __p,
<         -:  228:	  typename remove_reference<deleter_type>::type&& __d) noexcept
<         -:  229:      : _M_t(std::move(__p), std::move(__d))
<         -:  230:      { static_assert(!std::is_reference<deleter_type>::value,
<         -:  231:		      "rvalue deleter bound to reference"); }
<         -:  232:
<         -:  233:      /// Creates a unique_ptr that owns nothing.
<         -:  234:      template <typename _Up = _Dp,
<         -:  235:		typename = _DeleterConstraint<_Up>>
<         -:  236:	constexpr unique_ptr(nullptr_t) noexcept : _M_t() { }
<         -:  237:
<         -:  238:      // Move constructors.
<         -:  239:
<         -:  240:      /// Move constructor.
<     #####:  241:      unique_ptr(unique_ptr&& __u) noexcept
<     #####:  242:      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2EOS4_:
<     #####:  241:      unique_ptr(unique_ptr&& __u) noexcept
<     #####:  242:      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EEC2EOS6_:
<     #####:  241:      unique_ptr(unique_ptr&& __u) noexcept
<     #####:  242:      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2EOS4_:
<     #####:  241:      unique_ptr(unique_ptr&& __u) noexcept
<     #####:  242:      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEC2EOS4_:
<     #####:  241:      unique_ptr(unique_ptr&& __u) noexcept
<     #####:  242:      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
< ------------------
<         -:  243:
<         -:  244:      /** @brief Converting constructor from another type
<         -:  245:       *
<         -:  246:       * Requires that the pointer owned by @p __u is convertible to the
<         -:  247:       * type of pointer owned by this object, @p __u does not own an array,
<         -:  248:       * and @p __u has a compatible deleter type.
<         -:  249:       */
<         -:  250:      template<typename _Up, typename _Ep, typename = _Require<
<         -:  251:               __safe_conversion_up<_Up, _Ep>,
<         -:  252:	       typename conditional<is_reference<_Dp>::value,
<         -:  253:				    is_same<_Ep, _Dp>,
<         -:  254:				    is_convertible<_Ep, _Dp>>::type>>
<         -:  255:	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
<         -:  256:	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
<         -:  257:	{ }
<         -:  258:
<         -:  259:#if _GLIBCXX_USE_DEPRECATED
<         -:  260:#pragma GCC diagnostic push
<         -:  261:#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
<         -:  262:      /// Converting constructor from @c auto_ptr
<         -:  263:      template<typename _Up, typename = _Require<
<         -:  264:	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
<         -:  265:	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
<         -:  266:#pragma GCC diagnostic pop
<         -:  267:#endif
<         -:  268:
<         -:  269:      /// Destructor, invokes the deleter if the stored pointer is not null.
<       18*:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<       18*:  272:	auto& __ptr = _M_t._M_ptr();
<       18*:  273:	if (__ptr != nullptr)
<       12*:  274:	  get_deleter()(__ptr);
<       18*:  275:	__ptr = pointer();
<       18*:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EED2Ev:
<         6:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<         6:  272:	auto& __ptr = _M_t._M_ptr();
<         6:  273:	if (__ptr != nullptr)
<         6:  274:	  get_deleter()(__ptr);
<         6:  275:	__ptr = pointer();
<         6:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EED2Ev:
<         6:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<         6:  272:	auto& __ptr = _M_t._M_ptr();
<         6:  273:	if (__ptr != nullptr)
<         6:  274:	  get_deleter()(__ptr);
<         6:  275:	__ptr = pointer();
<         6:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EED2Ev:
<         6:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<         6:  272:	auto& __ptr = _M_t._M_ptr();
<         6:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<         6:  275:	__ptr = pointer();
<         6:  276:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EED2Ev:
<     #####:  270:      ~unique_ptr() noexcept
<         -:  271:      {
<     #####:  272:	auto& __ptr = _M_t._M_ptr();
<     #####:  273:	if (__ptr != nullptr)
<     #####:  274:	  get_deleter()(__ptr);
<     #####:  275:	__ptr = pointer();
<     #####:  276:      }
< ------------------
<         -:  277:
<         -:  278:      // Assignment.
<         -:  279:
<         -:  280:      /** @brief Move assignment operator.
<         -:  281:       *
<         -:  282:       * @param __u  The object to transfer ownership from.
<         -:  283:       *
<         -:  284:       * Invokes the deleter first if this object owns a pointer.
<         -:  285:       */
<         -:  286:      unique_ptr&
<         -:  287:      operator=(unique_ptr&& __u) noexcept
<         -:  288:      {
<         -:  289:	reset(__u.release());
<         -:  290:	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
<         -:  291:	return *this;
<         -:  292:      }
<         -:  293:
<         -:  294:      /** @brief Assignment from another type.
<         -:  295:       *
<         -:  296:       * @param __u  The object to transfer ownership from, which owns a
<         -:  297:       *             convertible pointer to a non-array object.
<         -:  298:       *
<         -:  299:       * Invokes the deleter first if this object owns a pointer.
<         -:  300:       */
<         -:  301:      template<typename _Up, typename _Ep>
<         -:  302:        typename enable_if< __and_<
<         -:  303:          __safe_conversion_up<_Up, _Ep>,
<         -:  304:          is_assignable<deleter_type&, _Ep&&>
<         -:  305:          >::value,
<         -:  306:          unique_ptr&>::type
<         -:  307:	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
<         -:  308:	{
<         -:  309:	  reset(__u.release());
<         -:  310:	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
<         -:  311:	  return *this;
<         -:  312:	}
<         -:  313:
<         -:  314:      /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
<         -:  315:      unique_ptr&
<         -:  316:      operator=(nullptr_t) noexcept
<         -:  317:      {
<         -:  318:	reset();
<         -:  319:	return *this;
<         -:  320:      }
<         -:  321:
<         -:  322:      // Observers.
<         -:  323:
<         -:  324:      /// Dereference the stored pointer.
<         -:  325:      typename add_lvalue_reference<element_type>::type
<         -:  326:      operator*() const
<         -:  327:      {
<         -:  328:	__glibcxx_assert(get() != pointer());
<         -:  329:	return *get();
<         -:  330:      }
<         -:  331:
<         -:  332:      /// Return the stored pointer.
<         -:  333:      pointer
<       18*:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<       18*:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EEptEv:
<     #####:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<     #####:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EEptEv:
<        12:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<        12:  337:	return get();
<         -:  338:      }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEptEv:
<         6:  334:      operator->() const noexcept
<         -:  335:      {
<         -:  336:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
<         6:  337:	return get();
<         -:  338:      }
< ------------------
<         -:  339:
<         -:  340:      /// Return the stored pointer.
<         -:  341:      pointer
<      161*:  342:      get() const noexcept
<      161*:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EE3getEv:
<        12:  342:      get() const noexcept
<        12:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE3getEv:
<        12:  342:      get() const noexcept
<        12:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EE3getEv:
<       137:  342:      get() const noexcept
<       137:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE3getEv:
<     #####:  342:      get() const noexcept
<     #####:  343:      { return _M_t._M_ptr(); }
< ------------------
<         -:  344:
<         -:  345:      /// Return a reference to the stored deleter.
<         -:  346:      deleter_type&
<       12*:  347:      get_deleter() noexcept
<       12*:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EE11get_deleterEv:
<         6:  347:      get_deleter() noexcept
<         6:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EE11get_deleterEv:
<         6:  347:      get_deleter() noexcept
<         6:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE11get_deleterEv:
<     #####:  347:      get_deleter() noexcept
<     #####:  348:      { return _M_t._M_deleter(); }
< ------------------
<         -:  349:
<         -:  350:      /// Return a reference to the stored deleter.
<         -:  351:      const deleter_type&
<         -:  352:      get_deleter() const noexcept
<         -:  353:      { return _M_t._M_deleter(); }
---
>         -:  222:       * The deleter will be initialized with @p std::move(__d)
>         -:  223:       */
>         -:  224:      unique_ptr(pointer __p,
>         -:  225:	  typename remove_reference<deleter_type>::type&& __d) noexcept
>         -:  226:      : _M_t(std::move(__p), std::move(__d))
>         -:  227:      { static_assert(!std::is_reference<deleter_type>::value,
>         -:  228:		      "rvalue deleter bound to reference"); }
>         -:  229:
>         -:  230:      /// Creates a unique_ptr that owns nothing.
>         -:  231:      template <typename _Up = _Dp,
>         -:  232:		typename = _DeleterConstraint<_Up>>
>         -:  233:	constexpr unique_ptr(nullptr_t) noexcept : _M_t() { }
>         -:  234:
>         -:  235:      // Move constructors.
>         -:  236:
>         -:  237:      /// Move constructor.
>     #####:  238:      unique_ptr(unique_ptr&& __u) noexcept
>     #####:  239:      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
>         -:  240:
>         -:  241:      /** @brief Converting constructor from another type
>         -:  242:       *
>         -:  243:       * Requires that the pointer owned by @p __u is convertible to the
>         -:  244:       * type of pointer owned by this object, @p __u does not own an array,
>         -:  245:       * and @p __u has a compatible deleter type.
>         -:  246:       */
>         -:  247:      template<typename _Up, typename _Ep, typename = _Require<
>         -:  248:               __safe_conversion_up<_Up, _Ep>,
>         -:  249:	       typename conditional<is_reference<_Dp>::value,
>         -:  250:				    is_same<_Ep, _Dp>,
>         -:  251:				    is_convertible<_Ep, _Dp>>::type>>
>         -:  252:	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
>         -:  253:	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
>         -:  254:	{ }
>         -:  255:
>         -:  256:#if _GLIBCXX_USE_DEPRECATED
>         -:  257:      /// Converting constructor from @c auto_ptr
>         -:  258:      template<typename _Up, typename = _Require<
>         -:  259:	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
>         -:  260:	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
>         -:  261:#endif
>         -:  262:
>         -:  263:      /// Destructor, invokes the deleter if the stored pointer is not null.
>        36:  264:      ~unique_ptr() noexcept
>         -:  265:      {
>        36:  266:	auto& __ptr = _M_t._M_ptr();
>        36:  267:	if (__ptr != nullptr)
>        24:  268:	  get_deleter()(__ptr);
>        36:  269:	__ptr = pointer();
>        36:  270:      }
>         -:  271:
>         -:  272:      // Assignment.
>         -:  273:
>         -:  274:      /** @brief Move assignment operator.
>         -:  275:       *
>         -:  276:       * @param __u  The object to transfer ownership from.
>         -:  277:       *
>         -:  278:       * Invokes the deleter first if this object owns a pointer.
>         -:  279:       */
>         -:  280:      unique_ptr&
>         -:  281:      operator=(unique_ptr&& __u) noexcept
>         -:  282:      {
>         -:  283:	reset(__u.release());
>         -:  284:	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
>         -:  285:	return *this;
>         -:  286:      }
>         -:  287:
>         -:  288:      /** @brief Assignment from another type.
>         -:  289:       *
>         -:  290:       * @param __u  The object to transfer ownership from, which owns a
>         -:  291:       *             convertible pointer to a non-array object.
>         -:  292:       *
>         -:  293:       * Invokes the deleter first if this object owns a pointer.
>         -:  294:       */
>         -:  295:      template<typename _Up, typename _Ep>
>         -:  296:        typename enable_if< __and_<
>         -:  297:          __safe_conversion_up<_Up, _Ep>,
>         -:  298:          is_assignable<deleter_type&, _Ep&&>
>         -:  299:          >::value,
>         -:  300:          unique_ptr&>::type
>         -:  301:	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
>         -:  302:	{
>         -:  303:	  reset(__u.release());
>         -:  304:	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
>         -:  305:	  return *this;
>         -:  306:	}
>         -:  307:
>         -:  308:      /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
>         -:  309:      unique_ptr&
>         -:  310:      operator=(nullptr_t) noexcept
>         -:  311:      {
>         -:  312:	reset();
>         -:  313:	return *this;
>         -:  314:      }
>         -:  315:
>         -:  316:      // Observers.
>         -:  317:
>         -:  318:      /// Dereference the stored pointer.
>         -:  319:      typename add_lvalue_reference<element_type>::type
>         -:  320:      operator*() const
>         -:  321:      {
>         -:  322:	__glibcxx_assert(get() != pointer());
>         -:  323:	return *get();
>         -:  324:      }
>         -:  325:
>         -:  326:      /// Return the stored pointer.
>         -:  327:      pointer
>        28:  328:      operator->() const noexcept
>         -:  329:      {
>         -:  330:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
>        28:  331:	return get();
>         -:  332:      }
>         -:  333:
>         -:  334:      /// Return the stored pointer.
>         -:  335:      pointer
>        86:  336:      get() const noexcept
>        86:  337:      { return _M_t._M_ptr(); }
>         -:  338:
>         -:  339:      /// Return a reference to the stored deleter.
>         -:  340:      deleter_type&
>        24:  341:      get_deleter() noexcept
>        24:  342:      { return _M_t._M_deleter(); }
>         -:  343:
>         -:  344:      /// Return a reference to the stored deleter.
>         -:  345:      const deleter_type&
>         -:  346:      get_deleter() const noexcept
>         -:  347:      { return _M_t._M_deleter(); }
>         -:  348:
>         -:  349:      /// Return @c true if the stored pointer is not null.
>        58:  350:      explicit operator bool() const noexcept
>        58:  351:      { return get() == pointer() ? false : true; }
>         -:  352:
>         -:  353:      // Modifiers.
1295,1533c357,414
<         -:  355:      /// Return @c true if the stored pointer is not null.
<      143*:  356:      explicit operator bool() const noexcept
<      143*:  357:      { return get() == pointer() ? false : true; }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EEcvbEv:
<     #####:  356:      explicit operator bool() const noexcept
<     #####:  357:      { return get() == pointer() ? false : true; }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEcvbEv:
<     #####:  356:      explicit operator bool() const noexcept
<     #####:  357:      { return get() == pointer() ? false : true; }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEcvbEv:
<     #####:  356:      explicit operator bool() const noexcept
<     #####:  357:      { return get() == pointer() ? false : true; }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EEcvbEv:
<       137:  356:      explicit operator bool() const noexcept
<       137:  357:      { return get() == pointer() ? false : true; }
< ------------------
< _ZNKSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEEcvbEv:
<     #####:  356:      explicit operator bool() const noexcept
<     #####:  357:      { return get() == pointer() ? false : true; }
< ------------------
< _ZNKSt10unique_ptrIN7OpenDDS4DCPS19ThreadSynchResourceESt14default_deleteIS2_EEcvbEv:
<         6:  356:      explicit operator bool() const noexcept
<         6:  357:      { return get() == pointer() ? false : true; }
< ------------------
<         -:  358:
<         -:  359:      // Modifiers.
<         -:  360:
<         -:  361:      /// Release ownership of any stored pointer.
<         -:  362:      pointer
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE7releaseEv:
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS18ReactorInterceptor7CommandESt14default_deleteIS3_EE7releaseEv:
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE7releaseEv:
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE7releaseEv:
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE7releaseEv:
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE7releaseEv:
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE7releaseEv:
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE7releaseEv:
<     #####:  363:      release() noexcept
<         -:  364:      {
<     #####:  365:	pointer __p = get();
<     #####:  366:	_M_t._M_ptr() = pointer();
<     #####:  367:	return __p;
<         -:  368:      }
< ------------------
<         -:  369:
<         -:  370:      /** @brief Replace the stored pointer.
<         -:  371:       *
<         -:  372:       * @param __p  The new pointer to store.
<         -:  373:       *
<         -:  374:       * The deleter will be invoked if a pointer is already owned.
<         -:  375:       */
<         -:  376:      void
<        6*:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<        6*:  380:	swap(_M_t._M_ptr(), __p);
<        6*:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<        6*:  383:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE5resetEPS0_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE5resetEPS5_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE5resetEPS5_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EE5resetEPS2_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE5resetEPS0_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE5resetEPS0_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrI17ACE_Message_BlockN7OpenDDS4DCPS21Message_Block_DeleterEE5resetEPS0_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI17ACE_Message_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE5resetEPS5_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS30Cached_Allocator_With_OverflowI14ACE_Data_Block16ACE_Thread_MutexEESt14default_deleteIS5_EE5resetEPS5_:
<     #####:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<     #####:  380:	swap(_M_t._M_ptr(), __p);
<     #####:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<     #####:  383:      }
< ------------------
< _ZNSt10unique_ptrIN7OpenDDS4DCPS11ThreadSynchESt14default_deleteIS2_EE5resetEPS2_:
<         6:  377:      reset(pointer __p = pointer()) noexcept
<         -:  378:      {
<         -:  379:	using std::swap;
<         6:  380:	swap(_M_t._M_ptr(), __p);
<         6:  381:	if (__p != pointer())
<     #####:  382:	  get_deleter()(__p);
<         6:  383:      }
< ------------------
<         -:  384:
<         -:  385:      /// Exchange the pointer and deleter with another object.
<         -:  386:      void
<     #####:  387:      swap(unique_ptr& __u) noexcept
<         -:  388:      {
<         -:  389:	using std::swap;
<     #####:  390:	swap(_M_t, __u._M_t);
<     #####:  391:      }
<         -:  392:
<         -:  393:      // Disable copy from lvalue.
<         -:  394:      unique_ptr(const unique_ptr&) = delete;
<         -:  395:      unique_ptr& operator=(const unique_ptr&) = delete;
<         -:  396:  };
<         -:  397:
<         -:  398:  /// 20.7.1.3 unique_ptr for array objects with a runtime length
<         -:  399:  // [unique.ptr.runtime]
<         -:  400:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
<         -:  401:  // DR 740 - omit specialization for array objects with a compile time length
<         -:  402:  template<typename _Tp, typename _Dp>
<         -:  403:    class unique_ptr<_Tp[], _Dp>
<         -:  404:    {
<         -:  405:      template <typename _Up>
<         -:  406:      using _DeleterConstraint =
<         -:  407:	typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
<         -:  408:
<         -:  409:      __uniq_ptr_impl<_Tp, _Dp> _M_t;
<         -:  410:
<         -:  411:      template<typename _Up>
<         -:  412:	using __remove_cv = typename remove_cv<_Up>::type;
---
>         -:  355:      /// Release ownership of any stored pointer.
>         -:  356:      pointer
>     #####:  357:      release() noexcept
>         -:  358:      {
>     #####:  359:	pointer __p = get();
>     #####:  360:	_M_t._M_ptr() = pointer();
>     #####:  361:	return __p;
>         -:  362:      }
>         -:  363:
>         -:  364:      /** @brief Replace the stored pointer.
>         -:  365:       *
>         -:  366:       * @param __p  The new pointer to store.
>         -:  367:       *
>         -:  368:       * The deleter will be invoked if a pointer is already owned.
>         -:  369:       */
>         -:  370:      void
>        12:  371:      reset(pointer __p = pointer()) noexcept
>         -:  372:      {
>         -:  373:	using std::swap;
>        12:  374:	swap(_M_t._M_ptr(), __p);
>        12:  375:	if (__p != pointer())
>     #####:  376:	  get_deleter()(__p);
>        12:  377:      }
>         -:  378:
>         -:  379:      /// Exchange the pointer and deleter with another object.
>         -:  380:      void
>     #####:  381:      swap(unique_ptr& __u) noexcept
>         -:  382:      {
>         -:  383:	using std::swap;
>     #####:  384:	swap(_M_t, __u._M_t);
>     #####:  385:      }
>         -:  386:
>         -:  387:      // Disable copy from lvalue.
>         -:  388:      unique_ptr(const unique_ptr&) = delete;
>         -:  389:      unique_ptr& operator=(const unique_ptr&) = delete;
>         -:  390:  };
>         -:  391:
>         -:  392:  /// 20.7.1.3 unique_ptr for array objects with a runtime length
>         -:  393:  // [unique.ptr.runtime]
>         -:  394:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
>         -:  395:  // DR 740 - omit specialization for array objects with a compile time length
>         -:  396:  template<typename _Tp, typename _Dp>
>         -:  397:    class unique_ptr<_Tp[], _Dp>
>         -:  398:    {
>         -:  399:      template <typename _Up>
>         -:  400:      using _DeleterConstraint =
>         -:  401:	typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
>         -:  402:
>         -:  403:      __uniq_ptr_impl<_Tp, _Dp> _M_t;
>         -:  404:
>         -:  405:      template<typename _Up>
>         -:  406:	using __remove_cv = typename remove_cv<_Up>::type;
>         -:  407:
>         -:  408:      // like is_base_of<_Tp, _Up> but false if unqualified types are the same
>         -:  409:      template<typename _Up>
>         -:  410:	using __is_derived_Tp
>         -:  411:	  = __and_< is_base_of<_Tp, _Up>,
>         -:  412:		    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;
1535,1641c416,522
<         -:  414:      // like is_base_of<_Tp, _Up> but false if unqualified types are the same
<         -:  415:      template<typename _Up>
<         -:  416:	using __is_derived_Tp
<         -:  417:	  = __and_< is_base_of<_Tp, _Up>,
<         -:  418:		    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;
<         -:  419:
<         -:  420:    public:
<         -:  421:      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
<         -:  422:      using element_type  = _Tp;
<         -:  423:      using deleter_type  = _Dp;
<         -:  424:
<         -:  425:      // helper template for detecting a safe conversion from another
<         -:  426:      // unique_ptr
<         -:  427:      template<typename _Up, typename _Ep,
<         -:  428:               typename _Up_up = unique_ptr<_Up, _Ep>,
<         -:  429:	       typename _Up_element_type = typename _Up_up::element_type>
<         -:  430:	using __safe_conversion_up = __and_<
<         -:  431:          is_array<_Up>,
<         -:  432:          is_same<pointer, element_type*>,
<         -:  433:          is_same<typename _Up_up::pointer, _Up_element_type*>,
<         -:  434:          is_convertible<_Up_element_type(*)[], element_type(*)[]>,
<         -:  435:          __or_<__and_<is_reference<deleter_type>, is_same<deleter_type, _Ep>>,
<         -:  436:                __and_<__not_<is_reference<deleter_type>>,
<         -:  437:                       is_convertible<_Ep, deleter_type>>>
<         -:  438:        >;
<         -:  439:
<         -:  440:      // helper template for detecting a safe conversion from a raw pointer
<         -:  441:      template<typename _Up>
<         -:  442:        using __safe_conversion_raw = __and_<
<         -:  443:          __or_<__or_<is_same<_Up, pointer>,
<         -:  444:                      is_same<_Up, nullptr_t>>,
<         -:  445:                __and_<is_pointer<_Up>,
<         -:  446:                       is_same<pointer, element_type*>,
<         -:  447:                       is_convertible<
<         -:  448:                         typename remove_pointer<_Up>::type(*)[],
<         -:  449:                         element_type(*)[]>
<         -:  450:                >
<         -:  451:          >
<         -:  452:        >;
<         -:  453:
<         -:  454:      // Constructors.
<         -:  455:
<         -:  456:      /// Default constructor, creates a unique_ptr that owns nothing.
<         -:  457:      template <typename _Up = _Dp,
<         -:  458:		typename = _DeleterConstraint<_Up>>
<         -:  459:	constexpr unique_ptr() noexcept
<         -:  460:	: _M_t()
<         -:  461:	{ }
<         -:  462:
<         -:  463:      /** Takes ownership of a pointer.
<         -:  464:       *
<         -:  465:       * @param __p  A pointer to an array of a type safely convertible
<         -:  466:       * to an array of @c element_type
<         -:  467:       *
<         -:  468:       * The deleter will be value-initialized.
<         -:  469:       */
<         -:  470:      template<typename _Up,
<         -:  471:	       typename _Vp = _Dp,
<         -:  472:	       typename = _DeleterConstraint<_Vp>,
<         -:  473:	       typename = typename enable_if<
<         -:  474:                 __safe_conversion_raw<_Up>::value, bool>::type>
<         -:  475:	explicit
<         -:  476:	unique_ptr(_Up __p) noexcept
<         -:  477:	: _M_t(__p)
<         -:  478:        { }
<         -:  479:
<         -:  480:      /** Takes ownership of a pointer.
<         -:  481:       *
<         -:  482:       * @param __p  A pointer to an array of a type safely convertible
<         -:  483:       * to an array of @c element_type
<         -:  484:       * @param __d  A reference to a deleter.
<         -:  485:       *
<         -:  486:       * The deleter will be initialized with @p __d
<         -:  487:       */
<         -:  488:      template<typename _Up,
<         -:  489:               typename = typename enable_if<
<         -:  490:                 __safe_conversion_raw<_Up>::value, bool>::type>
<         -:  491:      unique_ptr(_Up __p,
<         -:  492:                 typename conditional<is_reference<deleter_type>::value,
<         -:  493:                 deleter_type, const deleter_type&>::type __d) noexcept
<         -:  494:      : _M_t(__p, __d) { }
<         -:  495:
<         -:  496:      /** Takes ownership of a pointer.
<         -:  497:       *
<         -:  498:       * @param __p  A pointer to an array of a type safely convertible
<         -:  499:       * to an array of @c element_type
<         -:  500:       * @param __d  A reference to a deleter.
<         -:  501:       *
<         -:  502:       * The deleter will be initialized with @p std::move(__d)
<         -:  503:       */
<         -:  504:      template<typename _Up,
<         -:  505:               typename = typename enable_if<
<         -:  506:                 __safe_conversion_raw<_Up>::value, bool>::type>
<         -:  507:      unique_ptr(_Up __p, typename
<         -:  508:		 remove_reference<deleter_type>::type&& __d) noexcept
<         -:  509:      : _M_t(std::move(__p), std::move(__d))
<         -:  510:      { static_assert(!is_reference<deleter_type>::value,
<         -:  511:		      "rvalue deleter bound to reference"); }
<         -:  512:
<         -:  513:      /// Move constructor.
<         -:  514:      unique_ptr(unique_ptr&& __u) noexcept
<         -:  515:      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
<         -:  516:
<         -:  517:      /// Creates a unique_ptr that owns nothing.
<         -:  518:      template <typename _Up = _Dp,
<         -:  519:		typename = _DeleterConstraint<_Up>>
<         -:  520:	constexpr unique_ptr(nullptr_t) noexcept : _M_t() { }
---
>         -:  414:    public:
>         -:  415:      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
>         -:  416:      using element_type  = _Tp;
>         -:  417:      using deleter_type  = _Dp;
>         -:  418:
>         -:  419:      // helper template for detecting a safe conversion from another
>         -:  420:      // unique_ptr
>         -:  421:      template<typename _Up, typename _Ep,
>         -:  422:               typename _Up_up = unique_ptr<_Up, _Ep>,
>         -:  423:	       typename _Up_element_type = typename _Up_up::element_type>
>         -:  424:	using __safe_conversion_up = __and_<
>         -:  425:          is_array<_Up>,
>         -:  426:          is_same<pointer, element_type*>,
>         -:  427:          is_same<typename _Up_up::pointer, _Up_element_type*>,
>         -:  428:          is_convertible<_Up_element_type(*)[], element_type(*)[]>,
>         -:  429:          __or_<__and_<is_reference<deleter_type>, is_same<deleter_type, _Ep>>,
>         -:  430:                __and_<__not_<is_reference<deleter_type>>,
>         -:  431:                       is_convertible<_Ep, deleter_type>>>
>         -:  432:        >;
>         -:  433:
>         -:  434:      // helper template for detecting a safe conversion from a raw pointer
>         -:  435:      template<typename _Up>
>         -:  436:        using __safe_conversion_raw = __and_<
>         -:  437:          __or_<__or_<is_same<_Up, pointer>,
>         -:  438:                      is_same<_Up, nullptr_t>>,
>         -:  439:                __and_<is_pointer<_Up>,
>         -:  440:                       is_same<pointer, element_type*>,
>         -:  441:                       is_convertible<
>         -:  442:                         typename remove_pointer<_Up>::type(*)[],
>         -:  443:                         element_type(*)[]>
>         -:  444:                >
>         -:  445:          >
>         -:  446:        >;
>         -:  447:
>         -:  448:      // Constructors.
>         -:  449:
>         -:  450:      /// Default constructor, creates a unique_ptr that owns nothing.
>         -:  451:      template <typename _Up = _Dp,
>         -:  452:		typename = _DeleterConstraint<_Up>>
>         -:  453:	constexpr unique_ptr() noexcept
>         -:  454:	: _M_t()
>         -:  455:	{ }
>         -:  456:
>         -:  457:      /** Takes ownership of a pointer.
>         -:  458:       *
>         -:  459:       * @param __p  A pointer to an array of a type safely convertible
>         -:  460:       * to an array of @c element_type
>         -:  461:       *
>         -:  462:       * The deleter will be value-initialized.
>         -:  463:       */
>         -:  464:      template<typename _Up,
>         -:  465:	       typename _Vp = _Dp,
>         -:  466:	       typename = _DeleterConstraint<_Vp>,
>         -:  467:	       typename = typename enable_if<
>         -:  468:                 __safe_conversion_raw<_Up>::value, bool>::type>
>         -:  469:	explicit
>         -:  470:	unique_ptr(_Up __p) noexcept
>         -:  471:	: _M_t(__p)
>         -:  472:        { }
>         -:  473:
>         -:  474:      /** Takes ownership of a pointer.
>         -:  475:       *
>         -:  476:       * @param __p  A pointer to an array of a type safely convertible
>         -:  477:       * to an array of @c element_type
>         -:  478:       * @param __d  A reference to a deleter.
>         -:  479:       *
>         -:  480:       * The deleter will be initialized with @p __d
>         -:  481:       */
>         -:  482:      template<typename _Up,
>         -:  483:               typename = typename enable_if<
>         -:  484:                 __safe_conversion_raw<_Up>::value, bool>::type>
>         -:  485:      unique_ptr(_Up __p,
>         -:  486:                 typename conditional<is_reference<deleter_type>::value,
>         -:  487:                 deleter_type, const deleter_type&>::type __d) noexcept
>         -:  488:      : _M_t(__p, __d) { }
>         -:  489:
>         -:  490:      /** Takes ownership of a pointer.
>         -:  491:       *
>         -:  492:       * @param __p  A pointer to an array of a type safely convertible
>         -:  493:       * to an array of @c element_type
>         -:  494:       * @param __d  A reference to a deleter.
>         -:  495:       *
>         -:  496:       * The deleter will be initialized with @p std::move(__d)
>         -:  497:       */
>         -:  498:      template<typename _Up,
>         -:  499:               typename = typename enable_if<
>         -:  500:                 __safe_conversion_raw<_Up>::value, bool>::type>
>         -:  501:      unique_ptr(_Up __p, typename
>         -:  502:		 remove_reference<deleter_type>::type&& __d) noexcept
>         -:  503:      : _M_t(std::move(__p), std::move(__d))
>         -:  504:      { static_assert(!is_reference<deleter_type>::value,
>         -:  505:		      "rvalue deleter bound to reference"); }
>         -:  506:
>         -:  507:      /// Move constructor.
>         -:  508:      unique_ptr(unique_ptr&& __u) noexcept
>         -:  509:      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
>         -:  510:
>         -:  511:      /// Creates a unique_ptr that owns nothing.
>         -:  512:      template <typename _Up = _Dp,
>         -:  513:		typename = _DeleterConstraint<_Up>>
>         -:  514:	constexpr unique_ptr(nullptr_t) noexcept : _M_t() { }
>         -:  515:
>         -:  516:      template<typename _Up, typename _Ep,
>         -:  517:	       typename = _Require<__safe_conversion_up<_Up, _Ep>>>
>         -:  518:	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
>         -:  519:	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
>         -:  520:	{ }
1643,1725c524,606
<         -:  522:      template<typename _Up, typename _Ep,
<         -:  523:	       typename = _Require<__safe_conversion_up<_Up, _Ep>>>
<         -:  524:	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
<         -:  525:	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
<         -:  526:	{ }
<         -:  527:
<         -:  528:      /// Destructor, invokes the deleter if the stored pointer is not null.
<         -:  529:      ~unique_ptr()
<         -:  530:      {
<         -:  531:	auto& __ptr = _M_t._M_ptr();
<         -:  532:	if (__ptr != nullptr)
<         -:  533:	  get_deleter()(__ptr);
<         -:  534:	__ptr = pointer();
<         -:  535:      }
<         -:  536:
<         -:  537:      // Assignment.
<         -:  538:
<         -:  539:      /** @brief Move assignment operator.
<         -:  540:       *
<         -:  541:       * @param __u  The object to transfer ownership from.
<         -:  542:       *
<         -:  543:       * Invokes the deleter first if this object owns a pointer.
<         -:  544:       */
<         -:  545:      unique_ptr&
<         -:  546:      operator=(unique_ptr&& __u) noexcept
<         -:  547:      {
<         -:  548:	reset(__u.release());
<         -:  549:	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
<         -:  550:	return *this;
<         -:  551:      }
<         -:  552:
<         -:  553:      /** @brief Assignment from another type.
<         -:  554:       *
<         -:  555:       * @param __u  The object to transfer ownership from, which owns a
<         -:  556:       *             convertible pointer to an array object.
<         -:  557:       *
<         -:  558:       * Invokes the deleter first if this object owns a pointer.
<         -:  559:       */
<         -:  560:      template<typename _Up, typename _Ep>
<         -:  561:	typename
<         -:  562:	enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
<         -:  563:                         is_assignable<deleter_type&, _Ep&&>
<         -:  564:                  >::value,
<         -:  565:                  unique_ptr&>::type
<         -:  566:	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
<         -:  567:	{
<         -:  568:	  reset(__u.release());
<         -:  569:	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
<         -:  570:	  return *this;
<         -:  571:	}
<         -:  572:
<         -:  573:      /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
<         -:  574:      unique_ptr&
<         -:  575:      operator=(nullptr_t) noexcept
<         -:  576:      {
<         -:  577:	reset();
<         -:  578:	return *this;
<         -:  579:      }
<         -:  580:
<         -:  581:      // Observers.
<         -:  582:
<         -:  583:      /// Access an element of owned array.
<         -:  584:      typename std::add_lvalue_reference<element_type>::type
<         -:  585:      operator[](size_t __i) const
<         -:  586:      {
<         -:  587:	__glibcxx_assert(get() != pointer());
<         -:  588:	return get()[__i];
<         -:  589:      }
<         -:  590:
<         -:  591:      /// Return the stored pointer.
<         -:  592:      pointer
<         -:  593:      get() const noexcept
<         -:  594:      { return _M_t._M_ptr(); }
<         -:  595:
<         -:  596:      /// Return a reference to the stored deleter.
<         -:  597:      deleter_type&
<         -:  598:      get_deleter() noexcept
<         -:  599:      { return _M_t._M_deleter(); }
<         -:  600:
<         -:  601:      /// Return a reference to the stored deleter.
<         -:  602:      const deleter_type&
<         -:  603:      get_deleter() const noexcept
<         -:  604:      { return _M_t._M_deleter(); }
---
>         -:  522:      /// Destructor, invokes the deleter if the stored pointer is not null.
>         -:  523:      ~unique_ptr()
>         -:  524:      {
>         -:  525:	auto& __ptr = _M_t._M_ptr();
>         -:  526:	if (__ptr != nullptr)
>         -:  527:	  get_deleter()(__ptr);
>         -:  528:	__ptr = pointer();
>         -:  529:      }
>         -:  530:
>         -:  531:      // Assignment.
>         -:  532:
>         -:  533:      /** @brief Move assignment operator.
>         -:  534:       *
>         -:  535:       * @param __u  The object to transfer ownership from.
>         -:  536:       *
>         -:  537:       * Invokes the deleter first if this object owns a pointer.
>         -:  538:       */
>         -:  539:      unique_ptr&
>         -:  540:      operator=(unique_ptr&& __u) noexcept
>         -:  541:      {
>         -:  542:	reset(__u.release());
>         -:  543:	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
>         -:  544:	return *this;
>         -:  545:      }
>         -:  546:
>         -:  547:      /** @brief Assignment from another type.
>         -:  548:       *
>         -:  549:       * @param __u  The object to transfer ownership from, which owns a
>         -:  550:       *             convertible pointer to an array object.
>         -:  551:       *
>         -:  552:       * Invokes the deleter first if this object owns a pointer.
>         -:  553:       */
>         -:  554:      template<typename _Up, typename _Ep>
>         -:  555:	typename
>         -:  556:	enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
>         -:  557:                         is_assignable<deleter_type&, _Ep&&>
>         -:  558:                  >::value,
>         -:  559:                  unique_ptr&>::type
>         -:  560:	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
>         -:  561:	{
>         -:  562:	  reset(__u.release());
>         -:  563:	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
>         -:  564:	  return *this;
>         -:  565:	}
>         -:  566:
>         -:  567:      /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
>         -:  568:      unique_ptr&
>         -:  569:      operator=(nullptr_t) noexcept
>         -:  570:      {
>         -:  571:	reset();
>         -:  572:	return *this;
>         -:  573:      }
>         -:  574:
>         -:  575:      // Observers.
>         -:  576:
>         -:  577:      /// Access an element of owned array.
>         -:  578:      typename std::add_lvalue_reference<element_type>::type
>         -:  579:      operator[](size_t __i) const
>         -:  580:      {
>         -:  581:	__glibcxx_assert(get() != pointer());
>         -:  582:	return get()[__i];
>         -:  583:      }
>         -:  584:
>         -:  585:      /// Return the stored pointer.
>         -:  586:      pointer
>         -:  587:      get() const noexcept
>         -:  588:      { return _M_t._M_ptr(); }
>         -:  589:
>         -:  590:      /// Return a reference to the stored deleter.
>         -:  591:      deleter_type&
>         -:  592:      get_deleter() noexcept
>         -:  593:      { return _M_t._M_deleter(); }
>         -:  594:
>         -:  595:      /// Return a reference to the stored deleter.
>         -:  596:      const deleter_type&
>         -:  597:      get_deleter() const noexcept
>         -:  598:      { return _M_t._M_deleter(); }
>         -:  599:
>         -:  600:      /// Return @c true if the stored pointer is not null.
>         -:  601:      explicit operator bool() const noexcept
>         -:  602:      { return get() == pointer() ? false : true; }
>         -:  603:
>         -:  604:      // Modifiers.
1727,1808c608,689
<         -:  606:      /// Return @c true if the stored pointer is not null.
<         -:  607:      explicit operator bool() const noexcept
<         -:  608:      { return get() == pointer() ? false : true; }
<         -:  609:
<         -:  610:      // Modifiers.
<         -:  611:
<         -:  612:      /// Release ownership of any stored pointer.
<         -:  613:      pointer
<         -:  614:      release() noexcept
<         -:  615:      {
<         -:  616:	pointer __p = get();
<         -:  617:	_M_t._M_ptr() = pointer();
<         -:  618:	return __p;
<         -:  619:      }
<         -:  620:
<         -:  621:      /** @brief Replace the stored pointer.
<         -:  622:       *
<         -:  623:       * @param __p  The new pointer to store.
<         -:  624:       *
<         -:  625:       * The deleter will be invoked if a pointer is already owned.
<         -:  626:       */
<         -:  627:      template <typename _Up,
<         -:  628:                typename = _Require<
<         -:  629:                  __or_<is_same<_Up, pointer>,
<         -:  630:                        __and_<is_same<pointer, element_type*>,
<         -:  631:                               is_pointer<_Up>,
<         -:  632:                               is_convertible<
<         -:  633:                                 typename remove_pointer<_Up>::type(*)[],
<         -:  634:                                 element_type(*)[]
<         -:  635:                               >
<         -:  636:                        >
<         -:  637:                  >
<         -:  638:               >>
<         -:  639:      void
<         -:  640:      reset(_Up __p) noexcept
<         -:  641:      {
<         -:  642:	pointer __ptr = __p;
<         -:  643:	using std::swap;
<         -:  644:	swap(_M_t._M_ptr(), __ptr);
<         -:  645:	if (__ptr != nullptr)
<         -:  646:	  get_deleter()(__ptr);
<         -:  647:      }
<         -:  648:
<         -:  649:      void reset(nullptr_t = nullptr) noexcept
<         -:  650:      {
<         -:  651:        reset(pointer());
<         -:  652:      }
<         -:  653:
<         -:  654:      /// Exchange the pointer and deleter with another object.
<         -:  655:      void
<         -:  656:      swap(unique_ptr& __u) noexcept
<         -:  657:      {
<         -:  658:	using std::swap;
<         -:  659:	swap(_M_t, __u._M_t);
<         -:  660:      }
<         -:  661:
<         -:  662:      // Disable copy from lvalue.
<         -:  663:      unique_ptr(const unique_ptr&) = delete;
<         -:  664:      unique_ptr& operator=(const unique_ptr&) = delete;
<         -:  665:    };
<         -:  666:
<         -:  667:  template<typename _Tp, typename _Dp>
<         -:  668:    inline
<         -:  669:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
<         -:  670:    // Constrained free swap overload, see p0185r1
<         -:  671:    typename enable_if<__is_swappable<_Dp>::value>::type
<         -:  672:#else
<         -:  673:    void
<         -:  674:#endif
<     #####:  675:    swap(unique_ptr<_Tp, _Dp>& __x,
<         -:  676:	 unique_ptr<_Tp, _Dp>& __y) noexcept
<     #####:  677:    { __x.swap(__y); }
<         -:  678:
<         -:  679:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
<         -:  680:  template<typename _Tp, typename _Dp>
<         -:  681:    typename enable_if<!__is_swappable<_Dp>::value>::type
<         -:  682:    swap(unique_ptr<_Tp, _Dp>&,
<         -:  683:	 unique_ptr<_Tp, _Dp>&) = delete;
<         -:  684:#endif
<         -:  685:
<         -:  686:  template<typename _Tp, typename _Dp,
<         -:  687:	   typename _Up, typename _Ep>
---
>         -:  606:      /// Release ownership of any stored pointer.
>         -:  607:      pointer
>         -:  608:      release() noexcept
>         -:  609:      {
>         -:  610:	pointer __p = get();
>         -:  611:	_M_t._M_ptr() = pointer();
>         -:  612:	return __p;
>         -:  613:      }
>         -:  614:
>         -:  615:      /** @brief Replace the stored pointer.
>         -:  616:       *
>         -:  617:       * @param __p  The new pointer to store.
>         -:  618:       *
>         -:  619:       * The deleter will be invoked if a pointer is already owned.
>         -:  620:       */
>         -:  621:      template <typename _Up,
>         -:  622:                typename = _Require<
>         -:  623:                  __or_<is_same<_Up, pointer>,
>         -:  624:                        __and_<is_same<pointer, element_type*>,
>         -:  625:                               is_pointer<_Up>,
>         -:  626:                               is_convertible<
>         -:  627:                                 typename remove_pointer<_Up>::type(*)[],
>         -:  628:                                 element_type(*)[]
>         -:  629:                               >
>         -:  630:                        >
>         -:  631:                  >
>         -:  632:               >>
>         -:  633:      void
>         -:  634:      reset(_Up __p) noexcept
>         -:  635:      {
>         -:  636:	pointer __ptr = __p;
>         -:  637:	using std::swap;
>         -:  638:	swap(_M_t._M_ptr(), __ptr);
>         -:  639:	if (__ptr != nullptr)
>         -:  640:	  get_deleter()(__ptr);
>         -:  641:      }
>         -:  642:
>         -:  643:      void reset(nullptr_t = nullptr) noexcept
>         -:  644:      {
>         -:  645:        reset(pointer());
>         -:  646:      }
>         -:  647:
>         -:  648:      /// Exchange the pointer and deleter with another object.
>         -:  649:      void
>         -:  650:      swap(unique_ptr& __u) noexcept
>         -:  651:      {
>         -:  652:	using std::swap;
>         -:  653:	swap(_M_t, __u._M_t);
>         -:  654:      }
>         -:  655:
>         -:  656:      // Disable copy from lvalue.
>         -:  657:      unique_ptr(const unique_ptr&) = delete;
>         -:  658:      unique_ptr& operator=(const unique_ptr&) = delete;
>         -:  659:    };
>         -:  660:
>         -:  661:  template<typename _Tp, typename _Dp>
>         -:  662:    inline
>         -:  663:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
>         -:  664:    // Constrained free swap overload, see p0185r1
>         -:  665:    typename enable_if<__is_swappable<_Dp>::value>::type
>         -:  666:#else
>         -:  667:    void
>         -:  668:#endif
>     #####:  669:    swap(unique_ptr<_Tp, _Dp>& __x,
>         -:  670:	 unique_ptr<_Tp, _Dp>& __y) noexcept
>     #####:  671:    { __x.swap(__y); }
>         -:  672:
>         -:  673:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
>         -:  674:  template<typename _Tp, typename _Dp>
>         -:  675:    typename enable_if<!__is_swappable<_Dp>::value>::type
>         -:  676:    swap(unique_ptr<_Tp, _Dp>&,
>         -:  677:	 unique_ptr<_Tp, _Dp>&) = delete;
>         -:  678:#endif
>         -:  679:
>         -:  680:  template<typename _Tp, typename _Dp,
>         -:  681:	   typename _Up, typename _Ep>
>         -:  682:    inline bool
>         -:  683:    operator==(const unique_ptr<_Tp, _Dp>& __x,
>         -:  684:	       const unique_ptr<_Up, _Ep>& __y)
>         -:  685:    { return __x.get() == __y.get(); }
>         -:  686:
>         -:  687:  template<typename _Tp, typename _Dp>
1810,1819c691,700
<         -:  689:    operator==(const unique_ptr<_Tp, _Dp>& __x,
<         -:  690:	       const unique_ptr<_Up, _Ep>& __y)
<         -:  691:    { return __x.get() == __y.get(); }
<         -:  692:
<         -:  693:  template<typename _Tp, typename _Dp>
<         -:  694:    inline bool
<         -:  695:    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
<         -:  696:    { return !__x; }
<         -:  697:
<         -:  698:  template<typename _Tp, typename _Dp>
---
>         -:  689:    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
>         -:  690:    { return !__x; }
>         -:  691:
>         -:  692:  template<typename _Tp, typename _Dp>
>         -:  693:    inline bool
>         -:  694:    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
>         -:  695:    { return !__x; }
>         -:  696:
>         -:  697:  template<typename _Tp, typename _Dp,
>         -:  698:	   typename _Up, typename _Ep>
1821,1825c702,706
<         -:  700:    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
<         -:  701:    { return !__x; }
<         -:  702:
<         -:  703:  template<typename _Tp, typename _Dp,
<         -:  704:	   typename _Up, typename _Ep>
---
>         -:  700:    operator!=(const unique_ptr<_Tp, _Dp>& __x,
>         -:  701:	       const unique_ptr<_Up, _Ep>& __y)
>         -:  702:    { return __x.get() != __y.get(); }
>         -:  703:
>         -:  704:  template<typename _Tp, typename _Dp>
1827,1845c708,717
<         -:  706:    operator!=(const unique_ptr<_Tp, _Dp>& __x,
<         -:  707:	       const unique_ptr<_Up, _Ep>& __y)
<         -:  708:    { return __x.get() != __y.get(); }
<         -:  709:
<         -:  710:  template<typename _Tp, typename _Dp>
<         -:  711:    inline bool
<      137*:  712:    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
<      137*:  713:    { return (bool)__x; }
< ------------------
< _ZStneIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EEbRKSt10unique_ptrIT_T0_EDn:
<     #####:  712:    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
<     #####:  713:    { return (bool)__x; }
< ------------------
< _ZStneIN7OpenDDS4DCPS27ThreadPerConnectionSendTaskESt14default_deleteIS2_EEbRKSt10unique_ptrIT_T0_EDn:
<       137:  712:    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
<       137:  713:    { return (bool)__x; }
< ------------------
<         -:  714:
<         -:  715:  template<typename _Tp, typename _Dp>
---
>        46:  706:    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
>        46:  707:    { return (bool)__x; }
>         -:  708:
>         -:  709:  template<typename _Tp, typename _Dp>
>         -:  710:    inline bool
>         -:  711:    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
>         -:  712:    { return (bool)__x; }
>         -:  713:
>         -:  714:  template<typename _Tp, typename _Dp,
>         -:  715:	   typename _Up, typename _Ep>
1847,1860c719,732
<         -:  717:    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
<         -:  718:    { return (bool)__x; }
<         -:  719:
<         -:  720:  template<typename _Tp, typename _Dp,
<         -:  721:	   typename _Up, typename _Ep>
<         -:  722:    inline bool
<         -:  723:    operator<(const unique_ptr<_Tp, _Dp>& __x,
<         -:  724:	      const unique_ptr<_Up, _Ep>& __y)
<         -:  725:    {
<         -:  726:      typedef typename
<         -:  727:	std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
<         -:  728:	                 typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
<         -:  729:      return std::less<_CT>()(__x.get(), __y.get());
<         -:  730:    }
---
>         -:  717:    operator<(const unique_ptr<_Tp, _Dp>& __x,
>         -:  718:	      const unique_ptr<_Up, _Ep>& __y)
>         -:  719:    {
>         -:  720:      typedef typename
>         -:  721:	std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
>         -:  722:	                 typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
>         -:  723:      return std::less<_CT>()(__x.get(), __y.get());
>         -:  724:    }
>         -:  725:
>         -:  726:  template<typename _Tp, typename _Dp>
>         -:  727:    inline bool
>         -:  728:    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
>         -:  729:    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
>         -:  730:								 nullptr); }
1864,1866c736,738
<         -:  734:    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
<         -:  735:    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
<         -:  736:								 nullptr); }
---
>         -:  734:    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
>         -:  735:    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
>         -:  736:								 __x.get()); }
1868,1875c740,747
<         -:  738:  template<typename _Tp, typename _Dp>
<         -:  739:    inline bool
<         -:  740:    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
<         -:  741:    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
<         -:  742:								 __x.get()); }
<         -:  743:
<         -:  744:  template<typename _Tp, typename _Dp,
<         -:  745:	   typename _Up, typename _Ep>
---
>         -:  738:  template<typename _Tp, typename _Dp,
>         -:  739:	   typename _Up, typename _Ep>
>         -:  740:    inline bool
>         -:  741:    operator<=(const unique_ptr<_Tp, _Dp>& __x,
>         -:  742:	       const unique_ptr<_Up, _Ep>& __y)
>         -:  743:    { return !(__y < __x); }
>         -:  744:
>         -:  745:  template<typename _Tp, typename _Dp>
1877,1886c749,758
<         -:  747:    operator<=(const unique_ptr<_Tp, _Dp>& __x,
<         -:  748:	       const unique_ptr<_Up, _Ep>& __y)
<         -:  749:    { return !(__y < __x); }
<         -:  750:
<         -:  751:  template<typename _Tp, typename _Dp>
<         -:  752:    inline bool
<         -:  753:    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
<         -:  754:    { return !(nullptr < __x); }
<         -:  755:
<         -:  756:  template<typename _Tp, typename _Dp>
---
>         -:  747:    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
>         -:  748:    { return !(nullptr < __x); }
>         -:  749:
>         -:  750:  template<typename _Tp, typename _Dp>
>         -:  751:    inline bool
>         -:  752:    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
>         -:  753:    { return !(__x < nullptr); }
>         -:  754:
>         -:  755:  template<typename _Tp, typename _Dp,
>         -:  756:	   typename _Up, typename _Ep>
1888,1892c760,764
<         -:  758:    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
<         -:  759:    { return !(__x < nullptr); }
<         -:  760:
<         -:  761:  template<typename _Tp, typename _Dp,
<         -:  762:	   typename _Up, typename _Ep>
---
>         -:  758:    operator>(const unique_ptr<_Tp, _Dp>& __x,
>         -:  759:	      const unique_ptr<_Up, _Ep>& __y)
>         -:  760:    { return (__y < __x); }
>         -:  761:
>         -:  762:  template<typename _Tp, typename _Dp>
1894,1896c766,768
<         -:  764:    operator>(const unique_ptr<_Tp, _Dp>& __x,
<         -:  765:	      const unique_ptr<_Up, _Ep>& __y)
<         -:  766:    { return (__y < __x); }
---
>         -:  764:    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
>         -:  765:    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
>         -:  766:								 __x.get()); }
1900,1902c772,774
<         -:  770:    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
<         -:  771:    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
<         -:  772:								 __x.get()); }
---
>         -:  770:    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
>         -:  771:    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
>         -:  772:								 nullptr); }
1904,1911c776,783
<         -:  774:  template<typename _Tp, typename _Dp>
<         -:  775:    inline bool
<         -:  776:    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
<         -:  777:    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
<         -:  778:								 nullptr); }
<         -:  779:
<         -:  780:  template<typename _Tp, typename _Dp,
<         -:  781:	   typename _Up, typename _Ep>
---
>         -:  774:  template<typename _Tp, typename _Dp,
>         -:  775:	   typename _Up, typename _Ep>
>         -:  776:    inline bool
>         -:  777:    operator>=(const unique_ptr<_Tp, _Dp>& __x,
>         -:  778:	       const unique_ptr<_Up, _Ep>& __y)
>         -:  779:    { return !(__x < __y); }
>         -:  780:
>         -:  781:  template<typename _Tp, typename _Dp>
1913,1921c785,793
<         -:  783:    operator>=(const unique_ptr<_Tp, _Dp>& __x,
<         -:  784:	       const unique_ptr<_Up, _Ep>& __y)
<         -:  785:    { return !(__x < __y); }
<         -:  786:
<         -:  787:  template<typename _Tp, typename _Dp>
<         -:  788:    inline bool
<         -:  789:    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
<         -:  790:    { return !(__x < nullptr); }
<         -:  791:
---
>         -:  783:    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
>         -:  784:    { return !(__x < nullptr); }
>         -:  785:
>         -:  786:  template<typename _Tp, typename _Dp>
>         -:  787:    inline bool
>         -:  788:    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
>         -:  789:    { return !(nullptr < __x); }
>         -:  790:
>         -:  791:  /// std::hash specialization for unique_ptr.
1923,1941c795,813
<         -:  793:    inline bool
<         -:  794:    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
<         -:  795:    { return !(nullptr < __x); }
<         -:  796:
<         -:  797:  /// std::hash specialization for unique_ptr.
<         -:  798:  template<typename _Tp, typename _Dp>
<         -:  799:    struct hash<unique_ptr<_Tp, _Dp>>
<         -:  800:    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
<         -:  801:    private __poison_hash<typename unique_ptr<_Tp, _Dp>::pointer>
<         -:  802:    {
<         -:  803:      size_t
<         -:  804:      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
<         -:  805:      {
<         -:  806:	typedef unique_ptr<_Tp, _Dp> _UP;
<         -:  807:	return std::hash<typename _UP::pointer>()(__u.get());
<         -:  808:      }
<         -:  809:    };
<         -:  810:
<         -:  811:#if __cplusplus > 201103L
---
>         -:  793:    struct hash<unique_ptr<_Tp, _Dp>>
>         -:  794:    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
>         -:  795:    private __poison_hash<typename unique_ptr<_Tp, _Dp>::pointer>
>         -:  796:    {
>         -:  797:      size_t
>         -:  798:      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
>         -:  799:      {
>         -:  800:	typedef unique_ptr<_Tp, _Dp> _UP;
>         -:  801:	return std::hash<typename _UP::pointer>()(__u.get());
>         -:  802:      }
>         -:  803:    };
>         -:  804:
>         -:  805:#if __cplusplus > 201103L
>         -:  806:
>         -:  807:#define __cpp_lib_make_unique 201304
>         -:  808:
>         -:  809:  template<typename _Tp>
>         -:  810:    struct _MakeUniq
>         -:  811:    { typedef unique_ptr<_Tp> __single_object; };
1943,1955c815,827
<         -:  813:#define __cpp_lib_make_unique 201304
<         -:  814:
<         -:  815:  template<typename _Tp>
<         -:  816:    struct _MakeUniq
<         -:  817:    { typedef unique_ptr<_Tp> __single_object; };
<         -:  818:
<         -:  819:  template<typename _Tp>
<         -:  820:    struct _MakeUniq<_Tp[]>
<         -:  821:    { typedef unique_ptr<_Tp[]> __array; };
<         -:  822:
<         -:  823:  template<typename _Tp, size_t _Bound>
<         -:  824:    struct _MakeUniq<_Tp[_Bound]>
<         -:  825:    { struct __invalid_type { }; };
---
>         -:  813:  template<typename _Tp>
>         -:  814:    struct _MakeUniq<_Tp[]>
>         -:  815:    { typedef unique_ptr<_Tp[]> __array; };
>         -:  816:
>         -:  817:  template<typename _Tp, size_t _Bound>
>         -:  818:    struct _MakeUniq<_Tp[_Bound]>
>         -:  819:    { struct __invalid_type { }; };
>         -:  820:
>         -:  821:  /// std::make_unique for single objects
>         -:  822:  template<typename _Tp, typename... _Args>
>         -:  823:    inline typename _MakeUniq<_Tp>::__single_object
>         -:  824:    make_unique(_Args&&... __args)
>         -:  825:    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
1957,1961c829,833
<         -:  827:  /// std::make_unique for single objects
<         -:  828:  template<typename _Tp, typename... _Args>
<         -:  829:    inline typename _MakeUniq<_Tp>::__single_object
<         -:  830:    make_unique(_Args&&... __args)
<         -:  831:    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
---
>         -:  827:  /// std::make_unique for arrays of unknown bound
>         -:  828:  template<typename _Tp>
>         -:  829:    inline typename _MakeUniq<_Tp>::__array
>         -:  830:    make_unique(size_t __num)
>         -:  831:    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
1963,1967c835,839
<         -:  833:  /// std::make_unique for arrays of unknown bound
<         -:  834:  template<typename _Tp>
<         -:  835:    inline typename _MakeUniq<_Tp>::__array
<         -:  836:    make_unique(size_t __num)
<         -:  837:    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
---
>         -:  833:  /// Disable std::make_unique for arrays of known bound
>         -:  834:  template<typename _Tp, typename... _Args>
>         -:  835:    inline typename _MakeUniq<_Tp>::__invalid_type
>         -:  836:    make_unique(_Args&&...) = delete;
>         -:  837:#endif
1969,1980c841,846
<         -:  839:  /// Disable std::make_unique for arrays of known bound
<         -:  840:  template<typename _Tp, typename... _Args>
<         -:  841:    inline typename _MakeUniq<_Tp>::__invalid_type
<         -:  842:    make_unique(_Args&&...) = delete;
<         -:  843:#endif
<         -:  844:
<         -:  845:  // @} group pointer_abstractions
<         -:  846:
<         -:  847:_GLIBCXX_END_NAMESPACE_VERSION
<         -:  848:} // namespace
<         -:  849:
<         -:  850:#endif /* _UNIQUE_PTR_H */
---
>         -:  839:  // @} group pointer_abstractions
>         -:  840:
>         -:  841:_GLIBCXX_END_NAMESPACE_VERSION
>         -:  842:} // namespace
>         -:  843:
>         -:  844:#endif /* _UNIQUE_PTR_H */
