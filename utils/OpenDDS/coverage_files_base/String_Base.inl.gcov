        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/String_Base.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id$
        -:    4:
        -:    5:#include "ace/Malloc_Base.h"
        -:    6:#include "ace/Min_Max.h"
        -:    7:#include "ace/OS_NS_string.h"
        -:    8:#include "ace/OS_Memory.h"
        -:    9:
        -:   10:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   11:
        -:   12:template <class ACE_CHAR_T> ACE_INLINE void
        -:   13:ACE_String_Base<ACE_CHAR_T>::dump (void) const
        -:   14:{
        -:   15:#if defined (ACE_HAS_DUMP)
        -:   16:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::dump");
        -:   17:#endif /* ACE_HAS_DUMP */
        -:   18:}
        -:   19:
        -:   20:// Assignment method (does not copy memory)
        -:   21:template <class ACE_CHAR_T> ACE_INLINE ACE_String_Base<ACE_CHAR_T> &
        -:   22:ACE_String_Base<ACE_CHAR_T>::assign_nocopy (const ACE_String_Base<ACE_CHAR_T> &s)
        -:   23:{
        -:   24:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::assign_nocopy");
        -:   25:  this->set (s.rep_, s.len_, false);
        -:   26:  return *this;
        -:   27:}
        -:   28:
        -:   29:template <class ACE_CHAR_T> ACE_INLINE typename ACE_String_Base<ACE_CHAR_T>::size_type
    #####:   30:ACE_String_Base<ACE_CHAR_T>::length (void) const
        -:   31:{
        -:   32:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::length");
    #####:   33:  return this->len_;
        -:   34:}
        -:   35:
        -:   36:template <class ACE_CHAR_T> ACE_INLINE size_t
        -:   37:ACE_String_Base<ACE_CHAR_T>::capacity (void) const
        -:   38:{
        -:   39:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::capacity");
        -:   40:  return this->buf_len_;
        -:   41:}
        -:   42:
        -:   43:template <class ACE_CHAR_T> ACE_INLINE bool
        -:   44:ACE_String_Base<ACE_CHAR_T>::is_empty (void) const
        -:   45:{
        -:   46:  return this->len_ == 0;
        -:   47:}
        -:   48:
        -:   49:template <class ACE_CHAR_T> ACE_INLINE bool
        -:   50:ACE_String_Base<ACE_CHAR_T>::empty (void) const
        -:   51:{
        -:   52:  return this->is_empty ();
        -:   53:}
        -:   54:
        -:   55:template <class ACE_CHAR_T> ACE_INLINE ACE_String_Base<ACE_CHAR_T>
        -:   56:ACE_String_Base<ACE_CHAR_T>::substr (
        -:   57:  typename ACE_String_Base<ACE_CHAR_T>::size_type offset,
        -:   58:  typename ACE_String_Base<ACE_CHAR_T>::size_type length) const
        -:   59:{
        -:   60:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::substr");
        -:   61:  return this->substring (offset, length);
        -:   62:}
        -:   63:
        -:   64:// Return the <slot'th> character in the string.
        -:   65:
        -:   66:template <class ACE_CHAR_T> ACE_INLINE const ACE_CHAR_T &
        -:   67:ACE_String_Base<ACE_CHAR_T>::operator[] (
        -:   68:  typename ACE_String_Base<ACE_CHAR_T>::size_type slot) const
        -:   69:{
        -:   70:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::operator[]");
        -:   71:  return this->rep_[slot];
        -:   72:}
        -:   73:
        -:   74:// Return the <slot'th> character in the string by reference.
        -:   75:
        -:   76:template <class ACE_CHAR_T> ACE_INLINE ACE_CHAR_T &
        -:   77:ACE_String_Base<ACE_CHAR_T>::operator[] (
        -:   78:  typename ACE_String_Base<ACE_CHAR_T>::size_type slot)
        -:   79:{
        -:   80:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::operator[]");
        -:   81:  return this->rep_[slot];
        -:   82:}
        -:   83:
        -:   84:template <class ACE_CHAR_T> ACE_INLINE const ACE_CHAR_T *
        -:   85:ACE_String_Base<ACE_CHAR_T>::fast_rep (void) const
        -:   86:{
        -:   87:  return this->rep_;
        -:   88:}
        -:   89:
        -:   90:template <class ACE_CHAR_T> ACE_INLINE const ACE_CHAR_T *
    #####:   91:ACE_String_Base<ACE_CHAR_T>::c_str (void) const
        -:   92:{
    #####:   93:  return this->rep_;
        -:   94:}
        -:   95:
        -:   96:// Less than comparison operator.
        -:   97:
        -:   98:template <class ACE_CHAR_T> ACE_INLINE bool
        -:   99:ACE_String_Base<ACE_CHAR_T>::operator < (const ACE_String_Base<ACE_CHAR_T> &s) const
        -:  100:{
        -:  101:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::operator <");
        -:  102:  return compare (s) < 0;
        -:  103:}
        -:  104:
        -:  105:// Greater than comparison operator.
        -:  106:
        -:  107:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  108:ACE_String_Base<ACE_CHAR_T>::operator > (const ACE_String_Base &s) const
        -:  109:{
        -:  110:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::operator >");
        -:  111:  return compare (s) > 0;
        -:  112:}
        -:  113:
        -:  114:
        -:  115:// Comparison operator.
        -:  116:
        -:  117:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  118:ACE_String_Base<ACE_CHAR_T>::operator!= (const ACE_String_Base<ACE_CHAR_T> &s) const
        -:  119:{
        -:  120:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::operator!=");
        -:  121:  return !(*this == s);
        -:  122:}
        -:  123:
        -:  124:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  125:ACE_String_Base<ACE_CHAR_T>::operator!= (const ACE_CHAR_T *s) const
        -:  126:{
        -:  127:  return !(*this == s);
        -:  128:}
        -:  129:
        -:  130:template <class ACE_CHAR_T> ACE_INLINE typename ACE_String_Base<ACE_CHAR_T>::size_type
        -:  131:ACE_String_Base<ACE_CHAR_T>::find (const ACE_String_Base<ACE_CHAR_T>&str,
        -:  132:                             typename ACE_String_Base<ACE_CHAR_T>::size_type pos) const
        -:  133:{
        -:  134:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::find");
        -:  135:  return this->find (str.rep_, pos);
        -:  136:}
        -:  137:
        -:  138:template <class ACE_CHAR_T> ACE_INLINE typename ACE_String_Base<ACE_CHAR_T>::size_type
        -:  139:ACE_String_Base<ACE_CHAR_T>::strstr (const ACE_String_Base<ACE_CHAR_T> &s) const
        -:  140:{
        -:  141:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::strstr");
        -:  142:  return this->find (s.rep_);
        -:  143:}
        -:  144:
        -:  145:template <class ACE_CHAR_T> ACE_INLINE typename ACE_String_Base<ACE_CHAR_T>::iterator
        -:  146:ACE_String_Base<ACE_CHAR_T>::begin (void)
        -:  147:{
        -:  148:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::begin");
        -:  149:  return iterator (*this);
        -:  150:}
        -:  151:
        -:  152:template <class ACE_CHAR_T> ACE_INLINE typename ACE_String_Base<ACE_CHAR_T>::const_iterator
        -:  153:ACE_String_Base<ACE_CHAR_T>::begin (void) const
        -:  154:{
        -:  155:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::begin");
        -:  156:  return const_iterator (*this);
        -:  157:}
        -:  158:
        -:  159:template <class ACE_CHAR_T> ACE_INLINE typename ACE_String_Base<ACE_CHAR_T>::iterator
        -:  160:ACE_String_Base<ACE_CHAR_T>::end (void)
        -:  161:{
        -:  162:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::end");
        -:  163:  return iterator (*this, 1);
        -:  164:}
        -:  165:
        -:  166:template <class ACE_CHAR_T> ACE_INLINE typename ACE_String_Base<ACE_CHAR_T>::const_iterator
        -:  167:ACE_String_Base<ACE_CHAR_T>::end (void) const
        -:  168:{
        -:  169:  ACE_TRACE ("ACE_String_Base<ACE_CHAR_T>::end");
        -:  170:  return const_iterator (*this, 1);
        -:  171:}
        -:  172:
        -:  173:// ----------------------------------------------
        -:  174:
        -:  175:template <class ACE_CHAR_T> ACE_INLINE
        -:  176:ACE_String_Base_Iterator <ACE_CHAR_T>::
        -:  177:ACE_String_Base_Iterator (ACE_String_Base <ACE_CHAR_T> & str, int end)
        -:  178:: str_ (&str),
        -:  179:  index_ (0 == end ? 0 : str.length ())
        -:  180:{
        -:  181:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::ACE_String_Base_Iterator");
        -:  182:}
        -:  183:
        -:  184:template <class ACE_CHAR_T> ACE_INLINE
        -:  185:ACE_String_Base_Iterator <ACE_CHAR_T>::
        -:  186:ACE_String_Base_Iterator (const ACE_String_Base_Iterator <ACE_CHAR_T> & iter)
        -:  187:: str_ (iter.str_),
        -:  188:  index_ (iter.index_)
        -:  189:{
        -:  190:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::ACE_String_Base_Iterator");
        -:  191:}
        -:  192:
        -:  193:template <class ACE_CHAR_T> ACE_INLINE
        -:  194:ACE_String_Base_Iterator <ACE_CHAR_T>::~ACE_String_Base_Iterator (void)
        -:  195:{
        -:  196:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::~ACE_String_Base_Iterator");
        -:  197:}
        -:  198:
        -:  199:template <class ACE_CHAR_T> ACE_INLINE
        -:  200:int ACE_String_Base_Iterator <ACE_CHAR_T>::done (void) const
        -:  201:{
        -:  202:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::done");
        -:  203:
        -:  204:  return this->index_ >= this->str_->length () ? 1 : 0;
        -:  205:}
        -:  206:
        -:  207:template <class ACE_CHAR_T> ACE_INLINE
        -:  208:ACE_CHAR_T & ACE_String_Base_Iterator <ACE_CHAR_T>::operator * (void)
        -:  209:{
        -:  210:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::operator *");
        -:  211:
        -:  212:  return this->str_->rep_[this->index_];
        -:  213:}
        -:  214:
        -:  215:template <class ACE_CHAR_T> ACE_INLINE
        -:  216:ACE_String_Base_Iterator <ACE_CHAR_T> &
        -:  217:ACE_String_Base_Iterator <ACE_CHAR_T>::operator ++ (void)
        -:  218:{
        -:  219:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::operator ++");
        -:  220:
        -:  221:  if (0 == this->done ())
        -:  222:    ++ this->index_;
        -:  223:
        -:  224:  return *this;
        -:  225:}
        -:  226:
        -:  227:template <class ACE_CHAR_T> ACE_INLINE
        -:  228:ACE_String_Base_Iterator <ACE_CHAR_T>
        -:  229:ACE_String_Base_Iterator <ACE_CHAR_T>::operator ++ (int)
        -:  230:{
        -:  231:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::operator ++ (int)");
        -:  232:
        -:  233:  ACE_String_Base_Iterator <ACE_CHAR_T> temp (*this);
        -:  234:
        -:  235:  if (0 == this->done ())
        -:  236:    ++ this->index_;
        -:  237:
        -:  238:  return temp;
        -:  239:}
        -:  240:
        -:  241:template <class ACE_CHAR_T> ACE_INLINE
        -:  242:ACE_String_Base_Iterator <ACE_CHAR_T> &
        -:  243:ACE_String_Base_Iterator <ACE_CHAR_T>::operator -- (void)
        -:  244:{
        -:  245:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::operator --");
        -:  246:
        -:  247:  if (0 < this->index_)
        -:  248:    -- this->index_;
        -:  249:
        -:  250:  return *this;
        -:  251:}
        -:  252:
        -:  253:template <class ACE_CHAR_T> ACE_INLINE
        -:  254:ACE_String_Base_Iterator <ACE_CHAR_T>
        -:  255:ACE_String_Base_Iterator <ACE_CHAR_T>::operator -- (int)
        -:  256:{
        -:  257:  ACE_TRACE ("ACE_String_Base_Iterator<ACE_CHAR_T>::operator -- (int)");
        -:  258:
        -:  259:  ACE_String_Base_Iterator <ACE_CHAR_T> temp (*this);
        -:  260:
        -:  261:  if (0 < this->index_)
        -:  262:    -- this->index_;
        -:  263:
        -:  264:  return temp;
        -:  265:}
        -:  266:
        -:  267:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  268:ACE_String_Base_Iterator <ACE_CHAR_T>::
        -:  269:operator == (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
        -:  270:{
        -:  271:  return this->index_ == rhs.index_;
        -:  272:}
        -:  273:
        -:  274:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  275:ACE_String_Base_Iterator <ACE_CHAR_T>::
        -:  276:operator != (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
        -:  277:{
        -:  278:  return this->index_ != rhs.index_;
        -:  279:}
        -:  280:
        -:  281:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  282:ACE_String_Base_Iterator <ACE_CHAR_T>::
        -:  283:operator < (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
        -:  284:{
        -:  285:  return this->index_ < rhs.index_;
        -:  286:}
        -:  287:
        -:  288:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  289:ACE_String_Base_Iterator <ACE_CHAR_T>::
        -:  290:operator > (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
        -:  291:{
        -:  292:  return this->index_ > rhs.index_;
        -:  293:}
        -:  294:
        -:  295:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  296:ACE_String_Base_Iterator <ACE_CHAR_T>::
        -:  297:operator >= (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
        -:  298:{
        -:  299:  return this->index_ >= rhs.index_;
        -:  300:}
        -:  301:
        -:  302:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  303:ACE_String_Base_Iterator <ACE_CHAR_T>::
        -:  304:operator <= (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
        -:  305:{
        -:  306:  return this->index_ <= rhs.index_;
        -:  307:}
        -:  308:
        -:  309:// ----------------------------------------------
        -:  310:
        -:  311:template <class ACE_CHAR_T> ACE_INLINE
        -:  312:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
        -:  313:ACE_String_Base_Const_Iterator (const ACE_String_Base <ACE_CHAR_T> & str, int end)
        -:  314:: str_ (&str),
        -:  315:  index_ (0 == end ? 0 : str.length ())
        -:  316:{
        -:  317:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::ACE_String_Base_Const_Iterator");
        -:  318:}
        -:  319:
        -:  320:template <class ACE_CHAR_T> ACE_INLINE
        -:  321:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
        -:  322:ACE_String_Base_Const_Iterator (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & iter)
        -:  323:: str_ (iter.str_),
        -:  324:  index_ (iter.index_)
        -:  325:{
        -:  326:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::ACE_String_Base_Const_Iterator");
        -:  327:}
        -:  328:
        -:  329:template <class ACE_CHAR_T> ACE_INLINE
        -:  330:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::~ACE_String_Base_Const_Iterator (void)
        -:  331:{
        -:  332:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::~ACE_String_Base_Const_Iterator");
        -:  333:}
        -:  334:
        -:  335:template <class ACE_CHAR_T> ACE_INLINE
        -:  336:int ACE_String_Base_Const_Iterator <ACE_CHAR_T>::done (void) const
        -:  337:{
        -:  338:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::done");
        -:  339:
        -:  340:  return this->index_ >= this->str_->length () ? 1 : 0;
        -:  341:}
        -:  342:
        -:  343:template <class ACE_CHAR_T> ACE_INLINE
        -:  344:const ACE_CHAR_T & ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator * (void)
        -:  345:{
        -:  346:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::operator *");
        -:  347:
        -:  348:  return this->str_->rep_[this->index_];
        -:  349:}
        -:  350:
        -:  351:template <class ACE_CHAR_T> ACE_INLINE
        -:  352:ACE_String_Base_Const_Iterator <ACE_CHAR_T> &
        -:  353:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator ++ (void)
        -:  354:{
        -:  355:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::operator ++");
        -:  356:
        -:  357:  if (0 == this->done ())
        -:  358:    ++ this->index_;
        -:  359:
        -:  360:  return *this;
        -:  361:}
        -:  362:
        -:  363:template <class ACE_CHAR_T> ACE_INLINE
        -:  364:ACE_String_Base_Const_Iterator <ACE_CHAR_T>
        -:  365:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator ++ (int)
        -:  366:{
        -:  367:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::operator ++ (int)");
        -:  368:
        -:  369:  ACE_String_Base_Const_Iterator <ACE_CHAR_T> temp (*this);
        -:  370:
        -:  371:  if (0 == this->done ())
        -:  372:    ++ this->index_;
        -:  373:
        -:  374:  return temp;
        -:  375:}
        -:  376:
        -:  377:template <class ACE_CHAR_T> ACE_INLINE
        -:  378:ACE_String_Base_Const_Iterator <ACE_CHAR_T> &
        -:  379:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator -- (void)
        -:  380:{
        -:  381:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::operator --");
        -:  382:
        -:  383:  if (0 < this->index_)
        -:  384:    -- this->index_;
        -:  385:
        -:  386:  return *this;
        -:  387:}
        -:  388:
        -:  389:template <class ACE_CHAR_T> ACE_INLINE
        -:  390:ACE_String_Base_Const_Iterator <ACE_CHAR_T>
        -:  391:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator -- (int)
        -:  392:{
        -:  393:  ACE_TRACE ("ACE_String_Base_Const_Iterator<ACE_CHAR_T>::operator -- (int)");
        -:  394:
        -:  395:  ACE_String_Base_Const_Iterator <ACE_CHAR_T> temp (*this);
        -:  396:
        -:  397:  if (0 < this->index_)
        -:  398:    -- this->index_;
        -:  399:
        -:  400:  return temp;
        -:  401:}
        -:  402:
        -:  403:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  404:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
        -:  405:operator == (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
        -:  406:{
        -:  407:  return this->index_ == rhs.index_;
        -:  408:}
        -:  409:
        -:  410:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  411:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
        -:  412:operator != (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
        -:  413:{
        -:  414:  return this->index_ != rhs.index_;
        -:  415:}
        -:  416:
        -:  417:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  418:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
        -:  419:operator < (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
        -:  420:{
        -:  421:  return this->index_ < rhs.index_;
        -:  422:}
        -:  423:
        -:  424:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  425:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
        -:  426:operator > (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
        -:  427:{
        -:  428:  return this->index_ > rhs.index_;
        -:  429:}
        -:  430:
        -:  431:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  432:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
        -:  433:operator >= (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
        -:  434:{
        -:  435:  return this->index_ >= rhs.index_;
        -:  436:}
        -:  437:
        -:  438:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  439:ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
        -:  440:operator <= (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
        -:  441:{
        -:  442:  return this->index_ <= rhs.index_;
        -:  443:}
        -:  444:
        -:  445:// ----------------------------------------------
        -:  446:
        -:  447:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  448:operator== (const ACE_CHAR_T *s,
        -:  449:            const ACE_String_Base<ACE_CHAR_T> &t)
        -:  450:{
        -:  451:  return t == s;
        -:  452:}
        -:  453:
        -:  454:template <class ACE_CHAR_T> ACE_INLINE bool
        -:  455:operator!= (const ACE_CHAR_T *s,
        -:  456:            const ACE_String_Base<ACE_CHAR_T> &t)
        -:  457:{
        -:  458:  return !(t == s);
        -:  459:}
        -:  460:
        -:  461:ACE_END_VERSIONED_NAMESPACE_DECL
