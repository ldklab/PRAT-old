        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/Addr.h
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2:
        -:    3://=============================================================================
        -:    4:/**
        -:    5: *  @file    Addr.h
        -:    6: *
        -:    7: *  $Id: Addr.h 935 2008-12-10 21:47:27Z mitza $
        -:    8: *
        -:    9: *  @author Douglas C. Schmidt <schmidt@cs.wustl.edu>
        -:   10: */
        -:   11://=============================================================================
        -:   12:
        -:   13:#ifndef ACE_ADDR_H
        -:   14:#define ACE_ADDR_H
        -:   15:
        -:   16:#include /**/ "ace/pre.h"
        -:   17:
        -:   18:#include /**/ "ace/ACE_export.h"
        -:   19:
        -:   20:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   21:# pragma once
        -:   22:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   23:
        -:   24:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   25:
        -:   26:/**
        -:   27: * @class ACE_Addr
        -:   28: *
        -:   29: * @brief Defines the base class for the "address family independent"
        -:   30: * address format.
        -:   31: */
        1:   32:class ACE_Export ACE_Addr
        -:   33:{
        -:   34:public:
        -:   35:  // = Initialization and termination methods.
        -:   36:  /// Initializes instance variables.
        -:   37:  ACE_Addr (int type = -1, int size = -1);
        -:   38:
        -:   39:  /// Destructor.
        -:   40:  virtual ~ACE_Addr (void);
        -:   41:
        -:   42:  // = Get/set the size of the address.
        -:   43:
        -:   44:  /// Return the size of the address.
        -:   45:  int get_size (void) const;
        -:   46:
        -:   47:  /// Sets the size of the address.
        -:   48:  void set_size (int size);
        -:   49:
        -:   50:  // = Get/set the type of the address.
        -:   51:
        -:   52:  /// Get the type of the address.
        -:   53:  int get_type (void) const;
        -:   54:
        -:   55:  /// Set the type of the address.
        -:   56:  void set_type (int type);
        -:   57:
        -:   58:  /// Return a pointer to the address.
        -:   59:  virtual void *get_addr (void) const;
        -:   60:
        -:   61:  /// Set a pointer to the address.
        -:   62:  virtual void set_addr (void *, int len);
        -:   63:
        -:   64:  // = Equality/inequality tests
        -:   65:  /// Check for address equality.
        -:   66:  bool operator == (const ACE_Addr &sap) const;
        -:   67:
        -:   68:  /// Check for address inequality.
        -:   69:  bool operator != (const ACE_Addr &sap) const;
        -:   70:
        -:   71:  /// Initializes instance variables.
        -:   72:  void base_set (int type, int size);
        -:   73:
        -:   74:  /// Wild-card address.
        -:   75:  static const ACE_Addr sap_any;
        -:   76:
        -:   77:  /// Returns a hash value.  This should be overwritten by a subclass
        -:   78:  /// that can produce a better hash value.
        -:   79:  virtual unsigned long hash (void) const;
        -:   80:
        -:   81:  /// Dump the state of an object.
        -:   82:  void dump (void) const;
        -:   83:
        -:   84:  /// Declare the dynamic allocation hooks.
        -:   85:  ACE_ALLOC_HOOK_DECLARE;
        -:   86:
        -:   87:protected:
        -:   88:  /// e.g., AF_UNIX, AF_INET, AF_SPIPE, etc.
        -:   89:  int addr_type_;
        -:   90:
        -:   91:  /// Number of bytes in the address.
        -:   92:  int addr_size_;
        -:   93:};
        -:   94:
        -:   95:ACE_END_VERSIONED_NAMESPACE_DECL
        -:   96:
        -:   97:#if defined (__ACE_INLINE__)
        -:   98:#include "ace/Addr.inl"
        -:   99:#endif /* __ACE_INLINE__ */
        -:  100:
        -:  101:#include /**/ "ace/post.h"
        -:  102:
        -:  103:#endif /* ACE_ADDR_H */
