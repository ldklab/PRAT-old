        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/OS_NS_sys_select.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id$
        -:    4:
        -:    5:#include "ace/OS_NS_errno.h"
        -:    6:#include "ace/OS_NS_macros.h"
        -:    7:#include "ace/Time_Value.h"
        -:    8:
        -:    9:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   10:
        -:   11:// It would be really cool to add another version of select that would
        -:   12:// function like the one we're defending against below!
        -:   13:ACE_INLINE int
    #####:   14:ACE_OS::select (int width,
        -:   15:                fd_set *rfds, fd_set *wfds, fd_set *efds,
        -:   16:                const ACE_Time_Value *timeout)
        -:   17:{
        -:   18:  ACE_OS_TRACE ("ACE_OS::select");
        -:   19:#if defined (ACE_HAS_NONCONST_SELECT_TIMEVAL)
        -:   20:  // We must defend against non-conformity!
        -:   21:  timeval copy;
    #####:   22:  timeval *timep = 0;
        -:   23:
    #####:   24:  if (timeout != 0)
        -:   25:    {
    #####:   26:      copy = *timeout;
    #####:   27:      timep = &copy;
        -:   28:    }
        -:   29:  else
    #####:   30:    timep = 0;
        -:   31:#else
        -:   32:  const timeval *timep = (timeout == 0 ? (const timeval *)0 : *timeout);
        -:   33:#endif /* ACE_HAS_NONCONST_SELECT_TIMEVAL */
        -:   34:#if defined (ACE_LACKS_SELECT)
        -:   35:  ACE_UNUSED_ARG (width);
        -:   36:  ACE_UNUSED_ARG (rfds);
        -:   37:  ACE_UNUSED_ARG (wfds);
        -:   38:  ACE_UNUSED_ARG (efds);
        -:   39:  ACE_UNUSED_ARG (timeout);
        -:   40:  ACE_NOTSUP_RETURN (-1);
        -:   41:#elif defined (ACE_MQX)
        -:   42:  ACE_SOCKCALL_RETURN (::select (width, rfds, wfds, efds, timeout->msec()),
        -:   43:                       int, -1);
        -:   44:#else
    #####:   45:  ACE_SOCKCALL_RETURN (::select (width, rfds, wfds, efds, timep),
        -:   46:                       int, -1);
        -:   47:#endif
        -:   48:}
        -:   49:
        -:   50:ACE_INLINE int
        -:   51:ACE_OS::select (int width,
        -:   52:                fd_set *rfds, fd_set *wfds, fd_set *efds,
        -:   53:                const ACE_Time_Value &timeout)
        -:   54:{
        -:   55:  ACE_OS_TRACE ("ACE_OS::select");
        -:   56:#if defined (ACE_HAS_NONCONST_SELECT_TIMEVAL)
        -:   57:# define ___ACE_TIMEOUT &copy
        -:   58:  timeval copy = timeout;
        -:   59:#else
        -:   60:# define ___ACE_TIMEOUT timep
        -:   61:  const timeval *timep = timeout;
        -:   62:#endif /* ACE_HAS_NONCONST_SELECT_TIMEVAL */
        -:   63:#if defined (ACE_LACKS_SELECT)
        -:   64:  ACE_UNUSED_ARG (width);
        -:   65:  ACE_UNUSED_ARG (rfds);
        -:   66:  ACE_UNUSED_ARG (wfds);
        -:   67:  ACE_UNUSED_ARG (efds);
        -:   68:  ACE_UNUSED_ARG (timeout);
        -:   69:  ACE_NOTSUP_RETURN (-1);
        -:   70:#elif defined (ACE_MQX)
        -:   71:  ACE_SOCKCALL_RETURN (::select (width, rfds, wfds, efds, timeout.msec()),
        -:   72:                       int, -1);
        -:   73:#else
        -:   74:  ACE_SOCKCALL_RETURN (::select (width, rfds, wfds, efds, ___ACE_TIMEOUT),
        -:   75:                       int, -1);
        -:   76:#endif
        -:   77:#undef ___ACE_TIMEOUT
        -:   78:}
        -:   79:
        -:   80:ACE_END_VERSIONED_NAMESPACE_DECL
