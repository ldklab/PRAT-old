        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/Signal.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id: Signal.inl 1861 2011-08-31 16:18:08Z mesnierp $
        -:    4:
        -:    5:#include "ace/OS_NS_signal.h"
        -:    6:#include "ace/config-all.h"
        -:    7:#include "ace/Trace.h"
        -:    8:#include "ace/Object_Manager_Base.h"
        -:    9:#include "ace/OS_NS_Thread.h"
        -:   10:
        -:   11:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   12:
        -:   13:ACE_INLINE
        -:   14:ACE_Sig_Set::ACE_Sig_Set (sigset_t *ss)
        -:   15:  // : sigset_ ()
        -:   16:{
        -:   17:  ACE_TRACE ("ACE_Sig_Set::ACE_Sig_Set");
        -:   18:
        -:   19:  if (ss == 0)
        -:   20:    ACE_OS::sigfillset (&this->sigset_);
        -:   21:  else
        -:   22:    // Structure assignment.
        -:   23:    this->sigset_ = *ss;
        -:   24:}
        -:   25:
        -:   26:ACE_INLINE
    #####:   27:ACE_Sig_Set::ACE_Sig_Set (int fill)
        -:   28:  // : sigset_ ()
        -:   29:{
        -:   30:  ACE_TRACE ("ACE_Sig_Set::ACE_Sig_Set");
        -:   31:
    #####:   32:  if (fill)
    #####:   33:    ACE_OS::sigfillset (&this->sigset_);
        -:   34:  else
    #####:   35:    ACE_OS::sigemptyset (&this->sigset_);
    #####:   36:}
        -:   37:
        -:   38:ACE_INLINE
        -:   39:ACE_Sig_Set::ACE_Sig_Set (ACE_Sig_Set *ss)
        -:   40:  // : sigset_ ()
        -:   41:{
        -:   42:  ACE_TRACE ("ACE_Sig_Set::ACE_Sig_Set");
        -:   43:
        -:   44:  if (ss == 0)
        -:   45:    ACE_OS::sigfillset (&this->sigset_);
        -:   46:  else
        -:   47:    this->sigset_ = ss->sigset_;
        -:   48:}
        -:   49:
        -:   50:ACE_INLINE int
        -:   51:ACE_Sig_Set::empty_set (void)
        -:   52:{
        -:   53:  ACE_TRACE ("ACE_Sig_Set::empty_set");
        -:   54:  return ACE_OS::sigemptyset (&this->sigset_);
        -:   55:}
        -:   56:
        -:   57:ACE_INLINE int
        -:   58:ACE_Sig_Set::fill_set (void)
        -:   59:{
        -:   60:  ACE_TRACE ("ACE_Sig_Set::fill_set");
        -:   61:  return ACE_OS::sigfillset (&this->sigset_);
        -:   62:}
        -:   63:
        -:   64:ACE_INLINE int
        -:   65:ACE_Sig_Set::sig_add (int signo)
        -:   66:{
        -:   67:  ACE_TRACE ("ACE_Sig_Set::sig_add");
        -:   68:  return ACE_OS::sigaddset (&this->sigset_, signo);
        -:   69:}
        -:   70:
        -:   71:ACE_INLINE int
        -:   72:ACE_Sig_Set::sig_del (int signo)
        -:   73:{
        -:   74:  ACE_TRACE ("ACE_Sig_Set::sig_del");
        -:   75:  return ACE_OS::sigdelset (&this->sigset_, signo);
        -:   76:}
        -:   77:
        -:   78:ACE_INLINE int
    #####:   79:ACE_Sig_Set::is_member (int signo) const
        -:   80:{
        -:   81:  ACE_TRACE ("ACE_Sig_Set::is_member");
    #####:   82:  return ACE_OS::sigismember (const_cast<sigset_t *> (&this->sigset_), signo);
        -:   83:}
        -:   84:
        -:   85:ACE_INLINE
    #####:   86:ACE_Sig_Set::operator sigset_t *(void)
        -:   87:{
        -:   88:  ACE_TRACE ("ACE_Sig_Set::operator sigset_t *");
    #####:   89:  return &this->sigset_;
        -:   90:}
        -:   91:
        -:   92:ACE_INLINE sigset_t
        -:   93:ACE_Sig_Set::sigset (void) const
        -:   94:{
        -:   95:  ACE_TRACE ("ACE_Sig_Set::sigset");
        -:   96:  return this->sigset_;
        -:   97:}
        -:   98:
        -:   99:ACE_INLINE int
        -:  100:ACE_Sig_Action::flags (void)
        -:  101:{
        -:  102:  ACE_TRACE ("ACE_Sig_Action::flags");
        -:  103:  return this->sa_.sa_flags;
        -:  104:}
        -:  105:
        -:  106:ACE_INLINE void
        -:  107:ACE_Sig_Action::flags (int flags)
        -:  108:{
        -:  109:  ACE_TRACE ("ACE_Sig_Action::flags");
        -:  110:  this->sa_.sa_flags = flags;
        -:  111:}
        -:  112:
        -:  113:ACE_INLINE sigset_t *
        -:  114:ACE_Sig_Action::mask (void)
        -:  115:{
        -:  116:  ACE_TRACE ("ACE_Sig_Action::mask");
        -:  117:  return &this->sa_.sa_mask;
        -:  118:}
        -:  119:
        -:  120:ACE_INLINE void
        -:  121:ACE_Sig_Action::mask (sigset_t *ss)
        -:  122:{
        -:  123:  ACE_TRACE ("ACE_Sig_Action::mask");
        -:  124:  if (ss != 0)
        -:  125:    this->sa_.sa_mask = *ss; // Structure assignment
        -:  126:}
        -:  127:
        -:  128:ACE_INLINE void
        -:  129:ACE_Sig_Action::mask (ACE_Sig_Set &ss)
        -:  130:{
        -:  131:  ACE_TRACE ("ACE_Sig_Action::mask");
        -:  132:  this->sa_.sa_mask = ss.sigset (); // Structure assignment
        -:  133:}
        -:  134:
        -:  135:ACE_INLINE ACE_SignalHandler
        -:  136:ACE_Sig_Action::handler (void)
        -:  137:{
        -:  138:  ACE_TRACE ("ACE_Sig_Action::handler");
        -:  139:  return ACE_SignalHandler (this->sa_.sa_handler);
        -:  140:}
        -:  141:
        -:  142:ACE_INLINE void
        -:  143:ACE_Sig_Action::handler (ACE_SignalHandler handler)
        -:  144:{
        -:  145:  ACE_TRACE ("ACE_Sig_Action::handler");
        -:  146:#if !defined(ACE_HAS_TANDEM_SIGNALS)
        -:  147:  this->sa_.sa_handler = ACE_SignalHandlerV (handler);
        -:  148:#else
        -:  149:  this->sa_.sa_handler = (void (*)()) ACE_SignalHandlerV (handler);
        -:  150:#endif /* !ACE_HAS_TANDEM_SIGNALS */
        -:  151:}
        -:  152:
        -:  153:ACE_INLINE void
        -:  154:ACE_Sig_Action::set (struct sigaction *sa)
        -:  155:{
        -:  156:  ACE_TRACE ("ACE_Sig_Action::set");
        -:  157:  this->sa_ = *sa; // Structure assignment.
        -:  158:}
        -:  159:
        -:  160:ACE_INLINE struct sigaction *
        -:  161:ACE_Sig_Action::get (void)
        -:  162:{
        -:  163:  ACE_TRACE ("ACE_Sig_Action::get");
        -:  164:  return &this->sa_;
        -:  165:}
        -:  166:
        -:  167:ACE_INLINE
        -:  168:ACE_Sig_Action::operator struct sigaction * ()
        -:  169:{
        -:  170:  ACE_TRACE ("ACE_Sig_Action::operator struct sigaction *");
        -:  171:  return &this->sa_;
        -:  172:}
        -:  173:
        -:  174:ACE_INLINE
        -:  175:ACE_Sig_Action::ACE_Sig_Action (const ACE_Sig_Action &s)
        -:  176:  // : sa_ ()
        -:  177:{
        -:  178:  ACE_TRACE ("ACE_Sig_Action::ACE_Sig_Action");
        -:  179:  *this = s; // structure copy.
        -:  180:}
        -:  181:
        -:  182:ACE_INLINE int
        -:  183:ACE_Sig_Action::register_action (int signum, ACE_Sig_Action *oaction)
        -:  184:{
        -:  185:  ACE_TRACE ("ACE_Sig_Action::register_action");
        -:  186:  struct sigaction *sa = oaction == 0 ? 0 : oaction->get ();
        -:  187:
        -:  188:  return ACE_OS::sigaction (signum, &this->sa_, sa);
        -:  189:}
        -:  190:
        -:  191:ACE_INLINE int
        -:  192:ACE_Sig_Action::retrieve_action (int signum)
        -:  193:{
        -:  194:  ACE_TRACE ("ACE_Sig_Action::retrieve_action");
        -:  195:  return ACE_OS::sigaction (signum, 0, &this->sa_);
        -:  196:}
        -:  197:
        -:  198:ACE_INLINE int
        -:  199:ACE_Sig_Action::restore_action (int signum, ACE_Sig_Action &oaction)
        -:  200:{
        -:  201:  ACE_TRACE ("ACE_Sig_Action::restore_action");
        -:  202:  this->sa_ = *oaction.get (); // Structure assignment
        -:  203:  return ACE_OS::sigaction (signum, &this->sa_, 0);
        -:  204:}
        -:  205:
        -:  206:// Block out the signal MASK until the destructor is called.
        -:  207:
        -:  208:ACE_INLINE
    #####:  209:ACE_Sig_Guard::ACE_Sig_Guard (ACE_Sig_Set *mask,
    #####:  210:                              bool condition)
        -:  211:  : omask_ ()
    #####:  212:  , condition_ (condition)
        -:  213:{
        -:  214:  //ACE_TRACE ("ACE_Sig_Guard::ACE_Sig_Guard");
    #####:  215:  if (!this->condition_)
    #####:  216:    return;
        -:  217:
        -:  218:#if defined (ACE_LACKS_UNIX_SIGNALS)
        -:  219:  ACE_UNUSED_ARG (mask);
        -:  220:#else
        -:  221:  // If MASK is 0 then block all signals!
    #####:  222:  if (mask == 0)
        -:  223:    {
        -:  224:#  if defined (ACE_LACKS_PTHREAD_THR_SIGSETMASK)
        -:  225:      ACE_OS::sigprocmask (SIG_BLOCK,
        -:  226:                           ACE_OS_Object_Manager::default_mask (),
        -:  227:                           (sigset_t *) this->omask_);
        -:  228:#  else
    #####:  229:      ACE_OS::thr_sigsetmask (SIG_BLOCK,
    #####:  230:                              ACE_OS_Object_Manager::default_mask (),
        -:  231:                              (sigset_t *) this->omask_);
        -:  232:#  endif /* ACE_LACKS_PTHREAD_THR_SIGSETMASK */
        -:  233:    }
        -:  234:  else
        -:  235:#  if defined (ACE_LACKS_PTHREAD_THR_SIGSETMASK)
        -:  236:    ACE_OS::sigprocmask (SIG_BLOCK,
        -:  237:                         (sigset_t *) *mask,
        -:  238:                         (sigset_t *)
        -:  239:                         this->omask_);
        -:  240:#  else
    #####:  241:    ACE_OS::thr_sigsetmask (SIG_BLOCK,
    #####:  242:                            (sigset_t *) *mask,
        -:  243:                            (sigset_t *)
        -:  244:                            this->omask_);
        -:  245:#  endif /* ACE_LACKS_PTHREAD_THR_SIGSETMASK */
        -:  246:#endif /* ACE_LACKS_UNIX_SIGNALS */
        -:  247:}
        -:  248:
        -:  249:ACE_END_VERSIONED_NAMESPACE_DECL
