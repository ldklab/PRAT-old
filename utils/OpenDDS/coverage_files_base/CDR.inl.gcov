        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/TAO/tao/CDR.inl
        -:    0:Programs:72
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id: CDR.inl 2179 2013-05-28 22:16:51Z mesnierp $
        -:    4:
        -:    5:#include "tao/SystemException.h"
        -:    6:
        -:    7:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:    8:
        -:    9:ACE_INLINE
        -:   10:TAO_OutputCDR::~TAO_OutputCDR (void)
        -:   11:{
        -:   12:}
        -:   13:
        -:   14:ACE_INLINE bool
        -:   15:TAO_OutputCDR::more_fragments (void) const
        -:   16:{
        -:   17:  return this->more_fragments_;
        -:   18:}
        -:   19:
        -:   20:ACE_INLINE void
        -:   21:TAO_OutputCDR::more_fragments (bool more)
        -:   22:{
        -:   23:  this->more_fragments_ = more;
        -:   24:}
        -:   25:
        -:   26:ACE_INLINE void
        -:   27:TAO_OutputCDR::message_attributes (CORBA::ULong request_id,
        -:   28:                                   TAO_Stub * stub,
        -:   29:                                   TAO_Message_Semantics message_semantics,
        -:   30:                                   ACE_Time_Value * timeout)
        -:   31:{
        -:   32:  this->request_id_        = request_id;
        -:   33:  this->stub_              = stub;
        -:   34:  this->message_semantics_ = message_semantics;
        -:   35:  this->timeout_           = timeout;
        -:   36:}
        -:   37:
        -:   38:ACE_INLINE CORBA::ULong
        -:   39:TAO_OutputCDR::request_id (void) const
        -:   40:{
        -:   41:  return this->request_id_;
        -:   42:}
        -:   43:
        -:   44:ACE_INLINE TAO_Stub *
        -:   45:TAO_OutputCDR::stub (void) const
        -:   46:{
        -:   47:  return this->stub_;
        -:   48:}
        -:   49:
        -:   50:ACE_INLINE TAO_Message_Semantics
        -:   51:TAO_OutputCDR::message_semantics (void) const
        -:   52:{
        -:   53:  return this->message_semantics_;
        -:   54:}
        -:   55:
        -:   56:ACE_INLINE ACE_Time_Value *
        -:   57:TAO_OutputCDR::timeout (void) const
        -:   58:{
        -:   59:  return this->timeout_;
        -:   60:}
        -:   61:
        -:   62:ACE_INLINE void
        -:   63:TAO_OutputCDR::get_version (TAO_GIOP_Message_Version& giop_version)
        -:   64:{
        -:   65:  giop_version.major = this->major_version_;
        -:   66:  giop_version.minor = this->minor_version_;
        -:   67:}
        -:   68:
        -:   69:ACE_INLINE TAO_OutputCDR::Repo_Id_Map_Handle&
        -:   70:TAO_OutputCDR::get_repo_id_map ()
        -:   71:{
        -:   72:  return this->repo_id_map_;
        -:   73:}
        -:   74:
        -:   75:#ifdef TAO_HAS_VALUETYPE_CODEBASE
        -:   76:ACE_INLINE TAO_OutputCDR::Codebase_URL_Map_Handle&
        -:   77:TAO_OutputCDR::get_codebase_url_map ()
        -:   78:{
        -:   79:  return this->codebase_map_;
        -:   80:}
        -:   81:#endif
        -:   82:
        -:   83:ACE_INLINE TAO_OutputCDR::Value_Map_Handle&
        -:   84:TAO_OutputCDR::get_value_map ()
        -:   85:{
        -:   86:  return this->value_map_;
        -:   87:}
        -:   88:
        -:   89:ACE_INLINE void
        -:   90:TAO_OutputCDR::set_repo_id_map (TAO_OutputCDR::Repo_Id_Map_Handle& map)
        -:   91:{
        -:   92:  this->repo_id_map_ = map;
        -:   93:}
        -:   94:
        -:   95:#ifdef TAO_HAS_VALUETYPE_CODEBASE
        -:   96:ACE_INLINE void
        -:   97:TAO_OutputCDR::set_codebase_url_map (TAO_OutputCDR::Codebase_URL_Map_Handle& map)
        -:   98:{
        -:   99:  this->codebase_map_ = map;
        -:  100:}
        -:  101:#endif
        -:  102:
        -:  103:ACE_INLINE void
        -:  104:TAO_OutputCDR::set_value_map (TAO_OutputCDR::Value_Map_Handle& map)
        -:  105:{
        -:  106:  this->value_map_ = map;
        -:  107:}
        -:  108:
        -:  109:ACE_INLINE void
        -:  110:TAO_OutputCDR::reset_vt_indirect_maps ()
        -:  111:{
        -:  112:  if (! this->repo_id_map_.is_nil () && this->repo_id_map_->get()->current_size () != 0)
        -:  113:  {
        -:  114:    this->repo_id_map_->get()->unbind_all ();
        -:  115:  }
        -:  116:#ifdef TAO_HAS_VALUETYPE_CODEBASE
        -:  117:  if (! this->codebase_map_.is_nil () && this->codebase_map_->get()->current_size () != 0)
        -:  118:  {
        -:  119:    this->codebase_map_->get()->unbind_all ();
        -:  120:  }
        -:  121:#endif
        -:  122:  if (! this->value_map_.is_nil () && this->value_map_->get()->current_size () != 0)
        -:  123:  {
        -:  124:    this->value_map_->get()->unbind_all ();
        -:  125:  }
        -:  126:}
        -:  127:
        -:  128:// -------------------------------------------------------------------
        -:  129:
        -:  130:ACE_INLINE
        -:  131:TAO_InputCDR::TAO_InputCDR (const char *buf,
        -:  132:                            size_t bufsiz,
        -:  133:                            int byte_order,
        -:  134:                            ACE_CDR::Octet major_version,
        -:  135:                            ACE_CDR::Octet minor_version,
        -:  136:                            TAO_ORB_Core* orb_core)
        -:  137:  : ACE_InputCDR (buf,
        -:  138:                  bufsiz,
        -:  139:                  byte_order,
        -:  140:                  major_version,
        -:  141:                  minor_version),
        -:  142:    orb_core_ (orb_core)
        -:  143:{
        -:  144:}
        -:  145:
        -:  146:ACE_INLINE
        -:  147:TAO_InputCDR::TAO_InputCDR (size_t bufsiz,
        -:  148:                            int byte_order,
        -:  149:                            ACE_CDR::Octet major_version,
        -:  150:                            ACE_CDR::Octet minor_version,
        -:  151:                            TAO_ORB_Core* orb_core)
        -:  152:  : ACE_InputCDR (bufsiz,
        -:  153:                  byte_order,
        -:  154:                  major_version,
        -:  155:                  minor_version),
        -:  156:    orb_core_ (orb_core)
        -:  157:{
        -:  158:}
        -:  159:
        -:  160:ACE_INLINE
        -:  161:TAO_InputCDR::TAO_InputCDR (const ACE_Message_Block *data,
        -:  162:                            int byte_order,
        -:  163:                            ACE_CDR::Octet major_version,
        -:  164:                            ACE_CDR::Octet minor_version,
        -:  165:                            TAO_ORB_Core* orb_core)
        -:  166:  : ACE_InputCDR (data,
        -:  167:                  byte_order,
        -:  168:                  major_version,
        -:  169:                  minor_version),
        -:  170:    orb_core_ (orb_core)
        -:  171:{
        -:  172:}
        -:  173:
        -:  174:ACE_INLINE
        -:  175:TAO_InputCDR::TAO_InputCDR (const ACE_Message_Block *data,
        -:  176:                            ACE_Lock* lock,
        -:  177:                            int byte_order,
        -:  178:                            ACE_CDR::Octet major_version,
        -:  179:                            ACE_CDR::Octet minor_version,
        -:  180:                            TAO_ORB_Core* orb_core)
        -:  181:  : ACE_InputCDR (data,
        -:  182:                  byte_order,
        -:  183:                  major_version,
        -:  184:                  minor_version,
        -:  185:                  lock),
        -:  186:    orb_core_ (orb_core)
        -:  187:{
        -:  188:}
        -:  189:
        -:  190:ACE_INLINE
        -:  191:TAO_InputCDR::TAO_InputCDR (ACE_Data_Block *data,
        -:  192:                            ACE_Message_Block::Message_Flags flag,
        -:  193:                            int byte_order,
        -:  194:                            ACE_CDR::Octet major_version,
        -:  195:                            ACE_CDR::Octet minor_version,
        -:  196:                            TAO_ORB_Core* orb_core)
        -:  197:  : ACE_InputCDR (data,
        -:  198:                  flag,
        -:  199:                  byte_order,
        -:  200:                  major_version,
        -:  201:                  minor_version),
        -:  202:    orb_core_ (orb_core)
        -:  203:{
        -:  204:}
        -:  205:
        -:  206:
        -:  207:ACE_INLINE
        -:  208:TAO_InputCDR::TAO_InputCDR (ACE_Data_Block *data,
        -:  209:                            ACE_Message_Block::Message_Flags flag,
        -:  210:                            size_t rd_pos,
        -:  211:                            size_t wr_pos,
        -:  212:                            int byte_order,
        -:  213:                            ACE_CDR::Octet major_version,
        -:  214:                            ACE_CDR::Octet minor_version,
        -:  215:                            TAO_ORB_Core* orb_core)
        -:  216:  : ACE_InputCDR (data,
        -:  217:                  flag,
        -:  218:                  rd_pos,
        -:  219:                  wr_pos,
        -:  220:                  byte_order,
        -:  221:                  major_version,
        -:  222:                  minor_version),
        -:  223:    orb_core_ (orb_core)
        -:  224:{
        -:  225:}
        -:  226:
        -:  227:
        -:  228:ACE_INLINE
        -:  229:TAO_InputCDR::TAO_InputCDR (const TAO_InputCDR& rhs,
        -:  230:                            size_t size,
        -:  231:                            ACE_CDR::Long offset)
        -:  232:  : ACE_InputCDR (rhs,
        -:  233:                  size,
        -:  234:                  offset),
        -:  235:    orb_core_ (rhs.orb_core_)
        -:  236:{
        -:  237:}
        -:  238:
        -:  239:ACE_INLINE
        -:  240:TAO_InputCDR::TAO_InputCDR (const TAO_InputCDR& rhs,
        -:  241:                            size_t size)
        -:  242:  : ACE_InputCDR (rhs,
        -:  243:                  size),
        -:  244:    orb_core_ (rhs.orb_core_)
        -:  245:{
        -:  246:}
        -:  247:
        -:  248:ACE_INLINE
        -:  249:TAO_InputCDR::TAO_InputCDR (const TAO_InputCDR& rhs)
        -:  250:  : ACE_InputCDR (rhs),
        -:  251:    orb_core_ (rhs.orb_core_),
        -:  252:    repo_id_map_ (rhs.repo_id_map_),
        -:  253:    codebase_map_ (rhs.codebase_map_),
        -:  254:    value_map_ (rhs.value_map_)
        -:  255:{
        -:  256:}
        -:  257:
        -:  258:ACE_INLINE
        -:  259:TAO_InputCDR::TAO_InputCDR (ACE_InputCDR::Transfer_Contents rhs,
        -:  260:                            TAO_ORB_Core* orb_core)
        -:  261:  : ACE_InputCDR (rhs),
        -:  262:    orb_core_ (orb_core)
        -:  263:{
        -:  264:}
        -:  265:
        -:  266:
        -:  267:ACE_INLINE
    #####:  268:TAO_InputCDR::~TAO_InputCDR (void)
        -:  269:{
    #####:  270:}
        -:  271:
        -:  272:ACE_INLINE TAO_ORB_Core*
      480:  273:TAO_InputCDR::orb_core (void) const
        -:  274:{
      480:  275:  return this->orb_core_;
        -:  276:}
        -:  277:
        -:  278:
        -:  279:ACE_INLINE TAO_InputCDR::Repo_Id_Map_Handle&
        -:  280:TAO_InputCDR::get_repo_id_map ()
        -:  281:{
        -:  282:  return this->repo_id_map_;
        -:  283:}
        -:  284:
        -:  285:ACE_INLINE TAO_InputCDR::Codebase_URL_Map_Handle&
        -:  286:TAO_InputCDR::get_codebase_url_map ()
        -:  287:{
        -:  288:  return this->codebase_map_;
        -:  289:}
        -:  290:
        -:  291:ACE_INLINE TAO_InputCDR::Value_Map_Handle&
        -:  292:TAO_InputCDR::get_value_map ()
        -:  293:{
        -:  294:  return this->value_map_;
        -:  295:}
        -:  296:
        -:  297:ACE_INLINE void
        -:  298:TAO_InputCDR::set_repo_id_map (TAO_InputCDR::Repo_Id_Map_Handle& map)
        -:  299:{
        -:  300:  this->repo_id_map_ = map;
        -:  301:}
        -:  302:
        -:  303:ACE_INLINE void
        -:  304:TAO_InputCDR::set_codebase_url_map (TAO_InputCDR::Codebase_URL_Map_Handle& map)
        -:  305:{
        -:  306:  this->codebase_map_ = map;
        -:  307:}
        -:  308:
        -:  309:ACE_INLINE void
        -:  310:TAO_InputCDR::set_value_map (TAO_InputCDR::Value_Map_Handle& map)
        -:  311:{
        -:  312:  this->value_map_ = map;
        -:  313:}
        -:  314:
        -:  315:ACE_INLINE void
        -:  316:TAO_InputCDR::reset_vt_indirect_maps ()
        -:  317:{
        -:  318:  if (! this->repo_id_map_.is_nil () && this->repo_id_map_->get()->current_size () != 0)
        -:  319:  {
        -:  320:    this->repo_id_map_->get()->unbind_all ();
        -:  321:  }
        -:  322:  if (! this->codebase_map_.is_nil () && this->codebase_map_->get()->current_size () != 0)
        -:  323:  {
        -:  324:    this->codebase_map_->get()->unbind_all ();
        -:  325:  }
        -:  326:  if (! this->value_map_.is_nil () && this->value_map_->get()->current_size () != 0)
        -:  327:  {
        -:  328:    this->value_map_->get()->unbind_all ();
        -:  329:  }
        -:  330:}
        -:  331:
        -:  332:ACE_INLINE
        -:  333:TAO_InputCDR::to_std_string::to_std_string (std::string &s,
        -:  334:                                            ACE_CDR::ULong b)
        -:  335:  : val_ (s),
        -:  336:    bound_ (b)
        -:  337:{
        -:  338:}
        -:  339:
        -:  340:#if !defined(ACE_LACKS_STD_WSTRING)
        -:  341:ACE_INLINE
        -:  342:TAO_InputCDR::to_std_wstring::to_std_wstring (std::wstring &s,
        -:  343:                                              ACE_CDR::ULong b)
        -:  344:  : val_ (s),
        -:  345:    bound_ (b)
        -:  346:{
        -:  347:}
        -:  348:#endif /* ACE_LACKS_STD_WSTRING */
        -:  349:
        -:  350:// ****************************************************************
        -:  351:
        -:  352:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  353:                                      CORBA::Short x)
        -:  354:{
        -:  355:  return
        -:  356:    os.fragment_stream (ACE_CDR::SHORT_ALIGN,
        -:  357:                        sizeof (CORBA::Short))
        -:  358:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  359:}
        -:  360:
        -:  361:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  362:                                      CORBA::UShort x)
        -:  363:{
        -:  364:  return
        -:  365:    os.fragment_stream (ACE_CDR::SHORT_ALIGN,
        -:  366:                        sizeof (CORBA::UShort))
        -:  367:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  368:}
        -:  369:
     1206:  370:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  371:                                      CORBA::Long x)
        -:  372:{
        -:  373:  return
     1206:  374:    os.fragment_stream (ACE_CDR::LONG_ALIGN,
        -:  375:                        sizeof (CORBA::Long))
     1206:  376:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  377:}
        -:  378:
     1653:  379:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  380:                                      CORBA::ULong x)
        -:  381:{
        -:  382:  return
     1653:  383:    os.fragment_stream (ACE_CDR::LONG_ALIGN,
        -:  384:                        sizeof (CORBA::ULong))
     1653:  385:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  386:}
        -:  387:
    #####:  388:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  389:                                      CORBA::LongLong x)
        -:  390:{
        -:  391:  return
    #####:  392:    os.fragment_stream (ACE_CDR::LONGLONG_ALIGN,
        -:  393:                        sizeof (CORBA::LongLong))
    #####:  394:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  395:}
        -:  396:
        -:  397:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  398:                                      CORBA::ULongLong x)
        -:  399:{
        -:  400:  return
        -:  401:    os.fragment_stream (ACE_CDR::LONGLONG_ALIGN,
        -:  402:                        sizeof (CORBA::ULongLong))
        -:  403:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  404:}
        -:  405:
        -:  406:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR& os,
        -:  407:                                      CORBA::LongDouble x)
        -:  408:{
        -:  409:  return
        -:  410:    os.fragment_stream (ACE_CDR::LONGDOUBLE_ALIGN,
        -:  411:                        sizeof (CORBA::LongDouble))
        -:  412:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  413:}
        -:  414:
        -:  415:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  416:                                      CORBA::Float x)
        -:  417:{
        -:  418:  return
        -:  419:    os.fragment_stream (ACE_CDR::LONG_ALIGN,
        -:  420:                        sizeof (CORBA::Float))
        -:  421:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  422:}
        -:  423:
    #####:  424:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  425:                                      CORBA::Double x)
        -:  426:{
        -:  427:  return
    #####:  428:    os.fragment_stream (ACE_CDR::LONGLONG_ALIGN,
        -:  429:                        sizeof (CORBA::Double))
    #####:  430:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  431:}
        -:  432:
       90:  433:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  434:                                      const char * x)
        -:  435:{
        -:  436:  return
       90:  437:    os.fragment_stream (ACE_CDR::OCTET_ALIGN,
        -:  438:                        sizeof (char))
       90:  439:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  440:}
        -:  441:
        -:  442:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  443:                                      const CORBA::WChar * x)
        -:  444:{
        -:  445:  return
        -:  446:    os.fragment_stream ((sizeof (CORBA::WChar) == 2
        -:  447:                         ? ACE_CDR::SHORT_ALIGN
        -:  448:                         : ACE_CDR::LONG_ALIGN),
        -:  449:                        sizeof (CORBA::WChar))
        -:  450:    && static_cast<ACE_OutputCDR &> (os) << x;
        -:  451:}
        -:  452:
    #####:  453:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  454:                                      ACE_OutputCDR::from_string x)
        -:  455:{
    #####:  456:  if (x.bound_ != 0 && x.val_ != 0 &&
    #####:  457:      ACE_OS::strlen (x.val_) > x.bound_)
        -:  458:    {
    #####:  459:      throw ::CORBA::BAD_PARAM ();
        -:  460:    }
    #####:  461:  return os << x.val_;
        -:  462:}
        -:  463:
        -:  464:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  465:                                      ACE_OutputCDR::from_wstring x)
        -:  466:{
        -:  467:  if (x.bound_ != 0 && x.val_ != 0 &&
        -:  468:      ACE_OS::strlen (x.val_) > x.bound_)
        -:  469:    {
        -:  470:      throw ::CORBA::BAD_PARAM ();
        -:  471:    }
        -:  472:  return os << x.val_;
        -:  473:}
        -:  474:
        -:  475:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  476:                                      const std::string &x)
        -:  477:{
        -:  478:  return os << x.c_str ();
        -:  479:}
        -:  480:
        -:  481:#if !defined(ACE_LACKS_STD_WSTRING)
        -:  482:ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &os,
        -:  483:                                      const std::wstring &x)
        -:  484:{
        -:  485:  return os << x.c_str ();
        -:  486:}
        -:  487:#endif /* ACE_LACKS_STD_WSTRING */
        -:  488:
        -:  489:// ****************************************************************
        -:  490:
        -:  491:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  492:                                      CORBA::Short &x)
        -:  493:{
        -:  494:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  495:}
        -:  496:
        -:  497:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  498:                                      CORBA::UShort &x)
        -:  499:{
        -:  500:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  501:}
        -:  502:
     1425:  503:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  504:                                      CORBA::Long &x)
        -:  505:{
     1425:  506:  return static_cast<ACE_InputCDR&> (is) >> x;
        -:  507:}
        -:  508:
     1899:  509:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  510:                                      CORBA::ULong &x)
        -:  511:{
     1899:  512:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  513:}
        -:  514:
    #####:  515:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  516:                                      CORBA::LongLong &x)
        -:  517:{
    #####:  518:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  519:}
        -:  520:
        -:  521:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  522:                                      CORBA::ULongLong &x)
        -:  523:{
        -:  524:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  525:}
        -:  526:
        -:  527:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  528:                                      CORBA::LongDouble &x)
        -:  529:{
        -:  530:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  531:}
        -:  532:
        -:  533:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  534:                                      CORBA::Float &x)
        -:  535:{
        -:  536:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  537:}
        -:  538:
    #####:  539:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  540:                                      CORBA::Double &x)
        -:  541:{
    #####:  542:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  543:}
        -:  544:
       72:  545:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  546:                                      CORBA::Char* &x)
        -:  547:{
       72:  548:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  549:}
        -:  550:
        -:  551:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  552:                                      CORBA::WChar* &x)
        -:  553:{
        -:  554:  return static_cast<ACE_InputCDR &> (is) >> x;
        -:  555:}
        -:  556:
    #####:  557:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  558:                                      ACE_InputCDR::to_string x)
        -:  559:{
        -:  560:  CORBA::Boolean const marshal_flag =
    #####:  561:    is >> const_cast<ACE_CDR::Char *&> (x.val_);
    #####:  562:  if (marshal_flag && x.bound_ != 0 && x.val_ != 0 &&
    #####:  563:      ACE_OS::strlen (x.val_) > x.bound_)
        -:  564:    {
    #####:  565:      throw ::CORBA::BAD_PARAM ();
        -:  566:    }
    #####:  567:  return marshal_flag;
        -:  568:}
        -:  569:
        -:  570:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  571:                                      ACE_InputCDR::to_wstring x)
        -:  572:{
        -:  573:  CORBA::Boolean const marshal_flag =
        -:  574:    is >> const_cast<ACE_CDR::WChar *&> (x.val_);
        -:  575:  if (marshal_flag && x.bound_ != 0 && x.val_ != 0 &&
        -:  576:      ACE_OS::strlen (x.val_) > x.bound_)
        -:  577:    {
        -:  578:      throw ::CORBA::BAD_PARAM ();
        -:  579:    }
        -:  580:  return marshal_flag;
        -:  581:}
        -:  582:
        -:  583:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  584:                                      std::string &x)
        -:  585:{
        -:  586:  char *buf = 0;
        -:  587:  CORBA::Boolean const marshal_flag = is >> buf;
        -:  588:  x.assign (buf);
        -:  589:  ACE::strdelete (buf);
        -:  590:  return marshal_flag;
        -:  591:}
        -:  592:
        -:  593:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  594:                                      TAO_InputCDR::to_std_string x)
        -:  595:{
        -:  596:  CORBA::Boolean const marshal_flag = is >> x.val_;
        -:  597:  if (marshal_flag && x.bound_ != 0 && x.val_.size () > x.bound_)
        -:  598:    {
        -:  599:      throw ::CORBA::BAD_PARAM ();
        -:  600:    }
        -:  601:  return marshal_flag;
        -:  602:}
        -:  603:
        -:  604:#if !defined(ACE_LACKS_STD_WSTRING)
        -:  605:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  606:                                      std::wstring &x)
        -:  607:{
        -:  608:  CORBA::WChar *buf = 0;
        -:  609:  CORBA::Boolean const marshal_flag = is >> buf;
        -:  610:  x.assign (buf);
        -:  611:  ACE::strdelete (buf);
        -:  612:  return marshal_flag;
        -:  613:}
        -:  614:
        -:  615:ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &is,
        -:  616:                                      TAO_InputCDR::to_std_wstring x)
        -:  617:{
        -:  618:  CORBA::Boolean const marshal_flag = is >> x.val_;
        -:  619:  if (marshal_flag && x.bound_ != 0 && x.val_.size () > x.bound_)
        -:  620:    {
        -:  621:      throw ::CORBA::BAD_PARAM ();
        -:  622:    }
        -:  623:  return marshal_flag;
        -:  624:}
        -:  625:#endif /* ACE_LACKS_STD_WSTRING */
        -:  626:
        -:  627:TAO_END_VERSIONED_NAMESPACE_DECL
