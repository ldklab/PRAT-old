        -:    0:Source:../dds/DCPS/TopicDescriptionImpl.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef OPENDDS_DCPS_TOPIC_DESCRIPTION_IMPL_H
        -:    9:#define OPENDDS_DCPS_TOPIC_DESCRIPTION_IMPL_H
        -:   10:
        -:   11:#include "dds/DdsDcpsTopicC.h"
        -:   12:#include "dds/DdsDcpsTypeSupportExtC.h"
        -:   13:#include "Definitions.h"
        -:   14:#include "ace/SString.h"
        -:   15:#include "ace/Atomic_Op.h"
        -:   16:#include "LocalObject.h"
        -:   17:
        -:   18:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   19:#pragma once
        -:   20:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   21:
        -:   22:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   23:
        -:   24:namespace OpenDDS {
        -:   25:namespace DCPS {
        -:   26:
        -:   27:class DomainParticipantImpl;
        -:   28:
        -:   29:/**
        -:   30:* @class TopicDescriptionImpl
        -:   31:*
        -:   32:* @brief Implements the DDS::TopicDescription interface.
        -:   33:*
        -:   34:* See the DDS specification, OMG formal/04-12-02, for a description of
        -:   35:* the interface this class is implementing.
        -:   36:*
        -:   37:*/
        -:   38:class OpenDDS_Dcps_Export TopicDescriptionImpl
        -:   39:  : public virtual OpenDDS::DCPS::LocalObject<DDS::TopicDescription> {
        -:   40:public:
        -:   41:  TopicDescriptionImpl(const char*            topic_name,
        -:   42:                       const char*            type_name,
        -:   43:                       TypeSupport_ptr        type_support,
        -:   44:                       DomainParticipantImpl* participant);
        -:   45:
        -:   46:  virtual ~TopicDescriptionImpl();
        -:   47:
        -:   48:  virtual char * get_type_name();
        -:   49:
        -:   50:  virtual char * get_name();
        -:   51:
        -:   52:  virtual DDS::DomainParticipant_ptr get_participant();
        -:   53:
        -:   54:  /** This method is not defined in the IDL and is defined for
        -:   55:  *  internal use.
        -:   56:  *  Return the type support of the topic.
        -:   57:  */
        -:   58:  OpenDDS::DCPS::TypeSupport_ptr get_type_support();
        -:   59:
        -:   60:  bool has_entity_refs() const {
        -:   61:    return entity_refs_ > 0;
        -:   62:  }
        -:   63:
        -:   64:  void add_entity_ref() {
        -:   65:    RcObject::_add_ref();
        -:   66:    ++entity_refs_;
        -:   67:  }
        -:   68:
        -:   69:  void remove_entity_ref() {
        -:   70:    --entity_refs_;
        -:   71:    RcObject::_remove_ref();
        -:   72:  }
        -:   73:
        -:   74:protected:
        -:   75:  /// The name of the topic.
        -:   76:  ACE_CString                    topic_name_;
        -:   77:  /// The datatype of the topic.
        -:   78:  ACE_CString                    type_name_;
        -:   79:
        -:   80:  /// The participant that creates this topic.
        -:   81:  DomainParticipantImpl*         participant_;
        -:   82:
        -:   83:  /// The type_support for this topic.
        -:   84:  OpenDDS::DCPS::TypeSupport_var type_support_;
        -:   85:
        -:   86:  /// The number of entities using this topic
        -:   87:  ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> entity_refs_;
        -:   88:};
        -:   89:
        -:   90:template <typename Topic>
        -:   91:class TopicDescriptionPtr
        -:   92:{
        -:   93:public:
        -:   94:  TopicDescriptionPtr(Topic* topic=0)
        -:   95:    : topic_(topic)
        -:   96:  {
        -:   97:    if (topic_)
        -:   98:      topic_->add_entity_ref();
        -:   99:  }
        -:  100:
        -:  101:  ~TopicDescriptionPtr()
        -:  102:  {
        -:  103:    if (topic_)
        -:  104:      topic_->remove_entity_ref();
        -:  105:  }
        -:  106:
        -:  107:  TopicDescriptionPtr(const TopicDescriptionPtr& other)
        -:  108:    : topic_(other.topic_)
        -:  109:  {
        -:  110:    if (topic_)
        -:  111:      topic_->add_entity_ref();
        -:  112:  }
        -:  113:
        -:  114:  TopicDescriptionPtr& operator = (Topic* other)
        -:  115:  {
        -:  116:    TopicDescriptionPtr tmp(other);
        -:  117:    std::swap(this->topic_, tmp.topic_);
        -:  118:    return *this;
        -:  119:  }
        -:  120:
        -:  121:  TopicDescriptionPtr& operator = (const TopicDescriptionPtr& other)
        -:  122:  {
        -:  123:    TopicDescriptionPtr tmp(other);
        -:  124:    std::swap(this->topic_, tmp.topic_);
        -:  125:    return *this;
        -:  126:  }
        -:  127:
       72:  128:  Topic* operator->() const
        -:  129:  {
       72:  130:    return topic_;
        -:  131:  }
        -:  132:
        -:  133:  Topic* get() const
        -:  134:  {
        -:  135:    return topic_;
        -:  136:  }
        -:  137:
        6:  138:  operator bool() const
        -:  139:  {
        6:  140:    return topic_;
        -:  141:  }
        -:  142:
        -:  143:private:
        -:  144:  Topic* topic_;
        -:  145:};
        -:  146:
        -:  147:} // namespace DCPS
        -:  148:} // namespace OpenDDS
        -:  149:
        -:  150:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  151:
        -:  152:#endif /* OPENDDS_DCPS_TOPIC_DESCRIPTION_IMPL_H  */
