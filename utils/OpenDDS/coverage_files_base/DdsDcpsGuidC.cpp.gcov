        -:    0:Source:DdsDcpsGuidC.cpp
        -:    0:Programs:72
        -:    1:// -*- C++ -*-
        -:    2:// $Id$
        -:    3:
        -:    4:/**
        -:    5: * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p15
        -:    6: * TAO and the TAO IDL Compiler have been developed by:
        -:    7: *       Center for Distributed Object Computing
        -:    8: *       Washington University
        -:    9: *       St. Louis, MO
        -:   10: *       USA
        -:   11: *       http://www.cs.wustl.edu/~schmidt/doc-center.html
        -:   12: * and
        -:   13: *       Distributed Object Computing Laboratory
        -:   14: *       University of California at Irvine
        -:   15: *       Irvine, CA
        -:   16: *       USA
        -:   17: * and
        -:   18: *       Institute for Software Integrated Systems
        -:   19: *       Vanderbilt University
        -:   20: *       Nashville, TN
        -:   21: *       USA
        -:   22: *       http://www.isis.vanderbilt.edu/
        -:   23: *
        -:   24: * Information about TAO is available at:
        -:   25: *     http://www.cs.wustl.edu/~schmidt/TAO.html
        -:   26: **/
        -:   27:
        -:   28:// TAO_IDL - Generated from
        -:   29:// be/be_codegen.cpp:376
        -:   30:
        -:   31:#include "DCPS/DdsDcps_pch.h"
        -:   32:#include "DdsDcpsGuidC.h"
        -:   33:#include "tao/CDR.h"
        -:   34:
        -:   35:#if !defined (__ACE_INLINE__)
        -:   36:#include "DdsDcpsGuidC.inl"
        -:   37:#endif /* !defined INLINE */
        -:   38:
        -:   39:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   40:
        -:   41:
        -:   42:
        -:   43:// TAO_IDL - Generated from
        -:   44:// be/be_visitor_array/array_cs.cpp:97
        -:   45:
        -:   46:OpenDDS::DCPS::GuidVendorId_t_slice *
    #####:   47:OpenDDS::DCPS::GuidVendorId_t_dup (const OpenDDS::DCPS::GuidVendorId_t_slice *_tao_src_array)
        -:   48:{
        -:   49:  OpenDDS::DCPS::GuidVendorId_t_slice *_tao_dup_array =
    #####:   50:    OpenDDS::DCPS::GuidVendorId_t_alloc ();
        -:   51:  
    #####:   52:  if (!_tao_dup_array)
        -:   53:    {
    #####:   54:      return static_cast <OpenDDS::DCPS::GuidVendorId_t_slice *> (0);
        -:   55:    }
        -:   56:  
    #####:   57:  OpenDDS::DCPS::GuidVendorId_t_copy (_tao_dup_array, _tao_src_array);
    #####:   58:  return _tao_dup_array;
        -:   59:}
        -:   60:
        -:   61:OpenDDS::DCPS::GuidVendorId_t_slice *
    #####:   62:OpenDDS::DCPS::GuidVendorId_t_alloc (void)
        -:   63:{
    #####:   64:  OpenDDS::DCPS::GuidVendorId_t_slice *retval = 0;
    #####:   65:  ACE_NEW_RETURN (retval, ::CORBA::Octet[2], 0);
    #####:   66:  return retval;
        -:   67:}
        -:   68:
        -:   69:void
    #####:   70:OpenDDS::DCPS::GuidVendorId_t_free (
        -:   71:    OpenDDS::DCPS::GuidVendorId_t_slice *_tao_slice)
        -:   72:{
    #####:   73:  delete [] _tao_slice;
    #####:   74:}
        -:   75:
        -:   76:void
    #####:   77:OpenDDS::DCPS::GuidVendorId_t_copy (
        -:   78:    OpenDDS::DCPS::GuidVendorId_t_slice * _tao_to,
        -:   79:    const OpenDDS::DCPS::GuidVendorId_t_slice *_tao_from)
        -:   80:{
        -:   81:  // Copy each individual element.
    #####:   82:  for ( ::CORBA::ULong i0 = 0; i0 < 2; ++i0)
        -:   83:    {
    #####:   84:      _tao_to[i0] = _tao_from[i0];
        -:   85:    }
    #####:   86:}
        -:   87:
        -:   88:// TAO_IDL - Generated from
        -:   89:// be/be_visitor_array/array_cs.cpp:97
        -:   90:
        -:   91:OpenDDS::DCPS::GuidPrefix_t_slice *
    #####:   92:OpenDDS::DCPS::GuidPrefix_t_dup (const OpenDDS::DCPS::GuidPrefix_t_slice *_tao_src_array)
        -:   93:{
        -:   94:  OpenDDS::DCPS::GuidPrefix_t_slice *_tao_dup_array =
    #####:   95:    OpenDDS::DCPS::GuidPrefix_t_alloc ();
        -:   96:  
    #####:   97:  if (!_tao_dup_array)
        -:   98:    {
    #####:   99:      return static_cast <OpenDDS::DCPS::GuidPrefix_t_slice *> (0);
        -:  100:    }
        -:  101:  
    #####:  102:  OpenDDS::DCPS::GuidPrefix_t_copy (_tao_dup_array, _tao_src_array);
    #####:  103:  return _tao_dup_array;
        -:  104:}
        -:  105:
        -:  106:OpenDDS::DCPS::GuidPrefix_t_slice *
    #####:  107:OpenDDS::DCPS::GuidPrefix_t_alloc (void)
        -:  108:{
    #####:  109:  OpenDDS::DCPS::GuidPrefix_t_slice *retval = 0;
    #####:  110:  ACE_NEW_RETURN (retval, ::CORBA::Octet[12], 0);
    #####:  111:  return retval;
        -:  112:}
        -:  113:
        -:  114:void
    #####:  115:OpenDDS::DCPS::GuidPrefix_t_free (
        -:  116:    OpenDDS::DCPS::GuidPrefix_t_slice *_tao_slice)
        -:  117:{
    #####:  118:  delete [] _tao_slice;
    #####:  119:}
        -:  120:
        -:  121:void
    #####:  122:OpenDDS::DCPS::GuidPrefix_t_copy (
        -:  123:    OpenDDS::DCPS::GuidPrefix_t_slice * _tao_to,
        -:  124:    const OpenDDS::DCPS::GuidPrefix_t_slice *_tao_from)
        -:  125:{
        -:  126:  // Copy each individual element.
    #####:  127:  for ( ::CORBA::ULong i0 = 0; i0 < 12; ++i0)
        -:  128:    {
    #####:  129:      _tao_to[i0] = _tao_from[i0];
        -:  130:    }
    #####:  131:}
        -:  132:
        -:  133:// TAO_IDL - Generated from
        -:  134:// be/be_visitor_array/array_cs.cpp:97
        -:  135:
        -:  136:OpenDDS::DCPS::EntityKey_t_slice *
    #####:  137:OpenDDS::DCPS::EntityKey_t_dup (const OpenDDS::DCPS::EntityKey_t_slice *_tao_src_array)
        -:  138:{
        -:  139:  OpenDDS::DCPS::EntityKey_t_slice *_tao_dup_array =
    #####:  140:    OpenDDS::DCPS::EntityKey_t_alloc ();
        -:  141:  
    #####:  142:  if (!_tao_dup_array)
        -:  143:    {
    #####:  144:      return static_cast <OpenDDS::DCPS::EntityKey_t_slice *> (0);
        -:  145:    }
        -:  146:  
    #####:  147:  OpenDDS::DCPS::EntityKey_t_copy (_tao_dup_array, _tao_src_array);
    #####:  148:  return _tao_dup_array;
        -:  149:}
        -:  150:
        -:  151:OpenDDS::DCPS::EntityKey_t_slice *
    #####:  152:OpenDDS::DCPS::EntityKey_t_alloc (void)
        -:  153:{
    #####:  154:  OpenDDS::DCPS::EntityKey_t_slice *retval = 0;
    #####:  155:  ACE_NEW_RETURN (retval, ::CORBA::Octet[3], 0);
    #####:  156:  return retval;
        -:  157:}
        -:  158:
        -:  159:void
    #####:  160:OpenDDS::DCPS::EntityKey_t_free (
        -:  161:    OpenDDS::DCPS::EntityKey_t_slice *_tao_slice)
        -:  162:{
    #####:  163:  delete [] _tao_slice;
    #####:  164:}
        -:  165:
        -:  166:void
    #####:  167:OpenDDS::DCPS::EntityKey_t_copy (
        -:  168:    OpenDDS::DCPS::EntityKey_t_slice * _tao_to,
        -:  169:    const OpenDDS::DCPS::EntityKey_t_slice *_tao_from)
        -:  170:{
        -:  171:  // Copy each individual element.
    #####:  172:  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
        -:  173:    {
    #####:  174:      _tao_to[i0] = _tao_from[i0];
        -:  175:    }
    #####:  176:}
        -:  177:
        -:  178:// TAO_IDL - Generated from
        -:  179:// be/be_visitor_sequence/sequence_cs.cpp:73
        -:  180:
        -:  181:#if !defined (_OPENDDS_DCPS_GUIDSEQ_CS_)
        -:  182:#define _OPENDDS_DCPS_GUIDSEQ_CS_
        -:  183:
      162:  184:OpenDDS::DCPS::GUIDSeq::GUIDSeq (void)
      162:  185:{}
        -:  186:
    #####:  187:OpenDDS::DCPS::GUIDSeq::GUIDSeq (
    #####:  188:    ::CORBA::ULong max)
        -:  189:  : ::TAO::unbounded_value_sequence<
        -:  190:        GUID_t
    #####:  191:      > (max)
    #####:  192:{}
        -:  193:
    #####:  194:OpenDDS::DCPS::GUIDSeq::GUIDSeq (
        -:  195:    ::CORBA::ULong max,
        -:  196:    ::CORBA::ULong length,
        -:  197:    OpenDDS::DCPS::GUID_t * buffer,
        -:  198:    ::CORBA::Boolean release
    #####:  199:  )
        -:  200:  : ::TAO::unbounded_value_sequence<
        -:  201:        GUID_t
        -:  202:      >
    #####:  203:    (max, length, buffer, release)
    #####:  204:{}
        -:  205:
    #####:  206:OpenDDS::DCPS::GUIDSeq::GUIDSeq (
    #####:  207:    const GUIDSeq &seq)
        -:  208:  : ::TAO::unbounded_value_sequence<
        -:  209:        GUID_t
    #####:  210:      > (seq)
    #####:  211:{}
        -:  212:
      162:  213:OpenDDS::DCPS::GUIDSeq::~GUIDSeq (void)
      162:  214:{}
        -:  215:
        -:  216:#endif /* end #if !defined */
        -:  217:
        -:  218:// TAO_IDL - Generated from
        -:  219:// be/be_visitor_array/cdr_op_cs.cpp:166
        -:  220:
        -:  221:
        -:  222:
        -:  223:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  224:
        -:  225:
        -:  226:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  227:
    #####:  228:::CORBA::Boolean operator<< (
        -:  229:    TAO_OutputCDR &strm,
        -:  230:    const OpenDDS::DCPS::GuidVendorId_t_forany &_tao_array)
        -:  231:{
        -:  232:  return
    #####:  233:    strm.write_octet_array (
        -:  234:        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
    #####:  235:        2);
        -:  236:}
        -:  237:
    #####:  238:::CORBA::Boolean operator>> (
        -:  239:    TAO_InputCDR &strm,
        -:  240:    OpenDDS::DCPS::GuidVendorId_t_forany &_tao_array)
        -:  241:{
        -:  242:  return
    #####:  243:    strm.read_octet_array (
    #####:  244:        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
    #####:  245:        2);
        -:  246:}
        -:  247:
        -:  248:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  249:
        -:  250:
        -:  251:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  252:
        -:  253:
        -:  254:
        -:  255:
        -:  256:// TAO_IDL - Generated from
        -:  257:// be/be_visitor_array/cdr_op_cs.cpp:166
        -:  258:
        -:  259:
        -:  260:
        -:  261:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  262:
        -:  263:
        -:  264:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  265:
      315:  266:::CORBA::Boolean operator<< (
        -:  267:    TAO_OutputCDR &strm,
        -:  268:    const OpenDDS::DCPS::GuidPrefix_t_forany &_tao_array)
        -:  269:{
        -:  270:  return
      315:  271:    strm.write_octet_array (
        -:  272:        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      315:  273:        12);
        -:  274:}
        -:  275:
      258:  276:::CORBA::Boolean operator>> (
        -:  277:    TAO_InputCDR &strm,
        -:  278:    OpenDDS::DCPS::GuidPrefix_t_forany &_tao_array)
        -:  279:{
        -:  280:  return
      516:  281:    strm.read_octet_array (
      258:  282:        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      258:  283:        12);
        -:  284:}
        -:  285:
        -:  286:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  287:
        -:  288:
        -:  289:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  290:
        -:  291:
        -:  292:
        -:  293:
        -:  294:// TAO_IDL - Generated from
        -:  295:// be/be_visitor_array/cdr_op_cs.cpp:166
        -:  296:
        -:  297:
        -:  298:
        -:  299:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  300:
        -:  301:
        -:  302:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  303:
      315:  304:::CORBA::Boolean operator<< (
        -:  305:    TAO_OutputCDR &strm,
        -:  306:    const OpenDDS::DCPS::EntityKey_t_forany &_tao_array)
        -:  307:{
        -:  308:  return
      315:  309:    strm.write_octet_array (
        -:  310:        reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      315:  311:        3);
        -:  312:}
        -:  313:
      258:  314:::CORBA::Boolean operator>> (
        -:  315:    TAO_InputCDR &strm,
        -:  316:    OpenDDS::DCPS::EntityKey_t_forany &_tao_array)
        -:  317:{
        -:  318:  return
      516:  319:    strm.read_octet_array (
      258:  320:        reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      258:  321:        3);
        -:  322:}
        -:  323:
        -:  324:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  325:
        -:  326:
        -:  327:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  328:
        -:  329:
        -:  330:
        -:  331:
        -:  332:// TAO_IDL - Generated from
        -:  333:// be/be_visitor_structure/cdr_op_cs.cpp:52
        -:  334:
        -:  335:
        -:  336:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  337:
        -:  338:
        -:  339:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  340:
      315:  341:::CORBA::Boolean operator<< (
        -:  342:    TAO_OutputCDR &strm,
        -:  343:    const OpenDDS::DCPS::EntityId_t &_tao_aggregate)
        -:  344:{
        -:  345:  OpenDDS::DCPS::EntityKey_t_forany _tao_aggregate_entityKey
        -:  346:      #if defined __IBMCPP__ && __IBMCPP__ <= 800
        -:  347:      ((OpenDDS::DCPS::EntityKey_t_slice*) (
        -:  348:      #else
        -:  349:      (const_cast<
        -:  350:          OpenDDS::DCPS::EntityKey_t_slice*> (
        -:  351:      #endif
        -:  352:          _tao_aggregate.entityKey
        -:  353:        )
      630:  354:    );
        -:  355:  return
      630:  356:    (strm << _tao_aggregate_entityKey) &&
      945:  357:    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.entityKind));
        -:  358:}
        -:  359:
      258:  360:::CORBA::Boolean operator>> (
        -:  361:    TAO_InputCDR &strm,
        -:  362:    OpenDDS::DCPS::EntityId_t &_tao_aggregate)
        -:  363:{
        -:  364:  OpenDDS::DCPS::EntityKey_t_forany _tao_aggregate_entityKey
        -:  365:      #if defined __IBMCPP__ && __IBMCPP__ <= 800
        -:  366:      ((OpenDDS::DCPS::EntityKey_t_slice*) (
        -:  367:      #else
        -:  368:      (const_cast<
        -:  369:          OpenDDS::DCPS::EntityKey_t_slice*> (
        -:  370:      #endif
        -:  371:          _tao_aggregate.entityKey
        -:  372:        )
      516:  373:    );
        -:  374:  return
      516:  375:    (strm >> _tao_aggregate_entityKey) &&
      774:  376:    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.entityKind));
        -:  377:}
        -:  378:
        -:  379:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  380:
        -:  381:
        -:  382:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  383:
        -:  384:
        -:  385:
        -:  386:
        -:  387:// TAO_IDL - Generated from
        -:  388:// be/be_visitor_structure/cdr_op_cs.cpp:52
        -:  389:
        -:  390:
        -:  391:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  392:
        -:  393:
        -:  394:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  395:
      315:  396:::CORBA::Boolean operator<< (
        -:  397:    TAO_OutputCDR &strm,
        -:  398:    const OpenDDS::DCPS::GUID_t &_tao_aggregate)
        -:  399:{
        -:  400:  OpenDDS::DCPS::GuidPrefix_t_forany _tao_aggregate_guidPrefix
        -:  401:      #if defined __IBMCPP__ && __IBMCPP__ <= 800
        -:  402:      ((OpenDDS::DCPS::GuidPrefix_t_slice*) (
        -:  403:      #else
        -:  404:      (const_cast<
        -:  405:          OpenDDS::DCPS::GuidPrefix_t_slice*> (
        -:  406:      #endif
        -:  407:          _tao_aggregate.guidPrefix
        -:  408:        )
      630:  409:    );
        -:  410:  return
      630:  411:    (strm << _tao_aggregate_guidPrefix) &&
      945:  412:    (strm << _tao_aggregate.entityId);
        -:  413:}
        -:  414:
      258:  415:::CORBA::Boolean operator>> (
        -:  416:    TAO_InputCDR &strm,
        -:  417:    OpenDDS::DCPS::GUID_t &_tao_aggregate)
        -:  418:{
        -:  419:  OpenDDS::DCPS::GuidPrefix_t_forany _tao_aggregate_guidPrefix
        -:  420:      #if defined __IBMCPP__ && __IBMCPP__ <= 800
        -:  421:      ((OpenDDS::DCPS::GuidPrefix_t_slice*) (
        -:  422:      #else
        -:  423:      (const_cast<
        -:  424:          OpenDDS::DCPS::GuidPrefix_t_slice*> (
        -:  425:      #endif
        -:  426:          _tao_aggregate.guidPrefix
        -:  427:        )
      516:  428:    );
        -:  429:  return
      516:  430:    (strm >> _tao_aggregate_guidPrefix) &&
      774:  431:    (strm >> _tao_aggregate.entityId);
        -:  432:}
        -:  433:
        -:  434:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  435:
        -:  436:
        -:  437:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  438:
        -:  439:
        -:  440:
        -:  441:
        -:  442:// TAO_IDL - Generated from
        -:  443:// be/be_visitor_sequence/cdr_op_cs.cpp:96
        -:  444:#if !defined _TAO_CDR_OP_OpenDDS_DCPS_GUIDSeq_CPP_
        -:  445:#define _TAO_CDR_OP_OpenDDS_DCPS_GUIDSeq_CPP_
        -:  446:
        -:  447:
        -:  448:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  449:
        -:  450:
        -:  451:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  452:
    #####:  453:::CORBA::Boolean operator<< (
        -:  454:    TAO_OutputCDR &strm,
        -:  455:    const OpenDDS::DCPS::GUIDSeq &_tao_sequence)
        -:  456:{
    #####:  457:  return TAO::marshal_sequence(strm, _tao_sequence);
        -:  458:}
        -:  459:
    #####:  460:::CORBA::Boolean operator>> (
        -:  461:    TAO_InputCDR &strm,
        -:  462:    OpenDDS::DCPS::GUIDSeq &_tao_sequence)
        -:  463:{
    #####:  464:  return TAO::demarshal_sequence(strm, _tao_sequence);
        -:  465:}
        -:  466:
        -:  467:
        -:  468:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  469:
        -:  470:
        -:  471:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  472:
        -:  473:
        -:  474:#endif /* _TAO_CDR_OP_OpenDDS_DCPS_GUIDSeq_CPP_ */
        -:  475:
        -:  476:
        -:  477:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  478:
        -:  479:
