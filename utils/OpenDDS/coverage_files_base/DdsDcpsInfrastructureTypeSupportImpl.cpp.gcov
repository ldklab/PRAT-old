        -:    0:Source:DdsDcpsInfrastructureTypeSupportImpl.cpp
        -:    0:Programs:72
        -:    1:/* Generated by /home/ryan/git/OpenDDS-debloat/bin/opendds_idl version 3.13 (ACE version 6.2a_p15) running on input file DdsDcpsInfrastructure.idl */
        -:    2:#include "DCPS/DdsDcps_pch.h"
        -:    3:#include "DdsDcpsInfrastructureTypeSupportImpl.h"
        -:    4:
        -:    5:#include <cstring>
        -:    6:#include <stdexcept>
        -:    7:#include "dds/DCPS/FilterEvaluator.h"
        -:    8:#include "dds/DCPS/PoolAllocator.h"
        -:    9:#include "dds/DdsDcpsCoreTypeSupportImpl.h"
        -:   10:
        -:   11:
        -:   12:/* Begin MODULE: CORBA */
        -:   13:
        -:   14:
        -:   15:/* End MODULE: CORBA */
        -:   16:
        -:   17:
        -:   18:/* Begin MODULE: CORBA */
        -:   19:
        -:   20:
        -:   21:
        -:   22:/* Begin TYPEDEF: StringSeq */
        -:   23:
        -:   24:
        -:   25:/* End TYPEDEF: StringSeq */
        -:   26:
        -:   27:/* End MODULE: CORBA */
        -:   28:
        -:   29:
        -:   30:/* Begin MODULE: CORBA */
        -:   31:
        -:   32:
        -:   33:
        -:   34:/* Begin TYPEDEF: LongSeq */
        -:   35:
        -:   36:
        -:   37:/* End TYPEDEF: LongSeq */
        -:   38:
        -:   39:/* End MODULE: CORBA */
        -:   40:
        -:   41:
        -:   42:/* Begin MODULE: DDS */
        -:   43:
        -:   44:
        -:   45:
        -:   46:/* Begin TYPEDEF: StringSeq */
        -:   47:
        -:   48:
        -:   49:/* End TYPEDEF: StringSeq */
        -:   50:
        -:   51:
        -:   52:/* Begin TYPEDEF: InstanceHandle_t */
        -:   53:
        -:   54:
        -:   55:/* End TYPEDEF: InstanceHandle_t */
        -:   56:
        -:   57:
        -:   58:/* Begin TYPEDEF: BuiltinTopicKeyValue */
        -:   59:
        -:   60:
        -:   61:/* End TYPEDEF: BuiltinTopicKeyValue */
        -:   62:
        -:   63:
        -:   64:/* Begin TYPEDEF: InstanceHandleSeq */
        -:   65:
        -:   66:
        -:   67:/* End TYPEDEF: InstanceHandleSeq */
        -:   68:
        -:   69:
        -:   70:/* Begin TYPEDEF: QosPolicyId_t */
        -:   71:
        -:   72:
        -:   73:/* End TYPEDEF: QosPolicyId_t */
        -:   74:
        -:   75:
        -:   76:/* Begin STRUCT: QosPolicyCount */
        -:   77:
        -:   78:
        -:   79:/* End STRUCT: QosPolicyCount */
        -:   80:
        -:   81:
        -:   82:/* Begin TYPEDEF: QosPolicyCountSeq */
        -:   83:
        -:   84:
        -:   85:/* End TYPEDEF: QosPolicyCountSeq */
        -:   86:
        -:   87:
        -:   88:/* Begin TYPEDEF: OctetSeq */
        -:   89:
        -:   90:
        -:   91:/* End TYPEDEF: OctetSeq */
        -:   92:
        -:   93:
        -:   94:/* Begin STRUCT: Duration_t */
        -:   95:
        -:   96:
        -:   97:/* End STRUCT: Duration_t */
        -:   98:
        -:   99:
        -:  100:/* Begin CONST: DURATION_INFINITE_SEC */
        -:  101:
        -:  102:
        -:  103:/* End CONST: DURATION_INFINITE_SEC */
        -:  104:
        -:  105:
        -:  106:/* Begin CONST: DURATION_INFINITE_NSEC */
        -:  107:
        -:  108:
        -:  109:/* End CONST: DURATION_INFINITE_NSEC */
        -:  110:
        -:  111:
        -:  112:/* Begin CONST: DURATION_ZERO_SEC */
        -:  113:
        -:  114:
        -:  115:/* End CONST: DURATION_ZERO_SEC */
        -:  116:
        -:  117:
        -:  118:/* Begin CONST: DURATION_ZERO_NSEC */
        -:  119:
        -:  120:
        -:  121:/* End CONST: DURATION_ZERO_NSEC */
        -:  122:
        -:  123:
        -:  124:/* Begin STRUCT: Property_t */
        -:  125:
        -:  126:
        -:  127:/* End STRUCT: Property_t */
        -:  128:
        -:  129:
        -:  130:/* Begin TYPEDEF: PropertySeq */
        -:  131:
        -:  132:
        -:  133:/* End TYPEDEF: PropertySeq */
        -:  134:
        -:  135:
        -:  136:/* Begin STRUCT: BinaryProperty_t */
        -:  137:
        -:  138:
        -:  139:/* End STRUCT: BinaryProperty_t */
        -:  140:
        -:  141:
        -:  142:/* Begin TYPEDEF: BinaryPropertySeq */
        -:  143:
        -:  144:
        -:  145:/* End TYPEDEF: BinaryPropertySeq */
        -:  146:
        -:  147:
        -:  148:/* Begin STRUCT: PropertyQosPolicy */
        -:  149:
        -:  150:
        -:  151:/* End STRUCT: PropertyQosPolicy */
        -:  152:
        -:  153:
        -:  154:/* Begin STRUCT: UserDataQosPolicy */
        -:  155:
        -:  156:
        -:  157:/* End STRUCT: UserDataQosPolicy */
        -:  158:
        -:  159:
        -:  160:/* Begin STRUCT: GroupDataQosPolicy */
        -:  161:
        -:  162:
        -:  163:/* End STRUCT: GroupDataQosPolicy */
        -:  164:
        -:  165:
        -:  166:/* Begin STRUCT: TopicDataQosPolicy */
        -:  167:
        -:  168:
        -:  169:/* End STRUCT: TopicDataQosPolicy */
        -:  170:
        -:  171:
        -:  172:/* Begin STRUCT: PartitionQosPolicy */
        -:  173:
        -:  174:
        -:  175:/* End STRUCT: PartitionQosPolicy */
        -:  176:
        -:  177:
        -:  178:/* Begin ENUM: HistoryQosPolicyKind */
        -:  179:
        -:  180:
        -:  181:/* End ENUM: HistoryQosPolicyKind */
        -:  182:
        -:  183:
        -:  184:/* Begin ENUM: DurabilityQosPolicyKind */
        -:  185:
        -:  186:
        -:  187:/* End ENUM: DurabilityQosPolicyKind */
        -:  188:
        -:  189:
        -:  190:/* Begin STRUCT: DurabilityQosPolicy */
        -:  191:
        -:  192:
        -:  193:/* End STRUCT: DurabilityQosPolicy */
        -:  194:
        -:  195:
        -:  196:/* Begin STRUCT: DurabilityServiceQosPolicy */
        -:  197:
        -:  198:
        -:  199:/* End STRUCT: DurabilityServiceQosPolicy */
        -:  200:
        -:  201:
        -:  202:/* Begin STRUCT: DeadlineQosPolicy */
        -:  203:
        -:  204:
        -:  205:/* End STRUCT: DeadlineQosPolicy */
        -:  206:
        -:  207:
        -:  208:/* Begin STRUCT: LatencyBudgetQosPolicy */
        -:  209:
        -:  210:
        -:  211:/* End STRUCT: LatencyBudgetQosPolicy */
        -:  212:
        -:  213:
        -:  214:/* Begin ENUM: LivelinessQosPolicyKind */
        -:  215:
        -:  216:
        -:  217:/* End ENUM: LivelinessQosPolicyKind */
        -:  218:
        -:  219:
        -:  220:/* Begin STRUCT: LivelinessQosPolicy */
        -:  221:
        -:  222:
        -:  223:/* End STRUCT: LivelinessQosPolicy */
        -:  224:
        -:  225:
        -:  226:/* Begin ENUM: ReliabilityQosPolicyKind */
        -:  227:
        -:  228:
        -:  229:/* End ENUM: ReliabilityQosPolicyKind */
        -:  230:
        -:  231:
        -:  232:/* Begin STRUCT: ReliabilityQosPolicy */
        -:  233:
        -:  234:
        -:  235:/* End STRUCT: ReliabilityQosPolicy */
        -:  236:
        -:  237:
        -:  238:/* Begin ENUM: DestinationOrderQosPolicyKind */
        -:  239:
        -:  240:
        -:  241:/* End ENUM: DestinationOrderQosPolicyKind */
        -:  242:
        -:  243:
        -:  244:/* Begin STRUCT: DestinationOrderQosPolicy */
        -:  245:
        -:  246:
        -:  247:/* End STRUCT: DestinationOrderQosPolicy */
        -:  248:
        -:  249:
        -:  250:/* Begin STRUCT: HistoryQosPolicy */
        -:  251:
        -:  252:
        -:  253:/* End STRUCT: HistoryQosPolicy */
        -:  254:
        -:  255:
        -:  256:/* Begin STRUCT: ResourceLimitsQosPolicy */
        -:  257:
        -:  258:
        -:  259:/* End STRUCT: ResourceLimitsQosPolicy */
        -:  260:
        -:  261:
        -:  262:/* Begin STRUCT: TransportPriorityQosPolicy */
        -:  263:
        -:  264:
        -:  265:/* End STRUCT: TransportPriorityQosPolicy */
        -:  266:
        -:  267:
        -:  268:/* Begin STRUCT: LifespanQosPolicy */
        -:  269:
        -:  270:
        -:  271:/* End STRUCT: LifespanQosPolicy */
        -:  272:
        -:  273:
        -:  274:/* Begin ENUM: OwnershipQosPolicyKind */
        -:  275:
        -:  276:
        -:  277:/* End ENUM: OwnershipQosPolicyKind */
        -:  278:
        -:  279:
        -:  280:/* Begin STRUCT: OwnershipQosPolicy */
        -:  281:
        -:  282:
        -:  283:/* End STRUCT: OwnershipQosPolicy */
        -:  284:
        -:  285:
        -:  286:/* Begin STRUCT: OwnershipStrengthQosPolicy */
        -:  287:
        -:  288:
        -:  289:/* End STRUCT: OwnershipStrengthQosPolicy */
        -:  290:
        -:  291:
        -:  292:/* Begin ENUM: PresentationQosPolicyAccessScopeKind */
        -:  293:
        -:  294:
        -:  295:/* End ENUM: PresentationQosPolicyAccessScopeKind */
        -:  296:
        -:  297:
        -:  298:/* Begin STRUCT: PresentationQosPolicy */
        -:  299:
        -:  300:
        -:  301:/* End STRUCT: PresentationQosPolicy */
        -:  302:
        -:  303:
        -:  304:/* Begin STRUCT: TimeBasedFilterQosPolicy */
        -:  305:
        -:  306:
        -:  307:/* End STRUCT: TimeBasedFilterQosPolicy */
        -:  308:
        -:  309:
        -:  310:/* Begin STRUCT: TopicQos */
        -:  311:
        -:  312:
        -:  313:/* End STRUCT: TopicQos */
        -:  314:
        -:  315:
        -:  316:/* Begin STRUCT: WriterDataLifecycleQosPolicy */
        -:  317:
        -:  318:
        -:  319:/* End STRUCT: WriterDataLifecycleQosPolicy */
        -:  320:
        -:  321:
        -:  322:/* Begin STRUCT: DataWriterQos */
        -:  323:
        -:  324:
        -:  325:/* End STRUCT: DataWriterQos */
        -:  326:
        -:  327:
        -:  328:/* Begin STRUCT: EntityFactoryQosPolicy */
        -:  329:
        -:  330:
        -:  331:/* End STRUCT: EntityFactoryQosPolicy */
        -:  332:
        -:  333:
        -:  334:/* Begin STRUCT: PublisherQos */
        -:  335:
        -:  336:
        -:  337:/* End STRUCT: PublisherQos */
        -:  338:
        -:  339:
        -:  340:/* Begin STRUCT: ReaderDataLifecycleQosPolicy */
        -:  341:
        -:  342:
        -:  343:/* End STRUCT: ReaderDataLifecycleQosPolicy */
        -:  344:
        -:  345:
        -:  346:/* Begin STRUCT: DataReaderQos */
        -:  347:
        -:  348:
        -:  349:/* End STRUCT: DataReaderQos */
        -:  350:
        -:  351:
        -:  352:/* Begin STRUCT: SubscriberQos */
        -:  353:
        -:  354:
        -:  355:/* End STRUCT: SubscriberQos */
        -:  356:
        -:  357:
        -:  358:/* Begin STRUCT: DomainParticipantFactoryQos */
        -:  359:
        -:  360:
        -:  361:/* End STRUCT: DomainParticipantFactoryQos */
        -:  362:
        -:  363:
        -:  364:/* Begin STRUCT: DomainParticipantQos */
        -:  365:
        -:  366:
        -:  367:/* End STRUCT: DomainParticipantQos */
        -:  368:
        -:  369:
        -:  370:/* Begin STRUCT: BuiltinTopicKey_t */
        -:  371:
        -:  372:
        -:  373:/* End STRUCT: BuiltinTopicKey_t */
        -:  374:
        -:  375:
        -:  376:/* Begin STRUCT: ParticipantBuiltinTopicData */
        -:  377:
        -:  378:
        -:  379:/* End STRUCT: ParticipantBuiltinTopicData */
        -:  380:
        -:  381:
        -:  382:/* Begin STRUCT: PublicationBuiltinTopicData */
        -:  383:
        -:  384:
        -:  385:/* End STRUCT: PublicationBuiltinTopicData */
        -:  386:
        -:  387:
        -:  388:/* Begin STRUCT: SubscriptionBuiltinTopicData */
        -:  389:
        -:  390:
        -:  391:/* End STRUCT: SubscriptionBuiltinTopicData */
        -:  392:
        -:  393:
        -:  394:/* Begin STRUCT: TopicBuiltinTopicData */
        -:  395:
        -:  396:
        -:  397:/* End STRUCT: TopicBuiltinTopicData */
        -:  398:
        -:  399:
        -:  400:/* Begin TYPEDEF: SampleStateKind */
        -:  401:
        -:  402:
        -:  403:/* End TYPEDEF: SampleStateKind */
        -:  404:
        -:  405:
        -:  406:/* Begin CONST: READ_SAMPLE_STATE */
        -:  407:
        -:  408:
        -:  409:/* End CONST: READ_SAMPLE_STATE */
        -:  410:
        -:  411:
        -:  412:/* Begin CONST: NOT_READ_SAMPLE_STATE */
        -:  413:
        -:  414:
        -:  415:/* End CONST: NOT_READ_SAMPLE_STATE */
        -:  416:
        -:  417:
        -:  418:/* Begin TYPEDEF: SampleStateMask */
        -:  419:
        -:  420:
        -:  421:/* End TYPEDEF: SampleStateMask */
        -:  422:
        -:  423:
        -:  424:/* Begin CONST: ANY_SAMPLE_STATE */
        -:  425:
        -:  426:
        -:  427:/* End CONST: ANY_SAMPLE_STATE */
        -:  428:
        -:  429:
        -:  430:/* Begin TYPEDEF: ViewStateKind */
        -:  431:
        -:  432:
        -:  433:/* End TYPEDEF: ViewStateKind */
        -:  434:
        -:  435:
        -:  436:/* Begin CONST: NEW_VIEW_STATE */
        -:  437:
        -:  438:
        -:  439:/* End CONST: NEW_VIEW_STATE */
        -:  440:
        -:  441:
        -:  442:/* Begin CONST: NOT_NEW_VIEW_STATE */
        -:  443:
        -:  444:
        -:  445:/* End CONST: NOT_NEW_VIEW_STATE */
        -:  446:
        -:  447:
        -:  448:/* Begin TYPEDEF: ViewStateMask */
        -:  449:
        -:  450:
        -:  451:/* End TYPEDEF: ViewStateMask */
        -:  452:
        -:  453:
        -:  454:/* Begin CONST: ANY_VIEW_STATE */
        -:  455:
        -:  456:
        -:  457:/* End CONST: ANY_VIEW_STATE */
        -:  458:
        -:  459:
        -:  460:/* Begin TYPEDEF: InstanceStateKind */
        -:  461:
        -:  462:
        -:  463:/* End TYPEDEF: InstanceStateKind */
        -:  464:
        -:  465:
        -:  466:/* Begin CONST: ALIVE_INSTANCE_STATE */
        -:  467:
        -:  468:
        -:  469:/* End CONST: ALIVE_INSTANCE_STATE */
        -:  470:
        -:  471:
        -:  472:/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */
        -:  473:
        -:  474:
        -:  475:/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */
        -:  476:
        -:  477:
        -:  478:/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */
        -:  479:
        -:  480:
        -:  481:/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */
        -:  482:
        -:  483:
        -:  484:/* Begin TYPEDEF: InstanceStateMask */
        -:  485:
        -:  486:
        -:  487:/* End TYPEDEF: InstanceStateMask */
        -:  488:
        -:  489:
        -:  490:/* Begin CONST: ANY_INSTANCE_STATE */
        -:  491:
        -:  492:
        -:  493:/* End CONST: ANY_INSTANCE_STATE */
        -:  494:
        -:  495:
        -:  496:/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */
        -:  497:
        -:  498:
        -:  499:/* End CONST: NOT_ALIVE_INSTANCE_STATE */
        -:  500:
        -:  501:
        -:  502:/* Begin STRUCT: Time_t */
        -:  503:
        -:  504:
        -:  505:/* End STRUCT: Time_t */
        -:  506:
        -:  507:
        -:  508:/* Begin CONST: TIME_INVALID_SEC */
        -:  509:
        -:  510:
        -:  511:/* End CONST: TIME_INVALID_SEC */
        -:  512:
        -:  513:
        -:  514:/* Begin CONST: TIME_INVALID_NSEC */
        -:  515:
        -:  516:
        -:  517:/* End CONST: TIME_INVALID_NSEC */
        -:  518:
        -:  519:
        -:  520:/* Begin STRUCT: SampleInfo */
        -:  521:
        -:  522:
        -:  523:/* End STRUCT: SampleInfo */
        -:  524:
        -:  525:
        -:  526:/* Begin TYPEDEF: SampleInfoSeq */
        -:  527:
        -:  528:
        -:  529:/* End TYPEDEF: SampleInfoSeq */
        -:  530:
        -:  531:/* End MODULE: DDS */
        -:  532:
        -:  533:
        -:  534:/* Begin MODULE: DDS */
        -:  535:
        -:  536:
        -:  537:
        -:  538:/* Begin INTERFACE-FWD: Condition */
        -:  539:
        -:  540:
        -:  541:/* End INTERFACE-FWD: Condition */
        -:  542:
        -:  543:
        -:  544:/* Begin TYPEDEF: ConditionSeq */
        -:  545:
        -:  546:
        -:  547:/* End TYPEDEF: ConditionSeq */
        -:  548:
        -:  549:/* End MODULE: DDS */
        -:  550:
        -:  551:
        -:  552:/* Begin MODULE: DDS */
        -:  553:
        -:  554:
        -:  555:
        -:  556:/* Begin TYPEDEF: DomainId_t */
        -:  557:
        -:  558:
        -:  559:/* End TYPEDEF: DomainId_t */
        -:  560:
        -:  561:
        -:  562:/* Begin TYPEDEF: ReturnCode_t */
        -:  563:
        -:  564:
        -:  565:/* End TYPEDEF: ReturnCode_t */
        -:  566:
        -:  567:
        -:  568:/* Begin CONST: HANDLE_NIL */
        -:  569:
        -:  570:
        -:  571:/* End CONST: HANDLE_NIL */
        -:  572:
        -:  573:
        -:  574:/* Begin CONST: LENGTH_UNLIMITED */
        -:  575:
        -:  576:
        -:  577:/* End CONST: LENGTH_UNLIMITED */
        -:  578:
        -:  579:
        -:  580:/* Begin CONST: RETCODE_OK */
        -:  581:
        -:  582:
        -:  583:/* End CONST: RETCODE_OK */
        -:  584:
        -:  585:
        -:  586:/* Begin CONST: RETCODE_ERROR */
        -:  587:
        -:  588:
        -:  589:/* End CONST: RETCODE_ERROR */
        -:  590:
        -:  591:
        -:  592:/* Begin CONST: RETCODE_UNSUPPORTED */
        -:  593:
        -:  594:
        -:  595:/* End CONST: RETCODE_UNSUPPORTED */
        -:  596:
        -:  597:
        -:  598:/* Begin CONST: RETCODE_BAD_PARAMETER */
        -:  599:
        -:  600:
        -:  601:/* End CONST: RETCODE_BAD_PARAMETER */
        -:  602:
        -:  603:
        -:  604:/* Begin CONST: RETCODE_PRECONDITION_NOT_MET */
        -:  605:
        -:  606:
        -:  607:/* End CONST: RETCODE_PRECONDITION_NOT_MET */
        -:  608:
        -:  609:
        -:  610:/* Begin CONST: RETCODE_OUT_OF_RESOURCES */
        -:  611:
        -:  612:
        -:  613:/* End CONST: RETCODE_OUT_OF_RESOURCES */
        -:  614:
        -:  615:
        -:  616:/* Begin CONST: RETCODE_NOT_ENABLED */
        -:  617:
        -:  618:
        -:  619:/* End CONST: RETCODE_NOT_ENABLED */
        -:  620:
        -:  621:
        -:  622:/* Begin CONST: RETCODE_IMMUTABLE_POLICY */
        -:  623:
        -:  624:
        -:  625:/* End CONST: RETCODE_IMMUTABLE_POLICY */
        -:  626:
        -:  627:
        -:  628:/* Begin CONST: RETCODE_INCONSISTENT_POLICY */
        -:  629:
        -:  630:
        -:  631:/* End CONST: RETCODE_INCONSISTENT_POLICY */
        -:  632:
        -:  633:
        -:  634:/* Begin CONST: RETCODE_ALREADY_DELETED */
        -:  635:
        -:  636:
        -:  637:/* End CONST: RETCODE_ALREADY_DELETED */
        -:  638:
        -:  639:
        -:  640:/* Begin CONST: RETCODE_TIMEOUT */
        -:  641:
        -:  642:
        -:  643:/* End CONST: RETCODE_TIMEOUT */
        -:  644:
        -:  645:
        -:  646:/* Begin CONST: RETCODE_NO_DATA */
        -:  647:
        -:  648:
        -:  649:/* End CONST: RETCODE_NO_DATA */
        -:  650:
        -:  651:
        -:  652:/* Begin CONST: RETCODE_ILLEGAL_OPERATION */
        -:  653:
        -:  654:
        -:  655:/* End CONST: RETCODE_ILLEGAL_OPERATION */
        -:  656:
        -:  657:
        -:  658:/* Begin TYPEDEF: StatusKind */
        -:  659:
        -:  660:
        -:  661:/* End TYPEDEF: StatusKind */
        -:  662:
        -:  663:
        -:  664:/* Begin TYPEDEF: StatusMask */
        -:  665:
        -:  666:
        -:  667:/* End TYPEDEF: StatusMask */
        -:  668:
        -:  669:
        -:  670:/* Begin CONST: INCONSISTENT_TOPIC_STATUS */
        -:  671:
        -:  672:
        -:  673:/* End CONST: INCONSISTENT_TOPIC_STATUS */
        -:  674:
        -:  675:
        -:  676:/* Begin CONST: OFFERED_DEADLINE_MISSED_STATUS */
        -:  677:
        -:  678:
        -:  679:/* End CONST: OFFERED_DEADLINE_MISSED_STATUS */
        -:  680:
        -:  681:
        -:  682:/* Begin CONST: REQUESTED_DEADLINE_MISSED_STATUS */
        -:  683:
        -:  684:
        -:  685:/* End CONST: REQUESTED_DEADLINE_MISSED_STATUS */
        -:  686:
        -:  687:
        -:  688:/* Begin CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */
        -:  689:
        -:  690:
        -:  691:/* End CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */
        -:  692:
        -:  693:
        -:  694:/* Begin CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */
        -:  695:
        -:  696:
        -:  697:/* End CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */
        -:  698:
        -:  699:
        -:  700:/* Begin CONST: SAMPLE_LOST_STATUS */
        -:  701:
        -:  702:
        -:  703:/* End CONST: SAMPLE_LOST_STATUS */
        -:  704:
        -:  705:
        -:  706:/* Begin CONST: SAMPLE_REJECTED_STATUS */
        -:  707:
        -:  708:
        -:  709:/* End CONST: SAMPLE_REJECTED_STATUS */
        -:  710:
        -:  711:
        -:  712:/* Begin CONST: DATA_ON_READERS_STATUS */
        -:  713:
        -:  714:
        -:  715:/* End CONST: DATA_ON_READERS_STATUS */
        -:  716:
        -:  717:
        -:  718:/* Begin CONST: DATA_AVAILABLE_STATUS */
        -:  719:
        -:  720:
        -:  721:/* End CONST: DATA_AVAILABLE_STATUS */
        -:  722:
        -:  723:
        -:  724:/* Begin CONST: LIVELINESS_LOST_STATUS */
        -:  725:
        -:  726:
        -:  727:/* End CONST: LIVELINESS_LOST_STATUS */
        -:  728:
        -:  729:
        -:  730:/* Begin CONST: LIVELINESS_CHANGED_STATUS */
        -:  731:
        -:  732:
        -:  733:/* End CONST: LIVELINESS_CHANGED_STATUS */
        -:  734:
        -:  735:
        -:  736:/* Begin CONST: PUBLICATION_MATCHED_STATUS */
        -:  737:
        -:  738:
        -:  739:/* End CONST: PUBLICATION_MATCHED_STATUS */
        -:  740:
        -:  741:
        -:  742:/* Begin CONST: SUBSCRIPTION_MATCHED_STATUS */
        -:  743:
        -:  744:
        -:  745:/* End CONST: SUBSCRIPTION_MATCHED_STATUS */
        -:  746:
        -:  747:
        -:  748:/* Begin STRUCT: InconsistentTopicStatus */
        -:  749:
        -:  750:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  751:namespace OpenDDS { namespace DCPS {
        -:  752:
    #####:  753:void gen_find_size(const DDS::InconsistentTopicStatus& stru, size_t& size, size_t& padding)
        -:  754:{
        -:  755:  ACE_UNUSED_ARG(stru);
        -:  756:  ACE_UNUSED_ARG(size);
        -:  757:  ACE_UNUSED_ARG(padding);
    #####:  758:  if ((size + padding) % 4) {
    #####:  759:    padding += 4 - ((size + padding) % 4);
        -:  760:  }
    #####:  761:  size += gen_max_marshaled_size(stru.total_count);
    #####:  762:  if ((size + padding) % 4) {
    #####:  763:    padding += 4 - ((size + padding) % 4);
        -:  764:  }
    #####:  765:  size += gen_max_marshaled_size(stru.total_count_change);
    #####:  766:}
        -:  767:
    #####:  768:bool operator<<(Serializer& strm, const DDS::InconsistentTopicStatus& stru)
        -:  769:{
        -:  770:  ACE_UNUSED_ARG(strm);
        -:  771:  ACE_UNUSED_ARG(stru);
    #####:  772:  return (strm << stru.total_count)
    #####:  773:    && (strm << stru.total_count_change);
        -:  774:}
        -:  775:
    #####:  776:bool operator>>(Serializer& strm, DDS::InconsistentTopicStatus& stru)
        -:  777:{
        -:  778:  ACE_UNUSED_ARG(strm);
        -:  779:  ACE_UNUSED_ARG(stru);
    #####:  780:  return (strm >> stru.total_count)
    #####:  781:    && (strm >> stru.total_count_change);
        -:  782:}
        -:  783:
        -:  784:}  }
        -:  785:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  786:
        -:  787:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  788:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  789:namespace OpenDDS { namespace DCPS {
        -:  790:
        -:  791:template<>
    #####:  792:struct MetaStructImpl<DDS::InconsistentTopicStatus> : MetaStruct {
        -:  793:  typedef DDS::InconsistentTopicStatus T;
        -:  794:
        -:  795:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####:  796:  void* allocate() const { return new T; }
        -:  797:
    #####:  798:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -:  799:
    #####:  800:  size_t numDcpsKeys() const { return 0; }
        -:  801:
        -:  802:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -:  803:
    #####:  804:  bool isDcpsKey(const char* field) const
        -:  805:  {
        -:  806:    ACE_UNUSED_ARG(field);
    #####:  807:    return false;
        -:  808:  }
        -:  809:
    #####:  810:  Value getValue(const void* stru, const char* field) const
        -:  811:  {
    #####:  812:    const DDS::InconsistentTopicStatus& typed = *static_cast<const DDS::InconsistentTopicStatus*>(stru);
    #####:  813:    if (std::strcmp(field, "total_count") == 0) {
    #####:  814:      return typed.total_count;
        -:  815:    }
    #####:  816:    if (std::strcmp(field, "total_count_change") == 0) {
    #####:  817:      return typed.total_count_change;
        -:  818:    }
        -:  819:    ACE_UNUSED_ARG(typed);
    #####:  820:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::InconsistentTopicStatus)");
        -:  821:  }
        -:  822:
    #####:  823:  Value getValue(Serializer& ser, const char* field) const
        -:  824:  {
    #####:  825:    if (std::strcmp(field, "total_count") == 0) {
        -:  826:      ACE_CDR::Long val;
    #####:  827:      if (!(ser >> val)) {
    #####:  828:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -:  829:      }
    #####:  830:      return val;
        -:  831:    } else {
    #####:  832:      if (!ser.skip(1, 4)) {
    #####:  833:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -:  834:      }
        -:  835:    }
    #####:  836:    if (std::strcmp(field, "total_count_change") == 0) {
        -:  837:      ACE_CDR::Long val;
    #####:  838:      if (!(ser >> val)) {
    #####:  839:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -:  840:      }
    #####:  841:      return val;
        -:  842:    } else {
    #####:  843:      if (!ser.skip(1, 4)) {
    #####:  844:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -:  845:      }
        -:  846:    }
    #####:  847:    if (!field[0]) {
    #####:  848:      return 0;
        -:  849:    }
    #####:  850:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::InconsistentTopicStatus");
        -:  851:  }
        -:  852:
    #####:  853:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -:  854:  {
        -:  855:    ACE_UNUSED_ARG(next);
    #####:  856:    if (std::strcmp(field, "total_count") == 0) {
    #####:  857:      return make_field_cmp(&T::total_count, next);
        -:  858:    }
    #####:  859:    if (std::strcmp(field, "total_count_change") == 0) {
    #####:  860:      return make_field_cmp(&T::total_count_change, next);
        -:  861:    }
    #####:  862:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::InconsistentTopicStatus)");
        -:  863:  }
        -:  864:
        -:  865:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####:  866:  const char** getFieldNames() const
        -:  867:  {
        -:  868:    static const char* names[] = {"total_count", "total_count_change", 0};
    #####:  869:    return names;
        -:  870:  }
        -:  871:
    #####:  872:  const void* getRawField(const void* stru, const char* field) const
        -:  873:  {
    #####:  874:    if (std::strcmp(field, "total_count") == 0) {
    #####:  875:      return &static_cast<const T*>(stru)->total_count;
        -:  876:    }
    #####:  877:    if (std::strcmp(field, "total_count_change") == 0) {
    #####:  878:      return &static_cast<const T*>(stru)->total_count_change;
        -:  879:    }
    #####:  880:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::InconsistentTopicStatus)");
        -:  881:  }
        -:  882:
    #####:  883:  void assign(void* lhs, const char* field, const void* rhs,
        -:  884:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -:  885:  {
        -:  886:    ACE_UNUSED_ARG(lhs);
        -:  887:    ACE_UNUSED_ARG(field);
        -:  888:    ACE_UNUSED_ARG(rhs);
        -:  889:    ACE_UNUSED_ARG(rhsFieldSpec);
        -:  890:    ACE_UNUSED_ARG(rhsMeta);
    #####:  891:    if (std::strcmp(field, "total_count") == 0) {
    #####:  892:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####:  893:      return;
        -:  894:    }
    #####:  895:    if (std::strcmp(field, "total_count_change") == 0) {
    #####:  896:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####:  897:      return;
        -:  898:    }
    #####:  899:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::InconsistentTopicStatus)");
        -:  900:  }
        -:  901:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -:  902:
    #####:  903:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -:  904:  {
        -:  905:    ACE_UNUSED_ARG(lhs);
        -:  906:    ACE_UNUSED_ARG(field);
        -:  907:    ACE_UNUSED_ARG(rhs);
    #####:  908:    if (std::strcmp(field, "total_count") == 0) {
    #####:  909:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -:  910:    }
    #####:  911:    if (std::strcmp(field, "total_count_change") == 0) {
    #####:  912:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -:  913:    }
    #####:  914:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::InconsistentTopicStatus)");
        -:  915:  }
        -:  916:};
        -:  917:
        -:  918:template<>
    #####:  919:const MetaStruct& getMetaStruct<DDS::InconsistentTopicStatus>()
        -:  920:{
    #####:  921:  static MetaStructImpl<DDS::InconsistentTopicStatus> msi;
    #####:  922:  return msi;
        -:  923:}
        -:  924:
    #####:  925:bool gen_skip_over(Serializer& ser, DDS::InconsistentTopicStatus*)
        -:  926:{
        -:  927:  ACE_UNUSED_ARG(ser);
    #####:  928:  MetaStructImpl<DDS::InconsistentTopicStatus>().getValue(ser, "");
    #####:  929:  return true;
        -:  930:}
        -:  931:
        -:  932:}  }
        -:  933:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  934:
        -:  935:#endif
        -:  936:
        -:  937:/* End STRUCT: InconsistentTopicStatus */
        -:  938:
        -:  939:
        -:  940:/* Begin STRUCT: SampleLostStatus */
        -:  941:
        -:  942:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  943:namespace OpenDDS { namespace DCPS {
        -:  944:
    #####:  945:void gen_find_size(const DDS::SampleLostStatus& stru, size_t& size, size_t& padding)
        -:  946:{
        -:  947:  ACE_UNUSED_ARG(stru);
        -:  948:  ACE_UNUSED_ARG(size);
        -:  949:  ACE_UNUSED_ARG(padding);
    #####:  950:  if ((size + padding) % 4) {
    #####:  951:    padding += 4 - ((size + padding) % 4);
        -:  952:  }
    #####:  953:  size += gen_max_marshaled_size(stru.total_count);
    #####:  954:  if ((size + padding) % 4) {
    #####:  955:    padding += 4 - ((size + padding) % 4);
        -:  956:  }
    #####:  957:  size += gen_max_marshaled_size(stru.total_count_change);
    #####:  958:}
        -:  959:
    #####:  960:bool operator<<(Serializer& strm, const DDS::SampleLostStatus& stru)
        -:  961:{
        -:  962:  ACE_UNUSED_ARG(strm);
        -:  963:  ACE_UNUSED_ARG(stru);
    #####:  964:  return (strm << stru.total_count)
    #####:  965:    && (strm << stru.total_count_change);
        -:  966:}
        -:  967:
    #####:  968:bool operator>>(Serializer& strm, DDS::SampleLostStatus& stru)
        -:  969:{
        -:  970:  ACE_UNUSED_ARG(strm);
        -:  971:  ACE_UNUSED_ARG(stru);
    #####:  972:  return (strm >> stru.total_count)
    #####:  973:    && (strm >> stru.total_count_change);
        -:  974:}
        -:  975:
        -:  976:}  }
        -:  977:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  978:
        -:  979:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  980:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  981:namespace OpenDDS { namespace DCPS {
        -:  982:
        -:  983:template<>
    #####:  984:struct MetaStructImpl<DDS::SampleLostStatus> : MetaStruct {
        -:  985:  typedef DDS::SampleLostStatus T;
        -:  986:
        -:  987:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####:  988:  void* allocate() const { return new T; }
        -:  989:
    #####:  990:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -:  991:
    #####:  992:  size_t numDcpsKeys() const { return 0; }
        -:  993:
        -:  994:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -:  995:
    #####:  996:  bool isDcpsKey(const char* field) const
        -:  997:  {
        -:  998:    ACE_UNUSED_ARG(field);
    #####:  999:    return false;
        -: 1000:  }
        -: 1001:
    #####: 1002:  Value getValue(const void* stru, const char* field) const
        -: 1003:  {
    #####: 1004:    const DDS::SampleLostStatus& typed = *static_cast<const DDS::SampleLostStatus*>(stru);
    #####: 1005:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1006:      return typed.total_count;
        -: 1007:    }
    #####: 1008:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1009:      return typed.total_count_change;
        -: 1010:    }
        -: 1011:    ACE_UNUSED_ARG(typed);
    #####: 1012:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleLostStatus)");
        -: 1013:  }
        -: 1014:
    #####: 1015:  Value getValue(Serializer& ser, const char* field) const
        -: 1016:  {
    #####: 1017:    if (std::strcmp(field, "total_count") == 0) {
        -: 1018:      ACE_CDR::Long val;
    #####: 1019:      if (!(ser >> val)) {
    #####: 1020:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 1021:      }
    #####: 1022:      return val;
        -: 1023:    } else {
    #####: 1024:      if (!ser.skip(1, 4)) {
    #####: 1025:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 1026:      }
        -: 1027:    }
    #####: 1028:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 1029:      ACE_CDR::Long val;
    #####: 1030:      if (!(ser >> val)) {
    #####: 1031:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 1032:      }
    #####: 1033:      return val;
        -: 1034:    } else {
    #####: 1035:      if (!ser.skip(1, 4)) {
    #####: 1036:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 1037:      }
        -: 1038:    }
    #####: 1039:    if (!field[0]) {
    #####: 1040:      return 0;
        -: 1041:    }
    #####: 1042:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::SampleLostStatus");
        -: 1043:  }
        -: 1044:
    #####: 1045:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 1046:  {
        -: 1047:    ACE_UNUSED_ARG(next);
    #####: 1048:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1049:      return make_field_cmp(&T::total_count, next);
        -: 1050:    }
    #####: 1051:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1052:      return make_field_cmp(&T::total_count_change, next);
        -: 1053:    }
    #####: 1054:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleLostStatus)");
        -: 1055:  }
        -: 1056:
        -: 1057:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 1058:  const char** getFieldNames() const
        -: 1059:  {
        -: 1060:    static const char* names[] = {"total_count", "total_count_change", 0};
    #####: 1061:    return names;
        -: 1062:  }
        -: 1063:
    #####: 1064:  const void* getRawField(const void* stru, const char* field) const
        -: 1065:  {
    #####: 1066:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1067:      return &static_cast<const T*>(stru)->total_count;
        -: 1068:    }
    #####: 1069:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1070:      return &static_cast<const T*>(stru)->total_count_change;
        -: 1071:    }
    #####: 1072:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleLostStatus)");
        -: 1073:  }
        -: 1074:
    #####: 1075:  void assign(void* lhs, const char* field, const void* rhs,
        -: 1076:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 1077:  {
        -: 1078:    ACE_UNUSED_ARG(lhs);
        -: 1079:    ACE_UNUSED_ARG(field);
        -: 1080:    ACE_UNUSED_ARG(rhs);
        -: 1081:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 1082:    ACE_UNUSED_ARG(rhsMeta);
    #####: 1083:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1084:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1085:      return;
        -: 1086:    }
    #####: 1087:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1088:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1089:      return;
        -: 1090:    }
    #####: 1091:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleLostStatus)");
        -: 1092:  }
        -: 1093:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 1094:
    #####: 1095:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 1096:  {
        -: 1097:    ACE_UNUSED_ARG(lhs);
        -: 1098:    ACE_UNUSED_ARG(field);
        -: 1099:    ACE_UNUSED_ARG(rhs);
    #####: 1100:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1101:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 1102:    }
    #####: 1103:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1104:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 1105:    }
    #####: 1106:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleLostStatus)");
        -: 1107:  }
        -: 1108:};
        -: 1109:
        -: 1110:template<>
    #####: 1111:const MetaStruct& getMetaStruct<DDS::SampleLostStatus>()
        -: 1112:{
    #####: 1113:  static MetaStructImpl<DDS::SampleLostStatus> msi;
    #####: 1114:  return msi;
        -: 1115:}
        -: 1116:
    #####: 1117:bool gen_skip_over(Serializer& ser, DDS::SampleLostStatus*)
        -: 1118:{
        -: 1119:  ACE_UNUSED_ARG(ser);
    #####: 1120:  MetaStructImpl<DDS::SampleLostStatus>().getValue(ser, "");
    #####: 1121:  return true;
        -: 1122:}
        -: 1123:
        -: 1124:}  }
        -: 1125:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1126:
        -: 1127:#endif
        -: 1128:
        -: 1129:/* End STRUCT: SampleLostStatus */
        -: 1130:
        -: 1131:
        -: 1132:/* Begin ENUM: SampleRejectedStatusKind */
        -: 1133:
        -: 1134:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1135:namespace OpenDDS { namespace DCPS {
        -: 1136:
    #####: 1137:bool operator<<(Serializer& strm, const DDS::SampleRejectedStatusKind& enumval)
        -: 1138:{
        -: 1139:  ACE_UNUSED_ARG(strm);
        -: 1140:  ACE_UNUSED_ARG(enumval);
    #####: 1141:  return strm << static_cast<CORBA::ULong>(enumval);
        -: 1142:}
        -: 1143:
    #####: 1144:bool operator>>(Serializer& strm, DDS::SampleRejectedStatusKind& enumval)
        -: 1145:{
        -: 1146:  ACE_UNUSED_ARG(strm);
        -: 1147:  ACE_UNUSED_ARG(enumval);
    #####: 1148:  CORBA::ULong temp = 0;
    #####: 1149:  if (strm >> temp) {
    #####: 1150:    enumval = static_cast<DDS::SampleRejectedStatusKind>(temp);
    #####: 1151:    return true;
        -: 1152:  }
    #####: 1153:  return false;
        -: 1154:}
        -: 1155:
        -: 1156:}  }
        -: 1157:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1158:
        -: 1159:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1160:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1161:namespace OpenDDS { namespace DCPS {
        -: 1162:
        -: 1163:const char* gen_DDS_SampleRejectedStatusKind_names[] = {
        -: 1164:  "NOT_REJECTED",
        -: 1165:  "REJECTED_BY_INSTANCES_LIMIT",
        -: 1166:  "REJECTED_BY_SAMPLES_LIMIT",
        -: 1167:  "REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT"
        -: 1168:};
        -: 1169:const size_t gen_DDS_SampleRejectedStatusKind_names_size = 4;
        -: 1170:}  }
        -: 1171:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1172:
        -: 1173:#endif
        -: 1174:
        -: 1175:/* End ENUM: SampleRejectedStatusKind */
        -: 1176:
        -: 1177:
        -: 1178:/* Begin STRUCT: SampleRejectedStatus */
        -: 1179:
        -: 1180:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1181:namespace OpenDDS { namespace DCPS {
        -: 1182:
    #####: 1183:void gen_find_size(const DDS::SampleRejectedStatus& stru, size_t& size, size_t& padding)
        -: 1184:{
        -: 1185:  ACE_UNUSED_ARG(stru);
        -: 1186:  ACE_UNUSED_ARG(size);
        -: 1187:  ACE_UNUSED_ARG(padding);
    #####: 1188:  if ((size + padding) % 4) {
    #####: 1189:    padding += 4 - ((size + padding) % 4);
        -: 1190:  }
    #####: 1191:  size += gen_max_marshaled_size(stru.total_count);
    #####: 1192:  if ((size + padding) % 4) {
    #####: 1193:    padding += 4 - ((size + padding) % 4);
        -: 1194:  }
    #####: 1195:  size += gen_max_marshaled_size(stru.total_count_change);
    #####: 1196:  find_size_ulong(size, padding);
    #####: 1197:  if ((size + padding) % 4) {
    #####: 1198:    padding += 4 - ((size + padding) % 4);
        -: 1199:  }
    #####: 1200:  size += gen_max_marshaled_size(stru.last_instance_handle);
    #####: 1201:}
        -: 1202:
    #####: 1203:bool operator<<(Serializer& strm, const DDS::SampleRejectedStatus& stru)
        -: 1204:{
        -: 1205:  ACE_UNUSED_ARG(strm);
        -: 1206:  ACE_UNUSED_ARG(stru);
    #####: 1207:  return (strm << stru.total_count)
    #####: 1208:    && (strm << stru.total_count_change)
    #####: 1209:    && (strm << stru.last_reason)
    #####: 1210:    && (strm << stru.last_instance_handle);
        -: 1211:}
        -: 1212:
    #####: 1213:bool operator>>(Serializer& strm, DDS::SampleRejectedStatus& stru)
        -: 1214:{
        -: 1215:  ACE_UNUSED_ARG(strm);
        -: 1216:  ACE_UNUSED_ARG(stru);
    #####: 1217:  return (strm >> stru.total_count)
    #####: 1218:    && (strm >> stru.total_count_change)
    #####: 1219:    && (strm >> stru.last_reason)
    #####: 1220:    && (strm >> stru.last_instance_handle);
        -: 1221:}
        -: 1222:
        -: 1223:}  }
        -: 1224:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1225:
        -: 1226:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1227:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1228:namespace OpenDDS { namespace DCPS {
        -: 1229:
        -: 1230:template<>
    #####: 1231:struct MetaStructImpl<DDS::SampleRejectedStatus> : MetaStruct {
        -: 1232:  typedef DDS::SampleRejectedStatus T;
        -: 1233:
        -: 1234:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 1235:  void* allocate() const { return new T; }
        -: 1236:
    #####: 1237:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 1238:
    #####: 1239:  size_t numDcpsKeys() const { return 0; }
        -: 1240:
        -: 1241:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 1242:
    #####: 1243:  bool isDcpsKey(const char* field) const
        -: 1244:  {
        -: 1245:    ACE_UNUSED_ARG(field);
    #####: 1246:    return false;
        -: 1247:  }
        -: 1248:
    #####: 1249:  Value getValue(const void* stru, const char* field) const
        -: 1250:  {
    #####: 1251:    const DDS::SampleRejectedStatus& typed = *static_cast<const DDS::SampleRejectedStatus*>(stru);
    #####: 1252:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1253:      return typed.total_count;
        -: 1254:    }
    #####: 1255:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1256:      return typed.total_count_change;
        -: 1257:    }
    #####: 1258:    if (std::strcmp(field, "last_reason") == 0) {
    #####: 1259:      return gen_DDS_SampleRejectedStatusKind_names[typed.last_reason];
        -: 1260:    }
    #####: 1261:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 1262:      return typed.last_instance_handle;
        -: 1263:    }
        -: 1264:    ACE_UNUSED_ARG(typed);
    #####: 1265:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleRejectedStatus)");
        -: 1266:  }
        -: 1267:
    #####: 1268:  Value getValue(Serializer& ser, const char* field) const
        -: 1269:  {
    #####: 1270:    if (std::strcmp(field, "total_count") == 0) {
        -: 1271:      ACE_CDR::Long val;
    #####: 1272:      if (!(ser >> val)) {
    #####: 1273:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 1274:      }
    #####: 1275:      return val;
        -: 1276:    } else {
    #####: 1277:      if (!ser.skip(1, 4)) {
    #####: 1278:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 1279:      }
        -: 1280:    }
    #####: 1281:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 1282:      ACE_CDR::Long val;
    #####: 1283:      if (!(ser >> val)) {
    #####: 1284:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 1285:      }
    #####: 1286:      return val;
        -: 1287:    } else {
    #####: 1288:      if (!ser.skip(1, 4)) {
    #####: 1289:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 1290:      }
        -: 1291:    }
    #####: 1292:    if (std::strcmp(field, "last_reason") == 0) {
        -: 1293:      ACE_CDR::ULong val;
    #####: 1294:      if (!(ser >> val)) {
    #####: 1295:        throw std::runtime_error("Field 'last_reason' could not be deserialized");
        -: 1296:      }
    #####: 1297:      return val;
        -: 1298:    } else {
    #####: 1299:      if (!ser.skip(1, 4)) {
    #####: 1300:        throw std::runtime_error("Field 'last_reason' could not be skipped");
        -: 1301:      }
        -: 1302:    }
    #####: 1303:    if (std::strcmp(field, "last_instance_handle") == 0) {
        -: 1304:      ACE_CDR::Long val;
    #####: 1305:      if (!(ser >> val)) {
    #####: 1306:        throw std::runtime_error("Field 'last_instance_handle' could not be deserialized");
        -: 1307:      }
    #####: 1308:      return val;
        -: 1309:    } else {
    #####: 1310:      if (!ser.skip(1, 4)) {
    #####: 1311:        throw std::runtime_error("Field 'last_instance_handle' could not be skipped");
        -: 1312:      }
        -: 1313:    }
    #####: 1314:    if (!field[0]) {
    #####: 1315:      return 0;
        -: 1316:    }
    #####: 1317:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::SampleRejectedStatus");
        -: 1318:  }
        -: 1319:
    #####: 1320:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 1321:  {
        -: 1322:    ACE_UNUSED_ARG(next);
    #####: 1323:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1324:      return make_field_cmp(&T::total_count, next);
        -: 1325:    }
    #####: 1326:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1327:      return make_field_cmp(&T::total_count_change, next);
        -: 1328:    }
    #####: 1329:    if (std::strcmp(field, "last_reason") == 0) {
    #####: 1330:      return make_field_cmp(&T::last_reason, next);
        -: 1331:    }
    #####: 1332:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 1333:      return make_field_cmp(&T::last_instance_handle, next);
        -: 1334:    }
    #####: 1335:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleRejectedStatus)");
        -: 1336:  }
        -: 1337:
        -: 1338:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 1339:  const char** getFieldNames() const
        -: 1340:  {
        -: 1341:    static const char* names[] = {"total_count", "total_count_change", "last_reason", "last_instance_handle", 0};
    #####: 1342:    return names;
        -: 1343:  }
        -: 1344:
    #####: 1345:  const void* getRawField(const void* stru, const char* field) const
        -: 1346:  {
    #####: 1347:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1348:      return &static_cast<const T*>(stru)->total_count;
        -: 1349:    }
    #####: 1350:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1351:      return &static_cast<const T*>(stru)->total_count_change;
        -: 1352:    }
    #####: 1353:    if (std::strcmp(field, "last_reason") == 0) {
    #####: 1354:      return &static_cast<const T*>(stru)->last_reason;
        -: 1355:    }
    #####: 1356:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 1357:      return &static_cast<const T*>(stru)->last_instance_handle;
        -: 1358:    }
    #####: 1359:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleRejectedStatus)");
        -: 1360:  }
        -: 1361:
    #####: 1362:  void assign(void* lhs, const char* field, const void* rhs,
        -: 1363:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 1364:  {
        -: 1365:    ACE_UNUSED_ARG(lhs);
        -: 1366:    ACE_UNUSED_ARG(field);
        -: 1367:    ACE_UNUSED_ARG(rhs);
        -: 1368:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 1369:    ACE_UNUSED_ARG(rhsMeta);
    #####: 1370:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1371:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1372:      return;
        -: 1373:    }
    #####: 1374:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1375:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1376:      return;
        -: 1377:    }
    #####: 1378:    if (std::strcmp(field, "last_reason") == 0) {
    #####: 1379:      static_cast<T*>(lhs)->last_reason = *static_cast<const DDS::SampleRejectedStatusKind*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1380:      return;
        -: 1381:    }
    #####: 1382:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 1383:      static_cast<T*>(lhs)->last_instance_handle = *static_cast<const DDS::InstanceHandle_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1384:      return;
        -: 1385:    }
    #####: 1386:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleRejectedStatus)");
        -: 1387:  }
        -: 1388:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 1389:
    #####: 1390:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 1391:  {
        -: 1392:    ACE_UNUSED_ARG(lhs);
        -: 1393:    ACE_UNUSED_ARG(field);
        -: 1394:    ACE_UNUSED_ARG(rhs);
    #####: 1395:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1396:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 1397:    }
    #####: 1398:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1399:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 1400:    }
    #####: 1401:    if (std::strcmp(field, "last_reason") == 0) {
    #####: 1402:      return static_cast<const T*>(lhs)->last_reason == static_cast<const T*>(rhs)->last_reason;
        -: 1403:    }
    #####: 1404:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 1405:      return static_cast<const T*>(lhs)->last_instance_handle == static_cast<const T*>(rhs)->last_instance_handle;
        -: 1406:    }
    #####: 1407:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SampleRejectedStatus)");
        -: 1408:  }
        -: 1409:};
        -: 1410:
        -: 1411:template<>
    #####: 1412:const MetaStruct& getMetaStruct<DDS::SampleRejectedStatus>()
        -: 1413:{
    #####: 1414:  static MetaStructImpl<DDS::SampleRejectedStatus> msi;
    #####: 1415:  return msi;
        -: 1416:}
        -: 1417:
    #####: 1418:bool gen_skip_over(Serializer& ser, DDS::SampleRejectedStatus*)
        -: 1419:{
        -: 1420:  ACE_UNUSED_ARG(ser);
    #####: 1421:  MetaStructImpl<DDS::SampleRejectedStatus>().getValue(ser, "");
    #####: 1422:  return true;
        -: 1423:}
        -: 1424:
        -: 1425:}  }
        -: 1426:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1427:
        -: 1428:#endif
        -: 1429:
        -: 1430:/* End STRUCT: SampleRejectedStatus */
        -: 1431:
        -: 1432:
        -: 1433:/* Begin STRUCT: LivelinessLostStatus */
        -: 1434:
        -: 1435:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1436:namespace OpenDDS { namespace DCPS {
        -: 1437:
    #####: 1438:void gen_find_size(const DDS::LivelinessLostStatus& stru, size_t& size, size_t& padding)
        -: 1439:{
        -: 1440:  ACE_UNUSED_ARG(stru);
        -: 1441:  ACE_UNUSED_ARG(size);
        -: 1442:  ACE_UNUSED_ARG(padding);
    #####: 1443:  if ((size + padding) % 4) {
    #####: 1444:    padding += 4 - ((size + padding) % 4);
        -: 1445:  }
    #####: 1446:  size += gen_max_marshaled_size(stru.total_count);
    #####: 1447:  if ((size + padding) % 4) {
    #####: 1448:    padding += 4 - ((size + padding) % 4);
        -: 1449:  }
    #####: 1450:  size += gen_max_marshaled_size(stru.total_count_change);
    #####: 1451:}
        -: 1452:
    #####: 1453:bool operator<<(Serializer& strm, const DDS::LivelinessLostStatus& stru)
        -: 1454:{
        -: 1455:  ACE_UNUSED_ARG(strm);
        -: 1456:  ACE_UNUSED_ARG(stru);
    #####: 1457:  return (strm << stru.total_count)
    #####: 1458:    && (strm << stru.total_count_change);
        -: 1459:}
        -: 1460:
    #####: 1461:bool operator>>(Serializer& strm, DDS::LivelinessLostStatus& stru)
        -: 1462:{
        -: 1463:  ACE_UNUSED_ARG(strm);
        -: 1464:  ACE_UNUSED_ARG(stru);
    #####: 1465:  return (strm >> stru.total_count)
    #####: 1466:    && (strm >> stru.total_count_change);
        -: 1467:}
        -: 1468:
        -: 1469:}  }
        -: 1470:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1471:
        -: 1472:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1473:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1474:namespace OpenDDS { namespace DCPS {
        -: 1475:
        -: 1476:template<>
    #####: 1477:struct MetaStructImpl<DDS::LivelinessLostStatus> : MetaStruct {
        -: 1478:  typedef DDS::LivelinessLostStatus T;
        -: 1479:
        -: 1480:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 1481:  void* allocate() const { return new T; }
        -: 1482:
    #####: 1483:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 1484:
    #####: 1485:  size_t numDcpsKeys() const { return 0; }
        -: 1486:
        -: 1487:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 1488:
    #####: 1489:  bool isDcpsKey(const char* field) const
        -: 1490:  {
        -: 1491:    ACE_UNUSED_ARG(field);
    #####: 1492:    return false;
        -: 1493:  }
        -: 1494:
    #####: 1495:  Value getValue(const void* stru, const char* field) const
        -: 1496:  {
    #####: 1497:    const DDS::LivelinessLostStatus& typed = *static_cast<const DDS::LivelinessLostStatus*>(stru);
    #####: 1498:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1499:      return typed.total_count;
        -: 1500:    }
    #####: 1501:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1502:      return typed.total_count_change;
        -: 1503:    }
        -: 1504:    ACE_UNUSED_ARG(typed);
    #####: 1505:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessLostStatus)");
        -: 1506:  }
        -: 1507:
    #####: 1508:  Value getValue(Serializer& ser, const char* field) const
        -: 1509:  {
    #####: 1510:    if (std::strcmp(field, "total_count") == 0) {
        -: 1511:      ACE_CDR::Long val;
    #####: 1512:      if (!(ser >> val)) {
    #####: 1513:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 1514:      }
    #####: 1515:      return val;
        -: 1516:    } else {
    #####: 1517:      if (!ser.skip(1, 4)) {
    #####: 1518:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 1519:      }
        -: 1520:    }
    #####: 1521:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 1522:      ACE_CDR::Long val;
    #####: 1523:      if (!(ser >> val)) {
    #####: 1524:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 1525:      }
    #####: 1526:      return val;
        -: 1527:    } else {
    #####: 1528:      if (!ser.skip(1, 4)) {
    #####: 1529:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 1530:      }
        -: 1531:    }
    #####: 1532:    if (!field[0]) {
    #####: 1533:      return 0;
        -: 1534:    }
    #####: 1535:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::LivelinessLostStatus");
        -: 1536:  }
        -: 1537:
    #####: 1538:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 1539:  {
        -: 1540:    ACE_UNUSED_ARG(next);
    #####: 1541:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1542:      return make_field_cmp(&T::total_count, next);
        -: 1543:    }
    #####: 1544:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1545:      return make_field_cmp(&T::total_count_change, next);
        -: 1546:    }
    #####: 1547:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessLostStatus)");
        -: 1548:  }
        -: 1549:
        -: 1550:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 1551:  const char** getFieldNames() const
        -: 1552:  {
        -: 1553:    static const char* names[] = {"total_count", "total_count_change", 0};
    #####: 1554:    return names;
        -: 1555:  }
        -: 1556:
    #####: 1557:  const void* getRawField(const void* stru, const char* field) const
        -: 1558:  {
    #####: 1559:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1560:      return &static_cast<const T*>(stru)->total_count;
        -: 1561:    }
    #####: 1562:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1563:      return &static_cast<const T*>(stru)->total_count_change;
        -: 1564:    }
    #####: 1565:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessLostStatus)");
        -: 1566:  }
        -: 1567:
    #####: 1568:  void assign(void* lhs, const char* field, const void* rhs,
        -: 1569:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 1570:  {
        -: 1571:    ACE_UNUSED_ARG(lhs);
        -: 1572:    ACE_UNUSED_ARG(field);
        -: 1573:    ACE_UNUSED_ARG(rhs);
        -: 1574:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 1575:    ACE_UNUSED_ARG(rhsMeta);
    #####: 1576:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1577:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1578:      return;
        -: 1579:    }
    #####: 1580:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1581:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1582:      return;
        -: 1583:    }
    #####: 1584:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessLostStatus)");
        -: 1585:  }
        -: 1586:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 1587:
    #####: 1588:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 1589:  {
        -: 1590:    ACE_UNUSED_ARG(lhs);
        -: 1591:    ACE_UNUSED_ARG(field);
        -: 1592:    ACE_UNUSED_ARG(rhs);
    #####: 1593:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1594:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 1595:    }
    #####: 1596:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1597:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 1598:    }
    #####: 1599:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessLostStatus)");
        -: 1600:  }
        -: 1601:};
        -: 1602:
        -: 1603:template<>
    #####: 1604:const MetaStruct& getMetaStruct<DDS::LivelinessLostStatus>()
        -: 1605:{
    #####: 1606:  static MetaStructImpl<DDS::LivelinessLostStatus> msi;
    #####: 1607:  return msi;
        -: 1608:}
        -: 1609:
    #####: 1610:bool gen_skip_over(Serializer& ser, DDS::LivelinessLostStatus*)
        -: 1611:{
        -: 1612:  ACE_UNUSED_ARG(ser);
    #####: 1613:  MetaStructImpl<DDS::LivelinessLostStatus>().getValue(ser, "");
    #####: 1614:  return true;
        -: 1615:}
        -: 1616:
        -: 1617:}  }
        -: 1618:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1619:
        -: 1620:#endif
        -: 1621:
        -: 1622:/* End STRUCT: LivelinessLostStatus */
        -: 1623:
        -: 1624:
        -: 1625:/* Begin STRUCT: LivelinessChangedStatus */
        -: 1626:
        -: 1627:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1628:namespace OpenDDS { namespace DCPS {
        -: 1629:
    #####: 1630:void gen_find_size(const DDS::LivelinessChangedStatus& stru, size_t& size, size_t& padding)
        -: 1631:{
        -: 1632:  ACE_UNUSED_ARG(stru);
        -: 1633:  ACE_UNUSED_ARG(size);
        -: 1634:  ACE_UNUSED_ARG(padding);
    #####: 1635:  if ((size + padding) % 4) {
    #####: 1636:    padding += 4 - ((size + padding) % 4);
        -: 1637:  }
    #####: 1638:  size += gen_max_marshaled_size(stru.alive_count);
    #####: 1639:  if ((size + padding) % 4) {
    #####: 1640:    padding += 4 - ((size + padding) % 4);
        -: 1641:  }
    #####: 1642:  size += gen_max_marshaled_size(stru.not_alive_count);
    #####: 1643:  if ((size + padding) % 4) {
    #####: 1644:    padding += 4 - ((size + padding) % 4);
        -: 1645:  }
    #####: 1646:  size += gen_max_marshaled_size(stru.alive_count_change);
    #####: 1647:  if ((size + padding) % 4) {
    #####: 1648:    padding += 4 - ((size + padding) % 4);
        -: 1649:  }
    #####: 1650:  size += gen_max_marshaled_size(stru.not_alive_count_change);
    #####: 1651:  if ((size + padding) % 4) {
    #####: 1652:    padding += 4 - ((size + padding) % 4);
        -: 1653:  }
    #####: 1654:  size += gen_max_marshaled_size(stru.last_publication_handle);
    #####: 1655:}
        -: 1656:
    #####: 1657:bool operator<<(Serializer& strm, const DDS::LivelinessChangedStatus& stru)
        -: 1658:{
        -: 1659:  ACE_UNUSED_ARG(strm);
        -: 1660:  ACE_UNUSED_ARG(stru);
    #####: 1661:  return (strm << stru.alive_count)
    #####: 1662:    && (strm << stru.not_alive_count)
    #####: 1663:    && (strm << stru.alive_count_change)
    #####: 1664:    && (strm << stru.not_alive_count_change)
    #####: 1665:    && (strm << stru.last_publication_handle);
        -: 1666:}
        -: 1667:
    #####: 1668:bool operator>>(Serializer& strm, DDS::LivelinessChangedStatus& stru)
        -: 1669:{
        -: 1670:  ACE_UNUSED_ARG(strm);
        -: 1671:  ACE_UNUSED_ARG(stru);
    #####: 1672:  return (strm >> stru.alive_count)
    #####: 1673:    && (strm >> stru.not_alive_count)
    #####: 1674:    && (strm >> stru.alive_count_change)
    #####: 1675:    && (strm >> stru.not_alive_count_change)
    #####: 1676:    && (strm >> stru.last_publication_handle);
        -: 1677:}
        -: 1678:
        -: 1679:}  }
        -: 1680:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1681:
        -: 1682:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1683:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1684:namespace OpenDDS { namespace DCPS {
        -: 1685:
        -: 1686:template<>
    #####: 1687:struct MetaStructImpl<DDS::LivelinessChangedStatus> : MetaStruct {
        -: 1688:  typedef DDS::LivelinessChangedStatus T;
        -: 1689:
        -: 1690:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 1691:  void* allocate() const { return new T; }
        -: 1692:
    #####: 1693:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 1694:
    #####: 1695:  size_t numDcpsKeys() const { return 0; }
        -: 1696:
        -: 1697:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 1698:
    #####: 1699:  bool isDcpsKey(const char* field) const
        -: 1700:  {
        -: 1701:    ACE_UNUSED_ARG(field);
    #####: 1702:    return false;
        -: 1703:  }
        -: 1704:
    #####: 1705:  Value getValue(const void* stru, const char* field) const
        -: 1706:  {
    #####: 1707:    const DDS::LivelinessChangedStatus& typed = *static_cast<const DDS::LivelinessChangedStatus*>(stru);
    #####: 1708:    if (std::strcmp(field, "alive_count") == 0) {
    #####: 1709:      return typed.alive_count;
        -: 1710:    }
    #####: 1711:    if (std::strcmp(field, "not_alive_count") == 0) {
    #####: 1712:      return typed.not_alive_count;
        -: 1713:    }
    #####: 1714:    if (std::strcmp(field, "alive_count_change") == 0) {
    #####: 1715:      return typed.alive_count_change;
        -: 1716:    }
    #####: 1717:    if (std::strcmp(field, "not_alive_count_change") == 0) {
    #####: 1718:      return typed.not_alive_count_change;
        -: 1719:    }
    #####: 1720:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 1721:      return typed.last_publication_handle;
        -: 1722:    }
        -: 1723:    ACE_UNUSED_ARG(typed);
    #####: 1724:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessChangedStatus)");
        -: 1725:  }
        -: 1726:
    #####: 1727:  Value getValue(Serializer& ser, const char* field) const
        -: 1728:  {
    #####: 1729:    if (std::strcmp(field, "alive_count") == 0) {
        -: 1730:      ACE_CDR::Long val;
    #####: 1731:      if (!(ser >> val)) {
    #####: 1732:        throw std::runtime_error("Field 'alive_count' could not be deserialized");
        -: 1733:      }
    #####: 1734:      return val;
        -: 1735:    } else {
    #####: 1736:      if (!ser.skip(1, 4)) {
    #####: 1737:        throw std::runtime_error("Field 'alive_count' could not be skipped");
        -: 1738:      }
        -: 1739:    }
    #####: 1740:    if (std::strcmp(field, "not_alive_count") == 0) {
        -: 1741:      ACE_CDR::Long val;
    #####: 1742:      if (!(ser >> val)) {
    #####: 1743:        throw std::runtime_error("Field 'not_alive_count' could not be deserialized");
        -: 1744:      }
    #####: 1745:      return val;
        -: 1746:    } else {
    #####: 1747:      if (!ser.skip(1, 4)) {
    #####: 1748:        throw std::runtime_error("Field 'not_alive_count' could not be skipped");
        -: 1749:      }
        -: 1750:    }
    #####: 1751:    if (std::strcmp(field, "alive_count_change") == 0) {
        -: 1752:      ACE_CDR::Long val;
    #####: 1753:      if (!(ser >> val)) {
    #####: 1754:        throw std::runtime_error("Field 'alive_count_change' could not be deserialized");
        -: 1755:      }
    #####: 1756:      return val;
        -: 1757:    } else {
    #####: 1758:      if (!ser.skip(1, 4)) {
    #####: 1759:        throw std::runtime_error("Field 'alive_count_change' could not be skipped");
        -: 1760:      }
        -: 1761:    }
    #####: 1762:    if (std::strcmp(field, "not_alive_count_change") == 0) {
        -: 1763:      ACE_CDR::Long val;
    #####: 1764:      if (!(ser >> val)) {
    #####: 1765:        throw std::runtime_error("Field 'not_alive_count_change' could not be deserialized");
        -: 1766:      }
    #####: 1767:      return val;
        -: 1768:    } else {
    #####: 1769:      if (!ser.skip(1, 4)) {
    #####: 1770:        throw std::runtime_error("Field 'not_alive_count_change' could not be skipped");
        -: 1771:      }
        -: 1772:    }
    #####: 1773:    if (std::strcmp(field, "last_publication_handle") == 0) {
        -: 1774:      ACE_CDR::Long val;
    #####: 1775:      if (!(ser >> val)) {
    #####: 1776:        throw std::runtime_error("Field 'last_publication_handle' could not be deserialized");
        -: 1777:      }
    #####: 1778:      return val;
        -: 1779:    } else {
    #####: 1780:      if (!ser.skip(1, 4)) {
    #####: 1781:        throw std::runtime_error("Field 'last_publication_handle' could not be skipped");
        -: 1782:      }
        -: 1783:    }
    #####: 1784:    if (!field[0]) {
    #####: 1785:      return 0;
        -: 1786:    }
    #####: 1787:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::LivelinessChangedStatus");
        -: 1788:  }
        -: 1789:
    #####: 1790:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 1791:  {
        -: 1792:    ACE_UNUSED_ARG(next);
    #####: 1793:    if (std::strcmp(field, "alive_count") == 0) {
    #####: 1794:      return make_field_cmp(&T::alive_count, next);
        -: 1795:    }
    #####: 1796:    if (std::strcmp(field, "not_alive_count") == 0) {
    #####: 1797:      return make_field_cmp(&T::not_alive_count, next);
        -: 1798:    }
    #####: 1799:    if (std::strcmp(field, "alive_count_change") == 0) {
    #####: 1800:      return make_field_cmp(&T::alive_count_change, next);
        -: 1801:    }
    #####: 1802:    if (std::strcmp(field, "not_alive_count_change") == 0) {
    #####: 1803:      return make_field_cmp(&T::not_alive_count_change, next);
        -: 1804:    }
    #####: 1805:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 1806:      return make_field_cmp(&T::last_publication_handle, next);
        -: 1807:    }
    #####: 1808:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessChangedStatus)");
        -: 1809:  }
        -: 1810:
        -: 1811:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 1812:  const char** getFieldNames() const
        -: 1813:  {
        -: 1814:    static const char* names[] = {"alive_count", "not_alive_count", "alive_count_change", "not_alive_count_change", "last_publication_handle", 0};
    #####: 1815:    return names;
        -: 1816:  }
        -: 1817:
    #####: 1818:  const void* getRawField(const void* stru, const char* field) const
        -: 1819:  {
    #####: 1820:    if (std::strcmp(field, "alive_count") == 0) {
    #####: 1821:      return &static_cast<const T*>(stru)->alive_count;
        -: 1822:    }
    #####: 1823:    if (std::strcmp(field, "not_alive_count") == 0) {
    #####: 1824:      return &static_cast<const T*>(stru)->not_alive_count;
        -: 1825:    }
    #####: 1826:    if (std::strcmp(field, "alive_count_change") == 0) {
    #####: 1827:      return &static_cast<const T*>(stru)->alive_count_change;
        -: 1828:    }
    #####: 1829:    if (std::strcmp(field, "not_alive_count_change") == 0) {
    #####: 1830:      return &static_cast<const T*>(stru)->not_alive_count_change;
        -: 1831:    }
    #####: 1832:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 1833:      return &static_cast<const T*>(stru)->last_publication_handle;
        -: 1834:    }
    #####: 1835:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessChangedStatus)");
        -: 1836:  }
        -: 1837:
    #####: 1838:  void assign(void* lhs, const char* field, const void* rhs,
        -: 1839:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 1840:  {
        -: 1841:    ACE_UNUSED_ARG(lhs);
        -: 1842:    ACE_UNUSED_ARG(field);
        -: 1843:    ACE_UNUSED_ARG(rhs);
        -: 1844:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 1845:    ACE_UNUSED_ARG(rhsMeta);
    #####: 1846:    if (std::strcmp(field, "alive_count") == 0) {
    #####: 1847:      static_cast<T*>(lhs)->alive_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1848:      return;
        -: 1849:    }
    #####: 1850:    if (std::strcmp(field, "not_alive_count") == 0) {
    #####: 1851:      static_cast<T*>(lhs)->not_alive_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1852:      return;
        -: 1853:    }
    #####: 1854:    if (std::strcmp(field, "alive_count_change") == 0) {
    #####: 1855:      static_cast<T*>(lhs)->alive_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1856:      return;
        -: 1857:    }
    #####: 1858:    if (std::strcmp(field, "not_alive_count_change") == 0) {
    #####: 1859:      static_cast<T*>(lhs)->not_alive_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1860:      return;
        -: 1861:    }
    #####: 1862:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 1863:      static_cast<T*>(lhs)->last_publication_handle = *static_cast<const DDS::InstanceHandle_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 1864:      return;
        -: 1865:    }
    #####: 1866:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessChangedStatus)");
        -: 1867:  }
        -: 1868:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 1869:
    #####: 1870:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 1871:  {
        -: 1872:    ACE_UNUSED_ARG(lhs);
        -: 1873:    ACE_UNUSED_ARG(field);
        -: 1874:    ACE_UNUSED_ARG(rhs);
    #####: 1875:    if (std::strcmp(field, "alive_count") == 0) {
    #####: 1876:      return static_cast<const T*>(lhs)->alive_count == static_cast<const T*>(rhs)->alive_count;
        -: 1877:    }
    #####: 1878:    if (std::strcmp(field, "not_alive_count") == 0) {
    #####: 1879:      return static_cast<const T*>(lhs)->not_alive_count == static_cast<const T*>(rhs)->not_alive_count;
        -: 1880:    }
    #####: 1881:    if (std::strcmp(field, "alive_count_change") == 0) {
    #####: 1882:      return static_cast<const T*>(lhs)->alive_count_change == static_cast<const T*>(rhs)->alive_count_change;
        -: 1883:    }
    #####: 1884:    if (std::strcmp(field, "not_alive_count_change") == 0) {
    #####: 1885:      return static_cast<const T*>(lhs)->not_alive_count_change == static_cast<const T*>(rhs)->not_alive_count_change;
        -: 1886:    }
    #####: 1887:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 1888:      return static_cast<const T*>(lhs)->last_publication_handle == static_cast<const T*>(rhs)->last_publication_handle;
        -: 1889:    }
    #####: 1890:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::LivelinessChangedStatus)");
        -: 1891:  }
        -: 1892:};
        -: 1893:
        -: 1894:template<>
    #####: 1895:const MetaStruct& getMetaStruct<DDS::LivelinessChangedStatus>()
        -: 1896:{
    #####: 1897:  static MetaStructImpl<DDS::LivelinessChangedStatus> msi;
    #####: 1898:  return msi;
        -: 1899:}
        -: 1900:
    #####: 1901:bool gen_skip_over(Serializer& ser, DDS::LivelinessChangedStatus*)
        -: 1902:{
        -: 1903:  ACE_UNUSED_ARG(ser);
    #####: 1904:  MetaStructImpl<DDS::LivelinessChangedStatus>().getValue(ser, "");
    #####: 1905:  return true;
        -: 1906:}
        -: 1907:
        -: 1908:}  }
        -: 1909:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1910:
        -: 1911:#endif
        -: 1912:
        -: 1913:/* End STRUCT: LivelinessChangedStatus */
        -: 1914:
        -: 1915:
        -: 1916:/* Begin STRUCT: OfferedDeadlineMissedStatus */
        -: 1917:
        -: 1918:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1919:namespace OpenDDS { namespace DCPS {
        -: 1920:
    #####: 1921:void gen_find_size(const DDS::OfferedDeadlineMissedStatus& stru, size_t& size, size_t& padding)
        -: 1922:{
        -: 1923:  ACE_UNUSED_ARG(stru);
        -: 1924:  ACE_UNUSED_ARG(size);
        -: 1925:  ACE_UNUSED_ARG(padding);
    #####: 1926:  if ((size + padding) % 4) {
    #####: 1927:    padding += 4 - ((size + padding) % 4);
        -: 1928:  }
    #####: 1929:  size += gen_max_marshaled_size(stru.total_count);
    #####: 1930:  if ((size + padding) % 4) {
    #####: 1931:    padding += 4 - ((size + padding) % 4);
        -: 1932:  }
    #####: 1933:  size += gen_max_marshaled_size(stru.total_count_change);
    #####: 1934:  if ((size + padding) % 4) {
    #####: 1935:    padding += 4 - ((size + padding) % 4);
        -: 1936:  }
    #####: 1937:  size += gen_max_marshaled_size(stru.last_instance_handle);
    #####: 1938:}
        -: 1939:
    #####: 1940:bool operator<<(Serializer& strm, const DDS::OfferedDeadlineMissedStatus& stru)
        -: 1941:{
        -: 1942:  ACE_UNUSED_ARG(strm);
        -: 1943:  ACE_UNUSED_ARG(stru);
    #####: 1944:  return (strm << stru.total_count)
    #####: 1945:    && (strm << stru.total_count_change)
    #####: 1946:    && (strm << stru.last_instance_handle);
        -: 1947:}
        -: 1948:
    #####: 1949:bool operator>>(Serializer& strm, DDS::OfferedDeadlineMissedStatus& stru)
        -: 1950:{
        -: 1951:  ACE_UNUSED_ARG(strm);
        -: 1952:  ACE_UNUSED_ARG(stru);
    #####: 1953:  return (strm >> stru.total_count)
    #####: 1954:    && (strm >> stru.total_count_change)
    #####: 1955:    && (strm >> stru.last_instance_handle);
        -: 1956:}
        -: 1957:
        -: 1958:}  }
        -: 1959:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1960:
        -: 1961:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1962:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1963:namespace OpenDDS { namespace DCPS {
        -: 1964:
        -: 1965:template<>
    #####: 1966:struct MetaStructImpl<DDS::OfferedDeadlineMissedStatus> : MetaStruct {
        -: 1967:  typedef DDS::OfferedDeadlineMissedStatus T;
        -: 1968:
        -: 1969:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 1970:  void* allocate() const { return new T; }
        -: 1971:
    #####: 1972:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 1973:
    #####: 1974:  size_t numDcpsKeys() const { return 0; }
        -: 1975:
        -: 1976:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 1977:
    #####: 1978:  bool isDcpsKey(const char* field) const
        -: 1979:  {
        -: 1980:    ACE_UNUSED_ARG(field);
    #####: 1981:    return false;
        -: 1982:  }
        -: 1983:
    #####: 1984:  Value getValue(const void* stru, const char* field) const
        -: 1985:  {
    #####: 1986:    const DDS::OfferedDeadlineMissedStatus& typed = *static_cast<const DDS::OfferedDeadlineMissedStatus*>(stru);
    #####: 1987:    if (std::strcmp(field, "total_count") == 0) {
    #####: 1988:      return typed.total_count;
        -: 1989:    }
    #####: 1990:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 1991:      return typed.total_count_change;
        -: 1992:    }
    #####: 1993:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 1994:      return typed.last_instance_handle;
        -: 1995:    }
        -: 1996:    ACE_UNUSED_ARG(typed);
    #####: 1997:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedDeadlineMissedStatus)");
        -: 1998:  }
        -: 1999:
    #####: 2000:  Value getValue(Serializer& ser, const char* field) const
        -: 2001:  {
    #####: 2002:    if (std::strcmp(field, "total_count") == 0) {
        -: 2003:      ACE_CDR::Long val;
    #####: 2004:      if (!(ser >> val)) {
    #####: 2005:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 2006:      }
    #####: 2007:      return val;
        -: 2008:    } else {
    #####: 2009:      if (!ser.skip(1, 4)) {
    #####: 2010:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 2011:      }
        -: 2012:    }
    #####: 2013:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 2014:      ACE_CDR::Long val;
    #####: 2015:      if (!(ser >> val)) {
    #####: 2016:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 2017:      }
    #####: 2018:      return val;
        -: 2019:    } else {
    #####: 2020:      if (!ser.skip(1, 4)) {
    #####: 2021:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 2022:      }
        -: 2023:    }
    #####: 2024:    if (std::strcmp(field, "last_instance_handle") == 0) {
        -: 2025:      ACE_CDR::Long val;
    #####: 2026:      if (!(ser >> val)) {
    #####: 2027:        throw std::runtime_error("Field 'last_instance_handle' could not be deserialized");
        -: 2028:      }
    #####: 2029:      return val;
        -: 2030:    } else {
    #####: 2031:      if (!ser.skip(1, 4)) {
    #####: 2032:        throw std::runtime_error("Field 'last_instance_handle' could not be skipped");
        -: 2033:      }
        -: 2034:    }
    #####: 2035:    if (!field[0]) {
    #####: 2036:      return 0;
        -: 2037:    }
    #####: 2038:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::OfferedDeadlineMissedStatus");
        -: 2039:  }
        -: 2040:
    #####: 2041:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 2042:  {
        -: 2043:    ACE_UNUSED_ARG(next);
    #####: 2044:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2045:      return make_field_cmp(&T::total_count, next);
        -: 2046:    }
    #####: 2047:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2048:      return make_field_cmp(&T::total_count_change, next);
        -: 2049:    }
    #####: 2050:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2051:      return make_field_cmp(&T::last_instance_handle, next);
        -: 2052:    }
    #####: 2053:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedDeadlineMissedStatus)");
        -: 2054:  }
        -: 2055:
        -: 2056:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 2057:  const char** getFieldNames() const
        -: 2058:  {
        -: 2059:    static const char* names[] = {"total_count", "total_count_change", "last_instance_handle", 0};
    #####: 2060:    return names;
        -: 2061:  }
        -: 2062:
    #####: 2063:  const void* getRawField(const void* stru, const char* field) const
        -: 2064:  {
    #####: 2065:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2066:      return &static_cast<const T*>(stru)->total_count;
        -: 2067:    }
    #####: 2068:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2069:      return &static_cast<const T*>(stru)->total_count_change;
        -: 2070:    }
    #####: 2071:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2072:      return &static_cast<const T*>(stru)->last_instance_handle;
        -: 2073:    }
    #####: 2074:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedDeadlineMissedStatus)");
        -: 2075:  }
        -: 2076:
    #####: 2077:  void assign(void* lhs, const char* field, const void* rhs,
        -: 2078:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 2079:  {
        -: 2080:    ACE_UNUSED_ARG(lhs);
        -: 2081:    ACE_UNUSED_ARG(field);
        -: 2082:    ACE_UNUSED_ARG(rhs);
        -: 2083:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 2084:    ACE_UNUSED_ARG(rhsMeta);
    #####: 2085:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2086:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2087:      return;
        -: 2088:    }
    #####: 2089:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2090:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2091:      return;
        -: 2092:    }
    #####: 2093:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2094:      static_cast<T*>(lhs)->last_instance_handle = *static_cast<const DDS::InstanceHandle_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2095:      return;
        -: 2096:    }
    #####: 2097:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedDeadlineMissedStatus)");
        -: 2098:  }
        -: 2099:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 2100:
    #####: 2101:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 2102:  {
        -: 2103:    ACE_UNUSED_ARG(lhs);
        -: 2104:    ACE_UNUSED_ARG(field);
        -: 2105:    ACE_UNUSED_ARG(rhs);
    #####: 2106:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2107:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 2108:    }
    #####: 2109:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2110:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 2111:    }
    #####: 2112:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2113:      return static_cast<const T*>(lhs)->last_instance_handle == static_cast<const T*>(rhs)->last_instance_handle;
        -: 2114:    }
    #####: 2115:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedDeadlineMissedStatus)");
        -: 2116:  }
        -: 2117:};
        -: 2118:
        -: 2119:template<>
    #####: 2120:const MetaStruct& getMetaStruct<DDS::OfferedDeadlineMissedStatus>()
        -: 2121:{
    #####: 2122:  static MetaStructImpl<DDS::OfferedDeadlineMissedStatus> msi;
    #####: 2123:  return msi;
        -: 2124:}
        -: 2125:
    #####: 2126:bool gen_skip_over(Serializer& ser, DDS::OfferedDeadlineMissedStatus*)
        -: 2127:{
        -: 2128:  ACE_UNUSED_ARG(ser);
    #####: 2129:  MetaStructImpl<DDS::OfferedDeadlineMissedStatus>().getValue(ser, "");
    #####: 2130:  return true;
        -: 2131:}
        -: 2132:
        -: 2133:}  }
        -: 2134:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2135:
        -: 2136:#endif
        -: 2137:
        -: 2138:/* End STRUCT: OfferedDeadlineMissedStatus */
        -: 2139:
        -: 2140:
        -: 2141:/* Begin STRUCT: RequestedDeadlineMissedStatus */
        -: 2142:
        -: 2143:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2144:namespace OpenDDS { namespace DCPS {
        -: 2145:
    #####: 2146:void gen_find_size(const DDS::RequestedDeadlineMissedStatus& stru, size_t& size, size_t& padding)
        -: 2147:{
        -: 2148:  ACE_UNUSED_ARG(stru);
        -: 2149:  ACE_UNUSED_ARG(size);
        -: 2150:  ACE_UNUSED_ARG(padding);
    #####: 2151:  if ((size + padding) % 4) {
    #####: 2152:    padding += 4 - ((size + padding) % 4);
        -: 2153:  }
    #####: 2154:  size += gen_max_marshaled_size(stru.total_count);
    #####: 2155:  if ((size + padding) % 4) {
    #####: 2156:    padding += 4 - ((size + padding) % 4);
        -: 2157:  }
    #####: 2158:  size += gen_max_marshaled_size(stru.total_count_change);
    #####: 2159:  if ((size + padding) % 4) {
    #####: 2160:    padding += 4 - ((size + padding) % 4);
        -: 2161:  }
    #####: 2162:  size += gen_max_marshaled_size(stru.last_instance_handle);
    #####: 2163:}
        -: 2164:
    #####: 2165:bool operator<<(Serializer& strm, const DDS::RequestedDeadlineMissedStatus& stru)
        -: 2166:{
        -: 2167:  ACE_UNUSED_ARG(strm);
        -: 2168:  ACE_UNUSED_ARG(stru);
    #####: 2169:  return (strm << stru.total_count)
    #####: 2170:    && (strm << stru.total_count_change)
    #####: 2171:    && (strm << stru.last_instance_handle);
        -: 2172:}
        -: 2173:
    #####: 2174:bool operator>>(Serializer& strm, DDS::RequestedDeadlineMissedStatus& stru)
        -: 2175:{
        -: 2176:  ACE_UNUSED_ARG(strm);
        -: 2177:  ACE_UNUSED_ARG(stru);
    #####: 2178:  return (strm >> stru.total_count)
    #####: 2179:    && (strm >> stru.total_count_change)
    #####: 2180:    && (strm >> stru.last_instance_handle);
        -: 2181:}
        -: 2182:
        -: 2183:}  }
        -: 2184:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2185:
        -: 2186:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2187:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2188:namespace OpenDDS { namespace DCPS {
        -: 2189:
        -: 2190:template<>
    #####: 2191:struct MetaStructImpl<DDS::RequestedDeadlineMissedStatus> : MetaStruct {
        -: 2192:  typedef DDS::RequestedDeadlineMissedStatus T;
        -: 2193:
        -: 2194:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 2195:  void* allocate() const { return new T; }
        -: 2196:
    #####: 2197:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 2198:
    #####: 2199:  size_t numDcpsKeys() const { return 0; }
        -: 2200:
        -: 2201:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 2202:
    #####: 2203:  bool isDcpsKey(const char* field) const
        -: 2204:  {
        -: 2205:    ACE_UNUSED_ARG(field);
    #####: 2206:    return false;
        -: 2207:  }
        -: 2208:
    #####: 2209:  Value getValue(const void* stru, const char* field) const
        -: 2210:  {
    #####: 2211:    const DDS::RequestedDeadlineMissedStatus& typed = *static_cast<const DDS::RequestedDeadlineMissedStatus*>(stru);
    #####: 2212:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2213:      return typed.total_count;
        -: 2214:    }
    #####: 2215:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2216:      return typed.total_count_change;
        -: 2217:    }
    #####: 2218:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2219:      return typed.last_instance_handle;
        -: 2220:    }
        -: 2221:    ACE_UNUSED_ARG(typed);
    #####: 2222:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedDeadlineMissedStatus)");
        -: 2223:  }
        -: 2224:
    #####: 2225:  Value getValue(Serializer& ser, const char* field) const
        -: 2226:  {
    #####: 2227:    if (std::strcmp(field, "total_count") == 0) {
        -: 2228:      ACE_CDR::Long val;
    #####: 2229:      if (!(ser >> val)) {
    #####: 2230:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 2231:      }
    #####: 2232:      return val;
        -: 2233:    } else {
    #####: 2234:      if (!ser.skip(1, 4)) {
    #####: 2235:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 2236:      }
        -: 2237:    }
    #####: 2238:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 2239:      ACE_CDR::Long val;
    #####: 2240:      if (!(ser >> val)) {
    #####: 2241:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 2242:      }
    #####: 2243:      return val;
        -: 2244:    } else {
    #####: 2245:      if (!ser.skip(1, 4)) {
    #####: 2246:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 2247:      }
        -: 2248:    }
    #####: 2249:    if (std::strcmp(field, "last_instance_handle") == 0) {
        -: 2250:      ACE_CDR::Long val;
    #####: 2251:      if (!(ser >> val)) {
    #####: 2252:        throw std::runtime_error("Field 'last_instance_handle' could not be deserialized");
        -: 2253:      }
    #####: 2254:      return val;
        -: 2255:    } else {
    #####: 2256:      if (!ser.skip(1, 4)) {
    #####: 2257:        throw std::runtime_error("Field 'last_instance_handle' could not be skipped");
        -: 2258:      }
        -: 2259:    }
    #####: 2260:    if (!field[0]) {
    #####: 2261:      return 0;
        -: 2262:    }
    #####: 2263:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::RequestedDeadlineMissedStatus");
        -: 2264:  }
        -: 2265:
    #####: 2266:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 2267:  {
        -: 2268:    ACE_UNUSED_ARG(next);
    #####: 2269:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2270:      return make_field_cmp(&T::total_count, next);
        -: 2271:    }
    #####: 2272:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2273:      return make_field_cmp(&T::total_count_change, next);
        -: 2274:    }
    #####: 2275:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2276:      return make_field_cmp(&T::last_instance_handle, next);
        -: 2277:    }
    #####: 2278:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedDeadlineMissedStatus)");
        -: 2279:  }
        -: 2280:
        -: 2281:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 2282:  const char** getFieldNames() const
        -: 2283:  {
        -: 2284:    static const char* names[] = {"total_count", "total_count_change", "last_instance_handle", 0};
    #####: 2285:    return names;
        -: 2286:  }
        -: 2287:
    #####: 2288:  const void* getRawField(const void* stru, const char* field) const
        -: 2289:  {
    #####: 2290:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2291:      return &static_cast<const T*>(stru)->total_count;
        -: 2292:    }
    #####: 2293:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2294:      return &static_cast<const T*>(stru)->total_count_change;
        -: 2295:    }
    #####: 2296:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2297:      return &static_cast<const T*>(stru)->last_instance_handle;
        -: 2298:    }
    #####: 2299:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedDeadlineMissedStatus)");
        -: 2300:  }
        -: 2301:
    #####: 2302:  void assign(void* lhs, const char* field, const void* rhs,
        -: 2303:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 2304:  {
        -: 2305:    ACE_UNUSED_ARG(lhs);
        -: 2306:    ACE_UNUSED_ARG(field);
        -: 2307:    ACE_UNUSED_ARG(rhs);
        -: 2308:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 2309:    ACE_UNUSED_ARG(rhsMeta);
    #####: 2310:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2311:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2312:      return;
        -: 2313:    }
    #####: 2314:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2315:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2316:      return;
        -: 2317:    }
    #####: 2318:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2319:      static_cast<T*>(lhs)->last_instance_handle = *static_cast<const DDS::InstanceHandle_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2320:      return;
        -: 2321:    }
    #####: 2322:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedDeadlineMissedStatus)");
        -: 2323:  }
        -: 2324:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 2325:
    #####: 2326:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 2327:  {
        -: 2328:    ACE_UNUSED_ARG(lhs);
        -: 2329:    ACE_UNUSED_ARG(field);
        -: 2330:    ACE_UNUSED_ARG(rhs);
    #####: 2331:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2332:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 2333:    }
    #####: 2334:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2335:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 2336:    }
    #####: 2337:    if (std::strcmp(field, "last_instance_handle") == 0) {
    #####: 2338:      return static_cast<const T*>(lhs)->last_instance_handle == static_cast<const T*>(rhs)->last_instance_handle;
        -: 2339:    }
    #####: 2340:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedDeadlineMissedStatus)");
        -: 2341:  }
        -: 2342:};
        -: 2343:
        -: 2344:template<>
    #####: 2345:const MetaStruct& getMetaStruct<DDS::RequestedDeadlineMissedStatus>()
        -: 2346:{
    #####: 2347:  static MetaStructImpl<DDS::RequestedDeadlineMissedStatus> msi;
    #####: 2348:  return msi;
        -: 2349:}
        -: 2350:
    #####: 2351:bool gen_skip_over(Serializer& ser, DDS::RequestedDeadlineMissedStatus*)
        -: 2352:{
        -: 2353:  ACE_UNUSED_ARG(ser);
    #####: 2354:  MetaStructImpl<DDS::RequestedDeadlineMissedStatus>().getValue(ser, "");
    #####: 2355:  return true;
        -: 2356:}
        -: 2357:
        -: 2358:}  }
        -: 2359:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2360:
        -: 2361:#endif
        -: 2362:
        -: 2363:/* End STRUCT: RequestedDeadlineMissedStatus */
        -: 2364:
        -: 2365:
        -: 2366:/* Begin STRUCT: OfferedIncompatibleQosStatus */
        -: 2367:
        -: 2368:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2369:namespace OpenDDS { namespace DCPS {
        -: 2370:
    #####: 2371:void gen_find_size(const DDS::OfferedIncompatibleQosStatus& stru, size_t& size, size_t& padding)
        -: 2372:{
        -: 2373:  ACE_UNUSED_ARG(stru);
        -: 2374:  ACE_UNUSED_ARG(size);
        -: 2375:  ACE_UNUSED_ARG(padding);
    #####: 2376:  if ((size + padding) % 4) {
    #####: 2377:    padding += 4 - ((size + padding) % 4);
        -: 2378:  }
    #####: 2379:  size += gen_max_marshaled_size(stru.total_count);
    #####: 2380:  if ((size + padding) % 4) {
    #####: 2381:    padding += 4 - ((size + padding) % 4);
        -: 2382:  }
    #####: 2383:  size += gen_max_marshaled_size(stru.total_count_change);
    #####: 2384:  if ((size + padding) % 4) {
    #####: 2385:    padding += 4 - ((size + padding) % 4);
        -: 2386:  }
    #####: 2387:  size += gen_max_marshaled_size(stru.last_policy_id);
    #####: 2388:  gen_find_size(stru.policies, size, padding);
    #####: 2389:}
        -: 2390:
    #####: 2391:bool operator<<(Serializer& strm, const DDS::OfferedIncompatibleQosStatus& stru)
        -: 2392:{
        -: 2393:  ACE_UNUSED_ARG(strm);
        -: 2394:  ACE_UNUSED_ARG(stru);
    #####: 2395:  return (strm << stru.total_count)
    #####: 2396:    && (strm << stru.total_count_change)
    #####: 2397:    && (strm << stru.last_policy_id)
    #####: 2398:    && (strm << stru.policies);
        -: 2399:}
        -: 2400:
    #####: 2401:bool operator>>(Serializer& strm, DDS::OfferedIncompatibleQosStatus& stru)
        -: 2402:{
        -: 2403:  ACE_UNUSED_ARG(strm);
        -: 2404:  ACE_UNUSED_ARG(stru);
    #####: 2405:  return (strm >> stru.total_count)
    #####: 2406:    && (strm >> stru.total_count_change)
    #####: 2407:    && (strm >> stru.last_policy_id)
    #####: 2408:    && (strm >> stru.policies);
        -: 2409:}
        -: 2410:
        -: 2411:}  }
        -: 2412:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2413:
        -: 2414:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2415:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2416:namespace OpenDDS { namespace DCPS {
        -: 2417:
        -: 2418:template<>
    #####: 2419:struct MetaStructImpl<DDS::OfferedIncompatibleQosStatus> : MetaStruct {
        -: 2420:  typedef DDS::OfferedIncompatibleQosStatus T;
        -: 2421:
        -: 2422:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 2423:  void* allocate() const { return new T; }
        -: 2424:
    #####: 2425:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 2426:
    #####: 2427:  size_t numDcpsKeys() const { return 0; }
        -: 2428:
        -: 2429:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 2430:
    #####: 2431:  bool isDcpsKey(const char* field) const
        -: 2432:  {
        -: 2433:    ACE_UNUSED_ARG(field);
    #####: 2434:    return false;
        -: 2435:  }
        -: 2436:
    #####: 2437:  Value getValue(const void* stru, const char* field) const
        -: 2438:  {
    #####: 2439:    const DDS::OfferedIncompatibleQosStatus& typed = *static_cast<const DDS::OfferedIncompatibleQosStatus*>(stru);
    #####: 2440:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2441:      return typed.total_count;
        -: 2442:    }
    #####: 2443:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2444:      return typed.total_count_change;
        -: 2445:    }
    #####: 2446:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2447:      return typed.last_policy_id;
        -: 2448:    }
        -: 2449:    ACE_UNUSED_ARG(typed);
    #####: 2450:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedIncompatibleQosStatus)");
        -: 2451:  }
        -: 2452:
    #####: 2453:  Value getValue(Serializer& ser, const char* field) const
        -: 2454:  {
    #####: 2455:    if (std::strcmp(field, "total_count") == 0) {
        -: 2456:      ACE_CDR::Long val;
    #####: 2457:      if (!(ser >> val)) {
    #####: 2458:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 2459:      }
    #####: 2460:      return val;
        -: 2461:    } else {
    #####: 2462:      if (!ser.skip(1, 4)) {
    #####: 2463:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 2464:      }
        -: 2465:    }
    #####: 2466:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 2467:      ACE_CDR::Long val;
    #####: 2468:      if (!(ser >> val)) {
    #####: 2469:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 2470:      }
    #####: 2471:      return val;
        -: 2472:    } else {
    #####: 2473:      if (!ser.skip(1, 4)) {
    #####: 2474:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 2475:      }
        -: 2476:    }
    #####: 2477:    if (std::strcmp(field, "last_policy_id") == 0) {
        -: 2478:      ACE_CDR::Long val;
    #####: 2479:      if (!(ser >> val)) {
    #####: 2480:        throw std::runtime_error("Field 'last_policy_id' could not be deserialized");
        -: 2481:      }
    #####: 2482:      return val;
        -: 2483:    } else {
    #####: 2484:      if (!ser.skip(1, 4)) {
    #####: 2485:        throw std::runtime_error("Field 'last_policy_id' could not be skipped");
        -: 2486:      }
        -: 2487:    }
    #####: 2488:    if (!gen_skip_over(ser, static_cast<DDS::QosPolicyCountSeq*>(0))) {
    #####: 2489:      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
        -: 2490:    }
    #####: 2491:    if (!field[0]) {
    #####: 2492:      return 0;
        -: 2493:    }
    #####: 2494:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::OfferedIncompatibleQosStatus");
        -: 2495:  }
        -: 2496:
    #####: 2497:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 2498:  {
        -: 2499:    ACE_UNUSED_ARG(next);
    #####: 2500:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2501:      return make_field_cmp(&T::total_count, next);
        -: 2502:    }
    #####: 2503:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2504:      return make_field_cmp(&T::total_count_change, next);
        -: 2505:    }
    #####: 2506:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2507:      return make_field_cmp(&T::last_policy_id, next);
        -: 2508:    }
    #####: 2509:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedIncompatibleQosStatus)");
        -: 2510:  }
        -: 2511:
        -: 2512:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 2513:  const char** getFieldNames() const
        -: 2514:  {
        -: 2515:    static const char* names[] = {"total_count", "total_count_change", "last_policy_id", "policies", 0};
    #####: 2516:    return names;
        -: 2517:  }
        -: 2518:
    #####: 2519:  const void* getRawField(const void* stru, const char* field) const
        -: 2520:  {
    #####: 2521:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2522:      return &static_cast<const T*>(stru)->total_count;
        -: 2523:    }
    #####: 2524:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2525:      return &static_cast<const T*>(stru)->total_count_change;
        -: 2526:    }
    #####: 2527:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2528:      return &static_cast<const T*>(stru)->last_policy_id;
        -: 2529:    }
    #####: 2530:    if (std::strcmp(field, "policies") == 0) {
    #####: 2531:      return &static_cast<const T*>(stru)->policies;
        -: 2532:    }
    #####: 2533:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedIncompatibleQosStatus)");
        -: 2534:  }
        -: 2535:
    #####: 2536:  void assign(void* lhs, const char* field, const void* rhs,
        -: 2537:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 2538:  {
        -: 2539:    ACE_UNUSED_ARG(lhs);
        -: 2540:    ACE_UNUSED_ARG(field);
        -: 2541:    ACE_UNUSED_ARG(rhs);
        -: 2542:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 2543:    ACE_UNUSED_ARG(rhsMeta);
    #####: 2544:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2545:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2546:      return;
        -: 2547:    }
    #####: 2548:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2549:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2550:      return;
        -: 2551:    }
    #####: 2552:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2553:      static_cast<T*>(lhs)->last_policy_id = *static_cast<const DDS::QosPolicyId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2554:      return;
        -: 2555:    }
    #####: 2556:    if (std::strcmp(field, "policies") == 0) {
    #####: 2557:      static_cast<T*>(lhs)->policies = *static_cast<const DDS::QosPolicyCountSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2558:      return;
        -: 2559:    }
    #####: 2560:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedIncompatibleQosStatus)");
        -: 2561:  }
        -: 2562:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 2563:
    #####: 2564:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 2565:  {
        -: 2566:    ACE_UNUSED_ARG(lhs);
        -: 2567:    ACE_UNUSED_ARG(field);
        -: 2568:    ACE_UNUSED_ARG(rhs);
    #####: 2569:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2570:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 2571:    }
    #####: 2572:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2573:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 2574:    }
    #####: 2575:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2576:      return static_cast<const T*>(lhs)->last_policy_id == static_cast<const T*>(rhs)->last_policy_id;
        -: 2577:    }
    #####: 2578:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::OfferedIncompatibleQosStatus)");
        -: 2579:  }
        -: 2580:};
        -: 2581:
        -: 2582:template<>
    #####: 2583:const MetaStruct& getMetaStruct<DDS::OfferedIncompatibleQosStatus>()
        -: 2584:{
    #####: 2585:  static MetaStructImpl<DDS::OfferedIncompatibleQosStatus> msi;
    #####: 2586:  return msi;
        -: 2587:}
        -: 2588:
    #####: 2589:bool gen_skip_over(Serializer& ser, DDS::OfferedIncompatibleQosStatus*)
        -: 2590:{
        -: 2591:  ACE_UNUSED_ARG(ser);
    #####: 2592:  MetaStructImpl<DDS::OfferedIncompatibleQosStatus>().getValue(ser, "");
    #####: 2593:  return true;
        -: 2594:}
        -: 2595:
        -: 2596:}  }
        -: 2597:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2598:
        -: 2599:#endif
        -: 2600:
        -: 2601:/* End STRUCT: OfferedIncompatibleQosStatus */
        -: 2602:
        -: 2603:
        -: 2604:/* Begin STRUCT: RequestedIncompatibleQosStatus */
        -: 2605:
        -: 2606:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2607:namespace OpenDDS { namespace DCPS {
        -: 2608:
    #####: 2609:void gen_find_size(const DDS::RequestedIncompatibleQosStatus& stru, size_t& size, size_t& padding)
        -: 2610:{
        -: 2611:  ACE_UNUSED_ARG(stru);
        -: 2612:  ACE_UNUSED_ARG(size);
        -: 2613:  ACE_UNUSED_ARG(padding);
    #####: 2614:  if ((size + padding) % 4) {
    #####: 2615:    padding += 4 - ((size + padding) % 4);
        -: 2616:  }
    #####: 2617:  size += gen_max_marshaled_size(stru.total_count);
    #####: 2618:  if ((size + padding) % 4) {
    #####: 2619:    padding += 4 - ((size + padding) % 4);
        -: 2620:  }
    #####: 2621:  size += gen_max_marshaled_size(stru.total_count_change);
    #####: 2622:  if ((size + padding) % 4) {
    #####: 2623:    padding += 4 - ((size + padding) % 4);
        -: 2624:  }
    #####: 2625:  size += gen_max_marshaled_size(stru.last_policy_id);
    #####: 2626:  gen_find_size(stru.policies, size, padding);
    #####: 2627:}
        -: 2628:
    #####: 2629:bool operator<<(Serializer& strm, const DDS::RequestedIncompatibleQosStatus& stru)
        -: 2630:{
        -: 2631:  ACE_UNUSED_ARG(strm);
        -: 2632:  ACE_UNUSED_ARG(stru);
    #####: 2633:  return (strm << stru.total_count)
    #####: 2634:    && (strm << stru.total_count_change)
    #####: 2635:    && (strm << stru.last_policy_id)
    #####: 2636:    && (strm << stru.policies);
        -: 2637:}
        -: 2638:
    #####: 2639:bool operator>>(Serializer& strm, DDS::RequestedIncompatibleQosStatus& stru)
        -: 2640:{
        -: 2641:  ACE_UNUSED_ARG(strm);
        -: 2642:  ACE_UNUSED_ARG(stru);
    #####: 2643:  return (strm >> stru.total_count)
    #####: 2644:    && (strm >> stru.total_count_change)
    #####: 2645:    && (strm >> stru.last_policy_id)
    #####: 2646:    && (strm >> stru.policies);
        -: 2647:}
        -: 2648:
        -: 2649:}  }
        -: 2650:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2651:
        -: 2652:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2653:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2654:namespace OpenDDS { namespace DCPS {
        -: 2655:
        -: 2656:template<>
    #####: 2657:struct MetaStructImpl<DDS::RequestedIncompatibleQosStatus> : MetaStruct {
        -: 2658:  typedef DDS::RequestedIncompatibleQosStatus T;
        -: 2659:
        -: 2660:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 2661:  void* allocate() const { return new T; }
        -: 2662:
    #####: 2663:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 2664:
    #####: 2665:  size_t numDcpsKeys() const { return 0; }
        -: 2666:
        -: 2667:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 2668:
    #####: 2669:  bool isDcpsKey(const char* field) const
        -: 2670:  {
        -: 2671:    ACE_UNUSED_ARG(field);
    #####: 2672:    return false;
        -: 2673:  }
        -: 2674:
    #####: 2675:  Value getValue(const void* stru, const char* field) const
        -: 2676:  {
    #####: 2677:    const DDS::RequestedIncompatibleQosStatus& typed = *static_cast<const DDS::RequestedIncompatibleQosStatus*>(stru);
    #####: 2678:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2679:      return typed.total_count;
        -: 2680:    }
    #####: 2681:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2682:      return typed.total_count_change;
        -: 2683:    }
    #####: 2684:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2685:      return typed.last_policy_id;
        -: 2686:    }
        -: 2687:    ACE_UNUSED_ARG(typed);
    #####: 2688:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedIncompatibleQosStatus)");
        -: 2689:  }
        -: 2690:
    #####: 2691:  Value getValue(Serializer& ser, const char* field) const
        -: 2692:  {
    #####: 2693:    if (std::strcmp(field, "total_count") == 0) {
        -: 2694:      ACE_CDR::Long val;
    #####: 2695:      if (!(ser >> val)) {
    #####: 2696:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 2697:      }
    #####: 2698:      return val;
        -: 2699:    } else {
    #####: 2700:      if (!ser.skip(1, 4)) {
    #####: 2701:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 2702:      }
        -: 2703:    }
    #####: 2704:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 2705:      ACE_CDR::Long val;
    #####: 2706:      if (!(ser >> val)) {
    #####: 2707:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 2708:      }
    #####: 2709:      return val;
        -: 2710:    } else {
    #####: 2711:      if (!ser.skip(1, 4)) {
    #####: 2712:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 2713:      }
        -: 2714:    }
    #####: 2715:    if (std::strcmp(field, "last_policy_id") == 0) {
        -: 2716:      ACE_CDR::Long val;
    #####: 2717:      if (!(ser >> val)) {
    #####: 2718:        throw std::runtime_error("Field 'last_policy_id' could not be deserialized");
        -: 2719:      }
    #####: 2720:      return val;
        -: 2721:    } else {
    #####: 2722:      if (!ser.skip(1, 4)) {
    #####: 2723:        throw std::runtime_error("Field 'last_policy_id' could not be skipped");
        -: 2724:      }
        -: 2725:    }
    #####: 2726:    if (!gen_skip_over(ser, static_cast<DDS::QosPolicyCountSeq*>(0))) {
    #####: 2727:      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
        -: 2728:    }
    #####: 2729:    if (!field[0]) {
    #####: 2730:      return 0;
        -: 2731:    }
    #####: 2732:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::RequestedIncompatibleQosStatus");
        -: 2733:  }
        -: 2734:
    #####: 2735:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 2736:  {
        -: 2737:    ACE_UNUSED_ARG(next);
    #####: 2738:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2739:      return make_field_cmp(&T::total_count, next);
        -: 2740:    }
    #####: 2741:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2742:      return make_field_cmp(&T::total_count_change, next);
        -: 2743:    }
    #####: 2744:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2745:      return make_field_cmp(&T::last_policy_id, next);
        -: 2746:    }
    #####: 2747:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedIncompatibleQosStatus)");
        -: 2748:  }
        -: 2749:
        -: 2750:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 2751:  const char** getFieldNames() const
        -: 2752:  {
        -: 2753:    static const char* names[] = {"total_count", "total_count_change", "last_policy_id", "policies", 0};
    #####: 2754:    return names;
        -: 2755:  }
        -: 2756:
    #####: 2757:  const void* getRawField(const void* stru, const char* field) const
        -: 2758:  {
    #####: 2759:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2760:      return &static_cast<const T*>(stru)->total_count;
        -: 2761:    }
    #####: 2762:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2763:      return &static_cast<const T*>(stru)->total_count_change;
        -: 2764:    }
    #####: 2765:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2766:      return &static_cast<const T*>(stru)->last_policy_id;
        -: 2767:    }
    #####: 2768:    if (std::strcmp(field, "policies") == 0) {
    #####: 2769:      return &static_cast<const T*>(stru)->policies;
        -: 2770:    }
    #####: 2771:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedIncompatibleQosStatus)");
        -: 2772:  }
        -: 2773:
    #####: 2774:  void assign(void* lhs, const char* field, const void* rhs,
        -: 2775:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 2776:  {
        -: 2777:    ACE_UNUSED_ARG(lhs);
        -: 2778:    ACE_UNUSED_ARG(field);
        -: 2779:    ACE_UNUSED_ARG(rhs);
        -: 2780:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 2781:    ACE_UNUSED_ARG(rhsMeta);
    #####: 2782:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2783:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2784:      return;
        -: 2785:    }
    #####: 2786:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2787:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2788:      return;
        -: 2789:    }
    #####: 2790:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2791:      static_cast<T*>(lhs)->last_policy_id = *static_cast<const DDS::QosPolicyId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2792:      return;
        -: 2793:    }
    #####: 2794:    if (std::strcmp(field, "policies") == 0) {
    #####: 2795:      static_cast<T*>(lhs)->policies = *static_cast<const DDS::QosPolicyCountSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 2796:      return;
        -: 2797:    }
    #####: 2798:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedIncompatibleQosStatus)");
        -: 2799:  }
        -: 2800:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 2801:
    #####: 2802:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 2803:  {
        -: 2804:    ACE_UNUSED_ARG(lhs);
        -: 2805:    ACE_UNUSED_ARG(field);
        -: 2806:    ACE_UNUSED_ARG(rhs);
    #####: 2807:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2808:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 2809:    }
    #####: 2810:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2811:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 2812:    }
    #####: 2813:    if (std::strcmp(field, "last_policy_id") == 0) {
    #####: 2814:      return static_cast<const T*>(lhs)->last_policy_id == static_cast<const T*>(rhs)->last_policy_id;
        -: 2815:    }
    #####: 2816:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::RequestedIncompatibleQosStatus)");
        -: 2817:  }
        -: 2818:};
        -: 2819:
        -: 2820:template<>
    #####: 2821:const MetaStruct& getMetaStruct<DDS::RequestedIncompatibleQosStatus>()
        -: 2822:{
    #####: 2823:  static MetaStructImpl<DDS::RequestedIncompatibleQosStatus> msi;
    #####: 2824:  return msi;
        -: 2825:}
        -: 2826:
    #####: 2827:bool gen_skip_over(Serializer& ser, DDS::RequestedIncompatibleQosStatus*)
        -: 2828:{
        -: 2829:  ACE_UNUSED_ARG(ser);
    #####: 2830:  MetaStructImpl<DDS::RequestedIncompatibleQosStatus>().getValue(ser, "");
    #####: 2831:  return true;
        -: 2832:}
        -: 2833:
        -: 2834:}  }
        -: 2835:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2836:
        -: 2837:#endif
        -: 2838:
        -: 2839:/* End STRUCT: RequestedIncompatibleQosStatus */
        -: 2840:
        -: 2841:
        -: 2842:/* Begin STRUCT: PublicationMatchedStatus */
        -: 2843:
        -: 2844:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2845:namespace OpenDDS { namespace DCPS {
        -: 2846:
    #####: 2847:void gen_find_size(const DDS::PublicationMatchedStatus& stru, size_t& size, size_t& padding)
        -: 2848:{
        -: 2849:  ACE_UNUSED_ARG(stru);
        -: 2850:  ACE_UNUSED_ARG(size);
        -: 2851:  ACE_UNUSED_ARG(padding);
    #####: 2852:  if ((size + padding) % 4) {
    #####: 2853:    padding += 4 - ((size + padding) % 4);
        -: 2854:  }
    #####: 2855:  size += gen_max_marshaled_size(stru.total_count);
    #####: 2856:  if ((size + padding) % 4) {
    #####: 2857:    padding += 4 - ((size + padding) % 4);
        -: 2858:  }
    #####: 2859:  size += gen_max_marshaled_size(stru.total_count_change);
    #####: 2860:  if ((size + padding) % 4) {
    #####: 2861:    padding += 4 - ((size + padding) % 4);
        -: 2862:  }
    #####: 2863:  size += gen_max_marshaled_size(stru.current_count);
    #####: 2864:  if ((size + padding) % 4) {
    #####: 2865:    padding += 4 - ((size + padding) % 4);
        -: 2866:  }
    #####: 2867:  size += gen_max_marshaled_size(stru.current_count_change);
    #####: 2868:  if ((size + padding) % 4) {
    #####: 2869:    padding += 4 - ((size + padding) % 4);
        -: 2870:  }
    #####: 2871:  size += gen_max_marshaled_size(stru.last_subscription_handle);
    #####: 2872:}
        -: 2873:
    #####: 2874:bool operator<<(Serializer& strm, const DDS::PublicationMatchedStatus& stru)
        -: 2875:{
        -: 2876:  ACE_UNUSED_ARG(strm);
        -: 2877:  ACE_UNUSED_ARG(stru);
    #####: 2878:  return (strm << stru.total_count)
    #####: 2879:    && (strm << stru.total_count_change)
    #####: 2880:    && (strm << stru.current_count)
    #####: 2881:    && (strm << stru.current_count_change)
    #####: 2882:    && (strm << stru.last_subscription_handle);
        -: 2883:}
        -: 2884:
    #####: 2885:bool operator>>(Serializer& strm, DDS::PublicationMatchedStatus& stru)
        -: 2886:{
        -: 2887:  ACE_UNUSED_ARG(strm);
        -: 2888:  ACE_UNUSED_ARG(stru);
    #####: 2889:  return (strm >> stru.total_count)
    #####: 2890:    && (strm >> stru.total_count_change)
    #####: 2891:    && (strm >> stru.current_count)
    #####: 2892:    && (strm >> stru.current_count_change)
    #####: 2893:    && (strm >> stru.last_subscription_handle);
        -: 2894:}
        -: 2895:
        -: 2896:}  }
        -: 2897:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2898:
        -: 2899:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2900:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2901:namespace OpenDDS { namespace DCPS {
        -: 2902:
        -: 2903:template<>
    #####: 2904:struct MetaStructImpl<DDS::PublicationMatchedStatus> : MetaStruct {
        -: 2905:  typedef DDS::PublicationMatchedStatus T;
        -: 2906:
        -: 2907:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 2908:  void* allocate() const { return new T; }
        -: 2909:
    #####: 2910:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 2911:
    #####: 2912:  size_t numDcpsKeys() const { return 0; }
        -: 2913:
        -: 2914:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 2915:
    #####: 2916:  bool isDcpsKey(const char* field) const
        -: 2917:  {
        -: 2918:    ACE_UNUSED_ARG(field);
    #####: 2919:    return false;
        -: 2920:  }
        -: 2921:
    #####: 2922:  Value getValue(const void* stru, const char* field) const
        -: 2923:  {
    #####: 2924:    const DDS::PublicationMatchedStatus& typed = *static_cast<const DDS::PublicationMatchedStatus*>(stru);
    #####: 2925:    if (std::strcmp(field, "total_count") == 0) {
    #####: 2926:      return typed.total_count;
        -: 2927:    }
    #####: 2928:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 2929:      return typed.total_count_change;
        -: 2930:    }
    #####: 2931:    if (std::strcmp(field, "current_count") == 0) {
    #####: 2932:      return typed.current_count;
        -: 2933:    }
    #####: 2934:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 2935:      return typed.current_count_change;
        -: 2936:    }
    #####: 2937:    if (std::strcmp(field, "last_subscription_handle") == 0) {
    #####: 2938:      return typed.last_subscription_handle;
        -: 2939:    }
        -: 2940:    ACE_UNUSED_ARG(typed);
    #####: 2941:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::PublicationMatchedStatus)");
        -: 2942:  }
        -: 2943:
    #####: 2944:  Value getValue(Serializer& ser, const char* field) const
        -: 2945:  {
    #####: 2946:    if (std::strcmp(field, "total_count") == 0) {
        -: 2947:      ACE_CDR::Long val;
    #####: 2948:      if (!(ser >> val)) {
    #####: 2949:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 2950:      }
    #####: 2951:      return val;
        -: 2952:    } else {
    #####: 2953:      if (!ser.skip(1, 4)) {
    #####: 2954:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 2955:      }
        -: 2956:    }
    #####: 2957:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 2958:      ACE_CDR::Long val;
    #####: 2959:      if (!(ser >> val)) {
    #####: 2960:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 2961:      }
    #####: 2962:      return val;
        -: 2963:    } else {
    #####: 2964:      if (!ser.skip(1, 4)) {
    #####: 2965:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 2966:      }
        -: 2967:    }
    #####: 2968:    if (std::strcmp(field, "current_count") == 0) {
        -: 2969:      ACE_CDR::Long val;
    #####: 2970:      if (!(ser >> val)) {
    #####: 2971:        throw std::runtime_error("Field 'current_count' could not be deserialized");
        -: 2972:      }
    #####: 2973:      return val;
        -: 2974:    } else {
    #####: 2975:      if (!ser.skip(1, 4)) {
    #####: 2976:        throw std::runtime_error("Field 'current_count' could not be skipped");
        -: 2977:      }
        -: 2978:    }
    #####: 2979:    if (std::strcmp(field, "current_count_change") == 0) {
        -: 2980:      ACE_CDR::Long val;
    #####: 2981:      if (!(ser >> val)) {
    #####: 2982:        throw std::runtime_error("Field 'current_count_change' could not be deserialized");
        -: 2983:      }
    #####: 2984:      return val;
        -: 2985:    } else {
    #####: 2986:      if (!ser.skip(1, 4)) {
    #####: 2987:        throw std::runtime_error("Field 'current_count_change' could not be skipped");
        -: 2988:      }
        -: 2989:    }
    #####: 2990:    if (std::strcmp(field, "last_subscription_handle") == 0) {
        -: 2991:      ACE_CDR::Long val;
    #####: 2992:      if (!(ser >> val)) {
    #####: 2993:        throw std::runtime_error("Field 'last_subscription_handle' could not be deserialized");
        -: 2994:      }
    #####: 2995:      return val;
        -: 2996:    } else {
    #####: 2997:      if (!ser.skip(1, 4)) {
    #####: 2998:        throw std::runtime_error("Field 'last_subscription_handle' could not be skipped");
        -: 2999:      }
        -: 3000:    }
    #####: 3001:    if (!field[0]) {
    #####: 3002:      return 0;
        -: 3003:    }
    #####: 3004:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::PublicationMatchedStatus");
        -: 3005:  }
        -: 3006:
    #####: 3007:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 3008:  {
        -: 3009:    ACE_UNUSED_ARG(next);
    #####: 3010:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3011:      return make_field_cmp(&T::total_count, next);
        -: 3012:    }
    #####: 3013:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3014:      return make_field_cmp(&T::total_count_change, next);
        -: 3015:    }
    #####: 3016:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3017:      return make_field_cmp(&T::current_count, next);
        -: 3018:    }
    #####: 3019:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3020:      return make_field_cmp(&T::current_count_change, next);
        -: 3021:    }
    #####: 3022:    if (std::strcmp(field, "last_subscription_handle") == 0) {
    #####: 3023:      return make_field_cmp(&T::last_subscription_handle, next);
        -: 3024:    }
    #####: 3025:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::PublicationMatchedStatus)");
        -: 3026:  }
        -: 3027:
        -: 3028:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 3029:  const char** getFieldNames() const
        -: 3030:  {
        -: 3031:    static const char* names[] = {"total_count", "total_count_change", "current_count", "current_count_change", "last_subscription_handle", 0};
    #####: 3032:    return names;
        -: 3033:  }
        -: 3034:
    #####: 3035:  const void* getRawField(const void* stru, const char* field) const
        -: 3036:  {
    #####: 3037:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3038:      return &static_cast<const T*>(stru)->total_count;
        -: 3039:    }
    #####: 3040:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3041:      return &static_cast<const T*>(stru)->total_count_change;
        -: 3042:    }
    #####: 3043:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3044:      return &static_cast<const T*>(stru)->current_count;
        -: 3045:    }
    #####: 3046:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3047:      return &static_cast<const T*>(stru)->current_count_change;
        -: 3048:    }
    #####: 3049:    if (std::strcmp(field, "last_subscription_handle") == 0) {
    #####: 3050:      return &static_cast<const T*>(stru)->last_subscription_handle;
        -: 3051:    }
    #####: 3052:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::PublicationMatchedStatus)");
        -: 3053:  }
        -: 3054:
    #####: 3055:  void assign(void* lhs, const char* field, const void* rhs,
        -: 3056:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 3057:  {
        -: 3058:    ACE_UNUSED_ARG(lhs);
        -: 3059:    ACE_UNUSED_ARG(field);
        -: 3060:    ACE_UNUSED_ARG(rhs);
        -: 3061:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 3062:    ACE_UNUSED_ARG(rhsMeta);
    #####: 3063:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3064:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3065:      return;
        -: 3066:    }
    #####: 3067:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3068:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3069:      return;
        -: 3070:    }
    #####: 3071:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3072:      static_cast<T*>(lhs)->current_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3073:      return;
        -: 3074:    }
    #####: 3075:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3076:      static_cast<T*>(lhs)->current_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3077:      return;
        -: 3078:    }
    #####: 3079:    if (std::strcmp(field, "last_subscription_handle") == 0) {
    #####: 3080:      static_cast<T*>(lhs)->last_subscription_handle = *static_cast<const DDS::InstanceHandle_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3081:      return;
        -: 3082:    }
    #####: 3083:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::PublicationMatchedStatus)");
        -: 3084:  }
        -: 3085:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 3086:
    #####: 3087:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 3088:  {
        -: 3089:    ACE_UNUSED_ARG(lhs);
        -: 3090:    ACE_UNUSED_ARG(field);
        -: 3091:    ACE_UNUSED_ARG(rhs);
    #####: 3092:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3093:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 3094:    }
    #####: 3095:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3096:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 3097:    }
    #####: 3098:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3099:      return static_cast<const T*>(lhs)->current_count == static_cast<const T*>(rhs)->current_count;
        -: 3100:    }
    #####: 3101:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3102:      return static_cast<const T*>(lhs)->current_count_change == static_cast<const T*>(rhs)->current_count_change;
        -: 3103:    }
    #####: 3104:    if (std::strcmp(field, "last_subscription_handle") == 0) {
    #####: 3105:      return static_cast<const T*>(lhs)->last_subscription_handle == static_cast<const T*>(rhs)->last_subscription_handle;
        -: 3106:    }
    #####: 3107:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::PublicationMatchedStatus)");
        -: 3108:  }
        -: 3109:};
        -: 3110:
        -: 3111:template<>
    #####: 3112:const MetaStruct& getMetaStruct<DDS::PublicationMatchedStatus>()
        -: 3113:{
    #####: 3114:  static MetaStructImpl<DDS::PublicationMatchedStatus> msi;
    #####: 3115:  return msi;
        -: 3116:}
        -: 3117:
    #####: 3118:bool gen_skip_over(Serializer& ser, DDS::PublicationMatchedStatus*)
        -: 3119:{
        -: 3120:  ACE_UNUSED_ARG(ser);
    #####: 3121:  MetaStructImpl<DDS::PublicationMatchedStatus>().getValue(ser, "");
    #####: 3122:  return true;
        -: 3123:}
        -: 3124:
        -: 3125:}  }
        -: 3126:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 3127:
        -: 3128:#endif
        -: 3129:
        -: 3130:/* End STRUCT: PublicationMatchedStatus */
        -: 3131:
        -: 3132:
        -: 3133:/* Begin STRUCT: SubscriptionMatchedStatus */
        -: 3134:
        -: 3135:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 3136:namespace OpenDDS { namespace DCPS {
        -: 3137:
    #####: 3138:void gen_find_size(const DDS::SubscriptionMatchedStatus& stru, size_t& size, size_t& padding)
        -: 3139:{
        -: 3140:  ACE_UNUSED_ARG(stru);
        -: 3141:  ACE_UNUSED_ARG(size);
        -: 3142:  ACE_UNUSED_ARG(padding);
    #####: 3143:  if ((size + padding) % 4) {
    #####: 3144:    padding += 4 - ((size + padding) % 4);
        -: 3145:  }
    #####: 3146:  size += gen_max_marshaled_size(stru.total_count);
    #####: 3147:  if ((size + padding) % 4) {
    #####: 3148:    padding += 4 - ((size + padding) % 4);
        -: 3149:  }
    #####: 3150:  size += gen_max_marshaled_size(stru.total_count_change);
    #####: 3151:  if ((size + padding) % 4) {
    #####: 3152:    padding += 4 - ((size + padding) % 4);
        -: 3153:  }
    #####: 3154:  size += gen_max_marshaled_size(stru.current_count);
    #####: 3155:  if ((size + padding) % 4) {
    #####: 3156:    padding += 4 - ((size + padding) % 4);
        -: 3157:  }
    #####: 3158:  size += gen_max_marshaled_size(stru.current_count_change);
    #####: 3159:  if ((size + padding) % 4) {
    #####: 3160:    padding += 4 - ((size + padding) % 4);
        -: 3161:  }
    #####: 3162:  size += gen_max_marshaled_size(stru.last_publication_handle);
    #####: 3163:}
        -: 3164:
    #####: 3165:bool operator<<(Serializer& strm, const DDS::SubscriptionMatchedStatus& stru)
        -: 3166:{
        -: 3167:  ACE_UNUSED_ARG(strm);
        -: 3168:  ACE_UNUSED_ARG(stru);
    #####: 3169:  return (strm << stru.total_count)
    #####: 3170:    && (strm << stru.total_count_change)
    #####: 3171:    && (strm << stru.current_count)
    #####: 3172:    && (strm << stru.current_count_change)
    #####: 3173:    && (strm << stru.last_publication_handle);
        -: 3174:}
        -: 3175:
    #####: 3176:bool operator>>(Serializer& strm, DDS::SubscriptionMatchedStatus& stru)
        -: 3177:{
        -: 3178:  ACE_UNUSED_ARG(strm);
        -: 3179:  ACE_UNUSED_ARG(stru);
    #####: 3180:  return (strm >> stru.total_count)
    #####: 3181:    && (strm >> stru.total_count_change)
    #####: 3182:    && (strm >> stru.current_count)
    #####: 3183:    && (strm >> stru.current_count_change)
    #####: 3184:    && (strm >> stru.last_publication_handle);
        -: 3185:}
        -: 3186:
        -: 3187:}  }
        -: 3188:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 3189:
        -: 3190:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 3191:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 3192:namespace OpenDDS { namespace DCPS {
        -: 3193:
        -: 3194:template<>
    #####: 3195:struct MetaStructImpl<DDS::SubscriptionMatchedStatus> : MetaStruct {
        -: 3196:  typedef DDS::SubscriptionMatchedStatus T;
        -: 3197:
        -: 3198:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 3199:  void* allocate() const { return new T; }
        -: 3200:
    #####: 3201:  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
        -: 3202:
    #####: 3203:  size_t numDcpsKeys() const { return 0; }
        -: 3204:
        -: 3205:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 3206:
    #####: 3207:  bool isDcpsKey(const char* field) const
        -: 3208:  {
        -: 3209:    ACE_UNUSED_ARG(field);
    #####: 3210:    return false;
        -: 3211:  }
        -: 3212:
    #####: 3213:  Value getValue(const void* stru, const char* field) const
        -: 3214:  {
    #####: 3215:    const DDS::SubscriptionMatchedStatus& typed = *static_cast<const DDS::SubscriptionMatchedStatus*>(stru);
    #####: 3216:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3217:      return typed.total_count;
        -: 3218:    }
    #####: 3219:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3220:      return typed.total_count_change;
        -: 3221:    }
    #####: 3222:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3223:      return typed.current_count;
        -: 3224:    }
    #####: 3225:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3226:      return typed.current_count_change;
        -: 3227:    }
    #####: 3228:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 3229:      return typed.last_publication_handle;
        -: 3230:    }
        -: 3231:    ACE_UNUSED_ARG(typed);
    #####: 3232:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SubscriptionMatchedStatus)");
        -: 3233:  }
        -: 3234:
    #####: 3235:  Value getValue(Serializer& ser, const char* field) const
        -: 3236:  {
    #####: 3237:    if (std::strcmp(field, "total_count") == 0) {
        -: 3238:      ACE_CDR::Long val;
    #####: 3239:      if (!(ser >> val)) {
    #####: 3240:        throw std::runtime_error("Field 'total_count' could not be deserialized");
        -: 3241:      }
    #####: 3242:      return val;
        -: 3243:    } else {
    #####: 3244:      if (!ser.skip(1, 4)) {
    #####: 3245:        throw std::runtime_error("Field 'total_count' could not be skipped");
        -: 3246:      }
        -: 3247:    }
    #####: 3248:    if (std::strcmp(field, "total_count_change") == 0) {
        -: 3249:      ACE_CDR::Long val;
    #####: 3250:      if (!(ser >> val)) {
    #####: 3251:        throw std::runtime_error("Field 'total_count_change' could not be deserialized");
        -: 3252:      }
    #####: 3253:      return val;
        -: 3254:    } else {
    #####: 3255:      if (!ser.skip(1, 4)) {
    #####: 3256:        throw std::runtime_error("Field 'total_count_change' could not be skipped");
        -: 3257:      }
        -: 3258:    }
    #####: 3259:    if (std::strcmp(field, "current_count") == 0) {
        -: 3260:      ACE_CDR::Long val;
    #####: 3261:      if (!(ser >> val)) {
    #####: 3262:        throw std::runtime_error("Field 'current_count' could not be deserialized");
        -: 3263:      }
    #####: 3264:      return val;
        -: 3265:    } else {
    #####: 3266:      if (!ser.skip(1, 4)) {
    #####: 3267:        throw std::runtime_error("Field 'current_count' could not be skipped");
        -: 3268:      }
        -: 3269:    }
    #####: 3270:    if (std::strcmp(field, "current_count_change") == 0) {
        -: 3271:      ACE_CDR::Long val;
    #####: 3272:      if (!(ser >> val)) {
    #####: 3273:        throw std::runtime_error("Field 'current_count_change' could not be deserialized");
        -: 3274:      }
    #####: 3275:      return val;
        -: 3276:    } else {
    #####: 3277:      if (!ser.skip(1, 4)) {
    #####: 3278:        throw std::runtime_error("Field 'current_count_change' could not be skipped");
        -: 3279:      }
        -: 3280:    }
    #####: 3281:    if (std::strcmp(field, "last_publication_handle") == 0) {
        -: 3282:      ACE_CDR::Long val;
    #####: 3283:      if (!(ser >> val)) {
    #####: 3284:        throw std::runtime_error("Field 'last_publication_handle' could not be deserialized");
        -: 3285:      }
    #####: 3286:      return val;
        -: 3287:    } else {
    #####: 3288:      if (!ser.skip(1, 4)) {
    #####: 3289:        throw std::runtime_error("Field 'last_publication_handle' could not be skipped");
        -: 3290:      }
        -: 3291:    }
    #####: 3292:    if (!field[0]) {
    #####: 3293:      return 0;
        -: 3294:    }
    #####: 3295:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDS::SubscriptionMatchedStatus");
        -: 3296:  }
        -: 3297:
    #####: 3298:  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
        -: 3299:  {
        -: 3300:    ACE_UNUSED_ARG(next);
    #####: 3301:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3302:      return make_field_cmp(&T::total_count, next);
        -: 3303:    }
    #####: 3304:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3305:      return make_field_cmp(&T::total_count_change, next);
        -: 3306:    }
    #####: 3307:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3308:      return make_field_cmp(&T::current_count, next);
        -: 3309:    }
    #####: 3310:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3311:      return make_field_cmp(&T::current_count_change, next);
        -: 3312:    }
    #####: 3313:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 3314:      return make_field_cmp(&T::last_publication_handle, next);
        -: 3315:    }
    #####: 3316:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SubscriptionMatchedStatus)");
        -: 3317:  }
        -: 3318:
        -: 3319:#ifndef OPENDDS_NO_MULTI_TOPIC
    #####: 3320:  const char** getFieldNames() const
        -: 3321:  {
        -: 3322:    static const char* names[] = {"total_count", "total_count_change", "current_count", "current_count_change", "last_publication_handle", 0};
    #####: 3323:    return names;
        -: 3324:  }
        -: 3325:
    #####: 3326:  const void* getRawField(const void* stru, const char* field) const
        -: 3327:  {
    #####: 3328:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3329:      return &static_cast<const T*>(stru)->total_count;
        -: 3330:    }
    #####: 3331:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3332:      return &static_cast<const T*>(stru)->total_count_change;
        -: 3333:    }
    #####: 3334:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3335:      return &static_cast<const T*>(stru)->current_count;
        -: 3336:    }
    #####: 3337:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3338:      return &static_cast<const T*>(stru)->current_count_change;
        -: 3339:    }
    #####: 3340:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 3341:      return &static_cast<const T*>(stru)->last_publication_handle;
        -: 3342:    }
    #####: 3343:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SubscriptionMatchedStatus)");
        -: 3344:  }
        -: 3345:
    #####: 3346:  void assign(void* lhs, const char* field, const void* rhs,
        -: 3347:    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
        -: 3348:  {
        -: 3349:    ACE_UNUSED_ARG(lhs);
        -: 3350:    ACE_UNUSED_ARG(field);
        -: 3351:    ACE_UNUSED_ARG(rhs);
        -: 3352:    ACE_UNUSED_ARG(rhsFieldSpec);
        -: 3353:    ACE_UNUSED_ARG(rhsMeta);
    #####: 3354:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3355:      static_cast<T*>(lhs)->total_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3356:      return;
        -: 3357:    }
    #####: 3358:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3359:      static_cast<T*>(lhs)->total_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3360:      return;
        -: 3361:    }
    #####: 3362:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3363:      static_cast<T*>(lhs)->current_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3364:      return;
        -: 3365:    }
    #####: 3366:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3367:      static_cast<T*>(lhs)->current_count_change = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3368:      return;
        -: 3369:    }
    #####: 3370:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 3371:      static_cast<T*>(lhs)->last_publication_handle = *static_cast<const DDS::InstanceHandle_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
    #####: 3372:      return;
        -: 3373:    }
    #####: 3374:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SubscriptionMatchedStatus)");
        -: 3375:  }
        -: 3376:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -: 3377:
    #####: 3378:  bool compare(const void* lhs, const void* rhs, const char* field) const
        -: 3379:  {
        -: 3380:    ACE_UNUSED_ARG(lhs);
        -: 3381:    ACE_UNUSED_ARG(field);
        -: 3382:    ACE_UNUSED_ARG(rhs);
    #####: 3383:    if (std::strcmp(field, "total_count") == 0) {
    #####: 3384:      return static_cast<const T*>(lhs)->total_count == static_cast<const T*>(rhs)->total_count;
        -: 3385:    }
    #####: 3386:    if (std::strcmp(field, "total_count_change") == 0) {
    #####: 3387:      return static_cast<const T*>(lhs)->total_count_change == static_cast<const T*>(rhs)->total_count_change;
        -: 3388:    }
    #####: 3389:    if (std::strcmp(field, "current_count") == 0) {
    #####: 3390:      return static_cast<const T*>(lhs)->current_count == static_cast<const T*>(rhs)->current_count;
        -: 3391:    }
    #####: 3392:    if (std::strcmp(field, "current_count_change") == 0) {
    #####: 3393:      return static_cast<const T*>(lhs)->current_count_change == static_cast<const T*>(rhs)->current_count_change;
        -: 3394:    }
    #####: 3395:    if (std::strcmp(field, "last_publication_handle") == 0) {
    #####: 3396:      return static_cast<const T*>(lhs)->last_publication_handle == static_cast<const T*>(rhs)->last_publication_handle;
        -: 3397:    }
    #####: 3398:    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDS::SubscriptionMatchedStatus)");
        -: 3399:  }
        -: 3400:};
        -: 3401:
        -: 3402:template<>
    #####: 3403:const MetaStruct& getMetaStruct<DDS::SubscriptionMatchedStatus>()
        -: 3404:{
    #####: 3405:  static MetaStructImpl<DDS::SubscriptionMatchedStatus> msi;
    #####: 3406:  return msi;
        -: 3407:}
        -: 3408:
    #####: 3409:bool gen_skip_over(Serializer& ser, DDS::SubscriptionMatchedStatus*)
        -: 3410:{
        -: 3411:  ACE_UNUSED_ARG(ser);
    #####: 3412:  MetaStructImpl<DDS::SubscriptionMatchedStatus>().getValue(ser, "");
    #####: 3413:  return true;
        -: 3414:}
        -: 3415:
        -: 3416:}  }
        -: 3417:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 3418:
        -: 3419:#endif
        -: 3420:
        -: 3421:/* End STRUCT: SubscriptionMatchedStatus */
        -: 3422:
        -: 3423:
        -: 3424:/* Begin INTERFACE-FWD: Listener */
        -: 3425:
        -: 3426:
        -: 3427:/* End INTERFACE-FWD: Listener */
        -: 3428:
        -: 3429:
        -: 3430:/* Begin INTERFACE-FWD: Entity */
        -: 3431:
        -: 3432:
        -: 3433:/* End INTERFACE-FWD: Entity */
        -: 3434:
        -: 3435:
        -: 3436:/* Begin INTERFACE: Listener */
        -: 3437:
        -: 3438:
        -: 3439:/* End INTERFACE: Listener */
        -: 3440:
        -: 3441:
        -: 3442:/* Begin INTERFACE: Condition */
        -: 3443:
        -: 3444:
        -: 3445:/* End INTERFACE: Condition */
        -: 3446:
        -: 3447:
        -: 3448:/* Begin INTERFACE: WaitSetInterf */
        -: 3449:
        -: 3450:
        -: 3451:/* End INTERFACE: WaitSetInterf */
        -: 3452:
        -: 3453:
        -: 3454:/* Begin INTERFACE: GuardConditionInterf */
        -: 3455:
        -: 3456:
        -: 3457:/* End INTERFACE: GuardConditionInterf */
        -: 3458:
        -: 3459:
        -: 3460:/* Begin INTERFACE: StatusCondition */
        -: 3461:
        -: 3462:
        -: 3463:/* End INTERFACE: StatusCondition */
        -: 3464:
        -: 3465:
        -: 3466:/* Begin CONST: USERDATA_QOS_POLICY_NAME */
        -: 3467:
        -: 3468:
        -: 3469:/* End CONST: USERDATA_QOS_POLICY_NAME */
        -: 3470:
        -: 3471:
        -: 3472:/* Begin CONST: DURABILITY_QOS_POLICY_NAME */
        -: 3473:
        -: 3474:
        -: 3475:/* End CONST: DURABILITY_QOS_POLICY_NAME */
        -: 3476:
        -: 3477:
        -: 3478:/* Begin CONST: PRESENTATION_QOS_POLICY_NAME */
        -: 3479:
        -: 3480:
        -: 3481:/* End CONST: PRESENTATION_QOS_POLICY_NAME */
        -: 3482:
        -: 3483:
        -: 3484:/* Begin CONST: DEADLINE_QOS_POLICY_NAME */
        -: 3485:
        -: 3486:
        -: 3487:/* End CONST: DEADLINE_QOS_POLICY_NAME */
        -: 3488:
        -: 3489:
        -: 3490:/* Begin CONST: LATENCYBUDGET_QOS_POLICY_NAME */
        -: 3491:
        -: 3492:
        -: 3493:/* End CONST: LATENCYBUDGET_QOS_POLICY_NAME */
        -: 3494:
        -: 3495:
        -: 3496:/* Begin CONST: OWNERSHIP_QOS_POLICY_NAME */
        -: 3497:
        -: 3498:
        -: 3499:/* End CONST: OWNERSHIP_QOS_POLICY_NAME */
        -: 3500:
        -: 3501:
        -: 3502:/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */
        -: 3503:
        -: 3504:
        -: 3505:/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */
        -: 3506:
        -: 3507:
        -: 3508:/* Begin CONST: LIVELINESS_QOS_POLICY_NAME */
        -: 3509:
        -: 3510:
        -: 3511:/* End CONST: LIVELINESS_QOS_POLICY_NAME */
        -: 3512:
        -: 3513:
        -: 3514:/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */
        -: 3515:
        -: 3516:
        -: 3517:/* End CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */
        -: 3518:
        -: 3519:
        -: 3520:/* Begin CONST: PARTITION_QOS_POLICY_NAME */
        -: 3521:
        -: 3522:
        -: 3523:/* End CONST: PARTITION_QOS_POLICY_NAME */
        -: 3524:
        -: 3525:
        -: 3526:/* Begin CONST: RELIABILITY_QOS_POLICY_NAME */
        -: 3527:
        -: 3528:
        -: 3529:/* End CONST: RELIABILITY_QOS_POLICY_NAME */
        -: 3530:
        -: 3531:
        -: 3532:/* Begin CONST: DESTINATIONORDER_QOS_POLICY_NAME */
        -: 3533:
        -: 3534:
        -: 3535:/* End CONST: DESTINATIONORDER_QOS_POLICY_NAME */
        -: 3536:
        -: 3537:
        -: 3538:/* Begin CONST: HISTORY_QOS_POLICY_NAME */
        -: 3539:
        -: 3540:
        -: 3541:/* End CONST: HISTORY_QOS_POLICY_NAME */
        -: 3542:
        -: 3543:
        -: 3544:/* Begin CONST: RESOURCELIMITS_QOS_POLICY_NAME */
        -: 3545:
        -: 3546:
        -: 3547:/* End CONST: RESOURCELIMITS_QOS_POLICY_NAME */
        -: 3548:
        -: 3549:
        -: 3550:/* Begin CONST: ENTITYFACTORY_QOS_POLICY_NAME */
        -: 3551:
        -: 3552:
        -: 3553:/* End CONST: ENTITYFACTORY_QOS_POLICY_NAME */
        -: 3554:
        -: 3555:
        -: 3556:/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */
        -: 3557:
        -: 3558:
        -: 3559:/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */
        -: 3560:
        -: 3561:
        -: 3562:/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */
        -: 3563:
        -: 3564:
        -: 3565:/* End CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */
        -: 3566:
        -: 3567:
        -: 3568:/* Begin CONST: TOPICDATA_QOS_POLICY_NAME */
        -: 3569:
        -: 3570:
        -: 3571:/* End CONST: TOPICDATA_QOS_POLICY_NAME */
        -: 3572:
        -: 3573:
        -: 3574:/* Begin CONST: GROUPDATA_QOS_POLICY_NAME */
        -: 3575:
        -: 3576:
        -: 3577:/* End CONST: GROUPDATA_QOS_POLICY_NAME */
        -: 3578:
        -: 3579:
        -: 3580:/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */
        -: 3581:
        -: 3582:
        -: 3583:/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */
        -: 3584:
        -: 3585:
        -: 3586:/* Begin CONST: LIFESPAN_QOS_POLICY_NAME */
        -: 3587:
        -: 3588:
        -: 3589:/* End CONST: LIFESPAN_QOS_POLICY_NAME */
        -: 3590:
        -: 3591:
        -: 3592:/* Begin CONST: DURABILITYSERVICE_POLICY_NAME */
        -: 3593:
        -: 3594:
        -: 3595:/* End CONST: DURABILITYSERVICE_POLICY_NAME */
        -: 3596:
        -: 3597:
        -: 3598:/* Begin CONST: INVALID_QOS_POLICY_ID */
        -: 3599:
        -: 3600:
        -: 3601:/* End CONST: INVALID_QOS_POLICY_ID */
        -: 3602:
        -: 3603:
        -: 3604:/* Begin CONST: USERDATA_QOS_POLICY_ID */
        -: 3605:
        -: 3606:
        -: 3607:/* End CONST: USERDATA_QOS_POLICY_ID */
        -: 3608:
        -: 3609:
        -: 3610:/* Begin CONST: DURABILITY_QOS_POLICY_ID */
        -: 3611:
        -: 3612:
        -: 3613:/* End CONST: DURABILITY_QOS_POLICY_ID */
        -: 3614:
        -: 3615:
        -: 3616:/* Begin CONST: PRESENTATION_QOS_POLICY_ID */
        -: 3617:
        -: 3618:
        -: 3619:/* End CONST: PRESENTATION_QOS_POLICY_ID */
        -: 3620:
        -: 3621:
        -: 3622:/* Begin CONST: DEADLINE_QOS_POLICY_ID */
        -: 3623:
        -: 3624:
        -: 3625:/* End CONST: DEADLINE_QOS_POLICY_ID */
        -: 3626:
        -: 3627:
        -: 3628:/* Begin CONST: LATENCYBUDGET_QOS_POLICY_ID */
        -: 3629:
        -: 3630:
        -: 3631:/* End CONST: LATENCYBUDGET_QOS_POLICY_ID */
        -: 3632:
        -: 3633:
        -: 3634:/* Begin CONST: OWNERSHIP_QOS_POLICY_ID */
        -: 3635:
        -: 3636:
        -: 3637:/* End CONST: OWNERSHIP_QOS_POLICY_ID */
        -: 3638:
        -: 3639:
        -: 3640:/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */
        -: 3641:
        -: 3642:
        -: 3643:/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */
        -: 3644:
        -: 3645:
        -: 3646:/* Begin CONST: LIVELINESS_QOS_POLICY_ID */
        -: 3647:
        -: 3648:
        -: 3649:/* End CONST: LIVELINESS_QOS_POLICY_ID */
        -: 3650:
        -: 3651:
        -: 3652:/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_ID */
        -: 3653:
        -: 3654:
        -: 3655:/* End CONST: TIMEBASEDFILTER_QOS_POLICY_ID */
        -: 3656:
        -: 3657:
        -: 3658:/* Begin CONST: PARTITION_QOS_POLICY_ID */
        -: 3659:
        -: 3660:
        -: 3661:/* End CONST: PARTITION_QOS_POLICY_ID */
        -: 3662:
        -: 3663:
        -: 3664:/* Begin CONST: RELIABILITY_QOS_POLICY_ID */
        -: 3665:
        -: 3666:
        -: 3667:/* End CONST: RELIABILITY_QOS_POLICY_ID */
        -: 3668:
        -: 3669:
        -: 3670:/* Begin CONST: DESTINATIONORDER_QOS_POLICY_ID */
        -: 3671:
        -: 3672:
        -: 3673:/* End CONST: DESTINATIONORDER_QOS_POLICY_ID */
        -: 3674:
        -: 3675:
        -: 3676:/* Begin CONST: HISTORY_QOS_POLICY_ID */
        -: 3677:
        -: 3678:
        -: 3679:/* End CONST: HISTORY_QOS_POLICY_ID */
        -: 3680:
        -: 3681:
        -: 3682:/* Begin CONST: RESOURCELIMITS_QOS_POLICY_ID */
        -: 3683:
        -: 3684:
        -: 3685:/* End CONST: RESOURCELIMITS_QOS_POLICY_ID */
        -: 3686:
        -: 3687:
        -: 3688:/* Begin CONST: ENTITYFACTORY_QOS_POLICY_ID */
        -: 3689:
        -: 3690:
        -: 3691:/* End CONST: ENTITYFACTORY_QOS_POLICY_ID */
        -: 3692:
        -: 3693:
        -: 3694:/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */
        -: 3695:
        -: 3696:
        -: 3697:/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */
        -: 3698:
        -: 3699:
        -: 3700:/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_ID */
        -: 3701:
        -: 3702:
        -: 3703:/* End CONST: READERDATALIFECYCLE_QOS_POLICY_ID */
        -: 3704:
        -: 3705:
        -: 3706:/* Begin CONST: TOPICDATA_QOS_POLICY_ID */
        -: 3707:
        -: 3708:
        -: 3709:/* End CONST: TOPICDATA_QOS_POLICY_ID */
        -: 3710:
        -: 3711:
        -: 3712:/* Begin CONST: GROUPDATA_QOS_POLICY_ID */
        -: 3713:
        -: 3714:
        -: 3715:/* End CONST: GROUPDATA_QOS_POLICY_ID */
        -: 3716:
        -: 3717:
        -: 3718:/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */
        -: 3719:
        -: 3720:
        -: 3721:/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */
        -: 3722:
        -: 3723:
        -: 3724:/* Begin CONST: LIFESPAN_QOS_POLICY_ID */
        -: 3725:
        -: 3726:
        -: 3727:/* End CONST: LIFESPAN_QOS_POLICY_ID */
        -: 3728:
        -: 3729:
        -: 3730:/* Begin CONST: DURABILITYSERVICE_QOS_POLICY_ID */
        -: 3731:
        -: 3732:
        -: 3733:/* End CONST: DURABILITYSERVICE_QOS_POLICY_ID */
        -: 3734:
        -: 3735:
        -: 3736:/* Begin INTERFACE: Entity */
        -: 3737:
        -: 3738:
        -: 3739:/* End INTERFACE: Entity */
        -: 3740:
        -: 3741:/* End MODULE: DDS */
        -: 3742:
        -: 3743:
        -: 3744:/* Begin MODULE: OpenDDS */
        -: 3745:
        -: 3746:
        -: 3747:
        -: 3748:/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_NAME */
        -: 3749:
        -: 3750:
        -: 3751:/* End CONST: TRANSPORTTYPE_QOS_POLICY_NAME */
        -: 3752:
        -: 3753:
        -: 3754:/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_ID */
        -: 3755:
        -: 3756:
        -: 3757:/* End CONST: TRANSPORTTYPE_QOS_POLICY_ID */
        -: 3758:
        -: 3759:
        -: 3760:/* Begin CONST: MAX_USER_DOMAINID */
        -: 3761:
        -: 3762:
        -: 3763:/* End CONST: MAX_USER_DOMAINID */
        -: 3764:
        -: 3765:
        -: 3766:/* Begin MODULE: DCPS */
        -: 3767:
        -: 3768:
        -: 3769:
        -: 3770:/* Begin CONST: ALL_STATUS_MASK */
        -: 3771:
        -: 3772:
        -: 3773:/* End CONST: ALL_STATUS_MASK */
        -: 3774:
        -: 3775:
        -: 3776:/* Begin CONST: NO_STATUS_MASK */
        -: 3777:
        -: 3778:
        -: 3779:/* End CONST: NO_STATUS_MASK */
        -: 3780:
        -: 3781:
        -: 3782:/* Begin CONST: DEFAULT_STATUS_MASK */
        -: 3783:
        -: 3784:
        -: 3785:/* End CONST: DEFAULT_STATUS_MASK */
        -: 3786:
        -: 3787:/* End MODULE: DCPS */
        -: 3788:
        -: 3789:/* End MODULE: OpenDDS */
