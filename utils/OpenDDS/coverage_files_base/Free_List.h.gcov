        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/Free_List.h
        -:    0:Programs:72
        -:    1:/* -*- C++ -*- */
        -:    2:
        -:    3://=============================================================================
        -:    4:/**
        -:    5: *  @file    Free_List.h
        -:    6: *
        -:    7: *  $Id: Free_List.h 2622 2015-08-13 18:30:00Z mitza $
        -:    8: *
        -:    9: *  @author Darrell Brunsch (brunsch@cs.wustl.edu)
        -:   10: */
        -:   11://=============================================================================
        -:   12:
        -:   13:#ifndef ACE_FREE_LIST_H
        -:   14:#define ACE_FREE_LIST_H
        -:   15:#include /**/ "ace/pre.h"
        -:   16:
        -:   17:#include /**/ "ace/config-all.h"
        -:   18:
        -:   19:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   20:# pragma once
        -:   21:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   22:
        -:   23:#include "ace/Global_Macros.h"
        -:   24:#include "ace/Default_Constants.h"
        -:   25:#include "ace/os_include/os_stddef.h"
        -:   26:
        -:   27:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   28:
        -:   29:/**
        -:   30: * @class ACE_Free_List
        -:   31: *
        -:   32: * @brief Implements a free list.
        -:   33: *
        -:   34: * This class maintains a free list of nodes of type T.
        -:   35: */
        -:   36:template <class T>
      270:   37:class ACE_Free_List
        -:   38:{
        -:   39:public:
        -:   40:  /// Destructor - removes all the elements from the free_list.
        -:   41:  virtual ~ACE_Free_List (void);
        -:   42:
        -:   43:  /// Inserts an element onto the free list (if it isn't past the high
        -:   44:  /// water mark).
        -:   45:  virtual void add (T *element) = 0;
        -:   46:
        -:   47:  /// Takes a element off the freelist and returns it.  It creates
        -:   48:  /// <inc> new elements if the size is at or below the low water mark.
        -:   49:  virtual T *remove (void) = 0;
        -:   50:
        -:   51:  /// Returns the current size of the free list.
        -:   52:  virtual size_t size (void) = 0;
        -:   53:
        -:   54:  /// Resizes the free list to @a newsize.
        -:   55:  virtual void resize (size_t newsize) = 0;
        -:   56:};
        -:   57:
        -:   58:/**
        -:   59: * @class ACE_Locked_Free_List
        -:   60: *
        -:   61: * @brief Implements a free list.
        -:   62: *
        -:   63: * This class maintains a free list of nodes of type T.  It
        -:   64: * depends on the type T having a get_next() and set_next()
        -:   65: * method.  It maintains a mutex so the freelist can be used in
        -:   66: * a multithreaded program .
        -:   67: */
        -:   68:template <class T, class ACE_LOCK>
        -:   69:class ACE_Locked_Free_List : public ACE_Free_List<T>
        -:   70:{
        -:   71:public:
        -:   72:  // = Initialization and termination.
        -:   73:  /**
        -:   74:   * Constructor takes a @a mode (i.e., ACE_FREE_LIST_WITH_POOL or
        -:   75:   * ACE_PURE_FREE_LIST), a count of the number of nodes to
        -:   76:   * @a prealloc, a low and high water mark (@a lwm and @a hwm) that
        -:   77:   * indicate when to allocate more nodes, an increment value (@a inc)
        -:   78:   * that indicates how many nodes to allocate when the list must
        -:   79:   * grow.
        -:   80:   */
        -:   81:  ACE_Locked_Free_List (int mode = ACE_FREE_LIST_WITH_POOL,
        -:   82:                        size_t prealloc = ACE_DEFAULT_FREE_LIST_PREALLOC,
        -:   83:                        size_t lwm = ACE_DEFAULT_FREE_LIST_LWM,
        -:   84:                        size_t hwm = ACE_DEFAULT_FREE_LIST_HWM,
        -:   85:                        size_t inc = ACE_DEFAULT_FREE_LIST_INC);
        -:   86:
        -:   87:  /// Destructor - removes all the elements from the free_list.
        -:   88:  virtual ~ACE_Locked_Free_List (void);
        -:   89:
        -:   90:  /// Inserts an element onto the free list (if it isn't past the high
        -:   91:  /// water mark).
        -:   92:  virtual void add (T *element);
        -:   93:
        -:   94:  /// Takes a element off the freelist and returns it.  It creates
        -:   95:  /// <inc> new elements if the size is at or below the low water mark.
        -:   96:  virtual T *remove (void);
        -:   97:
        -:   98:  /// Returns the current size of the free list.
        -:   99:  virtual size_t size (void);
        -:  100:
        -:  101:  /// Resizes the free list to @a newsize.
        -:  102:  virtual void resize (size_t newsize);
        -:  103:
        -:  104:  ACE_ALLOC_HOOK_DECLARE;
        -:  105:
        -:  106:protected:
        -:  107:  /// Allocates @a n extra nodes for the freelist.
        -:  108:  virtual void alloc (size_t n);
        -:  109:
        -:  110:  /// Removes and frees @a n nodes from the freelist.
        -:  111:  virtual void dealloc (size_t n);
        -:  112:
        -:  113:  /// Free list operation mode, either ACE_FREE_LIST_WITH_POOL or
        -:  114:  /// ACE_PURE_FREE_LIST.
        -:  115:  int mode_;
        -:  116:
        -:  117:  /// Pointer to the first node in the freelist.
        -:  118:  T *free_list_;
        -:  119:
        -:  120:  /// Low water mark.
        -:  121:  size_t lwm_;
        -:  122:
        -:  123:  /// High water mark.
        -:  124:  size_t hwm_;
        -:  125:
        -:  126:  /// Increment value.
        -:  127:  size_t inc_;
        -:  128:
        -:  129:  /// Keeps track of the size of the list.
        -:  130:  size_t size_;
        -:  131:
        -:  132:  /// Synchronization variable for ACE_Timer_Queue.
        -:  133:  ACE_LOCK mutex_;
        -:  134:
        -:  135:private:
        -:  136:  // = Don't allow these operations for now.
        -:  137:  ACE_UNIMPLEMENTED_FUNC (ACE_Locked_Free_List (const ACE_Locked_Free_List<T, ACE_LOCK> &))
        -:  138:  ACE_UNIMPLEMENTED_FUNC (void operator= (const ACE_Locked_Free_List<T, ACE_LOCK> &))
        -:  139:};
        -:  140:
        -:  141:ACE_END_VERSIONED_NAMESPACE_DECL
        -:  142:
        -:  143:#if defined (ACE_TEMPLATES_REQUIRE_SOURCE)
        -:  144:#include "ace/Free_List.cpp"
        -:  145:#endif /* ACE_TEMPLATES_REQUIRE_SOURCE */
        -:  146:
        -:  147:#if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
        -:  148:#pragma implementation ("Free_List.cpp")
        -:  149:#endif /* ACE_TEMPLATES_REQUIRE_PRAGMA */
        -:  150:
        -:  151:#include /**/ "ace/post.h"
        -:  152:#endif /* ACE_FREE_LIST_H */
