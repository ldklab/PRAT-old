        -:    0:Source:../dds/DCPS/InstanceState.inl
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#include "ReceivedDataElementList.h"
        -:    9:#include "ace/OS_NS_sys_time.h"
        -:   10:
        -:   11:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   12:
        -:   13:ACE_INLINE
        -:   14:OpenDDS::DCPS::DataReaderImpl*
        -:   15:OpenDDS::DCPS::InstanceState::data_reader() const
        -:   16:{
        -:   17:  return reader_;
        -:   18:}
        -:   19:
        -:   20:ACE_INLINE
        -:   21:void
    #####:   22:OpenDDS::DCPS::InstanceState::accessed()
        -:   23:{
    #####:   24:  ACE_GUARD(ACE_Recursive_Thread_Mutex,
        -:   25:            guard, this->lock_);
        -:   26:  //
        -:   27:  // Manage the view state due to data access here.
        -:   28:  //
    #####:   29:  if (this->view_state_ & DDS::ANY_VIEW_STATE) {
    #####:   30:    this->view_state_ = DDS::NOT_NEW_VIEW_STATE ;
        -:   31:  }
        -:   32:}
        -:   33:
        -:   34:ACE_INLINE
        -:   35:bool
    #####:   36:OpenDDS::DCPS::InstanceState::most_recent_generation(ReceivedDataElement* item) const
        -:   37:{
    #####:   38:  return item->disposed_generation_count_ == disposed_generation_count_
    #####:   39:         && item->no_writers_generation_count_ == no_writers_generation_count_;
        -:   40:}
        -:   41:
        -:   42:ACE_INLINE
        -:   43:DDS::InstanceStateKind
    #####:   44:OpenDDS::DCPS::InstanceState::instance_state() const
        -:   45:{
    #####:   46:  return this->instance_state_ ;
        -:   47:}
        -:   48:
        -:   49:ACE_INLINE
        -:   50:DDS::ViewStateKind
    #####:   51:OpenDDS::DCPS::InstanceState::view_state() const
        -:   52:{
    #####:   53:  return this->view_state_ ;
        -:   54:}
        -:   55:
        -:   56:ACE_INLINE
    #####:   57:size_t OpenDDS::DCPS::InstanceState::disposed_generation_count() const
        -:   58:{
    #####:   59:  return disposed_generation_count_ ;
        -:   60:}
        -:   61:
        -:   62:ACE_INLINE
    #####:   63:size_t OpenDDS::DCPS::InstanceState::no_writers_generation_count() const
        -:   64:{
    #####:   65:  return no_writers_generation_count_ ;
        -:   66:}
        -:   67:
        -:   68:ACE_INLINE
        -:   69:void
    #####:   70:OpenDDS::DCPS::InstanceState::data_was_received(const PublicationId& writer_id)
        -:   71:{
    #####:   72:  ACE_GUARD(ACE_Recursive_Thread_Mutex,
        -:   73:            guard, this->lock_);
    #####:   74:  cancel_release();
        -:   75:
        -:   76:  //
        -:   77:  // Update the view state here, since only sample data received affects
        -:   78:  // this state value.  Then manage the data sample only transitions
        -:   79:  // here.  Let the lively() method manage the other transitions.
        -:   80:  //
    #####:   81:  writers_.insert(writer_id);
        -:   82:
    #####:   83:  switch (this->view_state_) {
    #####:   84:  case DDS::NEW_VIEW_STATE:
    #####:   85:    break ; // No action.
        -:   86:
    #####:   87:  case DDS::NOT_NEW_VIEW_STATE:
        -:   88:
    #####:   89:    if (this->instance_state_ & DDS::NOT_ALIVE_INSTANCE_STATE) {
    #####:   90:      this->view_state_ = DDS::NEW_VIEW_STATE ;
        -:   91:    }
        -:   92:
    #####:   93:    break ;
        -:   94:
    #####:   95:  default:
    #####:   96:    this->view_state_ = DDS::NEW_VIEW_STATE ;
    #####:   97:    break ;
        -:   98:  }
        -:   99:
    #####:  100:  switch (this->instance_state_) {
    #####:  101:  case DDS::NOT_ALIVE_DISPOSED_INSTANCE_STATE:
    #####:  102:    ++this->disposed_generation_count_;
    #####:  103:    break ;
        -:  104:
    #####:  105:  case DDS::NOT_ALIVE_NO_WRITERS_INSTANCE_STATE:
    #####:  106:    ++this->no_writers_generation_count_;
    #####:  107:    break ;
        -:  108:
    #####:  109:  default:
    #####:  110:    break ;
        -:  111:  }
        -:  112:
    #####:  113:  this->instance_state_ = DDS::ALIVE_INSTANCE_STATE ;
        -:  114:}
        -:  115:
        -:  116:ACE_INLINE
        -:  117:void
    #####:  118:OpenDDS::DCPS::InstanceState::lively(const PublicationId& writer_id)
        -:  119:{
    #####:  120:  ACE_GUARD(ACE_Recursive_Thread_Mutex,
        -:  121:            guard, this->lock_);
        -:  122:
        -:  123:  //
        -:  124:  // Manage transisitions in the instance state that do not require a
        -:  125:  // data sample, but merely the notion of liveliness.
        -:  126:  //
    #####:  127:  writers_.insert(writer_id);
        -:  128:
    #####:  129:  if (this->instance_state_ == DDS::NOT_ALIVE_NO_WRITERS_INSTANCE_STATE) {
    #####:  130:    cancel_release(); // cancel unregister
        -:  131:
    #####:  132:    this->no_writers_generation_count_++ ;
    #####:  133:    this->instance_state_ = DDS::ALIVE_INSTANCE_STATE ;
        -:  134:  }
        -:  135:}
        -:  136:
        -:  137:ACE_INLINE
        -:  138:bool
        -:  139:OpenDDS::DCPS::InstanceState::empty(bool value)
        -:  140:{
        -:  141:  //
        -:  142:  // Manage the instance state due to the DataReader becoming empty
        -:  143:  // here.
        -:  144:  //
        -:  145:  if ((this->empty_ = value) && this->release_pending_) {
        -:  146:    return release_if_empty();
        -:  147:  } else {
        -:  148:    return false;
        -:  149:  }
        -:  150:}
        -:  151:
        -:  152:
        -:  153:ACE_INLINE
        -:  154:bool
        -:  155:OpenDDS::DCPS::InstanceState::is_last (const PublicationId& pub)
        -:  156:{
        -:  157:  ACE_GUARD_RETURN(ACE_Recursive_Thread_Mutex,
        -:  158:                   guard, this->lock_, false);
        -:  159:
        -:  160:  return (this->writers_.size () == 1) && *(this->writers_.begin ()) == pub;
        -:  161:}
        -:  162:
        -:  163:ACE_INLINE
        -:  164:bool
        -:  165:OpenDDS::DCPS::InstanceState::no_writer () const
        -:  166:{
        -:  167:  ACE_GUARD_RETURN(ACE_Recursive_Thread_Mutex,
        -:  168:                   guard, this->lock_, true);
        -:  169:
        -:  170:  return this->writers_.size () == 0;
        -:  171:}
        -:  172:
        -:  173:OPENDDS_END_VERSIONED_NAMESPACE_DECL
