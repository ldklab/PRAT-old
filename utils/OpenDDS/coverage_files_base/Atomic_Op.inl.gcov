        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/Atomic_Op.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2:// $Id$
        -:    3:
        -:    4:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:    5:# include "ace/os_include/os_intrin.h"
        -:    6:# pragma intrinsic (_InterlockedExchange, _InterlockedExchangeAdd, _InterlockedIncrement, _InterlockedDecrement)
        -:    7:#endif /* ACE_HAS_INTRINSIC_INTERLOCKED */
        -:    8:
        -:    9:#if defined (ACE_HAS_VXATOMICLIB)
        -:   10:# include <vxAtomicLib.h>
        -:   11:#endif
        -:   12:
        -:   13:#if defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:   14:# include <atomic.h>
        -:   15:#endif
        -:   16:
        -:   17:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   18:
        -:   19:#if defined (ACE_HAS_BUILTIN_ATOMIC_OP)
        -:   20:
        -:   21:ACE_INLINE
        -:   22:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (void)
        -:   23:  : value_ (0)
        -:   24:{
        -:   25:}
        -:   26:
        -:   27:ACE_INLINE
        -:   28:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c)
        -:   29:  : value_ (c)
        -:   30:{
        -:   31:}
        -:   32:
        -:   33:ACE_INLINE
        -:   34:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (
        -:   35:  const ACE_Atomic_Op<ACE_Thread_Mutex, long> &rhs)
        -:   36:  : value_ (rhs.value_)
        -:   37:{
        -:   38:}
        -:   39:
        -:   40:ACE_INLINE long
        -:   41:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator++ (void)
        -:   42:{
        -:   43:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:   44:  return ::_InterlockedIncrement (const_cast<long *> (&this->value_));
        -:   45:#elif defined (WIN32)
        -:   46:  return ::InterlockedIncrement (const_cast<long *> (&this->value_));
        -:   47:#elif defined (ACE_HAS_VXATOMICLIB)
        -:   48:  return ::vxAtomicInc (reinterpret_cast <atomic_t*>(const_cast<long *> (&this->value_))) + 1;
        -:   49:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:   50:  return ::atomic_inc_ulong_nv (reinterpret_cast<volatile unsigned long*>(&this->value_));
        -:   51:#else /* WIN32 */
        -:   52:  return (*increment_fn_) (&this->value_);
        -:   53:#endif /* WIN32 */
        -:   54:}
        -:   55:
        -:   56:ACE_INLINE long
        -:   57:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator++ (int)
        -:   58:{
        -:   59:  return ++*this - 1;
        -:   60:}
        -:   61:
        -:   62:ACE_INLINE long
        -:   63:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator-- (void)
        -:   64:{
        -:   65:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:   66:  return ::_InterlockedDecrement (const_cast<long *> (&this->value_));
        -:   67:#elif defined (WIN32)
        -:   68:  return ::InterlockedDecrement (const_cast<long *> (&this->value_));
        -:   69:#elif defined (ACE_HAS_VXATOMICLIB)
        -:   70:  return ::vxAtomicDec (reinterpret_cast <atomic_t*>(const_cast<long *> (&this->value_))) - 1;
        -:   71:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:   72:  return ::atomic_dec_ulong_nv (reinterpret_cast<volatile unsigned long*>(&this->value_));
        -:   73:#else /* WIN32 */
        -:   74:  return (*decrement_fn_) (&this->value_);
        -:   75:#endif /* WIN32 */
        -:   76:}
        -:   77:
        -:   78:ACE_INLINE long
        -:   79:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator-- (int)
        -:   80:{
        -:   81:  return --*this + 1;
        -:   82:}
        -:   83:
        -:   84:ACE_INLINE long
        -:   85:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator+= (long rhs)
        -:   86:{
        -:   87:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:   88:  return ::_InterlockedExchangeAdd (const_cast<long *> (&this->value_),
        -:   89:                                    rhs) + rhs;
        -:   90:#elif defined (WIN32) && defined (ACE_HAS_INTERLOCKED_EXCHANGEADD)
        -:   91:  return ::InterlockedExchangeAdd (const_cast<long *> (&this->value_),
        -:   92:                                   rhs) + rhs;
        -:   93:#elif defined (ACE_HAS_VXATOMICLIB)
        -:   94:  return ::vxAtomicAdd (reinterpret_cast <atomic_t*>(const_cast<long *> (&this->value_)), rhs) + rhs;
        -:   95:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:   96:  return ::atomic_add_long_nv (reinterpret_cast<volatile unsigned long*>(&this->value_), rhs);
        -:   97:#else /* WIN32 && ACE_HAS_INTERLOCKED_EXCHANGEADD */
        -:   98:  return (*exchange_add_fn_) (&this->value_, rhs) + rhs;
        -:   99:#endif /* WIN32 && ACE_HAS_INTERLOCKED_EXCHANGEADD */
        -:  100:}
        -:  101:
        -:  102:ACE_INLINE long
        -:  103:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator-= (long rhs)
        -:  104:{
        -:  105:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  106:  return ::_InterlockedExchangeAdd (const_cast<long *> (&this->value_),
        -:  107:                                    -rhs) - rhs;
        -:  108:#elif defined (WIN32) && defined (ACE_HAS_INTERLOCKED_EXCHANGEADD)
        -:  109:  return ::InterlockedExchangeAdd (const_cast<long *> (&this->value_),
        -:  110:                                   -rhs) - rhs;
        -:  111:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  112:  return ::vxAtomicSub (reinterpret_cast <atomic_t*>(const_cast<long *> (&this->value_)), rhs) - rhs;
        -:  113:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  114:  return ::atomic_add_long_nv (reinterpret_cast<volatile unsigned long*>(&this->value_), -rhs);
        -:  115:#else /* WIN32 && ACE_HAS_INTERLOCKED_EXCHANGEADD */
        -:  116:  return (*exchange_add_fn_) (&this->value_, -rhs) - rhs;
        -:  117:#endif /* WIN32 && ACE_HAS_INTERLOCKED_EXCHANGEADD */
        -:  118:}
        -:  119:
        -:  120:ACE_INLINE bool
        -:  121:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator== (long rhs) const
        -:  122:{
        -:  123:  return (this->value_ == rhs);
        -:  124:}
        -:  125:
        -:  126:ACE_INLINE bool
        -:  127:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator!= (long rhs) const
        -:  128:{
        -:  129:  return (this->value_ != rhs);
        -:  130:}
        -:  131:
        -:  132:ACE_INLINE bool
        -:  133:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator>= (long rhs) const
        -:  134:{
        -:  135:  return (this->value_ >= rhs);
        -:  136:}
        -:  137:
        -:  138:ACE_INLINE bool
        -:  139:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator> (long rhs) const
        -:  140:{
        -:  141:  return (this->value_ > rhs);
        -:  142:}
        -:  143:
        -:  144:ACE_INLINE bool
        -:  145:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator<= (long rhs) const
        -:  146:{
        -:  147:  return (this->value_ <= rhs);
        -:  148:}
        -:  149:
        -:  150:ACE_INLINE bool
        -:  151:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator< (long rhs) const
        -:  152:{
        -:  153:  return (this->value_ < rhs);
        -:  154:}
        -:  155:
        -:  156:ACE_INLINE ACE_Atomic_Op<ACE_Thread_Mutex, long> &
        -:  157:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator= (long rhs)
        -:  158:{
        -:  159:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  160:  ::_InterlockedExchange (const_cast<long *> (&this->value_), rhs);
        -:  161:#elif defined (WIN32)
        -:  162:  ::InterlockedExchange (const_cast<long *> (&this->value_), rhs);
        -:  163:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  164:  ::vxAtomicSet (reinterpret_cast <atomic_t*>(const_cast<long *> (&this->value_)), rhs);
        -:  165:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  166:  ::atomic_swap_ulong (reinterpret_cast<volatile unsigned long*>(&this->value_), rhs);
        -:  167:#else /* WIN32 */
        -:  168:  (*exchange_fn_) (&this->value_, rhs);
        -:  169:#endif /* WIN32 */
        -:  170:  return *this;
        -:  171:}
        -:  172:
        -:  173:ACE_INLINE ACE_Atomic_Op<ACE_Thread_Mutex, long> &
        -:  174:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator= (
        -:  175:   const ACE_Atomic_Op<ACE_Thread_Mutex, long> &rhs)
        -:  176:{
        -:  177:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  178:  ::_InterlockedExchange (const_cast<long *> (&this->value_), rhs.value_);
        -:  179:#elif defined (WIN32)
        -:  180:  ::InterlockedExchange (const_cast<long *> (&this->value_), rhs.value_);
        -:  181:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  182:  ::vxAtomicSet (reinterpret_cast <atomic_t*>(const_cast<long *> (&this->value_)), rhs.value_);
        -:  183:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  184:  ::atomic_swap_ulong (reinterpret_cast<volatile unsigned long*>(&this->value_), rhs.value_);
        -:  185:#else /* WIN32 */
        -:  186:  (*exchange_fn_) (&this->value_, rhs.value_);
        -:  187:#endif /* WIN32 */
        -:  188:  return *this;
        -:  189:}
        -:  190:
        -:  191:ACE_INLINE long
        -:  192:ACE_Atomic_Op<ACE_Thread_Mutex, long>::exchange (long newval)
        -:  193:{
        -:  194:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  195:  return ::_InterlockedExchange (const_cast<long *> (&this->value_), newval);
        -:  196:#elif defined (WIN32)
        -:  197:  return ::InterlockedExchange (const_cast<long *> (&this->value_), newval);
        -:  198:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  199:  return ::vxAtomicSet (reinterpret_cast <atomic_t*>(const_cast<long *> (&this->value_)), newval);
        -:  200:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  201:  return ::atomic_swap_ulong (reinterpret_cast<volatile unsigned long*>(&this->value_), newval);
        -:  202:#else /* WIN32 */
        -:  203:  return (*exchange_fn_) (&this->value_, newval);
        -:  204:#endif /* WIN32 */
        -:  205:}
        -:  206:
        -:  207:ACE_INLINE long
        -:  208:ACE_Atomic_Op<ACE_Thread_Mutex, long>::value (void) const
        -:  209:{
        -:  210:  return this->value_;
        -:  211:}
        -:  212:
        -:  213:ACE_INLINE volatile long &
        -:  214:ACE_Atomic_Op<ACE_Thread_Mutex, long>::value_i (void)
        -:  215:{
        -:  216:  return this->value_;
        -:  217:}
        -:  218:
        -:  219:
        -:  220:ACE_INLINE
        -:  221:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (void)
        -:  222:  : value_ (0)
        -:  223:{
        -:  224:}
        -:  225:
        -:  226:ACE_INLINE
        -:  227:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c)
        -:  228:  : value_ (c)
        -:  229:{
        -:  230:}
        -:  231:
        -:  232:ACE_INLINE
        -:  233:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (
        -:  234:  const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> &rhs)
        -:  235:  : value_ (rhs.value_)
        -:  236:{
        -:  237:}
        -:  238:
        -:  239:ACE_INLINE unsigned long
        -:  240:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator++ (void)
        -:  241:{
        -:  242:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  243:  return static_cast<unsigned long> (::_InterlockedIncrement (const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_))));
        -:  244:#elif defined (WIN32)
        -:  245:  return static_cast<unsigned long> (::InterlockedIncrement (const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_))));
        -:  246:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  247:  return static_cast<unsigned long> (::vxAtomicInc (reinterpret_cast <atomic_t*>(const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_))))) + 1;
        -:  248:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  249:  return ::atomic_inc_ulong_nv (&this->value_);
        -:  250:#else /* WIN32 */
        -:  251:  return static_cast<unsigned long> ((*increment_fn_) (reinterpret_cast<volatile long *> (&this->value_)));
        -:  252:#endif /* WIN32 */
        -:  253:}
        -:  254:
        -:  255:ACE_INLINE unsigned long
        -:  256:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator++ (int)
        -:  257:{
        -:  258:  return ++*this - 1;
        -:  259:}
        -:  260:
        -:  261:ACE_INLINE unsigned long
        -:  262:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator-- (void)
        -:  263:{
        -:  264:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  265:  return static_cast<unsigned long> (::_InterlockedDecrement (const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_))));
        -:  266:#elif defined (WIN32)
        -:  267:  return static_cast<unsigned long> (::InterlockedDecrement (const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_))));
        -:  268:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  269:  return static_cast<unsigned long> (::vxAtomicDec (reinterpret_cast <atomic_t*>(const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_))))) - 1;
        -:  270:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  271:  return ::atomic_dec_ulong_nv (&this->value_);
        -:  272:#else /* WIN32 */
        -:  273:  return static_cast<unsigned long> ((*decrement_fn_) (reinterpret_cast<volatile long *> (&this->value_)));
        -:  274:#endif /* WIN32 */
        -:  275:}
        -:  276:
        -:  277:ACE_INLINE unsigned long
        -:  278:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator-- (int)
        -:  279:{
        -:  280:  return --*this + 1;
        -:  281:}
        -:  282:
        -:  283:ACE_INLINE unsigned long
        -:  284:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator+= (unsigned long rhs)
        -:  285:{
        -:  286:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  287:  return static_cast<unsigned long> (::_InterlockedExchangeAdd (const_cast<long *> (reinterpret_cast <volatile long *>(&this->value_)),
        -:  288:                                   rhs)) + rhs;
        -:  289:#elif defined (WIN32) && defined (ACE_HAS_INTERLOCKED_EXCHANGEADD)
        -:  290:  return static_cast<unsigned long> (::InterlockedExchangeAdd (const_cast<long *> (reinterpret_cast <volatile long *>(&this->value_)),
        -:  291:                                   rhs)) + rhs;
        -:  292:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  293:  return static_cast<unsigned long> (::vxAtomicAdd (reinterpret_cast <atomic_t*>(const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_))), rhs)) + rhs;
        -:  294:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  295:  return ::atomic_add_long_nv (&this->value_, rhs);
        -:  296:#else /* WIN32 && ACE_HAS_INTERLOCKED_EXCHANGEADD */
        -:  297:  return static_cast<unsigned long> ((*exchange_add_fn_) (reinterpret_cast<volatile long *> (&this->value_), rhs)) + rhs;
        -:  298:#endif /* WIN32 && ACE_HAS_INTERLOCKED_EXCHANGEADD */
        -:  299:}
        -:  300:
        -:  301:ACE_INLINE unsigned long
        -:  302:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator-= (unsigned long rhs)
        -:  303:{
        -:  304:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  305:  return static_cast<unsigned long> (::_InterlockedExchangeAdd (const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_)),
        -:  306:                                   -static_cast<long>(rhs))) - rhs;
        -:  307:#elif defined (WIN32) && defined (ACE_HAS_INTERLOCKED_EXCHANGEADD)
        -:  308:  return static_cast<unsigned long> (::InterlockedExchangeAdd (const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_)),
        -:  309:                                   -static_cast<long>(rhs))) - rhs;
        -:  310:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  311:  return static_cast<unsigned long> (::vxAtomicSub (reinterpret_cast <atomic_t*>(const_cast<long *> (reinterpret_cast<volatile long *>(&this->value_))), rhs)) - rhs;
        -:  312:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  313:  return ::atomic_add_long_nv (&this->value_, -rhs);
        -:  314:#else /* WIN32 && ACE_HAS_INTERLOCKED_EXCHANGEADD */
        -:  315:  long l_rhs = static_cast<long> (rhs);
        -:  316:  return static_cast<unsigned long> ((*exchange_add_fn_) (reinterpret_cast<volatile long *> (&this->value_), -l_rhs)) - rhs;
        -:  317:#endif /* WIN32 && ACE_HAS_INTERLOCKED_EXCHANGEADD */
        -:  318:}
        -:  319:
        -:  320:ACE_INLINE bool
        -:  321:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator== (unsigned long rhs) const
        -:  322:{
        -:  323:  return (this->value_ == rhs);
        -:  324:}
        -:  325:
        -:  326:ACE_INLINE bool
        -:  327:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator!= (unsigned long rhs) const
        -:  328:{
        -:  329:  return (this->value_ != rhs);
        -:  330:}
        -:  331:
        -:  332:ACE_INLINE bool
        -:  333:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator>= (unsigned long rhs) const
        -:  334:{
        -:  335:  return (this->value_ >= rhs);
        -:  336:}
        -:  337:
        -:  338:ACE_INLINE bool
        -:  339:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator> (unsigned long rhs) const
        -:  340:{
        -:  341:  return (this->value_ > rhs);
        -:  342:}
        -:  343:
        -:  344:ACE_INLINE bool
        -:  345:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator<= (unsigned long rhs) const
        -:  346:{
        -:  347:  return (this->value_ <= rhs);
        -:  348:}
        -:  349:
        -:  350:ACE_INLINE bool
        -:  351:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator< (unsigned long rhs) const
        -:  352:{
        -:  353:  return (this->value_ < rhs);
        -:  354:}
        -:  355:
        -:  356:ACE_INLINE ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> &
        -:  357:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator= (unsigned long rhs)
        -:  358:{
        -:  359:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  360:  ::_InterlockedExchange (const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_)), rhs);
        -:  361:#elif defined (WIN32)
        -:  362:  ::InterlockedExchange (const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_)), rhs);
        -:  363:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  364:  ::vxAtomicSet (reinterpret_cast <atomic_t*>(const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_))), rhs);
        -:  365:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  366:  ::atomic_swap_ulong (&this->value_, rhs);
        -:  367:#else /* WIN32 */
        -:  368:  (*exchange_fn_) (reinterpret_cast<volatile long *> (&this->value_), rhs);
        -:  369:#endif /* WIN32 */
        -:  370:  return *this;
        -:  371:}
        -:  372:
        -:  373:ACE_INLINE ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> &
        -:  374:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator= (
        -:  375:   const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> &rhs)
        -:  376:{
        -:  377:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  378:  ::_InterlockedExchange (const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_)), rhs.value_);
        -:  379:#elif defined (WIN32)
        -:  380:  ::InterlockedExchange (const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_)), rhs.value_);
        -:  381:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  382:  ::vxAtomicSet (reinterpret_cast <atomic_t*>(const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_))), rhs.value_);
        -:  383:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  384:  ::atomic_swap_ulong (&this->value_, rhs.value_);
        -:  385:#else /* WIN32 */
        -:  386:  (*exchange_fn_) (reinterpret_cast<volatile long *> (&this->value_), rhs.value_);
        -:  387:#endif /* WIN32 */
        -:  388:  return *this;
        -:  389:}
        -:  390:
        -:  391:ACE_INLINE unsigned long
        -:  392:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::exchange (unsigned long newval)
        -:  393:{
        -:  394:#if defined (ACE_HAS_INTRINSIC_INTERLOCKED)
        -:  395:  return ::_InterlockedExchange (const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_)), newval);
        -:  396:#elif defined (WIN32)
        -:  397:  return ::InterlockedExchange (const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_)), newval);
        -:  398:#elif defined (ACE_HAS_VXATOMICLIB)
        -:  399:  return ::vxAtomicSet (reinterpret_cast <atomic_t*>(const_cast<long *> (reinterpret_cast<volatile long*> (&this->value_))), newval);
        -:  400:#elif defined (ACE_HAS_SOLARIS_ATOMIC_LIB)
        -:  401:  return ::atomic_swap_ulong (&this->value_, newval);
        -:  402:#else /* WIN32 */
        -:  403:  return (*exchange_fn_) (reinterpret_cast<volatile long *> (&this->value_), newval);
        -:  404:#endif /* WIN32 */
        -:  405:}
        -:  406:
        -:  407:ACE_INLINE unsigned long
        -:  408:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::value (void) const
        -:  409:{
        -:  410:  return this->value_;
        -:  411:}
        -:  412:
        -:  413:ACE_INLINE volatile unsigned long &
        -:  414:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::value_i (void)
        -:  415:{
        -:  416:  return this->value_;
        -:  417:}
        -:  418:
        -:  419:#endif /* ACE_HAS_BUILTIN_ATOMIC_OP */
        -:  420:
        -:  421:#if defined (ACE_HAS_GCC_ATOMIC_BUILTINS) && (ACE_HAS_GCC_ATOMIC_BUILTINS == 1)
        -:  422:
        -:  423:ACE_INLINE
        -:  424:ACE_Atomic_Op<ACE_Thread_Mutex, int>::ACE_Atomic_Op (void) :
        -:  425:  ACE_Atomic_Op_GCC<int> ()
        -:  426:{
        -:  427:}
        -:  428:
        -:  429:ACE_INLINE
        -:  430:ACE_Atomic_Op<ACE_Thread_Mutex, int>::ACE_Atomic_Op (int c) :
        -:  431:  ACE_Atomic_Op_GCC<int>(c)
        -:  432:{
        -:  433:}
        -:  434:
        -:  435:ACE_INLINE
        -:  436:ACE_Atomic_Op<ACE_Thread_Mutex, int>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, int> &c) :
        -:  437:  ACE_Atomic_Op_GCC<int>(c)
        -:  438:{
        -:  439:}
        -:  440:
        -:  441:ACE_INLINE
        -:  442:ACE_Atomic_Op<ACE_Thread_Mutex, int>&
        -:  443:ACE_Atomic_Op<ACE_Thread_Mutex, int>::operator= (int rhs)
        -:  444:{
        -:  445:  ACE_Atomic_Op_GCC<int>::operator= (rhs);
        -:  446:  return *this;
        -:  447:}
        -:  448:
        -:  449:
        -:  450:ACE_INLINE
        -:  451:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>::ACE_Atomic_Op (void) :
        -:  452:  ACE_Atomic_Op_GCC<unsigned int>()
        -:  453:{
        -:  454:}
        -:  455:
        -:  456:ACE_INLINE
        -:  457:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int> &c) :
        -:  458:  ACE_Atomic_Op_GCC<unsigned int>(c)
        -:  459:{
        -:  460:}
        -:  461:
        -:  462:ACE_INLINE
        -:  463:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>::ACE_Atomic_Op (unsigned int c) :
        -:  464:  ACE_Atomic_Op_GCC<unsigned int>(c)
        -:  465:{
        -:  466:}
        -:  467:
        -:  468:ACE_INLINE
        -:  469:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>&
        -:  470:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>::operator= (unsigned int rhs)
        -:  471:{
        -:  472:  ACE_Atomic_Op_GCC<unsigned int>::operator= (rhs);
        -:  473:  return *this;
        -:  474:}
        -:  475:
        -:  476:ACE_INLINE
        -:  477:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (void) :
        -:  478:  ACE_Atomic_Op_GCC<long>()
        -:  479:{
        -:  480:}
        -:  481:
        -:  482:ACE_INLINE
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexlEC2El:
    #####:  483:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
    #####:  484:  ACE_Atomic_Op_GCC<long>(c)
        -:  485:{
    #####:  486:}
------------------
        -:  487:
        -:  488:ACE_INLINE
        -:  489:ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, long> &c) :
        -:  490:  ACE_Atomic_Op_GCC<long>(c)
        -:  491:{
        -:  492:}
        -:  493:
        -:  494:ACE_INLINE
        -:  495:ACE_Atomic_Op<ACE_Thread_Mutex, long>&
        -:  496:ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator= (long rhs)
        -:  497:{
        -:  498:  ACE_Atomic_Op_GCC<long>::operator= (rhs);
        -:  499:  return *this;
        -:  500:}
        -:  501:
        -:  502:ACE_INLINE
        -:  503:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (void) :
        -:  504:  ACE_Atomic_Op_GCC<unsigned long> ()
        -:  505:{
        -:  506:}
        -:  507:
        -:  508:ACE_INLINE
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
_ZN13ACE_Atomic_OpI16ACE_Thread_MutexmEC2Em:
    #####:  509:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
    #####:  510:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  511:{
    #####:  512:}
------------------
        -:  513:
        -:  514:ACE_INLINE
        -:  515:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> &c) :
        -:  516:  ACE_Atomic_Op_GCC<unsigned long>(c)
        -:  517:{
        -:  518:}
        -:  519:
        -:  520:ACE_INLINE
        -:  521:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>&
        -:  522:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator= (unsigned long rhs)
        -:  523:{
        -:  524:  ACE_Atomic_Op_GCC<unsigned long>::operator= (rhs);
        -:  525:  return *this;
        -:  526:}
        -:  527:
        -:  528:// The long long intrinsics are not available on PPC
        -:  529:#if !defined (__powerpc__)
        -:  530:ACE_INLINE
        -:  531:ACE_Atomic_Op<ACE_Thread_Mutex, long long>::ACE_Atomic_Op (void) :
        -:  532:  ACE_Atomic_Op_GCC<long long>()
        -:  533:{
        -:  534:}
        -:  535:
        -:  536:ACE_INLINE
        -:  537:ACE_Atomic_Op<ACE_Thread_Mutex, long long>::ACE_Atomic_Op (long long c) :
        -:  538:  ACE_Atomic_Op_GCC<long long>(c)
        -:  539:{
        -:  540:}
        -:  541:
        -:  542:ACE_INLINE
        -:  543:ACE_Atomic_Op<ACE_Thread_Mutex, long long>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, long long> &c) :
        -:  544:  ACE_Atomic_Op_GCC<long long>(c)
        -:  545:{
        -:  546:}
        -:  547:
        -:  548:ACE_INLINE
        -:  549:ACE_Atomic_Op<ACE_Thread_Mutex, long long>&
        -:  550:ACE_Atomic_Op<ACE_Thread_Mutex, long long>::operator= (long long rhs)
        -:  551:{
        -:  552:  ACE_Atomic_Op_GCC<long long>::operator= (rhs);
        -:  553:  return *this;
        -:  554:}
        -:  555:
        -:  556:ACE_INLINE
        -:  557:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long long>::ACE_Atomic_Op (void) :
        -:  558:  ACE_Atomic_Op_GCC<unsigned long  long> ()
        -:  559:{
        -:  560:}
        -:  561:
        -:  562:ACE_INLINE
        -:  563:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long  long>::ACE_Atomic_Op (unsigned long long c) :
        -:  564:  ACE_Atomic_Op_GCC<unsigned long long>(c)
        -:  565:{
        -:  566:}
        -:  567:
        -:  568:ACE_INLINE
        -:  569:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long long>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long long> &c) :
        -:  570:  ACE_Atomic_Op_GCC<unsigned long long>(c)
        -:  571:{
        -:  572:}
        -:  573:
        -:  574:ACE_INLINE
        -:  575:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long long>&
        -:  576:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long long>::operator= (unsigned long long rhs)
        -:  577:{
        -:  578:  ACE_Atomic_Op_GCC<unsigned long long>::operator= (rhs);
        -:  579:  return *this;
        -:  580:}
        -:  581:#endif /* !__powerpc__ */
        -:  582:
        -:  583:#if !defined (ACE_LACKS_GCC_ATOMIC_BUILTINS_2)
        -:  584:ACE_INLINE
        -:  585:ACE_Atomic_Op<ACE_Thread_Mutex, short>::ACE_Atomic_Op (void) :
        -:  586:  ACE_Atomic_Op_GCC<short>()
        -:  587:{
        -:  588:}
        -:  589:
        -:  590:ACE_INLINE
        -:  591:ACE_Atomic_Op<ACE_Thread_Mutex, short>::ACE_Atomic_Op (short c) :
        -:  592:  ACE_Atomic_Op_GCC<short>(c)
        -:  593:{
        -:  594:}
        -:  595:
        -:  596:ACE_INLINE
        -:  597:ACE_Atomic_Op<ACE_Thread_Mutex, short>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, short> &c) :
        -:  598:  ACE_Atomic_Op_GCC<short>(c)
        -:  599:{
        -:  600:}
        -:  601:
        -:  602:ACE_INLINE
        -:  603:ACE_Atomic_Op<ACE_Thread_Mutex, short>&
        -:  604:ACE_Atomic_Op<ACE_Thread_Mutex, short>::operator= (short rhs)
        -:  605:{
        -:  606:  ACE_Atomic_Op_GCC<short>::operator= (rhs);
        -:  607:  return *this;
        -:  608:}
        -:  609:
        -:  610:ACE_INLINE
        -:  611:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>::ACE_Atomic_Op (void) :
        -:  612:  ACE_Atomic_Op_GCC<unsigned short> ()
        -:  613:{
        -:  614:}
        -:  615:
        -:  616:ACE_INLINE
        -:  617:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>::ACE_Atomic_Op (unsigned short c) :
        -:  618:  ACE_Atomic_Op_GCC<unsigned short>(c)
        -:  619:{
        -:  620:}
        -:  621:
        -:  622:ACE_INLINE
        -:  623:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short> &c) :
        -:  624:  ACE_Atomic_Op_GCC<unsigned short>(c)
        -:  625:{
        -:  626:}
        -:  627:
        -:  628:ACE_INLINE
        -:  629:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>&
        -:  630:ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>::operator= (unsigned short rhs)
        -:  631:{
        -:  632:  ACE_Atomic_Op_GCC<unsigned short>::operator= (rhs);
        -:  633:  return *this;
        -:  634:}
        -:  635:#endif
        -:  636:
        -:  637:#if !defined (ACE_LACKS_GCC_ATOMIC_BUILTINS_1)
        -:  638:ACE_INLINE
        -:  639:ACE_Atomic_Op<ACE_Thread_Mutex, bool>::ACE_Atomic_Op (void) :
        -:  640:  ACE_Atomic_Op_GCC<bool> ()
        -:  641:{
        -:  642:}
        -:  643:
        -:  644:ACE_INLINE
        -:  645:ACE_Atomic_Op<ACE_Thread_Mutex, bool>::ACE_Atomic_Op (bool c) :
        -:  646:  ACE_Atomic_Op_GCC<bool>(c)
        -:  647:{
        -:  648:}
        -:  649:
        -:  650:ACE_INLINE
        -:  651:ACE_Atomic_Op<ACE_Thread_Mutex, bool>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, bool> &c) :
        -:  652:  ACE_Atomic_Op_GCC<bool>(c)
        -:  653:{
        -:  654:}
        -:  655:
        -:  656:ACE_INLINE
        -:  657:ACE_Atomic_Op<ACE_Thread_Mutex, bool>&
        -:  658:ACE_Atomic_Op<ACE_Thread_Mutex, bool>::operator= (bool rhs)
        -:  659:{
        -:  660:  ACE_Atomic_Op_GCC<bool>::operator= (rhs);
        -:  661:  return *this;
        -:  662:}
        -:  663:#endif
        -:  664:
        -:  665:#endif /* ACE_HAS_GCC_ATOMIC_BUILTINS==1 */
        -:  666:
        -:  667:ACE_END_VERSIONED_NAMESPACE_DECL
        -:  668:
