        -:    0:Source:DdsDcpsCoreTypeSupportImpl.h
        -:    0:Programs:72
        -:    1:/* -*- C++ -*- */
        -:    2:/* Generated by /home/ryan/git/OpenDDS-debloat/bin/opendds_idl version 3.13 (ACE version 6.2a_p15) running on input file DdsDcpsCore.idl */
        -:    3:#ifndef OPENDDS_IDL_GENERATED_DDSDCPSCORETYPESUPPORTIMPL_H_JJZ15W
        -:    4:#define OPENDDS_IDL_GENERATED_DDSDCPSCORETYPESUPPORTIMPL_H_JJZ15W
        -:    5:#include "DdsDcpsCoreC.h"
        -:    6:#include "dds/DCPS/Definitions.h"
        -:    7:#include "dds/DdsDcpsC.h"
        -:    8:#include "DdsDcpsCoreTypeSupportC.h"
        -:    9:#include "dds/DCPS/Serializer.h"
        -:   10:#include "dds/DCPS/TypeSupportImpl.h"
        -:   11:#include "tao/LongSeqC.h"
        -:   12:#include "tao/StringSeqC.h"
        -:   13:#include "dds/DCPS/dcps_export.h"
        -:   14:
        -:   15:
        -:   16:/* Begin MODULE: CORBA */
        -:   17:
        -:   18:
        -:   19:/* End MODULE: CORBA */
        -:   20:
        -:   21:
        -:   22:/* Begin MODULE: CORBA */
        -:   23:
        -:   24:
        -:   25:
        -:   26:/* Begin TYPEDEF: StringSeq */
        -:   27:
        -:   28:
        -:   29:/* End TYPEDEF: StringSeq */
        -:   30:
        -:   31:/* End MODULE: CORBA */
        -:   32:
        -:   33:
        -:   34:/* Begin MODULE: CORBA */
        -:   35:
        -:   36:
        -:   37:
        -:   38:/* Begin TYPEDEF: LongSeq */
        -:   39:
        -:   40:
        -:   41:/* End TYPEDEF: LongSeq */
        -:   42:
        -:   43:/* End MODULE: CORBA */
        -:   44:
        -:   45:
        -:   46:/* Begin MODULE: DDS */
        -:   47:
        -:   48:
        -:   49:
        -:   50:/* Begin TYPEDEF: StringSeq */
        -:   51:
        -:   52:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   53:namespace OpenDDS { namespace DCPS {
        -:   54:
        -:   55:OpenDDS_Dcps_Export
        -:   56:void gen_find_size(const DDS::StringSeq& seq, size_t& size, size_t& padding);
        -:   57:
        -:   58:OpenDDS_Dcps_Export
        -:   59:bool operator<<(Serializer& strm, const DDS::StringSeq& seq);
        -:   60:
        -:   61:OpenDDS_Dcps_Export
        -:   62:bool operator>>(Serializer& strm, DDS::StringSeq& seq);
        -:   63:
        -:   64:}  }
        -:   65:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:   66:
        -:   67:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:   68:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   69:namespace OpenDDS { namespace DCPS {
        -:   70:
        -:   71:OpenDDS_Dcps_Export
        -:   72:bool gen_skip_over(Serializer& ser, DDS::StringSeq*);
        -:   73:
        -:   74:}  }
        -:   75:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:   76:
        -:   77:#endif
        -:   78:
        -:   79:/* End TYPEDEF: StringSeq */
        -:   80:
        -:   81:
        -:   82:/* Begin TYPEDEF: InstanceHandle_t */
        -:   83:
        -:   84:
        -:   85:/* End TYPEDEF: InstanceHandle_t */
        -:   86:
        -:   87:
        -:   88:/* Begin TYPEDEF: BuiltinTopicKeyValue */
        -:   89:
        -:   90:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   91:namespace OpenDDS { namespace DCPS {
        -:   92:
        -:   93:OpenDDS_Dcps_Export
        -:   94:void gen_find_size(const DDS::BuiltinTopicKeyValue_forany& arr, size_t& size, size_t& padding);
        -:   95:
        -:   96:OpenDDS_Dcps_Export
        -:   97:bool operator<<(Serializer& strm, const DDS::BuiltinTopicKeyValue_forany& arr);
        -:   98:
        -:   99:OpenDDS_Dcps_Export
        -:  100:bool operator>>(Serializer& strm, DDS::BuiltinTopicKeyValue_forany& arr);
        -:  101:
        -:  102:}  }
        -:  103:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  104:
        -:  105:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  106:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  107:namespace OpenDDS { namespace DCPS {
        -:  108:
        -:  109:OpenDDS_Dcps_Export
        -:  110:bool gen_skip_over(Serializer& ser, DDS::BuiltinTopicKeyValue_forany*);
        -:  111:
        -:  112:}  }
        -:  113:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  114:
        -:  115:#endif
        -:  116:
        -:  117:/* End TYPEDEF: BuiltinTopicKeyValue */
        -:  118:
        -:  119:
        -:  120:/* Begin TYPEDEF: InstanceHandleSeq */
        -:  121:
        -:  122:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  123:namespace OpenDDS { namespace DCPS {
        -:  124:
        -:  125:OpenDDS_Dcps_Export
        -:  126:void gen_find_size(const DDS::InstanceHandleSeq& seq, size_t& size, size_t& padding);
        -:  127:
        -:  128:OpenDDS_Dcps_Export
        -:  129:bool operator<<(Serializer& strm, const DDS::InstanceHandleSeq& seq);
        -:  130:
        -:  131:OpenDDS_Dcps_Export
        -:  132:bool operator>>(Serializer& strm, DDS::InstanceHandleSeq& seq);
        -:  133:
        -:  134:}  }
        -:  135:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  136:
        -:  137:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  138:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  139:namespace OpenDDS { namespace DCPS {
        -:  140:
        -:  141:OpenDDS_Dcps_Export
        -:  142:bool gen_skip_over(Serializer& ser, DDS::InstanceHandleSeq*);
        -:  143:
        -:  144:}  }
        -:  145:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  146:
        -:  147:#endif
        -:  148:
        -:  149:/* End TYPEDEF: InstanceHandleSeq */
        -:  150:
        -:  151:
        -:  152:/* Begin TYPEDEF: QosPolicyId_t */
        -:  153:
        -:  154:
        -:  155:/* End TYPEDEF: QosPolicyId_t */
        -:  156:
        -:  157:
        -:  158:/* Begin STRUCT: QosPolicyCount */
        -:  159:
        -:  160:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  161:namespace OpenDDS { namespace DCPS {
        -:  162:
        -:  163:OpenDDS_Dcps_Export
        -:  164:void gen_find_size(const DDS::QosPolicyCount& stru, size_t& size, size_t& padding);
        -:  165:
        -:  166:OpenDDS_Dcps_Export
        -:  167:bool operator<<(Serializer& strm, const DDS::QosPolicyCount& stru);
        -:  168:
        -:  169:OpenDDS_Dcps_Export
        -:  170:bool operator>>(Serializer& strm, DDS::QosPolicyCount& stru);
        -:  171:
        -:  172:}  }
        -:  173:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  174:
        -:  175:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  176:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  177:namespace OpenDDS { namespace DCPS {
        -:  178:
        -:  179:class MetaStruct;
        -:  180:
        -:  181:template<typename T>
        -:  182:const MetaStruct& getMetaStruct();
        -:  183:
        -:  184:template<>
        -:  185:OpenDDS_Dcps_Export
        -:  186:const MetaStruct& getMetaStruct<DDS::QosPolicyCount>();
        -:  187:OpenDDS_Dcps_Export
        -:  188:bool gen_skip_over(Serializer& ser, DDS::QosPolicyCount*);
        -:  189:
        -:  190:}  }
        -:  191:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  192:
        -:  193:#endif
        -:  194:
        -:  195:/* End STRUCT: QosPolicyCount */
        -:  196:
        -:  197:
        -:  198:/* Begin TYPEDEF: QosPolicyCountSeq */
        -:  199:
        -:  200:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  201:namespace OpenDDS { namespace DCPS {
        -:  202:
        -:  203:OpenDDS_Dcps_Export
        -:  204:void gen_find_size(const DDS::QosPolicyCountSeq& seq, size_t& size, size_t& padding);
        -:  205:
        -:  206:OpenDDS_Dcps_Export
        -:  207:bool operator<<(Serializer& strm, const DDS::QosPolicyCountSeq& seq);
        -:  208:
        -:  209:OpenDDS_Dcps_Export
        -:  210:bool operator>>(Serializer& strm, DDS::QosPolicyCountSeq& seq);
        -:  211:
        -:  212:}  }
        -:  213:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  214:
        -:  215:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  216:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  217:namespace OpenDDS { namespace DCPS {
        -:  218:
        -:  219:OpenDDS_Dcps_Export
        -:  220:bool gen_skip_over(Serializer& ser, DDS::QosPolicyCountSeq*);
        -:  221:
        -:  222:}  }
        -:  223:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  224:
        -:  225:#endif
        -:  226:
        -:  227:/* End TYPEDEF: QosPolicyCountSeq */
        -:  228:
        -:  229:
        -:  230:/* Begin TYPEDEF: OctetSeq */
        -:  231:
        -:  232:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  233:namespace OpenDDS { namespace DCPS {
        -:  234:
        -:  235:OpenDDS_Dcps_Export
        -:  236:void gen_find_size(const DDS::OctetSeq& seq, size_t& size, size_t& padding);
        -:  237:
        -:  238:OpenDDS_Dcps_Export
        -:  239:bool operator<<(Serializer& strm, const DDS::OctetSeq& seq);
        -:  240:
        -:  241:OpenDDS_Dcps_Export
        -:  242:bool operator>>(Serializer& strm, DDS::OctetSeq& seq);
        -:  243:
        -:  244:}  }
        -:  245:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  246:
        -:  247:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  248:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  249:namespace OpenDDS { namespace DCPS {
        -:  250:
        -:  251:OpenDDS_Dcps_Export
        -:  252:bool gen_skip_over(Serializer& ser, DDS::OctetSeq*);
        -:  253:
        -:  254:}  }
        -:  255:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  256:
        -:  257:#endif
        -:  258:
        -:  259:/* End TYPEDEF: OctetSeq */
        -:  260:
        -:  261:
        -:  262:/* Begin STRUCT: Duration_t */
        -:  263:
        -:  264:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  265:namespace OpenDDS { namespace DCPS {
        -:  266:
        -:  267:OpenDDS_Dcps_Export
        -:  268:void gen_find_size(const DDS::Duration_t& stru, size_t& size, size_t& padding);
        -:  269:
        -:  270:OpenDDS_Dcps_Export
        -:  271:bool operator<<(Serializer& strm, const DDS::Duration_t& stru);
        -:  272:
        -:  273:OpenDDS_Dcps_Export
        -:  274:bool operator>>(Serializer& strm, DDS::Duration_t& stru);
        -:  275:
        -:  276:}  }
        -:  277:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  278:
        -:  279:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  280:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  281:namespace OpenDDS { namespace DCPS {
        -:  282:
        -:  283:template<>
        -:  284:OpenDDS_Dcps_Export
        -:  285:const MetaStruct& getMetaStruct<DDS::Duration_t>();
        -:  286:OpenDDS_Dcps_Export
        -:  287:bool gen_skip_over(Serializer& ser, DDS::Duration_t*);
        -:  288:
        -:  289:}  }
        -:  290:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  291:
        -:  292:#endif
        -:  293:
        -:  294:/* End STRUCT: Duration_t */
        -:  295:
        -:  296:
        -:  297:/* Begin CONST: DURATION_INFINITE_SEC */
        -:  298:
        -:  299:
        -:  300:/* End CONST: DURATION_INFINITE_SEC */
        -:  301:
        -:  302:
        -:  303:/* Begin CONST: DURATION_INFINITE_NSEC */
        -:  304:
        -:  305:
        -:  306:/* End CONST: DURATION_INFINITE_NSEC */
        -:  307:
        -:  308:
        -:  309:/* Begin CONST: DURATION_ZERO_SEC */
        -:  310:
        -:  311:
        -:  312:/* End CONST: DURATION_ZERO_SEC */
        -:  313:
        -:  314:
        -:  315:/* Begin CONST: DURATION_ZERO_NSEC */
        -:  316:
        -:  317:
        -:  318:/* End CONST: DURATION_ZERO_NSEC */
        -:  319:
        -:  320:
        -:  321:/* Begin STRUCT: Property_t */
        -:  322:
        -:  323:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  324:namespace OpenDDS { namespace DCPS {
        -:  325:
        -:  326:OpenDDS_Dcps_Export
        -:  327:void gen_find_size(const DDS::Property_t& stru, size_t& size, size_t& padding);
        -:  328:
        -:  329:OpenDDS_Dcps_Export
        -:  330:bool operator<<(Serializer& strm, const DDS::Property_t& stru);
        -:  331:
        -:  332:OpenDDS_Dcps_Export
        -:  333:bool operator>>(Serializer& strm, DDS::Property_t& stru);
        -:  334:
        -:  335:}  }
        -:  336:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  337:
        -:  338:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  339:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  340:namespace OpenDDS { namespace DCPS {
        -:  341:
        -:  342:template<>
        -:  343:OpenDDS_Dcps_Export
        -:  344:const MetaStruct& getMetaStruct<DDS::Property_t>();
        -:  345:OpenDDS_Dcps_Export
        -:  346:bool gen_skip_over(Serializer& ser, DDS::Property_t*);
        -:  347:
        -:  348:}  }
        -:  349:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  350:
        -:  351:#endif
        -:  352:
        -:  353:/* End STRUCT: Property_t */
        -:  354:
        -:  355:
        -:  356:/* Begin TYPEDEF: PropertySeq */
        -:  357:
        -:  358:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  359:namespace OpenDDS { namespace DCPS {
        -:  360:
        -:  361:OpenDDS_Dcps_Export
        -:  362:void gen_find_size(const DDS::PropertySeq& seq, size_t& size, size_t& padding);
        -:  363:
        -:  364:OpenDDS_Dcps_Export
        -:  365:bool operator<<(Serializer& strm, const DDS::PropertySeq& seq);
        -:  366:
        -:  367:OpenDDS_Dcps_Export
        -:  368:bool operator>>(Serializer& strm, DDS::PropertySeq& seq);
        -:  369:
        -:  370:}  }
        -:  371:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  372:
        -:  373:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  374:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  375:namespace OpenDDS { namespace DCPS {
        -:  376:
        -:  377:OpenDDS_Dcps_Export
        -:  378:bool gen_skip_over(Serializer& ser, DDS::PropertySeq*);
        -:  379:
        -:  380:}  }
        -:  381:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  382:
        -:  383:#endif
        -:  384:
        -:  385:/* End TYPEDEF: PropertySeq */
        -:  386:
        -:  387:
        -:  388:/* Begin STRUCT: BinaryProperty_t */
        -:  389:
        -:  390:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  391:namespace OpenDDS { namespace DCPS {
        -:  392:
        -:  393:OpenDDS_Dcps_Export
        -:  394:void gen_find_size(const DDS::BinaryProperty_t& stru, size_t& size, size_t& padding);
        -:  395:
        -:  396:OpenDDS_Dcps_Export
        -:  397:bool operator<<(Serializer& strm, const DDS::BinaryProperty_t& stru);
        -:  398:
        -:  399:OpenDDS_Dcps_Export
        -:  400:bool operator>>(Serializer& strm, DDS::BinaryProperty_t& stru);
        -:  401:
        -:  402:}  }
        -:  403:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  404:
        -:  405:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  406:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  407:namespace OpenDDS { namespace DCPS {
        -:  408:
        -:  409:template<>
        -:  410:OpenDDS_Dcps_Export
        -:  411:const MetaStruct& getMetaStruct<DDS::BinaryProperty_t>();
        -:  412:OpenDDS_Dcps_Export
        -:  413:bool gen_skip_over(Serializer& ser, DDS::BinaryProperty_t*);
        -:  414:
        -:  415:}  }
        -:  416:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  417:
        -:  418:#endif
        -:  419:
        -:  420:/* End STRUCT: BinaryProperty_t */
        -:  421:
        -:  422:
        -:  423:/* Begin TYPEDEF: BinaryPropertySeq */
        -:  424:
        -:  425:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  426:namespace OpenDDS { namespace DCPS {
        -:  427:
        -:  428:OpenDDS_Dcps_Export
        -:  429:void gen_find_size(const DDS::BinaryPropertySeq& seq, size_t& size, size_t& padding);
        -:  430:
        -:  431:OpenDDS_Dcps_Export
        -:  432:bool operator<<(Serializer& strm, const DDS::BinaryPropertySeq& seq);
        -:  433:
        -:  434:OpenDDS_Dcps_Export
        -:  435:bool operator>>(Serializer& strm, DDS::BinaryPropertySeq& seq);
        -:  436:
        -:  437:}  }
        -:  438:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  439:
        -:  440:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  441:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  442:namespace OpenDDS { namespace DCPS {
        -:  443:
        -:  444:OpenDDS_Dcps_Export
        -:  445:bool gen_skip_over(Serializer& ser, DDS::BinaryPropertySeq*);
        -:  446:
        -:  447:}  }
        -:  448:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  449:
        -:  450:#endif
        -:  451:
        -:  452:/* End TYPEDEF: BinaryPropertySeq */
        -:  453:
        -:  454:
        -:  455:/* Begin STRUCT: PropertyQosPolicy */
        -:  456:
        -:  457:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  458:namespace OpenDDS { namespace DCPS {
        -:  459:
        -:  460:OpenDDS_Dcps_Export
        -:  461:void gen_find_size(const DDS::PropertyQosPolicy& stru, size_t& size, size_t& padding);
        -:  462:
        -:  463:OpenDDS_Dcps_Export
        -:  464:bool operator<<(Serializer& strm, const DDS::PropertyQosPolicy& stru);
        -:  465:
        -:  466:OpenDDS_Dcps_Export
        -:  467:bool operator>>(Serializer& strm, DDS::PropertyQosPolicy& stru);
        -:  468:
        -:  469:}  }
        -:  470:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  471:
        -:  472:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  473:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  474:namespace OpenDDS { namespace DCPS {
        -:  475:
        -:  476:template<>
        -:  477:OpenDDS_Dcps_Export
        -:  478:const MetaStruct& getMetaStruct<DDS::PropertyQosPolicy>();
        -:  479:OpenDDS_Dcps_Export
        -:  480:bool gen_skip_over(Serializer& ser, DDS::PropertyQosPolicy*);
        -:  481:
        -:  482:}  }
        -:  483:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  484:
        -:  485:#endif
        -:  486:
        -:  487:/* End STRUCT: PropertyQosPolicy */
        -:  488:
        -:  489:
        -:  490:/* Begin STRUCT: UserDataQosPolicy */
        -:  491:
        -:  492:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  493:namespace OpenDDS { namespace DCPS {
        -:  494:
        -:  495:OpenDDS_Dcps_Export
        -:  496:void gen_find_size(const DDS::UserDataQosPolicy& stru, size_t& size, size_t& padding);
        -:  497:
        -:  498:OpenDDS_Dcps_Export
        -:  499:bool operator<<(Serializer& strm, const DDS::UserDataQosPolicy& stru);
        -:  500:
        -:  501:OpenDDS_Dcps_Export
        -:  502:bool operator>>(Serializer& strm, DDS::UserDataQosPolicy& stru);
        -:  503:
        -:  504:}  }
        -:  505:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  506:
        -:  507:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  508:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  509:namespace OpenDDS { namespace DCPS {
        -:  510:
        -:  511:template<>
        -:  512:OpenDDS_Dcps_Export
        -:  513:const MetaStruct& getMetaStruct<DDS::UserDataQosPolicy>();
        -:  514:OpenDDS_Dcps_Export
        -:  515:bool gen_skip_over(Serializer& ser, DDS::UserDataQosPolicy*);
        -:  516:
        -:  517:}  }
        -:  518:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  519:
        -:  520:#endif
        -:  521:
        -:  522:/* End STRUCT: UserDataQosPolicy */
        -:  523:
        -:  524:
        -:  525:/* Begin STRUCT: GroupDataQosPolicy */
        -:  526:
        -:  527:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  528:namespace OpenDDS { namespace DCPS {
        -:  529:
        -:  530:OpenDDS_Dcps_Export
        -:  531:void gen_find_size(const DDS::GroupDataQosPolicy& stru, size_t& size, size_t& padding);
        -:  532:
        -:  533:OpenDDS_Dcps_Export
        -:  534:bool operator<<(Serializer& strm, const DDS::GroupDataQosPolicy& stru);
        -:  535:
        -:  536:OpenDDS_Dcps_Export
        -:  537:bool operator>>(Serializer& strm, DDS::GroupDataQosPolicy& stru);
        -:  538:
        -:  539:}  }
        -:  540:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  541:
        -:  542:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  543:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  544:namespace OpenDDS { namespace DCPS {
        -:  545:
        -:  546:template<>
        -:  547:OpenDDS_Dcps_Export
        -:  548:const MetaStruct& getMetaStruct<DDS::GroupDataQosPolicy>();
        -:  549:OpenDDS_Dcps_Export
        -:  550:bool gen_skip_over(Serializer& ser, DDS::GroupDataQosPolicy*);
        -:  551:
        -:  552:}  }
        -:  553:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  554:
        -:  555:#endif
        -:  556:
        -:  557:/* End STRUCT: GroupDataQosPolicy */
        -:  558:
        -:  559:
        -:  560:/* Begin STRUCT: TopicDataQosPolicy */
        -:  561:
        -:  562:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  563:namespace OpenDDS { namespace DCPS {
        -:  564:
        -:  565:OpenDDS_Dcps_Export
        -:  566:void gen_find_size(const DDS::TopicDataQosPolicy& stru, size_t& size, size_t& padding);
        -:  567:
        -:  568:OpenDDS_Dcps_Export
        -:  569:bool operator<<(Serializer& strm, const DDS::TopicDataQosPolicy& stru);
        -:  570:
        -:  571:OpenDDS_Dcps_Export
        -:  572:bool operator>>(Serializer& strm, DDS::TopicDataQosPolicy& stru);
        -:  573:
        -:  574:}  }
        -:  575:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  576:
        -:  577:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  578:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  579:namespace OpenDDS { namespace DCPS {
        -:  580:
        -:  581:template<>
        -:  582:OpenDDS_Dcps_Export
        -:  583:const MetaStruct& getMetaStruct<DDS::TopicDataQosPolicy>();
        -:  584:OpenDDS_Dcps_Export
        -:  585:bool gen_skip_over(Serializer& ser, DDS::TopicDataQosPolicy*);
        -:  586:
        -:  587:}  }
        -:  588:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  589:
        -:  590:#endif
        -:  591:
        -:  592:/* End STRUCT: TopicDataQosPolicy */
        -:  593:
        -:  594:
        -:  595:/* Begin STRUCT: PartitionQosPolicy */
        -:  596:
        -:  597:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  598:namespace OpenDDS { namespace DCPS {
        -:  599:
        -:  600:OpenDDS_Dcps_Export
        -:  601:void gen_find_size(const DDS::PartitionQosPolicy& stru, size_t& size, size_t& padding);
        -:  602:
        -:  603:OpenDDS_Dcps_Export
        -:  604:bool operator<<(Serializer& strm, const DDS::PartitionQosPolicy& stru);
        -:  605:
        -:  606:OpenDDS_Dcps_Export
        -:  607:bool operator>>(Serializer& strm, DDS::PartitionQosPolicy& stru);
        -:  608:
        -:  609:}  }
        -:  610:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  611:
        -:  612:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  613:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  614:namespace OpenDDS { namespace DCPS {
        -:  615:
        -:  616:template<>
        -:  617:OpenDDS_Dcps_Export
        -:  618:const MetaStruct& getMetaStruct<DDS::PartitionQosPolicy>();
        -:  619:OpenDDS_Dcps_Export
        -:  620:bool gen_skip_over(Serializer& ser, DDS::PartitionQosPolicy*);
        -:  621:
        -:  622:}  }
        -:  623:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  624:
        -:  625:#endif
        -:  626:
        -:  627:/* End STRUCT: PartitionQosPolicy */
        -:  628:
        -:  629:
        -:  630:/* Begin ENUM: HistoryQosPolicyKind */
        -:  631:
        -:  632:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  633:namespace OpenDDS { namespace DCPS {
        -:  634:
        -:  635:OpenDDS_Dcps_Export
        -:  636:bool operator<<(Serializer& strm, const DDS::HistoryQosPolicyKind& enumval);
        -:  637:
        -:  638:OpenDDS_Dcps_Export
        -:  639:bool operator>>(Serializer& strm, DDS::HistoryQosPolicyKind& enumval);
        -:  640:
        -:  641:}  }
        -:  642:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  643:
        -:  644:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  645:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  646:namespace OpenDDS { namespace DCPS {
        -:  647:
        -:  648:OpenDDS_Dcps_Export extern const char* gen_DDS_HistoryQosPolicyKind_names[];
        -:  649:OpenDDS_Dcps_Export extern const size_t gen_DDS_HistoryQosPolicyKind_names_size;
        -:  650:}  }
        -:  651:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  652:
        -:  653:#endif
        -:  654:
        -:  655:/* End ENUM: HistoryQosPolicyKind */
        -:  656:
        -:  657:
        -:  658:/* Begin ENUM: DurabilityQosPolicyKind */
        -:  659:
        -:  660:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  661:namespace OpenDDS { namespace DCPS {
        -:  662:
        -:  663:OpenDDS_Dcps_Export
        -:  664:bool operator<<(Serializer& strm, const DDS::DurabilityQosPolicyKind& enumval);
        -:  665:
        -:  666:OpenDDS_Dcps_Export
        -:  667:bool operator>>(Serializer& strm, DDS::DurabilityQosPolicyKind& enumval);
        -:  668:
        -:  669:}  }
        -:  670:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  671:
        -:  672:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  673:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  674:namespace OpenDDS { namespace DCPS {
        -:  675:
        -:  676:OpenDDS_Dcps_Export extern const char* gen_DDS_DurabilityQosPolicyKind_names[];
        -:  677:OpenDDS_Dcps_Export extern const size_t gen_DDS_DurabilityQosPolicyKind_names_size;
        -:  678:}  }
        -:  679:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  680:
        -:  681:#endif
        -:  682:
        -:  683:/* End ENUM: DurabilityQosPolicyKind */
        -:  684:
        -:  685:
        -:  686:/* Begin STRUCT: DurabilityQosPolicy */
        -:  687:
        -:  688:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  689:namespace OpenDDS { namespace DCPS {
        -:  690:
        -:  691:OpenDDS_Dcps_Export
        -:  692:void gen_find_size(const DDS::DurabilityQosPolicy& stru, size_t& size, size_t& padding);
        -:  693:
        -:  694:OpenDDS_Dcps_Export
        -:  695:bool operator<<(Serializer& strm, const DDS::DurabilityQosPolicy& stru);
        -:  696:
        -:  697:OpenDDS_Dcps_Export
        -:  698:bool operator>>(Serializer& strm, DDS::DurabilityQosPolicy& stru);
        -:  699:
        -:  700:}  }
        -:  701:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  702:
        -:  703:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  704:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  705:namespace OpenDDS { namespace DCPS {
        -:  706:
        -:  707:template<>
        -:  708:OpenDDS_Dcps_Export
        -:  709:const MetaStruct& getMetaStruct<DDS::DurabilityQosPolicy>();
        -:  710:OpenDDS_Dcps_Export
        -:  711:bool gen_skip_over(Serializer& ser, DDS::DurabilityQosPolicy*);
        -:  712:
        -:  713:}  }
        -:  714:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  715:
        -:  716:#endif
        -:  717:
        -:  718:/* End STRUCT: DurabilityQosPolicy */
        -:  719:
        -:  720:
        -:  721:/* Begin STRUCT: DurabilityServiceQosPolicy */
        -:  722:
        -:  723:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  724:namespace OpenDDS { namespace DCPS {
        -:  725:
        -:  726:OpenDDS_Dcps_Export
        -:  727:void gen_find_size(const DDS::DurabilityServiceQosPolicy& stru, size_t& size, size_t& padding);
        -:  728:
        -:  729:OpenDDS_Dcps_Export
        -:  730:bool operator<<(Serializer& strm, const DDS::DurabilityServiceQosPolicy& stru);
        -:  731:
        -:  732:OpenDDS_Dcps_Export
        -:  733:bool operator>>(Serializer& strm, DDS::DurabilityServiceQosPolicy& stru);
        -:  734:
        -:  735:}  }
        -:  736:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  737:
        -:  738:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  739:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  740:namespace OpenDDS { namespace DCPS {
        -:  741:
        -:  742:template<>
        -:  743:OpenDDS_Dcps_Export
        -:  744:const MetaStruct& getMetaStruct<DDS::DurabilityServiceQosPolicy>();
        -:  745:OpenDDS_Dcps_Export
        -:  746:bool gen_skip_over(Serializer& ser, DDS::DurabilityServiceQosPolicy*);
        -:  747:
        -:  748:}  }
        -:  749:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  750:
        -:  751:#endif
        -:  752:
        -:  753:/* End STRUCT: DurabilityServiceQosPolicy */
        -:  754:
        -:  755:
        -:  756:/* Begin STRUCT: DeadlineQosPolicy */
        -:  757:
        -:  758:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  759:namespace OpenDDS { namespace DCPS {
        -:  760:
        -:  761:OpenDDS_Dcps_Export
        -:  762:void gen_find_size(const DDS::DeadlineQosPolicy& stru, size_t& size, size_t& padding);
        -:  763:
        -:  764:OpenDDS_Dcps_Export
        -:  765:bool operator<<(Serializer& strm, const DDS::DeadlineQosPolicy& stru);
        -:  766:
        -:  767:OpenDDS_Dcps_Export
        -:  768:bool operator>>(Serializer& strm, DDS::DeadlineQosPolicy& stru);
        -:  769:
        -:  770:}  }
        -:  771:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  772:
        -:  773:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  774:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  775:namespace OpenDDS { namespace DCPS {
        -:  776:
        -:  777:template<>
        -:  778:OpenDDS_Dcps_Export
        -:  779:const MetaStruct& getMetaStruct<DDS::DeadlineQosPolicy>();
        -:  780:OpenDDS_Dcps_Export
        -:  781:bool gen_skip_over(Serializer& ser, DDS::DeadlineQosPolicy*);
        -:  782:
        -:  783:}  }
        -:  784:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  785:
        -:  786:#endif
        -:  787:
        -:  788:/* End STRUCT: DeadlineQosPolicy */
        -:  789:
        -:  790:
        -:  791:/* Begin STRUCT: LatencyBudgetQosPolicy */
        -:  792:
        -:  793:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  794:namespace OpenDDS { namespace DCPS {
        -:  795:
        -:  796:OpenDDS_Dcps_Export
        -:  797:void gen_find_size(const DDS::LatencyBudgetQosPolicy& stru, size_t& size, size_t& padding);
        -:  798:
        -:  799:OpenDDS_Dcps_Export
        -:  800:bool operator<<(Serializer& strm, const DDS::LatencyBudgetQosPolicy& stru);
        -:  801:
        -:  802:OpenDDS_Dcps_Export
        -:  803:bool operator>>(Serializer& strm, DDS::LatencyBudgetQosPolicy& stru);
        -:  804:
        -:  805:}  }
        -:  806:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  807:
        -:  808:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  809:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  810:namespace OpenDDS { namespace DCPS {
        -:  811:
        -:  812:template<>
        -:  813:OpenDDS_Dcps_Export
        -:  814:const MetaStruct& getMetaStruct<DDS::LatencyBudgetQosPolicy>();
        -:  815:OpenDDS_Dcps_Export
        -:  816:bool gen_skip_over(Serializer& ser, DDS::LatencyBudgetQosPolicy*);
        -:  817:
        -:  818:}  }
        -:  819:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  820:
        -:  821:#endif
        -:  822:
        -:  823:/* End STRUCT: LatencyBudgetQosPolicy */
        -:  824:
        -:  825:
        -:  826:/* Begin ENUM: LivelinessQosPolicyKind */
        -:  827:
        -:  828:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  829:namespace OpenDDS { namespace DCPS {
        -:  830:
        -:  831:OpenDDS_Dcps_Export
        -:  832:bool operator<<(Serializer& strm, const DDS::LivelinessQosPolicyKind& enumval);
        -:  833:
        -:  834:OpenDDS_Dcps_Export
        -:  835:bool operator>>(Serializer& strm, DDS::LivelinessQosPolicyKind& enumval);
        -:  836:
        -:  837:}  }
        -:  838:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  839:
        -:  840:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  841:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  842:namespace OpenDDS { namespace DCPS {
        -:  843:
        -:  844:OpenDDS_Dcps_Export extern const char* gen_DDS_LivelinessQosPolicyKind_names[];
        -:  845:OpenDDS_Dcps_Export extern const size_t gen_DDS_LivelinessQosPolicyKind_names_size;
        -:  846:}  }
        -:  847:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  848:
        -:  849:#endif
        -:  850:
        -:  851:/* End ENUM: LivelinessQosPolicyKind */
        -:  852:
        -:  853:
        -:  854:/* Begin STRUCT: LivelinessQosPolicy */
        -:  855:
        -:  856:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  857:namespace OpenDDS { namespace DCPS {
        -:  858:
        -:  859:OpenDDS_Dcps_Export
        -:  860:void gen_find_size(const DDS::LivelinessQosPolicy& stru, size_t& size, size_t& padding);
        -:  861:
        -:  862:OpenDDS_Dcps_Export
        -:  863:bool operator<<(Serializer& strm, const DDS::LivelinessQosPolicy& stru);
        -:  864:
        -:  865:OpenDDS_Dcps_Export
        -:  866:bool operator>>(Serializer& strm, DDS::LivelinessQosPolicy& stru);
        -:  867:
        -:  868:}  }
        -:  869:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  870:
        -:  871:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  872:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  873:namespace OpenDDS { namespace DCPS {
        -:  874:
        -:  875:template<>
        -:  876:OpenDDS_Dcps_Export
        -:  877:const MetaStruct& getMetaStruct<DDS::LivelinessQosPolicy>();
        -:  878:OpenDDS_Dcps_Export
        -:  879:bool gen_skip_over(Serializer& ser, DDS::LivelinessQosPolicy*);
        -:  880:
        -:  881:}  }
        -:  882:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  883:
        -:  884:#endif
        -:  885:
        -:  886:/* End STRUCT: LivelinessQosPolicy */
        -:  887:
        -:  888:
        -:  889:/* Begin ENUM: ReliabilityQosPolicyKind */
        -:  890:
        -:  891:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  892:namespace OpenDDS { namespace DCPS {
        -:  893:
        -:  894:OpenDDS_Dcps_Export
        -:  895:bool operator<<(Serializer& strm, const DDS::ReliabilityQosPolicyKind& enumval);
        -:  896:
        -:  897:OpenDDS_Dcps_Export
        -:  898:bool operator>>(Serializer& strm, DDS::ReliabilityQosPolicyKind& enumval);
        -:  899:
        -:  900:}  }
        -:  901:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  902:
        -:  903:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  904:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  905:namespace OpenDDS { namespace DCPS {
        -:  906:
        -:  907:OpenDDS_Dcps_Export extern const char* gen_DDS_ReliabilityQosPolicyKind_names[];
        -:  908:OpenDDS_Dcps_Export extern const size_t gen_DDS_ReliabilityQosPolicyKind_names_size;
        -:  909:}  }
        -:  910:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  911:
        -:  912:#endif
        -:  913:
        -:  914:/* End ENUM: ReliabilityQosPolicyKind */
        -:  915:
        -:  916:
        -:  917:/* Begin STRUCT: ReliabilityQosPolicy */
        -:  918:
        -:  919:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  920:namespace OpenDDS { namespace DCPS {
        -:  921:
        -:  922:OpenDDS_Dcps_Export
        -:  923:void gen_find_size(const DDS::ReliabilityQosPolicy& stru, size_t& size, size_t& padding);
        -:  924:
        -:  925:OpenDDS_Dcps_Export
        -:  926:bool operator<<(Serializer& strm, const DDS::ReliabilityQosPolicy& stru);
        -:  927:
        -:  928:OpenDDS_Dcps_Export
        -:  929:bool operator>>(Serializer& strm, DDS::ReliabilityQosPolicy& stru);
        -:  930:
        -:  931:}  }
        -:  932:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  933:
        -:  934:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  935:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  936:namespace OpenDDS { namespace DCPS {
        -:  937:
        -:  938:template<>
        -:  939:OpenDDS_Dcps_Export
        -:  940:const MetaStruct& getMetaStruct<DDS::ReliabilityQosPolicy>();
        -:  941:OpenDDS_Dcps_Export
        -:  942:bool gen_skip_over(Serializer& ser, DDS::ReliabilityQosPolicy*);
        -:  943:
        -:  944:}  }
        -:  945:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  946:
        -:  947:#endif
        -:  948:
        -:  949:/* End STRUCT: ReliabilityQosPolicy */
        -:  950:
        -:  951:
        -:  952:/* Begin ENUM: DestinationOrderQosPolicyKind */
        -:  953:
        -:  954:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  955:namespace OpenDDS { namespace DCPS {
        -:  956:
        -:  957:OpenDDS_Dcps_Export
        -:  958:bool operator<<(Serializer& strm, const DDS::DestinationOrderQosPolicyKind& enumval);
        -:  959:
        -:  960:OpenDDS_Dcps_Export
        -:  961:bool operator>>(Serializer& strm, DDS::DestinationOrderQosPolicyKind& enumval);
        -:  962:
        -:  963:}  }
        -:  964:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  965:
        -:  966:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  967:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  968:namespace OpenDDS { namespace DCPS {
        -:  969:
        -:  970:OpenDDS_Dcps_Export extern const char* gen_DDS_DestinationOrderQosPolicyKind_names[];
        -:  971:OpenDDS_Dcps_Export extern const size_t gen_DDS_DestinationOrderQosPolicyKind_names_size;
        -:  972:}  }
        -:  973:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  974:
        -:  975:#endif
        -:  976:
        -:  977:/* End ENUM: DestinationOrderQosPolicyKind */
        -:  978:
        -:  979:
        -:  980:/* Begin STRUCT: DestinationOrderQosPolicy */
        -:  981:
        -:  982:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  983:namespace OpenDDS { namespace DCPS {
        -:  984:
        -:  985:OpenDDS_Dcps_Export
        -:  986:void gen_find_size(const DDS::DestinationOrderQosPolicy& stru, size_t& size, size_t& padding);
        -:  987:
        -:  988:OpenDDS_Dcps_Export
        -:  989:bool operator<<(Serializer& strm, const DDS::DestinationOrderQosPolicy& stru);
        -:  990:
        -:  991:OpenDDS_Dcps_Export
        -:  992:bool operator>>(Serializer& strm, DDS::DestinationOrderQosPolicy& stru);
        -:  993:
        -:  994:}  }
        -:  995:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  996:
        -:  997:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  998:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  999:namespace OpenDDS { namespace DCPS {
        -: 1000:
        -: 1001:template<>
        -: 1002:OpenDDS_Dcps_Export
        -: 1003:const MetaStruct& getMetaStruct<DDS::DestinationOrderQosPolicy>();
        -: 1004:OpenDDS_Dcps_Export
        -: 1005:bool gen_skip_over(Serializer& ser, DDS::DestinationOrderQosPolicy*);
        -: 1006:
        -: 1007:}  }
        -: 1008:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1009:
        -: 1010:#endif
        -: 1011:
        -: 1012:/* End STRUCT: DestinationOrderQosPolicy */
        -: 1013:
        -: 1014:
        -: 1015:/* Begin STRUCT: HistoryQosPolicy */
        -: 1016:
        -: 1017:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1018:namespace OpenDDS { namespace DCPS {
        -: 1019:
        -: 1020:OpenDDS_Dcps_Export
        -: 1021:void gen_find_size(const DDS::HistoryQosPolicy& stru, size_t& size, size_t& padding);
        -: 1022:
        -: 1023:OpenDDS_Dcps_Export
        -: 1024:bool operator<<(Serializer& strm, const DDS::HistoryQosPolicy& stru);
        -: 1025:
        -: 1026:OpenDDS_Dcps_Export
        -: 1027:bool operator>>(Serializer& strm, DDS::HistoryQosPolicy& stru);
        -: 1028:
        -: 1029:}  }
        -: 1030:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1031:
        -: 1032:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1033:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1034:namespace OpenDDS { namespace DCPS {
        -: 1035:
        -: 1036:template<>
        -: 1037:OpenDDS_Dcps_Export
        -: 1038:const MetaStruct& getMetaStruct<DDS::HistoryQosPolicy>();
        -: 1039:OpenDDS_Dcps_Export
        -: 1040:bool gen_skip_over(Serializer& ser, DDS::HistoryQosPolicy*);
        -: 1041:
        -: 1042:}  }
        -: 1043:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1044:
        -: 1045:#endif
        -: 1046:
        -: 1047:/* End STRUCT: HistoryQosPolicy */
        -: 1048:
        -: 1049:
        -: 1050:/* Begin STRUCT: ResourceLimitsQosPolicy */
        -: 1051:
        -: 1052:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1053:namespace OpenDDS { namespace DCPS {
        -: 1054:
        -: 1055:OpenDDS_Dcps_Export
        -: 1056:void gen_find_size(const DDS::ResourceLimitsQosPolicy& stru, size_t& size, size_t& padding);
        -: 1057:
        -: 1058:OpenDDS_Dcps_Export
        -: 1059:bool operator<<(Serializer& strm, const DDS::ResourceLimitsQosPolicy& stru);
        -: 1060:
        -: 1061:OpenDDS_Dcps_Export
        -: 1062:bool operator>>(Serializer& strm, DDS::ResourceLimitsQosPolicy& stru);
        -: 1063:
        -: 1064:}  }
        -: 1065:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1066:
        -: 1067:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1068:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1069:namespace OpenDDS { namespace DCPS {
        -: 1070:
        -: 1071:template<>
        -: 1072:OpenDDS_Dcps_Export
        -: 1073:const MetaStruct& getMetaStruct<DDS::ResourceLimitsQosPolicy>();
        -: 1074:OpenDDS_Dcps_Export
        -: 1075:bool gen_skip_over(Serializer& ser, DDS::ResourceLimitsQosPolicy*);
        -: 1076:
        -: 1077:}  }
        -: 1078:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1079:
        -: 1080:#endif
        -: 1081:
        -: 1082:/* End STRUCT: ResourceLimitsQosPolicy */
        -: 1083:
        -: 1084:
        -: 1085:/* Begin STRUCT: TransportPriorityQosPolicy */
        -: 1086:
        -: 1087:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1088:namespace OpenDDS { namespace DCPS {
        -: 1089:
        -: 1090:OpenDDS_Dcps_Export
        -: 1091:void gen_find_size(const DDS::TransportPriorityQosPolicy& stru, size_t& size, size_t& padding);
        -: 1092:
        -: 1093:OpenDDS_Dcps_Export
        -: 1094:bool operator<<(Serializer& strm, const DDS::TransportPriorityQosPolicy& stru);
        -: 1095:
        -: 1096:OpenDDS_Dcps_Export
        -: 1097:bool operator>>(Serializer& strm, DDS::TransportPriorityQosPolicy& stru);
        -: 1098:
        -: 1099:}  }
        -: 1100:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1101:
        -: 1102:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1103:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1104:namespace OpenDDS { namespace DCPS {
        -: 1105:
        -: 1106:template<>
        -: 1107:OpenDDS_Dcps_Export
        -: 1108:const MetaStruct& getMetaStruct<DDS::TransportPriorityQosPolicy>();
        -: 1109:OpenDDS_Dcps_Export
        -: 1110:bool gen_skip_over(Serializer& ser, DDS::TransportPriorityQosPolicy*);
        -: 1111:
        -: 1112:}  }
        -: 1113:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1114:
        -: 1115:#endif
        -: 1116:
        -: 1117:/* End STRUCT: TransportPriorityQosPolicy */
        -: 1118:
        -: 1119:
        -: 1120:/* Begin STRUCT: LifespanQosPolicy */
        -: 1121:
        -: 1122:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1123:namespace OpenDDS { namespace DCPS {
        -: 1124:
        -: 1125:OpenDDS_Dcps_Export
        -: 1126:void gen_find_size(const DDS::LifespanQosPolicy& stru, size_t& size, size_t& padding);
        -: 1127:
        -: 1128:OpenDDS_Dcps_Export
        -: 1129:bool operator<<(Serializer& strm, const DDS::LifespanQosPolicy& stru);
        -: 1130:
        -: 1131:OpenDDS_Dcps_Export
        -: 1132:bool operator>>(Serializer& strm, DDS::LifespanQosPolicy& stru);
        -: 1133:
        -: 1134:}  }
        -: 1135:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1136:
        -: 1137:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1138:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1139:namespace OpenDDS { namespace DCPS {
        -: 1140:
        -: 1141:template<>
        -: 1142:OpenDDS_Dcps_Export
        -: 1143:const MetaStruct& getMetaStruct<DDS::LifespanQosPolicy>();
        -: 1144:OpenDDS_Dcps_Export
        -: 1145:bool gen_skip_over(Serializer& ser, DDS::LifespanQosPolicy*);
        -: 1146:
        -: 1147:}  }
        -: 1148:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1149:
        -: 1150:#endif
        -: 1151:
        -: 1152:/* End STRUCT: LifespanQosPolicy */
        -: 1153:
        -: 1154:
        -: 1155:/* Begin ENUM: OwnershipQosPolicyKind */
        -: 1156:
        -: 1157:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1158:namespace OpenDDS { namespace DCPS {
        -: 1159:
        -: 1160:OpenDDS_Dcps_Export
        -: 1161:bool operator<<(Serializer& strm, const DDS::OwnershipQosPolicyKind& enumval);
        -: 1162:
        -: 1163:OpenDDS_Dcps_Export
        -: 1164:bool operator>>(Serializer& strm, DDS::OwnershipQosPolicyKind& enumval);
        -: 1165:
        -: 1166:}  }
        -: 1167:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1168:
        -: 1169:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1170:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1171:namespace OpenDDS { namespace DCPS {
        -: 1172:
        -: 1173:OpenDDS_Dcps_Export extern const char* gen_DDS_OwnershipQosPolicyKind_names[];
        -: 1174:OpenDDS_Dcps_Export extern const size_t gen_DDS_OwnershipQosPolicyKind_names_size;
        -: 1175:}  }
        -: 1176:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1177:
        -: 1178:#endif
        -: 1179:
        -: 1180:/* End ENUM: OwnershipQosPolicyKind */
        -: 1181:
        -: 1182:
        -: 1183:/* Begin STRUCT: OwnershipQosPolicy */
        -: 1184:
        -: 1185:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1186:namespace OpenDDS { namespace DCPS {
        -: 1187:
        -: 1188:OpenDDS_Dcps_Export
        -: 1189:void gen_find_size(const DDS::OwnershipQosPolicy& stru, size_t& size, size_t& padding);
        -: 1190:
        -: 1191:OpenDDS_Dcps_Export
        -: 1192:bool operator<<(Serializer& strm, const DDS::OwnershipQosPolicy& stru);
        -: 1193:
        -: 1194:OpenDDS_Dcps_Export
        -: 1195:bool operator>>(Serializer& strm, DDS::OwnershipQosPolicy& stru);
        -: 1196:
        -: 1197:}  }
        -: 1198:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1199:
        -: 1200:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1201:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1202:namespace OpenDDS { namespace DCPS {
        -: 1203:
        -: 1204:template<>
        -: 1205:OpenDDS_Dcps_Export
        -: 1206:const MetaStruct& getMetaStruct<DDS::OwnershipQosPolicy>();
        -: 1207:OpenDDS_Dcps_Export
        -: 1208:bool gen_skip_over(Serializer& ser, DDS::OwnershipQosPolicy*);
        -: 1209:
        -: 1210:}  }
        -: 1211:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1212:
        -: 1213:#endif
        -: 1214:
        -: 1215:/* End STRUCT: OwnershipQosPolicy */
        -: 1216:
        -: 1217:
        -: 1218:/* Begin STRUCT: OwnershipStrengthQosPolicy */
        -: 1219:
        -: 1220:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1221:namespace OpenDDS { namespace DCPS {
        -: 1222:
        -: 1223:OpenDDS_Dcps_Export
        -: 1224:void gen_find_size(const DDS::OwnershipStrengthQosPolicy& stru, size_t& size, size_t& padding);
        -: 1225:
        -: 1226:OpenDDS_Dcps_Export
        -: 1227:bool operator<<(Serializer& strm, const DDS::OwnershipStrengthQosPolicy& stru);
        -: 1228:
        -: 1229:OpenDDS_Dcps_Export
        -: 1230:bool operator>>(Serializer& strm, DDS::OwnershipStrengthQosPolicy& stru);
        -: 1231:
        -: 1232:}  }
        -: 1233:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1234:
        -: 1235:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1236:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1237:namespace OpenDDS { namespace DCPS {
        -: 1238:
        -: 1239:template<>
        -: 1240:OpenDDS_Dcps_Export
        -: 1241:const MetaStruct& getMetaStruct<DDS::OwnershipStrengthQosPolicy>();
        -: 1242:OpenDDS_Dcps_Export
        -: 1243:bool gen_skip_over(Serializer& ser, DDS::OwnershipStrengthQosPolicy*);
        -: 1244:
        -: 1245:}  }
        -: 1246:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1247:
        -: 1248:#endif
        -: 1249:
        -: 1250:/* End STRUCT: OwnershipStrengthQosPolicy */
        -: 1251:
        -: 1252:
        -: 1253:/* Begin ENUM: PresentationQosPolicyAccessScopeKind */
        -: 1254:
        -: 1255:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1256:namespace OpenDDS { namespace DCPS {
        -: 1257:
        -: 1258:OpenDDS_Dcps_Export
        -: 1259:bool operator<<(Serializer& strm, const DDS::PresentationQosPolicyAccessScopeKind& enumval);
        -: 1260:
        -: 1261:OpenDDS_Dcps_Export
        -: 1262:bool operator>>(Serializer& strm, DDS::PresentationQosPolicyAccessScopeKind& enumval);
        -: 1263:
        -: 1264:}  }
        -: 1265:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1266:
        -: 1267:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1268:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1269:namespace OpenDDS { namespace DCPS {
        -: 1270:
        -: 1271:OpenDDS_Dcps_Export extern const char* gen_DDS_PresentationQosPolicyAccessScopeKind_names[];
        -: 1272:OpenDDS_Dcps_Export extern const size_t gen_DDS_PresentationQosPolicyAccessScopeKind_names_size;
        -: 1273:}  }
        -: 1274:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1275:
        -: 1276:#endif
        -: 1277:
        -: 1278:/* End ENUM: PresentationQosPolicyAccessScopeKind */
        -: 1279:
        -: 1280:
        -: 1281:/* Begin STRUCT: PresentationQosPolicy */
        -: 1282:
        -: 1283:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1284:namespace OpenDDS { namespace DCPS {
        -: 1285:
        -: 1286:OpenDDS_Dcps_Export
        -: 1287:void gen_find_size(const DDS::PresentationQosPolicy& stru, size_t& size, size_t& padding);
        -: 1288:
        -: 1289:OpenDDS_Dcps_Export
        -: 1290:bool operator<<(Serializer& strm, const DDS::PresentationQosPolicy& stru);
        -: 1291:
        -: 1292:OpenDDS_Dcps_Export
        -: 1293:bool operator>>(Serializer& strm, DDS::PresentationQosPolicy& stru);
        -: 1294:
        -: 1295:}  }
        -: 1296:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1297:
        -: 1298:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1299:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1300:namespace OpenDDS { namespace DCPS {
        -: 1301:
        -: 1302:template<>
        -: 1303:OpenDDS_Dcps_Export
        -: 1304:const MetaStruct& getMetaStruct<DDS::PresentationQosPolicy>();
        -: 1305:OpenDDS_Dcps_Export
        -: 1306:bool gen_skip_over(Serializer& ser, DDS::PresentationQosPolicy*);
        -: 1307:
        -: 1308:}  }
        -: 1309:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1310:
        -: 1311:#endif
        -: 1312:
        -: 1313:/* End STRUCT: PresentationQosPolicy */
        -: 1314:
        -: 1315:
        -: 1316:/* Begin STRUCT: TimeBasedFilterQosPolicy */
        -: 1317:
        -: 1318:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1319:namespace OpenDDS { namespace DCPS {
        -: 1320:
        -: 1321:OpenDDS_Dcps_Export
        -: 1322:void gen_find_size(const DDS::TimeBasedFilterQosPolicy& stru, size_t& size, size_t& padding);
        -: 1323:
        -: 1324:OpenDDS_Dcps_Export
        -: 1325:bool operator<<(Serializer& strm, const DDS::TimeBasedFilterQosPolicy& stru);
        -: 1326:
        -: 1327:OpenDDS_Dcps_Export
        -: 1328:bool operator>>(Serializer& strm, DDS::TimeBasedFilterQosPolicy& stru);
        -: 1329:
        -: 1330:}  }
        -: 1331:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1332:
        -: 1333:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1334:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1335:namespace OpenDDS { namespace DCPS {
        -: 1336:
        -: 1337:template<>
        -: 1338:OpenDDS_Dcps_Export
        -: 1339:const MetaStruct& getMetaStruct<DDS::TimeBasedFilterQosPolicy>();
        -: 1340:OpenDDS_Dcps_Export
        -: 1341:bool gen_skip_over(Serializer& ser, DDS::TimeBasedFilterQosPolicy*);
        -: 1342:
        -: 1343:}  }
        -: 1344:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1345:
        -: 1346:#endif
        -: 1347:
        -: 1348:/* End STRUCT: TimeBasedFilterQosPolicy */
        -: 1349:
        -: 1350:
        -: 1351:/* Begin STRUCT: TopicQos */
        -: 1352:
        -: 1353:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1354:namespace OpenDDS { namespace DCPS {
        -: 1355:
        -: 1356:OpenDDS_Dcps_Export
        -: 1357:void gen_find_size(const DDS::TopicQos& stru, size_t& size, size_t& padding);
        -: 1358:
        -: 1359:OpenDDS_Dcps_Export
        -: 1360:bool operator<<(Serializer& strm, const DDS::TopicQos& stru);
        -: 1361:
        -: 1362:OpenDDS_Dcps_Export
        -: 1363:bool operator>>(Serializer& strm, DDS::TopicQos& stru);
        -: 1364:
        -: 1365:}  }
        -: 1366:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1367:
        -: 1368:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1369:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1370:namespace OpenDDS { namespace DCPS {
        -: 1371:
        -: 1372:template<>
        -: 1373:OpenDDS_Dcps_Export
        -: 1374:const MetaStruct& getMetaStruct<DDS::TopicQos>();
        -: 1375:OpenDDS_Dcps_Export
        -: 1376:bool gen_skip_over(Serializer& ser, DDS::TopicQos*);
        -: 1377:
        -: 1378:}  }
        -: 1379:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1380:
        -: 1381:#endif
        -: 1382:
        -: 1383:/* End STRUCT: TopicQos */
        -: 1384:
        -: 1385:
        -: 1386:/* Begin STRUCT: WriterDataLifecycleQosPolicy */
        -: 1387:
        -: 1388:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1389:namespace OpenDDS { namespace DCPS {
        -: 1390:
        -: 1391:OpenDDS_Dcps_Export
        -: 1392:void gen_find_size(const DDS::WriterDataLifecycleQosPolicy& stru, size_t& size, size_t& padding);
        -: 1393:
        -: 1394:OpenDDS_Dcps_Export
        -: 1395:bool operator<<(Serializer& strm, const DDS::WriterDataLifecycleQosPolicy& stru);
        -: 1396:
        -: 1397:OpenDDS_Dcps_Export
        -: 1398:bool operator>>(Serializer& strm, DDS::WriterDataLifecycleQosPolicy& stru);
        -: 1399:
        -: 1400:}  }
        -: 1401:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1402:
        -: 1403:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1404:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1405:namespace OpenDDS { namespace DCPS {
        -: 1406:
        -: 1407:template<>
        -: 1408:OpenDDS_Dcps_Export
        -: 1409:const MetaStruct& getMetaStruct<DDS::WriterDataLifecycleQosPolicy>();
        -: 1410:OpenDDS_Dcps_Export
        -: 1411:bool gen_skip_over(Serializer& ser, DDS::WriterDataLifecycleQosPolicy*);
        -: 1412:
        -: 1413:}  }
        -: 1414:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1415:
        -: 1416:#endif
        -: 1417:
        -: 1418:/* End STRUCT: WriterDataLifecycleQosPolicy */
        -: 1419:
        -: 1420:
        -: 1421:/* Begin STRUCT: DataWriterQos */
        -: 1422:
        -: 1423:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1424:namespace OpenDDS { namespace DCPS {
        -: 1425:
        -: 1426:OpenDDS_Dcps_Export
        -: 1427:void gen_find_size(const DDS::DataWriterQos& stru, size_t& size, size_t& padding);
        -: 1428:
        -: 1429:OpenDDS_Dcps_Export
        -: 1430:bool operator<<(Serializer& strm, const DDS::DataWriterQos& stru);
        -: 1431:
        -: 1432:OpenDDS_Dcps_Export
        -: 1433:bool operator>>(Serializer& strm, DDS::DataWriterQos& stru);
        -: 1434:
        -: 1435:}  }
        -: 1436:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1437:
        -: 1438:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1439:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1440:namespace OpenDDS { namespace DCPS {
        -: 1441:
        -: 1442:template<>
        -: 1443:OpenDDS_Dcps_Export
        -: 1444:const MetaStruct& getMetaStruct<DDS::DataWriterQos>();
        -: 1445:OpenDDS_Dcps_Export
        -: 1446:bool gen_skip_over(Serializer& ser, DDS::DataWriterQos*);
        -: 1447:
        -: 1448:}  }
        -: 1449:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1450:
        -: 1451:#endif
        -: 1452:
        -: 1453:/* End STRUCT: DataWriterQos */
        -: 1454:
        -: 1455:
        -: 1456:/* Begin STRUCT: EntityFactoryQosPolicy */
        -: 1457:
        -: 1458:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1459:namespace OpenDDS { namespace DCPS {
        -: 1460:
        -: 1461:OpenDDS_Dcps_Export
        -: 1462:void gen_find_size(const DDS::EntityFactoryQosPolicy& stru, size_t& size, size_t& padding);
        -: 1463:
        -: 1464:OpenDDS_Dcps_Export
        -: 1465:bool operator<<(Serializer& strm, const DDS::EntityFactoryQosPolicy& stru);
        -: 1466:
        -: 1467:OpenDDS_Dcps_Export
        -: 1468:bool operator>>(Serializer& strm, DDS::EntityFactoryQosPolicy& stru);
        -: 1469:
        -: 1470:}  }
        -: 1471:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1472:
        -: 1473:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1474:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1475:namespace OpenDDS { namespace DCPS {
        -: 1476:
        -: 1477:template<>
        -: 1478:OpenDDS_Dcps_Export
        -: 1479:const MetaStruct& getMetaStruct<DDS::EntityFactoryQosPolicy>();
        -: 1480:OpenDDS_Dcps_Export
        -: 1481:bool gen_skip_over(Serializer& ser, DDS::EntityFactoryQosPolicy*);
        -: 1482:
        -: 1483:}  }
        -: 1484:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1485:
        -: 1486:#endif
        -: 1487:
        -: 1488:/* End STRUCT: EntityFactoryQosPolicy */
        -: 1489:
        -: 1490:
        -: 1491:/* Begin STRUCT: PublisherQos */
        -: 1492:
        -: 1493:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1494:namespace OpenDDS { namespace DCPS {
        -: 1495:
        -: 1496:OpenDDS_Dcps_Export
        -: 1497:void gen_find_size(const DDS::PublisherQos& stru, size_t& size, size_t& padding);
        -: 1498:
        -: 1499:OpenDDS_Dcps_Export
        -: 1500:bool operator<<(Serializer& strm, const DDS::PublisherQos& stru);
        -: 1501:
        -: 1502:OpenDDS_Dcps_Export
        -: 1503:bool operator>>(Serializer& strm, DDS::PublisherQos& stru);
        -: 1504:
        -: 1505:}  }
        -: 1506:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1507:
        -: 1508:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1509:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1510:namespace OpenDDS { namespace DCPS {
        -: 1511:
        -: 1512:template<>
        -: 1513:OpenDDS_Dcps_Export
        -: 1514:const MetaStruct& getMetaStruct<DDS::PublisherQos>();
        -: 1515:OpenDDS_Dcps_Export
        -: 1516:bool gen_skip_over(Serializer& ser, DDS::PublisherQos*);
        -: 1517:
        -: 1518:}  }
        -: 1519:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1520:
        -: 1521:#endif
        -: 1522:
        -: 1523:/* End STRUCT: PublisherQos */
        -: 1524:
        -: 1525:
        -: 1526:/* Begin STRUCT: ReaderDataLifecycleQosPolicy */
        -: 1527:
        -: 1528:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1529:namespace OpenDDS { namespace DCPS {
        -: 1530:
        -: 1531:OpenDDS_Dcps_Export
        -: 1532:void gen_find_size(const DDS::ReaderDataLifecycleQosPolicy& stru, size_t& size, size_t& padding);
        -: 1533:
        -: 1534:OpenDDS_Dcps_Export
        -: 1535:bool operator<<(Serializer& strm, const DDS::ReaderDataLifecycleQosPolicy& stru);
        -: 1536:
        -: 1537:OpenDDS_Dcps_Export
        -: 1538:bool operator>>(Serializer& strm, DDS::ReaderDataLifecycleQosPolicy& stru);
        -: 1539:
        -: 1540:}  }
        -: 1541:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1542:
        -: 1543:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1544:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1545:namespace OpenDDS { namespace DCPS {
        -: 1546:
        -: 1547:template<>
        -: 1548:OpenDDS_Dcps_Export
        -: 1549:const MetaStruct& getMetaStruct<DDS::ReaderDataLifecycleQosPolicy>();
        -: 1550:OpenDDS_Dcps_Export
        -: 1551:bool gen_skip_over(Serializer& ser, DDS::ReaderDataLifecycleQosPolicy*);
        -: 1552:
        -: 1553:}  }
        -: 1554:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1555:
        -: 1556:#endif
        -: 1557:
        -: 1558:/* End STRUCT: ReaderDataLifecycleQosPolicy */
        -: 1559:
        -: 1560:
        -: 1561:/* Begin STRUCT: DataReaderQos */
        -: 1562:
        -: 1563:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1564:namespace OpenDDS { namespace DCPS {
        -: 1565:
        -: 1566:OpenDDS_Dcps_Export
        -: 1567:void gen_find_size(const DDS::DataReaderQos& stru, size_t& size, size_t& padding);
        -: 1568:
        -: 1569:OpenDDS_Dcps_Export
        -: 1570:bool operator<<(Serializer& strm, const DDS::DataReaderQos& stru);
        -: 1571:
        -: 1572:OpenDDS_Dcps_Export
        -: 1573:bool operator>>(Serializer& strm, DDS::DataReaderQos& stru);
        -: 1574:
        -: 1575:}  }
        -: 1576:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1577:
        -: 1578:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1579:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1580:namespace OpenDDS { namespace DCPS {
        -: 1581:
        -: 1582:template<>
        -: 1583:OpenDDS_Dcps_Export
        -: 1584:const MetaStruct& getMetaStruct<DDS::DataReaderQos>();
        -: 1585:OpenDDS_Dcps_Export
        -: 1586:bool gen_skip_over(Serializer& ser, DDS::DataReaderQos*);
        -: 1587:
        -: 1588:}  }
        -: 1589:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1590:
        -: 1591:#endif
        -: 1592:
        -: 1593:/* End STRUCT: DataReaderQos */
        -: 1594:
        -: 1595:
        -: 1596:/* Begin STRUCT: SubscriberQos */
        -: 1597:
        -: 1598:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1599:namespace OpenDDS { namespace DCPS {
        -: 1600:
        -: 1601:OpenDDS_Dcps_Export
        -: 1602:void gen_find_size(const DDS::SubscriberQos& stru, size_t& size, size_t& padding);
        -: 1603:
        -: 1604:OpenDDS_Dcps_Export
        -: 1605:bool operator<<(Serializer& strm, const DDS::SubscriberQos& stru);
        -: 1606:
        -: 1607:OpenDDS_Dcps_Export
        -: 1608:bool operator>>(Serializer& strm, DDS::SubscriberQos& stru);
        -: 1609:
        -: 1610:}  }
        -: 1611:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1612:
        -: 1613:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1614:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1615:namespace OpenDDS { namespace DCPS {
        -: 1616:
        -: 1617:template<>
        -: 1618:OpenDDS_Dcps_Export
        -: 1619:const MetaStruct& getMetaStruct<DDS::SubscriberQos>();
        -: 1620:OpenDDS_Dcps_Export
        -: 1621:bool gen_skip_over(Serializer& ser, DDS::SubscriberQos*);
        -: 1622:
        -: 1623:}  }
        -: 1624:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1625:
        -: 1626:#endif
        -: 1627:
        -: 1628:/* End STRUCT: SubscriberQos */
        -: 1629:
        -: 1630:
        -: 1631:/* Begin STRUCT: DomainParticipantFactoryQos */
        -: 1632:
        -: 1633:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1634:namespace OpenDDS { namespace DCPS {
        -: 1635:
        -: 1636:OpenDDS_Dcps_Export
        -: 1637:void gen_find_size(const DDS::DomainParticipantFactoryQos& stru, size_t& size, size_t& padding);
        -: 1638:
        -: 1639:OpenDDS_Dcps_Export
        -: 1640:bool operator<<(Serializer& strm, const DDS::DomainParticipantFactoryQos& stru);
        -: 1641:
        -: 1642:OpenDDS_Dcps_Export
        -: 1643:bool operator>>(Serializer& strm, DDS::DomainParticipantFactoryQos& stru);
        -: 1644:
        -: 1645:}  }
        -: 1646:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1647:
        -: 1648:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1649:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1650:namespace OpenDDS { namespace DCPS {
        -: 1651:
        -: 1652:template<>
        -: 1653:OpenDDS_Dcps_Export
        -: 1654:const MetaStruct& getMetaStruct<DDS::DomainParticipantFactoryQos>();
        -: 1655:OpenDDS_Dcps_Export
        -: 1656:bool gen_skip_over(Serializer& ser, DDS::DomainParticipantFactoryQos*);
        -: 1657:
        -: 1658:}  }
        -: 1659:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1660:
        -: 1661:#endif
        -: 1662:
        -: 1663:/* End STRUCT: DomainParticipantFactoryQos */
        -: 1664:
        -: 1665:
        -: 1666:/* Begin STRUCT: DomainParticipantQos */
        -: 1667:
        -: 1668:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1669:namespace OpenDDS { namespace DCPS {
        -: 1670:
        -: 1671:OpenDDS_Dcps_Export
        -: 1672:void gen_find_size(const DDS::DomainParticipantQos& stru, size_t& size, size_t& padding);
        -: 1673:
        -: 1674:OpenDDS_Dcps_Export
        -: 1675:bool operator<<(Serializer& strm, const DDS::DomainParticipantQos& stru);
        -: 1676:
        -: 1677:OpenDDS_Dcps_Export
        -: 1678:bool operator>>(Serializer& strm, DDS::DomainParticipantQos& stru);
        -: 1679:
        -: 1680:}  }
        -: 1681:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1682:
        -: 1683:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1684:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1685:namespace OpenDDS { namespace DCPS {
        -: 1686:
        -: 1687:template<>
        -: 1688:OpenDDS_Dcps_Export
        -: 1689:const MetaStruct& getMetaStruct<DDS::DomainParticipantQos>();
        -: 1690:OpenDDS_Dcps_Export
        -: 1691:bool gen_skip_over(Serializer& ser, DDS::DomainParticipantQos*);
        -: 1692:
        -: 1693:}  }
        -: 1694:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1695:
        -: 1696:#endif
        -: 1697:
        -: 1698:/* End STRUCT: DomainParticipantQos */
        -: 1699:
        -: 1700:
        -: 1701:/* Begin STRUCT: BuiltinTopicKey_t */
        -: 1702:
        -: 1703:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1704:namespace OpenDDS { namespace DCPS {
        -: 1705:
        -: 1706:OpenDDS_Dcps_Export
        -: 1707:void gen_find_size(const DDS::BuiltinTopicKey_t& stru, size_t& size, size_t& padding);
        -: 1708:
        -: 1709:OpenDDS_Dcps_Export
        -: 1710:bool operator<<(Serializer& strm, const DDS::BuiltinTopicKey_t& stru);
        -: 1711:
        -: 1712:OpenDDS_Dcps_Export
        -: 1713:bool operator>>(Serializer& strm, DDS::BuiltinTopicKey_t& stru);
        -: 1714:
        -: 1715:}  }
        -: 1716:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1717:
        -: 1718:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1719:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1720:namespace OpenDDS { namespace DCPS {
        -: 1721:
        -: 1722:template<>
        -: 1723:OpenDDS_Dcps_Export
        -: 1724:const MetaStruct& getMetaStruct<DDS::BuiltinTopicKey_t>();
        -: 1725:OpenDDS_Dcps_Export
        -: 1726:bool gen_skip_over(Serializer& ser, DDS::BuiltinTopicKey_t*);
        -: 1727:
        -: 1728:}  }
        -: 1729:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1730:
        -: 1731:#endif
        -: 1732:
        -: 1733:/* End STRUCT: BuiltinTopicKey_t */
        -: 1734:
        -: 1735:
        -: 1736:/* Begin STRUCT: ParticipantBuiltinTopicData */
        -: 1737:
        -: 1738:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1739:namespace OpenDDS { namespace DCPS {
        -: 1740:
        -: 1741:OpenDDS_Dcps_Export
        -: 1742:void gen_find_size(const DDS::ParticipantBuiltinTopicData& stru, size_t& size, size_t& padding);
        -: 1743:
        -: 1744:OpenDDS_Dcps_Export
        -: 1745:bool operator<<(Serializer& strm, const DDS::ParticipantBuiltinTopicData& stru);
        -: 1746:
        -: 1747:OpenDDS_Dcps_Export
        -: 1748:bool operator>>(Serializer& strm, DDS::ParticipantBuiltinTopicData& stru);
        -: 1749:
        -: 1750:OpenDDS_Dcps_Export
        -: 1751:size_t gen_max_marshaled_size(const DDS::ParticipantBuiltinTopicData& stru, bool align);
        -: 1752:
        -: 1753:OpenDDS_Dcps_Export
        -: 1754:size_t gen_max_marshaled_size(KeyOnly<const DDS::ParticipantBuiltinTopicData> stru, bool align);
        -: 1755:
        -: 1756:OpenDDS_Dcps_Export
        -: 1757:void gen_find_size(KeyOnly<const DDS::ParticipantBuiltinTopicData> stru, size_t& size, size_t& padding);
        -: 1758:
        -: 1759:OpenDDS_Dcps_Export
        -: 1760:bool operator<<(Serializer& strm, KeyOnly<const DDS::ParticipantBuiltinTopicData> stru);
        -: 1761:
        -: 1762:OpenDDS_Dcps_Export
        -: 1763:bool operator>>(Serializer& strm, KeyOnly<DDS::ParticipantBuiltinTopicData> stru);
        -: 1764:
        -: 1765:template <>
        -: 1766:struct MarshalTraits<DDS::ParticipantBuiltinTopicData> {
        6: 1767:  static bool gen_is_bounded_size() { return false; }
        3: 1768:  static bool gen_is_bounded_key_size() { return true; }
        -: 1769:};
        -: 1770:}  }
        -: 1771:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1772:
        -: 1773:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1774:namespace DDS {
        -: 1775:// This structure supports use of std::map with a key
        -: 1776:// defined by one or more #pragma DCPS_DATA_KEY lines.
        -: 1777:struct OpenDDS_Dcps_Export ParticipantBuiltinTopicData_OpenDDS_KeyLessThan {
       12: 1778:  bool operator()(const DDS::ParticipantBuiltinTopicData& v1, const DDS::ParticipantBuiltinTopicData& v2) const
        -: 1779:  {
        -: 1780:    using ::operator<; // TAO::String_Manager's operator< is in global NS
       12: 1781:    if (v1.key.value[0] < v2.key.value[0]) return true;
       12: 1782:    if (v2.key.value[0] < v1.key.value[0]) return false;
       12: 1783:    if (v1.key.value[1] < v2.key.value[1]) return true;
        6: 1784:    if (v2.key.value[1] < v1.key.value[1]) return false;
    #####: 1785:    if (v1.key.value[2] < v2.key.value[2]) return true;
    #####: 1786:    if (v2.key.value[2] < v1.key.value[2]) return false;
    #####: 1787:    return false;
        -: 1788:  }
        -: 1789:};
        -: 1790:}
        -: 1791:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1792:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1793:namespace DDS {
        -: 1794:class ParticipantBuiltinTopicDataTypeSupportImpl;
        -: 1795:}
        -: 1796:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1797:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1798:namespace OpenDDS { namespace DCPS {
        -: 1799:template <>
        -: 1800:struct DDSTraits<DDS::ParticipantBuiltinTopicData> {
        -: 1801:  typedef DDS::ParticipantBuiltinTopicData MessageType;
        -: 1802:  typedef DDS::ParticipantBuiltinTopicDataSeq MessageSequenceType;
        -: 1803:  typedef DDS::ParticipantBuiltinTopicDataTypeSupport TypeSupportType;
        -: 1804:  typedef DDS::ParticipantBuiltinTopicDataTypeSupportImpl TypeSupportTypeImpl;
        -: 1805:  typedef DDS::ParticipantBuiltinTopicDataDataWriter DataWriterType;
        -: 1806:  typedef DDS::ParticipantBuiltinTopicDataDataReader DataReaderType;
        -: 1807:  typedef DDS::ParticipantBuiltinTopicData_OpenDDS_KeyLessThan LessThanType;
        -: 1808:
    #####: 1809:  static const char* type_name () { return "DDS::ParticipantBuiltinTopicData"; }
        3: 1810:  static bool gen_has_key () { return true; }
        -: 1811:
    #####: 1812:  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
        6: 1813:  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
        -: 1814:
        3: 1815:  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
    #####: 1816:  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
        -: 1817:};
        -: 1818:}  }
        -: 1819:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1820:
        -: 1821:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1822:namespace DDS {
        -: 1823:class OpenDDS_Dcps_Export ParticipantBuiltinTopicDataTypeSupportImpl
        -: 1824:  : public virtual OpenDDS::DCPS::LocalObject<ParticipantBuiltinTopicDataTypeSupport>
        -: 1825:  , public virtual OpenDDS::DCPS::TypeSupportImpl
        -: 1826:{
        -: 1827:public:
        -: 1828:  typedef OpenDDS::DCPS::DDSTraits<ParticipantBuiltinTopicData> TraitsType;
        -: 1829:  typedef ParticipantBuiltinTopicDataTypeSupport TypeSupportType;
        -: 1830:  typedef ParticipantBuiltinTopicDataTypeSupport::_var_type _var_type;
        -: 1831:  typedef ParticipantBuiltinTopicDataTypeSupport::_ptr_type _ptr_type;
        -: 1832:
        -: 1833:  ParticipantBuiltinTopicDataTypeSupportImpl() {}
        6: 1834:  virtual ~ParticipantBuiltinTopicDataTypeSupportImpl() {}
        -: 1835:
        -: 1836:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataWriter_ptr create_datawriter();
        -: 1837:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataReader_ptr create_datareader();
        -: 1838:#ifndef OPENDDS_NO_MULTI_TOPIC
        -: 1839:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataReader_ptr create_multitopic_datareader();
        -: 1840:#endif /* !OPENDDS_NO_MULTI_TOPIC */
        -: 1841:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1842:  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
        -: 1843:#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
        -: 1844:  virtual bool has_dcps_key();
        -: 1845:  const char* default_type_name() const;
        -: 1846:  static ParticipantBuiltinTopicDataTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
        -: 1847:};
        -: 1848:}
        -: 1849:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1850:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1851:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1852:namespace OpenDDS { namespace DCPS {
        -: 1853:
        -: 1854:template<>
        -: 1855:OpenDDS_Dcps_Export
        -: 1856:const MetaStruct& getMetaStruct<DDS::ParticipantBuiltinTopicData>();
        -: 1857:OpenDDS_Dcps_Export
        -: 1858:bool gen_skip_over(Serializer& ser, DDS::ParticipantBuiltinTopicData*);
        -: 1859:
        -: 1860:}  }
        -: 1861:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1862:
        -: 1863:#endif
        -: 1864:
        -: 1865:/* End STRUCT: ParticipantBuiltinTopicData */
        -: 1866:
        -: 1867:
        -: 1868:/* Begin STRUCT: PublicationBuiltinTopicData */
        -: 1869:
        -: 1870:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1871:namespace OpenDDS { namespace DCPS {
        -: 1872:
        -: 1873:OpenDDS_Dcps_Export
        -: 1874:void gen_find_size(const DDS::PublicationBuiltinTopicData& stru, size_t& size, size_t& padding);
        -: 1875:
        -: 1876:OpenDDS_Dcps_Export
        -: 1877:bool operator<<(Serializer& strm, const DDS::PublicationBuiltinTopicData& stru);
        -: 1878:
        -: 1879:OpenDDS_Dcps_Export
        -: 1880:bool operator>>(Serializer& strm, DDS::PublicationBuiltinTopicData& stru);
        -: 1881:
        -: 1882:OpenDDS_Dcps_Export
        -: 1883:size_t gen_max_marshaled_size(const DDS::PublicationBuiltinTopicData& stru, bool align);
        -: 1884:
        -: 1885:OpenDDS_Dcps_Export
        -: 1886:size_t gen_max_marshaled_size(KeyOnly<const DDS::PublicationBuiltinTopicData> stru, bool align);
        -: 1887:
        -: 1888:OpenDDS_Dcps_Export
        -: 1889:void gen_find_size(KeyOnly<const DDS::PublicationBuiltinTopicData> stru, size_t& size, size_t& padding);
        -: 1890:
        -: 1891:OpenDDS_Dcps_Export
        -: 1892:bool operator<<(Serializer& strm, KeyOnly<const DDS::PublicationBuiltinTopicData> stru);
        -: 1893:
        -: 1894:OpenDDS_Dcps_Export
        -: 1895:bool operator>>(Serializer& strm, KeyOnly<DDS::PublicationBuiltinTopicData> stru);
        -: 1896:
        -: 1897:template <>
        -: 1898:struct MarshalTraits<DDS::PublicationBuiltinTopicData> {
        6: 1899:  static bool gen_is_bounded_size() { return false; }
        3: 1900:  static bool gen_is_bounded_key_size() { return true; }
        -: 1901:};
        -: 1902:}  }
        -: 1903:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1904:
        -: 1905:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1906:namespace DDS {
        -: 1907:// This structure supports use of std::map with a key
        -: 1908:// defined by one or more #pragma DCPS_DATA_KEY lines.
        -: 1909:struct OpenDDS_Dcps_Export PublicationBuiltinTopicData_OpenDDS_KeyLessThan {
    #####: 1910:  bool operator()(const DDS::PublicationBuiltinTopicData& v1, const DDS::PublicationBuiltinTopicData& v2) const
        -: 1911:  {
        -: 1912:    using ::operator<; // TAO::String_Manager's operator< is in global NS
    #####: 1913:    if (v1.key.value[0] < v2.key.value[0]) return true;
    #####: 1914:    if (v2.key.value[0] < v1.key.value[0]) return false;
    #####: 1915:    if (v1.key.value[1] < v2.key.value[1]) return true;
    #####: 1916:    if (v2.key.value[1] < v1.key.value[1]) return false;
    #####: 1917:    if (v1.key.value[2] < v2.key.value[2]) return true;
    #####: 1918:    if (v2.key.value[2] < v1.key.value[2]) return false;
    #####: 1919:    return false;
        -: 1920:  }
        -: 1921:};
        -: 1922:}
        -: 1923:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1924:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1925:namespace DDS {
        -: 1926:class PublicationBuiltinTopicDataTypeSupportImpl;
        -: 1927:}
        -: 1928:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1929:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1930:namespace OpenDDS { namespace DCPS {
        -: 1931:template <>
        -: 1932:struct DDSTraits<DDS::PublicationBuiltinTopicData> {
        -: 1933:  typedef DDS::PublicationBuiltinTopicData MessageType;
        -: 1934:  typedef DDS::PublicationBuiltinTopicDataSeq MessageSequenceType;
        -: 1935:  typedef DDS::PublicationBuiltinTopicDataTypeSupport TypeSupportType;
        -: 1936:  typedef DDS::PublicationBuiltinTopicDataTypeSupportImpl TypeSupportTypeImpl;
        -: 1937:  typedef DDS::PublicationBuiltinTopicDataDataWriter DataWriterType;
        -: 1938:  typedef DDS::PublicationBuiltinTopicDataDataReader DataReaderType;
        -: 1939:  typedef DDS::PublicationBuiltinTopicData_OpenDDS_KeyLessThan LessThanType;
        -: 1940:
    #####: 1941:  static const char* type_name () { return "DDS::PublicationBuiltinTopicData"; }
        3: 1942:  static bool gen_has_key () { return true; }
        -: 1943:
    #####: 1944:  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
        3: 1945:  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
        -: 1946:
        3: 1947:  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
    #####: 1948:  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
        -: 1949:};
        -: 1950:}  }
        -: 1951:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1952:
        -: 1953:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1954:namespace DDS {
        -: 1955:class OpenDDS_Dcps_Export PublicationBuiltinTopicDataTypeSupportImpl
        -: 1956:  : public virtual OpenDDS::DCPS::LocalObject<PublicationBuiltinTopicDataTypeSupport>
        -: 1957:  , public virtual OpenDDS::DCPS::TypeSupportImpl
        -: 1958:{
        -: 1959:public:
        -: 1960:  typedef OpenDDS::DCPS::DDSTraits<PublicationBuiltinTopicData> TraitsType;
        -: 1961:  typedef PublicationBuiltinTopicDataTypeSupport TypeSupportType;
        -: 1962:  typedef PublicationBuiltinTopicDataTypeSupport::_var_type _var_type;
        -: 1963:  typedef PublicationBuiltinTopicDataTypeSupport::_ptr_type _ptr_type;
        -: 1964:
        -: 1965:  PublicationBuiltinTopicDataTypeSupportImpl() {}
        6: 1966:  virtual ~PublicationBuiltinTopicDataTypeSupportImpl() {}
        -: 1967:
        -: 1968:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataWriter_ptr create_datawriter();
        -: 1969:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataReader_ptr create_datareader();
        -: 1970:#ifndef OPENDDS_NO_MULTI_TOPIC
        -: 1971:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataReader_ptr create_multitopic_datareader();
        -: 1972:#endif /* !OPENDDS_NO_MULTI_TOPIC */
        -: 1973:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1974:  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
        -: 1975:#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
        -: 1976:  virtual bool has_dcps_key();
        -: 1977:  const char* default_type_name() const;
        -: 1978:  static PublicationBuiltinTopicDataTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
        -: 1979:};
        -: 1980:}
        -: 1981:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1982:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 1983:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 1984:namespace OpenDDS { namespace DCPS {
        -: 1985:
        -: 1986:template<>
        -: 1987:OpenDDS_Dcps_Export
        -: 1988:const MetaStruct& getMetaStruct<DDS::PublicationBuiltinTopicData>();
        -: 1989:OpenDDS_Dcps_Export
        -: 1990:bool gen_skip_over(Serializer& ser, DDS::PublicationBuiltinTopicData*);
        -: 1991:
        -: 1992:}  }
        -: 1993:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 1994:
        -: 1995:#endif
        -: 1996:
        -: 1997:/* End STRUCT: PublicationBuiltinTopicData */
        -: 1998:
        -: 1999:
        -: 2000:/* Begin STRUCT: SubscriptionBuiltinTopicData */
        -: 2001:
        -: 2002:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2003:namespace OpenDDS { namespace DCPS {
        -: 2004:
        -: 2005:OpenDDS_Dcps_Export
        -: 2006:void gen_find_size(const DDS::SubscriptionBuiltinTopicData& stru, size_t& size, size_t& padding);
        -: 2007:
        -: 2008:OpenDDS_Dcps_Export
        -: 2009:bool operator<<(Serializer& strm, const DDS::SubscriptionBuiltinTopicData& stru);
        -: 2010:
        -: 2011:OpenDDS_Dcps_Export
        -: 2012:bool operator>>(Serializer& strm, DDS::SubscriptionBuiltinTopicData& stru);
        -: 2013:
        -: 2014:OpenDDS_Dcps_Export
        -: 2015:size_t gen_max_marshaled_size(const DDS::SubscriptionBuiltinTopicData& stru, bool align);
        -: 2016:
        -: 2017:OpenDDS_Dcps_Export
        -: 2018:size_t gen_max_marshaled_size(KeyOnly<const DDS::SubscriptionBuiltinTopicData> stru, bool align);
        -: 2019:
        -: 2020:OpenDDS_Dcps_Export
        -: 2021:void gen_find_size(KeyOnly<const DDS::SubscriptionBuiltinTopicData> stru, size_t& size, size_t& padding);
        -: 2022:
        -: 2023:OpenDDS_Dcps_Export
        -: 2024:bool operator<<(Serializer& strm, KeyOnly<const DDS::SubscriptionBuiltinTopicData> stru);
        -: 2025:
        -: 2026:OpenDDS_Dcps_Export
        -: 2027:bool operator>>(Serializer& strm, KeyOnly<DDS::SubscriptionBuiltinTopicData> stru);
        -: 2028:
        -: 2029:template <>
        -: 2030:struct MarshalTraits<DDS::SubscriptionBuiltinTopicData> {
        6: 2031:  static bool gen_is_bounded_size() { return false; }
        3: 2032:  static bool gen_is_bounded_key_size() { return true; }
        -: 2033:};
        -: 2034:}  }
        -: 2035:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2036:
        -: 2037:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2038:namespace DDS {
        -: 2039:// This structure supports use of std::map with a key
        -: 2040:// defined by one or more #pragma DCPS_DATA_KEY lines.
        -: 2041:struct OpenDDS_Dcps_Export SubscriptionBuiltinTopicData_OpenDDS_KeyLessThan {
    #####: 2042:  bool operator()(const DDS::SubscriptionBuiltinTopicData& v1, const DDS::SubscriptionBuiltinTopicData& v2) const
        -: 2043:  {
        -: 2044:    using ::operator<; // TAO::String_Manager's operator< is in global NS
    #####: 2045:    if (v1.key.value[0] < v2.key.value[0]) return true;
    #####: 2046:    if (v2.key.value[0] < v1.key.value[0]) return false;
    #####: 2047:    if (v1.key.value[1] < v2.key.value[1]) return true;
    #####: 2048:    if (v2.key.value[1] < v1.key.value[1]) return false;
    #####: 2049:    if (v1.key.value[2] < v2.key.value[2]) return true;
    #####: 2050:    if (v2.key.value[2] < v1.key.value[2]) return false;
    #####: 2051:    return false;
        -: 2052:  }
        -: 2053:};
        -: 2054:}
        -: 2055:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2056:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2057:namespace DDS {
        -: 2058:class SubscriptionBuiltinTopicDataTypeSupportImpl;
        -: 2059:}
        -: 2060:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2061:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2062:namespace OpenDDS { namespace DCPS {
        -: 2063:template <>
        -: 2064:struct DDSTraits<DDS::SubscriptionBuiltinTopicData> {
        -: 2065:  typedef DDS::SubscriptionBuiltinTopicData MessageType;
        -: 2066:  typedef DDS::SubscriptionBuiltinTopicDataSeq MessageSequenceType;
        -: 2067:  typedef DDS::SubscriptionBuiltinTopicDataTypeSupport TypeSupportType;
        -: 2068:  typedef DDS::SubscriptionBuiltinTopicDataTypeSupportImpl TypeSupportTypeImpl;
        -: 2069:  typedef DDS::SubscriptionBuiltinTopicDataDataWriter DataWriterType;
        -: 2070:  typedef DDS::SubscriptionBuiltinTopicDataDataReader DataReaderType;
        -: 2071:  typedef DDS::SubscriptionBuiltinTopicData_OpenDDS_KeyLessThan LessThanType;
        -: 2072:
    #####: 2073:  static const char* type_name () { return "DDS::SubscriptionBuiltinTopicData"; }
        3: 2074:  static bool gen_has_key () { return true; }
        -: 2075:
    #####: 2076:  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
        3: 2077:  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
        -: 2078:
        3: 2079:  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
    #####: 2080:  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
        -: 2081:};
        -: 2082:}  }
        -: 2083:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2084:
        -: 2085:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2086:namespace DDS {
        -: 2087:class OpenDDS_Dcps_Export SubscriptionBuiltinTopicDataTypeSupportImpl
        -: 2088:  : public virtual OpenDDS::DCPS::LocalObject<SubscriptionBuiltinTopicDataTypeSupport>
        -: 2089:  , public virtual OpenDDS::DCPS::TypeSupportImpl
        -: 2090:{
        -: 2091:public:
        -: 2092:  typedef OpenDDS::DCPS::DDSTraits<SubscriptionBuiltinTopicData> TraitsType;
        -: 2093:  typedef SubscriptionBuiltinTopicDataTypeSupport TypeSupportType;
        -: 2094:  typedef SubscriptionBuiltinTopicDataTypeSupport::_var_type _var_type;
        -: 2095:  typedef SubscriptionBuiltinTopicDataTypeSupport::_ptr_type _ptr_type;
        -: 2096:
        -: 2097:  SubscriptionBuiltinTopicDataTypeSupportImpl() {}
        6: 2098:  virtual ~SubscriptionBuiltinTopicDataTypeSupportImpl() {}
        -: 2099:
        -: 2100:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataWriter_ptr create_datawriter();
        -: 2101:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataReader_ptr create_datareader();
        -: 2102:#ifndef OPENDDS_NO_MULTI_TOPIC
        -: 2103:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataReader_ptr create_multitopic_datareader();
        -: 2104:#endif /* !OPENDDS_NO_MULTI_TOPIC */
        -: 2105:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2106:  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
        -: 2107:#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
        -: 2108:  virtual bool has_dcps_key();
        -: 2109:  const char* default_type_name() const;
        -: 2110:  static SubscriptionBuiltinTopicDataTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
        -: 2111:};
        -: 2112:}
        -: 2113:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2114:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2115:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2116:namespace OpenDDS { namespace DCPS {
        -: 2117:
        -: 2118:template<>
        -: 2119:OpenDDS_Dcps_Export
        -: 2120:const MetaStruct& getMetaStruct<DDS::SubscriptionBuiltinTopicData>();
        -: 2121:OpenDDS_Dcps_Export
        -: 2122:bool gen_skip_over(Serializer& ser, DDS::SubscriptionBuiltinTopicData*);
        -: 2123:
        -: 2124:}  }
        -: 2125:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2126:
        -: 2127:#endif
        -: 2128:
        -: 2129:/* End STRUCT: SubscriptionBuiltinTopicData */
        -: 2130:
        -: 2131:
        -: 2132:/* Begin STRUCT: TopicBuiltinTopicData */
        -: 2133:
        -: 2134:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2135:namespace OpenDDS { namespace DCPS {
        -: 2136:
        -: 2137:OpenDDS_Dcps_Export
        -: 2138:void gen_find_size(const DDS::TopicBuiltinTopicData& stru, size_t& size, size_t& padding);
        -: 2139:
        -: 2140:OpenDDS_Dcps_Export
        -: 2141:bool operator<<(Serializer& strm, const DDS::TopicBuiltinTopicData& stru);
        -: 2142:
        -: 2143:OpenDDS_Dcps_Export
        -: 2144:bool operator>>(Serializer& strm, DDS::TopicBuiltinTopicData& stru);
        -: 2145:
        -: 2146:OpenDDS_Dcps_Export
        -: 2147:size_t gen_max_marshaled_size(const DDS::TopicBuiltinTopicData& stru, bool align);
        -: 2148:
        -: 2149:OpenDDS_Dcps_Export
        -: 2150:size_t gen_max_marshaled_size(KeyOnly<const DDS::TopicBuiltinTopicData> stru, bool align);
        -: 2151:
        -: 2152:OpenDDS_Dcps_Export
        -: 2153:void gen_find_size(KeyOnly<const DDS::TopicBuiltinTopicData> stru, size_t& size, size_t& padding);
        -: 2154:
        -: 2155:OpenDDS_Dcps_Export
        -: 2156:bool operator<<(Serializer& strm, KeyOnly<const DDS::TopicBuiltinTopicData> stru);
        -: 2157:
        -: 2158:OpenDDS_Dcps_Export
        -: 2159:bool operator>>(Serializer& strm, KeyOnly<DDS::TopicBuiltinTopicData> stru);
        -: 2160:
        -: 2161:template <>
        -: 2162:struct MarshalTraits<DDS::TopicBuiltinTopicData> {
        6: 2163:  static bool gen_is_bounded_size() { return false; }
        3: 2164:  static bool gen_is_bounded_key_size() { return true; }
        -: 2165:};
        -: 2166:}  }
        -: 2167:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2168:
        -: 2169:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2170:namespace DDS {
        -: 2171:// This structure supports use of std::map with a key
        -: 2172:// defined by one or more #pragma DCPS_DATA_KEY lines.
        -: 2173:struct OpenDDS_Dcps_Export TopicBuiltinTopicData_OpenDDS_KeyLessThan {
       12: 2174:  bool operator()(const DDS::TopicBuiltinTopicData& v1, const DDS::TopicBuiltinTopicData& v2) const
        -: 2175:  {
        -: 2176:    using ::operator<; // TAO::String_Manager's operator< is in global NS
       12: 2177:    if (v1.key.value[0] < v2.key.value[0]) return true;
       12: 2178:    if (v2.key.value[0] < v1.key.value[0]) return false;
       12: 2179:    if (v1.key.value[1] < v2.key.value[1]) return true;
        3: 2180:    if (v2.key.value[1] < v1.key.value[1]) return false;
    #####: 2181:    if (v1.key.value[2] < v2.key.value[2]) return true;
    #####: 2182:    if (v2.key.value[2] < v1.key.value[2]) return false;
    #####: 2183:    return false;
        -: 2184:  }
        -: 2185:};
        -: 2186:}
        -: 2187:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2188:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2189:namespace DDS {
        -: 2190:class TopicBuiltinTopicDataTypeSupportImpl;
        -: 2191:}
        -: 2192:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2193:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2194:namespace OpenDDS { namespace DCPS {
        -: 2195:template <>
        -: 2196:struct DDSTraits<DDS::TopicBuiltinTopicData> {
        -: 2197:  typedef DDS::TopicBuiltinTopicData MessageType;
        -: 2198:  typedef DDS::TopicBuiltinTopicDataSeq MessageSequenceType;
        -: 2199:  typedef DDS::TopicBuiltinTopicDataTypeSupport TypeSupportType;
        -: 2200:  typedef DDS::TopicBuiltinTopicDataTypeSupportImpl TypeSupportTypeImpl;
        -: 2201:  typedef DDS::TopicBuiltinTopicDataDataWriter DataWriterType;
        -: 2202:  typedef DDS::TopicBuiltinTopicDataDataReader DataReaderType;
        -: 2203:  typedef DDS::TopicBuiltinTopicData_OpenDDS_KeyLessThan LessThanType;
        -: 2204:
    #####: 2205:  static const char* type_name () { return "DDS::TopicBuiltinTopicData"; }
        3: 2206:  static bool gen_has_key () { return true; }
        -: 2207:
    #####: 2208:  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
        6: 2209:  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
        -: 2210:
        3: 2211:  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
    #####: 2212:  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
        -: 2213:};
        -: 2214:}  }
        -: 2215:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2216:
        -: 2217:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2218:namespace DDS {
        -: 2219:class OpenDDS_Dcps_Export TopicBuiltinTopicDataTypeSupportImpl
        -: 2220:  : public virtual OpenDDS::DCPS::LocalObject<TopicBuiltinTopicDataTypeSupport>
        -: 2221:  , public virtual OpenDDS::DCPS::TypeSupportImpl
        -: 2222:{
        -: 2223:public:
        -: 2224:  typedef OpenDDS::DCPS::DDSTraits<TopicBuiltinTopicData> TraitsType;
        -: 2225:  typedef TopicBuiltinTopicDataTypeSupport TypeSupportType;
        -: 2226:  typedef TopicBuiltinTopicDataTypeSupport::_var_type _var_type;
        -: 2227:  typedef TopicBuiltinTopicDataTypeSupport::_ptr_type _ptr_type;
        -: 2228:
        -: 2229:  TopicBuiltinTopicDataTypeSupportImpl() {}
        6: 2230:  virtual ~TopicBuiltinTopicDataTypeSupportImpl() {}
        -: 2231:
        -: 2232:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataWriter_ptr create_datawriter();
        -: 2233:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataReader_ptr create_datareader();
        -: 2234:#ifndef OPENDDS_NO_MULTI_TOPIC
        -: 2235:  virtual OPENDDS_VERSIONED_NAMESPACE_NAME::DDS::DataReader_ptr create_multitopic_datareader();
        -: 2236:#endif /* !OPENDDS_NO_MULTI_TOPIC */
        -: 2237:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2238:  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
        -: 2239:#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
        -: 2240:  virtual bool has_dcps_key();
        -: 2241:  const char* default_type_name() const;
        -: 2242:  static TopicBuiltinTopicDataTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
        -: 2243:};
        -: 2244:}
        -: 2245:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2246:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2247:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2248:namespace OpenDDS { namespace DCPS {
        -: 2249:
        -: 2250:template<>
        -: 2251:OpenDDS_Dcps_Export
        -: 2252:const MetaStruct& getMetaStruct<DDS::TopicBuiltinTopicData>();
        -: 2253:OpenDDS_Dcps_Export
        -: 2254:bool gen_skip_over(Serializer& ser, DDS::TopicBuiltinTopicData*);
        -: 2255:
        -: 2256:}  }
        -: 2257:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2258:
        -: 2259:#endif
        -: 2260:
        -: 2261:/* End STRUCT: TopicBuiltinTopicData */
        -: 2262:
        -: 2263:
        -: 2264:/* Begin TYPEDEF: SampleStateKind */
        -: 2265:
        -: 2266:
        -: 2267:/* End TYPEDEF: SampleStateKind */
        -: 2268:
        -: 2269:
        -: 2270:/* Begin CONST: READ_SAMPLE_STATE */
        -: 2271:
        -: 2272:
        -: 2273:/* End CONST: READ_SAMPLE_STATE */
        -: 2274:
        -: 2275:
        -: 2276:/* Begin CONST: NOT_READ_SAMPLE_STATE */
        -: 2277:
        -: 2278:
        -: 2279:/* End CONST: NOT_READ_SAMPLE_STATE */
        -: 2280:
        -: 2281:
        -: 2282:/* Begin TYPEDEF: SampleStateMask */
        -: 2283:
        -: 2284:
        -: 2285:/* End TYPEDEF: SampleStateMask */
        -: 2286:
        -: 2287:
        -: 2288:/* Begin CONST: ANY_SAMPLE_STATE */
        -: 2289:
        -: 2290:
        -: 2291:/* End CONST: ANY_SAMPLE_STATE */
        -: 2292:
        -: 2293:
        -: 2294:/* Begin TYPEDEF: ViewStateKind */
        -: 2295:
        -: 2296:
        -: 2297:/* End TYPEDEF: ViewStateKind */
        -: 2298:
        -: 2299:
        -: 2300:/* Begin CONST: NEW_VIEW_STATE */
        -: 2301:
        -: 2302:
        -: 2303:/* End CONST: NEW_VIEW_STATE */
        -: 2304:
        -: 2305:
        -: 2306:/* Begin CONST: NOT_NEW_VIEW_STATE */
        -: 2307:
        -: 2308:
        -: 2309:/* End CONST: NOT_NEW_VIEW_STATE */
        -: 2310:
        -: 2311:
        -: 2312:/* Begin TYPEDEF: ViewStateMask */
        -: 2313:
        -: 2314:
        -: 2315:/* End TYPEDEF: ViewStateMask */
        -: 2316:
        -: 2317:
        -: 2318:/* Begin CONST: ANY_VIEW_STATE */
        -: 2319:
        -: 2320:
        -: 2321:/* End CONST: ANY_VIEW_STATE */
        -: 2322:
        -: 2323:
        -: 2324:/* Begin TYPEDEF: InstanceStateKind */
        -: 2325:
        -: 2326:
        -: 2327:/* End TYPEDEF: InstanceStateKind */
        -: 2328:
        -: 2329:
        -: 2330:/* Begin CONST: ALIVE_INSTANCE_STATE */
        -: 2331:
        -: 2332:
        -: 2333:/* End CONST: ALIVE_INSTANCE_STATE */
        -: 2334:
        -: 2335:
        -: 2336:/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */
        -: 2337:
        -: 2338:
        -: 2339:/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */
        -: 2340:
        -: 2341:
        -: 2342:/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */
        -: 2343:
        -: 2344:
        -: 2345:/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */
        -: 2346:
        -: 2347:
        -: 2348:/* Begin TYPEDEF: InstanceStateMask */
        -: 2349:
        -: 2350:
        -: 2351:/* End TYPEDEF: InstanceStateMask */
        -: 2352:
        -: 2353:
        -: 2354:/* Begin CONST: ANY_INSTANCE_STATE */
        -: 2355:
        -: 2356:
        -: 2357:/* End CONST: ANY_INSTANCE_STATE */
        -: 2358:
        -: 2359:
        -: 2360:/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */
        -: 2361:
        -: 2362:
        -: 2363:/* End CONST: NOT_ALIVE_INSTANCE_STATE */
        -: 2364:
        -: 2365:
        -: 2366:/* Begin STRUCT: Time_t */
        -: 2367:
        -: 2368:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2369:namespace OpenDDS { namespace DCPS {
        -: 2370:
        -: 2371:OpenDDS_Dcps_Export
        -: 2372:void gen_find_size(const DDS::Time_t& stru, size_t& size, size_t& padding);
        -: 2373:
        -: 2374:OpenDDS_Dcps_Export
        -: 2375:bool operator<<(Serializer& strm, const DDS::Time_t& stru);
        -: 2376:
        -: 2377:OpenDDS_Dcps_Export
        -: 2378:bool operator>>(Serializer& strm, DDS::Time_t& stru);
        -: 2379:
        -: 2380:}  }
        -: 2381:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2382:
        -: 2383:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2384:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2385:namespace OpenDDS { namespace DCPS {
        -: 2386:
        -: 2387:template<>
        -: 2388:OpenDDS_Dcps_Export
        -: 2389:const MetaStruct& getMetaStruct<DDS::Time_t>();
        -: 2390:OpenDDS_Dcps_Export
        -: 2391:bool gen_skip_over(Serializer& ser, DDS::Time_t*);
        -: 2392:
        -: 2393:}  }
        -: 2394:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2395:
        -: 2396:#endif
        -: 2397:
        -: 2398:/* End STRUCT: Time_t */
        -: 2399:
        -: 2400:
        -: 2401:/* Begin CONST: TIME_INVALID_SEC */
        -: 2402:
        -: 2403:
        -: 2404:/* End CONST: TIME_INVALID_SEC */
        -: 2405:
        -: 2406:
        -: 2407:/* Begin CONST: TIME_INVALID_NSEC */
        -: 2408:
        -: 2409:
        -: 2410:/* End CONST: TIME_INVALID_NSEC */
        -: 2411:
        -: 2412:
        -: 2413:/* Begin STRUCT: SampleInfo */
        -: 2414:
        -: 2415:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2416:namespace OpenDDS { namespace DCPS {
        -: 2417:
        -: 2418:OpenDDS_Dcps_Export
        -: 2419:void gen_find_size(const DDS::SampleInfo& stru, size_t& size, size_t& padding);
        -: 2420:
        -: 2421:OpenDDS_Dcps_Export
        -: 2422:bool operator<<(Serializer& strm, const DDS::SampleInfo& stru);
        -: 2423:
        -: 2424:OpenDDS_Dcps_Export
        -: 2425:bool operator>>(Serializer& strm, DDS::SampleInfo& stru);
        -: 2426:
        -: 2427:}  }
        -: 2428:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2429:
        -: 2430:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2431:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2432:namespace OpenDDS { namespace DCPS {
        -: 2433:
        -: 2434:template<>
        -: 2435:OpenDDS_Dcps_Export
        -: 2436:const MetaStruct& getMetaStruct<DDS::SampleInfo>();
        -: 2437:OpenDDS_Dcps_Export
        -: 2438:bool gen_skip_over(Serializer& ser, DDS::SampleInfo*);
        -: 2439:
        -: 2440:}  }
        -: 2441:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2442:
        -: 2443:#endif
        -: 2444:
        -: 2445:/* End STRUCT: SampleInfo */
        -: 2446:
        -: 2447:
        -: 2448:/* Begin TYPEDEF: SampleInfoSeq */
        -: 2449:
        -: 2450:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2451:namespace OpenDDS { namespace DCPS {
        -: 2452:
        -: 2453:OpenDDS_Dcps_Export
        -: 2454:void gen_find_size(const DDS::SampleInfoSeq& seq, size_t& size, size_t& padding);
        -: 2455:
        -: 2456:OpenDDS_Dcps_Export
        -: 2457:bool operator<<(Serializer& strm, const DDS::SampleInfoSeq& seq);
        -: 2458:
        -: 2459:OpenDDS_Dcps_Export
        -: 2460:bool operator>>(Serializer& strm, DDS::SampleInfoSeq& seq);
        -: 2461:
        -: 2462:}  }
        -: 2463:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2464:
        -: 2465:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -: 2466:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -: 2467:namespace OpenDDS { namespace DCPS {
        -: 2468:
        -: 2469:OpenDDS_Dcps_Export
        -: 2470:bool gen_skip_over(Serializer& ser, DDS::SampleInfoSeq*);
        -: 2471:
        -: 2472:}  }
        -: 2473:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -: 2474:
        -: 2475:#endif
        -: 2476:
        -: 2477:/* End TYPEDEF: SampleInfoSeq */
        -: 2478:
        -: 2479:/* End MODULE: DDS */
        -: 2480:#endif /* OPENDDS_IDL_GENERATED_DDSDCPSCORETYPESUPPORTIMPL_H_JJZ15W */
