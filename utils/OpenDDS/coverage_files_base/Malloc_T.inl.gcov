        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/Malloc_T.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id$
        -:    4:
        -:    5:#include "ace/OS_NS_string.h"
        -:    6:
        -:    7:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:    8:
        -:    9:template <class T> ACE_INLINE T *
    #####:   10:ACE_Cached_Mem_Pool_Node<T>::addr (void)
        -:   11:{
        -:   12:  // This should be done using a single reinterpret_cast, but Sun/CC
        -:   13:  // (4.2) gets awfully confused when T is a char[20] (and maybe other
        -:   14:  // types).
    #####:   15:  return static_cast<T *> (static_cast <void *> (this));
        -:   16:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE4addrEv:
    #####:   10:ACE_Cached_Mem_Pool_Node<T>::addr (void)
        -:   11:{
        -:   12:  // This should be done using a single reinterpret_cast, but Sun/CC
        -:   13:  // (4.2) gets awfully confused when T is a char[20] (and maybe other
        -:   14:  // types).
    #####:   15:  return static_cast<T *> (static_cast <void *> (this));
        -:   16:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE4addrEv:
    #####:   10:ACE_Cached_Mem_Pool_Node<T>::addr (void)
        -:   11:{
        -:   12:  // This should be done using a single reinterpret_cast, but Sun/CC
        -:   13:  // (4.2) gets awfully confused when T is a char[20] (and maybe other
        -:   14:  // types).
    #####:   15:  return static_cast<T *> (static_cast <void *> (this));
        -:   16:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE4addrEv:
    #####:   10:ACE_Cached_Mem_Pool_Node<T>::addr (void)
        -:   11:{
        -:   12:  // This should be done using a single reinterpret_cast, but Sun/CC
        -:   13:  // (4.2) gets awfully confused when T is a char[20] (and maybe other
        -:   14:  // types).
    #####:   15:  return static_cast<T *> (static_cast <void *> (this));
        -:   16:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE4addrEv:
    #####:   10:ACE_Cached_Mem_Pool_Node<T>::addr (void)
        -:   11:{
        -:   12:  // This should be done using a single reinterpret_cast, but Sun/CC
        -:   13:  // (4.2) gets awfully confused when T is a char[20] (and maybe other
        -:   14:  // types).
    #####:   15:  return static_cast<T *> (static_cast <void *> (this));
        -:   16:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE4addrEv:
    #####:   10:ACE_Cached_Mem_Pool_Node<T>::addr (void)
        -:   11:{
        -:   12:  // This should be done using a single reinterpret_cast, but Sun/CC
        -:   13:  // (4.2) gets awfully confused when T is a char[20] (and maybe other
        -:   14:  // types).
    #####:   15:  return static_cast<T *> (static_cast <void *> (this));
        -:   16:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE4addrEv:
    #####:   10:ACE_Cached_Mem_Pool_Node<T>::addr (void)
        -:   11:{
        -:   12:  // This should be done using a single reinterpret_cast, but Sun/CC
        -:   13:  // (4.2) gets awfully confused when T is a char[20] (and maybe other
        -:   14:  // types).
    #####:   15:  return static_cast<T *> (static_cast <void *> (this));
        -:   16:}
------------------
        -:   17:
        -:   18:template <class T> ACE_INLINE ACE_Cached_Mem_Pool_Node<T> *
    #####:   19:ACE_Cached_Mem_Pool_Node<T>::get_next (void)
        -:   20:{
    #####:   21:  return this->next_;
        -:   22:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE8get_nextEv:
    #####:   19:ACE_Cached_Mem_Pool_Node<T>::get_next (void)
        -:   20:{
    #####:   21:  return this->next_;
        -:   22:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE8get_nextEv:
    #####:   19:ACE_Cached_Mem_Pool_Node<T>::get_next (void)
        -:   20:{
    #####:   21:  return this->next_;
        -:   22:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE8get_nextEv:
    #####:   19:ACE_Cached_Mem_Pool_Node<T>::get_next (void)
        -:   20:{
    #####:   21:  return this->next_;
        -:   22:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE8get_nextEv:
    #####:   19:ACE_Cached_Mem_Pool_Node<T>::get_next (void)
        -:   20:{
    #####:   21:  return this->next_;
        -:   22:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE8get_nextEv:
    #####:   19:ACE_Cached_Mem_Pool_Node<T>::get_next (void)
        -:   20:{
    #####:   21:  return this->next_;
        -:   22:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE8get_nextEv:
    #####:   19:ACE_Cached_Mem_Pool_Node<T>::get_next (void)
        -:   20:{
    #####:   21:  return this->next_;
        -:   22:}
------------------
        -:   23:
        -:   24:template <class T> ACE_INLINE void
    #####:   25:ACE_Cached_Mem_Pool_Node<T>::set_next (ACE_Cached_Mem_Pool_Node<T> *ptr)
        -:   26:{
    #####:   27:  this->next_ = ptr;
    #####:   28:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE8set_nextEPS1_:
    #####:   25:ACE_Cached_Mem_Pool_Node<T>::set_next (ACE_Cached_Mem_Pool_Node<T> *ptr)
        -:   26:{
    #####:   27:  this->next_ = ptr;
    #####:   28:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE8set_nextEPS1_:
    #####:   25:ACE_Cached_Mem_Pool_Node<T>::set_next (ACE_Cached_Mem_Pool_Node<T> *ptr)
        -:   26:{
    #####:   27:  this->next_ = ptr;
    #####:   28:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE8set_nextEPS1_:
    #####:   25:ACE_Cached_Mem_Pool_Node<T>::set_next (ACE_Cached_Mem_Pool_Node<T> *ptr)
        -:   26:{
    #####:   27:  this->next_ = ptr;
    #####:   28:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE8set_nextEPS1_:
    #####:   25:ACE_Cached_Mem_Pool_Node<T>::set_next (ACE_Cached_Mem_Pool_Node<T> *ptr)
        -:   26:{
    #####:   27:  this->next_ = ptr;
    #####:   28:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI14ACE_Data_BlockE8set_nextEPS1_:
    #####:   25:ACE_Cached_Mem_Pool_Node<T>::set_next (ACE_Cached_Mem_Pool_Node<T> *ptr)
        -:   26:{
    #####:   27:  this->next_ = ptr;
    #####:   28:}
------------------
_ZN24ACE_Cached_Mem_Pool_NodeI17ACE_Message_BlockE8set_nextEPS1_:
    #####:   25:ACE_Cached_Mem_Pool_Node<T>::set_next (ACE_Cached_Mem_Pool_Node<T> *ptr)
        -:   26:{
    #####:   27:  this->next_ = ptr;
    #####:   28:}
------------------
        -:   29:
        -:   30:ACE_ALLOC_HOOK_DEFINE_Tc(ACE_Cached_Mem_Pool_Node)
        -:   31:
        -:   32:template <class T, class ACE_LOCK> ACE_INLINE size_t
        -:   33:ACE_Cached_Allocator<T, ACE_LOCK>::pool_depth (void)
        -:   34:{
        -:   35:  return this->free_list_.size ();
        -:   36:}
        -:   37:
        -:   38:template <class ACE_LOCK> ACE_INLINE size_t
        -:   39:ACE_Dynamic_Cached_Allocator<ACE_LOCK>::pool_depth (void)
        -:   40:{
        -:   41:  return this->free_list_.size ();
        -:   42:}
        -:   43:
        -:   44:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE int
        -:   45:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::ref_counter (void)
        -:   46:{
        -:   47:  ACE_GUARD_RETURN (ACE_LOCK, ace_mon, *this->lock_, -1);
        -:   48:  if (this->cb_ptr_ != 0)
        -:   49:    return this->cb_ptr_->ref_counter_;
        -:   50:
        -:   51:  return -1;
        -:   52:}
        -:   53:
        -:   54:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE int
        -:   55:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::bad (void)
        -:   56:{
        -:   57:  return this->bad_flag_;
        -:   58:}
        -:   59:
        -:   60:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE int
        -:   61:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::release (int close)
        -:   62:{
        -:   63:  ACE_GUARD_RETURN (ACE_LOCK, ace_mon, *this->lock_, -1);
        -:   64:  if (this->cb_ptr_ != 0)
        -:   65:    {
        -:   66:      int const retv = --this->cb_ptr_->ref_counter_;
        -:   67:
        -:   68:      if (close)
        -:   69:        this->memory_pool_.release (0);
        -:   70:
        -:   71:      if (retv == 0)
        -:   72:        {
        -:   73:          ace_mon.release ();
        -:   74:          this->remove ();
        -:   75:        }
        -:   76:
        -:   77:      return retv;
        -:   78:    }
        -:   79:  return -1;
        -:   80:}
        -:   81:
        -:   82:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE ACE_MEM_POOL &
        -:   83:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::memory_pool (void)
        -:   84:{
        -:   85:  ACE_TRACE ("ACE_Malloc_T<MEMORY_POOL, ACE_LOCK, ACE_CB>::memory_pool");
        -:   86:  return this->memory_pool_;
        -:   87:}
        -:   88:
        -:   89:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE int
        -:   90:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::sync (ssize_t len,
        -:   91:                                                    int flags)
        -:   92:{
        -:   93:  ACE_TRACE ("ACE_Malloc_T<MEMORY_POOL, ACE_LOCK, ACE_CB>::sync");
        -:   94:  return this->memory_pool_.sync (len, flags);
        -:   95:}
        -:   96:
        -:   97:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE int
        -:   98:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::sync (void *addr,
        -:   99:                                                    size_t len,
        -:  100:                                                    int flags)
        -:  101:{
        -:  102:  ACE_TRACE ("ACE_Malloc_T<MEMORY_POOL, ACE_LOCK, ACE_CB>::sync");
        -:  103:  return this->memory_pool_.sync (addr, len, flags);
        -:  104:}
        -:  105:
        -:  106:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE int
        -:  107:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::protect (ssize_t len,
        -:  108:                                                       int flags)
        -:  109:{
        -:  110:  ACE_TRACE ("ACE_Malloc_T<MEMORY_POOL, ACE_LOCK, ACE_CB>::protect");
        -:  111:  return this->memory_pool_.protect (len, flags);
        -:  112:}
        -:  113:
        -:  114:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE int
        -:  115:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::protect (void *addr,
        -:  116:                                                             size_t len,
        -:  117:                                                             int flags)
        -:  118:{
        -:  119:  ACE_TRACE ("ACE_Malloc_T<MEMORY_POOL, ACE_LOCK, ACE_CB>::protect");
        -:  120:  return this->memory_pool_.protect (addr, len, flags);
        -:  121:}
        -:  122:
        -:  123:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE ACE_LOCK &
        -:  124:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::mutex (void)
        -:  125:{
        -:  126:  return *this->lock_;
        -:  127:}
        -:  128:
        -:  129:template <ACE_MEM_POOL_1, class ACE_LOCK, class ACE_CB> ACE_INLINE void *
        -:  130:ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_CB>::base_addr (void)
        -:  131:{
        -:  132:  return this->cb_ptr_;
        -:  133:}
        -:  134:
        -:  135:template <ACE_MEM_POOL_1, class ACE_LOCK> ACE_INLINE
        -:  136:ACE_Malloc<ACE_MEM_POOL_2, ACE_LOCK>::ACE_Malloc (const ACE_TCHAR *pool_name)
        -:  137:  : ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_Control_Block> (pool_name)
        -:  138:{
        -:  139:}
        -:  140:
        -:  141:template <ACE_MEM_POOL_1, class ACE_LOCK> ACE_INLINE
        -:  142:ACE_Malloc<ACE_MEM_POOL_2, ACE_LOCK>::ACE_Malloc (const ACE_TCHAR *pool_name,
        -:  143:                                                  const ACE_TCHAR *lock_name,
        -:  144:                                                  const ACE_MEM_POOL_OPTIONS *options)
        -:  145:  : ACE_Malloc_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_Control_Block> (pool_name, lock_name, options)
        -:  146:{
        -:  147:}
        -:  148:
        -:  149:template <ACE_MEM_POOL_1, class ACE_LOCK> ACE_INLINE
        -:  150:ACE_Malloc_LIFO_Iterator<ACE_MEM_POOL_2, ACE_LOCK>::ACE_Malloc_LIFO_Iterator (ACE_Malloc<ACE_MEM_POOL_2, ACE_LOCK> &malloc,
        -:  151:                                                                              const char *name)
        -:  152:  : ACE_Malloc_LIFO_Iterator_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_Control_Block> (malloc, name)
        -:  153:{
        -:  154:}
        -:  155:
        -:  156:template <ACE_MEM_POOL_1, class ACE_LOCK> ACE_INLINE
        -:  157:ACE_Malloc_FIFO_Iterator<ACE_MEM_POOL_2, ACE_LOCK>::ACE_Malloc_FIFO_Iterator (ACE_Malloc<ACE_MEM_POOL_2, ACE_LOCK> &malloc,
        -:  158:                                                                              const char *name)
        -:  159:  : ACE_Malloc_FIFO_Iterator_T<ACE_MEM_POOL_2, ACE_LOCK, ACE_Control_Block> (malloc, name)
        -:  160:{
        -:  161:}
        -:  162:
        -:  163:ACE_END_VERSIONED_NAMESPACE_DECL
