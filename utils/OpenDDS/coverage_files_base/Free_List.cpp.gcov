        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/Free_List.cpp
        -:    0:Programs:72
        -:    1:// $Id: Free_List.cpp 2622 2015-08-13 18:30:00Z mitza $
        -:    2:
        -:    3:#ifndef ACE_FREE_LIST_CPP
        -:    4:#define ACE_FREE_LIST_CPP
        -:    5:
        -:    6:#include "ace/Free_List.h"
        -:    7:#include "ace/Guard_T.h"
        -:    8:
        -:    9:#if defined (ACE_HAS_ALLOC_HOOKS)
        -:   10:# include "ace/Malloc_Base.h"
        -:   11:#endif /* ACE_HAS_ALLOC_HOOKS */
        -:   12:
        -:   13:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   14:# pragma once
        -:   15:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   16:
        -:   17:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   18:
        -:   19:template <class T>
      270:   20:ACE_Free_List<T>::~ACE_Free_List (void)
        -:   21:{
      270:   22:}
        -:   23:
        -:   24:// Default constructor that takes in a preallocation number
        -:   25:// (<prealloc>), a low and high water mark (<lwm> and <hwm>) and an
        -:   26:// increment value (<inc>)
        -:   27:
        -:   28:template <class T, class ACE_LOCK>
      270:   29:ACE_Locked_Free_List<T, ACE_LOCK>::ACE_Locked_Free_List (int mode,
        -:   30:                                                     size_t prealloc,
        -:   31:                                                     size_t lwm,
        -:   32:                                                     size_t hwm,
        -:   33:                                                     size_t inc)
        -:   34:  : mode_ (mode),
        -:   35:    free_list_ (0),
        -:   36:    lwm_ (lwm),
        -:   37:    hwm_ (hwm),
        -:   38:    inc_ (inc),
      270:   39:    size_ (0)
        -:   40:{
      270:   41:  this->alloc (prealloc);
      270:   42:}
        -:   43:
        -:   44:// Destructor - removes all the elements from the free_list
        -:   45:
        -:   46:template <class T, class ACE_LOCK>
      270:   47:ACE_Locked_Free_List<T, ACE_LOCK>::~ACE_Locked_Free_List (void)
        -:   48:{
      270:   49:  if (this->mode_ != ACE_PURE_FREE_LIST)
    #####:   50:    while (this->free_list_ != 0)
        -:   51:      {
    #####:   52:        T *temp = this->free_list_;
    #####:   53:        this->free_list_ = this->free_list_->get_next ();
    #####:   54:        delete temp;
        -:   55:      }
      540:   56:}
        -:   57:
        -:   58:// Inserts an element onto the free list (if we are allowed to manage
        -:   59:// elements withing and it pasts the high water mark, delete the
        -:   60:// element)
        -:   61:
        -:   62:template <class T, class ACE_LOCK> void
    11631:   63:ACE_Locked_Free_List<T, ACE_LOCK>::add (T *element)
        -:   64:{
    23262:   65:  ACE_MT (ACE_GUARD (ACE_LOCK, ace_mon, this->mutex_));
        -:   66:
        -:   67:  // Check to see that we not at the high water mark.
    11631:   68:  if (this->mode_ == ACE_PURE_FREE_LIST
    #####:   69:      || this->size_ < this->hwm_)
        -:   70:    {
    11631:   71:      element->set_next (this->free_list_);
    11631:   72:      this->free_list_ = element;
    11631:   73:      this->size_++;
        -:   74:    }
        -:   75:  else
    #####:   76:    delete element;
        -:   77:}
        -:   78:
        -:   79:// Takes a element off the freelist and returns it.  It creates <inc>
        -:   80:// new elements if we are allowed to do it and the size is at the low
        -:   81:// water mark.
        -:   82:
        -:   83:template <class T, class ACE_LOCK> T *
      348:   84:ACE_Locked_Free_List<T, ACE_LOCK>::remove (void)
        -:   85:{
      696:   86:  ACE_MT (ACE_GUARD_RETURN (ACE_LOCK, ace_mon, this->mutex_, 0));
        -:   87:
        -:   88:  // If we are at the low water mark, add some nodes
      348:   89:  if (this->mode_ != ACE_PURE_FREE_LIST && this->size_ <= this->lwm_)
    #####:   90:    this->alloc (this->inc_);
        -:   91:
        -:   92:  // Remove a node
      348:   93:  T *temp = this->free_list_;
        -:   94:
      348:   95:  if (temp != 0)
        -:   96:    {
      348:   97:      this->free_list_ = this->free_list_->get_next ();
      348:   98:      this->size_--;
        -:   99:    }
        -:  100:
      348:  101:  return temp;
        -:  102:}
        -:  103:
        -:  104:
        -:  105:// Returns the current size of the free list
        -:  106:
        -:  107:template <class T, class ACE_LOCK> size_t
    #####:  108:ACE_Locked_Free_List<T, ACE_LOCK>::size (void)
        -:  109:{
    #####:  110:  return this->size_;
        -:  111:}
        -:  112:
        -:  113:// Resizes the free list to <newsize>
        -:  114:
        -:  115:template <class T, class ACE_LOCK> void
    #####:  116:ACE_Locked_Free_List<T, ACE_LOCK>::resize (size_t newsize)
        -:  117:{
    #####:  118:  ACE_MT (ACE_GUARD (ACE_LOCK, ace_mon, this->mutex_));
        -:  119:
        -:  120:  // Check if we are allowed to resize
    #####:  121:  if (this->mode_ != ACE_PURE_FREE_LIST)
        -:  122:    {
        -:  123:      // Check to see if we grow or shrink
    #####:  124:      if (newsize < this->size_)
        -:  125:        {
    #####:  126:          this->dealloc (this->size_ - newsize);
        -:  127:        }
        -:  128:      else
        -:  129:        {
    #####:  130:          this->alloc (newsize - this->size_);
        -:  131:        }
        -:  132:    }
        -:  133:}
        -:  134:
        -:  135:// Allocates <n> extra nodes for the freelist
        -:  136:
        -:  137:template <class T, class ACE_LOCK> void
      270:  138:ACE_Locked_Free_List<T, ACE_LOCK>::alloc (size_t n)
        -:  139:{
      270:  140:  for (; n > 0; n--)
        -:  141:    {
    #####:  142:      T *temp = 0;
    #####:  143:      ACE_NEW (temp, T);
    #####:  144:      temp->set_next (this->free_list_);
    #####:  145:      this->free_list_ = temp;
    #####:  146:      this->size_++;
        -:  147:    }
        -:  148:}
        -:  149:
        -:  150:// Removes and frees <n> nodes from the freelist.
        -:  151:
        -:  152:template <class T, class ACE_LOCK> void
    #####:  153:ACE_Locked_Free_List<T, ACE_LOCK>::dealloc (size_t n)
        -:  154:{
    #####:  155:  for (; this->free_list_ != 0 && n > 0;
        -:  156:       n--)
        -:  157:    {
    #####:  158:      T *temp = this->free_list_;
    #####:  159:      this->free_list_ = this->free_list_->get_next ();
    #####:  160:      delete temp;
    #####:  161:      this->size_--;
        -:  162:    }
    #####:  163:}
        -:  164:
        -:  165:ACE_ALLOC_HOOK_DEFINE_Tcc(ACE_Locked_Free_List)
        -:  166:
        -:  167:ACE_END_VERSIONED_NAMESPACE_DECL
        -:  168:
        -:  169:#endif /* ACE_FREE_LIST_CPP */
