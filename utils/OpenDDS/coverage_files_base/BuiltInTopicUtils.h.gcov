        -:    0:Source:../dds/DCPS/BuiltInTopicUtils.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef BUILTINTOPICUTILS_H
        -:    9:#define BUILTINTOPICUTILS_H
        -:   10:
        -:   11:#include "dcps_export.h"
        -:   12:#include "dds/DdsDcpsInfrastructureC.h"
        -:   13:#include "dds/DdsDcpsInfoUtilsC.h"
        -:   14:#include "dds/DdsDcpsSubscriptionC.h"
        -:   15:#include "dds/DdsDcpsCoreC.h"
        -:   16:#include "Service_Participant.h"
        -:   17:#include "DomainParticipantImpl.h"
        -:   18:
        -:   19:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   20:
        -:   21:namespace OpenDDS {
        -:   22:namespace DCPS {
        -:   23:
        -:   24:OpenDDS_Dcps_Export extern const char* const BUILT_IN_PARTICIPANT_TOPIC;
        -:   25:OpenDDS_Dcps_Export extern const char* const BUILT_IN_PARTICIPANT_TOPIC_TYPE;
        -:   26:
        -:   27:OpenDDS_Dcps_Export extern const char* const BUILT_IN_TOPIC_TOPIC;
        -:   28:OpenDDS_Dcps_Export extern const char* const BUILT_IN_TOPIC_TOPIC_TYPE;
        -:   29:
        -:   30:OpenDDS_Dcps_Export extern const char* const BUILT_IN_SUBSCRIPTION_TOPIC;
        -:   31:OpenDDS_Dcps_Export extern const char* const BUILT_IN_SUBSCRIPTION_TOPIC_TYPE;
        -:   32:
        -:   33:OpenDDS_Dcps_Export extern const char* const BUILT_IN_PUBLICATION_TOPIC;
        -:   34:OpenDDS_Dcps_Export extern const char* const BUILT_IN_PUBLICATION_TOPIC_TYPE;
        -:   35:
        -:   36:/**
        -:   37: * Returns true if the topic name and type pair matches one of the built-in
        -:   38: * topic name and type pairs.
        -:   39: */
        -:   40:inline bool topicIsBIT(const char* name, const char* type)
        -:   41:{
        -:   42:    return (
        -:   43:      !ACE_OS::strcmp(name, OpenDDS::DCPS::BUILT_IN_PARTICIPANT_TOPIC) &&
        -:   44:      !ACE_OS::strcmp(type, OpenDDS::DCPS::BUILT_IN_PARTICIPANT_TOPIC_TYPE)
        -:   45:    ) || (
        -:   46:      !ACE_OS::strcmp(name, OpenDDS::DCPS::BUILT_IN_TOPIC_TOPIC) &&
        -:   47:      !ACE_OS::strcmp(type, OpenDDS::DCPS::BUILT_IN_TOPIC_TOPIC_TYPE)
        -:   48:    ) || (
        -:   49:      !ACE_OS::strcmp(name, OpenDDS::DCPS::BUILT_IN_SUBSCRIPTION_TOPIC) &&
        -:   50:      !ACE_OS::strcmp(type, OpenDDS::DCPS::BUILT_IN_SUBSCRIPTION_TOPIC_TYPE)
        -:   51:    ) || (
        -:   52:      !ACE_OS::strcmp(name, OpenDDS::DCPS::BUILT_IN_PUBLICATION_TOPIC) &&
        -:   53:      !ACE_OS::strcmp(type, OpenDDS::DCPS::BUILT_IN_PUBLICATION_TOPIC_TYPE)
        -:   54:    );
        -:   55:}
        -:   56:
        -:   57:class DomainParticipantImpl;
        -:   58:
        -:   59:/**
        -:   60: * Functor for ordering BuiltinKey_t.
        -:   61: *
        -:   62: * Use this like this:
        -:   63: *   std::map<DDS::BuiltinTopicKey_t, int, OpenDDS::DCPS::BuiltinTopicKeyLess> MapType;
        -:   64: */
        -:   65:class BuiltinTopicKeyLess {
        -:   66:public:
        -:   67:  bool operator()(
        -:   68:    const DDS::BuiltinTopicKey_t& lhs,
        -:   69:    const DDS::BuiltinTopicKey_t& rhs) const;
        -:   70:};
        -:   71:
        -:   72:template<typename TopicType>
        -:   73:DDS::BuiltinTopicKey_t keyFromSample(TopicType* sample);
        -:   74:
        -:   75:#if !defined (DDS_HAS_MINIMUM_BIT)
        -:   76:
        -:   77:template<class BIT_Reader_var, class BIT_DataSeq>
        -:   78:DDS::ReturnCode_t instance_handle_to_bit_data(
        -:   79:  DomainParticipantImpl* dp,
        -:   80:  const char* bit_name,
        -:   81:  const DDS::InstanceHandle_t& handle,
        -:   82:  BIT_DataSeq& data)
        -:   83:{
        -:   84:  DDS::Subscriber_var bit_subscriber = dp->get_builtin_subscriber();
        -:   85:
        -:   86:  DDS::DataReader_var reader = bit_subscriber->lookup_datareader(bit_name);
        -:   87:
        -:   88:  typedef typename BIT_Reader_var::_obj_type BIT_Reader;
        -:   89:  BIT_Reader_var bit_reader = BIT_Reader::_narrow(reader.in());
        -:   90:
        -:   91:  const ACE_Time_Value due = ACE_OS::gettimeofday() +
        -:   92:    ACE_Time_Value(TheServiceParticipant->bit_lookup_duration_msec() / 1000,
        -:   93:                   (TheServiceParticipant->bit_lookup_duration_msec() % 1000)
        -:   94:                   * 1000);
        -:   95:
        -:   96:    // Look for the data from builtin topic datareader until we get results or
        -:   97:    // timeout.
        -:   98:    // This is to resolve the problem of lookup return nothing. This could happen
        -:   99:    // when the add_association is called before the builtin topic datareader got
        -:  100:    // the published data.
        -:  101:  while (true) {
        -:  102:    DDS::SampleInfoSeq the_info;
        -:  103:    BIT_DataSeq the_data;
        -:  104:    const DDS::ReturnCode_t ret =
        -:  105:      bit_reader->read_instance(the_data,
        -:  106:                                the_info,
        -:  107:                                DDS::LENGTH_UNLIMITED,
        -:  108:                                handle,
        -:  109:                                DDS::ANY_SAMPLE_STATE,
        -:  110:                                DDS::ANY_VIEW_STATE,
        -:  111:                                DDS::ANY_INSTANCE_STATE);
        -:  112:
        -:  113:    if (ret == DDS::RETCODE_OK) {
        -:  114:      data.length(1);
        -:  115:      data[0] = the_data[0];
        -:  116:      return ret;
        -:  117:    }
        -:  118:
        -:  119:    if (ret != DDS::RETCODE_BAD_PARAMETER && ret != DDS::RETCODE_NO_DATA) {
        -:  120:      ACE_ERROR_RETURN((LM_ERROR,
        -:  121:                        ACE_TEXT("(%P|%t) ERROR: instance_handle_to_repo_id, ")
        -:  122:                        ACE_TEXT("read instance 0x%x returned error %d.\n"),
        -:  123:                        handle, ret),
        -:  124:                       ret);
        -:  125:    }
        -:  126:
        -:  127:    const ACE_Time_Value now = ACE_OS::gettimeofday();
        -:  128:
        -:  129:    if (now < due) {
        -:  130:      if (DCPS_debug_level >= 10) {
        -:  131:        ACE_DEBUG((LM_DEBUG,
        -:  132:                   ACE_TEXT("(%P|%t) instance_handle_to_repo_id, ")
        -:  133:                   ACE_TEXT("BIT reader read_instance failed - trying again.\n")));
        -:  134:      }
        -:  135:
        -:  136:      ACE_Time_Value tv = due - now;
        -:  137:
        -:  138:      if (tv > ACE_Time_Value(0, 100000)) {
        -:  139:        tv = ACE_Time_Value(0, 100000);
        -:  140:      }
        -:  141:
        -:  142:      ACE_OS::sleep(tv);
        -:  143:
        -:  144:    } else {
        -:  145:      ACE_ERROR_RETURN((LM_ERROR,
        -:  146:                        ACE_TEXT("(%P|%t) ERROR: instance_handle_to_repo_id,")
        -:  147:                        ACE_TEXT(" timeout. \n")),
        -:  148:                       DDS::RETCODE_ERROR);
        -:  149:      return DDS::RETCODE_TIMEOUT;
        -:  150:    }
        -:  151:  }
        -:  152:}
        -:  153:#endif
        -:  154:
        -:  155:inline
        -:  156:bool
        -:  157:BuiltinTopicKeyLess::operator()(const DDS::BuiltinTopicKey_t& lhs,
        -:  158:                                const DDS::BuiltinTopicKey_t& rhs) const
        -:  159:{
        -:  160:  // N.B.  This assumes that the MS index is 2 and the LS index is 0.
        -:  161:  return (lhs.value[2] < rhs.value[2])? true:
        -:  162:         (lhs.value[2] > rhs.value[2])? false:
        -:  163:         (lhs.value[1] < rhs.value[1])? true:
        -:  164:         (lhs.value[1] > rhs.value[1])? false:
        -:  165:         (lhs.value[0] < rhs.value[0])? true:
        -:  166:         false;
        -:  167:
        -:  168:}
        -:  169:
        -:  170:#if !defined (DDS_HAS_MINIMUM_BIT)
        -:  171:
        -:  172:template<>
        -:  173:inline
        -:  174:DDS::BuiltinTopicKey_t
    #####:  175:keyFromSample<DDS::ParticipantBuiltinTopicData>(
        -:  176:  DDS::ParticipantBuiltinTopicData* sample)
        -:  177:{
    #####:  178:  return sample->key;
        -:  179:}
        -:  180:
        -:  181:template<>
        -:  182:inline
        -:  183:DDS::BuiltinTopicKey_t
    #####:  184:keyFromSample<DDS::TopicBuiltinTopicData>(
        -:  185:  DDS::TopicBuiltinTopicData* sample)
        -:  186:{
    #####:  187:  return sample->key;
        -:  188:}
        -:  189:
        -:  190:template<>
        -:  191:inline
        -:  192:DDS::BuiltinTopicKey_t
    #####:  193:keyFromSample<DDS::SubscriptionBuiltinTopicData>(
        -:  194:  DDS::SubscriptionBuiltinTopicData* sample)
        -:  195:{
    #####:  196:  return sample->key;
        -:  197:}
        -:  198:
        -:  199:template<>
        -:  200:inline
        -:  201:DDS::BuiltinTopicKey_t
    #####:  202:keyFromSample<DDS::PublicationBuiltinTopicData>(
        -:  203:  DDS::PublicationBuiltinTopicData* sample)
        -:  204:{
    #####:  205:  return sample->key;
        -:  206:}
        -:  207:
        -:  208:#endif
        -:  209:
        -:  210:template<typename TopicType>
        -:  211:inline
        -:  212:DDS::BuiltinTopicKey_t keyFromSample(TopicType*)
        -:  213:{
        -:  214:  DDS::BuiltinTopicKey_t value;
        -:  215:  value.value[0] = value.value[1] = value.value[2] = 0;
        -:  216:  return value;
        -:  217:}
        -:  218:
        -:  219:} // namespace DCPS
        -:  220:} // namespace OpenDDS
        -:  221:
        -:  222:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  223:
        -:  224:#endif /* BUILTINTOPICUTILS_H  */
