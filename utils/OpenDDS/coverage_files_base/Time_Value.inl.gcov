        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/Time_Value.inl
        -:    0:Programs:72
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id: Time_Value.inl 2179 2013-05-28 22:16:51Z mesnierp $
        -:    4:
        -:    5:#include "ace/Truncate.h"
        -:    6:
        -:    7:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:    8:
        -:    9:/// Returns the value of the object as a timeval.
        -:   10:ACE_INLINE
        -:   11:ACE_Time_Value::operator timeval () const
        -:   12:{
        -:   13:  // ACE_OS_TRACE ("ACE_Time_Value::operator timeval");
        -:   14:#if defined (ACE_HAS_TIME_T_LONG_MISMATCH)
        -:   15:  // Recall that on some Windows we substitute another type for timeval in tv_
        -:   16:  ACE_Time_Value *me = const_cast<ACE_Time_Value*> (this);
        -:   17:  me->ext_tv_.tv_sec = ACE_Utils::truncate_cast<long> (this->tv_.tv_sec);
        -:   18:  me->ext_tv_.tv_usec = ACE_Utils::truncate_cast<long> (this->tv_.tv_usec);
        -:   19:  return this->ext_tv_;
        -:   20:#else
        -:   21:  return this->tv_;
        -:   22:#endif /* ACE_HAS_TIME_T_LONG_MISMATCH */
        -:   23:}
        -:   24:
        -:   25:ACE_INLINE void
     3597:   26:ACE_Time_Value::set (const timeval &tv)
        -:   27:{
        -:   28:  // ACE_OS_TRACE ("ACE_Time_Value::set");
     3597:   29:  this->tv_.tv_sec = tv.tv_sec;
     3597:   30:  this->tv_.tv_usec = tv.tv_usec;
        -:   31:
     3597:   32:  this->normalize ();
     3597:   33:}
        -:   34:
        -:   35:ACE_INLINE
     3597:   36:ACE_Time_Value::ACE_Time_Value (const struct timeval &tv)
        -:   37:{
        -:   38:  // ACE_OS_TRACE ("ACE_Time_Value::ACE_Time_Value");
     3597:   39:  this->set (tv);
     3597:   40:}
        -:   41:
        -:   42:ACE_INLINE
        -:   43:ACE_Time_Value::operator const timeval * () const
        -:   44:{
        -:   45:  // ACE_OS_TRACE ("ACE_Time_Value::operator const timeval *");
        -:   46:#if defined (ACE_HAS_TIME_T_LONG_MISMATCH)
        -:   47:  // Recall that on some Windows we substitute another type for timeval in tv_
        -:   48:  ACE_Time_Value *me = const_cast<ACE_Time_Value*> (this);
        -:   49:  me->ext_tv_.tv_sec = ACE_Utils::truncate_cast<long> (this->tv_.tv_sec);
        -:   50:  me->ext_tv_.tv_usec = ACE_Utils::truncate_cast<long> (this->tv_.tv_usec);
        -:   51:  return (const timeval *) &this->ext_tv_;
        -:   52:#else
        -:   53:  return (const timeval *) &this->tv_;
        -:   54:#endif /* ACE_HAS_TIME_T_LONG_MISMATCH */
        -:   55:}
        -:   56:
        -:   57:ACE_INLINE void
    #####:   58:ACE_Time_Value::set (time_t sec, suseconds_t usec)
        -:   59:{
        -:   60:  // ACE_OS_TRACE ("ACE_Time_Value::set");
    #####:   61:  this->tv_.tv_sec = sec;
    #####:   62:  this->tv_.tv_usec = usec;
        -:   63:#if __GNUC__ && !(__GNUC__ == 3 && __GNUC_MINOR__ == 4)
        -:   64:  if ((__builtin_constant_p(sec) &
        -:   65:       __builtin_constant_p(usec)) &&
        -:   66:      (sec >= 0 && usec >= 0 && usec < ACE_ONE_SECOND_IN_USECS))
        -:   67:    return;
        -:   68:#endif
    #####:   69:  this->normalize ();
        -:   70:}
        -:   71:
        -:   72:ACE_INLINE void
        -:   73:ACE_Time_Value::set (double d)
        -:   74:{
        -:   75:  // ACE_OS_TRACE ("ACE_Time_Value::set");
        -:   76:  time_t l = (time_t) d;
        -:   77:  this->tv_.tv_sec = l;
        -:   78:  this->tv_.tv_usec = (suseconds_t) ((d - (double) l) * ACE_ONE_SECOND_IN_USECS + .5);
        -:   79:  this->normalize ();
        -:   80:}
        -:   81:
        -:   82:/// Initializes a timespec_t.  Note that this approach loses precision
        -:   83:/// since it converts the nano-seconds into micro-seconds.  But then
        -:   84:/// again, do any real systems have nano-second timer precision?!
        -:   85:ACE_INLINE void
        -:   86:ACE_Time_Value::set (const timespec_t &tv)
        -:   87:{
        -:   88:  // ACE_OS_TRACE ("ACE_Time_Value::set");
        -:   89:
        -:   90:  this->set (tv.tv_sec,
        -:   91:             tv.tv_nsec / 1000); // Convert nanoseconds into microseconds.
        -:   92:}
        -:   93:
        -:   94:ACE_INLINE
    #####:   95:ACE_Time_Value::ACE_Time_Value (void)
        -:   96:  // : tv_ ()
        -:   97:{
        -:   98:  // ACE_OS_TRACE ("ACE_Time_Value::ACE_Time_Value");
    #####:   99:  this->set (0, 0);
    #####:  100:}
        -:  101:
        -:  102:ACE_INLINE
    #####:  103:ACE_Time_Value::ACE_Time_Value (time_t sec, suseconds_t usec)
        -:  104:{
        -:  105:  // ACE_OS_TRACE ("ACE_Time_Value::ACE_Time_Value");
    #####:  106:  this->set (sec, usec);
    #####:  107:}
        -:  108:
        -:  109:/// Returns number of seconds.
        -:  110:ACE_INLINE time_t
    #####:  111:ACE_Time_Value::sec (void) const
        -:  112:{
        -:  113:  // ACE_OS_TRACE ("ACE_Time_Value::sec");
    #####:  114:  return this->tv_.tv_sec;
        -:  115:}
        -:  116:
        -:  117:/// Sets the number of seconds.
        -:  118:ACE_INLINE void
    #####:  119:ACE_Time_Value::sec (time_t sec)
        -:  120:{
        -:  121:  // ACE_OS_TRACE ("ACE_Time_Value::sec");
    #####:  122:  this->tv_.tv_sec = sec;
    #####:  123:}
        -:  124:
        -:  125:/// Converts from Time_Value format into milli-seconds format.
        -:  126:ACE_INLINE unsigned long
        -:  127:ACE_Time_Value::msec (void) const
        -:  128:{
        -:  129:  // ACE_OS_TRACE ("ACE_Time_Value::msec");
        -:  130:
        -:  131:  // Note - we're truncating a value here, which can lose data. This is
        -:  132:  // called out in the user documentation for this with a recommendation to
        -:  133:  // use msec(ACE_UINT64&) instead, so just go ahead and truncate.
        -:  134:  time_t secs = this->tv_.tv_sec * 1000 + this->tv_.tv_usec / 1000;
        -:  135:  return ACE_Utils::truncate_cast<unsigned long> (secs);
        -:  136:}
        -:  137:
        -:  138:ACE_INLINE ACE_UINT64
        -:  139:ACE_Time_Value::get_msec () const
        -:  140:{
        -:  141:  // ACE_OS_TRACE ("ACE_Time_Value::get_msec");
        -:  142:  ACE_UINT64 ms = ACE_Utils::truncate_cast<ACE_UINT64> (this->tv_.tv_sec);
        -:  143:  ms *= 1000;
        -:  144:  ms += (this->tv_.tv_usec / 1000);
        -:  145:  return ms;
        -:  146:}
        -:  147:
        -:  148:ACE_INLINE void
        -:  149:ACE_Time_Value::msec (ACE_UINT64 &ms) const
        -:  150:{
        -:  151:  // ACE_OS_TRACE ("ACE_Time_Value::msec");
        -:  152:  ms = this->get_msec ();
        -:  153:}
        -:  154:
        -:  155:ACE_INLINE void
        -:  156:ACE_Time_Value::msec (ACE_UINT64 &ms) /*const*/
        -:  157:{
        -:  158:  // ACE_OS_TRACE ("ACE_Time_Value::msec");
        -:  159:  const ACE_Time_Value *tv = this;
        -:  160:  tv->msec (ms);
        -:  161:}
        -:  162:
        -:  163:ACE_INLINE void
        -:  164:ACE_Time_Value::set_msec (const ACE_UINT64 &ms)
        -:  165:{
        -:  166:  // ACE_OS_TRACE ("ACE_Time_Value::set_msec");
        -:  167:  // Convert millisecond units to seconds;
        -:  168:  ACE_UINT64 secs = ms / 1000;
        -:  169:  this->tv_.tv_sec = static_cast<long> (secs);
        -:  170:  // Convert remainder to microseconds;
        -:  171:  this->tv_.tv_usec = static_cast<long>((ms - (secs * 1000)) * 1000);
        -:  172:}
        -:  173:
        -:  174:/// Converts from milli-seconds format into Time_Value format.
        -:  175:ACE_INLINE void
        -:  176:ACE_Time_Value::msec (long milliseconds)
        -:  177:{
        -:  178:  // ACE_OS_TRACE ("ACE_Time_Value::msec");
        -:  179:  // Convert millisecond units to seconds;
        -:  180:  long secs = milliseconds / 1000;
        -:  181:  this->tv_.tv_sec = secs;
        -:  182:  // Convert remainder to microseconds;
        -:  183:  this->tv_.tv_usec = (milliseconds - (secs * 1000)) * 1000;
        -:  184:}
        -:  185:
        -:  186:/// Converts from milli-seconds format into Time_Value format.
        -:  187:ACE_INLINE void
        -:  188:ACE_Time_Value::msec (int milliseconds)
        -:  189:{
        -:  190:  ACE_Time_Value::msec (static_cast<long> (milliseconds));
        -:  191:}
        -:  192:
        -:  193:/// Returns number of micro-seconds.
        -:  194:ACE_INLINE suseconds_t
    #####:  195:ACE_Time_Value::usec (void) const
        -:  196:{
        -:  197:  // ACE_OS_TRACE ("ACE_Time_Value::usec");
    #####:  198:  return this->tv_.tv_usec;
        -:  199:}
        -:  200:
        -:  201:/// Sets the number of micro-seconds.
        -:  202:ACE_INLINE void
     1299:  203:ACE_Time_Value::usec (suseconds_t usec)
        -:  204:{
        -:  205:  // ACE_OS_TRACE ("ACE_Time_Value::usec");
     1299:  206:  this->tv_.tv_usec = usec;
     1299:  207:}
        -:  208:
        -:  209:ACE_INLINE void
        -:  210:ACE_Time_Value::to_usec (ACE_UINT64 & usec) const
        -:  211:{
        -:  212:  // ACE_OS_TRACE ("ACE_Time_Value::to_usec");
        -:  213:  usec = static_cast<ACE_UINT64> (this->tv_.tv_sec);
        -:  214:  usec *= 1000000;
        -:  215:  usec += this->tv_.tv_usec;
        -:  216:}
        -:  217:
        -:  218:ACE_INLINE ACE_Time_Value
        -:  219:operator * (double d, const ACE_Time_Value &tv)
        -:  220:{
        -:  221:  return ACE_Time_Value (tv) *= d;
        -:  222:}
        -:  223:
        -:  224:ACE_INLINE ACE_Time_Value
        -:  225:operator * (const ACE_Time_Value &tv, double d)
        -:  226:{
        -:  227:  return ACE_Time_Value (tv) *= d;
        -:  228:}
        -:  229:
        -:  230:/// True if tv1 > tv2.
        -:  231:ACE_INLINE bool
        -:  232:operator > (const ACE_Time_Value &tv1,
        -:  233:            const ACE_Time_Value &tv2)
        -:  234:{
        -:  235:  // ACE_OS_TRACE ("operator >");
        -:  236:  if (tv1.sec () > tv2.sec ())
        -:  237:    return 1;
        -:  238:  else if (tv1.sec () == tv2.sec ()
        -:  239:           && tv1.usec () > tv2.usec ())
        -:  240:    return 1;
        -:  241:  else
        -:  242:    return 0;
        -:  243:}
        -:  244:
        -:  245:/// True if tv1 >= tv2.
        -:  246:ACE_INLINE bool
      210:  247:operator >= (const ACE_Time_Value &tv1,
        -:  248:             const ACE_Time_Value &tv2)
        -:  249:{
        -:  250:  // ACE_OS_TRACE ("operator >=");
      210:  251:  if (tv1.sec () > tv2.sec ())
       24:  252:    return 1;
      372:  253:  else if (tv1.sec () == tv2.sec ()
      186:  254:           && tv1.usec () >= tv2.usec ())
       12:  255:    return 1;
        -:  256:  else
      174:  257:    return 0;
        -:  258:}
        -:  259:
        -:  260:/// Returns the value of the object as a timespec_t.
        -:  261:ACE_INLINE
        -:  262:ACE_Time_Value::operator timespec_t () const
        -:  263:{
        -:  264:  // ACE_OS_TRACE ("ACE_Time_Value::operator timespec_t");
        -:  265:  timespec_t tv;
        -:  266:  tv.tv_sec = this->sec ();
        -:  267:  // Convert microseconds into nanoseconds.
        -:  268:  tv.tv_nsec = this->tv_.tv_usec * 1000;
        -:  269:  return tv;
        -:  270:}
        -:  271:
        -:  272:/// Initializes the ACE_Time_Value object from a timespec_t.
        -:  273:ACE_INLINE
        -:  274:ACE_Time_Value::ACE_Time_Value (const timespec_t &tv)
        -:  275:  // : tv_ ()
        -:  276:{
        -:  277:  // ACE_OS_TRACE ("ACE_Time_Value::ACE_Time_Value");
        -:  278:  this->set (tv);
        -:  279:}
        -:  280:
        -:  281:/// True if tv1 < tv2.
        -:  282:ACE_INLINE bool
        -:  283:operator < (const ACE_Time_Value &tv1,
        -:  284:            const ACE_Time_Value &tv2)
        -:  285:{
        -:  286:  // ACE_OS_TRACE ("operator <");
        -:  287:  return tv2 > tv1;
        -:  288:}
        -:  289:
        -:  290:/// True if tv1 >= tv2.
        -:  291:ACE_INLINE bool
        -:  292:operator <= (const ACE_Time_Value &tv1,
        -:  293:             const ACE_Time_Value &tv2)
        -:  294:{
        -:  295:  // ACE_OS_TRACE ("operator <=");
        -:  296:  return tv2 >= tv1;
        -:  297:}
        -:  298:
        -:  299:/// True if tv1 == tv2.
        -:  300:ACE_INLINE bool
        -:  301:operator == (const ACE_Time_Value &tv1,
        -:  302:             const ACE_Time_Value &tv2)
        -:  303:{
        -:  304:  // ACE_OS_TRACE ("operator ==");
        -:  305:  return tv1.sec () == tv2.sec ()
        -:  306:    && tv1.usec () == tv2.usec ();
        -:  307:}
        -:  308:
        -:  309:/// True if tv1 != tv2.
        -:  310:ACE_INLINE bool
        -:  311:operator != (const ACE_Time_Value &tv1,
        -:  312:             const ACE_Time_Value &tv2)
        -:  313:{
        -:  314:  // ACE_OS_TRACE ("operator !=");
        -:  315:  return !(tv1 == tv2);
        -:  316:}
        -:  317:
        -:  318:/// Add TV to this.
        -:  319:ACE_INLINE ACE_Time_Value &
        -:  320:ACE_Time_Value::operator+= (const ACE_Time_Value &tv)
        -:  321:{
        -:  322:  // ACE_OS_TRACE ("ACE_Time_Value::operator+=");
        -:  323:  this->sec (this->sec () + tv.sec ());
        -:  324:  this->usec (this->usec () + tv.usec ());
        -:  325:  this->normalize ();
        -:  326:  return *this;
        -:  327:}
        -:  328:
        -:  329:ACE_INLINE ACE_Time_Value &
        -:  330:ACE_Time_Value::operator+= (time_t tv)
        -:  331:{
        -:  332:  // ACE_OS_TRACE ("ACE_Time_Value::operator+=");
        -:  333:  this->sec (this->sec () + tv);
        -:  334:  return *this;
        -:  335:}
        -:  336:
        -:  337:ACE_INLINE ACE_Time_Value &
      588:  338:ACE_Time_Value::operator= (const ACE_Time_Value &tv)
        -:  339:{
        -:  340:  // ACE_OS_TRACE ("ACE_Time_Value::operator=");
      588:  341:  this->sec (tv.sec ());
      588:  342:  this->usec (tv.usec ());
      588:  343:  return *this;
        -:  344:}
        -:  345:
        -:  346:ACE_INLINE ACE_Time_Value &
        -:  347:ACE_Time_Value::operator= (time_t tv)
        -:  348:{
        -:  349:  // ACE_OS_TRACE ("ACE_Time_Value::operator=");
        -:  350:  this->sec (tv);
        -:  351:  this->usec (0);
        -:  352:  return *this;
        -:  353:}
        -:  354:
        -:  355:/// Subtract TV to this.
        -:  356:ACE_INLINE ACE_Time_Value &
      258:  357:ACE_Time_Value::operator-= (const ACE_Time_Value &tv)
        -:  358:{
        -:  359:  // ACE_OS_TRACE ("ACE_Time_Value::operator-=");
      258:  360:  this->sec (this->sec () - tv.sec ());
      258:  361:  this->usec (this->usec () - tv.usec ());
      258:  362:  this->normalize ();
      258:  363:  return *this;
        -:  364:}
        -:  365:
        -:  366:ACE_INLINE ACE_Time_Value &
        -:  367:ACE_Time_Value::operator-= (time_t tv)
        -:  368:{
        -:  369:  // ACE_OS_TRACE ("ACE_Time_Value::operator-=");
        -:  370:  this->sec (this->sec () - tv);
        -:  371:  return *this;
        -:  372:}
        -:  373:
        -:  374:/// Adds two ACE_Time_Value objects together, returns the sum.
        -:  375:ACE_INLINE ACE_Time_Value
        -:  376:operator + (const ACE_Time_Value &tv1,
        -:  377:            const ACE_Time_Value &tv2)
        -:  378:{
        -:  379:  // ACE_OS_TRACE ("operator +");
        -:  380:  ACE_Time_Value sum (tv1);
        -:  381:  sum += tv2;
        -:  382:
        -:  383:  return sum;
        -:  384:}
        -:  385:
        -:  386:/// Subtracts two ACE_Time_Value objects, returns the difference.
        -:  387:ACE_INLINE ACE_Time_Value
      258:  388:operator - (const ACE_Time_Value &tv1,
        -:  389:            const ACE_Time_Value &tv2)
        -:  390:{
        -:  391:  // ACE_OS_TRACE ("operator -");
      258:  392:  ACE_Time_Value delta (tv1);
      258:  393:  delta -= tv2;
        -:  394:
      258:  395:  return delta;
        -:  396:}
        -:  397:
        -:  398:ACE_END_VERSIONED_NAMESPACE_DECL
