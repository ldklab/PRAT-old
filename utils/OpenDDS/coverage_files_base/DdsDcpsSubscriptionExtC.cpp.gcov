        -:    0:Source:DdsDcpsSubscriptionExtC.cpp
        -:    0:Programs:72
        -:    1:// -*- C++ -*-
        -:    2:// $Id$
        -:    3:
        -:    4:/**
        -:    5: * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p15
        -:    6: * TAO and the TAO IDL Compiler have been developed by:
        -:    7: *       Center for Distributed Object Computing
        -:    8: *       Washington University
        -:    9: *       St. Louis, MO
        -:   10: *       USA
        -:   11: *       http://www.cs.wustl.edu/~schmidt/doc-center.html
        -:   12: * and
        -:   13: *       Distributed Object Computing Laboratory
        -:   14: *       University of California at Irvine
        -:   15: *       Irvine, CA
        -:   16: *       USA
        -:   17: * and
        -:   18: *       Institute for Software Integrated Systems
        -:   19: *       Vanderbilt University
        -:   20: *       Nashville, TN
        -:   21: *       USA
        -:   22: *       http://www.isis.vanderbilt.edu/
        -:   23: *
        -:   24: * Information about TAO is available at:
        -:   25: *     http://www.cs.wustl.edu/~schmidt/TAO.html
        -:   26: **/
        -:   27:
        -:   28:// TAO_IDL - Generated from
        -:   29:// be/be_codegen.cpp:376
        -:   30:
        -:   31:#include "DCPS/DdsDcps_pch.h"
        -:   32:#include "DdsDcpsSubscriptionExtC.h"
        -:   33:#include "tao/CDR.h"
        -:   34:#include "ace/OS_NS_string.h"
        -:   35:
        -:   36:#if !defined (__ACE_INLINE__)
        -:   37:#include "DdsDcpsSubscriptionExtC.inl"
        -:   38:#endif /* !defined INLINE */
        -:   39:
        -:   40:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   41:
        -:   42:
        -:   43:
        -:   44:// TAO_IDL - Generated from
        -:   45:// be/be_visitor_interface/interface_cs.cpp:51
        -:   46:
        -:   47:// Traits specializations for OpenDDS::DCPS::DataReaderListener.
        -:   48:
        -:   49:OpenDDS::DCPS::DataReaderListener_ptr
    #####:   50:TAO::Objref_Traits<OpenDDS::DCPS::DataReaderListener>::duplicate (
        -:   51:    OpenDDS::DCPS::DataReaderListener_ptr p)
        -:   52:{
    #####:   53:  return OpenDDS::DCPS::DataReaderListener::_duplicate (p);
        -:   54:}
        -:   55:
        -:   56:void
    #####:   57:TAO::Objref_Traits<OpenDDS::DCPS::DataReaderListener>::release (
        -:   58:    OpenDDS::DCPS::DataReaderListener_ptr p)
        -:   59:{
    #####:   60:  ::CORBA::release (p);
    #####:   61:}
        -:   62:
        -:   63:OpenDDS::DCPS::DataReaderListener_ptr
    #####:   64:TAO::Objref_Traits<OpenDDS::DCPS::DataReaderListener>::nil (void)
        -:   65:{
    #####:   66:  return OpenDDS::DCPS::DataReaderListener::_nil ();
        -:   67:}
        -:   68:
        -:   69:::CORBA::Boolean
    #####:   70:TAO::Objref_Traits<OpenDDS::DCPS::DataReaderListener>::marshal (
        -:   71:    const OpenDDS::DCPS::DataReaderListener_ptr p,
        -:   72:    TAO_OutputCDR & cdr)
        -:   73:{
    #####:   74:  return ::CORBA::Object::marshal (p, cdr);
        -:   75:}
        -:   76:
        6:   77:OpenDDS::DCPS::DataReaderListener::DataReaderListener (void)
        6:   78:{}
        -:   79:
        6:   80:OpenDDS::DCPS::DataReaderListener::~DataReaderListener (void)
        -:   81:{
        6:   82:}
        -:   83:
        -:   84:OpenDDS::DCPS::DataReaderListener_ptr
    #####:   85:OpenDDS::DCPS::DataReaderListener::_narrow (
        -:   86:    ::CORBA::Object_ptr _tao_objref)
        -:   87:{
    #####:   88:  return DataReaderListener::_duplicate (
        -:   89:      dynamic_cast<DataReaderListener_ptr> (_tao_objref)
    #####:   90:    );
        -:   91:}
        -:   92:
        -:   93:OpenDDS::DCPS::DataReaderListener_ptr
    #####:   94:OpenDDS::DCPS::DataReaderListener::_unchecked_narrow (
        -:   95:    ::CORBA::Object_ptr _tao_objref)
        -:   96:{
    #####:   97:  return DataReaderListener::_duplicate (
        -:   98:      dynamic_cast<DataReaderListener_ptr> (_tao_objref)
    #####:   99:    );
        -:  100:}
        -:  101:
        -:  102:OpenDDS::DCPS::DataReaderListener_ptr
    #####:  103:OpenDDS::DCPS::DataReaderListener::_nil (void)
        -:  104:{
    #####:  105:  return 0;
        -:  106:}
        -:  107:
        -:  108:OpenDDS::DCPS::DataReaderListener_ptr
    #####:  109:OpenDDS::DCPS::DataReaderListener::_duplicate (DataReaderListener_ptr obj)
        -:  110:{
    #####:  111:  if (! ::CORBA::is_nil (obj))
        -:  112:    {
    #####:  113:      obj->_add_ref ();
        -:  114:    }
    #####:  115:  return obj;
        -:  116:}
        -:  117:
        -:  118:void
    #####:  119:OpenDDS::DCPS::DataReaderListener::_tao_release (DataReaderListener_ptr obj)
        -:  120:{
    #####:  121:  ::CORBA::release (obj);
    #####:  122:}
        -:  123:
        -:  124:::CORBA::Boolean
    #####:  125:OpenDDS::DCPS::DataReaderListener::_is_a (const char *value)
        -:  126:{
    #####:  127:  if (
    #####:  128:      ACE_OS::strcmp (
        -:  129:          value,
        -:  130:          "IDL:DDS/Listener:1.0"
    #####:  131:        ) == 0 ||
    #####:  132:      ACE_OS::strcmp (
        -:  133:          value,
        -:  134:          "IDL:DDS/DataReaderListener:1.0"
    #####:  135:        ) == 0 ||
    #####:  136:      ACE_OS::strcmp (
        -:  137:          value,
        -:  138:          "IDL:OpenDDS/DCPS/DataReaderListener:1.0"
    #####:  139:        ) == 0 ||
    #####:  140:      ACE_OS::strcmp (
        -:  141:          value,
        -:  142:          "IDL:omg.org/CORBA/LocalObject:1.0"
    #####:  143:        ) == 0 ||
    #####:  144:      ACE_OS::strcmp (
        -:  145:          value,
        -:  146:          "IDL:omg.org/CORBA/Object:1.0"
        -:  147:        ) == 0
        -:  148:    )
        -:  149:    {
    #####:  150:      return true; // success using local knowledge
        -:  151:    }
        -:  152:  else
        -:  153:    {
    #####:  154:      return false;
        -:  155:    }
        -:  156:}
        -:  157:
    #####:  158:const char* OpenDDS::DCPS::DataReaderListener::_interface_repository_id (void) const
        -:  159:{
    #####:  160:  return "IDL:OpenDDS/DCPS/DataReaderListener:1.0";
        -:  161:}
        -:  162:
        -:  163:::CORBA::Boolean
    #####:  164:OpenDDS::DCPS::DataReaderListener::marshal (TAO_OutputCDR & /* cdr */)
        -:  165:{
    #####:  166:  return false;
        -:  167:}
        -:  168:
        -:  169:// TAO_IDL - Generated from
        -:  170:// be/be_visitor_sequence/sequence_cs.cpp:73
        -:  171:
        -:  172:#if !defined (_OPENDDS_DCPS_LATENCYSTATISTICSSEQ_CS_)
        -:  173:#define _OPENDDS_DCPS_LATENCYSTATISTICSSEQ_CS_
        -:  174:
    #####:  175:OpenDDS::DCPS::LatencyStatisticsSeq::LatencyStatisticsSeq (void)
    #####:  176:{}
        -:  177:
    #####:  178:OpenDDS::DCPS::LatencyStatisticsSeq::LatencyStatisticsSeq (
    #####:  179:    ::CORBA::ULong max)
        -:  180:  : ::TAO::unbounded_value_sequence<
        -:  181:        LatencyStatistics
    #####:  182:      > (max)
    #####:  183:{}
        -:  184:
    #####:  185:OpenDDS::DCPS::LatencyStatisticsSeq::LatencyStatisticsSeq (
        -:  186:    ::CORBA::ULong max,
        -:  187:    ::CORBA::ULong length,
        -:  188:    OpenDDS::DCPS::LatencyStatistics * buffer,
        -:  189:    ::CORBA::Boolean release
    #####:  190:  )
        -:  191:  : ::TAO::unbounded_value_sequence<
        -:  192:        LatencyStatistics
        -:  193:      >
    #####:  194:    (max, length, buffer, release)
    #####:  195:{}
        -:  196:
    #####:  197:OpenDDS::DCPS::LatencyStatisticsSeq::LatencyStatisticsSeq (
    #####:  198:    const LatencyStatisticsSeq &seq)
        -:  199:  : ::TAO::unbounded_value_sequence<
        -:  200:        LatencyStatistics
    #####:  201:      > (seq)
    #####:  202:{}
        -:  203:
    #####:  204:OpenDDS::DCPS::LatencyStatisticsSeq::~LatencyStatisticsSeq (void)
    #####:  205:{}
        -:  206:
        -:  207:#endif /* end #if !defined */
        -:  208:
        -:  209:// TAO_IDL - Generated from
        -:  210:// be/be_visitor_interface/interface_cs.cpp:51
        -:  211:
        -:  212:// Traits specializations for OpenDDS::DCPS::DataReaderEx.
        -:  213:
        -:  214:OpenDDS::DCPS::DataReaderEx_ptr
    #####:  215:TAO::Objref_Traits<OpenDDS::DCPS::DataReaderEx>::duplicate (
        -:  216:    OpenDDS::DCPS::DataReaderEx_ptr p)
        -:  217:{
    #####:  218:  return OpenDDS::DCPS::DataReaderEx::_duplicate (p);
        -:  219:}
        -:  220:
        -:  221:void
    #####:  222:TAO::Objref_Traits<OpenDDS::DCPS::DataReaderEx>::release (
        -:  223:    OpenDDS::DCPS::DataReaderEx_ptr p)
        -:  224:{
    #####:  225:  ::CORBA::release (p);
    #####:  226:}
        -:  227:
        -:  228:OpenDDS::DCPS::DataReaderEx_ptr
    #####:  229:TAO::Objref_Traits<OpenDDS::DCPS::DataReaderEx>::nil (void)
        -:  230:{
    #####:  231:  return OpenDDS::DCPS::DataReaderEx::_nil ();
        -:  232:}
        -:  233:
        -:  234:::CORBA::Boolean
    #####:  235:TAO::Objref_Traits<OpenDDS::DCPS::DataReaderEx>::marshal (
        -:  236:    const OpenDDS::DCPS::DataReaderEx_ptr p,
        -:  237:    TAO_OutputCDR & cdr)
        -:  238:{
    #####:  239:  return ::CORBA::Object::marshal (p, cdr);
        -:  240:}
        -:  241:
        6:  242:OpenDDS::DCPS::DataReaderEx::DataReaderEx (void)
        6:  243:{}
        -:  244:
        6:  245:OpenDDS::DCPS::DataReaderEx::~DataReaderEx (void)
        -:  246:{
        6:  247:}
        -:  248:
        -:  249:OpenDDS::DCPS::DataReaderEx_ptr
    #####:  250:OpenDDS::DCPS::DataReaderEx::_narrow (
        -:  251:    ::CORBA::Object_ptr _tao_objref)
        -:  252:{
    #####:  253:  return DataReaderEx::_duplicate (
        -:  254:      dynamic_cast<DataReaderEx_ptr> (_tao_objref)
    #####:  255:    );
        -:  256:}
        -:  257:
        -:  258:OpenDDS::DCPS::DataReaderEx_ptr
    #####:  259:OpenDDS::DCPS::DataReaderEx::_unchecked_narrow (
        -:  260:    ::CORBA::Object_ptr _tao_objref)
        -:  261:{
    #####:  262:  return DataReaderEx::_duplicate (
        -:  263:      dynamic_cast<DataReaderEx_ptr> (_tao_objref)
    #####:  264:    );
        -:  265:}
        -:  266:
        -:  267:OpenDDS::DCPS::DataReaderEx_ptr
    #####:  268:OpenDDS::DCPS::DataReaderEx::_nil (void)
        -:  269:{
    #####:  270:  return 0;
        -:  271:}
        -:  272:
        -:  273:OpenDDS::DCPS::DataReaderEx_ptr
    #####:  274:OpenDDS::DCPS::DataReaderEx::_duplicate (DataReaderEx_ptr obj)
        -:  275:{
    #####:  276:  if (! ::CORBA::is_nil (obj))
        -:  277:    {
    #####:  278:      obj->_add_ref ();
        -:  279:    }
    #####:  280:  return obj;
        -:  281:}
        -:  282:
        -:  283:void
    #####:  284:OpenDDS::DCPS::DataReaderEx::_tao_release (DataReaderEx_ptr obj)
        -:  285:{
    #####:  286:  ::CORBA::release (obj);
    #####:  287:}
        -:  288:
        -:  289:::CORBA::Boolean
    #####:  290:OpenDDS::DCPS::DataReaderEx::_is_a (const char *value)
        -:  291:{
    #####:  292:  if (
    #####:  293:      ACE_OS::strcmp (
        -:  294:          value,
        -:  295:          "IDL:DDS/Entity:1.0"
    #####:  296:        ) == 0 ||
    #####:  297:      ACE_OS::strcmp (
        -:  298:          value,
        -:  299:          "IDL:DDS/DataReader:1.0"
    #####:  300:        ) == 0 ||
    #####:  301:      ACE_OS::strcmp (
        -:  302:          value,
        -:  303:          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
    #####:  304:        ) == 0 ||
    #####:  305:      ACE_OS::strcmp (
        -:  306:          value,
        -:  307:          "IDL:omg.org/CORBA/LocalObject:1.0"
    #####:  308:        ) == 0 ||
    #####:  309:      ACE_OS::strcmp (
        -:  310:          value,
        -:  311:          "IDL:omg.org/CORBA/Object:1.0"
        -:  312:        ) == 0
        -:  313:    )
        -:  314:    {
    #####:  315:      return true; // success using local knowledge
        -:  316:    }
        -:  317:  else
        -:  318:    {
    #####:  319:      return false;
        -:  320:    }
        -:  321:}
        -:  322:
    #####:  323:const char* OpenDDS::DCPS::DataReaderEx::_interface_repository_id (void) const
        -:  324:{
    #####:  325:  return "IDL:OpenDDS/DCPS/DataReaderEx:1.0";
        -:  326:}
        -:  327:
        -:  328:::CORBA::Boolean
    #####:  329:OpenDDS::DCPS::DataReaderEx::marshal (TAO_OutputCDR & /* cdr */)
        -:  330:{
    #####:  331:  return false;
        -:  332:}
        -:  333:
        -:  334:// TAO_IDL - Generated from
        -:  335:// be/be_visitor_structure/cdr_op_cs.cpp:52
        -:  336:
        -:  337:
        -:  338:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  339:
        -:  340:
        -:  341:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  342:
    #####:  343:::CORBA::Boolean operator<< (
        -:  344:    TAO_OutputCDR &strm,
        -:  345:    const OpenDDS::DCPS::SubscriptionLostStatus &_tao_aggregate)
        -:  346:{
        -:  347:  return
    #####:  348:    (strm << _tao_aggregate.publication_handles);
        -:  349:}
        -:  350:
    #####:  351:::CORBA::Boolean operator>> (
        -:  352:    TAO_InputCDR &strm,
        -:  353:    OpenDDS::DCPS::SubscriptionLostStatus &_tao_aggregate)
        -:  354:{
        -:  355:  return
    #####:  356:    (strm >> _tao_aggregate.publication_handles);
        -:  357:}
        -:  358:
        -:  359:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  360:
        -:  361:
        -:  362:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  363:
        -:  364:
        -:  365:
        -:  366:
        -:  367:// TAO_IDL - Generated from
        -:  368:// be/be_visitor_structure/cdr_op_cs.cpp:52
        -:  369:
        -:  370:
        -:  371:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  372:
        -:  373:
        -:  374:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  375:
    #####:  376:::CORBA::Boolean operator<< (
        -:  377:    TAO_OutputCDR &strm,
        -:  378:    const OpenDDS::DCPS::BudgetExceededStatus &_tao_aggregate)
        -:  379:{
        -:  380:  return
    #####:  381:    (strm << _tao_aggregate.total_count) &&
    #####:  382:    (strm << _tao_aggregate.total_count_change) &&
    #####:  383:    (strm << _tao_aggregate.last_instance_handle);
        -:  384:}
        -:  385:
    #####:  386:::CORBA::Boolean operator>> (
        -:  387:    TAO_InputCDR &strm,
        -:  388:    OpenDDS::DCPS::BudgetExceededStatus &_tao_aggregate)
        -:  389:{
        -:  390:  return
    #####:  391:    (strm >> _tao_aggregate.total_count) &&
    #####:  392:    (strm >> _tao_aggregate.total_count_change) &&
    #####:  393:    (strm >> _tao_aggregate.last_instance_handle);
        -:  394:}
        -:  395:
        -:  396:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  397:
        -:  398:
        -:  399:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  400:
        -:  401:
        -:  402:
        -:  403:
        -:  404:// TAO_IDL - Generated from
        -:  405:// be/be_visitor_structure/cdr_op_cs.cpp:52
        -:  406:
        -:  407:
        -:  408:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  409:
        -:  410:
        -:  411:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  412:
    #####:  413:::CORBA::Boolean operator<< (
        -:  414:    TAO_OutputCDR &strm,
        -:  415:    const OpenDDS::DCPS::LatencyStatistics &_tao_aggregate)
        -:  416:{
        -:  417:  return
    #####:  418:    (strm << _tao_aggregate.publication) &&
    #####:  419:    (strm << _tao_aggregate.n) &&
    #####:  420:    (strm << _tao_aggregate.maximum) &&
    #####:  421:    (strm << _tao_aggregate.minimum) &&
    #####:  422:    (strm << _tao_aggregate.mean) &&
    #####:  423:    (strm << _tao_aggregate.variance);
        -:  424:}
        -:  425:
    #####:  426:::CORBA::Boolean operator>> (
        -:  427:    TAO_InputCDR &strm,
        -:  428:    OpenDDS::DCPS::LatencyStatistics &_tao_aggregate)
        -:  429:{
        -:  430:  return
    #####:  431:    (strm >> _tao_aggregate.publication) &&
    #####:  432:    (strm >> _tao_aggregate.n) &&
    #####:  433:    (strm >> _tao_aggregate.maximum) &&
    #####:  434:    (strm >> _tao_aggregate.minimum) &&
    #####:  435:    (strm >> _tao_aggregate.mean) &&
    #####:  436:    (strm >> _tao_aggregate.variance);
        -:  437:}
        -:  438:
        -:  439:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  440:
        -:  441:
        -:  442:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  443:
        -:  444:
        -:  445:
        -:  446:
        -:  447:// TAO_IDL - Generated from
        -:  448:// be/be_visitor_sequence/cdr_op_cs.cpp:96
        -:  449:#if !defined _TAO_CDR_OP_OpenDDS_DCPS_LatencyStatisticsSeq_CPP_
        -:  450:#define _TAO_CDR_OP_OpenDDS_DCPS_LatencyStatisticsSeq_CPP_
        -:  451:
        -:  452:
        -:  453:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  454:
        -:  455:
        -:  456:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  457:
    #####:  458:::CORBA::Boolean operator<< (
        -:  459:    TAO_OutputCDR &strm,
        -:  460:    const OpenDDS::DCPS::LatencyStatisticsSeq &_tao_sequence)
        -:  461:{
    #####:  462:  return TAO::marshal_sequence(strm, _tao_sequence);
        -:  463:}
        -:  464:
    #####:  465:::CORBA::Boolean operator>> (
        -:  466:    TAO_InputCDR &strm,
        -:  467:    OpenDDS::DCPS::LatencyStatisticsSeq &_tao_sequence)
        -:  468:{
    #####:  469:  return TAO::demarshal_sequence(strm, _tao_sequence);
        -:  470:}
        -:  471:
        -:  472:
        -:  473:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  474:
        -:  475:
        -:  476:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:  477:
        -:  478:
        -:  479:#endif /* _TAO_CDR_OP_OpenDDS_DCPS_LatencyStatisticsSeq_CPP_ */
        -:  480:
        -:  481:
        -:  482:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  483:
        -:  484:
