        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/Thread.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id$
        -:    4:
        -:    5:#include "ace/OS_NS_string.h"
        -:    6:
        -:    7:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:    8:
        -:    9:// Allocates a <keyp> that is used to identify data that is specific
        -:   10:// to each thread in the process.  The key is global to all threads in
        -:   11:// the process.
        -:   12:
        -:   13:ACE_INLINE int
        -:   14:ACE_Thread::keycreate (ACE_thread_key_t *keyp,
        -:   15:#if defined (ACE_HAS_THR_C_DEST)
        -:   16:                       ACE_THR_C_DEST destructor
        -:   17:#else
        -:   18:                       ACE_THR_DEST destructor
        -:   19:#endif /* ACE_HAS_THR_C_DEST */
        -:   20:                       )
        -:   21:{
        -:   22:  // ACE_TRACE ("ACE_Thread::keycreate");
        -:   23:  return ACE_OS::thr_keycreate (keyp, destructor);
        -:   24:}
        -:   25:
        -:   26:// Free up the key so that other threads can reuse it.
        -:   27:
        -:   28:ACE_INLINE int
        -:   29:ACE_Thread::keyfree (ACE_thread_key_t key)
        -:   30:{
        -:   31:  ACE_TRACE ("ACE_Thread::keyfree");
        -:   32:  return ACE_OS::thr_keyfree (key);
        -:   33:}
        -:   34:
        -:   35:// Bind value to the thread-specific data key, <key>, for the calling
        -:   36:// thread.
        -:   37:
        -:   38:ACE_INLINE int
        -:   39:ACE_Thread::setspecific (ACE_thread_key_t key, void *value)
        -:   40:{
        -:   41:  // ACE_TRACE ("ACE_Thread::setspecific");
        -:   42:  return ACE_OS::thr_setspecific (key, value);
        -:   43:}
        -:   44:
        -:   45:// Stores the current value bound to <key> for the calling thread
        -:   46:// into the location pointed to by <valuep>.
        -:   47:
        -:   48:ACE_INLINE int
        -:   49:ACE_Thread::getspecific (ACE_thread_key_t key, void **valuep)
        -:   50:{
        -:   51:  // ACE_TRACE ("ACE_Thread::getspecific");
        -:   52:  return ACE_OS::thr_getspecific (key, valuep);
        -:   53:}
        -:   54:
        -:   55:ACE_INLINE ACE_thread_t
    #####:   56:ACE_Thread::self (void)
        -:   57:{
        -:   58://  ACE_TRACE ("ACE_Thread::self");
    #####:   59:  return ACE_OS::thr_self ();
        -:   60:}
        -:   61:
        -:   62:ACE_INLINE void
        -:   63:ACE_Thread::exit (ACE_THR_FUNC_RETURN status)
        -:   64:{
        -:   65:  ACE_TRACE ("ACE_Thread::exit");
        -:   66:  ACE_OS::thr_exit (status);
        -:   67:}
        -:   68:
        -:   69:ACE_INLINE void
        -:   70:ACE_Thread::yield (void)
        -:   71:{
        -:   72:  ACE_TRACE ("ACE_Thread::yield");
        -:   73:  ACE_OS::thr_yield ();
        -:   74:}
        -:   75:
        -:   76:ACE_INLINE int
        -:   77:ACE_Thread::spawn (ACE_THR_FUNC func,
        -:   78:                   void *arg,
        -:   79:                   long flags,
        -:   80:                   ACE_thread_t *t_id,
        -:   81:                   ACE_hthread_t *t_handle,
        -:   82:                   long priority,
        -:   83:                   void *thr_stack,
        -:   84:                   size_t thr_stack_size,
        -:   85:                   ACE_Thread_Adapter *thread_adapter,
        -:   86:                   const char** thr_name)
        -:   87:{
        -:   88:  ACE_TRACE ("ACE_Thread::spawn");
        -:   89:
        -:   90:  return ACE_OS::thr_create (func,
        -:   91:                             arg,
        -:   92:                             flags,
        -:   93:                             t_id,
        -:   94:                             t_handle,
        -:   95:                             priority,
        -:   96:                             thr_stack,
        -:   97:                             thr_stack_size,
        -:   98:                             thread_adapter,
        -:   99:                             thr_name);
        -:  100:}
        -:  101:
        -:  102:ACE_INLINE int
        -:  103:ACE_Thread::resume (ACE_hthread_t t_id)
        -:  104:{
        -:  105:  ACE_TRACE ("ACE_Thread::resume");
        -:  106:  return ACE_OS::thr_continue (t_id);
        -:  107:}
        -:  108:
        -:  109:ACE_INLINE int
        -:  110:ACE_Thread::suspend (ACE_hthread_t t_id)
        -:  111:{
        -:  112:  ACE_TRACE ("ACE_Thread::suspend");
        -:  113:  return ACE_OS::thr_suspend (t_id);
        -:  114:}
        -:  115:
        -:  116:ACE_INLINE int
        -:  117:ACE_Thread::kill (ACE_thread_t t_id, int signum)
        -:  118:{
        -:  119:  ACE_TRACE ("ACE_Thread::kill");
        -:  120:  return ACE_OS::thr_kill (t_id, signum);
        -:  121:}
        -:  122:
        -:  123:ACE_INLINE int
        -:  124:ACE_Thread::join (ACE_thread_t wait_for,
        -:  125:                  ACE_thread_t *departed,
        -:  126:                  ACE_THR_FUNC_RETURN *status)
        -:  127:{
        -:  128:  ACE_TRACE ("ACE_Thread::join");
        -:  129:  return ACE_OS::thr_join (wait_for, departed, status);
        -:  130:}
        -:  131:
        -:  132:ACE_INLINE int
        -:  133:ACE_Thread::join (ACE_hthread_t wait_for,
        -:  134:                  ACE_THR_FUNC_RETURN *status)
        -:  135:{
        -:  136:  ACE_TRACE ("ACE_Thread::join");
        -:  137:  return ACE_OS::thr_join (wait_for, status);
        -:  138:}
        -:  139:
        -:  140:ACE_INLINE int
        -:  141:ACE_Thread::getconcurrency (void)
        -:  142:{
        -:  143:  ACE_TRACE ("ACE_Thread::getconcurrency");
        -:  144:  return ACE_OS::thr_getconcurrency ();
        -:  145:}
        -:  146:
        -:  147:ACE_INLINE int
        -:  148:ACE_Thread::setconcurrency (int new_level)
        -:  149:{
        -:  150:  ACE_TRACE ("ACE_Thread::setconcurrency");
        -:  151:  return ACE_OS::thr_setconcurrency (new_level);
        -:  152:}
        -:  153:
        -:  154:ACE_INLINE int
        -:  155:ACE_Thread::sigsetmask (int how,
        -:  156:                        const sigset_t *sigset,
        -:  157:                        sigset_t *osigset)
        -:  158:{
        -:  159:  ACE_TRACE ("ACE_Thread::sigsetmask");
        -:  160:  return ACE_OS::thr_sigsetmask (how, sigset, osigset);
        -:  161:}
        -:  162:
        -:  163:ACE_INLINE int
        -:  164:ACE_Thread::disablecancel (struct cancel_state *old_state)
        -:  165:{
        -:  166:  ACE_TRACE ("ACE_Thread::disablecancel");
        -:  167:  int old_cstate = 0;
        -:  168:  int result = ACE_OS::thr_setcancelstate (THR_CANCEL_DISABLE,
        -:  169:                                           &old_cstate);
        -:  170:  if (result == 0 && old_state != 0)
        -:  171:    {
        -:  172:      ACE_OS::memset (old_state,
        -:  173:                      0,
        -:  174:                      sizeof (*old_state));
        -:  175:      old_state->cancelstate = old_cstate;
        -:  176:    }
        -:  177:
        -:  178:  return result;
        -:  179:}
        -:  180:
        -:  181:ACE_INLINE int
        -:  182:ACE_Thread::enablecancel (struct cancel_state *old_state,
        -:  183:                          int flag)
        -:  184:{
        -:  185:  ACE_TRACE ("ACE_Thread::enablecancel");
        -:  186:  int old_cstate = 0;
        -:  187:  int old_ctype = 0;
        -:  188:  int result;
        -:  189:
        -:  190:  result = ACE_OS::thr_setcancelstate (THR_CANCEL_ENABLE,
        -:  191:                                       &old_cstate);
        -:  192:  if (result != 0)
        -:  193:    return result;
        -:  194:
        -:  195:  result = ACE_OS::thr_setcanceltype (flag,
        -:  196:                                      &old_ctype);
        -:  197:  if (result != 0)
        -:  198:    return result;
        -:  199:
        -:  200:  if (old_state != 0)
        -:  201:    {
        -:  202:      old_state->cancelstate = old_cstate;
        -:  203:      old_state->canceltype = old_ctype;
        -:  204:    }
        -:  205:
        -:  206:  return 0;
        -:  207:}
        -:  208:
        -:  209:ACE_INLINE int
        -:  210:ACE_Thread::setcancelstate (struct cancel_state &new_state,
        -:  211:                            struct cancel_state *old_state)
        -:  212:{
        -:  213:  ACE_TRACE ("ACE_Thread::setcancelstate");
        -:  214:  int old_cstate = 0;
        -:  215:  int old_ctype = 0;
        -:  216:
        -:  217:  if (new_state.cancelstate != 0
        -:  218:      && ACE_OS::thr_setcancelstate (new_state.cancelstate,
        -:  219:                                     &old_cstate) != 0)
        -:  220:    return -1;
        -:  221:
        -:  222:  if (new_state.canceltype != 0
        -:  223:      && ACE_OS::thr_setcanceltype (new_state.canceltype,
        -:  224:                                    &old_ctype) != 0)
        -:  225:    {
        -:  226:      int o_cstate;
        -:  227:
        -:  228:      ACE_OS::thr_setcancelstate (old_cstate,
        -:  229:                                  &o_cstate);
        -:  230:      return -1;
        -:  231:    }
        -:  232:
        -:  233:  if (old_state != 0)
        -:  234:    {
        -:  235:      old_state->cancelstate = old_cstate;
        -:  236:      old_state->canceltype = old_ctype;
        -:  237:    }
        -:  238:
        -:  239:  return 0;
        -:  240:}
        -:  241:
        -:  242:ACE_INLINE int
        -:  243:ACE_Thread::cancel (ACE_thread_t t_id)
        -:  244:{
        -:  245:  ACE_TRACE ("ACE_Thread::cancel");
        -:  246:
        -:  247:  return ACE_OS::thr_cancel (t_id);
        -:  248:}
        -:  249:
        -:  250:ACE_INLINE void
        -:  251:ACE_Thread::testcancel (void)
        -:  252:{
        -:  253:  ACE_TRACE ("ACE_Thread::testcancel");
        -:  254:
        -:  255:  ACE_OS::thr_testcancel ();
        -:  256:}
        -:  257:
        -:  258:ACE_INLINE void
        -:  259:ACE_Thread::self (ACE_hthread_t &t_id)
        -:  260:{
        -:  261://  ACE_TRACE ("ACE_Thread::self");
        -:  262:  ACE_OS::thr_self (t_id);
        -:  263:}
        -:  264:
        -:  265:ACE_INLINE int
        -:  266:ACE_Thread::getprio (ACE_hthread_t ht_id, int &priority)
        -:  267:{
        -:  268:  ACE_TRACE ("ACE_Thread::getprio");
        -:  269:  return ACE_OS::thr_getprio (ht_id, priority);
        -:  270:}
        -:  271:
        -:  272:ACE_INLINE int
        -:  273:ACE_Thread::getprio (ACE_hthread_t ht_id, int &priority, int &policy)
        -:  274:{
        -:  275:  ACE_TRACE ("ACE_Thread::getprio");
        -:  276:  return ACE_OS::thr_getprio (ht_id, priority, policy);
        -:  277:}
        -:  278:
        -:  279:ACE_INLINE int
        -:  280:ACE_Thread::setprio (ACE_hthread_t ht_id, int priority, int policy)
        -:  281:{
        -:  282:  ACE_TRACE ("ACE_Thread::setprio");
        -:  283:  return ACE_OS::thr_setprio (ht_id, priority, policy);
        -:  284:}
        -:  285:
        -:  286:ACE_END_VERSIONED_NAMESPACE_DECL
