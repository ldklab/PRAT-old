        -:    0:Source:../dds/DCPS/FilterEvaluator.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef OPENDDS_DCPS_FILTER_EVALUATOR_H
        -:    9:#define OPENDDS_DCPS_FILTER_EVALUATOR_H
        -:   10:
        -:   11:#include "dds/DCPS/Definitions.h"
        -:   12:
        -:   13:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:   14:
        -:   15:#include "dds/DdsDcpsInfrastructureC.h"
        -:   16:#include "dds/DCPS/PoolAllocator.h"
        -:   17:#include "Comparator_T.h"
        -:   18:#include "RcObject.h"
        -:   19:
        -:   20:#include <string>
        -:   21:
        -:   22:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   23:
        -:   24:namespace OpenDDS {
        -:   25:namespace DCPS {
        -:   26:
        -:   27:class MetaStruct;
        -:   28:
        -:   29:template<typename T>
        -:   30:const MetaStruct& getMetaStruct();
        -:   31:
        -:   32:struct OpenDDS_Dcps_Export Value {
        -:   33:  Value(bool b, bool conversion_preferred = false);
        -:   34:  Value(int i, bool conversion_preferred = false);
        -:   35:  Value(unsigned int u, bool conversion_preferred = false);
        -:   36:  Value(ACE_INT64 l, bool conversion_preferred = false);
        -:   37:  Value(ACE_UINT64 m, bool conversion_preferred = false);
        -:   38:  Value(char c, bool conversion_preferred = false);
        -:   39:  Value(double f, bool conversion_preferred = false);
        -:   40:  Value(ACE_CDR::LongDouble ld, bool conversion_preferred = false);
        -:   41:#ifdef NONNATIVE_LONGDOUBLE
        -:   42:  Value(long double ld, bool conversion_preferred = false);
        -:   43:#endif
        -:   44:  Value(const char* s, bool conversion_preferred = false);
        -:   45:  Value(const std::string& s, bool conversion_preferred = false);
        -:   46:#ifdef DDS_HAS_WCHAR
        -:   47:  Value(const std::wstring& s, bool conversion_preferred = false);
        -:   48:#endif
        -:   49:  Value(const TAO::String_Manager& s, bool conversion_preferred = false);
        -:   50:  Value(const TAO::WString_Manager& s, bool conversion_preferred = false);
        -:   51:
        -:   52:  ~Value();
        -:   53:  Value(const Value& v);
        -:   54:  Value& operator=(const Value& v);
        -:   55:  void swap(Value& other);
        -:   56:
        -:   57:  bool operator==(const Value& v) const;
        -:   58:  bool operator<(const Value& v) const;
        -:   59:  bool like(const Value& v) const;
        -:   60:  Value operator%(const Value& v) const;
        -:   61:
        -:   62:  enum Type {VAL_BOOL, VAL_INT, VAL_UINT, VAL_I64, VAL_UI64, VAL_FLOAT,
        -:   63:             VAL_LNGDUB, VAL_LARGEST_NUMERIC = VAL_LNGDUB,
        -:   64:             VAL_CHAR, VAL_STRING};
        -:   65:  bool convert(Type t);
        -:   66:  static void conversion(Value& lhs, Value& rhs);
        -:   67:  template<typename T> T& get();
        -:   68:  template<typename T> const T& get() const;
        -:   69:
        -:   70:  Type type_;
        -:   71:  union {
        -:   72:    bool b_;
        -:   73:    int i_;
        -:   74:    unsigned int u_;
        -:   75:    ACE_INT64 l_;
        -:   76:    ACE_UINT64 m_;
        -:   77:    char c_;
        -:   78:    double f_;
        -:   79:    ACE_CDR::LongDouble ld_;
        -:   80:    const char* s_;
        -:   81:  };
        -:   82:  bool conversion_preferred_;
        -:   83:};
        -:   84:
        -:   85:class OpenDDS_Dcps_Export FilterEvaluator : public RcObject {
        -:   86:public:
        -:   87:
        -:   88:  struct AstNodeWrapper;
        -:   89:
        -:   90:  FilterEvaluator(const char* filter, bool allowOrderBy);
        -:   91:
        -:   92:  explicit FilterEvaluator(const AstNodeWrapper& yardNode);
        -:   93:
        -:   94:  ~FilterEvaluator();
        -:   95:
        -:   96:  OPENDDS_VECTOR(OPENDDS_STRING) getOrderBys() const;
        -:   97:
        -:   98:  bool hasFilter() const;
        -:   99:
        -:  100:  bool usesExtendedGrammar() const { return extended_grammar_; }
        -:  101:
        -:  102:  size_t number_parameters() const { return number_parameters_; }
        -:  103:
        -:  104:  bool has_non_key_fields(const MetaStruct& meta) const;
        -:  105:
        -:  106:  /**
        -:  107:   * Returns true if the unserialized sample matches the filter.
        -:  108:   */
        -:  109:  template<typename T>
    #####:  110:  bool eval(const T& sample, const DDS::StringSeq& params) const
        -:  111:  {
    #####:  112:    DeserializedForEval data(&sample, getMetaStruct<T>(), params);
    #####:  113:    return eval_i(data);
        -:  114:  }
        -:  115:
        -:  116:  /**
        -:  117:   * Returns true if the serialized sample matches the filter.
        -:  118:   */
        -:  119:  bool eval(ACE_Message_Block* serializedSample, bool swap_bytes,
        -:  120:            bool cdr_encap, const MetaStruct& meta,
        -:  121:            const DDS::StringSeq& params) const
        -:  122:  {
        -:  123:    SerializedForEval data(serializedSample, meta, params,
        -:  124:                           swap_bytes, cdr_encap);
        -:  125:    return eval_i(data);
        -:  126:  }
        -:  127:
        -:  128:  class EvalNode;
        -:  129:  class Operand;
        -:  130:
        -:  131:  struct OpenDDS_Dcps_Export DataForEval {
    #####:  132:    DataForEval(const MetaStruct& meta, const DDS::StringSeq& params)
    #####:  133:      : meta_(meta), params_(params) {}
        -:  134:    virtual ~DataForEval();
        -:  135:    virtual Value lookup(const char* field) const = 0;
        -:  136:    const MetaStruct& meta_;
        -:  137:    const DDS::StringSeq& params_;
        -:  138:  private:
        -:  139:    DataForEval(const DataForEval&);
        -:  140:    DataForEval& operator=(const DataForEval&);
        -:  141:  };
        -:  142:
        -:  143:private:
        -:  144:  FilterEvaluator(const FilterEvaluator&);
        -:  145:  FilterEvaluator& operator=(const FilterEvaluator&);
        -:  146:
        -:  147:  EvalNode* walkAst(const AstNodeWrapper& node);
        -:  148:  Operand* walkOperand(const AstNodeWrapper& node);
        -:  149:
        -:  150:  struct OpenDDS_Dcps_Export DeserializedForEval : DataForEval {
    #####:  151:    DeserializedForEval(const void* data, const MetaStruct& meta,
        -:  152:                        const DDS::StringSeq& params)
    #####:  153:      : DataForEval(meta, params), deserialized_(data) {}
        -:  154:    virtual ~DeserializedForEval();
        -:  155:    Value lookup(const char* field) const;
        -:  156:    const void* const deserialized_;
        -:  157:  };
        -:  158:
        -:  159:  struct SerializedForEval : DataForEval {
        -:  160:    SerializedForEval(ACE_Message_Block* data, const MetaStruct& meta,
        -:  161:                      const DDS::StringSeq& params, bool swap, bool cdr)
        -:  162:      : DataForEval(meta, params), serialized_(data), swap_(swap), cdr_(cdr) {}
        -:  163:    Value lookup(const char* field) const;
        -:  164:    ACE_Message_Block* serialized_;
        -:  165:    bool swap_, cdr_;
        -:  166:    mutable OPENDDS_MAP(OPENDDS_STRING, Value) cache_;
        -:  167:  };
        -:  168:
        -:  169:  bool eval_i(DataForEval& data) const;
        -:  170:
        -:  171:  bool extended_grammar_;
        -:  172:  EvalNode* filter_root_;
        -:  173:  OPENDDS_VECTOR(OPENDDS_STRING) order_bys_;
        -:  174:  /// Number of parameter used in the filter, this should
        -:  175:  /// match the number of values passed when evaluating the filter
        -:  176:  size_t number_parameters_;
        -:  177:
        -:  178:};
        -:  179:
    #####:  180:class OpenDDS_Dcps_Export MetaStruct {
        -:  181:public:
        -:  182:  virtual ~MetaStruct();
        -:  183:
        -:  184:  virtual Value getValue(const void* stru, const char* fieldSpec) const = 0;
        -:  185:  virtual Value getValue(Serializer& ser, const char* fieldSpec) const = 0;
        -:  186:
        -:  187:  virtual ComparatorBase::Ptr create_qc_comparator(const char* fieldSpec,
        -:  188:    ComparatorBase::Ptr next) const = 0;
        -:  189:
    #####:  190:  ComparatorBase::Ptr create_qc_comparator(const char* fieldSpec) const
    #####:  191:  { return create_qc_comparator(fieldSpec, ComparatorBase::Ptr()); }
        -:  192:
        -:  193:  virtual bool compare(const void* lhs, const void* rhs,
        -:  194:                       const char* fieldSpec) const = 0;
        -:  195:
        -:  196:  virtual bool isDcpsKey(const char* field) const = 0;
        -:  197:
        -:  198:#ifndef OPENDDS_NO_MULTI_TOPIC
        -:  199:  virtual size_t numDcpsKeys() const = 0;
        -:  200:
        -:  201:  virtual const char** getFieldNames() const = 0;
        -:  202:
        -:  203:  virtual void assign(void* lhs, const char* lhsFieldSpec,
        -:  204:                      const void* rhs, const char* rhsFieldSpec,
        -:  205:                      const MetaStruct& rhsMeta) const = 0;
        -:  206:
        -:  207:  virtual const void* getRawField(const void* stru,
        -:  208:                                  const char* fieldSpec) const = 0;
        -:  209:
        -:  210:  virtual void* allocate() const = 0;
        -:  211:  virtual void deallocate(void* stru) const = 0;
        -:  212:#endif /* OPENDDS_NO_MULTI_TOPIC */
        -:  213:};
        -:  214:
        -:  215:/// Each user-defined struct type will have an instantiation of this template
        -:  216:/// generated by opendds_idl.
        -:  217:template<typename T>
        -:  218:struct MetaStructImpl;
        -:  219:
        -:  220:}  }
        -:  221:
        -:  222:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  223:
        -:  224:#endif // OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  225:#endif
