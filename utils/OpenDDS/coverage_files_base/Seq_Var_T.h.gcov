        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/TAO/tao/Seq_Var_T.h
        -:    0:Programs:72
        -:    1:// -*- C++ -*-
        -:    2:
        -:    3://=============================================================================
        -:    4:/**
        -:    5: *  @file    Seq_Var_T.h
        -:    6: *
        -:    7: *  $Id: Seq_Var_T.h 2179 2013-05-28 22:16:51Z mesnierp $
        -:    8: *
        -:    9: *  @author Jeff Parsons
        -:   10: */
        -:   11://=============================================================================
        -:   12:
        -:   13:#ifndef TAO_SEQ_VAR_T_H
        -:   14:#define TAO_SEQ_VAR_T_H
        -:   15:
        -:   16:#include /**/ "ace/pre.h"
        -:   17:
        -:   18:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   19:# pragma once
        -:   20:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   21:
        -:   22:#include /**/ "tao/Versioned_Namespace.h"
        -:   23:
        -:   24:#include "tao/Basic_Types.h"
        -:   25:
        -:   26:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   27:
        -:   28:/**
        -:   29: * @class TAO_Seq_Var_Base_T
        -:   30: *
        -:   31: * @brief Parametrized implementation of _var base class for sequences
        -:   32: *
        -:   33: */
        -:   34:template <typename T>
        -:   35:class TAO_Seq_Var_Base_T
        -:   36:{
        -:   37:public:
        -:   38:  typedef typename T::subscript_type T_elem;
        -:   39:
        -:   40:  TAO_Seq_Var_Base_T (void);
        -:   41:  TAO_Seq_Var_Base_T (T *);
        -:   42:  TAO_Seq_Var_Base_T (const TAO_Seq_Var_Base_T<T> &);
        -:   43:
        -:   44:  ~TAO_Seq_Var_Base_T (void);
        -:   45:
        -:   46:  T *operator-> (void);
        -:   47:  const T *operator-> (void) const;
        -:   48:
        -:   49:  operator const T & () const;
        -:   50:  operator T & ();
        -:   51:  operator T & () const;
        -:   52:
        -:   53:  typedef const T &   _in_type;
        -:   54:  typedef       T &   _inout_type;
        -:   55:  typedef       T *&  _out_type;
        -:   56:  typedef       T *   _retn_type;
        -:   57:
        -:   58:  // in, inout, out, _retn
        -:   59:  _in_type      in (void) const;
        -:   60:  _inout_type   inout (void);
        -:   61:  _out_type     out (void);
        -:   62:  _retn_type    _retn (void);
        -:   63:
        -:   64:  /// TAO extension.
        -:   65:  _retn_type    ptr (void) const;
        -:   66:
        -:   67:protected:
        -:   68:  T * ptr_;
        -:   69:};
        -:   70:
        -:   71:/**
        -:   72: * @class TAO_FixedSeq_Var_T
        -:   73: *
        -:   74: * @brief Parametrized implementation of _var class for sequences
        -:   75: * whose element is of fixed size..
        -:   76: */
        -:   77:template <typename T>
      162:   78:class TAO_FixedSeq_Var_T : public TAO_Seq_Var_Base_T<T>
        -:   79:{
        -:   80:public:
        -:   81:  typedef typename T::subscript_type T_elem;
        -:   82:  typedef typename T::const_subscript_type T_const_elem;
        -:   83:
        -:   84:  TAO_FixedSeq_Var_T (void);
        -:   85:  TAO_FixedSeq_Var_T (T *);
        -:   86:  TAO_FixedSeq_Var_T (const TAO_FixedSeq_Var_T<T> &);
        -:   87:
        -:   88:  // Fixed-size base types only.
        -:   89:  TAO_FixedSeq_Var_T (const T &);
        -:   90:
        -:   91:  TAO_FixedSeq_Var_T & operator= (T *);
        -:   92:  TAO_FixedSeq_Var_T & operator= (const TAO_FixedSeq_Var_T<T> &);
        -:   93:
        -:   94:  T_elem operator[] (CORBA::ULong index);
        -:   95:  T_const_elem operator[] (CORBA::ULong index) const;
        -:   96:
        -:   97:  /// Fixed-size base types only.
        -:   98:  TAO_FixedSeq_Var_T & operator= (const T &);
        -:   99:};
        -:  100:
        -:  101:/**
        -:  102: * @class TAO_VarSeq_Var_T
        -:  103: *
        -:  104: * @brief Parametrized implementation of _var class for sequences
        -:  105: * whose element is of variable size..
        -:  106: *
        -:  107: */
        -:  108:template <typename T>
        -:  109:class TAO_VarSeq_Var_T : public TAO_Seq_Var_Base_T<T>
        -:  110:{
        -:  111:public:
        -:  112:  typedef typename T::subscript_type T_elem;
        -:  113:  typedef typename T::const_subscript_type T_const_elem;
        -:  114:
        -:  115:  TAO_VarSeq_Var_T (void);
        -:  116:  TAO_VarSeq_Var_T (T *);
        -:  117:  TAO_VarSeq_Var_T (const TAO_VarSeq_Var_T<T> &);
        -:  118:
        -:  119:  TAO_VarSeq_Var_T & operator= (T *);
        -:  120:  TAO_VarSeq_Var_T & operator= (const TAO_VarSeq_Var_T<T> &);
        -:  121:
        -:  122:  T_elem operator[] (CORBA::ULong index);
        -:  123:  T_const_elem operator[] (CORBA::ULong index) const;
        -:  124:
        -:  125:  /// Variable-size base types only.
        -:  126:  operator T *& ();
        -:  127:};
        -:  128:
        -:  129:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  130:
        -:  131:#if defined (__ACE_INLINE__)
        -:  132:#include "tao/Seq_Var_T.inl"
        -:  133:#endif /* defined INLINE */
        -:  134:
        -:  135:#if defined (ACE_TEMPLATES_REQUIRE_SOURCE)
        -:  136:#include "tao/Seq_Var_T.cpp"
        -:  137:#endif /* ACE_TEMPLATES_REQUIRE_SOURCE */
        -:  138:
        -:  139:#if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
        -:  140:#pragma implementation ("Seq_Var_T.cpp")
        -:  141:#endif /* ACE_TEMPLATES_REQUIRE_PRAGMA */
        -:  142:
        -:  143:#include /**/ "ace/post.h"
        -:  144:
        -:  145:#endif /* TAO_SEQ_VAROUT_T_H */
