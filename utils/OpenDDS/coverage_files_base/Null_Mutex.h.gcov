        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/Null_Mutex.h
        -:    0:Programs:72
        -:    1:// -*- C++ -*-
        -:    2:
        -:    3://==========================================================================
        -:    4:/**
        -:    5: *  @file    Null_Mutex.h
        -:    6: *
        -:    7: *  $Id: Null_Mutex.h 2622 2015-08-13 18:30:00Z mitza $
        -:    8: *
        -:    9: *   Moved from Synch.h.
        -:   10: *
        -:   11: *  @author Douglas C. Schmidt <schmidt@cs.wustl.edu>
        -:   12: */
        -:   13://==========================================================================
        -:   14:
        -:   15:#ifndef ACE_NULL_MUTEX_H
        -:   16:#define ACE_NULL_MUTEX_H
        -:   17:#include /**/ "ace/pre.h"
        -:   18:
        -:   19:#include "ace/os_include/os_errno.h"
        -:   20:
        -:   21:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   22:# pragma once
        -:   23:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   24:
        -:   25:#include "ace/Global_Macros.h"
        -:   26:#include "ace/OS_Memory.h"
        -:   27:
        -:   28:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   29:
        -:   30:class ACE_Time_Value;
        -:   31:
        -:   32:/**
        -:   33: * @class ACE_Null_Mutex
        -:   34: *
        -:   35: * @brief Implement a do nothing ACE_Mutex, i.e., all the methods are
        -:   36: * no ops.
        -:   37: */
        -:   38:class ACE_Export ACE_Null_Mutex
        -:   39:{
        -:   40:public:
       72:   41:  ACE_Null_Mutex (const ACE_TCHAR * = 0)
       72:   42:    : lock_ (0) {}
       72:   43:  ~ACE_Null_Mutex (void) {}
        -:   44:  /// Return 0.
        -:   45:  int remove (void) {return 0;}
        -:   46:
        -:   47:  /// Return 0.
        -:   48:  int acquire (void) {return 0;}
        -:   49:
        -:   50:  /// Return -1 with @c errno == @c ETIME.
        -:   51:  int acquire (ACE_Time_Value &) {errno = ETIME; return -1;}
        -:   52:
        -:   53:  /// Return -1 with @c errno == @c ETIME.
        -:   54:  int acquire (ACE_Time_Value *) {errno = ETIME; return -1;}
        -:   55:
        -:   56:  /// Return 0.
        -:   57:  int tryacquire (void) {return 0;}
        -:   58:
        -:   59:  /// Return 0.
        -:   60:  int release (void) {return 0;}
        -:   61:
        -:   62:  /// Return 0.
        -:   63:  int acquire_write (void) {return 0;}
        -:   64:
        -:   65:  /// Return 0.
        -:   66:  int tryacquire_write (void) {return 0;}
        -:   67:
        -:   68:  /// Return 0.
        -:   69:  int tryacquire_write_upgrade (void) {return 0;}
        -:   70:
        -:   71:  /// Return 0.
        -:   72:  int acquire_read (void) {return 0;}
        -:   73:
        -:   74:  /// Return 0.
        -:   75:  int tryacquire_read (void) {return 0;}
        -:   76:
        -:   77:  /// Dump the state of an object.
        -:   78:  void dump (void) const {}
        -:   79:
        -:   80:  /// Declare the dynamic allocation hooks.
        -:   81:  //ACE_ALLOC_HOOK_DECLARE;
        -:   82:
        -:   83:  int lock_; // A dummy lock.
        -:   84:
        -:   85:  ACE_ALLOC_HOOK_DECLARE;
        -:   86:};
        -:   87:
        -:   88:// FUZZ: disable check_for_ACE_Guard
        -:   89:
        -:   90:template <class ACE_LOCK>
        -:   91:class ACE_Guard;
        -:   92:
        -:   93:/**
        -:   94: * @brief Template specialization of ACE_Guard for the
        -:   95: * ACE_Null_Mutex.
        -:   96: *
        -:   97: * This specialization is useful since it helps to speedup
        -:   98: * performance of the "Null_Mutex" considerably.
        -:   99: */
        -:  100:template<>
        -:  101:class ACE_Export ACE_Guard<ACE_Null_Mutex>
        -:  102:{
        -:  103:public:
        -:  104:  // = Initialization and termination methods.
     1383:  105:  ACE_Guard (ACE_Null_Mutex &) {}
        -:  106:  ACE_Guard (ACE_Null_Mutex &, int) {}
        -:  107:  ACE_Guard (ACE_Null_Mutex &, int, int) {}
        -:  108:#if defined (ACE_WIN32)
        -:  109:  ~ACE_Guard (void) {}
        -:  110:#endif /* ACE_WIN32 */
        -:  111:
        -:  112:  int acquire (void) { return 0; }
        -:  113:  int tryacquire (void) { return 0; }
        -:  114:  int release (void) { return 0; }
        -:  115:  void disown (void) {}
     1383:  116:  int locked (void) { return 1; }
        -:  117:  int remove (void) { return 0; }
        -:  118:  void dump (void) const {}
        -:  119:
        -:  120:private:
        -:  121:
        -:  122:  // Disallow copying and assignment.
        -:  123:  ACE_Guard (const ACE_Guard<ACE_Null_Mutex> &);
        -:  124:  void operator= (const ACE_Guard<ACE_Null_Mutex> &);
        -:  125:
        -:  126:};
        -:  127:
        -:  128:template <class ACE_LOCK>
        -:  129:class ACE_Write_Guard;
        -:  130:
        -:  131:/**
        -:  132: * @brief Template specialization of ACE_Write_Guard for the
        -:  133: * ACE_Null_Mutex.
        -:  134: */
        -:  135:template<>
        -:  136:class ACE_Export ACE_Write_Guard<ACE_Null_Mutex>
        -:  137:  : public ACE_Guard<ACE_Null_Mutex>
        -:  138:{
        -:  139:public:
        -:  140:  ACE_Write_Guard (ACE_Null_Mutex &m)
        -:  141:    : ACE_Guard<ACE_Null_Mutex> (m) {}
        -:  142:  ACE_Write_Guard (ACE_Null_Mutex &m, int blocked)
        -:  143:    : ACE_Guard<ACE_Null_Mutex> (m, blocked) {}
        -:  144:
        -:  145:  int acquire_write (void) { return 0; }
        -:  146:  int acquire (void) { return 0; }
        -:  147:  int tryacquire_write (void) { return 0; }
        -:  148:  int tryacquire (void) { return 0; }
        -:  149:  void dump (void) const {}
        -:  150:};
        -:  151:
        -:  152:template <class ACE_LOCK>
        -:  153:class ACE_Read_Guard;
        -:  154:
        -:  155:/**
        -:  156: * @brief Template specialization of ACE_Read)Guard for the
        -:  157: * ACE_Null_Mutex.
        -:  158: */
        -:  159:template<>
        -:  160:class ACE_Export ACE_Read_Guard<ACE_Null_Mutex>
        -:  161:  : public ACE_Guard<ACE_Null_Mutex>
        -:  162:{
        -:  163:public:
        -:  164:  ACE_Read_Guard (ACE_Null_Mutex &m)
        -:  165:    : ACE_Guard<ACE_Null_Mutex> (m) {}
        -:  166:  ACE_Read_Guard (ACE_Null_Mutex &m, int blocked)
        -:  167:    : ACE_Guard<ACE_Null_Mutex> (m, blocked) {}
        -:  168:
        -:  169:  int acquire_read (void) { return 0; }
        -:  170:  int acquire (void) { return 0; }
        -:  171:  int tryacquire_read (void) { return 0; }
        -:  172:  int tryacquire (void) { return 0; }
        -:  173:  void dump (void) const {}
        -:  174:};
        -:  175:
        -:  176:// FUZZ: enable check_for_ACE_Guard
        -:  177:
        -:  178:template <class T> class ACE_Malloc_Lock_Adapter_T;
        -:  179:
        -:  180:/**
        -:  181: * @brief Template specialization of ACE_Malloc_Lock_Adapter_T for the
        -:  182: * ACE_Null_Mutex.
        -:  183: */
        -:  184:template<>
        -:  185:class ACE_Export ACE_Malloc_Lock_Adapter_T<ACE_Null_Mutex>
        -:  186:{
        -:  187:public:
        -:  188:  ACE_Null_Mutex * operator () (const ACE_TCHAR *name)
        -:  189:  {
        -:  190:    ACE_Null_Mutex *p;
        -:  191:    ACE_NEW_RETURN (p, ACE_Null_Mutex (name), 0);
        -:  192:    return p;
        -:  193:  }
        -:  194:};
        -:  195:
        -:  196:ACE_END_VERSIONED_NAMESPACE_DECL
        -:  197:
        -:  198:#include /**/ "ace/post.h"
        -:  199:#endif /* ACE_NULL_MUTEX_H */
