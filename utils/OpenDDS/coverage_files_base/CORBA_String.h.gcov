        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/TAO/tao/CORBA_String.h
        -:    0:Programs:72
        -:    1:// -*- C++ -*-
        -:    2://=============================================================================
        -:    3:/**
        -:    4: *  @file    CORBA_String.h
        -:    5: *
        -:    6: *  $Id: CORBA_String.h 14 2007-02-01 15:49:12Z mitza $
        -:    7: *
        -:    8: *  Header file for the CORBA string types.
        -:    9: *
        -:   10: *  @author DOC Group at Wash U, UCI, and Vanderbilt U.
        -:   11: */
        -:   12://=============================================================================
        -:   13:
        -:   14:#ifndef TAO_CORBA_STRING_H
        -:   15:#define TAO_CORBA_STRING_H
        -:   16:
        -:   17:#include /**/ "ace/pre.h"
        -:   18:
        -:   19:#include /**/ "tao/TAO_Export.h"
        -:   20:#include "tao/Basic_Types.h"
        -:   21:
        -:   22:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   23:# pragma once
        -:   24:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   25:
        -:   26:#include "tao/String_Traits_Base_T.h"
        -:   27:// For the (W)String_var and (W)String_out iostream operators.
        -:   28:#include "ace/iosfwd.h"
        -:   29:
        -:   30:#include <algorithm>
        -:   31:
        -:   32:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   33:
        -:   34:namespace TAO
        -:   35:{
        -:   36:  template <typename charT> class String_Manager_T;  // Forward declaration.
        -:   37:  typedef String_Manager_T<CORBA::Char> String_Manager;
        -:   38:  typedef String_Manager_T<CORBA::WChar> WString_Manager;
        -:   39:}
        -:   40:
        -:   41:namespace TAO
        -:   42:{
        -:   43:  /**
        -:   44:   * @class String_var
        -:   45:   *
        -:   46:   * Provides automatic deallocation of storage for the string once it
        -:   47:   * goes out of scope.
        -:   48:   */
        -:   49:  template <typename charT>
        -:   50:  class String_var
        -:   51:  {
        -:   52:  public:
        -:   53:    typedef charT character_type;
        -:   54:    typedef TAO::details::string_traits_base <character_type> s_traits;
        -:   55:
        -:   56:    /// Default constructor.
       30:   57:    inline String_var (void) : ptr_ (0)
        -:   58:    {
       30:   59:    }
        -:   60:
        -:   61:    /// Constructor, owns p.
       63:   62:    inline String_var (character_type *p) : ptr_ (p)
        -:   63:    {
       63:   64:    }
        -:   65:
        -:   66:    /// Constructor. Makes a copy of p.
        -:   67:    inline String_var (const character_type *p) : ptr_ (s_traits::duplicate (p))
        -:   68:    {
        -:   69:    }
        -:   70:
        -:   71:    /// Copy constructor.
        -:   72:    inline String_var (String_var<charT> const &s) : ptr_(s_traits::duplicate(s.ptr_))
        -:   73:    {
        -:   74:    }
        -:   75:
        -:   76:    /// Destructor.
      114:   77:    inline ~String_var (void)
        -:   78:    {
      114:   79:      s_traits::release (this->ptr_);
      114:   80:    }
        -:   81:
        -:   82:    /// Assignment operator.
        -:   83:    inline String_var &operator= (character_type *p)
        -:   84:    {
        -:   85:      String_var <charT> tmp (p);
        -:   86:      std::swap (this->ptr_, tmp.ptr_);
        -:   87:      return *this;
        -:   88:    }
        -:   89:
        -:   90:    /// Assignment to a const char*.  Makes a copy.
        -:   91:    inline String_var &operator= (const character_type *p)
        -:   92:    {
        -:   93:      String_var <charT> tmp (p);
        -:   94:      std::swap (this->ptr_, tmp.ptr_);
        -:   95:      return *this;
        -:   96:    }
        -:   97:
        -:   98:    /// Assignment operator.
        -:   99:    inline String_var &operator= (String_var<character_type> const &s)
        -:  100:    {
        -:  101:      String_var <charT> tmp (s);
        -:  102:      std::swap (this->ptr_, tmp.ptr_);
        -:  103:      return *this;
        -:  104:    }
        -:  105:
        -:  106:    /// Spec-defined read/write version.
       27:  107:    inline operator character_type *&()
        -:  108:    {
       27:  109:      return this->ptr_;
        -:  110:    }
        -:  111:
        -:  112:    /// Only read privileges.
        -:  113:    inline operator const character_type *() const
        -:  114:    {
        -:  115:      return this->ptr_;
        -:  116:    }
        -:  117:
        -:  118:    /// Allows access and modification using an slot.
        -:  119:    inline character_type &operator[] (CORBA::ULong slot)
        -:  120:    {
        -:  121:      // We need to verify bounds else raise some exception.
        -:  122:      return this->ptr_[slot];
        -:  123:    }
        -:  124:
        -:  125:    /// Allows only accessing thru an slot.
        -:  126:    inline character_type operator[] (CORBA::ULong slot) const
        -:  127:    {
        -:  128:      // We need to verify bounds else raise some exception.
        -:  129:      return this->ptr_[slot];
        -:  130:    }
        -:  131:
        -:  132:    /// For in parameter.
      132:  133:    inline const character_type *in (void) const
        -:  134:    {
      132:  135:      return this->ptr_;
        -:  136:    }
        -:  137:
        -:  138:    /// For inout parameter.
    #####:  139:    inline character_type *&inout (void)
        -:  140:    {
    #####:  141:      return this->ptr_;
        -:  142:    }
        -:  143:
        -:  144:    /// For out parameter.
        -:  145:    inline character_type *&out (void)
        -:  146:    {
        -:  147:      s_traits::release (this->ptr_);
        -:  148:      this->ptr_ = 0;
        -:  149:      return this->ptr_;
        -:  150:    }
        -:  151:
        -:  152:    /// For string of return type.
        9:  153:    inline character_type *_retn (void)
        -:  154:    {
        9:  155:      character_type *temp = this->ptr_;
        9:  156:      this->ptr_ = 0;
        9:  157:      return temp;
        -:  158:    }
        -:  159:
        -:  160:  private:
        -:  161:    /// Instance.
        -:  162:    character_type *ptr_;
        -:  163:  };
        -:  164:
        -:  165:  /**
        -:  166:   * @class String_out
        -:  167:   *
        -:  168:   * @brief String_out
        -:  169:   *
        -:  170:   * To support the memory management for "out" parameter passing
        -:  171:   * mode.
        -:  172:   */
        -:  173:  template <typename charT>
        -:  174:  class String_out
        -:  175:  {
        -:  176:  public:
        -:  177:    typedef charT character_type;
        -:  178:    typedef TAO::details::string_traits_base <character_type> s_traits;
        -:  179:    typedef typename s_traits::string_mgr string_mgr;
        -:  180:
        -:  181:    /// Construction from a reference to a string.
        -:  182:    inline String_out (character_type *&p) : ptr_ (p)
        -:  183:    {
        -:  184:      this->ptr_ = 0;
        -:  185:    }
        -:  186:
        -:  187:    /// Construction from a var.
        -:  188:    inline String_out (String_var <character_type> &p) : ptr_ (p.out ())
        -:  189:    {
        -:  190:    }
        -:  191:
        -:  192:    /// Construction from a TAO::String_Manager.
        -:  193:    inline String_out (string_mgr &p) : ptr_ (p.out ())
        -:  194:    {
        -:  195:    }
        -:  196:
        -:  197:    /// Copy constructor.
        -:  198:    inline String_out (const String_out<charT> &s) : ptr_ (s.ptr_)
        -:  199:    {
        -:  200:    }
        -:  201:
        -:  202:    /// Assignment from a string_out.
        -:  203:    inline String_out &operator= (String_out<charT> const &s)
        -:  204:    {
        -:  205:      this->ptr_ = s.ptr_;
        -:  206:      return *this;
        -:  207:    }
        -:  208:
        -:  209:    /// Assignment from a string.
        -:  210:    inline String_out &operator= (character_type *p)
        -:  211:    {
        -:  212:      this->ptr_ = p;
        -:  213:      return *this;
        -:  214:    }
        -:  215:
        -:  216:    /// Assignment from a constant char*.
        -:  217:    inline String_out& operator= (const character_type* p)
        -:  218:    {
        -:  219:      this->ptr_ = s_traits::duplicate (p);
        -:  220:      return *this;
        -:  221:    }
        -:  222:
        -:  223:    /// Cast.
        -:  224:    inline operator character_type *&()
        -:  225:    {
        -:  226:      return this->ptr_;
        -:  227:    }
        -:  228:
        -:  229:    /// Return underlying instance.
        -:  230:    inline character_type *&ptr (void)
        -:  231:    {
        -:  232:      return this->ptr_;
        -:  233:    }
        -:  234:
        -:  235:  private:
        -:  236:    /// Instance.
        -:  237:    character_type *&ptr_;
        -:  238:
        -:  239:    // Assignment from _var disallowed
        -:  240:    void operator= (const typename s_traits::string_var &);
        -:  241:  };
        -:  242:
        -:  243:  /**
        -:  244:   * @struct TAO-specific @c {W}String_var Equality Functor
        -:  245:   *
        -:  246:   * This functor exist to simplify usage of @c {W}String_var in
        -:  247:   * containers.
        -:  248:   */
        -:  249:  struct String_Var_Equal_To
        -:  250:  {
        -:  251:    bool operator() (CORBA::String_var const & lhs,
        -:  252:                     CORBA::String_var const & rhs) const;
        -:  253:
        -:  254:    bool operator() (CORBA::WString_var const & lhs,
        -:  255:                     CORBA::WString_var const & rhs) const;
        -:  256:  };
        -:  257:}
        -:  258:
        -:  259:namespace CORBA
        -:  260:{
        -:  261:  typedef TAO::String_var <char> String_var;
        -:  262:  typedef TAO::String_out <char> String_out;
        -:  263:  typedef TAO::String_var <CORBA::WChar> WString_var;
        -:  264:  typedef TAO::String_out <CORBA::WChar> WString_out;
        -:  265:}
        -:  266:
        -:  267:
        -:  268:# if !defined (ACE_LACKS_IOSTREAM_TOTALLY)
        -:  269:
        -:  270:TAO_Export ostream &
        -:  271:operator<< (ostream &, const CORBA::String_var &);
        -:  272:TAO_Export istream &
        -:  273:operator>> (istream &, CORBA::String_var &);
        -:  274:TAO_Export ostream &
        -:  275:operator<< (ostream &, CORBA::String_out &);
        -:  276:TAO_Export istream &
        -:  277:operator>> (istream &, CORBA::String_out &);
        -:  278:TAO_Export ostream &
        -:  279:operator<< (ostream &, const CORBA::WString_var &);
        -:  280:TAO_Export istream &
        -:  281:operator>> (istream &, CORBA::WString_var &);
        -:  282:TAO_Export ostream &
        -:  283:operator<< (ostream &, CORBA::WString_out &);
        -:  284:TAO_Export istream &
        -:  285:operator>> (istream &, CORBA::WString_out &);
        -:  286:
        -:  287:# endif /* ACE_LACKS_IOSTREAM_TOTALLY */
        -:  288:
        -:  289:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  290:
        -:  291:#if defined (__ACE_INLINE__)
        -:  292:# include "tao/CORBA_String.inl"
        -:  293:#endif /* ! __ACE_INLINE__ */
        -:  294:
        -:  295:#include /**/ "ace/post.h"
        -:  296:
        -:  297:#endif  /* TAO_CORBA_STRING_H */
