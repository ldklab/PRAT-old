        -:    0:Source:../dds/DCPS/DataWriterCallbacks.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef OPENDDS_DCPS_DATAWRITERCALLBACKS_H
        -:    9:#define OPENDDS_DCPS_DATAWRITERCALLBACKS_H
        -:   10:
        -:   11:#include "dds/DCPS/Definitions.h"
        -:   12:#include "dds/DCPS/DiscoveryListener.h"
        -:   13:#include "dds/DCPS/RcObject.h"
        -:   14:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   15:#pragma once
        -:   16:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   17:
        -:   18:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   19:
        -:   20:namespace OpenDDS {
        -:   21:
        -:   22:namespace ICE {
        -:   23:  class Endpoint;
        -:   24:}
        -:   25:
        -:   26:namespace DCPS {
        -:   27:
        -:   28:/**
        -:   29:* @class DataWriterCallbacks
        -:   30:*
        -:   31:* @brief Defines the interface for Discovery callbacks into the DataWriter.
        -:   32:*
        -:   33:*/
        -:   34:class DataWriterCallbacks
        -:   35:  : public virtual RcObject {
        -:   36:public:
        -:   37:
       12:   38:  DataWriterCallbacks() {}
        -:   39:
       12:   40:  virtual ~DataWriterCallbacks() {}
        -:   41:
        -:   42:  virtual void add_association(const RepoId& yourId,
        -:   43:                               const ReaderAssociation& reader,
        -:   44:                               bool active) = 0;
        -:   45:
        -:   46:  virtual void association_complete(const RepoId& remote_id) = 0;
        -:   47:
        -:   48:  virtual void remove_associations(const ReaderIdSeq& readers,
        -:   49:                                   CORBA::Boolean callback) = 0;
        -:   50:
        -:   51:  virtual void update_incompatible_qos(const IncompatibleQosStatus& status) = 0;
        -:   52:
        -:   53:  virtual void update_subscription_params(const RepoId& readerId,
        -:   54:                                          const DDS::StringSeq& exprParams) = 0;
        -:   55:
        -:   56:  virtual void inconsistent_topic() = 0;
        -:   57:
    #####:   58:  virtual void register_for_reader(const RepoId& /*participant*/,
        -:   59:                                   const RepoId& /*writerid*/,
        -:   60:                                   const RepoId& /*readerid*/,
        -:   61:                                   const TransportLocatorSeq& /*locators*/,
    #####:   62:                                   DiscoveryListener* /*listener*/) { }
        -:   63:
    #####:   64:  virtual void unregister_for_reader(const RepoId& /*participant*/,
        -:   65:                                     const RepoId& /*writerid*/,
    #####:   66:                                     const RepoId& /*readerid*/) { }
        -:   67:
        -:   68:  virtual ICE::Endpoint* get_ice_endpoint() = 0;
        -:   69:};
        -:   70:
        -:   71:} // namespace DCPS
        -:   72:} // namespace OpenDDS
        -:   73:
        -:   74:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:   75:
        -:   76:#endif /* OPENDDS_DCPS_DATAWRITERCALLBACKS_H  */
