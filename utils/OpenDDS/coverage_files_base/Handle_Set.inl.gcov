        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/Handle_Set.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id$
        -:    4:
        -:    5:#include "ace/Log_Category.h"
        -:    6:
        -:    7:// AIX defines bzero() in this odd file... used by FD_ZERO
        -:    8:#if defined (ACE_HAS_STRINGS)
        -:    9:#  include "ace/os_include/os_strings.h"
        -:   10:#endif /* ACE_HAS_STRINGS */
        -:   11:
        -:   12:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   13:
        -:   14:// Initialize the bitmask to all 0s and reset the associated fields.
        -:   15:
        -:   16:ACE_INLINE void
    #####:   17:ACE_Handle_Set::reset (void)
        -:   18:{
        -:   19:  ACE_TRACE ("ACE_Handle_Set::reset");
    #####:   20:  this->max_handle_ =
        -:   21:    ACE_INVALID_HANDLE;
        -:   22:#if defined (ACE_HAS_BIG_FD_SET)
    #####:   23:  this->min_handle_ =
        -:   24:    NUM_WORDS * WORDSIZE;
        -:   25:#endif /* ACE_HAS_BIG_FD_SET */
    #####:   26:  this->size_ = 0;
        -:   27:  // #if !defined (ACE_HAS_BIG_FD_SET)      Why is this here?  -Steve Huston
    #####:   28:  FD_ZERO (&this->mask_);
        -:   29:  // #endif /* ACE_HAS_BIG_FD_SET */
    #####:   30:}
        -:   31:
        -:   32:#if defined (ACE_HAS_BIG_FD_SET)
        -:   33:ACE_INLINE ACE_Handle_Set &
    #####:   34:ACE_Handle_Set::operator = (const ACE_Handle_Set &rhs)
        -:   35:{
        -:   36:  ACE_TRACE ("ACE_Handle_Set::operator =");
        -:   37:
    #####:   38:  if (rhs.size_ > 0)
        -:   39:    {
    #####:   40:      this->size_ =
    #####:   41:        rhs.size_;
    #####:   42:      this->max_handle_ =
    #####:   43:        rhs.max_handle_;
    #####:   44:      this->min_handle_ =
    #####:   45:        rhs.min_handle_;
    #####:   46:      this->mask_ =
        -:   47:        rhs.mask_;
        -:   48:    }
        -:   49:  else
    #####:   50:    this->reset ();
        -:   51:
    #####:   52:  return *this;
        -:   53:}
        -:   54:#endif /* ACE_HAS_BIG_FD_SET */
        -:   55:
        -:   56:// Returns the number of the large bit.
        -:   57:
        -:   58:ACE_INLINE ACE_HANDLE
        -:   59:ACE_Handle_Set::max_set (void) const
        -:   60:{
        -:   61:  ACE_TRACE ("ACE_Handle_Set::max_set");
        -:   62:  return this->max_handle_;
        -:   63:}
        -:   64:
        -:   65:// Checks whether handle is enabled.
        -:   66:
        -:   67:ACE_INLINE int
    #####:   68:ACE_Handle_Set::is_set (ACE_HANDLE handle) const
        -:   69:{
        -:   70:  ACE_TRACE ("ACE_Handle_Set::is_set");
        -:   71:#if defined (ACE_HAS_BIG_FD_SET)
    #####:   72:  return FD_ISSET (handle,
        -:   73:                   &this->mask_)
    #####:   74:    && this->size_ > 0;
        -:   75:#elif defined (ACE_HAS_NONCONST_FD_ISSET)
        -:   76:  return FD_ISSET (handle,
        -:   77:                   const_cast<fd_set*> (&this->mask_));
        -:   78:#elif defined (ACE_VXWORKS) && ACE_VXWORKS >= 0x690
        -:   79:  return FD_ISSET (handle, &this->mask_) != 0;
        -:   80:#else
        -:   81:  return FD_ISSET (handle,
        -:   82:                   &this->mask_);
        -:   83:#endif /* ACE_HAS_BIG_FD_SET */
        -:   84:}
        -:   85:
        -:   86:// Enables the handle.
        -:   87:
        -:   88:ACE_INLINE void
    #####:   89:ACE_Handle_Set::set_bit (ACE_HANDLE handle)
        -:   90:{
        -:   91:  ACE_TRACE ("ACE_Handle_Set::set_bit");
    #####:   92:  if ((handle != ACE_INVALID_HANDLE)
    #####:   93:      && (!this->is_set (handle)))
        -:   94:    {
        -:   95:#if defined (ACE_HANDLE_SET_USES_FD_ARRAY)
        -:   96:      FD_SET ((SOCKET) handle,
        -:   97:              &this->mask_);
        -:   98:      ++this->size_;
        -:   99:#else /* ACE_HANDLE_SET_USES_FD_ARRAY */
        -:  100:#if defined (ACE_HAS_BIG_FD_SET)
    #####:  101:      if (this->size_ == 0)
    #####:  102:        FD_ZERO (&this->mask_);
        -:  103:
    #####:  104:      if (handle < this->min_handle_)
    #####:  105:        this->min_handle_ = handle;
        -:  106:#endif /* ACE_HAS_BIG_FD_SET */
        -:  107:
    #####:  108:      FD_SET (handle,
        -:  109:              &this->mask_);
    #####:  110:      ++this->size_;
        -:  111:
    #####:  112:      if (handle > this->max_handle_)
    #####:  113:        this->max_handle_ = handle;
        -:  114:#endif /* ACE_HANDLE_SET_USES_FD_ARRAY */
        -:  115:    }
    #####:  116:}
        -:  117:
        -:  118:// Disables the handle.
        -:  119:
        -:  120:ACE_INLINE void
    #####:  121:ACE_Handle_Set::clr_bit (ACE_HANDLE handle)
        -:  122:{
        -:  123:  ACE_TRACE ("ACE_Handle_Set::clr_bit");
        -:  124:
    #####:  125:  if ((handle != ACE_INVALID_HANDLE) &&
    #####:  126:      (this->is_set (handle)))
        -:  127:    {
    #####:  128:      FD_CLR ((ACE_SOCKET) handle,
        -:  129:              &this->mask_);
    #####:  130:      --this->size_;
        -:  131:
        -:  132:#if !defined (ACE_HANDLE_SET_USES_FD_ARRAY)
    #####:  133:      if (handle == this->max_handle_)
    #####:  134:        this->set_max (this->max_handle_);
        -:  135:#endif /* !ACE_HANDLE_SET_USES_FD_ARRAY */
        -:  136:    }
    #####:  137:}
        -:  138:
        -:  139:// Returns a count of the number of enabled bits.
        -:  140:
        -:  141:ACE_INLINE int
    #####:  142:ACE_Handle_Set::num_set (void) const
        -:  143:{
        -:  144:  ACE_TRACE ("ACE_Handle_Set::num_set");
        -:  145:#if defined (ACE_HANDLE_SET_USES_FD_ARRAY)
        -:  146:  return this->mask_.fd_count;
        -:  147:#else /* !ACE_HANDLE_SET_USES_FD_ARRAY */
    #####:  148:  return this->size_;
        -:  149:#endif /* ACE_HANDLE_SET_USES_FD_ARRAY */
        -:  150:}
        -:  151:
        -:  152:// Returns a pointer to the underlying fd_set.
        -:  153:
        -:  154:ACE_INLINE
    #####:  155:ACE_Handle_Set::operator fd_set *()
        -:  156:{
        -:  157:  ACE_TRACE ("ACE_Handle_Set::operator fd_set *");
        -:  158:
    #####:  159:  if (this->size_ > 0)
    #####:  160:    return (fd_set *) &this->mask_;
        -:  161:  else
    #####:  162:    return (fd_set *) 0;
        -:  163:}
        -:  164:
        -:  165:// Returns a pointer to the underlying fd_set.
        -:  166:
        -:  167:ACE_INLINE fd_set *
        -:  168:ACE_Handle_Set::fdset (void)
        -:  169:{
        -:  170:  ACE_TRACE ("ACE_Handle_Set::fdset");
        -:  171:
        -:  172:  if (this->size_ > 0)
        -:  173:    return (fd_set *) &this->mask_;
        -:  174:  else
        -:  175:    return (fd_set *) 0;
        -:  176:}
        -:  177:
        -:  178:ACE_INLINE
    #####:  179:ACE_Handle_Set_Iterator::~ACE_Handle_Set_Iterator (void)
        -:  180:{
    #####:  181:}
        -:  182:
        -:  183:ACE_END_VERSIONED_NAMESPACE_DECL
