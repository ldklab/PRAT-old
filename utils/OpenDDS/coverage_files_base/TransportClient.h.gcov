        -:    0:Source:../dds/DCPS/transport/framework/TransportClient.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef OPENDDS_DCPS_TRANSPORT_CLIENT_H
        -:    9:#define OPENDDS_DCPS_TRANSPORT_CLIENT_H
        -:   10:
        -:   11:#include "dds/DCPS/dcps_export.h"
        -:   12:#include "TransportConfig_rch.h"
        -:   13:#include "TransportImpl.h"
        -:   14:#include "DataLinkSet.h"
        -:   15:
        -:   16:#include "dds/DCPS/AssociationData.h"
        -:   17:#include "dds/DCPS/ReactorInterceptor.h"
        -:   18:#include "dds/DCPS/Service_Participant.h"
        -:   19:#include "dds/DCPS/PoolAllocator.h"
        -:   20:#include "dds/DCPS/PoolAllocationBase.h"
        -:   21:#include "dds/DCPS/DiscoveryListener.h"
        -:   22:#include "dds/DCPS/RcEventHandler.h"
        -:   23:
        -:   24:#include "ace/Time_Value.h"
        -:   25:#include "ace/Event_Handler.h"
        -:   26:#include "ace/Reverse_Lock_T.h"
        -:   27:
        -:   28:// Forward definition of a test-friendly class in the global name space
        -:   29:class DDS_TEST;
        -:   30:
        -:   31:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   32:
        -:   33:namespace OpenDDS {
        -:   34:namespace DCPS {
        -:   35:
        -:   36:class EntityImpl;
        -:   37:class TransportInst;
        -:   38:class AssocationInfo;
        -:   39:class ReaderIdSeq;
        -:   40:class WriterIdSeq;
        -:   41:class SendStateDataSampleList;
        -:   42:class SendStateDataSampleListIterator;
        -:   43:
        -:   44:/**
        -:   45: * @brief Mix-in class for DDS entities which directly use the transport layer.
        -:   46: *
        -:   47: * DataReaderImpl and DataWriterImpl are TransportClients.  The TransportClient
        -:   48: * class manages the TransportImpl objects that represent the available
        -:   49: * communication mechanisms and the DataLink objects that represent the
        -:   50: * currently active communication channels to peers.
        -:   51: */
        -:   52:class OpenDDS_Dcps_Export TransportClient
        -:   53:  : public virtual RcObject
        -:   54:{
        -:   55:public:
        -:   56:  // Used by TransportImpl to complete associate() processing:
        -:   57:  void use_datalink(const RepoId& remote_id, const DataLink_rch& link);
        -:   58:
        -:   59:  // values for flags parameter of transport_assoc_done():
        -:   60:  enum { ASSOC_OK = 1, ASSOC_ACTIVE = 2 };
        -:   61:  TransportClient();
        -:   62:  virtual ~TransportClient();
        -:   63:
        -:   64:
        -:   65:  // Local setup:
        -:   66:
        -:   67:  void enable_transport(bool reliable, bool durable);
        -:   68:  void enable_transport_using_config(bool reliable, bool durable,
        -:   69:                                     const TransportConfig_rch& tc);
        -:   70:
      132:   71:  bool swap_bytes() const { return swap_bytes_; }
       84:   72:  bool cdr_encapsulation() const { return cdr_encapsulation_; }
        -:   73:  const TransportLocatorSeq& connection_info() const { return conn_info_; }
        -:   74:
        -:   75:  // Managing associations to remote peers:
        -:   76:
        -:   77:  bool associate(const AssociationData& peer, bool active);
        -:   78:  void disassociate(const RepoId& peerId);
        -:   79:  void stop_associating();
        -:   80:  void stop_associating(const GUID_t* repos, CORBA::ULong length);
        -:   81:  void send_final_acks();
        -:   82:
        -:   83:  // Discovery:
        -:   84:  void register_for_reader(const RepoId& participant,
        -:   85:                           const RepoId& writerid,
        -:   86:                           const RepoId& readerid,
        -:   87:                           const TransportLocatorSeq& locators,
        -:   88:                           OpenDDS::DCPS::DiscoveryListener* listener);
        -:   89:
        -:   90:  void unregister_for_reader(const RepoId& participant,
        -:   91:                             const RepoId& writerid,
        -:   92:                             const RepoId& readerid);
        -:   93:
        -:   94:  void register_for_writer(const RepoId& participant,
        -:   95:                           const RepoId& readerid,
        -:   96:                           const RepoId& writerid,
        -:   97:                           const TransportLocatorSeq& locators,
        -:   98:                           DiscoveryListener* listener);
        -:   99:
        -:  100:  void unregister_for_writer(const RepoId& participant,
        -:  101:                             const RepoId& readerid,
        -:  102:                             const RepoId& writerid);
        -:  103:
        -:  104:  ICE::Endpoint* get_ice_endpoint();
        -:  105:
        -:  106:  // Data transfer:
        -:  107:
        -:  108:  bool send_response(const RepoId& peer,
        -:  109:                     const DataSampleHeader& header,
        -:  110:                     Message_Block_Ptr payload); // [DR]
        -:  111:
        -:  112:  void send(SendStateDataSampleList send_list, ACE_UINT64 transaction_id = 0);
        -:  113:
        -:  114:  SendControlStatus send_w_control(SendStateDataSampleList send_list,
        -:  115:                                   const DataSampleHeader& header,
        -:  116:                                   Message_Block_Ptr msg,
        -:  117:                                   const RepoId& destination);
        -:  118:
        -:  119:  SendControlStatus send_control(const DataSampleHeader& header,
        -:  120:                                 Message_Block_Ptr msg);
        -:  121:
        -:  122:  SendControlStatus send_control_to(const DataSampleHeader& header,
        -:  123:                                    Message_Block_Ptr msg,
        -:  124:                                    const RepoId& destination);
        -:  125:
        -:  126:  bool remove_sample(const DataSampleElement* sample);
        -:  127:  bool remove_all_msgs();
        -:  128:
        -:  129:  virtual void add_link(const DataLink_rch& link, const RepoId& peer);
        -:  130:
        -:  131:private:
        -:  132:
        -:  133:  // Implemented by derived classes (DataReaderImpl/DataWriterImpl)
        -:  134:  virtual bool check_transport_qos(const TransportInst& inst) = 0;
        -:  135:  virtual const RepoId& get_repo_id() const = 0;
        -:  136:  virtual DDS::DomainId_t domain_id() const = 0;
        -:  137:  virtual Priority get_priority_value(const AssociationData& data) const = 0;
    #####:  138:  virtual void transport_assoc_done(int /*flags*/, const RepoId& /*remote*/) {}
        -:  139:
        -:  140:#if defined(OPENDDS_SECURITY)
        -:  141:  virtual DDS::Security::ParticipantCryptoHandle get_crypto_handle() const
        -:  142:  {
        -:  143:    return DDS::HANDLE_NIL;
        -:  144:  }
        -:  145:#endif
        -:  146:
        -:  147:  // helpers
        -:  148:  typedef ACE_Guard<ACE_Thread_Mutex> Guard;
        -:  149:  void use_datalink_i(const RepoId& remote_id,
        -:  150:                      const DataLink_rch& link,
        -:  151:                      Guard& guard);
        -:  152:  TransportSendListener_rch get_send_listener();
        -:  153:  TransportReceiveListener_rch get_receive_listener();
        -:  154:
        -:  155:  //helper for initiating connection, called by PendingAssoc objects
        -:  156:  //allows PendingAssoc to temporarily release lock_ to allow
        -:  157:  //TransportImpl to access Reactor if needed
        -:  158:  bool initiate_connect_i(TransportImpl::AcceptConnectResult& result,
        -:  159:                          TransportImpl* impl,
        -:  160:                          const TransportImpl::RemoteTransport& remote,
        -:  161:                          const TransportImpl::ConnectionAttribs& attribs_,
        -:  162:                          Guard& guard);
        -:  163:
        -:  164:  void send_i(SendStateDataSampleList send_list, ACE_UINT64 transaction_id);
        -:  165:
        -:  166:  // A class, normally provided by an unit test, who needs access to a client's
        -:  167:  // privates.
        -:  168:  friend class ::DDS_TEST;
        -:  169:
        -:  170:  typedef OPENDDS_MAP_CMP(RepoId, DataLink_rch, GUID_tKeyLessThan) DataLinkIndex;
        -:  171:  typedef OPENDDS_VECTOR(TransportImpl*) ImplsType;
        -:  172:
        -:  173:  struct PendingAssoc : RcEventHandler {
        -:  174:    bool active_, removed_;
        -:  175:    ImplsType impls_;
        -:  176:    CORBA::ULong blob_index_;
        -:  177:    AssociationData data_;
        -:  178:    TransportImpl::ConnectionAttribs attribs_;
        -:  179:
        -:  180:    PendingAssoc()
        -:  181:      : active_(false)
        -:  182:      , removed_(false)
        -:  183:      , blob_index_(0)
        -:  184:    {}
        -:  185:
        -:  186:    bool initiate_connect(TransportClient* tc, Guard& guard);
        -:  187:    int handle_timeout(const ACE_Time_Value& time, const void* arg);
        -:  188:  };
        -:  189:
        -:  190:  typedef RcHandle<PendingAssoc> PendingAssoc_rch;
        -:  191:
        -:  192:  typedef OPENDDS_MAP_CMP(RepoId, PendingAssoc_rch, GUID_tKeyLessThan) PendingMap;
        -:  193:
        -:  194:  class PendingAssocTimer : public ReactorInterceptor {
        -:  195:  public:
        -:  196:    PendingAssocTimer(ACE_Reactor* reactor,
        -:  197:                      ACE_thread_t owner)
        -:  198:      : ReactorInterceptor(reactor, owner)
        -:  199:    { }
        -:  200:
        -:  201:    void schedule_timer(TransportClient* transport_client, const PendingAssoc_rch& pend)
        -:  202:    {
        -:  203:      ScheduleCommand c(this, transport_client, pend);
        -:  204:      execute_or_enqueue(c);
        -:  205:    }
        -:  206:
        -:  207:    void cancel_timer(TransportClient* transport_client, const PendingAssoc_rch& pend)
        -:  208:    {
        -:  209:      CancelCommand c(this, transport_client, pend);
        -:  210:      execute_or_enqueue(c);
        -:  211:    }
        -:  212:
        -:  213:    virtual bool reactor_is_shut_down() const
        -:  214:    {
        -:  215:      return TheServiceParticipant->is_shut_down();
        -:  216:    }
        -:  217:
        -:  218:  private:
        -:  219:    ~PendingAssocTimer()
        -:  220:    { }
        -:  221:
        -:  222:    class CommandBase : public Command {
        -:  223:    public:
        -:  224:      CommandBase(PendingAssocTimer* timer,
        -:  225:                  TransportClient* transport_client,
        -:  226:                  const PendingAssoc_rch& assoc)
        -:  227:        : timer_ (timer)
        -:  228:        , transport_client_ (transport_client)
        -:  229:        , assoc_ (assoc)
        -:  230:      { }
        -:  231:    protected:
        -:  232:      PendingAssocTimer* timer_;
        -:  233:      TransportClient* transport_client_;
        -:  234:      PendingAssoc_rch assoc_;
        -:  235:    };
        -:  236:    struct ScheduleCommand : public CommandBase {
        -:  237:      ScheduleCommand(PendingAssocTimer* timer,
        -:  238:                      TransportClient* transport_client,
        -:  239:                      const PendingAssoc_rch& assoc)
        -:  240:        : CommandBase (timer, transport_client, assoc)
        -:  241:      { }
        -:  242:      virtual void execute()
        -:  243:      {
        -:  244:        if (timer_->reactor()) {
        -:  245:          timer_->reactor()->schedule_timer(assoc_.in(),
        -:  246:                                            transport_client_,
        -:  247:                                            transport_client_->passive_connect_duration_);
        -:  248:        }
        -:  249:      }
        -:  250:    };
        -:  251:    struct CancelCommand : public CommandBase {
        -:  252:      CancelCommand(PendingAssocTimer* timer,
        -:  253:                    TransportClient* transport_client,
        -:  254:                    const PendingAssoc_rch& assoc)
        -:  255:        : CommandBase (timer, transport_client, assoc)
        -:  256:      { }
        -:  257:      virtual void execute()
        -:  258:      {
        -:  259:        if (timer_->reactor()) {
        -:  260:          timer_->reactor()->cancel_timer(assoc_.in());
        -:  261:        }
        -:  262:      }
        -:  263:    };
        -:  264:  };
        -:  265:  RcHandle<PendingAssocTimer> pending_assoc_timer_;
        -:  266:
        -:  267:  // Associated Impls and DataLinks:
        -:  268:
        -:  269:  ImplsType impls_;
        -:  270:  PendingMap pending_;
        -:  271:  DataLinkSet links_;
        -:  272:
        -:  273:  /// These are the links being used during the call to send(). This is made a member of the
        -:  274:  /// class to minimize allocation/deallocations of the data link set.
        -:  275:  DataLinkSet send_links_;
        -:  276:
        -:  277:  DataLinkIndex data_link_index_;
        -:  278:
        -:  279:  // Used to allow sends to completed as a transaction and block
        -:  280:  // multi-threaded writers from proceeding to send data
        -:  281:  // on two thread simultaneously, which could cause out-of-order data.
        -:  282:  ACE_Thread_Mutex send_transaction_lock_;
        -:  283:  ACE_UINT64 expected_transaction_id_;
        -:  284:  ACE_UINT64 max_transaction_id_seen_;
        -:  285:
        -:  286:  //max_transaction_tail_ will always be the tail of the
        -:  287:  //max transaction that has been observed or 0 if this is
        -:  288:  //the first transaction or a transaction after the expected
        -:  289:  //value was met and thus reset to 0 indicating the samples were
        -:  290:  //sent up to max_transaction_id_
        -:  291:  DataSampleElement* max_transaction_tail_;
        -:  292:
        -:  293:  // Configuration details:
        -:  294:
        -:  295:  bool swap_bytes_, cdr_encapsulation_, reliable_, durable_;
        -:  296:
        -:  297:  ACE_Time_Value passive_connect_duration_;
        -:  298:
        -:  299:  TransportLocatorSeq conn_info_;
        -:  300:
        -:  301:  /// Seems to protect accesses to impls_, pending_, links_, data_link_index_
        -:  302:  ACE_Thread_Mutex lock_;
        -:  303:
        -:  304:  typedef ACE_Reverse_Lock<ACE_Thread_Mutex> Reverse_Lock_t;
        -:  305:  Reverse_Lock_t reverse_lock_;
        -:  306:
        -:  307:  RepoId repo_id_;
        -:  308:};
        -:  309:
        -:  310:typedef RcHandle<TransportClient> TransportClient_rch;
        -:  311:
        -:  312:}
        -:  313:}
        -:  314:
        -:  315:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  316:
        -:  317:#endif
