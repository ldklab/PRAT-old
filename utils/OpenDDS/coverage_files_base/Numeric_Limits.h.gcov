        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/Numeric_Limits.h
        -:    0:Programs:72
        -:    1:// -*- C++ -*-
        -:    2:
        -:    3://=============================================================================
        -:    4:/**
        -:    5: * @file    Numeric_Limits.h
        -:    6: *
        -:    7: * $Id: Numeric_Limits.h 2179 2013-05-28 22:16:51Z mesnierp $
        -:    8: *
        -:    9: * Traits containing basic integer limits.  Useful for template-based
        -:   10: * code on platforms that lack @c std::numeric_limits<>.
        -:   11: *
        -:   12: * @note These traits are not meant to be a replacement for
        -:   13: *       @c std::numeric_limits<>.  Rather they are a crutch until all
        -:   14: *       ACE-supported platforms also support
        -:   15: *       @c std::numeric_limits<>.
        -:   16: *
        -:   17: * @internal   Only meant for internal use by ACE.
        -:   18: * @deprecated This header will be removed once all platforms
        -:   19: *             supported by ACE support @c std::numeric_limits<>.
        -:   20: *
        -:   21: * @author  Ossama Othman <ossama_othman at symantec dot com>
        -:   22: */
        -:   23://=============================================================================
        -:   24:
        -:   25:#ifndef ACE_NUMERIC_LIMITS_H
        -:   26:#define ACE_NUMERIC_LIMITS_H
        -:   27:
        -:   28:#include /**/ "ace/pre.h"
        -:   29:
        -:   30:#include /**/ "ace/ACE_export.h"
        -:   31:
        -:   32:# if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   33:#   pragma once
        -:   34:# endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   35:
        -:   36:#ifdef ACE_LACKS_NUMERIC_LIMITS
        -:   37:# include "ace/Basic_Types.h"
        -:   38:#else
        -:   39:
        -:   40:# if defined __MINGW32__
        -:   41:// Windows defines min/max macros that interfere with the
        -:   42:// numeric_limits::min/max() traits.  Undefine those macros before
        -:   43:// including <limits>.
        -:   44://
        -:   45:// Ideally, we could prevent those macros from being defined by
        -:   46:// defining the Windows-specific NOMINMAX symbol before any Windows
        -:   47:// headers are included, preferably on the command line.  However,
        -:   48:// that would probably break some applications.
        -:   49://
        -:   50:// @@ Why isn't this a problem with MSVC++ and Borland builds?
        -:   51:#  undef min
        -:   52:#  undef max
        -:   53:# endif  /* __MINGW32__ */
        -:   54:
        -:   55:# include <limits>
        -:   56:#endif /* ACE_LACKS_NUMERIC_LIMITS */
        -:   57:
        -:   58:// Address global namespace pollution potentially incurred by some
        -:   59:// platforms.
        -:   60:#undef min
        -:   61:#undef max
        -:   62:
        -:   63:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   64:
        -:   65:#ifdef ACE_LACKS_NUMERIC_LIMITS
        -:   66:
        -:   67:template <typename T> struct ACE_Numeric_Limits;
        -:   68:
        -:   69:
        -:   70:// ------------------------------------------
        -:   71:// Special cases.
        -:   72:template<>
        -:   73:struct ACE_Export ACE_Numeric_Limits<char>
        -:   74:{
        -:   75:  static char min (void) { return CHAR_MIN; }
        -:   76:  static char max (void) { return CHAR_MAX; }
        -:   77:};
        -:   78:
        -:   79:// ------------------------------------------
        -:   80:// Signed integers.
        -:   81:
        -:   82:template<>
        -:   83:struct ACE_Export ACE_Numeric_Limits<signed char>
        -:   84:{
        -:   85:  static signed char min (void) { return SCHAR_MIN; }
        -:   86:  static signed char max (void) { return SCHAR_MAX; }
        -:   87:};
        -:   88:
        -:   89:template<>
        -:   90:struct ACE_Export ACE_Numeric_Limits<signed short>
        -:   91:{
        -:   92:  static signed short min (void) { return SHRT_MIN; }
        -:   93:  static signed short max (void) { return SHRT_MAX; }
        -:   94:};
        -:   95:
        -:   96:template<>
        -:   97:struct ACE_Export ACE_Numeric_Limits<signed int>
        -:   98:{
        -:   99:  static signed int min (void) { return INT_MIN; }
        -:  100:  static signed int max (void) { return INT_MAX; }
        -:  101:};
        -:  102:
        -:  103:template<>
        -:  104:struct ACE_Export ACE_Numeric_Limits<signed long>
        -:  105:{
        -:  106:  static signed long min (void) { return LONG_MIN; }
        -:  107:  static signed long max (void) { return LONG_MAX; }
        -:  108:};
        -:  109:
        -:  110:template<>
        -:  111:struct ACE_Export ACE_Numeric_Limits<signed long long>
        -:  112:{
        -:  113:#if defined (LLONG_MIN)
        -:  114:#  define ACE_LLONG_MIN LLONG_MIN
        -:  115:#elif defined (LONG_LONG_MIN)
        -:  116:#  define ACE_LLONG_MIN LONG_LONG_MIN
        -:  117:#elif defined (LONGLONG_MIN)
        -:  118:#  define ACE_LLONG_MIN LONGLONG_MIN
        -:  119:#else
        -:  120:#  error Unable to determine minimum signed long long value.
        -:  121:#endif  /* LLONG_MIN */
        -:  122:
        -:  123:#if defined (LLONG_MAX)
        -:  124:#  define ACE_LLONG_MAX LLONG_MAX
        -:  125:#elif defined (LONG_LONG_MAX)
        -:  126:#  define ACE_LLONG_MAX LONG_LONG_MAX
        -:  127:#elif defined (LONGLONG_MAX)
        -:  128:#  define ACE_LLONG_MAX LONGLONG_MAX
        -:  129:#else
        -:  130:#  error Unable to determine maximum signed long long value.
        -:  131:#endif  /* LLONG_MAX */
        -:  132:
        -:  133:  static signed long long min (void) { return ACE_LLONG_MIN; }
        -:  134:  static signed long long max (void) { return ACE_LLONG_MAX; }
        -:  135:};
        -:  136:
        -:  137:// ------------------------------------------
        -:  138:// Unsigned integers
        -:  139:template<>
        -:  140:struct ACE_Export ACE_Numeric_Limits<unsigned char>
        -:  141:{
        -:  142:  static unsigned char min (void) { return 0; }
        -:  143:  static unsigned char max (void) { return UCHAR_MAX; }
        -:  144:};
        -:  145:
        -:  146:template<>
        -:  147:struct ACE_Export ACE_Numeric_Limits<unsigned short>
        -:  148:{
        -:  149:  static unsigned short min (void) { return 0; }
        -:  150:  static unsigned short max (void) { return USHRT_MAX; }
        -:  151:};
        -:  152:
        -:  153:template<>
        -:  154:struct ACE_Export ACE_Numeric_Limits<unsigned int>
        -:  155:{
        -:  156:  static unsigned int min (void) { return 0; }
        -:  157:  static unsigned int max (void) { return UINT_MAX; }
        -:  158:};
        -:  159:
        -:  160:template<>
        -:  161:struct ACE_Export ACE_Numeric_Limits<unsigned long>
        -:  162:{
        -:  163:  static unsigned long min (void) { return 0; }
        -:  164:  static unsigned long max (void) { return ULONG_MAX; }
        -:  165:};
        -:  166:
        -:  167:template<>
        -:  168:struct ACE_Export ACE_Numeric_Limits<unsigned long long>
        -:  169:{
        -:  170:  static unsigned long long min (void) { return 0; }
        -:  171:  static unsigned long long max (void)
        -:  172:  {
        -:  173:# if defined (ULLONG_MAX)
        -:  174:    return ULLONG_MAX;
        -:  175:# elif defined (ULONGLONG_MAX)
        -:  176:    return ULONGLONG_MAX;
        -:  177:# else
        -:  178:#  error Unable to determine maximum unsigned long long value.
        -:  179:# endif  /* ULLONG_MAX */
        -:  180:  }
        -:  181:};
        -:  182:
        -:  183:// ------------------------------------------
        -:  184:// Floating point types
        -:  185:
        -:  186:template<>
        -:  187:struct ACE_Export ACE_Numeric_Limits<float>
        -:  188:{
        -:  189:  static float min (void) { return FLT_MIN; }
        -:  190:  static float max (void) { return FLT_MAX; }
        -:  191:};
        -:  192:
        -:  193:template<>
        -:  194:struct ACE_Export ACE_Numeric_Limits<double>
        -:  195:{
        -:  196:  static double min (void) { return DBL_MIN; }
        -:  197:  static double max (void) { return DBL_MAX; }
        -:  198:};
        -:  199:
        -:  200:template<>
        -:  201:struct ACE_Export ACE_Numeric_Limits<long double>
        -:  202:{
        -:  203:  static long double min (void) { return LDBL_MIN; }
        -:  204:  static long double max (void) { return LDBL_MAX; }
        -:  205:};
        -:  206:
        -:  207:#else
        -:  208:
        -:  209:// std::numeric_limits<> has all of the necessary specializations.
        -:  210:// Just wrap it.
        -:  211:
        -:  212:template <typename T>
        -:  213:struct ACE_Numeric_Limits
        -:  214:{
        -:  215:  static T min (void) { return std::numeric_limits<T>::min (); }
       60:  216:  static T max (void) { return std::numeric_limits<T>::max (); }
        -:  217:};
        -:  218:
        -:  219:# if (defined (ACE_WIN64) && defined (_MSC_VER) && _MSC_VER <= 1310) \
        -:  220:    || defined (ACE_LACKS_NUMERIC_LIMITS_64_BIT_TYPES)
        -:  221:// The Microsoft Platform SDK does not provide std::numeric_limits<>
        -:  222:// specializations for 64 bit integers so we need to explicitly provide
        -:  223:// ACE_Numeric_Limits<> specializations to compensate for this
        -:  224:// deficiency.
        -:  225://
        -:  226:// Unfortunately there is no way to tell if the platform SDK is being
        -:  227:// used so we specialize for the ACE_WIN64 + MSVC++ 7.1 case, which is
        -:  228:// the configuration that exhibits this problem.  It also happens to
        -:  229:// be a fairly isolated configuration since 64-bit support in MSVC++
        -:  230:// 7.1 was not very good to begin with.
        -:  231:template<>
        -:  232:struct ACE_Numeric_Limits<LONGLONG>
        -:  233:{
        -:  234:  static LONGLONG min (void) { return _I64_MIN; }
        -:  235:  static LONGLONG max (void) { return _I64_MAX; }
        -:  236:};
        -:  237:
        -:  238:template<>
        -:  239:struct ACE_Numeric_Limits<ULONGLONG>
        -:  240:{
        -:  241:  static ULONGLONG min (void) { return 0; }
        -:  242:  static ULONGLONG max (void) { return _UI64_MAX; }
        -:  243:};
        -:  244:# endif  /* ACE_WIN64 && _MSC_VER <= 1310 */
        -:  245:
        -:  246:#endif /* ACE_LACKS_NUMERIC_LIMITS */
        -:  247:
        -:  248:ACE_END_VERSIONED_NAMESPACE_DECL
        -:  249:
        -:  250:#include /**/ "ace/post.h"
        -:  251:
        -:  252:#endif  /* ACE_NUMERIC_LIMITS_H */
