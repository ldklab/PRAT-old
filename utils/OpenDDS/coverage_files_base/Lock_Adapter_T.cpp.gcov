        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/Lock_Adapter_T.cpp
        -:    0:Programs:51
        -:    1:// $Id$
        -:    2:
        -:    3:#ifndef ACE_LOCK_ADAPTER_T_CPP
        -:    4:#define ACE_LOCK_ADAPTER_T_CPP
        -:    5:
        -:    6:#include "ace/Lock_Adapter_T.h"
        -:    7:#include "ace/OS_Memory.h" // for ACE_NEW
        -:    8:
        -:    9:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   10:# pragma once
        -:   11:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   12:
        -:   13:#if !defined (__ACE_INLINE__)
        -:   14:#include "ace/Lock_Adapter_T.inl"
        -:   15:#endif /* __ACE_INLINE__ */
        -:   16:
        -:   17:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   18:
        -:   19:template <class ACE_LOCKING_MECHANISM>
    #####:   20:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::~ACE_Lock_Adapter (void)
        -:   21:{
    #####:   22:  if (this->delete_lock_)
    #####:   23:    delete this->lock_;
    #####:   24:}
------------------
_ZN16ACE_Lock_AdapterI19ACE_Reactor_Token_TI9ACE_TokenEED0Ev:
    #####:   20:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::~ACE_Lock_Adapter (void)
        -:   21:{
        -:   22:  if (this->delete_lock_)
        -:   23:    delete this->lock_;
    #####:   24:}
------------------
_ZN16ACE_Lock_AdapterI19ACE_Reactor_Token_TI9ACE_TokenEED2Ev:
    #####:   20:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::~ACE_Lock_Adapter (void)
        -:   21:{
    #####:   22:  if (this->delete_lock_)
    #####:   23:    delete this->lock_;
    #####:   24:}
------------------
        -:   25:
        -:   26:// Explicitly destroy the lock.
        -:   27:template <class ACE_LOCKING_MECHANISM> int
    #####:   28:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::remove (void)
        -:   29:{
    #####:   30:  return this->lock_->remove ();
        -:   31:}
        -:   32:
        -:   33:// Block the thread until the lock is acquired.
        -:   34:template <class ACE_LOCKING_MECHANISM> int
    #####:   35:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::acquire (void)
        -:   36:{
    #####:   37:  return this->lock_->acquire ();
        -:   38:}
        -:   39:
        -:   40:// Conditionally acquire the lock (i.e., won't block).
        -:   41:
        -:   42:template <class ACE_LOCKING_MECHANISM> int
    #####:   43:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::tryacquire (void)
        -:   44:{
    #####:   45:  return this->lock_->tryacquire ();
        -:   46:}
        -:   47:
        -:   48:// Release the lock.
        -:   49:
        -:   50:template <class ACE_LOCKING_MECHANISM> int
    #####:   51:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::release (void)
        -:   52:{
    #####:   53:  return this->lock_->release ();
        -:   54:}
        -:   55:
        -:   56:// Block until the thread acquires a read lock.  If the locking
        -:   57:// mechanism doesn't support read locks then this just calls
        -:   58:// <acquire>.
        -:   59:
        -:   60:template <class ACE_LOCKING_MECHANISM> int
    #####:   61:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::acquire_read (void)
        -:   62:{
    #####:   63:  return this->lock_->acquire_read ();
        -:   64:}
        -:   65:
        -:   66:// Block until the thread acquires a write lock.  If the locking
        -:   67:// mechanism doesn't support read locks then this just calls
        -:   68:// <acquire>.
        -:   69:
        -:   70:template <class ACE_LOCKING_MECHANISM> int
    #####:   71:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::acquire_write (void)
        -:   72:{
    #####:   73:  return this->lock_->acquire_write ();
        -:   74:}
        -:   75:
        -:   76:// Conditionally acquire a read lock.  If the locking mechanism
        -:   77:// doesn't support read locks then this just calls <acquire>.
        -:   78:
        -:   79:template <class ACE_LOCKING_MECHANISM> int
    #####:   80:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::tryacquire_read (void)
        -:   81:{
    #####:   82:  return this->lock_->tryacquire_read ();
        -:   83:}
        -:   84:
        -:   85:// Conditionally acquire a write lock.  If the locking mechanism
        -:   86:// doesn't support write locks then this just calls <acquire>.
        -:   87:
        -:   88:template <class ACE_LOCKING_MECHANISM> int
    #####:   89:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::tryacquire_write (void)
        -:   90:{
    #####:   91:  return this->lock_->tryacquire_write ();
        -:   92:}
        -:   93:
        -:   94:// Conditionally try to upgrade a lock held for read to a write lock.
        -:   95:// If the locking mechanism doesn't support read locks then this just
        -:   96:// calls <acquire>. Returns 0 on success, -1 on failure.
        -:   97:
        -:   98:template <class ACE_LOCKING_MECHANISM> int
    #####:   99:ACE_Lock_Adapter<ACE_LOCKING_MECHANISM>::tryacquire_write_upgrade (void)
        -:  100:{
    #####:  101:  return this->lock_->tryacquire_write_upgrade ();
        -:  102:}
        -:  103:
        -:  104:ACE_END_VERSIONED_NAMESPACE_DECL
        -:  105:
        -:  106:#endif /* ACE_LOCK_ADAPTER_T_CPP */
