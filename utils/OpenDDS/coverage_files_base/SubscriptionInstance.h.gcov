        -:    0:Source:../dds/DCPS/SubscriptionInstance.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef OPENDDS_DCPS_SUBSCRIPTION_INSTANCE_H
        -:    9:#define OPENDDS_DCPS_SUBSCRIPTION_INSTANCE_H
        -:   10:
        -:   11:#include "ace/OS_Memory.h"
        -:   12:
        -:   13:#include "dds/DdsDcpsInfrastructureC.h"
        -:   14:
        -:   15:#include "dcps_export.h"
        -:   16:#include "ReceivedDataElementList.h"
        -:   17:#include "ReceivedDataStrategy.h"
        -:   18:#include "InstanceState.h"
        -:   19:#include "PoolAllocationBase.h"
        -:   20:#include "RcObject.h"
        -:   21:#include "ace/Synch_Traits.h"
        -:   22:
        -:   23:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   24:#pragma once
        -:   25:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   26:
        -:   27:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   28:
        -:   29:namespace OpenDDS {
        -:   30:namespace DCPS {
        -:   31:
        -:   32:class DataReaderImpl;
        -:   33:
        -:   34:/**
        -:   35:  * @class SubscriptionInstance
        -:   36:  *
        -:   37:  * @brief Struct that has information about an instance and the instance
        -:   38:  *        sample list.
        -:   39:  */
    #####:   40:class SubscriptionInstance : public RcObject {
        -:   41:public:
    #####:   42:  SubscriptionInstance(DataReaderImpl *reader,
        -:   43:                       const DDS::DataReaderQos& qos,
        -:   44:                       ACE_Recursive_Thread_Mutex& lock,
        -:   45:                       DDS::InstanceHandle_t handle)
    #####:   46:    : instance_state_(reader, lock, handle),
        -:   47:      last_sequence_(),
        -:   48:      rcvd_samples_(&instance_state_),
        -:   49:      instance_handle_(handle),
    #####:   50:      deadline_timer_id_(-1)
        -:   51:  {
    #####:   52:    switch (qos.destination_order.kind) {
    #####:   53:    case DDS::BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS:
    #####:   54:      this->rcvd_strategy_.reset(new ReceptionDataStrategy(this->rcvd_samples_));
    #####:   55:      break;
        -:   56:
    #####:   57:    case DDS::BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS:
    #####:   58:      this->rcvd_strategy_.reset(new SourceDataStrategy(this->rcvd_samples_));
    #####:   59:      break;
        -:   60:    }
        -:   61:
    #####:   62:    if (!this->rcvd_strategy_) {
    #####:   63:      ACE_ERROR((LM_ERROR,
        -:   64:                 ACE_TEXT("(%P|%t) ERROR: SubscriptionInstance: ")
        -:   65:                 ACE_TEXT(" unable to allocate ReceiveDataStrategy!\n")));
        -:   66:    }
    #####:   67:  }
        -:   68:
        -:   69:  /// Instance state for this instance
        -:   70:  InstanceState instance_state_ ;
        -:   71:
        -:   72:  /// Sequence number of the move recent data sample received
        -:   73:  SequenceNumber last_sequence_ ;
        -:   74:
        -:   75:  /// Data sample(s) in this instance
        -:   76:  ReceivedDataElementList rcvd_samples_ ;
        -:   77:
        -:   78:  /// ReceivedDataElementList strategy
        -:   79:  unique_ptr<ReceivedDataStrategy> rcvd_strategy_;
        -:   80:
        -:   81:  /// The instance handle for the registered object
        -:   82:  DDS::InstanceHandle_t instance_handle_;
        -:   83:
        -:   84:  ACE_Time_Value   last_sample_tv_;
        -:   85:
        -:   86:  ACE_Time_Value   cur_sample_tv_;
        -:   87:
        -:   88:  long             deadline_timer_id_;
        -:   89:
        -:   90:  ACE_Time_Value   last_accepted_;
        -:   91:};
        -:   92:
        -:   93:typedef RcHandle<SubscriptionInstance> SubscriptionInstance_rch;
        -:   94:
        -:   95:} // namespace DCPS
        -:   96:} // namespace OpenDDS
        -:   97:
        -:   98:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:   99:
        -:  100:#endif /* OPENDDS_DCPS_SUBSCRIPTION_INSTANCE_H */
