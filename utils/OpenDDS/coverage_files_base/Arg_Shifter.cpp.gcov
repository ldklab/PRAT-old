        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/Arg_Shifter.cpp
        -:    0:Programs:70
        -:    1:// $Id: Arg_Shifter.cpp 2622 2015-08-13 18:30:00Z mitza $
        -:    2:
        -:    3:#ifndef ACE_ARG_SHIFTER_T_CPP
        -:    4:#define ACE_ARG_SHIFTER_T_CPP
        -:    5:
        -:    6:#include "ace/Arg_Shifter.h"
        -:    7:#include "ace/OS_NS_string.h"
        -:    8:#include "ace/OS_NS_strings.h"
        -:    9:#include "ace/OS_Errno.h"
        -:   10:#include "ace/OS_Memory.h"
        -:   11:#if defined (ACE_HAS_ALLOC_HOOKS)
        -:   12:# include "ace/Malloc_Base.h"
        -:   13:#endif /* ACE_HAS_ALLOC_HOOKS */
        -:   14:
        -:   15:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   16:
        -:   17:template <typename CHAR_TYPE>
        -:   18:ACE_Arg_Shifter_T<CHAR_TYPE>::ACE_Arg_Shifter_T (int& argc,
        -:   19:                                                 const CHAR_TYPE** argv,
        -:   20:                                                 const CHAR_TYPE** temp)
        -:   21:  : argc_ (argc),
        -:   22:    total_size_ (argc),
        -:   23:    temp_ (temp),
        -:   24:    argv_ (argv),
        -:   25:    current_index_ (0),
        -:   26:    back_ (argc - 1),
        -:   27:    front_ (0)
        -:   28:{
        -:   29:  this->init ();
        -:   30:}
        -:   31:
        -:   32:template <typename CHAR_TYPE>
       16:   33:ACE_Arg_Shifter_T<CHAR_TYPE>::ACE_Arg_Shifter_T (int& argc,
        -:   34:                                                 CHAR_TYPE** argv,
        -:   35:                                                 CHAR_TYPE** temp)
        -:   36:  : argc_ (argc),
        -:   37:    total_size_ (argc),
        -:   38:    temp_ ((const CHAR_TYPE **) temp),
        -:   39:    argv_ ((const CHAR_TYPE **) argv),
        -:   40:    current_index_ (0),
       16:   41:    back_ (argc - 1),
       32:   42:    front_ (0)
        -:   43:{
       16:   44:  this->init ();
       16:   45:}
        -:   46:
        -:   47:template <typename CHAR_TYPE>
        -:   48:void
       16:   49:ACE_Arg_Shifter_T<CHAR_TYPE>::init (void)
        -:   50:{
        -:   51:  // If not provided with one, allocate a temporary array.
       16:   52:  if (this->temp_ == 0)
        -:   53:#if defined (ACE_HAS_ALLOC_HOOKS)
        -:   54:    this->temp_ = reinterpret_cast<const CHAR_TYPE **>
        -:   55:      (ACE_Allocator::instance ()->malloc (sizeof (CHAR_TYPE*) * this->total_size_));
        -:   56:#else
       16:   57:    ACE_NEW (this->temp_,
        -:   58:             const CHAR_TYPE *[this->total_size_]);
        -:   59:#endif /* ACE_HAS_ALLOC_HOOKS */
       16:   60:  if (this->temp_ != 0)
        -:   61:    {
        -:   62:      // Fill the temporary array.
       16:   63:      this->argc_ = 0;
       82:   64:      for (int i = 0; i < this->total_size_; i++)
        -:   65:        {
       66:   66:          this->temp_[i] = this->argv_[i];
       66:   67:          this->argv_[i] = 0;
        -:   68:        }
        -:   69:    }
        -:   70:  else
        -:   71:    {
        -:   72:      // Allocation failed, prohibit iteration.
    #####:   73:      this->current_index_ = this->argc_;
    #####:   74:      this->front_ = this->argc_;
        -:   75:    }
        -:   76:}
        -:   77:
        -:   78:template <typename CHAR_TYPE>
       16:   79:ACE_Arg_Shifter_T<CHAR_TYPE>::~ACE_Arg_Shifter_T (void)
        -:   80:{
        -:   81:  // Delete the temporary vector.
        -:   82:#if defined (ACE_HAS_ALLOC_HOOKS)
        -:   83:  if (this->temp_)
        -:   84:    ACE_Allocator::instance ()->free (this->temp_);
        -:   85:#else
       16:   86:  delete [] temp_;
        -:   87:#endif /* ACE_HAS_ALLOC_HOOKS */
       16:   88:}
        -:   89:
        -:   90:template <typename CHAR_TYPE>
        -:   91:const CHAR_TYPE *
    #####:   92:ACE_Arg_Shifter_T<CHAR_TYPE>::get_current (void) const
        -:   93:{
    #####:   94:  const CHAR_TYPE * retval = 0;
        -:   95:
    #####:   96:  if (this->is_anything_left ())
    #####:   97:    retval =  this->temp_[current_index_];
        -:   98:
    #####:   99:  return retval;
        -:  100:}
        -:  101:
        -:  102:template <typename CHAR_TYPE>
        -:  103:const CHAR_TYPE *
      563:  104:ACE_Arg_Shifter_T<CHAR_TYPE>::get_the_parameter (const CHAR_TYPE *flag)
        -:  105:{
        -:  106:  // the return 0's abound because this method
        -:  107:  // would otherwise be a deep if { } else { }
        -:  108:
        -:  109:  // check to see if any arguments still exist
      563:  110:  if (!this->is_anything_left())
    #####:  111:    return 0;
        -:  112:
        -:  113:  // check to see if the flag is the argument
      563:  114:  int const offset = this->cur_arg_strncasecmp (flag);
      563:  115:  if (offset == -1)
      556:  116:    return 0;
        -:  117:
        7:  118:  if (offset == 0)
        -:  119:    {
        7:  120:      this->consume_arg ();
        -:  121:
        7:  122:      if (!this->is_parameter_next())
        -:  123:        {
    #####:  124:          return 0;
        -:  125:        }
        -:  126:    }
        -:  127:  // the parameter is in the middle somewhere...
        7:  128:  return this->temp_[current_index_] + offset;
        -:  129:}
        -:  130:
        -:  131:template <typename CHAR_TYPE>
        -:  132:int
      662:  133:ACE_Arg_Shifter_T<CHAR_TYPE>::cur_arg_strncasecmp (const CHAR_TYPE *flag)
        -:  134:{
        -:  135:  // Check for a current argument
      662:  136:  if (this->is_anything_left())
        -:  137:    {
      662:  138:      size_t const flag_length = ACE_OS::strlen (flag);
        -:  139:
        -:  140:      // Check for presence of the flag
     1324:  141:      if (ACE_OS::strncasecmp(this->temp_[current_index_],
        -:  142:                              flag,
      662:  143:                              flag_length) == 0)
        -:  144:        {
        7:  145:          if (ACE_OS::strlen(temp_[current_index_]) == flag_length)
        -:  146:            {
        -:  147:              // match and lengths are equal
        7:  148:              return 0;
        -:  149:            }
        -:  150:          else
        -:  151:            {
        -:  152:              // matches, with more info to boot!
    #####:  153:              size_t const remaining = ACE_OS::strspn
    #####:  154:                (this->temp_[current_index_] + flag_length,
        -:  155:                ACE_TEXT (" ")) + flag_length;
    #####:  156:              return static_cast<int> (remaining);
        -:  157:            }
        -:  158:        }
        -:  159:    }
        -:  160:  // failure
      655:  161:  return -1;
        -:  162:}
        -:  163:
        -:  164:template <typename CHAR_TYPE>
        -:  165:int
       14:  166:ACE_Arg_Shifter_T<CHAR_TYPE>::consume_arg (int number)
        -:  167:{
       14:  168:  int retval = 0;
        -:  169:
        -:  170:  // Stick knowns at the end of the vector (consumed).
       14:  171:  if (this->is_anything_left() >= number)
        -:  172:    {
       42:  173:      for (int i = 0, j = this->back_ - (number - 1);
       28:  174:           i < number;
       14:  175:           ++i, ++j, ++this->current_index_)
       14:  176:        this->argv_[j] = this->temp_[this->current_index_];
        -:  177:
       14:  178:      this->back_ -= number;
       14:  179:      retval = 1;
        -:  180:    }
        -:  181:
       14:  182:  return retval;
        -:  183:}
        -:  184:
        -:  185:template <typename CHAR_TYPE>
        -:  186:int
       52:  187:ACE_Arg_Shifter_T<CHAR_TYPE>::ignore_arg (int number)
        -:  188:{
       52:  189:  int retval = 0;
        -:  190:
        -:  191:  // Keep unknowns at the head of the vector.
       52:  192:  if (this->is_anything_left () >= number)
        -:  193:    {
      208:  194:      for (int i = 0;
      104:  195:           i < number;
      104:  196:           i++, this->current_index_++, this->front_++)
       52:  197:        this->argv_[this->front_] = this->temp_[this->current_index_];
        -:  198:
       52:  199:      retval = 1;
       52:  200:      this->argc_ += number;
        -:  201:    }
        -:  202:
       52:  203:  return retval;
        -:  204:}
        -:  205:
        -:  206:template <typename CHAR_TYPE>
        -:  207:int
     1373:  208:ACE_Arg_Shifter_T<CHAR_TYPE>::is_anything_left (void) const
        -:  209:{
     1373:  210:  return this->total_size_ - this->current_index_;
        -:  211:}
        -:  212:
        -:  213:template <typename CHAR_TYPE>
        -:  214:int
        -:  215:ACE_Arg_Shifter_T<CHAR_TYPE>::is_option_next (void) const
        -:  216:{
        -:  217:  return this->is_anything_left () &&
        -:  218:    this->temp_[this->current_index_][0] == '-';
        -:  219:}
        -:  220:
        -:  221:template <typename CHAR_TYPE>
        -:  222:int
        7:  223:ACE_Arg_Shifter_T<CHAR_TYPE>::is_parameter_next (void) const
        -:  224:{
        -:  225:  return this->is_anything_left ()
        7:  226:    && this->temp_[this->current_index_][0] != '-';
        -:  227:}
        -:  228:
        -:  229:template <typename CHAR_TYPE>
        -:  230:int
        -:  231:ACE_Arg_Shifter_T<CHAR_TYPE>::num_ignored_args (void) const
        -:  232:{
        -:  233:  return this->front_;
        -:  234:}
        -:  235:
        -:  236:ACE_END_VERSIONED_NAMESPACE_DECL
        -:  237:
        -:  238:#endif /* ACE_ATOMIC_OP_T_CPP */
