        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/TAO/tao/VarOut_T.h
        -:    0:Programs:70
        -:    1:// -*- C++ -*-
        -:    2:
        -:    3://=============================================================================
        -:    4:/**
        -:    5: *  @file    VarOut_T.h
        -:    6: *
        -:    7: *  $Id: VarOut_T.h 2179 2013-05-28 22:16:51Z mesnierp $
        -:    8: *
        -:    9: *  @author Jeff Parsons
        -:   10: */
        -:   11://=============================================================================
        -:   12:
        -:   13:#ifndef TAO_VAROUT_T_H
        -:   14:#define TAO_VAROUT_T_H
        -:   15:
        -:   16:#include /**/ "ace/pre.h"
        -:   17:
        -:   18:#include /**/ "tao/Versioned_Namespace.h"
        -:   19:
        -:   20:#include "ace/OS_Memory.h"
        -:   21:
        -:   22:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   23:# pragma once
        -:   24:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   25:
        -:   26:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   27:
        -:   28:/**
        -:   29: * @class TAO_Var_Base_T
        -:   30: *
        -:   31: * @brief Parametrized implementation of _var base class for structs,
        -:   32: * unions and exceptions.
        -:   33: *
        -:   34: */
        -:   35:template<typename T>
        -:   36:class TAO_Var_Base_T
        -:   37:{
        -:   38:public:
        -:   39:  TAO_Var_Base_T (void);
        -:   40:  TAO_Var_Base_T (T *);
        -:   41:  TAO_Var_Base_T (const TAO_Var_Base_T<T> &);
        -:   42:
        -:   43:  ~TAO_Var_Base_T (void);
        -:   44:
        -:   45:  T * operator-> (void);
        -:   46:  const T * operator-> (void) const;
        -:   47:
        -:   48:  typedef const T &   _in_type;
        -:   49:  typedef       T &   _inout_type;
        -:   50:
        -:   51:  // Common mapping for fixed and variable size types.
        -:   52:  _in_type      in (void) const;
        -:   53:  _inout_type   inout (void);
        -:   54:
        -:   55:  // TAO extension.
        -:   56:  T * ptr (void) const;
        -:   57:  operator T *& ();
        -:   58:
        -:   59:protected:
        -:   60:  T * ptr_;
        -:   61:};
        -:   62:
        -:   63:/**
        -:   64: * @class TAO_Fixed_Var_T
        -:   65: *
        -:   66: * @brief Parametrized implementation of _var class for structs, unions,
        -:   67: * and exceptions with members of fixed size.
        -:   68: *
        -:   69: */
        -:   70:template<typename T>
        -:   71:class TAO_Fixed_Var_T : public TAO_Var_Base_T<T>
        -:   72:{
        -:   73:public:
        -:   74:  TAO_Fixed_Var_T (void);
        -:   75:  TAO_Fixed_Var_T (T *);
        -:   76:  TAO_Fixed_Var_T (const TAO_Fixed_Var_T<T> &);
        -:   77:
        -:   78:  // Fixed-size types only.
        -:   79:  TAO_Fixed_Var_T (const T &);
        -:   80:
        -:   81:  TAO_Fixed_Var_T & operator= (T *);
        -:   82:  TAO_Fixed_Var_T & operator= (const TAO_Fixed_Var_T<T> &);
        -:   83:
        -:   84:  // Fixed-size types only.
        -:   85:  TAO_Fixed_Var_T & operator= (const T &);
        -:   86:
        -:   87:  operator const T & () const;
        -:   88:  operator T & ();
        -:   89:  operator T & () const;
        -:   90:
        -:   91:  typedef T &   _out_type;
        -:   92:  typedef T     _retn_type;
        -:   93:
        -:   94:  // Mapping for fixed size types.
        -:   95:  _out_type     out (void);
        -:   96:  _retn_type    _retn (void);
        -:   97:};
        -:   98:
        -:   99:/**
        -:  100: * @class TAO_Var_Var_T
        -:  101: *
        -:  102: * @brief Parametrized implementation of _var class for structs, unions,
        -:  103: * and exceptions with members of variable size.
        -:  104: *
        -:  105: */
        -:  106:template<typename T>
    #####:  107:class TAO_Var_Var_T : public TAO_Var_Base_T<T>
        -:  108:{
        -:  109:public:
        -:  110:  TAO_Var_Var_T (void);
        -:  111:  TAO_Var_Var_T (T *);
        -:  112:  TAO_Var_Var_T (const TAO_Var_Var_T<T> &);
        -:  113:
        -:  114:  TAO_Var_Var_T & operator= (T *);
        -:  115:  TAO_Var_Var_T & operator= (const TAO_Var_Var_T<T> &);
        -:  116:
        -:  117:  operator const T & () const;
        -:  118:  operator T & ();
        -:  119:  operator T & () const;
        -:  120:
        -:  121:  typedef T *&  _out_type;
        -:  122:  typedef T *   _retn_type;
        -:  123:
        -:  124:  // Mapping for variable size types.
        -:  125:  _out_type     out (void);
        -:  126:  _retn_type    _retn (void);
        -:  127:};
        -:  128:
        -:  129:/**
        -:  130: * @class TAO_Out_T
        -:  131: *
        -:  132: * @brief Parametrized implementation of _out class for structs, unions
        -:  133: * and exceptions..
        -:  134: *
        -:  135: */
        -:  136:template<typename T>
        -:  137:class TAO_Out_T
        -:  138:{
        -:  139:public:
        -:  140:  typedef typename T::_var_type T_var;
        -:  141:
        -:  142:  TAO_Out_T (T *&);
        -:  143:  TAO_Out_T (T_var &);
        -:  144:  TAO_Out_T (const TAO_Out_T<T> &);
        -:  145:
        -:  146:  TAO_Out_T &operator= (const TAO_Out_T<T> &);
        -:  147:  TAO_Out_T &operator= (T *);
        -:  148:
        -:  149:  operator T *& ();
        -:  150:  T *& ptr (void);
        -:  151:  T * operator-> (void);
        -:  152:
        -:  153:private:
        -:  154:  T *& ptr_;
        -:  155:
        -:  156:  /// Assignment from T_var not allowed.
        -:  157:  void operator= (const T_var &);
        -:  158:};
        -:  159:
        -:  160:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  161:
        -:  162:#if defined (__ACE_INLINE__)
        -:  163:#include "tao/VarOut_T.inl"
        -:  164:#endif /* __ACE_INLINE__ */
        -:  165:
        -:  166:#if defined (ACE_TEMPLATES_REQUIRE_SOURCE)
        -:  167:#include "tao/VarOut_T.cpp"
        -:  168:#endif /* ACE_TEMPLATES_REQUIRE_SOURCE */
        -:  169:
        -:  170:#if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
        -:  171:#pragma implementation ("VarOut_T.cpp")
        -:  172:#endif /* ACE_TEMPLATES_REQUIRE_PRAGMA */
        -:  173:
        -:  174:#include /**/ "ace/post.h"
        -:  175:
        -:  176:#endif /* TAO_VAROUT_T_H */
