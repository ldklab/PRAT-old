        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/OS_NS_signal.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2:// $Id$
        -:    3:
        -:    4:#include "ace/OS_NS_macros.h"
        -:    5:#include "ace/OS_NS_errno.h"
        -:    6:#include "ace/os_include/os_pthread.h"
        -:    7:
        -:    8:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:    9:
        -:   10:namespace ACE_OS
        -:   11:{
        -:   12:
        -:   13:ACE_INLINE int
        -:   14:kill (pid_t pid, int signum)
        -:   15:{
        -:   16:  ACE_OS_TRACE ("ACE_OS::kill");
        -:   17:#if defined (ACE_LACKS_KILL)
        -:   18:  ACE_UNUSED_ARG (pid);
        -:   19:  ACE_UNUSED_ARG (signum);
        -:   20:  ACE_NOTSUP_RETURN (-1);
        -:   21:#else
        -:   22:  ACE_OSCALL_RETURN (::kill (pid, signum), int, -1);
        -:   23:#endif /* ACE_LACKS_KILL */
        -:   24:}
        -:   25:
        -:   26:ACE_INLINE int
        -:   27:pthread_sigmask (int how, const sigset_t *nsp, sigset_t *osp)
        -:   28:{
        -:   29:#if defined (ACE_HAS_PTHREADS) && !defined (ACE_LACKS_PTHREAD_SIGMASK)
        -:   30:  int result;
        -:   31:# ifdef ACE_PTHREAD_SIGMASK_MACRO
        -:   32:  ACE_OSCALL_RETURN (ACE_ADAPT_RETVAL (ACE_PTHREAD_SIGMASK_MACRO (how, nsp, osp)
        -:   33:                                      , result), int, -1);
        -:   34:# elif defined (ACE_HAS_NONCONST_PTHREAD_SIGMASK)
        -:   35:  sigset_t *ncnsp = const_cast<sigset_t *>(nsp);
        -:   36:  ACE_OSCALL_RETURN (ACE_ADAPT_RETVAL (::pthread_sigmask (how, ncnsp, osp),
        -:   37:                                       result),
        -:   38:                     int,
        -:   39:                     -1);
        -:   40:# else
        -:   41:  ACE_OSCALL_RETURN (ACE_ADAPT_RETVAL (::pthread_sigmask (how, nsp, osp),
        -:   42:                                       result),
        -:   43:                     int,
        -:   44:                     -1);
        -:   45:# endif /* ACE_HAS_NONCONST__PTHREAD_SIGMASK */
        -:   46:#else /* !ACE_HAS_PTHREADS && !ACE_LACKS_PTHREAD_SIGMASK */
        -:   47:  ACE_UNUSED_ARG (how);
        -:   48:  ACE_UNUSED_ARG (nsp);
        -:   49:  ACE_UNUSED_ARG (osp);
        -:   50:  ACE_NOTSUP_RETURN (-1);
        -:   51:#endif /* ACE_HAS_PTHREADS && !ACE_LACKS_PTHREAD_SIGMASK */
        -:   52:}
        -:   53:
        -:   54:ACE_INLINE int
        -:   55:sigaction (int signum, const ACE_SIGACTION *nsa, ACE_SIGACTION *osa)
        -:   56:{
        -:   57:  ACE_OS_TRACE ("ACE_OS::sigaction");
        -:   58:  if (signum == 0)
        -:   59:    return 0;
        -:   60:#if defined (ACE_WIN32) && !defined (ACE_HAS_WINCE)
        -:   61:  struct sigaction sa;
        -:   62:
        -:   63:  if (osa == 0)
        -:   64:    osa = &sa;
        -:   65:
        -:   66:  if (nsa == 0)
        -:   67:    {
        -:   68:      osa->sa_handler = ::signal (signum, SIG_IGN);
        -:   69:      ::signal (signum, osa->sa_handler);
        -:   70:    }
        -:   71:  else
        -:   72:    osa->sa_handler = ::signal (signum, nsa->sa_handler);
        -:   73:  return osa->sa_handler == SIG_ERR ? -1 : 0;
        -:   74:#elif defined (ACE_LACKS_SIGACTION)
        -:   75:  ACE_UNUSED_ARG (nsa);
        -:   76:  ACE_UNUSED_ARG (osa);
        -:   77:  ACE_NOTSUP_RETURN (-1);
        -:   78:#elif !defined (ACE_HAS_SIGACTION_CONSTP2)
        -:   79:  ACE_OSCALL_RETURN (::sigaction (signum,
        -:   80:                                  const_cast<ACE_SIGACTION*> (nsa),
        -:   81:                                  osa),
        -:   82:                     int, -1);
        -:   83:#else
        -:   84:  ACE_OSCALL_RETURN (::sigaction (signum, nsa, osa), int, -1);
        -:   85:#endif /* ACE_WIN32 !ACE_HAS_WINCE */
        -:   86:}
        -:   87:
        -:   88:ACE_INLINE int
        -:   89:sigaddset (sigset_t *s, int signum)
        -:   90:{
        -:   91:  ACE_OS_TRACE ("ACE_OS::sigaddset");
        -:   92:#if defined (ACE_LACKS_SIGSET)
        -:   93:  if (s == 0)
        -:   94:    {
        -:   95:      errno = EFAULT;
        -:   96:      return -1;
        -:   97:    }
        -:   98:  else if (signum < 1 || signum >= ACE_NSIG)
        -:   99:    {
        -:  100:      errno = EINVAL;
        -:  101:      return -1;                 // Invalid signum, return error
        -:  102:    }
        -:  103:  *s |= (1 << (signum - 1)) ;
        -:  104:  return 0 ;
        -:  105:#else
        -:  106:  return ace_sigaddset_helper (s, signum);
        -:  107:#endif /* ACE_LACKS_SIGSET */
        -:  108:}
        -:  109:
        -:  110:ACE_INLINE int
        -:  111:sigdelset (sigset_t *s, int signum)
        -:  112:{
        -:  113:#if defined (ACE_LACKS_SIGSET)
        -:  114:  if (s == 0)
        -:  115:    {
        -:  116:      errno = EFAULT;
        -:  117:      return -1;
        -:  118:    }
        -:  119:  else if (signum < 1 || signum >= ACE_NSIG)
        -:  120:    {
        -:  121:      errno = EINVAL;
        -:  122:      return -1;                 // Invalid signum, return error
        -:  123:    }
        -:  124:  *s &= ~(1 << (signum - 1)) ;
        -:  125:  return 0;
        -:  126:#else
        -:  127:  return ace_sigdelset_helper (s, signum);
        -:  128:#endif /* ACE_LACKS_SIGSET */
        -:  129:}
        -:  130:
        -:  131:ACE_INLINE int
    #####:  132:sigemptyset (sigset_t *s)
        -:  133:{
        -:  134:#if defined (ACE_LACKS_SIGSET)
        -:  135:  if (s == 0)
        -:  136:    {
        -:  137:      errno = EFAULT;
        -:  138:      return -1;
        -:  139:    }
        -:  140:  *s = 0 ;
        -:  141:  return 0;
        -:  142:#else
    #####:  143:  return ace_sigemptyset_helper (s);
        -:  144:#endif /* ACE_LACKS_SIGSET */
        -:  145:}
        -:  146:
        -:  147:ACE_INLINE int
    #####:  148:sigfillset (sigset_t *s)
        -:  149:{
        -:  150:#if defined (ACE_LACKS_SIGSET)
        -:  151:  if (s == 0)
        -:  152:    {
        -:  153:      errno = EFAULT;
        -:  154:      return -1;
        -:  155:    }
        -:  156:  *s = ~(sigset_t) 0;
        -:  157:  return 0 ;
        -:  158:#else
    #####:  159:  return ace_sigfillset_helper (s);
        -:  160:#endif /* ACE_LACKS_SIGSET */
        -:  161:}
------------------
_ZN6ACE_OS10sigfillsetEP10__sigset_t:
    #####:  148:sigfillset (sigset_t *s)
        -:  149:{
        -:  150:#if defined (ACE_LACKS_SIGSET)
        -:  151:  if (s == 0)
        -:  152:    {
        -:  153:      errno = EFAULT;
        -:  154:      return -1;
        -:  155:    }
        -:  156:  *s = ~(sigset_t) 0;
        -:  157:  return 0 ;
        -:  158:#else
    #####:  159:  return ace_sigfillset_helper (s);
        -:  160:#endif /* ACE_LACKS_SIGSET */
        -:  161:}
------------------
_ZN6ACE_OS10sigfillsetEP10__sigset_t:
    #####:  148:sigfillset (sigset_t *s)
        -:  149:{
        -:  150:#if defined (ACE_LACKS_SIGSET)
        -:  151:  if (s == 0)
        -:  152:    {
        -:  153:      errno = EFAULT;
        -:  154:      return -1;
        -:  155:    }
        -:  156:  *s = ~(sigset_t) 0;
        -:  157:  return 0 ;
        -:  158:#else
    #####:  159:  return ace_sigfillset_helper (s);
        -:  160:#endif /* ACE_LACKS_SIGSET */
        -:  161:}
------------------
_ZN6ACE_OS10sigfillsetEP10__sigset_t:
    #####:  148:sigfillset (sigset_t *s)
        -:  149:{
        -:  150:#if defined (ACE_LACKS_SIGSET)
        -:  151:  if (s == 0)
        -:  152:    {
        -:  153:      errno = EFAULT;
        -:  154:      return -1;
        -:  155:    }
        -:  156:  *s = ~(sigset_t) 0;
        -:  157:  return 0 ;
        -:  158:#else
    #####:  159:  return ace_sigfillset_helper (s);
        -:  160:#endif /* ACE_LACKS_SIGSET */
        -:  161:}
------------------
        -:  162:
        -:  163:ACE_INLINE int
    #####:  164:sigismember (sigset_t *s, int signum)
        -:  165:{
        -:  166:#if defined (ACE_LACKS_SIGSET)
        -:  167:  if (s == 0)
        -:  168:    {
        -:  169:      errno = EFAULT;
        -:  170:      return -1;
        -:  171:    }
        -:  172:  else if (signum < 1 || signum >= ACE_NSIG)
        -:  173:    {
        -:  174:      errno = EINVAL;
        -:  175:      return -1;                 // Invalid signum, return error
        -:  176:    }
        -:  177:  return ((*s & (1 << (signum - 1))) != 0) ;
        -:  178:#else
        -:  179:#  if defined (ACE_HAS_SIGISMEMBER_BUG)
        -:  180:  if (signum < 1 || signum >= ACE_NSIG)
        -:  181:    {
        -:  182:      errno = EINVAL;
        -:  183:      return -1;                 // Invalid signum, return error
        -:  184:    }
        -:  185:#  endif /* ACE_HAS_SIGISMEMBER_BUG */
    #####:  186:  return ace_sigismember_helper (s, signum);
        -:  187:#endif /* ACE_LACKS_SIGSET */
        -:  188:}
        -:  189:
        -:  190:ACE_INLINE ACE_SignalHandler
        -:  191:signal (int signum, ACE_SignalHandler func)
        -:  192:{
        -:  193:  if (signum == 0)
        -:  194:    return 0;
        -:  195:  else
        -:  196:#if (defined ACE_WIN32 && !defined ACE_HAS_WINCE) || \
        -:  197:    (!defined ACE_LACKS_UNIX_SIGNALS && !defined ACE_LACKS_SIGNAL)
        -:  198:#  if !defined (ACE_HAS_TANDEM_SIGNALS) && !defined (ACE_HAS_LYNXOS4_SIGNALS)
        -:  199:    return ::signal (signum, func);
        -:  200:#  else
        -:  201:    return (ACE_SignalHandler) ::signal (signum, (void (*)(int)) func);
        -:  202:#  endif /* !ACE_HAS_TANDEM_SIGNALS && !ACE_HAS_LYNXOS4_SIGNALS */
        -:  203:#else
        -:  204:    // @@ WINCE: Don't know how to implement signal on WinCE (yet.)
        -:  205:    ACE_UNUSED_ARG (signum);
        -:  206:    ACE_UNUSED_ARG (func);
        -:  207:    ACE_NOTSUP_RETURN (0);     // Should return SIG_ERR but it is not defined on WinCE.
        -:  208:#endif /* defined (ACE_WIN32) && !defined (ACE_HAS_WINCE) || !defined (ACE_LACKS_UNIX_SIGNALS) */
        -:  209:}
        -:  210:
        -:  211:ACE_INLINE int
        -:  212:sigprocmask (int how, const sigset_t *nsp, sigset_t *osp)
        -:  213:{
        -:  214:#if defined (ACE_LACKS_SIGSET) || defined (ACE_LACKS_SIGSET_DEFINITIONS) || defined (ACE_LACKS_SIGPROCMASK)
        -:  215:  ACE_UNUSED_ARG (how);
        -:  216:  ACE_UNUSED_ARG (nsp);
        -:  217:  ACE_UNUSED_ARG (osp);
        -:  218:  ACE_NOTSUP_RETURN (-1);
        -:  219:#else
        -:  220:  ACE_OSCALL_RETURN (::sigprocmask (how, nsp, osp), int, -1);
        -:  221:#endif /* ACE_LACKS_SIGSET || ACE_LACKS_SIGSET_DEFINITIONS || ACE_LACKS_SIGPROCMASK */
        -:  222:}
        -:  223:
        -:  224:ACE_INLINE int
        -:  225:sigsuspend (const sigset_t *s)
        -:  226:{
        -:  227:#if defined (ACE_HAS_SIGSUSPEND)
        -:  228:  sigset_t sigset;
        -:  229:
        -:  230:  if (s == 0)
        -:  231:    {
        -:  232:      ACE_OS::sigemptyset (&sigset);
        -:  233:      s = &sigset;
        -:  234:    }
        -:  235:  return ace_sigsuspend_helper (s);
        -:  236:#else
        -:  237:  ACE_UNUSED_ARG (s);
        -:  238:  ACE_NOTSUP_RETURN (-1);
        -:  239:#endif /* ACE_HAS_SIGSUSPEND */
        -:  240:}
        -:  241:
        -:  242:ACE_INLINE int
        -:  243:raise (const int signum)
        -:  244:{
        -:  245:#if defined (ACE_LACKS_RAISE)
        -:  246:  ACE_UNUSED_ARG (signum);
        -:  247:  ACE_NOTSUP_RETURN (-1);
        -:  248:#else
        -:  249:  ACE_OSCALL_RETURN (::raise (signum), int, -1);
        -:  250:#endif /* ACE_LACKS_RAISE */
        -:  251:}
        -:  252:
        -:  253:}  /* end namespace ACE_OS */
        -:  254:
        -:  255:ACE_END_VERSIONED_NAMESPACE_DECL
