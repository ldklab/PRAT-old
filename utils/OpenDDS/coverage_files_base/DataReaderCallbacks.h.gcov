        -:    0:Source:../dds/DCPS/DataReaderCallbacks.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef OPENDDS_DCPS_DATAREADERCALLBACKS_H
        -:    9:#define OPENDDS_DCPS_DATAREADERCALLBACKS_H
        -:   10:
        -:   11:#include "dds/DCPS/Definitions.h"
        -:   12:#include "dds/DCPS/DiscoveryListener.h"
        -:   13:#include "dds/DCPS/RcObject.h"
        -:   14:
        -:   15:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   16:#pragma once
        -:   17:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   18:
        -:   19:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   20:
        -:   21:namespace OpenDDS {
        -:   22:
        -:   23:namespace ICE {
        -:   24:  class Endpoint;
        -:   25:}
        -:   26:
        -:   27:namespace DCPS {
        -:   28:
        -:   29:/**
        -:   30:* @class DataReaderCallbacks
        -:   31:*
        -:   32:* @brief Defines the interface for Discovery callbacks into the DataReader.
        -:   33:*
        -:   34:*/
        -:   35:class DataReaderCallbacks
        -:   36:  : public virtual RcObject {
        -:   37:public:
        -:   38:
    #####:   39:  DataReaderCallbacks() {}
        -:   40:
    #####:   41:  virtual ~DataReaderCallbacks() {}
        -:   42:
        -:   43:  virtual void add_association(const RepoId& yourId,
        -:   44:                               const WriterAssociation& writer,
        -:   45:                               bool active) = 0;
        -:   46:
        -:   47:  virtual void association_complete(const RepoId& remote_id) = 0;
        -:   48:
        -:   49:  virtual void remove_associations(const WriterIdSeq& writers,
        -:   50:                                   CORBA::Boolean callback) = 0;
        -:   51:
        -:   52:  virtual void update_incompatible_qos(const IncompatibleQosStatus& status) = 0;
        -:   53:
        -:   54:  virtual void inconsistent_topic() = 0;
        -:   55:
        -:   56:  virtual void signal_liveliness(const RepoId& remote_participant) = 0;
        -:   57:
    #####:   58:  virtual void register_for_writer(const RepoId& /*participant*/,
        -:   59:                                   const RepoId& /*readerid*/,
        -:   60:                                   const RepoId& /*writerid*/,
        -:   61:                                   const TransportLocatorSeq& /*locators*/,
    #####:   62:                                   DiscoveryListener* /*listener*/) { }
        -:   63:
    #####:   64:  virtual void unregister_for_writer(const RepoId& /*participant*/,
        -:   65:                                     const RepoId& /*readerid*/,
    #####:   66:                                     const RepoId& /*writerid*/) { }
        -:   67:
        -:   68:  virtual ICE::Endpoint* get_ice_endpoint() = 0;
        -:   69:};
        -:   70:
        -:   71:} // namespace DCPS
        -:   72:} // namespace OpenDDS
        -:   73:
        -:   74:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:   75:
        -:   76:#endif /* OPENDDS_DCPS_DATAREADERCALLBACKS_H  */
