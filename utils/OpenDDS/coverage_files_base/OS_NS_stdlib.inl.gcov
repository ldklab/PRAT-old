        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/ace/OS_NS_stdlib.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id: OS_NS_stdlib.inl 2622 2015-08-13 18:30:00Z mitza $
        -:    4:
        -:    5:#include "ace/config-all.h"           /* Need ACE_TRACE */
        -:    6:#include "ace/Object_Manager_Base.h"
        -:    7:#include "ace/OS_NS_string.h"
        -:    8:#include "ace/Global_Macros.h"
        -:    9:#include "ace/os_include/os_errno.h"
        -:   10:#include "ace/os_include/os_search.h"
        -:   11:
        -:   12:#if defined (ACE_WCHAR_IN_STD_NAMESPACE)
        -:   13:# define ACE_WCHAR_STD_NAMESPACE std
        -:   14:#else
        -:   15:# define ACE_WCHAR_STD_NAMESPACE ACE_STD_NAMESPACE
        -:   16:#endif /* ACE_WCHAR_IN_STD_NAMESPACE */
        -:   17:
        -:   18:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   19:
        -:   20:// Doesn't need a macro since it *never* returns!
        -:   21:
        -:   22:ACE_INLINE void
        -:   23:ACE_OS::_exit (int status)
        -:   24:{
        -:   25:  ACE_OS_TRACE ("ACE_OS::_exit");
        -:   26:#if defined (ACE_VXWORKS)
        -:   27:  ::exit (status);
        -:   28:#elif defined (ACE_HAS_WINCE)
        -:   29:  ::TerminateProcess (::GetCurrentProcess (), status);
        -:   30:#elif !defined (ACE_LACKS__EXIT)
        -:   31:   ::_exit (status);
        -:   32:#else
        -:   33:  ACE_UNUSED_ARG (status);
        -:   34:
        -:   35:#endif /* ACE_VXWORKS */
        -:   36:}
        -:   37:
        -:   38:ACE_INLINE void
        -:   39:ACE_OS::abort (void)
        -:   40:{
        -:   41:#if !defined (ACE_LACKS_ABORT)
        -:   42:  ::abort ();
        -:   43:#elif !defined (ACE_LACKS_EXIT)
        -:   44:  exit (1);
        -:   45:#endif /* !ACE_LACKS_ABORT */
        -:   46:}
        -:   47:
        -:   48:ACE_INLINE int
        -:   49:ACE_OS::atexit (ACE_EXIT_HOOK func, const char* name)
        -:   50:{
        -:   51:  return ACE_OS_Object_Manager::instance ()->at_exit (func, name);
        -:   52:}
        -:   53:
        -:   54:ACE_INLINE int
    #####:   55:ACE_OS::atoi (const char *s)
        -:   56:{
    #####:   57:  ACE_OSCALL_RETURN (::atoi (s), int, -1);
        -:   58:}
        -:   59:
        -:   60:#if defined (ACE_HAS_WCHAR)
        -:   61:ACE_INLINE int
        -:   62:ACE_OS::atoi (const wchar_t *s)
        -:   63:{
        -:   64:#if defined (ACE_WIN32) && defined (ACE_HAS_WTOI)
        -:   65:  ACE_OSCALL_RETURN (::_wtoi (s), int, -1);
        -:   66:#else /* ACE_WIN32 */
        -:   67:  return ACE_OS::atoi (ACE_Wide_To_Ascii (s).char_rep ());
        -:   68:#endif /* ACE_WIN32 */
        -:   69:}
        -:   70:#endif /* ACE_HAS_WCHAR */
        -:   71:
        -:   72:ACE_INLINE long
        -:   73:ACE_OS::atol (const char *s)
        -:   74:{
        -:   75:  ACE_OSCALL_RETURN (::atol (s), long, -1);
        -:   76:}
        -:   77:
        -:   78:#if defined (ACE_HAS_WCHAR)
        -:   79:ACE_INLINE long
        -:   80:ACE_OS::atol (const wchar_t *s)
        -:   81:{
        -:   82:#if defined (ACE_WIN32) && defined (ACE_HAS_WTOL)
        -:   83:  ACE_OSCALL_RETURN (::_wtol (s), long, -1);
        -:   84:#else /* ACE_WIN32 */
        -:   85:  return ACE_OS::atol (ACE_Wide_To_Ascii (s).char_rep ());
        -:   86:#endif /* ACE_WIN32 */
        -:   87:}
        -:   88:#endif /* ACE_HAS_WCHAR */
        -:   89:
        -:   90:ACE_INLINE double
        -:   91:ACE_OS::atof (const char *s)
        -:   92:{
        -:   93:  ACE_OSCALL_RETURN (::atof (s), double, -1);
        -:   94:}
        -:   95:
        -:   96:#if defined (ACE_HAS_WCHAR)
        -:   97:ACE_INLINE double
        -:   98:ACE_OS::atof (const wchar_t *s)
        -:   99:{
        -:  100:#if !defined (ACE_HAS_WTOF)
        -:  101:  return ACE_OS::atof (ACE_Wide_To_Ascii (s).char_rep ());
        -:  102:#elif defined (ACE_WTOF_EQUIVALENT)
        -:  103:  ACE_OSCALL_RETURN (ACE_WTOF_EQUIVALENT (s), double, -1);
        -:  104:#else /* ACE_HAS__WTOF */
        -:  105:  ACE_OSCALL_RETURN (::wtof (s), double, -1);
        -:  106:#endif /* ACE_HAS_WTOF */
        -:  107:}
        -:  108:#endif /* ACE_HAS_WCHAR */
        -:  109:
        -:  110:ACE_INLINE void *
        -:  111:ACE_OS::atop (const char *s)
        -:  112:{
        -:  113:  ACE_TRACE ("ACE_OS::atop");
        -:  114:#if defined (ACE_WIN64)
        -:  115:  intptr_t ip = ::_atoi64 (s);
        -:  116:#elif defined (ACE_OPENVMS)
        -:  117:#  if !defined (__INITIAL_POINTER_SIZE) || (__INITIAL_POINTER_SIZE < 64)
        -:  118:  int ip = ::atoi (s);
        -:  119:#  else
        -:  120:  intptr_t ip = ::atoi (s);
        -:  121:#  endif
        -:  122:#else
        -:  123:  intptr_t ip = ::atoi (s);
        -:  124:#endif /* ACE_WIN64 */
        -:  125:  void * p = reinterpret_cast<void *> (ip);
        -:  126:  return p;
        -:  127:}
        -:  128:
        -:  129:#if defined (ACE_HAS_WCHAR)
        -:  130:ACE_INLINE void *
        -:  131:ACE_OS::atop (const wchar_t *s)
        -:  132:{
        -:  133:#  if defined (ACE_WIN64)
        -:  134:  intptr_t ip = ::_wtoi64 (s);
        -:  135:#  elif defined (ACE_OPENVMS)
        -:  136:#    if !defined (__INITIAL_POINTER_SIZE) || (__INITIAL_POINTER_SIZE < 64)
        -:  137:  int ip = ACE_OS::atoi (s);
        -:  138:#    else
        -:  139:  intptr_t ip = ACE_OS::atoi (s);
        -:  140:#    endif
        -:  141:#  else
        -:  142:  intptr_t ip = ACE_OS::atoi (s);
        -:  143:#  endif /* ACE_WIN64 */
        -:  144:  void * p = reinterpret_cast<void *> (ip);
        -:  145:  return p;
        -:  146:}
        -:  147:#endif /* ACE_HAS_WCHAR */
        -:  148:
        -:  149:ACE_INLINE void *
        -:  150:ACE_OS::bsearch (const void *key,
        -:  151:                 const void *base,
        -:  152:                 size_t nel,
        -:  153:                 size_t size,
        -:  154:                 ACE_COMPARE_FUNC compar)
        -:  155:{
        -:  156:#if !defined (ACE_LACKS_BSEARCH)
        -:  157:  return ::bsearch (key, base, nel, size, compar);
        -:  158:#else
        -:  159:  ACE_UNUSED_ARG (key);
        -:  160:  ACE_UNUSED_ARG (base);
        -:  161:  ACE_UNUSED_ARG (nel);
        -:  162:  ACE_UNUSED_ARG (size);
        -:  163:  ACE_UNUSED_ARG (compar);
        -:  164:  ACE_NOTSUP_RETURN (0);
        -:  165:#endif /* ACE_LACKS_BSEARCH */
        -:  166:}
        -:  167:
        -:  168:ACE_INLINE char *
        -:  169:ACE_OS::getenv (const char *symbol)
        -:  170:{
        -:  171:  ACE_OS_TRACE ("ACE_OS::getenv");
        -:  172:#if defined (ACE_LACKS_GETENV)
        -:  173:  ACE_UNUSED_ARG (symbol);
        -:  174:  ACE_NOTSUP_RETURN (0);
        -:  175:#else /* ACE_LACKS_GETENV */
        -:  176:  ACE_OSCALL_RETURN (::getenv (symbol), char *, 0);
        -:  177:#endif /* ACE_LACKS_GETENV */
        -:  178:}
        -:  179:
        -:  180:#if defined (ACE_HAS_WCHAR) && defined (ACE_WIN32)
        -:  181:ACE_INLINE wchar_t *
        -:  182:ACE_OS::getenv (const wchar_t *symbol)
        -:  183:{
        -:  184:#if defined (ACE_LACKS_GETENV)
        -:  185:  ACE_UNUSED_ARG (symbol);
        -:  186:  ACE_NOTSUP_RETURN (0);
        -:  187:#else
        -:  188:  ACE_OSCALL_RETURN (::_wgetenv (symbol), wchar_t *, 0);
        -:  189:#endif /* ACE_LACKS_GETENV */
        -:  190:}
        -:  191:#endif /* ACE_HAS_WCHAR && ACE_WIN32 */
        -:  192:
        -:  193:ACE_INLINE char *
        -:  194:ACE_OS::itoa (int value, char *string, int radix)
        -:  195:{
        -:  196:#if !defined (ACE_HAS_ITOA)
        -:  197:  return ACE_OS::itoa_emulation (value, string, radix);
        -:  198:#elif defined (ACE_ITOA_EQUIVALENT)
        -:  199:  return ACE_ITOA_EQUIVALENT (value, string, radix);
        -:  200:#else /* !ACE_HAS_ITOA */
        -:  201:  return ::itoa (value, string, radix);
        -:  202:#endif /* !ACE_HAS_ITOA */
        -:  203:}
        -:  204:
        -:  205:#if defined (ACE_HAS_WCHAR)
        -:  206:ACE_INLINE wchar_t *
        -:  207:ACE_OS::itoa (int value, wchar_t *string, int radix)
        -:  208:{
        -:  209:#if defined (ACE_LACKS_ITOW)
        -:  210:  return ACE_OS::itow_emulation (value, string, radix);
        -:  211:#else /* ACE_LACKS_ITOW */
        -:  212:  return ::_itow (value, string, radix);
        -:  213:#endif /* ACE_LACKS_ITOW */
        -:  214:}
        -:  215:#endif /* ACE_HAS_WCHAR */
        -:  216:
        -:  217:ACE_INLINE ACE_HANDLE
        -:  218:ACE_OS::mkstemp (char *s)
        -:  219:{
        -:  220:#if !defined (ACE_LACKS_MKSTEMP)
        -:  221:  return ::mkstemp (s);
        -:  222:#elif defined (ACE_USES_WCHAR)
        -:  223:  // For wide-char filesystems, we must convert the narrow-char input to
        -:  224:  // a wide-char string for mkstemp_emulation(), then convert the name
        -:  225:  // back to narrow-char for the caller.
        -:  226:  ACE_Ascii_To_Wide wide_s (s);
        -:  227:  const ACE_HANDLE fh = ACE_OS::mkstemp_emulation (wide_s.wchar_rep ());
        -:  228:  if (fh != ACE_INVALID_HANDLE)
        -:  229:    {
        -:  230:      ACE_Wide_To_Ascii narrow_s (wide_s.wchar_rep ());
        -:  231:      ACE_OS::strcpy (s, narrow_s.char_rep ());
        -:  232:    }
        -:  233:  return fh;
        -:  234:#else
        -:  235:  return ACE_OS::mkstemp_emulation (s);
        -:  236:#endif  /* !ACE_LACKS_MKSTEMP */
        -:  237:}
        -:  238:
        -:  239:#if defined (ACE_HAS_WCHAR)
        -:  240:ACE_INLINE ACE_HANDLE
        -:  241:ACE_OS::mkstemp (wchar_t *s)
        -:  242:{
        -:  243:#  if !defined (ACE_LACKS_MKSTEMP)
        -:  244:  // For wide-char filesystems, we must convert the wide-char input to
        -:  245:  // a narrow-char string for mkstemp(), then convert the name
        -:  246:  // back to wide-char for the caller.
        -:  247:  ACE_Wide_To_Ascii narrow_s (s);
        -:  248:  const ACE_HANDLE fh = ::mkstemp (narrow_s.char_rep ());
        -:  249:  if (fh != ACE_INVALID_HANDLE)
        -:  250:    {
        -:  251:      ACE_Ascii_To_Wide wide_s (narrow_s.char_rep ());
        -:  252:      ACE_OS::strcpy (s, wide_s.wchar_rep ());
        -:  253:    }
        -:  254:  return fh;
        -:  255:#  elif defined (ACE_USES_WCHAR)
        -:  256:  return ACE_OS::mkstemp_emulation (s);
        -:  257:#  else
        -:  258:  // For wide-char filesystems, we must convert the wide-char input to
        -:  259:  // a narrow-char string for mkstemp_emulation(), then convert the name
        -:  260:  // back to wide-char for the caller.
        -:  261:  ACE_Wide_To_Ascii narrow_s (s);
        -:  262:  const ACE_HANDLE fh = ACE_OS::mkstemp_emulation (narrow_s.char_rep ());
        -:  263:  if (fh != ACE_INVALID_HANDLE)
        -:  264:    {
        -:  265:      ACE_Ascii_To_Wide wide_s (narrow_s.char_rep ());
        -:  266:      ACE_OS::strcpy (s, wide_s.wchar_rep ());
        -:  267:    }
        -:  268:  return fh;
        -:  269:#  endif  /* !ACE_LACKS_MKSTEMP */
        -:  270:}
        -:  271:#endif /* ACE_HAS_WCHAR */
        -:  272:
        -:  273:#if !defined (ACE_DISABLE_MKTEMP)
        -:  274:# if !defined (ACE_LACKS_MKTEMP)
        -:  275:ACE_INLINE char *
        -:  276:ACE_OS::mktemp (char *s)
        -:  277:{
        -:  278:#  if defined (ACE_WIN32)
        -:  279:  return ::_mktemp (s);
        -:  280:#  else /* ACE_WIN32 */
        -:  281:  return ::mktemp (s);
        -:  282:#  endif /* ACE_WIN32 */
        -:  283:}
        -:  284:
        -:  285:#  if defined (ACE_HAS_WCHAR)
        -:  286:ACE_INLINE wchar_t *
        -:  287:ACE_OS::mktemp (wchar_t *s)
        -:  288:{
        -:  289:#   if defined (ACE_WIN32)
        -:  290:  return ::_wmktemp (s);
        -:  291:#   else
        -:  292:  // For narrow-char filesystems, we must convert the wide-char input to
        -:  293:  // a narrow-char string for mktemp (), then convert the name back to
        -:  294:  // wide-char for the caller.
        -:  295:  ACE_Wide_To_Ascii narrow_s (s);
        -:  296:  if (::mktemp (narrow_s.char_rep ()) == 0)
        -:  297:    return 0;
        -:  298:  ACE_Ascii_To_Wide wide_s (narrow_s.char_rep ());
        -:  299:  ACE_OS::strcpy (s, wide_s.wchar_rep ());
        -:  300:  return s;
        -:  301:#   endif
        -:  302:}
        -:  303:#  endif /* ACE_HAS_WCHAR */
        -:  304:
        -:  305:# endif /* !ACE_LACKS_MKTEMP */
        -:  306:#endif /* !ACE_DISABLE_MKTEMP */
        -:  307:
        -:  308:ACE_INLINE int
        -:  309:ACE_OS::putenv (const char *string)
        -:  310:{
        -:  311:  ACE_OS_TRACE ("ACE_OS::putenv");
        -:  312:#if defined (ACE_LACKS_PUTENV) && defined (ACE_HAS_SETENV)
        -:  313:  int result = 0;
        -:  314:  char *sp = ACE_OS::strchr (const_cast <char *> (string), '=');
        -:  315:  if (sp)
        -:  316:    {
        -:  317:      char *stmp = ACE_OS::strdup (string);
        -:  318:      if (stmp)
        -:  319:        {
        -:  320:          stmp[sp - string] = '\0';
        -:  321:          result = ACE_OS::setenv (stmp, sp+sizeof (char), 1);
        -:  322:          ACE_OS::free (stmp);
        -:  323:        }
        -:  324:      else
        -:  325:        {
        -:  326:          errno = ENOMEM;
        -:  327:          result = -1;
        -:  328:        }
        -:  329:    }
        -:  330:  else
        -:  331:    {
        -:  332:      result = ACE_OS::setenv (string, "", 1);
        -:  333:    }
        -:  334:
        -:  335:  return result;
        -:  336:#elif defined (ACE_LACKS_PUTENV)
        -:  337:  ACE_UNUSED_ARG (string);
        -:  338:  ACE_NOTSUP_RETURN (0);
        -:  339:#else /* ! ACE_HAS_WINCE */
        -:  340:  ACE_OSCALL_RETURN (ACE_STD_NAMESPACE::putenv (const_cast <char *> (string)), int, -1);
        -:  341:#endif /* ACE_LACKS_PUTENV && ACE_HAS_SETENV */
        -:  342:}
        -:  343:
        -:  344:ACE_INLINE int
        -:  345:ACE_OS::setenv(const char *envname, const char *envval, int overwrite)
        -:  346:{
        -:  347:#if defined (ACE_LACKS_SETENV)
        -:  348:  ACE_UNUSED_ARG (envname);
        -:  349:  ACE_UNUSED_ARG (envval);
        -:  350:  ACE_UNUSED_ARG (overwrite);
        -:  351:  ACE_NOTSUP_RETURN (-1);
        -:  352:#else
        -:  353:  ACE_OSCALL_RETURN (ACE_STD_NAMESPACE::setenv (envname, envval, overwrite), int, -1);
        -:  354:#endif
        -:  355:}
        -:  356:
        -:  357:ACE_INLINE int
        -:  358:ACE_OS::unsetenv(const char *name)
        -:  359:{
        -:  360:#if defined (ACE_LACKS_UNSETENV)
        -:  361:  ACE_UNUSED_ARG (name);
        -:  362:  ACE_NOTSUP_RETURN (-1);
        -:  363:#else
        -:  364:# if defined (ACE_HAS_VOID_UNSETENV)
        -:  365:  ::unsetenv (name);
        -:  366:  return 0;
        -:  367:#else
        -:  368:  ACE_OSCALL_RETURN (ACE_STD_NAMESPACE::unsetenv (name), int, -1);
        -:  369:# endif /* ACE_HAS_VOID_UNSETENV */
        -:  370:#endif /* ACE_LACKS_UNSETENV */
        -:  371:}
        -:  372:
        -:  373:#if defined (ACE_HAS_WCHAR) && defined (ACE_WIN32)
        -:  374:ACE_INLINE int
        -:  375:ACE_OS::putenv (const wchar_t *string)
        -:  376:{
        -:  377:  ACE_OS_TRACE ("ACE_OS::putenv");
        -:  378:#if defined (ACE_LACKS_PUTENV)
        -:  379:  ACE_UNUSED_ARG (string);
        -:  380:  ACE_NOTSUP_RETURN (-1);
        -:  381:#else
        -:  382:  ACE_OSCALL_RETURN (::_wputenv (string), int, -1);
        -:  383:#endif /* ACE_LACKS_PUTENV */
        -:  384:}
        -:  385:#endif /* ACE_HAS_WCHAR && ACE_WIN32 */
        -:  386:
        -:  387:ACE_INLINE void
        -:  388:ACE_OS::qsort (void *base,
        -:  389:               size_t nel,
        -:  390:               size_t width,
        -:  391:               ACE_COMPARE_FUNC compar)
        -:  392:{
        -:  393:#if !defined (ACE_LACKS_QSORT)
        -:  394:  ::qsort (base, nel, width, compar);
        -:  395:#else
        -:  396:  ACE_UNUSED_ARG (base);
        -:  397:  ACE_UNUSED_ARG (nel);
        -:  398:  ACE_UNUSED_ARG (width);
        -:  399:  ACE_UNUSED_ARG (compar);
        -:  400:#endif /* !ACE_LACKS_QSORT */
        -:  401:}
        -:  402:
        -:  403:ACE_INLINE int
        -:  404:ACE_OS::rand (void)
        -:  405:{
        -:  406:  ACE_OS_TRACE ("ACE_OS::rand");
        -:  407:#if !defined (ACE_LACKS_RAND)
        -:  408:  ACE_OSCALL_RETURN (::rand (), int, -1);
        -:  409:#else
        -:  410:  ACE_NOTSUP_RETURN (-1);
        -:  411:#endif /* ACE_LACKS_RAND */
        -:  412:}
        -:  413:
        -:  414:ACE_INLINE int
        -:  415:ACE_OS::rand_r (unsigned int *seed)
        -:  416:{
        -:  417:  ACE_OS_TRACE ("ACE_OS::rand_r");
        -:  418:#if defined (ACE_LACKS_RAND_R)
        -:  419:  long new_seed = (long) *seed;
        -:  420:  if (new_seed == 0)
        -:  421:    new_seed = 0x12345987;
        -:  422:  long temp = new_seed / 127773;
        -:  423:  new_seed = 16807 * (new_seed - temp * 127773) - 2836 * temp;
        -:  424:  if (new_seed < 0)
        -:  425:    new_seed += 2147483647;
        -:  426:  *seed = (unsigned int)new_seed;
        -:  427:  return (int) (new_seed & RAND_MAX);
        -:  428:#else
        -:  429:  return ::rand_r (seed);
        -:  430:# endif /* ACE_LACKS_RAND_R */
        -:  431:}
        -:  432:
        -:  433:#  if !defined (ACE_LACKS_REALPATH)
        -:  434:ACE_INLINE char *
        -:  435:ACE_OS::realpath (const char *file_name,
        -:  436:                  char *resolved_name)
        -:  437:{
        -:  438:#    if defined (ACE_WIN32)
        -:  439:  return ::_fullpath (resolved_name, file_name, PATH_MAX);
        -:  440:#    else /* ACE_WIN32 */
        -:  441:  return ::realpath (file_name, resolved_name);
        -:  442:#    endif /* ! ACE_WIN32 */
        -:  443:}
        -:  444:
        -:  445:#  if defined (ACE_HAS_WCHAR)
        -:  446:ACE_INLINE wchar_t *
        -:  447:ACE_OS::realpath (const wchar_t *file_name,
        -:  448:                  wchar_t *resolved_name)
        -:  449:{
        -:  450:#    if defined (ACE_WIN32)
        -:  451:  return ::_wfullpath (resolved_name, file_name, PATH_MAX);
        -:  452:#    else /* ACE_WIN32 */
        -:  453:  ACE_Wide_To_Ascii n_file_name (file_name);
        -:  454:  char n_resolved[PATH_MAX];
        -:  455:  if (0 != ACE_OS::realpath (n_file_name.char_rep (), n_resolved))
        -:  456:    {
        -:  457:      ACE_Ascii_To_Wide w_resolved (n_resolved);
        -:  458:      ACE_OS::strcpy (resolved_name, w_resolved.wchar_rep ());
        -:  459:      return resolved_name;
        -:  460:    }
        -:  461:  return 0;
        -:  462:#    endif /* ! ACE_WIN32 */
        -:  463:}
        -:  464:#  endif /* ACE_HAS_WCHAR */
        -:  465:#endif /* ACE_HAS_WINCE */
        -:  466:
        -:  467:ACE_INLINE ACE_EXIT_HOOK
        -:  468:ACE_OS::set_exit_hook (ACE_EXIT_HOOK exit_hook)
        -:  469:{
        -:  470:  ACE_EXIT_HOOK old_hook = exit_hook_;
        -:  471:  exit_hook_ = exit_hook;
        -:  472:  return old_hook;
        -:  473:}
        -:  474:
        -:  475:ACE_INLINE void
        -:  476:ACE_OS::srand (u_int seed)
        -:  477:{
        -:  478:  ACE_OS_TRACE ("ACE_OS::srand");
        -:  479:#ifdef ACE_LACKS_SRAND
        -:  480:  ACE_UNUSED_ARG (seed);
        -:  481:#else
        -:  482:  ::srand (seed);
        -:  483:#endif
        -:  484:}
        -:  485:
        -:  486:#if !defined (ACE_LACKS_STRTOD)
        -:  487:ACE_INLINE double
        -:  488:ACE_OS::strtod (const char *s, char **endptr)
        -:  489:{
        -:  490:  return ::strtod (s, endptr);
        -:  491:}
        -:  492:#endif /* !ACE_LACKS_STRTOD */
        -:  493:
        -:  494:#if defined (ACE_HAS_WCHAR) && !defined (ACE_LACKS_WCSTOD)
        -:  495:ACE_INLINE double
        -:  496:ACE_OS::strtod (const wchar_t *s, wchar_t **endptr)
        -:  497:{
        -:  498:  return ACE_WCHAR_STD_NAMESPACE::wcstod (s, endptr);
        -:  499:}
        -:  500:#endif /* ACE_HAS_WCHAR && !ACE_LACKS_WCSTOD */
        -:  501:
        -:  502:ACE_INLINE long
        -:  503:ACE_OS::strtol (const char *s, char **ptr, int base)
        -:  504:{
        -:  505:#if defined (ACE_LACKS_STRTOL)
        -:  506:  return ACE_OS::strtol_emulation (s, ptr, base);
        -:  507:#else  /* ACE_LACKS_STRTOL */
        -:  508:  return ::strtol (s, ptr, base);
        -:  509:#endif /* ACE_LACKS_STRTOL */
        -:  510:}
        -:  511:
        -:  512:#if defined (ACE_HAS_WCHAR)
        -:  513:ACE_INLINE long
        -:  514:ACE_OS::strtol (const wchar_t *s, wchar_t **ptr, int base)
        -:  515:{
        -:  516:#if defined (ACE_LACKS_WCSTOL)
        -:  517:  return ACE_OS::wcstol_emulation (s, ptr, base);
        -:  518:#else
        -:  519:  return ACE_WCHAR_STD_NAMESPACE::wcstol (s, ptr, base);
        -:  520:#endif /* ACE_LACKS_WCSTOL */
        -:  521:}
        -:  522:#endif /* ACE_HAS_WCHAR */
        -:  523:
        -:  524:ACE_INLINE unsigned long
        -:  525:ACE_OS::strtoul (const char *s, char **ptr, int base)
        -:  526:{
        -:  527:#if defined (ACE_LACKS_STRTOUL)
        -:  528:  return ACE_OS::strtoul_emulation (s, ptr, base);
        -:  529:#else /* ACE_LACKS_STRTOUL */
        -:  530:  return ::strtoul (s, ptr, base);
        -:  531:#endif /* ACE_LACKS_STRTOUL */
        -:  532:}
        -:  533:
        -:  534:#if defined (ACE_HAS_WCHAR)
        -:  535:ACE_INLINE unsigned long
        -:  536:ACE_OS::strtoul (const wchar_t *s, wchar_t **ptr, int base)
        -:  537:{
        -:  538:#if defined (ACE_LACKS_WCSTOUL)
        -:  539:  return ACE_OS::wcstoul_emulation (s, ptr, base);
        -:  540:#else
        -:  541:  return ACE_WCHAR_STD_NAMESPACE::wcstoul (s, ptr, base);
        -:  542:#endif /* ACE_LACKS_WCSTOUL */
        -:  543:}
        -:  544:#endif /* ACE_HAS_WCHAR */
        -:  545:
        -:  546:ACE_INLINE ACE_INT64
        -:  547:ACE_OS::strtoll (const char *s, char **ptr, int base)
        -:  548:{
        -:  549:#if defined (ACE_LACKS_STRTOLL)
        -:  550:  return ACE_OS::strtoll_emulation (s, ptr, base);
        -:  551:#elif defined (ACE_STRTOLL_EQUIVALENT)
        -:  552:  return ACE_STRTOLL_EQUIVALENT (s, ptr, base);
        -:  553:#else
        -:  554:  return ace_strtoll_helper (s, ptr, base);
        -:  555:#endif /* ACE_LACKS_STRTOLL */
        -:  556:}
        -:  557:
        -:  558:#if defined (ACE_HAS_WCHAR)
        -:  559:ACE_INLINE ACE_INT64
        -:  560:ACE_OS::strtoll (const wchar_t *s, wchar_t **ptr, int base)
        -:  561:{
        -:  562:#if defined (ACE_LACKS_WCSTOLL)
        -:  563:  return ACE_OS::wcstoll_emulation (s, ptr, base);
        -:  564:#elif defined (ACE_WCSTOLL_EQUIVALENT)
        -:  565:  return ACE_WCSTOLL_EQUIVALENT (s, ptr, base);
        -:  566:#else
        -:  567:  return ACE_WCHAR_STD_NAMESPACE::wcstoll (s, ptr, base);
        -:  568:#endif /* ACE_LACKS_WCSTOLL */
        -:  569:}
        -:  570:#endif /* ACE_HAS_WCHAR */
        -:  571:
        -:  572:ACE_INLINE ACE_UINT64
        -:  573:ACE_OS::strtoull (const char *s, char **ptr, int base)
        -:  574:{
        -:  575:#if defined (ACE_LACKS_STRTOULL)
        -:  576:  return ACE_OS::strtoull_emulation (s, ptr, base);
        -:  577:#elif defined (ACE_STRTOULL_EQUIVALENT)
        -:  578:  return ACE_STRTOULL_EQUIVALENT (s, ptr, base);
        -:  579:#else
        -:  580:  return ace_strtoull_helper (s, ptr, base);
        -:  581:#endif /* ACE_LACKS_STRTOULL */
        -:  582:}
        -:  583:
        -:  584:#if defined (ACE_HAS_WCHAR)
        -:  585:ACE_INLINE ACE_UINT64
        -:  586:ACE_OS::strtoull (const wchar_t *s, wchar_t **ptr, int base)
        -:  587:{
        -:  588:#if defined (ACE_LACKS_WCSTOULL)
        -:  589:  return ACE_OS::wcstoull_emulation (s, ptr, base);
        -:  590:#elif defined (ACE_WCSTOULL_EQUIVALENT)
        -:  591:  return ACE_WCSTOULL_EQUIVALENT (s, ptr, base);
        -:  592:#else
        -:  593:  return ACE_WCHAR_STD_NAMESPACE::wcstoull (s, ptr, base);
        -:  594:#endif /* ACE_LACKS_WCSTOULL */
        -:  595:}
        -:  596:#endif /* ACE_HAS_WCHAR */
        -:  597:
        -:  598:ACE_INLINE int
        -:  599:ACE_OS::system (const ACE_TCHAR *s)
        -:  600:{
        -:  601:  // ACE_OS_TRACE ("ACE_OS::system");
        -:  602:#if defined (ACE_LACKS_SYSTEM)
        -:  603:  ACE_UNUSED_ARG (s);
        -:  604:  ACE_NOTSUP_RETURN (-1);
        -:  605:#elif defined (ACE_WIN32) && defined (ACE_USES_WCHAR)
        -:  606:  ACE_OSCALL_RETURN (::_wsystem (s), int, -1);
        -:  607:#else
        -:  608:  ACE_OSCALL_RETURN (::system (ACE_TEXT_ALWAYS_CHAR (s)), int, -1);
        -:  609:#endif /* ACE_LACKS_SYSTEM */
        -:  610:}
        -:  611:
        -:  612:ACE_INLINE const char*
        -:  613:ACE_OS::getprogname ()
        -:  614:{
        -:  615:#if defined (ACE_HAS_GETPROGNAME)
        -:  616:  return ::getprogname ();
        -:  617:#else
        -:  618:  return ACE_OS::getprogname_emulation ();
        -:  619:#endif /* ACE_HAS_GETPROGNAME */
        -:  620:}
        -:  621:
        -:  622:ACE_INLINE void
        -:  623:ACE_OS::setprogname (const char* name)
        -:  624:{
        -:  625:#if defined (ACE_HAS_SETPROGNAME)
        -:  626:  ::setprogname (name);
        -:  627:#else
        -:  628:  ACE_OS::setprogname_emulation (name);
        -:  629:#endif /* ACE_HAS_SETPROGNAME */
        -:  630:}
        -:  631:
        -:  632:ACE_END_VERSIONED_NAMESPACE_DECL
