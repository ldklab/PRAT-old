        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/OS_NS_stdlib.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id$
        -:    4:
        -:    5:#include "ace/config-all.h"           /* Need ACE_TRACE */
        -:    6:#include "ace/Object_Manager_Base.h"
        -:    7:#include "ace/OS_NS_string.h"
        -:    8:#include "ace/Global_Macros.h"
        -:    9:#include "ace/os_include/os_errno.h"
        -:   10:#include "ace/os_include/os_search.h"
        -:   11:
        -:   12:#if defined (ACE_WCHAR_IN_STD_NAMESPACE)
        -:   13:# define ACE_WCHAR_STD_NAMESPACE std
        -:   14:#else
        -:   15:# define ACE_WCHAR_STD_NAMESPACE ACE_STD_NAMESPACE
        -:   16:#endif /* ACE_WCHAR_IN_STD_NAMESPACE */
        -:   17:
        -:   18:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   19:
        -:   20:// Doesn't need a macro since it *never* returns!
        -:   21:
        -:   22:ACE_INLINE void
        -:   23:ACE_OS::_exit (int status)
        -:   24:{
        -:   25:  ACE_OS_TRACE ("ACE_OS::_exit");
        -:   26:#if defined (ACE_VXWORKS)
        -:   27:  ::exit (status);
        -:   28:#elif defined (ACE_HAS_WINCE)
        -:   29:  ::TerminateProcess (::GetCurrentProcess (), status);
        -:   30:#elif defined (ACE_MQX)
        -:   31:   _mqx_exit (status);
        -:   32:#elif !defined (ACE_LACKS__EXIT)
        -:   33:   ::_exit (status);
        -:   34:#else
        -:   35:  ACE_UNUSED_ARG (status);
        -:   36:
        -:   37:#endif /* ACE_VXWORKS */
        -:   38:}
        -:   39:
        -:   40:ACE_INLINE void
        -:   41:ACE_OS::abort (void)
        -:   42:{
        -:   43:#if !defined (ACE_LACKS_ABORT)
        -:   44:  ::abort ();
        -:   45:#elif !defined (ACE_LACKS_EXIT)
        -:   46:  exit (1);
        -:   47:#endif /* !ACE_LACKS_ABORT */
        -:   48:}
        -:   49:
        -:   50:ACE_INLINE int
        -:   51:ACE_OS::atexit (ACE_EXIT_HOOK func, const char* name)
        -:   52:{
        -:   53:  return ACE_OS_Object_Manager::instance ()->at_exit (func, name);
        -:   54:}
        -:   55:
        -:   56:ACE_INLINE int
    #####:   57:ACE_OS::atoi (const char *s)
        -:   58:{
    #####:   59:  ACE_OSCALL_RETURN (::atoi (s), int, -1);
        -:   60:}
        -:   61:
        -:   62:#if defined (ACE_HAS_WCHAR)
        -:   63:ACE_INLINE int
        -:   64:ACE_OS::atoi (const wchar_t *s)
        -:   65:{
        -:   66:#if defined (ACE_WIN32) && defined (ACE_HAS_WTOI)
        -:   67:  ACE_OSCALL_RETURN (::_wtoi (s), int, -1);
        -:   68:#else /* ACE_WIN32 */
        -:   69:  return ACE_OS::atoi (ACE_Wide_To_Ascii (s).char_rep ());
        -:   70:#endif /* ACE_WIN32 */
        -:   71:}
        -:   72:#endif /* ACE_HAS_WCHAR */
        -:   73:
        -:   74:ACE_INLINE long
        -:   75:ACE_OS::atol (const char *s)
        -:   76:{
        -:   77:  ACE_OSCALL_RETURN (::atol (s), long, -1);
        -:   78:}
        -:   79:
        -:   80:#if defined (ACE_HAS_WCHAR)
        -:   81:ACE_INLINE long
        -:   82:ACE_OS::atol (const wchar_t *s)
        -:   83:{
        -:   84:#if defined (ACE_WIN32) && defined (ACE_HAS_WTOL)
        -:   85:  ACE_OSCALL_RETURN (::_wtol (s), long, -1);
        -:   86:#else /* ACE_WIN32 */
        -:   87:  return ACE_OS::atol (ACE_Wide_To_Ascii (s).char_rep ());
        -:   88:#endif /* ACE_WIN32 */
        -:   89:}
        -:   90:#endif /* ACE_HAS_WCHAR */
        -:   91:
        -:   92:ACE_INLINE double
        -:   93:ACE_OS::atof (const char *s)
        -:   94:{
        -:   95:  ACE_OSCALL_RETURN (::atof (s), double, -1);
        -:   96:}
        -:   97:
        -:   98:#if defined (ACE_HAS_WCHAR)
        -:   99:ACE_INLINE double
        -:  100:ACE_OS::atof (const wchar_t *s)
        -:  101:{
        -:  102:#if !defined (ACE_HAS_WTOF)
        -:  103:  return ACE_OS::atof (ACE_Wide_To_Ascii (s).char_rep ());
        -:  104:#elif defined (ACE_WTOF_EQUIVALENT)
        -:  105:  ACE_OSCALL_RETURN (ACE_WTOF_EQUIVALENT (s), double, -1);
        -:  106:#else /* ACE_HAS__WTOF */
        -:  107:  ACE_OSCALL_RETURN (::wtof (s), double, -1);
        -:  108:#endif /* ACE_HAS_WTOF */
        -:  109:}
        -:  110:#endif /* ACE_HAS_WCHAR */
        -:  111:
        -:  112:ACE_INLINE void *
        -:  113:ACE_OS::atop (const char *s)
        -:  114:{
        -:  115:  ACE_TRACE ("ACE_OS::atop");
        -:  116:#if defined (ACE_WIN64)
        -:  117:  intptr_t ip = ::_atoi64 (s);
        -:  118:#elif defined (ACE_OPENVMS)
        -:  119:#  if !defined (__INITIAL_POINTER_SIZE) || (__INITIAL_POINTER_SIZE < 64)
        -:  120:  int ip = ::atoi (s);
        -:  121:#  else
        -:  122:  intptr_t ip = ::atoi (s);
        -:  123:#  endif
        -:  124:#else
        -:  125:  intptr_t ip = ::atoi (s);
        -:  126:#endif /* ACE_WIN64 */
        -:  127:  void * p = reinterpret_cast<void *> (ip);
        -:  128:  return p;
        -:  129:}
        -:  130:
        -:  131:#if defined (ACE_HAS_WCHAR)
        -:  132:ACE_INLINE void *
        -:  133:ACE_OS::atop (const wchar_t *s)
        -:  134:{
        -:  135:#  if defined (ACE_WIN64)
        -:  136:  intptr_t ip = ::_wtoi64 (s);
        -:  137:#  elif defined (ACE_OPENVMS)
        -:  138:#    if !defined (__INITIAL_POINTER_SIZE) || (__INITIAL_POINTER_SIZE < 64)
        -:  139:  int ip = ACE_OS::atoi (s);
        -:  140:#    else
        -:  141:  intptr_t ip = ACE_OS::atoi (s);
        -:  142:#    endif
        -:  143:#  else
        -:  144:  intptr_t ip = ACE_OS::atoi (s);
        -:  145:#  endif /* ACE_WIN64 */
        -:  146:  void * p = reinterpret_cast<void *> (ip);
        -:  147:  return p;
        -:  148:}
        -:  149:#endif /* ACE_HAS_WCHAR */
        -:  150:
        -:  151:ACE_INLINE void *
        -:  152:ACE_OS::bsearch (const void *key,
        -:  153:                 const void *base,
        -:  154:                 size_t nel,
        -:  155:                 size_t size,
        -:  156:                 ACE_COMPARE_FUNC compar)
        -:  157:{
        -:  158:#if !defined (ACE_LACKS_BSEARCH)
        -:  159:  return ::bsearch (key, base, nel, size, compar);
        -:  160:#else
        -:  161:  ACE_UNUSED_ARG (key);
        -:  162:  ACE_UNUSED_ARG (base);
        -:  163:  ACE_UNUSED_ARG (nel);
        -:  164:  ACE_UNUSED_ARG (size);
        -:  165:  ACE_UNUSED_ARG (compar);
        -:  166:  ACE_NOTSUP_RETURN (0);
        -:  167:#endif /* ACE_LACKS_BSEARCH */
        -:  168:}
        -:  169:
        -:  170:ACE_INLINE char *
        -:  171:ACE_OS::getenv (const char *symbol)
        -:  172:{
        -:  173:  ACE_OS_TRACE ("ACE_OS::getenv");
        -:  174:#if defined (ACE_LACKS_GETENV)
        -:  175:  ACE_UNUSED_ARG (symbol);
        -:  176:  ACE_NOTSUP_RETURN (0);
        -:  177:#else /* ACE_LACKS_GETENV */
        -:  178:  ACE_OSCALL_RETURN (::getenv (symbol), char *, 0);
        -:  179:#endif /* ACE_LACKS_GETENV */
        -:  180:}
        -:  181:
        -:  182:#if defined (ACE_HAS_WCHAR) && defined (ACE_WIN32)
        -:  183:ACE_INLINE wchar_t *
        -:  184:ACE_OS::getenv (const wchar_t *symbol)
        -:  185:{
        -:  186:#if defined (ACE_LACKS_GETENV)
        -:  187:  ACE_UNUSED_ARG (symbol);
        -:  188:  ACE_NOTSUP_RETURN (0);
        -:  189:#else
        -:  190:  ACE_OSCALL_RETURN (::_wgetenv (symbol), wchar_t *, 0);
        -:  191:#endif /* ACE_LACKS_GETENV */
        -:  192:}
        -:  193:#endif /* ACE_HAS_WCHAR && ACE_WIN32 */
        -:  194:
        -:  195:ACE_INLINE char *
        -:  196:ACE_OS::itoa (int value, char *string, int radix)
        -:  197:{
        -:  198:#if !defined (ACE_HAS_ITOA)
        -:  199:  return ACE_OS::itoa_emulation (value, string, radix);
        -:  200:#elif defined (ACE_ITOA_EQUIVALENT)
        -:  201:  return ACE_ITOA_EQUIVALENT (value, string, radix);
        -:  202:#else /* !ACE_HAS_ITOA */
        -:  203:  return ::itoa (value, string, radix);
        -:  204:#endif /* !ACE_HAS_ITOA */
        -:  205:}
        -:  206:
        -:  207:#if defined (ACE_HAS_WCHAR)
        -:  208:ACE_INLINE wchar_t *
        -:  209:ACE_OS::itoa (int value, wchar_t *string, int radix)
        -:  210:{
        -:  211:#if defined (ACE_LACKS_ITOW)
        -:  212:  return ACE_OS::itow_emulation (value, string, radix);
        -:  213:#else /* ACE_LACKS_ITOW */
        -:  214:  return ::_itow (value, string, radix);
        -:  215:#endif /* ACE_LACKS_ITOW */
        -:  216:}
        -:  217:#endif /* ACE_HAS_WCHAR */
        -:  218:
        -:  219:ACE_INLINE ACE_HANDLE
        -:  220:ACE_OS::mkstemp (char *s)
        -:  221:{
        -:  222:#if !defined (ACE_LACKS_MKSTEMP)
        -:  223:  return ::mkstemp (s);
        -:  224:#elif defined (ACE_USES_WCHAR)
        -:  225:  // For wide-char filesystems, we must convert the narrow-char input to
        -:  226:  // a wide-char string for mkstemp_emulation(), then convert the name
        -:  227:  // back to narrow-char for the caller.
        -:  228:  ACE_Ascii_To_Wide wide_s (s);
        -:  229:  const ACE_HANDLE fh = ACE_OS::mkstemp_emulation (wide_s.wchar_rep ());
        -:  230:  if (fh != ACE_INVALID_HANDLE)
        -:  231:    {
        -:  232:      ACE_Wide_To_Ascii narrow_s (wide_s.wchar_rep ());
        -:  233:      ACE_OS::strcpy (s, narrow_s.char_rep ());
        -:  234:    }
        -:  235:  return fh;
        -:  236:#else
        -:  237:  return ACE_OS::mkstemp_emulation (s);
        -:  238:#endif  /* !ACE_LACKS_MKSTEMP */
        -:  239:}
        -:  240:
        -:  241:#if defined (ACE_HAS_WCHAR)
        -:  242:ACE_INLINE ACE_HANDLE
        -:  243:ACE_OS::mkstemp (wchar_t *s)
        -:  244:{
        -:  245:#  if !defined (ACE_LACKS_MKSTEMP)
        -:  246:  // For wide-char filesystems, we must convert the wide-char input to
        -:  247:  // a narrow-char string for mkstemp(), then convert the name
        -:  248:  // back to wide-char for the caller.
        -:  249:  ACE_Wide_To_Ascii narrow_s (s);
        -:  250:  const ACE_HANDLE fh = ::mkstemp (narrow_s.char_rep ());
        -:  251:  if (fh != ACE_INVALID_HANDLE)
        -:  252:    {
        -:  253:      ACE_Ascii_To_Wide wide_s (narrow_s.char_rep ());
        -:  254:      ACE_OS::strcpy (s, wide_s.wchar_rep ());
        -:  255:    }
        -:  256:  return fh;
        -:  257:#  elif defined (ACE_USES_WCHAR)
        -:  258:  return ACE_OS::mkstemp_emulation (s);
        -:  259:#  else
        -:  260:  // For wide-char filesystems, we must convert the wide-char input to
        -:  261:  // a narrow-char string for mkstemp_emulation(), then convert the name
        -:  262:  // back to wide-char for the caller.
        -:  263:  ACE_Wide_To_Ascii narrow_s (s);
        -:  264:  const ACE_HANDLE fh = ACE_OS::mkstemp_emulation (narrow_s.char_rep ());
        -:  265:  if (fh != ACE_INVALID_HANDLE)
        -:  266:    {
        -:  267:      ACE_Ascii_To_Wide wide_s (narrow_s.char_rep ());
        -:  268:      ACE_OS::strcpy (s, wide_s.wchar_rep ());
        -:  269:    }
        -:  270:  return fh;
        -:  271:#  endif  /* !ACE_LACKS_MKSTEMP */
        -:  272:}
        -:  273:#endif /* ACE_HAS_WCHAR */
        -:  274:
        -:  275:#if !defined (ACE_DISABLE_MKTEMP)
        -:  276:# if !defined (ACE_LACKS_MKTEMP)
        -:  277:ACE_INLINE char *
        -:  278:ACE_OS::mktemp (char *s)
        -:  279:{
        -:  280:#  if defined (ACE_WIN32)
        -:  281:  return ::_mktemp (s);
        -:  282:#  else /* ACE_WIN32 */
        -:  283:  return ::mktemp (s);
        -:  284:#  endif /* ACE_WIN32 */
        -:  285:}
        -:  286:
        -:  287:#  if defined (ACE_HAS_WCHAR)
        -:  288:ACE_INLINE wchar_t *
        -:  289:ACE_OS::mktemp (wchar_t *s)
        -:  290:{
        -:  291:#   if defined (ACE_WIN32)
        -:  292:  return ::_wmktemp (s);
        -:  293:#   else
        -:  294:  // For narrow-char filesystems, we must convert the wide-char input to
        -:  295:  // a narrow-char string for mktemp (), then convert the name back to
        -:  296:  // wide-char for the caller.
        -:  297:  ACE_Wide_To_Ascii narrow_s (s);
        -:  298:  if (::mktemp (narrow_s.char_rep ()) == 0)
        -:  299:    return 0;
        -:  300:  ACE_Ascii_To_Wide wide_s (narrow_s.char_rep ());
        -:  301:  ACE_OS::strcpy (s, wide_s.wchar_rep ());
        -:  302:  return s;
        -:  303:#   endif
        -:  304:}
        -:  305:#  endif /* ACE_HAS_WCHAR */
        -:  306:
        -:  307:# endif /* !ACE_LACKS_MKTEMP */
        -:  308:#endif /* !ACE_DISABLE_MKTEMP */
        -:  309:
        -:  310:ACE_INLINE int
        -:  311:ACE_OS::putenv (const char *string)
        -:  312:{
        -:  313:  ACE_OS_TRACE ("ACE_OS::putenv");
        -:  314:#if defined (ACE_LACKS_PUTENV) && defined (ACE_HAS_SETENV)
        -:  315:  int result = 0;
        -:  316:  char *sp = ACE_OS::strchr (const_cast <char *> (string), '=');
        -:  317:  if (sp)
        -:  318:    {
        -:  319:      char *stmp = ACE_OS::strdup (string);
        -:  320:      if (stmp)
        -:  321:        {
        -:  322:          stmp[sp - string] = '\0';
        -:  323:          result = ACE_OS::setenv (stmp, sp+sizeof (char), 1);
        -:  324:          ACE_OS::free (stmp);
        -:  325:        }
        -:  326:      else
        -:  327:        {
        -:  328:          errno = ENOMEM;
        -:  329:          result = -1;
        -:  330:        }
        -:  331:    }
        -:  332:  else
        -:  333:    {
        -:  334:      result = ACE_OS::setenv (string, "", 1);
        -:  335:    }
        -:  336:
        -:  337:  return result;
        -:  338:#elif defined (ACE_LACKS_PUTENV)
        -:  339:  ACE_UNUSED_ARG (string);
        -:  340:  ACE_NOTSUP_RETURN (0);
        -:  341:#else /* ! ACE_HAS_WINCE */
        -:  342:  ACE_OSCALL_RETURN (ACE_STD_NAMESPACE::putenv (const_cast <char *> (string)), int, -1);
        -:  343:#endif /* ACE_LACKS_PUTENV && ACE_HAS_SETENV */
        -:  344:}
        -:  345:
        -:  346:ACE_INLINE int
        -:  347:ACE_OS::setenv(const char *envname, const char *envval, int overwrite)
        -:  348:{
        -:  349:#if defined (ACE_LACKS_SETENV)
        -:  350:  ACE_UNUSED_ARG (envname);
        -:  351:  ACE_UNUSED_ARG (envval);
        -:  352:  ACE_UNUSED_ARG (overwrite);
        -:  353:  ACE_NOTSUP_RETURN (-1);
        -:  354:#else
        -:  355:  ACE_OSCALL_RETURN (ACE_STD_NAMESPACE::setenv (envname, envval, overwrite), int, -1);
        -:  356:#endif
        -:  357:}
        -:  358:
        -:  359:ACE_INLINE int
        -:  360:ACE_OS::unsetenv(const char *name)
        -:  361:{
        -:  362:#if defined (ACE_LACKS_UNSETENV)
        -:  363:  ACE_UNUSED_ARG (name);
        -:  364:  ACE_NOTSUP_RETURN (-1);
        -:  365:#else
        -:  366:# if defined (ACE_HAS_VOID_UNSETENV)
        -:  367:  ::unsetenv (name);
        -:  368:  return 0;
        -:  369:#else
        -:  370:  ACE_OSCALL_RETURN (ACE_STD_NAMESPACE::unsetenv (name), int, -1);
        -:  371:# endif /* ACE_HAS_VOID_UNSETENV */
        -:  372:#endif /* ACE_LACKS_UNSETENV */
        -:  373:}
        -:  374:
        -:  375:#if defined (ACE_HAS_WCHAR) && defined (ACE_WIN32)
        -:  376:ACE_INLINE int
        -:  377:ACE_OS::putenv (const wchar_t *string)
        -:  378:{
        -:  379:  ACE_OS_TRACE ("ACE_OS::putenv");
        -:  380:#if defined (ACE_LACKS_PUTENV)
        -:  381:  ACE_UNUSED_ARG (string);
        -:  382:  ACE_NOTSUP_RETURN (-1);
        -:  383:#else
        -:  384:  ACE_OSCALL_RETURN (::_wputenv (string), int, -1);
        -:  385:#endif /* ACE_LACKS_PUTENV */
        -:  386:}
        -:  387:#endif /* ACE_HAS_WCHAR && ACE_WIN32 */
        -:  388:
        -:  389:ACE_INLINE void
        -:  390:ACE_OS::qsort (void *base,
        -:  391:               size_t nel,
        -:  392:               size_t width,
        -:  393:               ACE_COMPARE_FUNC compar)
        -:  394:{
        -:  395:#if !defined (ACE_LACKS_QSORT)
        -:  396:  ::qsort (base, nel, width, compar);
        -:  397:#else
        -:  398:  ACE_UNUSED_ARG (base);
        -:  399:  ACE_UNUSED_ARG (nel);
        -:  400:  ACE_UNUSED_ARG (width);
        -:  401:  ACE_UNUSED_ARG (compar);
        -:  402:#endif /* !ACE_LACKS_QSORT */
        -:  403:}
        -:  404:
        -:  405:ACE_INLINE int
        -:  406:ACE_OS::rand (void)
        -:  407:{
        -:  408:  ACE_OS_TRACE ("ACE_OS::rand");
        -:  409:#if !defined (ACE_LACKS_RAND)
        -:  410:  ACE_OSCALL_RETURN (::rand (), int, -1);
        -:  411:#else
        -:  412:  ACE_NOTSUP_RETURN (-1);
        -:  413:#endif /* ACE_LACKS_RAND */
        -:  414:}
        -:  415:
        -:  416:ACE_INLINE int
        -:  417:ACE_OS::rand_r (unsigned int *seed)
        -:  418:{
        -:  419:  ACE_OS_TRACE ("ACE_OS::rand_r");
        -:  420:#if defined (ACE_LACKS_RAND_R)
        -:  421:  long new_seed = (long) *seed;
        -:  422:  if (new_seed == 0)
        -:  423:    new_seed = 0x12345987;
        -:  424:  long temp = new_seed / 127773;
        -:  425:  new_seed = 16807 * (new_seed - temp * 127773) - 2836 * temp;
        -:  426:  if (new_seed < 0)
        -:  427:    new_seed += 2147483647;
        -:  428:  *seed = (unsigned int)new_seed;
        -:  429:  return (int) (new_seed & RAND_MAX);
        -:  430:#else
        -:  431:  return ::rand_r (seed);
        -:  432:# endif /* ACE_LACKS_RAND_R */
        -:  433:}
        -:  434:
        -:  435:#  if !defined (ACE_LACKS_REALPATH)
        -:  436:ACE_INLINE char *
        -:  437:ACE_OS::realpath (const char *file_name,
        -:  438:                  char *resolved_name)
        -:  439:{
        -:  440:#    if defined (ACE_WIN32)
        -:  441:  return ::_fullpath (resolved_name, file_name, PATH_MAX);
        -:  442:#    else /* ACE_WIN32 */
        -:  443:  return ::realpath (file_name, resolved_name);
        -:  444:#    endif /* ! ACE_WIN32 */
        -:  445:}
        -:  446:
        -:  447:#  if defined (ACE_HAS_WCHAR)
        -:  448:ACE_INLINE wchar_t *
        -:  449:ACE_OS::realpath (const wchar_t *file_name,
        -:  450:                  wchar_t *resolved_name)
        -:  451:{
        -:  452:#    if defined (ACE_WIN32)
        -:  453:  return ::_wfullpath (resolved_name, file_name, PATH_MAX);
        -:  454:#    else /* ACE_WIN32 */
        -:  455:  ACE_Wide_To_Ascii n_file_name (file_name);
        -:  456:  char n_resolved[PATH_MAX];
        -:  457:  if (0 != ACE_OS::realpath (n_file_name.char_rep (), n_resolved))
        -:  458:    {
        -:  459:      ACE_Ascii_To_Wide w_resolved (n_resolved);
        -:  460:      ACE_OS::strcpy (resolved_name, w_resolved.wchar_rep ());
        -:  461:      return resolved_name;
        -:  462:    }
        -:  463:  return 0;
        -:  464:#    endif /* ! ACE_WIN32 */
        -:  465:}
        -:  466:#  endif /* ACE_HAS_WCHAR */
        -:  467:#endif /* ACE_HAS_WINCE */
        -:  468:
        -:  469:ACE_INLINE ACE_EXIT_HOOK
        -:  470:ACE_OS::set_exit_hook (ACE_EXIT_HOOK exit_hook)
        -:  471:{
        -:  472:  ACE_EXIT_HOOK old_hook = exit_hook_;
        -:  473:  exit_hook_ = exit_hook;
        -:  474:  return old_hook;
        -:  475:}
        -:  476:
        -:  477:ACE_INLINE void
        -:  478:ACE_OS::srand (u_int seed)
        -:  479:{
        -:  480:  ACE_OS_TRACE ("ACE_OS::srand");
        -:  481:#ifdef ACE_LACKS_SRAND
        -:  482:  ACE_UNUSED_ARG (seed);
        -:  483:#else
        -:  484:  ::srand (seed);
        -:  485:#endif
        -:  486:}
        -:  487:
        -:  488:#if !defined (ACE_LACKS_STRTOD)
        -:  489:ACE_INLINE double
        -:  490:ACE_OS::strtod (const char *s, char **endptr)
        -:  491:{
        -:  492:  return ::strtod (s, endptr);
        -:  493:}
        -:  494:#endif /* !ACE_LACKS_STRTOD */
        -:  495:
        -:  496:#if defined (ACE_HAS_WCHAR) && !defined (ACE_LACKS_WCSTOD)
        -:  497:ACE_INLINE double
        -:  498:ACE_OS::strtod (const wchar_t *s, wchar_t **endptr)
        -:  499:{
        -:  500:  return ACE_WCHAR_STD_NAMESPACE::wcstod (s, endptr);
        -:  501:}
        -:  502:#endif /* ACE_HAS_WCHAR && !ACE_LACKS_WCSTOD */
        -:  503:
        -:  504:ACE_INLINE long
        -:  505:ACE_OS::strtol (const char *s, char **ptr, int base)
        -:  506:{
        -:  507:#if defined (ACE_LACKS_STRTOL)
        -:  508:  return ACE_OS::strtol_emulation (s, ptr, base);
        -:  509:#else  /* ACE_LACKS_STRTOL */
        -:  510:  return ::strtol (s, ptr, base);
        -:  511:#endif /* ACE_LACKS_STRTOL */
        -:  512:}
        -:  513:
        -:  514:#if defined (ACE_HAS_WCHAR)
        -:  515:ACE_INLINE long
        -:  516:ACE_OS::strtol (const wchar_t *s, wchar_t **ptr, int base)
        -:  517:{
        -:  518:#if defined (ACE_LACKS_WCSTOL)
        -:  519:  return ACE_OS::wcstol_emulation (s, ptr, base);
        -:  520:#else
        -:  521:  return ACE_WCHAR_STD_NAMESPACE::wcstol (s, ptr, base);
        -:  522:#endif /* ACE_LACKS_WCSTOL */
        -:  523:}
        -:  524:#endif /* ACE_HAS_WCHAR */
        -:  525:
        -:  526:ACE_INLINE unsigned long
        -:  527:ACE_OS::strtoul (const char *s, char **ptr, int base)
        -:  528:{
        -:  529:#if defined (ACE_LACKS_STRTOUL)
        -:  530:  return ACE_OS::strtoul_emulation (s, ptr, base);
        -:  531:#else /* ACE_LACKS_STRTOUL */
        -:  532:  return ::strtoul (s, ptr, base);
        -:  533:#endif /* ACE_LACKS_STRTOUL */
        -:  534:}
        -:  535:
        -:  536:#if defined (ACE_HAS_WCHAR)
        -:  537:ACE_INLINE unsigned long
        -:  538:ACE_OS::strtoul (const wchar_t *s, wchar_t **ptr, int base)
        -:  539:{
        -:  540:#if defined (ACE_LACKS_WCSTOUL)
        -:  541:  return ACE_OS::wcstoul_emulation (s, ptr, base);
        -:  542:#else
        -:  543:  return ACE_WCHAR_STD_NAMESPACE::wcstoul (s, ptr, base);
        -:  544:#endif /* ACE_LACKS_WCSTOUL */
        -:  545:}
        -:  546:#endif /* ACE_HAS_WCHAR */
        -:  547:
        -:  548:ACE_INLINE ACE_INT64
        -:  549:ACE_OS::strtoll (const char *s, char **ptr, int base)
        -:  550:{
        -:  551:#if defined (ACE_LACKS_STRTOLL)
        -:  552:  return ACE_OS::strtoll_emulation (s, ptr, base);
        -:  553:#elif defined (ACE_STRTOLL_EQUIVALENT)
        -:  554:  return ACE_STRTOLL_EQUIVALENT (s, ptr, base);
        -:  555:#else
        -:  556:  return ace_strtoll_helper (s, ptr, base);
        -:  557:#endif /* ACE_LACKS_STRTOLL */
        -:  558:}
        -:  559:
        -:  560:#if defined (ACE_HAS_WCHAR)
        -:  561:ACE_INLINE ACE_INT64
        -:  562:ACE_OS::strtoll (const wchar_t *s, wchar_t **ptr, int base)
        -:  563:{
        -:  564:#if defined (ACE_LACKS_WCSTOLL)
        -:  565:  return ACE_OS::wcstoll_emulation (s, ptr, base);
        -:  566:#elif defined (ACE_WCSTOLL_EQUIVALENT)
        -:  567:  return ACE_WCSTOLL_EQUIVALENT (s, ptr, base);
        -:  568:#else
        -:  569:  return ACE_WCHAR_STD_NAMESPACE::wcstoll (s, ptr, base);
        -:  570:#endif /* ACE_LACKS_WCSTOLL */
        -:  571:}
        -:  572:#endif /* ACE_HAS_WCHAR */
        -:  573:
        -:  574:ACE_INLINE ACE_UINT64
        -:  575:ACE_OS::strtoull (const char *s, char **ptr, int base)
        -:  576:{
        -:  577:#if defined (ACE_LACKS_STRTOULL)
        -:  578:  return ACE_OS::strtoull_emulation (s, ptr, base);
        -:  579:#elif defined (ACE_STRTOULL_EQUIVALENT)
        -:  580:  return ACE_STRTOULL_EQUIVALENT (s, ptr, base);
        -:  581:#else
        -:  582:  return ace_strtoull_helper (s, ptr, base);
        -:  583:#endif /* ACE_LACKS_STRTOULL */
        -:  584:}
        -:  585:
        -:  586:#if defined (ACE_HAS_WCHAR)
        -:  587:ACE_INLINE ACE_UINT64
        -:  588:ACE_OS::strtoull (const wchar_t *s, wchar_t **ptr, int base)
        -:  589:{
        -:  590:#if defined (ACE_LACKS_WCSTOULL)
        -:  591:  return ACE_OS::wcstoull_emulation (s, ptr, base);
        -:  592:#elif defined (ACE_WCSTOULL_EQUIVALENT)
        -:  593:  return ACE_WCSTOULL_EQUIVALENT (s, ptr, base);
        -:  594:#else
        -:  595:  return ACE_WCHAR_STD_NAMESPACE::wcstoull (s, ptr, base);
        -:  596:#endif /* ACE_LACKS_WCSTOULL */
        -:  597:}
        -:  598:#endif /* ACE_HAS_WCHAR */
        -:  599:
        -:  600:ACE_INLINE int
        -:  601:ACE_OS::system (const ACE_TCHAR *s)
        -:  602:{
        -:  603:  // ACE_OS_TRACE ("ACE_OS::system");
        -:  604:#if defined (ACE_LACKS_SYSTEM)
        -:  605:  ACE_UNUSED_ARG (s);
        -:  606:  ACE_NOTSUP_RETURN (-1);
        -:  607:#elif defined (ACE_WIN32) && defined (ACE_USES_WCHAR)
        -:  608:  ACE_OSCALL_RETURN (::_wsystem (s), int, -1);
        -:  609:#else
        -:  610:  ACE_OSCALL_RETURN (::system (ACE_TEXT_ALWAYS_CHAR (s)), int, -1);
        -:  611:#endif /* ACE_LACKS_SYSTEM */
        -:  612:}
        -:  613:
        -:  614:ACE_INLINE const char*
        -:  615:ACE_OS::getprogname ()
        -:  616:{
        -:  617:#if defined (ACE_HAS_GETPROGNAME)
        -:  618:  return ::getprogname ();
        -:  619:#else
        -:  620:  return ACE_OS::getprogname_emulation ();
        -:  621:#endif /* ACE_HAS_GETPROGNAME */
        -:  622:}
        -:  623:
        -:  624:ACE_INLINE void
        -:  625:ACE_OS::setprogname (const char* name)
        -:  626:{
        -:  627:#if defined (ACE_HAS_SETPROGNAME)
        -:  628:  ::setprogname (name);
        -:  629:#else
        -:  630:  ACE_OS::setprogname_emulation (name);
        -:  631:#endif /* ACE_HAS_SETPROGNAME */
        -:  632:}
        -:  633:
        -:  634:ACE_END_VERSIONED_NAMESPACE_DECL
