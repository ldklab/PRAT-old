        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/TAO/tao/Seq_Var_T.cpp
        -:    0:Programs:70
        -:    1:// $Id$
        -:    2:
        -:    3:#ifndef TAO_SEQ_VAR_T_CPP
        -:    4:#define TAO_SEQ_VAR_T_CPP
        -:    5:
        -:    6:#include "tao/Seq_Var_T.h"
        -:    7:
        -:    8:#if !defined (__ACE_INLINE__)
        -:    9:#include "tao/Seq_Var_T.inl"
        -:   10:#endif /* __ACE_INLINE__ */
        -:   11:
        -:   12:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   13:
        -:   14:template<typename T>
        6:   15:TAO_Seq_Var_Base_T<T>::TAO_Seq_Var_Base_T (
        -:   16:    const TAO_Seq_Var_Base_T<T> & p)
       6*:   17:  : ptr_ (p.ptr_ ? new T (*p.ptr_) : 0)
        -:   18:{
        6:   19:}
        -:   20:
        -:   21:// ****************************************************************************
        -:   22:
        -:   23:template<typename T>
        -:   24:TAO_FixedSeq_Var_T<T> &
    #####:   25:TAO_FixedSeq_Var_T<T>::operator= (
        -:   26:    const TAO_FixedSeq_Var_T<T> & p)
        -:   27:{
        -:   28:  // Strongly exception safe assignment using copy and non-throwing
        -:   29:  // swap technique.
    #####:   30:  TAO_FixedSeq_Var_T<T> tmp (p);
        -:   31:
    #####:   32:  T * old_ptr = this->ptr_;
    #####:   33:  this->ptr_ = tmp.ptr_;
    #####:   34:  tmp.ptr_ = old_ptr;
        -:   35:
    #####:   36:  return *this;
        -:   37:}
        -:   38:
        -:   39:// Fixed-size types only.
        -:   40:template<typename T>
        -:   41:TAO_FixedSeq_Var_T<T> &
        -:   42:TAO_FixedSeq_Var_T<T>::operator= (const T & p)
        -:   43:{
        -:   44:  // Strongly exception safe assignment using copy and non-throwing
        -:   45:  // swap technique.
        -:   46:  TAO_FixedSeq_Var_T<T> tmp (p);
        -:   47:
        -:   48:  T * old_ptr = this->ptr_;
        -:   49:  this->ptr_ = tmp.ptr_;
        -:   50:  tmp.ptr_ = old_ptr;
        -:   51:
        -:   52:  return *this;
        -:   53:}
        -:   54:
        -:   55:// ****************************************************************************
        -:   56:
        -:   57:template<typename T>
        -:   58:TAO_VarSeq_Var_T<T> &
        -:   59:TAO_VarSeq_Var_T<T>::operator= (const TAO_VarSeq_Var_T<T> & p)
        -:   60:{
        -:   61:  // Strongly exception safe assignment using copy and non-throwing
        -:   62:  // swap technique.
        -:   63:  TAO_VarSeq_Var_T<T> tmp (p);
        -:   64:
        -:   65:  T * old_ptr = this->ptr_;
        -:   66:  this->ptr_ = tmp.ptr_;
        -:   67:  tmp.ptr_ = old_ptr;
        -:   68:
        -:   69:  return *this;
        -:   70:}
        -:   71:
        -:   72:TAO_END_VERSIONED_NAMESPACE_DECL
        -:   73:
        -:   74:#endif /* TAO_SEQ_VAR_T_CPP */
