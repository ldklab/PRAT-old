        -:    0:Source:../dds/DCPS/Util.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef OPENDDS_DCPS_UTIL_H
        -:    9:#define OPENDDS_DCPS_UTIL_H
        -:   10:
        -:   11:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   12:
        -:   13:namespace OpenDDS {
        -:   14:namespace DCPS {
        -:   15:
        -:   16:// bind reproduces the ACE_Hash_Map_Manager_Ex's bind behavior
        -:   17:template <typename Container, typename FirstType, typename SecondType>
    #####:   18:int bind(
        -:   19:  Container& c,
        -:   20:  const FirstType& first,
        -:   21:  const SecondType& second)
        -:   22:{
    #####:   23:  if (c.find(first) == c.end()) {
        -:   24:    typedef typename Container::value_type container_value_type;
        -:   25:
    #####:   26:    if (c.insert(container_value_type(first, second)).second) {
    #####:   27:      return 0;
        -:   28:    }
        -:   29:
    #####:   30:    return -1;
        -:   31:  }
        -:   32:
    #####:   33:  return 1;
        -:   34:}
        -:   35:
        -:   36:// unbind reproduces the ACE_Hash_Map_Manager_Ex's unbind behavior
        -:   37:template <typename Container>
        -:   38:int unbind(
        -:   39:  Container& c,
        -:   40:  const typename Container::key_type& k,
        -:   41:  typename Container::mapped_type& v)
        -:   42:{
        -:   43:  typename Container::const_iterator iter = c.find(k);
        -:   44:
        -:   45:  if (iter != c.end()) {
        -:   46:    v = iter->second;
        -:   47:
        -:   48:    if (c.erase(k) == 1) {
        -:   49:      return 0;
        -:   50:    }
        -:   51:
        -:   52:    return -1;
        -:   53:  }
        -:   54:
        -:   55:  return -1;
        -:   56:}
        -:   57:
        -:   58:// unbind reproduces the ACE_Hash_Map_Manager_Ex's unbind behavior
        -:   59:template <typename Container>
        -:   60:int unbind(
        -:   61:  Container& c,
        -:   62:  const typename Container::key_type& k)
        -:   63:{
        -:   64:  typename Container::mapped_type v;
        -:   65:  return unbind(c, k, v);
        -:   66:}
        -:   67:
        -:   68:template <typename Container, typename Key>
        -:   69:int find(
        -:   70:  Container& c,
        -:   71:  const Key& key,
        -:   72:  typename Container::mapped_type*& value)
        -:   73:{
        -:   74:  typename Container::iterator iter =
        -:   75:    c.find(key);
        -:   76:
        -:   77:  if (iter == c.end()) {
        -:   78:    return -1;
        -:   79:  }
        -:   80:
        -:   81:  value = &iter->second;
        -:   82:  return 0;
        -:   83:}
        -:   84:
        -:   85:template <typename Container, typename Key>
        -:   86:int find(
        -:   87:  const Container& c,
        -:   88:  const Key& key,
        -:   89:  typename Container::mapped_type& value)
        -:   90:{
        -:   91:  typename Container::const_iterator iter =
        -:   92:    c.find(key);
        -:   93:
        -:   94:  if (iter == c.end()) {
        -:   95:    return -1;
        -:   96:  }
        -:   97:
        -:   98:  value = iter->second;
        -:   99:  return 0;
        -:  100:}
        -:  101:
        -:  102:template <typename Container, typename ValueType>
        -:  103:int insert(
        -:  104:  Container& c,
        -:  105:  const ValueType& v)
        -:  106:{
        -:  107:  if (c.find(v) == c.end()) {
        -:  108:    if (c.insert(v).second) {
        -:  109:      return 0;
        -:  110:    }
        -:  111:
        -:  112:    return -1;
        -:  113:  }
        -:  114:
        -:  115:  return 1;
        -:  116:}
        -:  117:
        -:  118:template <typename Container, typename ValueType>
        -:  119:int remove(
        -:  120:  Container& c,
        -:  121:  const ValueType& v)
        -:  122:{
        -:  123:  if (c.find(v) != c.end()) {
        -:  124:    if (c.erase(v) == 1) {
        -:  125:      return 0;
        -:  126:    }
        -:  127:
        -:  128:    return -1;
        -:  129:  }
        -:  130:
        -:  131:  return -1;
        -:  132:}
        -:  133:
        -:  134:/// std::vector-style push_back() for CORBA Sequences
        -:  135:template <typename Seq>
    #####:  136:void push_back(Seq& seq, const typename Seq::value_type& val)
        -:  137:{
    #####:  138:  const CORBA::ULong len = seq.length();
    #####:  139:  seq.length(len + 1);
    #####:  140:  seq[len] = val;
    #####:  141:}
        -:  142:
        -:  143:
        -:  144:} // namespace DCPS
        -:  145:} // namespace OpenDDS
        -:  146:
        -:  147:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  148:
        -:  149:#endif /* OPENDDS_DCPS_UTIL_H */
