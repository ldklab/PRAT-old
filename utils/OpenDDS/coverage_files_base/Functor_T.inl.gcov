        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/Functor_T.inl
        -:    0:Programs:70
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id$
        -:    4:
        -:    5:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:    6:
        -:    7:template<class RECEIVER> ACE_INLINE
        -:    8:ACE_Member_Function_Command<RECEIVER>::
        -:    9:ACE_Member_Function_Command (RECEIVER &recvr, PTMF ptmf)
        -:   10:  : receiver_(recvr)
        -:   11:  , ptmf_(ptmf)
        -:   12:{
        -:   13:}
        -:   14:
        -:   15:template<class RECEIVER> ACE_INLINE
        -:   16:ACE_Member_Function_Command<RECEIVER>::
        -:   17:~ACE_Member_Function_Command (void)
        -:   18:{
        -:   19:}
        -:   20:
        -:   21:template<class RECEIVER> ACE_INLINE int
        -:   22:ACE_Member_Function_Command<RECEIVER>::execute (void *)
        -:   23:{
        -:   24:  (this->receiver_.*ptmf_)();
        -:   25:  return 0;
        -:   26:}
        -:   27:
        -:   28:template <class TYPE> ACE_INLINE unsigned long
    #####:   29:ACE_Hash<TYPE>::operator () (const TYPE &t) const
        -:   30:{
    #####:   31:  return t.hash ();
        -:   32:}
        -:   33:
        -:   34:template <class TYPE> ACE_INLINE unsigned long
        -:   35:ACE_Pointer_Hash<TYPE>::operator () (TYPE t) const
        -:   36:{
        -:   37:#if defined (ACE_WIN64)
        -:   38:  // The cast below is legit... we only want a hash, and need not convert
        -:   39:  // the hash back to a pointer.
        -:   40:#  pragma warning(push)
        -:   41:#  pragma warning(disable : 4311)   /* Truncate pointer to unsigned long */
        -:   42:#endif /* ACE_WIN64 */
        -:   43:  return ACE_Utils::truncate_cast<unsigned long> ((intptr_t)t);
        -:   44:#if defined (ACE_WIN64)
        -:   45:#  pragma warning(pop)
        -:   46:#endif /* ACE_WIN64 */
        -:   47:}
        -:   48:
        -:   49:template <class TYPE> ACE_INLINE bool
    #####:   50:ACE_Equal_To<TYPE>::operator () (const TYPE &lhs,
        -:   51:                                 const TYPE &rhs) const
        -:   52:{
    #####:   53:  return lhs == rhs;
        -:   54:}
        -:   55:
        -:   56:template <class TYPE> ACE_INLINE bool
        -:   57:ACE_Less_Than<TYPE>::operator () (const TYPE &lhs,
        -:   58:                                  const TYPE &rhs) const
        -:   59:{
        -:   60:  return lhs < rhs;
        -:   61:}
        -:   62:
        -:   63:ACE_END_VERSIONED_NAMESPACE_DECL
