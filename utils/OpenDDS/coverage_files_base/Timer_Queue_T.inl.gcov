        -:    0:Source:/home/ryan/git/TARGETS/OpenDDS-debloat/ACE_wrappers/ace/Timer_Queue_T.inl
        -:    0:Programs:51
        -:    1:// -*- C++ -*-
        -:    2://
        -:    3:// $Id$
        -:    4:
        -:    5:ACE_BEGIN_VERSIONED_NAMESPACE_DECL
        -:    6:
        -:    7:template <class TYPE, class FUNCTOR> ACE_INLINE FUNCTOR &
    #####:    8:ACE_Timer_Queue_Upcall_Base<TYPE, FUNCTOR>::upcall_functor (void)
        -:    9:{
    #####:   10:  return *this->upcall_functor_;
        -:   11:}
        -:   12:
        -:   13:template <class TYPE, class FUNCTOR, class ACE_LOCK, typename TIME_POLICY> ACE_INLINE void
        -:   14:ACE_Timer_Queue_T<TYPE, FUNCTOR, ACE_LOCK, TIME_POLICY>::timer_skew (const ACE_Time_Value &skew)
        -:   15:{
        -:   16:  timer_skew_ = skew;
        -:   17:}
        -:   18:
        -:   19:template <class TYPE, class FUNCTOR, class ACE_LOCK, typename TIME_POLICY> ACE_INLINE const ACE_Time_Value &
    #####:   20:ACE_Timer_Queue_T<TYPE, FUNCTOR, ACE_LOCK, TIME_POLICY>::timer_skew (void) const
        -:   21:{
    #####:   22:  return timer_skew_;
        -:   23:}
        -:   24:
        -:   25:template <class TYPE, class FUNCTOR, class ACE_LOCK, typename TIME_POLICY> int
    #####:   26:ACE_Timer_Queue_T<TYPE, FUNCTOR, ACE_LOCK, TIME_POLICY>::dispatch_info (const ACE_Time_Value &cur_time,
        -:   27:                                                           ACE_Timer_Node_Dispatch_Info_T<TYPE> &info)
        -:   28:{
        -:   29:  ACE_TRACE ("ACE_Timer_Queue_T::dispatch_info");
    #####:   30:  ACE_MT (ACE_GUARD_RETURN (ACE_LOCK, ace_mon, this->mutex_, 0));
        -:   31:
    #####:   32:  return this->dispatch_info_i (cur_time, info);
        -:   33:}
        -:   34:
        -:   35:template <class TYPE, class FUNCTOR, class ACE_LOCK, typename TIME_POLICY> ACE_INLINE void
    #####:   36:ACE_Timer_Queue_T<TYPE, FUNCTOR, ACE_LOCK, TIME_POLICY>::upcall (ACE_Timer_Node_Dispatch_Info_T<TYPE> &info,
        -:   37:                                                    const ACE_Time_Value &cur_time)
        -:   38:{
    #####:   39:  this->upcall_functor ().timeout (*this,
        -:   40:                                   info.type_,
        -:   41:                                   info.act_,
        -:   42:                                   info.recurring_timer_,
        -:   43:                                   cur_time);
    #####:   44:}
        -:   45:
        -:   46:template <class TYPE, class FUNCTOR, class ACE_LOCK, typename TIME_POLICY> ACE_INLINE void
    #####:   47:ACE_Timer_Queue_T<TYPE, FUNCTOR, ACE_LOCK, TIME_POLICY>::preinvoke (ACE_Timer_Node_Dispatch_Info_T<TYPE> &info,
        -:   48:                                                       const ACE_Time_Value &cur_time,
        -:   49:                                                       const void *&upcall_act)
        -:   50:{
    #####:   51:  this->upcall_functor ().preinvoke (*this,
        -:   52:                                     info.type_,
        -:   53:                                     info.act_,
        -:   54:                                     info.recurring_timer_,
        -:   55:                                     cur_time,
        -:   56:                                     upcall_act);
    #####:   57:}
        -:   58:
        -:   59:template <class TYPE, class FUNCTOR, class ACE_LOCK, typename TIME_POLICY> ACE_INLINE void
    #####:   60:ACE_Timer_Queue_T<TYPE, FUNCTOR, ACE_LOCK, TIME_POLICY>::postinvoke (ACE_Timer_Node_Dispatch_Info_T<TYPE> &info,
        -:   61:                                                        const ACE_Time_Value &cur_time,
        -:   62:                                                        const void *upcall_act)
        -:   63:{
    #####:   64:  this->upcall_functor ().postinvoke (*this,
        -:   65:                                      info.type_,
        -:   66:                                      info.act_,
        -:   67:                                      info.recurring_timer_,
        -:   68:                                      cur_time,
        -:   69:                                      upcall_act);
    #####:   70:}
        -:   71:
        -:   72:template <class TYPE, class FUNCTOR, class ACE_LOCK, typename TIME_POLICY> ACE_INLINE ACE_Time_Value
    #####:   73:ACE_Timer_Queue_T<TYPE, FUNCTOR, ACE_LOCK, TIME_POLICY>::gettimeofday_static (void)
        -:   74:{
        -:   75:  // Get the current time according to the time policy.
    #####:   76:  return this->time_policy_ ();
        -:   77:}
        -:   78:
        -:   79:template <class TYPE, class FUNCTOR, class ACE_LOCK, typename TIME_POLICY> ACE_INLINE void
        -:   80:ACE_Timer_Queue_T<TYPE, FUNCTOR, ACE_LOCK, TIME_POLICY>::set_time_policy (TIME_POLICY const & rhs)
        -:   81:{
        -:   82:  this->time_policy_ = rhs;
        -:   83:}
        -:   84:
        -:   85:ACE_END_VERSIONED_NAMESPACE_DECL
