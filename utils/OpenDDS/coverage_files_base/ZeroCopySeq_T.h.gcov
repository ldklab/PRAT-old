        -:    0:Source:../dds/DCPS/ZeroCopySeq_T.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef ZEROCOPYSEQ_H
        -:    9:#define ZEROCOPYSEQ_H
        -:   10:
        -:   11:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   12:# pragma once
        -:   13:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   14:
        -:   15:#include /**/ "ace/pre.h"
        -:   16:
        -:   17:#include "dds/DCPS/ZeroCopySeqBase.h"
        -:   18:#include "dds/DCPS/ZeroCopyAllocator_T.h"
        -:   19:#include <ace/Vector_T.h>
        -:   20:
        -:   21:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   22:
        -:   23:namespace OpenDDS {
        -:   24:namespace DCPS {
        -:   25:
        -:   26:class DataReaderImpl;
        -:   27:class ReceivedDataElement;
        -:   28:
        -:   29:} // namespace DCPS
        -:   30:} // namespace OpenDDS
        -:   31:
        -:   32:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:   33:
        -:   34:
        -:   35:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   36:
        -:   37://This must stay in namespace "TAO" until the tao_idl compiler is changed
        -:   38:namespace TAO {
        -:   39:namespace DCPS {
        -:   40:
        -:   41:/**
        -:   42:* Provides [] operators returning sample references
        -:   43:*     but it is implemented as
        -:   44:*     an "array" of pointers to the samples so they can be
        -:   45:*     "loaned" to the application code.
        -:   46:*
        -:   47:* Design Goals:
        -:   48:*  - Provide enhanced performance known as "zero-copy" in the DDS spec
        -:   49:*  - Conform to the C++ CORBA mapping for sequences
        -:   50:*    - When necessary, certain uncommon sequence operations (resize,
        -:   51:*      get_buffer, replace) will cause copies.  Performance impacts are
        -:   52:*      noted in comments on the individual methods.
        -:   53:*/
        -:   54:template <class Sample_T, size_t DEF_MAX = DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE>
        -:   55:class ZeroCopyDataSeq {
        -:   56:public:
        -:   57:
        -:   58:  typedef Sample_T value_type;
        -:   59:
        -:   60:  /**
        -:   61:  * Construct a sequence of sample data values that supports
        -:   62:  * zero-copy reads.
        -:   63:  *
        -:   64:  * @param maximum Maximum number of samples to insert into the sequence.
        -:   65:  *                If == 0 then use zero-copy reading.
        -:   66:  *                Defaults to zero hence supporting zero-copy reads/takes.
        -:   67:  *
        -:   68:  * @param init_size Initial size of the underlying array of pointers.
        -:   69:  *
        -:   70:  * @param alloc The allocator used to allocate the array of pointers
        -:   71:  *              to samples. If zero then use the default allocator.
        -:   72:  *
        -:   73:  * This constructor also serves as the "maximum" ctor and default ctor
        -:   74:  * in the CORBA spec.
        -:   75:  */
        -:   76:  explicit ZeroCopyDataSeq(CORBA::ULong maximum = 0,
        -:   77:                           CORBA::ULong init_size = DEF_MAX, ACE_Allocator* alloc = 0);
        -:   78:
        -:   79:  ZeroCopyDataSeq(CORBA::ULong maximum, CORBA::ULong length,
        -:   80:                  Sample_T* buffer, CORBA::Boolean release = false);
        -:   81:
        -:   82:  ZeroCopyDataSeq(const ZeroCopyDataSeq& frm);
        -:   83:
        -:   84:  ZeroCopyDataSeq& operator=(const ZeroCopyDataSeq& frm);
        -:   85:
        -:   86:  void swap(ZeroCopyDataSeq& frm);
        -:   87:
        -:   88:  ~ZeroCopyDataSeq();
        -:   89:
        -:   90:  CORBA::ULong maximum() const;
        -:   91:
        -:   92:  /** Performance note: increasing the length of a zero-copy sequence past
        -:   93:   *  its current length may cause a copy (the sequence will no longer be
        -:   94:   *  zero-copy enabled).
        -:   95:   */
        -:   96:  void length(CORBA::ULong length);
        -:   97:  CORBA::ULong length() const;
        -:   98:
        -:   99:  const Sample_T& operator[](CORBA::ULong i) const;
        -:  100:  Sample_T& operator[](CORBA::ULong i);
        -:  101:
        -:  102:  CORBA::Boolean release() const;
        -:  103:
        -:  104:  void replace(CORBA::ULong max, CORBA::ULong length, Sample_T* buffer,
        -:  105:               CORBA::Boolean release = false);
        -:  106:
        -:  107:  Sample_T* get_buffer(CORBA::Boolean orphan = false);
        -:  108:  const Sample_T* get_buffer() const;
        -:  109:
        -:  110:  static Sample_T* allocbuf(CORBA::ULong nelems);
        -:  111:  static void freebuf(Sample_T* buffer);
        -:  112:
        -:  113:  void increment_references(void);
        -:  114:
        -:  115:  ///Only used by the FooDataReaderImpl and tests
        -:  116:  class PrivateMemberAccess {
        -:  117:  public:
    #####:  118:    explicit PrivateMemberAccess(ZeroCopyDataSeq& seq)
    #####:  119:        : seq_(seq) {}
        -:  120:
    #####:  121:    CORBA::ULong max_slots() const {
    #####:  122:      return seq_.max_slots();
        -:  123:    }
        -:  124:
    #####:  125:    void internal_set_length(CORBA::ULong len) {
    #####:  126:      seq_.internal_set_length(len);
    #####:  127:    }
        -:  128:
    #####:  129:    void set_loaner(::OpenDDS::DCPS::DataReaderImpl* loaner) {
    #####:  130:      seq_.set_loaner(loaner);
    #####:  131:    }
        -:  132:
    #####:  133:    void assign_ptr(CORBA::ULong ii, OpenDDS::DCPS::ReceivedDataElement* item) {
    #####:  134:      seq_.assign_ptr(ii, item);
    #####:  135:    }
        -:  136:
        -:  137:    OpenDDS::DCPS::ReceivedDataElement* get_ptr(CORBA::ULong ii) const {
        -:  138:      return seq_.get_ptr(ii);
        -:  139:    }
        -:  140:
    #####:  141:    void assign_sample(CORBA::ULong ii, const Sample_T& sample) {
    #####:  142:      seq_.assign_sample(ii, sample);
    #####:  143:    }
        -:  144:
        -:  145:  private:
        -:  146:    ZeroCopyDataSeq& seq_;
        -:  147:  };
        -:  148:  friend class PrivateMemberAccess;
        -:  149:
        -:  150:private:
        -:  151:
        -:  152:  /**
        -:  153:   * In some versions of ACE, ACE_Vector doesn't have a working swap()
        -:  154:    * function, so we have to provide our own.
        -:  155:    *
        -:  156:    * This version also provides public access to the allocator_ member,
        -:  157:    * something the ACE_Vector doesn't do
        -:  158:    */
    #####:  159:  class ZeroCopyVector
        -:  160:        : public ACE_Vector<OpenDDS::DCPS::ReceivedDataElement*, DEF_MAX> {
        -:  161:  public:
        -:  162:    ZeroCopyVector(const size_t init_size = DEF_MAX, ACE_Allocator* alloc = 0);
        -:  163:
        -:  164:    void swap(ZeroCopyVector&);
        -:  165:
        -:  166:    typedef ACE_Vector<OpenDDS::DCPS::ReceivedDataElement*, DEF_MAX> BASE;
        -:  167:    using BASE::allocator_;
        -:  168:    using BASE::array_;
        -:  169:  };
        -:  170:
        -:  171:  /**
        -:  172:  * Current allocated number of sample slots.
        -:  173:  *
        -:  174:  * @note The DDS specification's use of maximum=0 to designate
        -:  175:  *       zero-copy read request requires some
        -:  176:  *       way of knowing the internally allocated slots
        -:  177:  *       for sample pointers that is not "maximum".
        -:  178:  */
        -:  179:  CORBA::ULong max_slots() const;
        -:  180:
        -:  181:  void internal_set_length(CORBA::ULong len);
        -:  182:
        -:  183:  void set_loaner(OpenDDS::DCPS::DataReaderImpl* loaner);
        -:  184:
        -:  185:  void assign_ptr(CORBA::ULong ii, OpenDDS::DCPS::ReceivedDataElement* item);
        -:  186:
        -:  187:  OpenDDS::DCPS::ReceivedDataElement* get_ptr(CORBA::ULong ii) const;
        -:  188:
        -:  189:  void assign_sample(CORBA::ULong ii, const Sample_T& sample);
        -:  190:
        -:  191:  bool is_zero_copy() const;
        -:  192:
        -:  193:  void make_single_copy(CORBA::ULong maximum);
        -:  194:
        -:  195:  /// The loaner that loaned its samples.
        -:  196:  OpenDDS::DCPS::DataReaderImpl* loaner_;
        -:  197:
        -:  198:  /// the default allocator
        -:  199:  OpenDDS::DCPS::FirstTimeFastAllocator<OpenDDS::DCPS::ReceivedDataElement*, DEF_MAX>
        -:  200:  default_allocator_;
        -:  201:
        -:  202:  typedef ZeroCopyVector Ptr_Seq_Type;
        -:  203:
        -:  204:  /// array of pointers if the sequence is supporting zero-copy reads
        -:  205:  Ptr_Seq_Type ptrs_;
        -:  206:  static Sample_T default_;
        -:  207:
        -:  208:  //single-copy (aka non-zero-copy) support
        -:  209:  CORBA::ULong sc_maximum_;
        -:  210:  CORBA::ULong sc_length_;
        -:  211:  mutable Sample_T* sc_buffer_;
        -:  212:  mutable CORBA::Boolean sc_release_;
        -:  213:
        -:  214:}; // class ZeroCopyDataSeq
        -:  215:
        -:  216:} // namespace DCPS
        -:  217:} // namespace TAO
        -:  218:
        -:  219:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  220:
        -:  221:#if defined (__ACE_INLINE__)
        -:  222:#include "dds/DCPS/ZeroCopySeq_T.inl"
        -:  223:#endif /* __ACE_INLINE__ */
        -:  224:
        -:  225:#if defined (ACE_TEMPLATES_REQUIRE_SOURCE)
        -:  226:#include "dds/DCPS/ZeroCopySeq_T.cpp"
        -:  227:#endif /* ACE_TEMPLATES_REQUIRE_SOURCE */
        -:  228:
        -:  229:#if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
        -:  230:#pragma message ("ZeroCopySeq_T.cpp template inst")
        -:  231:#pragma implementation ("ZeroCopySeq_T.cpp")
        -:  232:#endif /* ACE_TEMPLATES_REQUIRE_PRAGMA */
        -:  233:
        -:  234:#include /**/ "ace/post.h"
        -:  235:
        -:  236:#endif /* ZEROCOPYSEQ_H  */
