        -:    0:Source:/home/ryan/git/OpenDDS-debloat/ACE_wrappers/TAO/tao/Unbounded_Object_Reference_Sequence_T.h
        -:    0:Programs:70
        -:    1:#ifndef guard_unbounded_object_reference_sequence_hpp
        -:    2:#define guard_unbounded_object_reference_sequence_hpp
        -:    3:/**
        -:    4: * @file
        -:    5: *
        -:    6: * @brief Implement unbounded sequences for object references.
        -:    7: *
        -:    8: * $Id: Unbounded_Object_Reference_Sequence_T.h 1861 2011-08-31 16:18:08Z mesnierp $
        -:    9: *
        -:   10: * @author Carlos O'Ryan
        -:   11: */
        -:   12:#include "Unbounded_Reference_Allocation_Traits_T.h"
        -:   13:#include "Object_Reference_Traits_T.h"
        -:   14:#include "Generic_Sequence_T.h"
        -:   15:#include "Object_Reference_Sequence_Element_T.h"
        -:   16:#include "Object_Reference_Const_Sequence_Element_T.h"
        -:   17:#include "tao/MM_Sequence_Iterator_T.h"
        -:   18:
        -:   19:TAO_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   20:
        -:   21:namespace TAO
        -:   22:{
        -:   23:
        -:   24:template<typename object_t, typename object_t_var>
        -:   25:class unbounded_object_reference_sequence
        -:   26:{
        -:   27:public:
        -:   28:  typedef object_t object_type;
        -:   29:  typedef object_type * value_type;
        -:   30:  typedef value_type const const_value_type;
        -:   31:  typedef ::CORBA::ULong size_type;
        -:   32:
        -:   33:  typedef details::object_reference_traits<object_type,object_t_var,true> element_traits;
        -:   34:  typedef details::unbounded_reference_allocation_traits<value_type,element_traits,true> allocation_traits;
        -:   35:
        -:   36:  typedef details::object_reference_sequence_element<element_traits> element_type;
        -:   37:  typedef details::object_reference_const_sequence_element<element_traits> const_element_type;
        -:   38:  typedef element_type subscript_type;
        -:   39:  typedef value_type const & const_subscript_type;
        -:   40:
        -:   41:  typedef details::generic_sequence<value_type, allocation_traits, element_traits> implementation_type;
        -:   42:
        -:   43:  inline unbounded_object_reference_sequence()
        -:   44:    : impl_()
        -:   45:  {}
        -:   46:  inline explicit unbounded_object_reference_sequence(CORBA::ULong maximum)
        -:   47:    : impl_(maximum)
        -:   48:  {}
        -:   49:  inline unbounded_object_reference_sequence(
        -:   50:      CORBA::ULong maximum,
        -:   51:      CORBA::ULong length,
        -:   52:      value_type * data,
        -:   53:      CORBA::Boolean release)
        -:   54:    : impl_(maximum, length, data, release)
        -:   55:  {}
        -:   56:
        -:   57:  /// @copydoc TAO::details::generic_sequence::maximum()
        -:   58:  inline CORBA::ULong maximum() const {
        -:   59:    return impl_.maximum();
        -:   60:  }
        -:   61:  /// @copydoc TAO::details::generic_sequence::release()
    #####:   62:  inline CORBA::Boolean release() const {
    #####:   63:    return impl_.release();
        -:   64:  }
        -:   65:  /// @copydoc TAO::details::generic_sequence::length()
    #####:   66:  inline CORBA::ULong length() const {
    #####:   67:    return impl_.length();
        -:   68:  }
        -:   69:
        -:   70:  /// @copydoc TAO::details::generic_sequence::length()
    #####:   71:  inline void length(CORBA::ULong length) {
    #####:   72:    impl_.length(length);
    #####:   73:  }
        -:   74:  /// @copydoc TAO::details::generic_sequence::operator[]
    #####:   75:  inline const_element_type operator[](CORBA::ULong i) const {
    #####:   76:    return const_element_type (impl_[i], release());
        -:   77:  }
        -:   78:  /// @copydoc TAO::details::generic_sequence::operator[]
    #####:   79:  inline element_type operator[](CORBA::ULong i) {
    #####:   80:    return element_type(impl_[i], release());
        -:   81:  }
        -:   82:  /// @copydoc TAO::details::generic_sequence::get_buffer()
        -:   83:  inline value_type const * get_buffer() const {
        -:   84:    return impl_.get_buffer();
        -:   85:  }
        -:   86:  /// @copydoc TAO::details::generic_sequence::replace()
        -:   87:  inline void replace(
        -:   88:      CORBA::ULong maximum,
        -:   89:      CORBA::ULong length,
        -:   90:      value_type * data,
        -:   91:      CORBA::Boolean release = false) {
        -:   92:    impl_.replace(maximum, length, data, release);
        -:   93:  }
        -:   94:  /// @copydoc TAO::details::generic_sequence::get_buffer(CORBA::Boolean)
        -:   95:  inline value_type * get_buffer(CORBA::Boolean orphan = false) {
        -:   96:    return impl_.get_buffer(orphan);
        -:   97:  }
        -:   98:  /// @copydoc TAO::details::generic_sequence::swap()
        -:   99:  inline void swap(unbounded_object_reference_sequence & rhs) throw() {
        -:  100:    impl_.swap(rhs.impl_);
        -:  101:  }
        -:  102:
        -:  103:  static value_type * allocbuf(CORBA::ULong maximum)
        -:  104:  {
        -:  105:    return implementation_type::allocbuf(maximum);
        -:  106:  }
        -:  107:  static void freebuf(value_type * buffer)
        -:  108:  {
        -:  109:    implementation_type::freebuf(buffer);
        -:  110:  }
        -:  111:
        -:  112:
        -:  113:#if defined TAO_HAS_SEQUENCE_ITERATORS && TAO_HAS_SEQUENCE_ITERATORS == 1
        -:  114:
        -:  115:  ///
        -:  116:  /// Additions to support iterator semantics for TAO unbounded object reference
        -:  117:  /// sequences.
        -:  118:  ///
        -:  119:
        -:  120:  // = Traits and factory methods that create iterators.
        -:  121:  typedef MM_Sequence_Iterator<unbounded_object_reference_sequence<object_t, object_t_var> > iterator;
        -:  122:  typedef Const_MM_Sequence_Iterator<unbounded_object_reference_sequence<object_t, object_t_var> > const_iterator;
        -:  123:  typedef MM_Sequence_Reverse_Iterator<unbounded_object_reference_sequence<object_t, object_t_var> > reverse_iterator;
        -:  124:  typedef Const_MM_Sequence_Reverse_Iterator<unbounded_object_reference_sequence<object_t, object_t_var> > const_reverse_iterator;
        -:  125:
        -:  126:  /// Get an iterator that points to the beginning of the sequence.
        -:  127:  iterator begin (void)
        -:  128:  {
        -:  129:    return iterator (&this->impl_);
        -:  130:  }
        -:  131:
        -:  132:  /// Get a const iterator that points to the beginning of the sequence.
        -:  133:  const_iterator begin (void) const
        -:  134:  {
        -:  135:    return const_iterator (&this->impl_);
        -:  136:  }
        -:  137:
        -:  138:  /// Get an iterator that points to the end of the sequence.
        -:  139:  iterator end (void)
        -:  140:  {
        -:  141:    return iterator (&this->impl_,
        -:  142:                     this->impl_.length ());
        -:  143:  }
        -:  144:
        -:  145:  /// Get a const iterator that points to the end of the sequence.
        -:  146:  const_iterator end (void) const
        -:  147:  {
        -:  148:    return const_iterator (&this->impl_,
        -:  149:                           this->impl_.length ());
        -:  150:  }
        -:  151:
        -:  152:  /// Get a reverse iterator that points to the end of the sequence.
        -:  153:  reverse_iterator rbegin (void)
        -:  154:  {
        -:  155:    return reverse_iterator (&this->impl_,
        -:  156:                             this->impl_.length () - 1);
        -:  157:  }
        -:  158:
        -:  159:  /// Get a const reverse iterator that points to the end of the sequence.
        -:  160:  const_reverse_iterator rbegin (void) const
        -:  161:  {
        -:  162:    return const_reverse_iterator (&this->impl_,
        -:  163:                                   this->impl_.length () - 1);
        -:  164:  }
        -:  165:
        -:  166:  /// Get a reverse iterator that points to one before the beginning
        -:  167:  /// of the sequence.
        -:  168:  reverse_iterator rend (void)
        -:  169:  {
        -:  170:    return reverse_iterator (&this->impl_,
        -:  171:                             -1);
        -:  172:  }
        -:  173:
        -:  174:  /// Get a const reverse iterator that points to one before the
        -:  175:  /// beginning of the sequence.
        -:  176:  const_reverse_iterator rend (void) const
        -:  177:  {
        -:  178:    return const_reverse_iterator (&this->impl_,
        -:  179:                                   -1);
        -:  180:  }
        -:  181:
        -:  182:#endif /* TAO_HAS_SEQUENCE_ITERATORS==1 */
        -:  183:
        -:  184:private:
        -:  185:  implementation_type impl_;
        -:  186:};
        -:  187:
        -:  188:} // namespace TAO
        -:  189:
        -:  190:TAO_END_VERSIONED_NAMESPACE_DECL
        -:  191:
        -:  192:#endif // guard_unbounded_object_reference_sequence_hpp
