        -:    0:Source:../dds/DCPS/Comparator_T.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef COMPARATOR_H
        -:    9:#define COMPARATOR_H
        -:   10:
        -:   11:#include /**/ "ace/pre.h"
        -:   12:
        -:   13:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   14:# pragma once
        -:   15:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   16:
        -:   17:#include "ace/OS_NS_string.h"
        -:   18:
        -:   19:#include "RcHandle_T.h"
        -:   20:#include "RcObject.h"
        -:   21:#include "RakeData.h"
        -:   22:
        -:   23:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   24:
        -:   25:namespace OpenDDS {
        -:   26:namespace DCPS {
        -:   27:
        -:   28:class ComparatorBase : public RcObject {
        -:   29:public:
        -:   30:  typedef RcHandle<ComparatorBase> Ptr;
        -:   31:
        -:   32:  ComparatorBase(){}
    #####:   33:  explicit ComparatorBase(Ptr next) : next_(next) {}
        -:   34:
    #####:   35:  virtual ~ComparatorBase() {}
        -:   36:
        -:   37:  virtual bool less(void* lhs, void* rhs) const = 0;
        -:   38:  virtual bool equal(void* lhs, void* rhs) const = 0;
        -:   39:
    #####:   40:  bool compare(void* lhs, void* rhs) const {
    #####:   41:    if (next_.in() && equal(lhs, rhs)) return next_->compare(lhs, rhs);
        -:   42:
    #####:   43:    return less(lhs, rhs);
        -:   44:  }
        -:   45:
        -:   46:private:
        -:   47:  Ptr next_;
        -:   48:};
        -:   49:
        -:   50:template <class Sample, class Field>
    #####:   51:class FieldComparator : public ComparatorBase {
        -:   52:public:
        -:   53:  typedef Field Sample::* MemberPtr;
    #####:   54:  FieldComparator(MemberPtr mp, ComparatorBase::Ptr next)
        -:   55:  : ComparatorBase(next)
    #####:   56:  , mp_(mp) {}
        -:   57:
    #####:   58:  bool less(void* lhs_void, void* rhs_void) const {
    #####:   59:    Sample* lhs = static_cast<Sample*>(lhs_void);
    #####:   60:    Sample* rhs = static_cast<Sample*>(rhs_void);
        -:   61:    using ::operator<; // TAO::String_Manager's operator< is in global NS
    #####:   62:    return lhs->*mp_ < rhs->*mp_;
        -:   63:  }
        -:   64:
    #####:   65:  bool equal(void* lhs_void, void* rhs_void) const {
    #####:   66:    Sample* lhs = static_cast<Sample*>(lhs_void);
    #####:   67:    Sample* rhs = static_cast<Sample*>(rhs_void);
    #####:   68:    const Field& field_l = lhs->*mp_;
    #####:   69:    const Field& field_r = rhs->*mp_;
        -:   70:    using ::operator<; // TAO::String_Manager's operator< is in global NS
    #####:   71:    return !(field_l < field_r) && !(field_r < field_l);
        -:   72:  }
        -:   73:
        -:   74:private:
        -:   75:  MemberPtr mp_;
        -:   76:};
        -:   77:
        -:   78:template <class Sample, class Field>
    #####:   79:ComparatorBase::Ptr make_field_cmp(Field Sample::* mp,
        -:   80:                                   ComparatorBase::Ptr next)
        -:   81:{
    #####:   82:  return make_rch<FieldComparator<Sample, Field> >(mp, next);
        -:   83:}
        -:   84:
        -:   85:/** deal with nested structs, for example:
        -:   86: *  struct A { long x; };
        -:   87: *  struct B { A theA; };
        -:   88: *  B's query string has "ORDER BY theA.x"
        -:   89: *  The generated code will create a StructComparator with
        -:   90: *  Sample = B and Field = A which in turn has a "delegate" which is
        -:   91: *  a FieldComparator (see above) with Sample = A and Field = CORBA::Long
        -:   92: */
        -:   93:template <class Sample, class Field>
    #####:   94:class StructComparator : public ComparatorBase {
        -:   95:public:
        -:   96:  typedef Field Sample::* MemberPtr;
    #####:   97:  StructComparator(MemberPtr mp, ComparatorBase::Ptr delegate,
        -:   98:                   ComparatorBase::Ptr next)
        -:   99:  : ComparatorBase(next)
        -:  100:  , mp_(mp)
    #####:  101:  , delegate_(delegate) {}
        -:  102:
    #####:  103:  bool less(void* lhs_void, void* rhs_void) const {
    #####:  104:    Sample* lhs = static_cast<Sample*>(lhs_void);
    #####:  105:    Sample* rhs = static_cast<Sample*>(rhs_void);
    #####:  106:    return delegate_->less(&(lhs->*mp_), &(rhs->*mp_));
        -:  107:  }
        -:  108:
    #####:  109:  bool equal(void* lhs_void, void* rhs_void) const {
    #####:  110:    Sample* lhs = static_cast<Sample*>(lhs_void);
    #####:  111:    Sample* rhs = static_cast<Sample*>(rhs_void);
    #####:  112:    return delegate_->equal(&(lhs->*mp_), &(rhs->*mp_));
        -:  113:  }
        -:  114:
        -:  115:private:
        -:  116:  MemberPtr mp_;
        -:  117:  ComparatorBase::Ptr delegate_;
        -:  118:};
        -:  119:
        -:  120:template <class Sample, class Field>
    #####:  121:ComparatorBase::Ptr make_struct_cmp(Field Sample::* mp,
        -:  122:                                    ComparatorBase::Ptr delegate,
        -:  123:                                    ComparatorBase::Ptr next)
        -:  124:{
    #####:  125:  return make_rch<StructComparator<Sample, Field> >(mp, delegate, next);
        -:  126:}
        -:  127:
        -:  128:} // namespace DCPS
        -:  129:} // namespace OpenDDS
        -:  130:
        -:  131:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  132:
        -:  133:#endif
