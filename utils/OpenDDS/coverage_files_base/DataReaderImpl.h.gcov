        -:    0:Source:../dds/DCPS/DataReaderImpl.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef OPENDDS_DCPS_DATAREADER_H
        -:    9:#define OPENDDS_DCPS_DATAREADER_H
        -:   10:
        -:   11:#include "dcps_export.h"
        -:   12:#include "EntityImpl.h"
        -:   13:#include "dds/DdsDcpsTopicC.h"
        -:   14:#include "dds/DdsDcpsSubscriptionExtC.h"
        -:   15:#include "dds/DdsDcpsDomainC.h"
        -:   16:#include "dds/DdsDcpsTopicC.h"
        -:   17:#include "Definitions.h"
        -:   18:#include "dds/DCPS/DataReaderCallbacks.h"
        -:   19:#include "dds/DCPS/transport/framework/ReceivedDataSample.h"
        -:   20:#include "dds/DCPS/transport/framework/TransportReceiveListener.h"
        -:   21:#include "dds/DCPS/transport/framework/TransportClient.h"
        -:   22:#include "DisjointSequence.h"
        -:   23:#include "SubscriptionInstance.h"
        -:   24:#include "InstanceState.h"
        -:   25:#include "Cached_Allocator_With_Overflow_T.h"
        -:   26:#include "ZeroCopyInfoSeq_T.h"
        -:   27:#include "Stats_T.h"
        -:   28:#include "OwnershipManager.h"
        -:   29:#include "ContentFilteredTopicImpl.h"
        -:   30:#include "MultiTopicImpl.h"
        -:   31:#include "GroupRakeData.h"
        -:   32:#include "CoherentChangeControl.h"
        -:   33:#include "AssociationData.h"
        -:   34:#include "dds/DdsDcpsInfrastructureC.h"
        -:   35:#include "RcHandle_T.h"
        -:   36:#include "RcObject.h"
        -:   37:#include "WriterInfo.h"
        -:   38:#include "ReactorInterceptor.h"
        -:   39:#include "Service_Participant.h"
        -:   40:#include "PoolAllocator.h"
        -:   41:#include "RemoveAssociationSweeper.h"
        -:   42:#include "RcEventHandler.h"
        -:   43:#include "TopicImpl.h"
        -:   44:#include "DomainParticipantImpl.h"
        -:   45:
        -:   46:#include "ace/String_Base.h"
        -:   47:#include "ace/Reverse_Lock_T.h"
        -:   48:#include "ace/Atomic_Op.h"
        -:   49:#include "ace/Reactor.h"
        -:   50:
        -:   51:#include "dds/DCPS/PoolAllocator.h"
        -:   52:#include <memory>
        -:   53:
        -:   54:#if !defined (ACE_LACKS_PRAGMA_ONCE)
        -:   55:#pragma once
        -:   56:#endif /* ACE_LACKS_PRAGMA_ONCE */
        -:   57:
        -:   58:class DDS_TEST;
        -:   59:
        -:   60:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   61:
        -:   62:namespace OpenDDS {
        -:   63:namespace DCPS {
        -:   64:
        -:   65:class SubscriberImpl;
        -:   66:class DomainParticipantImpl;
        -:   67:class SubscriptionInstance;
        -:   68:class TopicImpl;
        -:   69:class TopicDescriptionImpl;
        -:   70:class RequestedDeadlineWatchdog;
        -:   71:class Monitor;
        -:   72:class DataReaderImpl;
        -:   73:class FilterEvaluator;
        -:   74:
        -:   75:typedef Cached_Allocator_With_Overflow<OpenDDS::DCPS::ReceivedDataElementMemoryBlock, ACE_Null_Mutex>
        -:   76:ReceivedDataAllocator;
        -:   77:
        -:   78:enum MarshalingType {
        -:   79:  FULL_MARSHALING,
        -:   80:  KEY_ONLY_MARSHALING
        -:   81:};
        -:   82:
        -:   83:/// Elements stored for managing statistical data.
        -:   84:class OpenDDS_Dcps_Export WriterStats {
        -:   85:public:
        -:   86:  /// Default constructor.
        -:   87:  WriterStats(
        -:   88:    int amount = 0,
        -:   89:    DataCollector<double>::OnFull type = DataCollector<double>::KeepOldest);
        -:   90:
        -:   91:  /// Add a datum to the latency statistics.
        -:   92:  void add_stat(const ACE_Time_Value& delay);
        -:   93:
        -:   94:  /// Extract the current latency statistics for this writer.
        -:   95:  LatencyStatistics get_stats() const;
        -:   96:
        -:   97:  /// Reset the latency statistics for this writer.
        -:   98:  void reset_stats();
        -:   99:
        -:  100:#ifndef OPENDDS_SAFETY_PROFILE
        -:  101:  /// Dump any raw data.
        -:  102:  std::ostream& raw_data(std::ostream& str) const;
        -:  103:#endif
        -:  104:
        -:  105:private:
        -:  106:  /// Latency statistics for the DataWriter to this DataReader.
        -:  107:  Stats<double> stats_;
        -:  108:};
        -:  109:
        -:  110:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  111:
        -:  112:class OpenDDS_Dcps_Export AbstractSamples
        -:  113:{
        -:  114:public:
        -:  115:  virtual ~AbstractSamples(){}
        -:  116:  virtual void reserve(CORBA::ULong size)=0;
        -:  117:  virtual void push_back(const DDS::SampleInfo& info, const void* sample)=0;
        -:  118:};
        -:  119:
        -:  120:#endif
        -:  121:
        -:  122:
        -:  123:// Class to cleanup in case EndHistoricSamples is missed
        -:  124:class EndHistoricSamplesMissedSweeper : public ReactorInterceptor {
        -:  125:public:
        -:  126:  EndHistoricSamplesMissedSweeper(ACE_Reactor* reactor,
        -:  127:                                  ACE_thread_t owner,
        -:  128:                                  DataReaderImpl* reader);
        -:  129:
        -:  130:  void schedule_timer(OpenDDS::DCPS::RcHandle<OpenDDS::DCPS::WriterInfo>& info);
        -:  131:  void cancel_timer(OpenDDS::DCPS::RcHandle<OpenDDS::DCPS::WriterInfo>& info);
        -:  132:
        -:  133:  // Arg will be PublicationId
        -:  134:  int handle_timeout(const ACE_Time_Value& current_time, const void* arg);
        -:  135:
        -:  136:  virtual bool reactor_is_shut_down() const
        -:  137:  {
        -:  138:    return TheServiceParticipant->is_shut_down();
        -:  139:  }
        -:  140:
        -:  141:private:
        -:  142:  ~EndHistoricSamplesMissedSweeper();
        -:  143:
        -:  144:  WeakRcHandle<DataReaderImpl> reader_;
        -:  145:  OPENDDS_SET(RcHandle<OpenDDS::DCPS::WriterInfo>) info_set_;
        -:  146:
        -:  147:  class CommandBase : public Command {
        -:  148:  public:
        -:  149:    CommandBase(EndHistoricSamplesMissedSweeper* sweeper,
        -:  150:                OpenDDS::DCPS::RcHandle<OpenDDS::DCPS::WriterInfo>& info)
        -:  151:      : sweeper_ (sweeper)
        -:  152:      , info_(info)
        -:  153:    { }
        -:  154:
        -:  155:  protected:
        -:  156:    EndHistoricSamplesMissedSweeper* sweeper_;
        -:  157:    OpenDDS::DCPS::RcHandle<OpenDDS::DCPS::WriterInfo> info_;
        -:  158:  };
        -:  159:
        -:  160:  class ScheduleCommand : public CommandBase {
        -:  161:  public:
        -:  162:    ScheduleCommand(EndHistoricSamplesMissedSweeper* sweeper,
        -:  163:                    OpenDDS::DCPS::RcHandle<OpenDDS::DCPS::WriterInfo>& info)
        -:  164:      : CommandBase(sweeper, info)
        -:  165:    { }
        -:  166:    virtual void execute();
        -:  167:  };
        -:  168:
        -:  169:  class CancelCommand : public CommandBase {
        -:  170:  public:
        -:  171:    CancelCommand(EndHistoricSamplesMissedSweeper* sweeper,
        -:  172:                  OpenDDS::DCPS::RcHandle<OpenDDS::DCPS::WriterInfo>& info)
        -:  173:      : CommandBase(sweeper, info)
        -:  174:    { }
        -:  175:    virtual void execute();
        -:  176:  };
        -:  177:};
        -:  178:
        -:  179:/**
        -:  180:* @class DataReaderImpl
        -:  181:*
        -:  182:* @brief Implements the DDS::DataReader interface.
        -:  183:*
        -:  184:* See the DDS specification, OMG formal/04-12-02, for a description of
        -:  185:* the interface this class is implementing.
        -:  186:*
        -:  187:* This class must be inherited by the type-specific datareader which
        -:  188:* is specific to the data-type associated with the topic.
        -:  189:*
        -:  190:*/
        -:  191:class OpenDDS_Dcps_Export DataReaderImpl
        -:  192:  : public virtual LocalObject<DataReaderEx>,
        -:  193:    public virtual DataReaderCallbacks,
        -:  194:    public virtual EntityImpl,
        -:  195:    public virtual TransportClient,
        -:  196:    public virtual TransportReceiveListener,
        -:  197:    private WriterInfoListener {
        -:  198:public:
        -:  199:  friend class RequestedDeadlineWatchdog;
        -:  200:  friend class QueryConditionImpl;
        -:  201:  friend class SubscriberImpl;
        -:  202:
        -:  203:  typedef OPENDDS_MAP(DDS::InstanceHandle_t, SubscriptionInstance_rch) SubscriptionInstanceMapType;
        -:  204:
        -:  205:  /// Type of collection of statistics for writers to this reader.
        -:  206:  typedef OPENDDS_MAP_CMP(PublicationId, WriterStats, GUID_tKeyLessThan) StatsMapType;
        -:  207:
        -:  208:  DataReaderImpl();
        -:  209:
        -:  210:  virtual ~DataReaderImpl();
        -:  211:
        -:  212:  virtual DDS::InstanceHandle_t get_instance_handle();
        -:  213:
        -:  214:  virtual void add_association(const RepoId& yourId,
        -:  215:                               const WriterAssociation& writer,
        -:  216:                               bool active);
        -:  217:
        -:  218:  virtual void transport_assoc_done(int flags, const RepoId& remote_id);
        -:  219:
        -:  220:  virtual void association_complete(const RepoId& remote_id);
        -:  221:
        -:  222:  virtual void remove_associations(const WriterIdSeq& writers, bool callback);
        -:  223:
        -:  224:  virtual void update_incompatible_qos(const IncompatibleQosStatus& status);
        -:  225:
        -:  226:  virtual void inconsistent_topic();
        -:  227:
        -:  228:  virtual void signal_liveliness(const RepoId& remote_participant);
        -:  229:
        -:  230:  /**
        -:  231:  * This is used to retrieve the listener for a certain status change.
        -:  232:  * If this datareader has a registered listener and the status kind
        -:  233:  * is in the listener mask then the listener is returned.
        -:  234:  * Otherwise, the query for the listener is propagated up to the
        -:  235:  * factory/subscriber.
        -:  236:  */
        -:  237:  DDS::DataReaderListener_ptr listener_for(DDS::StatusKind kind);
        -:  238:
        -:  239:  /// tell instances when a DataWriter transitions to being alive
        -:  240:  /// The writer state is inout parameter, it has to be set ALIVE before
        -:  241:  /// handle_timeout is called since some subroutine use the state.
        -:  242:  void writer_became_alive(WriterInfo& info,
        -:  243:                           const ACE_Time_Value& when);
        -:  244:
        -:  245:  /// tell instances when a DataWriter transitions to DEAD
        -:  246:  /// The writer state is inout parameter, the state is set to DEAD
        -:  247:  /// when it returns.
        -:  248:  void writer_became_dead(WriterInfo& info,
        -:  249:                          const ACE_Time_Value& when);
        -:  250:
        -:  251:  /// tell instance when a DataWriter is removed.
        -:  252:  /// The liveliness status need update.
        -:  253:  void writer_removed(WriterInfo& info);
        -:  254:
        -:  255:  virtual void cleanup();
        -:  256:
        -:  257:  void init(
        -:  258:    TopicDescriptionImpl* a_topic_desc,
        -:  259:    const DDS::DataReaderQos &  qos,
        -:  260:    DDS::DataReaderListener_ptr a_listener,
        -:  261:    const DDS::StatusMask &     mask,
        -:  262:    DomainParticipantImpl*        participant,
        -:  263:    SubscriberImpl*               subscriber);
        -:  264:
        -:  265:  virtual DDS::ReadCondition_ptr create_readcondition(
        -:  266:    DDS::SampleStateMask sample_states,
        -:  267:    DDS::ViewStateMask view_states,
        -:  268:    DDS::InstanceStateMask instance_states);
        -:  269:
        -:  270:#ifndef OPENDDS_NO_QUERY_CONDITION
        -:  271:  virtual DDS::QueryCondition_ptr create_querycondition(
        -:  272:    DDS::SampleStateMask sample_states,
        -:  273:    DDS::ViewStateMask view_states,
        -:  274:    DDS::InstanceStateMask instance_states,
        -:  275:    const char * query_expression,
        -:  276:    const DDS::StringSeq & query_parameters);
        -:  277:#endif
        -:  278:
        -:  279:  virtual DDS::ReturnCode_t delete_readcondition(
        -:  280:    DDS::ReadCondition_ptr a_condition);
        -:  281:
        -:  282:  virtual DDS::ReturnCode_t delete_contained_entities();
        -:  283:
        -:  284:  virtual DDS::ReturnCode_t set_qos(
        -:  285:    const DDS::DataReaderQos & qos);
        -:  286:
        -:  287:  virtual DDS::ReturnCode_t get_qos(
        -:  288:    DDS::DataReaderQos & qos);
        -:  289:
        -:  290:  virtual DDS::ReturnCode_t set_listener(
        -:  291:    DDS::DataReaderListener_ptr a_listener,
        -:  292:    DDS::StatusMask mask);
        -:  293:
        -:  294:  virtual DDS::DataReaderListener_ptr get_listener();
        -:  295:
        -:  296:  virtual DDS::TopicDescription_ptr get_topicdescription();
        -:  297:
        -:  298:  virtual DDS::Subscriber_ptr get_subscriber();
        -:  299:
        -:  300:  virtual DDS::ReturnCode_t get_sample_rejected_status(
        -:  301:    DDS::SampleRejectedStatus & status);
        -:  302:
        -:  303:  virtual DDS::ReturnCode_t get_liveliness_changed_status(
        -:  304:    DDS::LivelinessChangedStatus & status);
        -:  305:
        -:  306:  virtual DDS::ReturnCode_t get_requested_deadline_missed_status(
        -:  307:    DDS::RequestedDeadlineMissedStatus & status);
        -:  308:
        -:  309:  virtual DDS::ReturnCode_t get_requested_incompatible_qos_status(
        -:  310:    DDS::RequestedIncompatibleQosStatus & status);
        -:  311:
        -:  312:  virtual DDS::ReturnCode_t get_subscription_matched_status(
        -:  313:    DDS::SubscriptionMatchedStatus & status);
        -:  314:
        -:  315:  virtual DDS::ReturnCode_t get_sample_lost_status(
        -:  316:    DDS::SampleLostStatus & status);
        -:  317:
        -:  318:  virtual DDS::ReturnCode_t wait_for_historical_data(
        -:  319:    const DDS::Duration_t & max_wait);
        -:  320:
        -:  321:  virtual DDS::ReturnCode_t get_matched_publications(
        -:  322:    DDS::InstanceHandleSeq & publication_handles);
        -:  323:
        -:  324:#if !defined (DDS_HAS_MINIMUM_BIT)
        -:  325:  virtual DDS::ReturnCode_t get_matched_publication_data(
        -:  326:    DDS::PublicationBuiltinTopicData & publication_data,
        -:  327:    DDS::InstanceHandle_t publication_handle);
        -:  328:#endif // !defined (DDS_HAS_MINIMUM_BIT)
        -:  329:
        -:  330:  virtual DDS::ReturnCode_t enable();
        -:  331:
        -:  332:#ifndef OPENDDS_SAFETY_PROFILE
        -:  333:  virtual void get_latency_stats(
        -:  334:    OpenDDS::DCPS::LatencyStatisticsSeq & stats);
        -:  335:#endif
        -:  336:
        -:  337:  virtual void reset_latency_stats();
        -:  338:
        -:  339:  virtual CORBA::Boolean statistics_enabled();
        -:  340:
        -:  341:  virtual void statistics_enabled(
        -:  342:    CORBA::Boolean statistics_enabled);
        -:  343:
        -:  344:  /// @name Raw Latency Statistics Interfaces
        -:  345:  /// @{
        -:  346:
        -:  347:  /// Expose the statistics container.
        -:  348:  const StatsMapType& raw_latency_statistics() const;
        -:  349:
        -:  350:  /// Configure the size of the raw data collection buffer.
        -:  351:  unsigned int& raw_latency_buffer_size();
        -:  352:
        -:  353:  /// Configure the type of the raw data collection buffer.
        -:  354:  DataCollector<double>::OnFull& raw_latency_buffer_type();
        -:  355:
        -:  356:  /// @}
        -:  357:
        -:  358:  /// update liveliness info for this writer.
        -:  359:  void writer_activity(const DataSampleHeader& header);
        -:  360:
        -:  361:  /// process a message that has been received - could be control or a data sample.
        -:  362:  virtual void data_received(const ReceivedDataSample& sample);
        -:  363:
        -:  364:  virtual bool check_transport_qos(const TransportInst& inst);
        -:  365:
        -:  366:  RepoId get_subscription_id() const;
        -:  367:
        -:  368:  bool have_sample_states(DDS::SampleStateMask sample_states) const;
        -:  369:  bool have_view_states(DDS::ViewStateMask view_states) const;
        -:  370:  bool have_instance_states(DDS::InstanceStateMask instance_states) const;
        -:  371:  bool contains_sample(DDS::SampleStateMask sample_states,
        -:  372:                       DDS::ViewStateMask view_states,
        -:  373:                       DDS::InstanceStateMask instance_states);
        -:  374:
        -:  375:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  376:  virtual bool contains_sample_filtered(DDS::SampleStateMask sample_states,
        -:  377:                                        DDS::ViewStateMask view_states,
        -:  378:                                        DDS::InstanceStateMask instance_states,
        -:  379:                                        const FilterEvaluator& evaluator,
        -:  380:                                        const DDS::StringSeq& params) = 0;
        -:  381:#endif
        -:  382:
        -:  383:  virtual void dds_demarshal(const ReceivedDataSample& sample,
        -:  384:                             SubscriptionInstance_rch& instance,
        -:  385:                             bool& is_new_instance,
        -:  386:                             bool& filtered,
        -:  387:                             MarshalingType marshaling_type)= 0;
        -:  388:
        -:  389:  virtual void dispose_unregister(const ReceivedDataSample& sample,
        -:  390:                                  SubscriptionInstance_rch& instance);
        -:  391:
        -:  392:  void process_latency(const ReceivedDataSample& sample);
        -:  393:  void notify_latency(PublicationId writer);
        -:  394:
    #####:  395:  CORBA::Long get_depth() const {
    #####:  396:    return depth_;
        -:  397:  }
    #####:  398:  size_t get_n_chunks() const {
    #####:  399:    return n_chunks_;
        -:  400:  }
        -:  401:
        -:  402:  void liveliness_lost();
        -:  403:
        -:  404:  void remove_all_associations();
        -:  405:
        -:  406:  void notify_subscription_disconnected(const WriterIdSeq& pubids);
        -:  407:  void notify_subscription_reconnected(const WriterIdSeq& pubids);
        -:  408:  void notify_subscription_lost(const WriterIdSeq& pubids);
        -:  409:  void notify_liveliness_change();
        -:  410:
        -:  411:  bool is_bit() const;
        -:  412:
        -:  413:  /**
        -:  414:   * This method is used for a precondition check of delete_datareader.
        -:  415:   *
        -:  416:   * @retval true We have zero-copy samples loaned out
        -:  417:   * @retval false We have no zero-copy samples loaned out
        -:  418:   */
        -:  419:  bool has_zero_copies();
        -:  420:
        -:  421:  /// Release the instance with the handle.
        -:  422:  void release_instance(DDS::InstanceHandle_t handle);
        -:  423:
        -:  424:  // Reset time interval for each instance.
        -:  425:  void reschedule_deadline();
        -:  426:
        -:  427:  ACE_Reactor_Timer_Interface* get_reactor();
        -:  428:
        -:  429:  RepoId get_topic_id();
        -:  430:  RepoId get_dp_id();
        -:  431:
        -:  432:  typedef OPENDDS_VECTOR(DDS::InstanceHandle_t) InstanceHandleVec;
        -:  433:  void get_instance_handles(InstanceHandleVec& instance_handles);
        -:  434:
        -:  435:  typedef std::pair<PublicationId, WriterInfo::WriterState> WriterStatePair;
        -:  436:  typedef OPENDDS_VECTOR(WriterStatePair) WriterStatePairVec;
        -:  437:  void get_writer_states(WriterStatePairVec& writer_states);
        -:  438:
        -:  439:#ifndef OPENDDS_NO_OWNERSHIP_KIND_EXCLUSIVE
        -:  440:  void update_ownership_strength (const PublicationId& pub_id,
        -:  441:                                  const CORBA::Long& ownership_strength);
        -:  442:
        -:  443:  // Access to OwnershipManager is only valid when the domain participant is valid;
        -:  444:  // therefore, we must lock the domain pariticipant when using  OwnershipManager.
       12:  445:  class OwnershipManagerPtr
        -:  446:  {
        -:  447:  public:
       12:  448:    OwnershipManagerPtr(DataReaderImpl* reader)
       12:  449:      : participant_( reader->is_exclusive_ownership_ ? reader->participant_servant_.lock() : RcHandle<DomainParticipantImpl>())
        -:  450:    {
       12:  451:    }
       12:  452:    operator bool() const { return participant_.in(); }
    #####:  453:    OwnershipManager* operator->() const
        -:  454:    {
    #####:  455:      return participant_->ownership_manager();
        -:  456:    }
        -:  457:
        -:  458:  private:
        -:  459:    RcHandle<DomainParticipantImpl> participant_;
        -:  460:  };
        -:  461:  friend class OwnershipManagerPtr;
        -:  462:
       12:  463:  OwnershipManagerPtr ownership_manager() { return OwnershipManagerPtr(this); }
        -:  464:#endif
        -:  465:
        -:  466:  virtual void lookup_instance(const OpenDDS::DCPS::ReceivedDataSample& sample,
        -:  467:                               OpenDDS::DCPS::SubscriptionInstance_rch& instance) = 0;
        -:  468:
        -:  469:#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
        -:  470:
        -:  471:#ifndef OPENDDS_NO_CONTENT_FILTERED_TOPIC
        -:  472:
        -:  473:  void enable_filtering(ContentFilteredTopicImpl* cft);
        -:  474:
        -:  475:  DDS::ContentFilteredTopic_ptr get_cf_topic() const;
        -:  476:
        -:  477:#endif
        -:  478:
        -:  479:#ifndef OPENDDS_NO_MULTI_TOPIC
        -:  480:
        -:  481:  void enable_multi_topic(MultiTopicImpl* mt);
        -:  482:
        -:  483:#endif
        -:  484:
        -:  485:  void update_subscription_params(const DDS::StringSeq& params) const;
        -:  486:
        -:  487:  typedef OPENDDS_VECTOR(void*) GenericSeq;
        -:  488:
        -:  489:  struct GenericBundle {
        -:  490:    GenericSeq samples_;
        -:  491:    DDS::SampleInfoSeq info_;
        -:  492:  };
        -:  493:
        -:  494:  virtual DDS::ReturnCode_t read_generic(GenericBundle& gen,
        -:  495:    DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states,
        -:  496:    DDS::InstanceStateMask instance_states, bool adjust_ref_count ) = 0;
        -:  497:
        -:  498:  virtual DDS::ReturnCode_t take(
        -:  499:    AbstractSamples& samples,
        -:  500:    DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states,
        -:  501:    DDS::InstanceStateMask instance_states)=0;
        -:  502:
        -:  503:  virtual DDS::InstanceHandle_t lookup_instance_generic(const void* data) = 0;
        -:  504:
        -:  505:  virtual DDS::ReturnCode_t read_instance_generic(void*& data,
        -:  506:    DDS::SampleInfo& info, DDS::InstanceHandle_t instance,
        -:  507:    DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states,
        -:  508:    DDS::InstanceStateMask instance_states) = 0;
        -:  509:
        -:  510:  virtual DDS::ReturnCode_t read_next_instance_generic(void*& data,
        -:  511:    DDS::SampleInfo& info, DDS::InstanceHandle_t previous_instance,
        -:  512:    DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states,
        -:  513:    DDS::InstanceStateMask instance_states) = 0;
        -:  514:
        -:  515:  virtual void set_instance_state(DDS::InstanceHandle_t instance,
        -:  516:                                  DDS::InstanceStateKind state) = 0;
        -:  517:
        -:  518:#endif
        -:  519:
        -:  520:#ifndef OPENDDS_NO_OBJECT_MODEL_PROFILE
        -:  521:  void begin_access();
        -:  522:  void end_access();
        -:  523:  void get_ordered_data(GroupRakeData& data,
        -:  524:                        DDS::SampleStateMask sample_states,
        -:  525:                        DDS::ViewStateMask view_states,
        -:  526:                        DDS::InstanceStateMask instance_states);
        -:  527:
        -:  528:  void accept_coherent (PublicationId& writer_id,
        -:  529:                        RepoId& publisher_id);
        -:  530:  void reject_coherent (PublicationId& writer_id,
        -:  531:                        RepoId& publisher_id);
        -:  532:  void coherent_change_received (RepoId publisher_id, Coherent_State& result);
        -:  533:
        -:  534:  void coherent_changes_completed (DataReaderImpl* reader);
        -:  535:
        -:  536:  void reset_coherent_info (const PublicationId& writer_id,
        -:  537:                            const RepoId& publisher_id);
        -:  538:#endif
        -:  539:
        -:  540:  // Called upon subscriber qos change to update the local cache.
        -:  541:  void set_subscriber_qos(const DDS::SubscriberQos & qos);
        -:  542:
        -:  543:  // Set the instance related writers to reevaluate the owner.
        -:  544:  void reset_ownership (DDS::InstanceHandle_t instance);
        -:  545:
        -:  546:  virtual RcHandle<EntityImpl> parent() const;
        -:  547:
        -:  548:  void disable_transport();
        -:  549:
        -:  550:  virtual void register_for_writer(const RepoId& /*participant*/,
        -:  551:                                   const RepoId& /*readerid*/,
        -:  552:                                   const RepoId& /*writerid*/,
        -:  553:                                   const TransportLocatorSeq& /*locators*/,
        -:  554:                                   DiscoveryListener* /*listener*/);
        -:  555:
        -:  556:  virtual void unregister_for_writer(const RepoId& /*participant*/,
        -:  557:                                     const RepoId& /*readerid*/,
        -:  558:                                     const RepoId& /*writerid*/);
        -:  559:
        -:  560:  virtual ICE::Endpoint* get_ice_endpoint();
        -:  561:
        -:  562:protected:
        -:  563:  virtual void remove_associations_i(const WriterIdSeq& writers, bool callback);
        -:  564:  void remove_publication(const PublicationId& pub_id);
        -:  565:
        -:  566:  void prepare_to_delete();
        -:  567:
        -:  568:  RcHandle<SubscriberImpl> get_subscriber_servant();
        -:  569:
        -:  570:  void post_read_or_take();
        -:  571:
        -:  572:  // type specific DataReader's part of enable.
        -:  573:  virtual DDS::ReturnCode_t enable_specific() = 0;
        -:  574:
        -:  575:  void sample_info(DDS::SampleInfo & sample_info,
        -:  576:                   const ReceivedDataElement *ptr);
        -:  577:
        -:  578:  CORBA::Long total_samples() const;
        -:  579:
        -:  580:  void set_sample_lost_status(const DDS::SampleLostStatus& status);
        -:  581:  void set_sample_rejected_status(
        -:  582:    const DDS::SampleRejectedStatus& status);
        -:  583:
        -:  584://remove document this!
        -:  585:  SubscriptionInstance_rch get_handle_instance(
        -:  586:    DDS::InstanceHandle_t handle);
        -:  587:
        -:  588:  /**
        -:  589:  * Get an instance handle for a new instance.
        -:  590:  */
        -:  591:  DDS::InstanceHandle_t get_next_handle(const DDS::BuiltinTopicKey_t& key);
        -:  592:
        -:  593:  virtual void purge_data(SubscriptionInstance_rch instance) = 0;
        -:  594:
        -:  595:  virtual void release_instance_i(DDS::InstanceHandle_t handle) = 0;
        -:  596:
        -:  597:  bool has_readcondition(DDS::ReadCondition_ptr a_condition);
        -:  598:
        -:  599:  /// @TODO: document why the instances_ container is mutable.
        -:  600:  mutable SubscriptionInstanceMapType instances_;
        -:  601:
        -:  602:  /// Assume since the container is mutable(?!!?) it may need to use the
        -:  603:  /// lock while const.
        -:  604:  /// @TODO: remove the recursive nature of the instances_lock if not needed.
        -:  605:  mutable ACE_Recursive_Thread_Mutex instances_lock_;
        -:  606:
        -:  607:  /// Check if the received data sample or instance should
        -:  608:  /// be filtered.
        -:  609:  /**
        -:  610:   * @note Filtering will only occur if the application
        -:  611:   *       configured a finite duration in the Topic's LIFESPAN
        -:  612:   *       QoS policy or DataReader's TIME_BASED_FILTER QoS policy.
        -:  613:   */
        -:  614:  bool filter_sample(const DataSampleHeader& header);
        -:  615:
        -:  616:  bool ownership_filter_instance(const SubscriptionInstance_rch& instance,
        -:  617:                                 const PublicationId& pubid);
        -:  618:  bool time_based_filter_instance(const SubscriptionInstance_rch& instance,
        -:  619:                                  ACE_Time_Value& filter_time_expired);
        -:  620:
        -:  621:  void accept_sample_processing(const SubscriptionInstance_rch& instance, const DataSampleHeader& header, bool is_new_instance);
        -:  622:
        -:  623:  virtual void qos_change(const DDS::DataReaderQos& qos);
        -:  624:
        -:  625:  /// Data has arrived into the cache, unblock waiting ReadConditions
        -:  626:  void notify_read_conditions();
        -:  627:
        -:  628:  unique_ptr<ReceivedDataAllocator>  rd_allocator_;
        -:  629:  DDS::DataReaderQos           qos_;
        -:  630:
        -:  631:  // Status conditions accessible by subclasses.
        -:  632:  DDS::SampleRejectedStatus sample_rejected_status_;
        -:  633:  DDS::SampleLostStatus sample_lost_status_;
        -:  634:
        -:  635:  /// lock protecting sample container as well as statuses.
        -:  636:  ACE_Recursive_Thread_Mutex   sample_lock_;
        -:  637:
        -:  638:  typedef ACE_Reverse_Lock<ACE_Recursive_Thread_Mutex> Reverse_Lock_t;
        -:  639:  Reverse_Lock_t reverse_sample_lock_;
        -:  640:
        -:  641:  WeakRcHandle<DomainParticipantImpl> participant_servant_;
        -:  642:  TopicDescriptionPtr<TopicImpl>      topic_servant_;
        -:  643:
        -:  644:#ifndef OPENDDS_NO_OWNERSHIP_KIND_EXCLUSIVE
        -:  645:  bool is_exclusive_ownership_;
        -:  646:
        -:  647:#endif
        -:  648:
        -:  649:#ifndef OPENDDS_NO_CONTENT_FILTERED_TOPIC
        -:  650:  TopicDescriptionPtr<ContentFilteredTopicImpl> content_filtered_topic_;
        -:  651:#endif
        -:  652:
        -:  653:#ifndef OPENDDS_NO_MULTI_TOPIC
        -:  654:  TopicDescriptionPtr<MultiTopicImpl> multi_topic_;
        -:  655:#endif
        -:  656:
        -:  657:  /// Is accessing to Group coherent changes ?
        -:  658:  bool coherent_;
        -:  659:
        -:  660:  /// Ordered group samples.
        -:  661:  GroupRakeData group_coherent_ordered_data_;
        -:  662:
        -:  663:  DDS::SubscriberQos subqos_;
        -:  664:
        -:  665:protected:
        -:  666:  virtual void add_link(const DataLink_rch& link, const RepoId& peer);
        -:  667:
        -:  668:private:
        -:  669:
        -:  670:  void notify_subscription_lost(const DDS::InstanceHandleSeq& handles);
        -:  671:
        -:  672:  /// Lookup the instance handles by the publication repo ids
        -:  673:  void lookup_instance_handles(const WriterIdSeq& ids,
        -:  674:                               DDS::InstanceHandleSeq& hdls);
        -:  675:
        -:  676:  void instances_liveliness_update(WriterInfo& info,
        -:  677:                                   const ACE_Time_Value& when);
        -:  678:
        -:  679:#ifndef OPENDDS_NO_OBJECT_MODEL_PROFILE
        -:  680:  bool verify_coherent_changes_completion(WriterInfo* writer);
        -:  681:  bool coherent_change_received(WriterInfo* writer);
        -:  682:#endif
        -:  683:
    #####:  684:  const RepoId& get_repo_id() const { return this->subscription_id_; }
    #####:  685:  DDS::DomainId_t domain_id() const { return this->domain_id_; }
        -:  686:
    #####:  687:  Priority get_priority_value(const AssociationData& data) const {
    #####:  688:    return data.publication_transport_priority_;
        -:  689:  }
        -:  690:
        -:  691:#if defined(OPENDDS_SECURITY)
        -:  692:  DDS::Security::ParticipantCryptoHandle get_crypto_handle() const;
        -:  693:#endif
        -:  694:
        -:  695:  /// when done handling historic samples, resume
        -:  696:  void resume_sample_processing(const PublicationId& pub_id);
        -:  697:
        -:  698:  /// collect samples received before END_HISTORIC_SAMPLES
        -:  699:  /// returns false if normal processing of this sample should be skipped
        -:  700:  bool check_historic(const ReceivedDataSample& sample);
        -:  701:
        -:  702:  /// deliver samples that were held by check_historic()
        -:  703:  void deliver_historic(OPENDDS_MAP(SequenceNumber, ReceivedDataSample)& samples);
        -:  704:
        -:  705:  friend class InstanceState;
        -:  706:  friend class EndHistoricSamplesMissedSweeper;
        -:  707:  friend class RemoveAssociationSweeper<DataReaderImpl>;
        -:  708:
        -:  709:  friend class ::DDS_TEST; //allows tests to get at private data
        -:  710:
        -:  711:  DDS::TopicDescription_var    topic_desc_;
        -:  712:  DDS::StatusMask              listener_mask_;
        -:  713:  DDS::DataReaderListener_var  listener_;
        -:  714:  DDS::DomainId_t              domain_id_;
        -:  715:  RepoId                       dp_id_;
        -:  716:  // subscriber_servant_ has to be a weak pinter because it may be used from the
        -:  717:  // transport reactor thread and that thread doesn't have the owenership of the
        -:  718:  // the subscriber_servant_ object.
        -:  719:  WeakRcHandle<SubscriberImpl>              subscriber_servant_;
        -:  720:  RcHandle<EndHistoricSamplesMissedSweeper> end_historic_sweeper_;
        -:  721:  RcHandle<RemoveAssociationSweeper<DataReaderImpl> > remove_association_sweeper_;
        -:  722:
        -:  723:  CORBA::Long                  depth_;
        -:  724:  size_t                       n_chunks_;
        -:  725:
        -:  726:  //Used to protect access to id_to_handle_map_
        -:  727:  ACE_Recursive_Thread_Mutex   publication_handle_lock_;
        -:  728:  Reverse_Lock_t reverse_pub_handle_lock_;
        -:  729:
        -:  730:  typedef OPENDDS_MAP_CMP(RepoId, DDS::InstanceHandle_t, GUID_tKeyLessThan) RepoIdToHandleMap;
        -:  731:  RepoIdToHandleMap            id_to_handle_map_;
        -:  732:
        -:  733:  // Status conditions.
        -:  734:  DDS::LivelinessChangedStatus         liveliness_changed_status_;
        -:  735:  DDS::RequestedDeadlineMissedStatus   requested_deadline_missed_status_;
        -:  736:  DDS::RequestedIncompatibleQosStatus  requested_incompatible_qos_status_;
        -:  737:  DDS::SubscriptionMatchedStatus       subscription_match_status_;
        -:  738:
        -:  739:  // OpenDDS extended status.  This is only available via listener.
        -:  740:  BudgetExceededStatus                 budget_exceeded_status_;
        -:  741:
        -:  742:  /**
        -:  743:   * @todo The subscription_lost_status_ and
        -:  744:   *       subscription_reconnecting_status_ are left here for
        -:  745:   *       future use when we add get_subscription_lost_status()
        -:  746:   *       and get_subscription_reconnecting_status() methods.
        -:  747:   */
        -:  748:  // Statistics of the lost subscriptions due to lost connection.
        -:  749:  SubscriptionLostStatus               subscription_lost_status_;
        -:  750:  // Statistics of the subscriptions that are associated with a
        -:  751:  // reconnecting datalink.
        -:  752:  // SubscriptionReconnectingStatus      subscription_reconnecting_status_;
        -:  753:
        -:  754:  /// The orb's reactor to be used to register the liveliness
        -:  755:  /// timer.
        -:  756:  ACE_Reactor_Timer_Interface* reactor_;
        -:  757:
        -:  758:  class LivelinessTimer : public ReactorInterceptor {
        -:  759:  public:
        -:  760:    LivelinessTimer(ACE_Reactor* reactor,
        -:  761:                    ACE_thread_t owner,
        -:  762:                    DataReaderImpl* data_reader)
        -:  763:      : ReactorInterceptor(reactor, owner)
        -:  764:      , data_reader_(*data_reader)
        -:  765:      , liveliness_timer_id_(-1)
        -:  766:    { }
        -:  767:
        -:  768:    void check_liveliness();
        -:  769:
        -:  770:    void cancel_timer()
        -:  771:    {
        -:  772:      CancelCommand c(this);
        -:  773:      execute_or_enqueue(c);
        -:  774:    }
        -:  775:
        -:  776:    virtual bool reactor_is_shut_down() const
        -:  777:    {
        -:  778:      return TheServiceParticipant->is_shut_down();
        -:  779:    }
        -:  780:
        -:  781:  private:
        -:  782:    ~LivelinessTimer() { }
        -:  783:
        -:  784:    WeakRcHandle<DataReaderImpl> data_reader_;
        -:  785:
        -:  786:    /// liveliness timer id; -1 if no timer is set
        -:  787:    long liveliness_timer_id_;
        -:  788:    void check_liveliness_i(bool cancel, const ACE_Time_Value& current_time);
        -:  789:
        -:  790:    int handle_timeout(const ACE_Time_Value& current_time, const void* arg);
        -:  791:
        -:  792:    class CommandBase : public Command {
        -:  793:    public:
        -:  794:      CommandBase(LivelinessTimer* timer)
        -:  795:        : timer_(timer)
        -:  796:      { }
        -:  797:
        -:  798:    protected:
        -:  799:      LivelinessTimer* timer_;
        -:  800:    };
        -:  801:
        -:  802:    class CheckLivelinessCommand : public CommandBase {
        -:  803:    public:
        -:  804:      CheckLivelinessCommand(LivelinessTimer* timer)
        -:  805:        : CommandBase(timer)
        -:  806:      { }
        -:  807:      virtual void execute()
        -:  808:      {
        -:  809:        timer_->check_liveliness_i(true, ACE_OS::gettimeofday());
        -:  810:      }
        -:  811:    };
        -:  812:
        -:  813:    class CancelCommand : public CommandBase {
        -:  814:    public:
        -:  815:      CancelCommand(LivelinessTimer* timer)
        -:  816:        : CommandBase(timer)
        -:  817:      { }
        -:  818:      virtual void execute()
        -:  819:      {
        -:  820:        if (timer_->liveliness_timer_id_ != -1) {
        -:  821:          timer_->reactor()->cancel_timer(timer_);
        -:  822:        }
        -:  823:      }
        -:  824:    };
        -:  825:  };
        -:  826:  RcHandle<LivelinessTimer> liveliness_timer_;
        -:  827:
        -:  828:  CORBA::Long last_deadline_missed_total_count_;
        -:  829:  /// Watchdog responsible for reporting missed offered
        -:  830:  /// deadlines.
        -:  831:  RcHandle<RequestedDeadlineWatchdog> watchdog_;
        -:  832:
        -:  833:  /// Flag indicates that this datareader is a builtin topic
        -:  834:  /// datareader.
        -:  835:  bool is_bit_;
        -:  836:
        -:  837:  bool always_get_history_;
        -:  838:
        -:  839:  /// Flag indicating status of statistics gathering.
        -:  840:  bool statistics_enabled_;
        -:  841:
        -:  842:  /// publications writing to this reader.
        -:  843:  typedef OPENDDS_MAP_CMP(PublicationId, RcHandle<WriterInfo>,
        -:  844:                   GUID_tKeyLessThan) WriterMapType;
        -:  845:
        -:  846:  WriterMapType writers_;
        -:  847:
        -:  848:  /// RW lock for reading/writing publications.
        -:  849:  ACE_RW_Thread_Mutex writers_lock_;
        -:  850:
        -:  851:  /// Statistics for this reader, collected for each writer.
        -:  852:  StatsMapType statistics_;
        -:  853:
        -:  854:  /// Bound (or initial reservation) of raw latency buffer.
        -:  855:  unsigned int raw_latency_buffer_size_;
        -:  856:
        -:  857:  /// Type of raw latency data buffer.
        -:  858:  DataCollector<double>::OnFull raw_latency_buffer_type_;
        -:  859:
        -:  860:  typedef VarLess<DDS::ReadCondition> RCCompLess;
        -:  861:  typedef OPENDDS_SET_CMP(DDS::ReadCondition_var,  RCCompLess) ReadConditionSet;
        -:  862:  ReadConditionSet read_conditions_;
        -:  863:
        -:  864:  /// Monitor object for this entity
        -:  865:  Monitor* monitor_;
        -:  866:
        -:  867:  /// Periodic Monitor object for this entity
        -:  868:  Monitor* periodic_monitor_;
        -:  869:
        -:  870:  bool transport_disabled_;
        -:  871:};
        -:  872:
        -:  873:typedef RcHandle<DataReaderImpl> DataReaderImpl_rch;
        -:  874:
        -:  875:} // namespace DCPS
        -:  876:} // namespace OpenDDS
        -:  877:
        -:  878:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  879:
        -:  880:#if defined (__ACE_INLINE__)
        -:  881:# include "DataReaderImpl.inl"
        -:  882:#endif  /* __ACE_INLINE__ */
        -:  883:
        -:  884:#endif /* OPENDDS_DCPS_DATAREADER_H  */
