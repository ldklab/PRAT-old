        -:    0:Source:../dds/DCPS/GuidUtils.h
        -:    0:Programs:72
        -:    1:/*
        -:    2: *
        -:    3: *
        -:    4: * Distributed under the OpenDDS License.
        -:    5: * See: http://www.opendds.org/license.html
        -:    6: */
        -:    7:
        -:    8:#ifndef GUIDUTILS_H
        -:    9:#define GUIDUTILS_H
        -:   10:
        -:   11:#include "dds/DdsDcpsGuidC.h"
        -:   12:#include "dds/DdsDcpsInfoUtilsC.h"
        -:   13:#include "dds/DCPS/PoolAllocator.h"
        -:   14:
        -:   15:#include "dcps_export.h"
        -:   16:
        -:   17:#include "tao/Basic_Types.h"
        -:   18:
        -:   19:#ifndef OPENDDS_SAFETY_PROFILE
        -:   20:#include <iosfwd>
        -:   21:#endif
        -:   22:
        -:   23:#include <cstring>
        -:   24:
        -:   25:OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
        -:   26:
        -:   27:namespace OpenDDS {
        -:   28:namespace DCPS {
        -:   29:
        -:   30:/// Vendor Id value specified for OCI is used for OpenDDS.
        -:   31:const GuidVendorId_t VENDORID_OCI = { 0x01, 0x03 };
        -:   32:
        -:   33:/// Nil value for the GUID prefix (participant identifier).
        -:   34:const GuidPrefix_t GUIDPREFIX_UNKNOWN = { 0 };
        -:   35:
        -:   36:///@{
        -:   37:/// Entity Id values specified in Version 2.1 of RTPS specification.
        -:   38:const EntityId_t ENTITYID_UNKNOWN                                = { {0x00,0x00,0x00}, 0x00};
        -:   39:const EntityId_t ENTITYID_PARTICIPANT                            = { {0x00,0x00,0x01}, 0xc1};
        -:   40:const EntityId_t ENTITYID_SEDP_BUILTIN_TOPIC_WRITER              = { {0x00,0x00,0x02}, 0xc2};
        -:   41:const EntityId_t ENTITYID_SEDP_BUILTIN_TOPIC_READER              = { {0x00,0x00,0x02}, 0xc7};
        -:   42:const EntityId_t ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER       = { {0x00,0x00,0x03}, 0xc2};
        -:   43:const EntityId_t ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER       = { {0x00,0x00,0x03}, 0xc7};
        -:   44:const EntityId_t ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER      = { {0x00,0x00,0x04}, 0xc2};
        -:   45:const EntityId_t ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER      = { {0x00,0x00,0x04}, 0xc7};
        -:   46:const EntityId_t ENTITYID_SPDP_BUILTIN_PARTICIPANT_WRITER        = { {0x00,0x01,0x00}, 0xc2};
        -:   47:const EntityId_t ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER        = { {0x00,0x01,0x00}, 0xc7};
        -:   48:const EntityId_t ENTITYID_P2P_BUILTIN_PARTICIPANT_MESSAGE_WRITER = { {0x00,0x02,0x00}, 0xc2};
        -:   49:const EntityId_t ENTITYID_P2P_BUILTIN_PARTICIPANT_MESSAGE_READER = { {0x00,0x02,0x00}, 0xc7};
        -:   50:///@}
        -:   51:
        -:   52:/// Nil value for GUID.
        -:   53:const GUID_t GUID_UNKNOWN = { { 0 }, { { 0 }, 0 } };
        -:   54:
        -:   55:/**
        -:   56: * Summary kinds of entities within the service.
        -:   57: *
        -:   58: * See dds/DdsDcpsGuid.idl for the values these map to.
        -:   59: */
        -:   60:enum EntityKind {     // EntityId_t.entityKind value(s)
        -:   61:
        -:   62:  /// Represents ENTITYKIND_USER_UNKNOWN and ENTITYKIND_BUILTIN_UNKNOWN
        -:   63:  KIND_UNKNOWN,
        -:   64:
        -:   65:  /// Represents ENTITYKIND_BUILTIN_PARTICIPANT
        -:   66:  KIND_PARTICIPANT,
        -:   67:
        -:   68:  /// Represents ENTITYKIND_USER_WRITER_WITH_KEY and ENTITYKIND_USER_WRITER_NO_KEY
        -:   69:  KIND_USER_WRITER,
        -:   70:  /// Represents ENTITYKIND_USER_READER_WITH_KEY and ENTITYKIND_USER_READER_NO_KEY
        -:   71:  KIND_USER_READER,
        -:   72:
        -:   73:  /// Represents ENTITYKIND_OPENDDS_TOPIC
        -:   74:  KIND_USER_TOPIC,
        -:   75:
        -:   76:  /// Represents ENTITYKIND_BUILTIN_WRITER_WITH_KEY and ENTITYKIND_USER_WRITER_NO_KEY
        -:   77:  KIND_BUILTIN_WRITER,
        -:   78:  /// Represents ENTITYKIND_BUILTIN_READER_WITH_KEY and ENTITYKIND_USER_READER_NO_KEY
        -:   79:  KIND_BUILTIN_READER,
        -:   80:  /// Represents ENTITYKIND_BUILTIN_TOPIC
        -:   81:  KIND_BUILTIN_TOPIC,
        -:   82:
        -:   83:  /// OpenDDS specific Publisher Guid values
        -:   84:  KIND_PUBLISHER,
        -:   85:  /// OpenDDS specific Subscriber Guid values
        -:   86:  KIND_SUBSCRIBER,
        -:   87:  /// OpenDDS specific other Guid values
        -:   88:  KIND_USER
        -:   89:};
        -:   90:
        -:   91:struct OpenDDS_Dcps_Export GUID_tKeyLessThan {
        -:   92:  static bool entity_less(const EntityId_t& v1, const EntityId_t& v2)
        -:   93:  {
        -:   94:    return std::memcmp(&v1, &v2, sizeof(EntityId_t)) < 0;
        -:   95:  }
        -:   96:
     1476:   97:  bool operator()(const GUID_t& v1, const GUID_t& v2) const
        -:   98:  {
     1476:   99:    return std::memcmp(&v1, &v2, sizeof(GUID_t)) < 0;
        -:  100:  }
        -:  101:};
        -:  102:
        -:  103:typedef OPENDDS_SET_CMP(RepoId, GUID_tKeyLessThan) RepoIdSet;
        -:  104:
        -:  105:inline size_t
        -:  106:gen_max_marshaled_size(const GUID_t&)
        -:  107:{
        -:  108:  return 16;
        -:  109:}
        -:  110:
        -:  111:#ifndef OPENDDS_SAFETY_PROFILE
        -:  112:inline bool
        -:  113:operator==(const GUID_t& lhs, const GUID_t& rhs)
        -:  114:{
        -:  115:  GUID_tKeyLessThan lessThan;
        -:  116:  return !lessThan(lhs, rhs) && !lessThan(rhs, lhs);
        -:  117:}
        -:  118:
        -:  119:inline bool
        -:  120:operator!=(const GUID_t& lhs, const GUID_t& rhs)
        -:  121:{
        -:  122:  return !(lhs == rhs);
        -:  123:}
        -:  124:#endif
        -:  125:
        -:  126:struct GuidPrefixEqual {
        -:  127:
        -:  128:  bool
        -:  129:  operator() (const GuidPrefix_t& lhs, const GuidPrefix_t& rhs) const
        -:  130:  {
        -:  131:    return std::memcmp(&lhs, &rhs, sizeof(GuidPrefix_t)) == 0;
        -:  132:  }
        -:  133:};
        -:  134:
        -:  135:#ifndef OPENDDS_SAFETY_PROFILE
        -:  136:inline bool
        -:  137:operator==(const EntityId_t& lhs, const EntityId_t& rhs)
        -:  138:{
        -:  139:  return !GUID_tKeyLessThan::entity_less(lhs, rhs)
        -:  140:    && !GUID_tKeyLessThan::entity_less(rhs, lhs);
        -:  141:}
        -:  142:
        -:  143:inline bool
        -:  144:operator!=(const EntityId_t& lhs, const EntityId_t& rhs)
        -:  145:{
        -:  146:  return !(lhs == rhs);
        -:  147:}
        -:  148:#endif
        -:  149:
        -:  150:struct EntityIdConverter {
        -:  151:  explicit EntityIdConverter(const unsigned char (&o)[4])
        -:  152:  {
        -:  153:    std::memcpy(&entityId, o, sizeof(EntityId_t));
        -:  154:  }
        -:  155:
        -:  156:  operator EntityId_t() const { return entityId; }
        -:  157:
        -:  158:  EntityId_t entityId;
        -:  159:};
        -:  160:
        -:  161:OpenDDS_Dcps_Export OPENDDS_STRING
        -:  162:to_string(const GUID_t& guid);
        -:  163:
        -:  164:OpenDDS_Dcps_Export OPENDDS_STRING
        -:  165:to_string(const EntityId_t& entityId);
        -:  166:
        -:  167:#ifndef OPENDDS_SAFETY_PROFILE
        -:  168:// Serialize to ASCII Hex string: "xxxx.xxxx.xxxx.xxxx"
        -:  169:OpenDDS_Dcps_Export std::ostream&
        -:  170:operator<<(std::ostream& os, const GUID_t& rhs);
        -:  171:
        -:  172:// Deserialize from ASCII Hex string: "xxxx.xxxx.xxxx.xxxx"
        -:  173:OpenDDS_Dcps_Export std::istream&
        -:  174:operator>>(std::istream& is, GUID_t& rhs);
        -:  175:#endif
        -:  176:} // namespace DCPS
        -:  177:} // namespace OpenDDS
        -:  178:
        -:  179:OPENDDS_END_VERSIONED_NAMESPACE_DECL
        -:  180:
        -:  181:#endif /* GUIDUTILS_H */
