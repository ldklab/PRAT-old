105c105
<        82:  103:  bool demarshal_sequence(stream & strm, TAO::unbounded_value_sequence <CORBA::Octet> & target) {
---
>        92:  103:  bool demarshal_sequence(stream & strm, TAO::unbounded_value_sequence <CORBA::Octet> & target) {
107,108c107,108
<        82:  105:    ::CORBA::ULong new_length = 0;
<        82:  106:    if (!(strm >> new_length)) {
---
>        92:  105:    ::CORBA::ULong new_length = 0;
>        92:  106:    if (!(strm >> new_length)) {
111c111
<        82:  109:    if (new_length > strm.length()) {
---
>        92:  109:    if (new_length > strm.length()) {
114,116c114,116
<       164:  112:    sequence tmp(new_length);
<        82:  113:    tmp.length(new_length);
<        82:  114:    if (ACE_BIT_DISABLED (strm.start ()->flags (), ACE_Message_Block::DONT_DELETE))
---
>       184:  112:    sequence tmp(new_length);
>        92:  113:    tmp.length(new_length);
>        92:  114:    if (ACE_BIT_DISABLED (strm.start ()->flags (), ACE_Message_Block::DONT_DELETE))
129,130c129,130
<        82:  127:    typename sequence::value_type * buffer = tmp.get_buffer();
<        82:  128:    if (!strm.read_octet_array (buffer, new_length)) {
---
>        92:  127:    typename sequence::value_type * buffer = tmp.get_buffer();
>        92:  128:    if (!strm.read_octet_array (buffer, new_length)) {
133,134c133,134
<        82:  131:    tmp.swap(target);
<        82:  132:    return true;
---
>        92:  131:    tmp.swap(target);
>        92:  132:    return true;
321c321
<        36:  319:  bool demarshal_sequence(stream & strm, TAO::unbounded_value_sequence <value_t> & target) {
---
>        42:  319:  bool demarshal_sequence(stream & strm, TAO::unbounded_value_sequence <value_t> & target) {
323,324c323,324
<        36:  321:    ::CORBA::ULong new_length = 0;
<        36:  322:    if (!(strm >> new_length)) {
---
>        42:  321:    ::CORBA::ULong new_length = 0;
>        42:  322:    if (!(strm >> new_length)) {
327c327
<        36:  325:    if (new_length > strm.length()) {
---
>        42:  325:    if (new_length > strm.length()) {
330,334c330,334
<        72:  328:    sequence tmp(new_length);
<        36:  329:    tmp.length(new_length);
<        36:  330:    typename sequence::value_type * buffer = tmp.get_buffer();
<        58:  331:    for(CORBA::ULong i = 0; i < new_length; ++i) {
<        22:  332:      if (!(strm >> buffer[i])) {
---
>        84:  328:    sequence tmp(new_length);
>        42:  329:    tmp.length(new_length);
>        42:  330:    typename sequence::value_type * buffer = tmp.get_buffer();
>        66:  331:    for(CORBA::ULong i = 0; i < new_length; ++i) {
>        24:  332:      if (!(strm >> buffer[i])) {
338,339c338,339
<        36:  336:    tmp.swap(target);
<        36:  337:    return true;
---
>        42:  336:    tmp.swap(target);
>        42:  337:    return true;
343c343
<        34:  341:  bool demarshal_sequence(stream & strm, TAO::unbounded_basic_string_sequence <charT> & target) {
---
>        37:  341:  bool demarshal_sequence(stream & strm, TAO::unbounded_basic_string_sequence <charT> & target) {
347,348c347,348
<        34:  345:    ::CORBA::ULong new_length = 0;
<        34:  346:    if (!(strm >> new_length)) {
---
>        37:  345:    ::CORBA::ULong new_length = 0;
>        37:  346:    if (!(strm >> new_length)) {
351c351
<        34:  349:    if (new_length > strm.length()) {
---
>        37:  349:    if (new_length > strm.length()) {
354c354
<        68:  352:    sequence tmp(new_length, new_length,
---
>        74:  352:    sequence tmp(new_length, new_length,
357c357
<        34:  355:    for(CORBA::ULong i = 0; i < new_length; ++i) {
---
>        37:  355:    for(CORBA::ULong i = 0; i < new_length; ++i) {
366,367c366,367
<        34:  364:    tmp.swap(target);
<        34:  365:    return true;
---
>        37:  364:    tmp.swap(target);
>        37:  365:    return true;
466,468c466,468
<        78:  464:  bool marshal_sequence(stream & strm, const TAO::unbounded_value_sequence <CORBA::Octet> & source) {
<        78:  465:    ::CORBA::ULong const length = source.length ();
<        78:  466:    if (!(strm << length)) {
---
>        84:  464:  bool marshal_sequence(stream & strm, const TAO::unbounded_value_sequence <CORBA::Octet> & source) {
>        84:  465:    ::CORBA::ULong const length = source.length ();
>        84:  466:    if (!(strm << length)) {
471c471
<        78:  469:    if (source.mb ()) {
---
>        84:  469:    if (source.mb ()) {
474c474
<        78:  472:    return strm.write_octet_array (source.get_buffer (), length);
---
>        84:  472:    return strm.write_octet_array (source.get_buffer (), length);
562,564c562,564
<        40:  560:  bool marshal_sequence(stream & strm, const TAO::unbounded_value_sequence <value_t> & source) {
<        40:  561:    ::CORBA::ULong const length = source.length ();
<        40:  562:    if (!(strm << length)) {
---
>        42:  560:  bool marshal_sequence(stream & strm, const TAO::unbounded_value_sequence <value_t> & source) {
>        42:  561:    ::CORBA::ULong const length = source.length ();
>        42:  562:    if (!(strm << length)) {
567,568c567,568
<        68:  565:    for(CORBA::ULong i = 0; i < length; ++i) {
<        28:  566:      if (!(strm << source[i])) {
---
>        72:  565:    for(CORBA::ULong i = 0; i < length; ++i) {
>        30:  566:      if (!(strm << source[i])) {
572c572
<        40:  570:    return true;
---
>        42:  570:    return true;
576,578c576,578
<        30:  574:  bool marshal_sequence(stream & strm, const TAO::unbounded_basic_string_sequence <charT> & source) {
<        30:  575:    ::CORBA::ULong const length = source.length ();
<        30:  576:    if (!(strm << length)) {
---
>        33:  574:  bool marshal_sequence(stream & strm, const TAO::unbounded_basic_string_sequence <charT> & source) {
>        33:  575:    ::CORBA::ULong const length = source.length ();
>        33:  576:    if (!(strm << length)) {
581c581
<        30:  579:    for(CORBA::ULong i = 0; i < length; ++i) {
---
>        33:  579:    for(CORBA::ULong i = 0; i < length; ++i) {
586c586
<        30:  584:    return true;
---
>        33:  584:    return true;
