115,116c115,116
<         6:  113:      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
<        43:  114:      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
---
>         8:  113:      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
>        84:  114:      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
145,146c145,146
<        12:  143:      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
<        12:  144:      : _M_node(__x) { }
---
>        16:  143:      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
>        16:  144:      : _M_node(__x) { }
229,230c229,230
<         9:  227:      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
<         9:  228:      : _M_node(__x._M_node) { }
---
>        12:  227:      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
>        12:  228:      : _M_node(__x._M_node) { }
238,239c238,239
<         3:  236:      operator*() const _GLIBCXX_NOEXCEPT
<         3:  237:      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
---
>         4:  236:      operator*() const _GLIBCXX_NOEXCEPT
>         4:  237:      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
246c246
<         3:  244:      operator++() _GLIBCXX_NOEXCEPT
---
>         4:  244:      operator++() _GLIBCXX_NOEXCEPT
248,249c248,249
<         3:  246:	_M_node = _M_node->_M_next;
<         3:  247:	return *this;
---
>         4:  246:	_M_node = _M_node->_M_next;
>         4:  247:	return *this;
280,281c280,281
<         6:  278:      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
<         6:  279:      { return _M_node != __x._M_node; }
---
>         8:  278:      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
>         8:  279:      { return _M_node != __x._M_node; }
325c325
<         3:  323:      struct _List_impl
---
>         4:  323:      struct _List_impl
334,336c334,336
<         3:  332:	_List_impl() _GLIBCXX_NOEXCEPT
<         3:  333:	: _Node_alloc_type(), _M_node()
<         3:  334:	{ }
---
>         4:  332:	_List_impl() _GLIBCXX_NOEXCEPT
>         4:  333:	: _Node_alloc_type(), _M_node()
>         4:  334:	{ }
354c354
<         3:  352:      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
---
>         4:  352:      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
356c356
<         3:  354:      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
---
>         4:  354:      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
384,385c384,385
<         3:  382:      _M_get_node()
<         3:  383:      { return _Node_alloc_traits::allocate(_M_impl, 1); }
---
>         4:  382:      _M_get_node()
>         4:  383:      { return _Node_alloc_traits::allocate(_M_impl, 1); }
388,389c388,389
<         3:  386:      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
<         3:  387:      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
---
>         4:  386:      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
>         4:  387:      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
395,396c395,396
<         6:  393:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
<         6:  394:      { return _M_impl; }
---
>         8:  393:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
>         8:  394:      { return _M_impl; }
402,404c402,404
<         3:  400:      _List_base()
<         3:  401:      : _M_impl()
<         3:  402:      { _M_init(); }
---
>         4:  400:      _List_base()
>         4:  401:      : _M_impl()
>         4:  402:      { _M_init(); }
443,444c443,444
<         3:  441:      ~_List_base() _GLIBCXX_NOEXCEPT
<         3:  442:      { _M_clear(); }
---
>         4:  441:      ~_List_base() _GLIBCXX_NOEXCEPT
>         4:  442:      { _M_clear(); }
450c450
<         3:  448:      _M_init() _GLIBCXX_NOEXCEPT
---
>         4:  448:      _M_init() _GLIBCXX_NOEXCEPT
452,455c452,455
<         3:  450:	this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
<         3:  451:	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
<         3:  452:	_M_set_size(0);
<         3:  453:      }
---
>         4:  450:	this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
>         4:  451:	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
>         4:  452:	_M_set_size(0);
>         4:  453:      }
572c572
<         3:  570:	_M_create_node(_Args&&... __args)
---
>         4:  570:	_M_create_node(_Args&&... __args)
574,577c574,577
<         3:  572:	  auto __p = this->_M_get_node();
<         3:  573:	  auto& __alloc = _M_get_Node_allocator();
<         6:  574:	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
<         3:  575:	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
---
>         4:  572:	  auto __p = this->_M_get_node();
>         4:  573:	  auto& __alloc = _M_get_Node_allocator();
>         8:  574:	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
>         4:  575:	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
579,580c579,580
<         3:  577:	  __guard = nullptr;
<         6:  578:	  return __p;
---
>         4:  577:	  __guard = nullptr;
>         8:  578:	  return __p;
591c591
<         3:  589:      list()
---
>         4:  589:      list()
595c595
<         3:  593:      : _Base() { }
---
>         4:  593:      : _Base() { }
735c735
<         3:  733:      ~list() = default;
---
>         4:  733:      ~list() = default;
853,854c853,854
<         3:  851:      begin() _GLIBCXX_NOEXCEPT
<         3:  852:      { return iterator(this->_M_impl._M_node._M_next); }
---
>         4:  851:      begin() _GLIBCXX_NOEXCEPT
>         4:  852:      { return iterator(this->_M_impl._M_node._M_next); }
871,872c871,872
<         9:  869:      end() _GLIBCXX_NOEXCEPT
<         9:  870:      { return iterator(&this->_M_impl._M_node); }
---
>        12:  869:      end() _GLIBCXX_NOEXCEPT
>        12:  870:      { return iterator(&this->_M_impl._M_node); }
963,964c963,964
<         3:  961:      empty() const _GLIBCXX_NOEXCEPT
<         3:  962:      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
---
>         4:  961:      empty() const _GLIBCXX_NOEXCEPT
>         4:  962:      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
1119,1120c1119,1120
<         3: 1117:      push_back(const value_type& __x)
<         3: 1118:      { this->_M_insert(end(), __x); }
---
>         4: 1117:      push_back(const value_type& __x)
>         4: 1118:      { this->_M_insert(end(), __x); }
1801c1801
<         3: 1799:       _M_insert(iterator __position, _Args&&... __args)
---
>         4: 1799:       _M_insert(iterator __position, _Args&&... __args)
1803,1806c1803,1806
<         3: 1801:	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
<         3: 1802:	 __tmp->_M_hook(__position._M_node);
<         3: 1803:	 this->_M_inc_size(1);
<         3: 1804:       }
---
>         4: 1801:	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
>         4: 1802:	 __tmp->_M_hook(__position._M_node);
>         4: 1803:	 this->_M_inc_size(1);
>         4: 1804:       }
