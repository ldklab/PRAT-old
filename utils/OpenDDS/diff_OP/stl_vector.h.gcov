83c83
<       108:   81:      struct _Vector_impl
---
>       202:   81:      struct _Vector_impl
90,92c90,92
<       109:   88:	_Vector_impl()
<       109:   89:	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
<       109:   90:	{ }
---
>       204:   88:	_Vector_impl()
>       204:   89:	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
>       204:   90:	{ }
117,118c117,118
<       276:  115:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
<       276:  116:      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
---
>       514:  115:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
>       514:  116:      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
121,122c121,122
<        82:  119:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
<        82:  120:      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
---
>       146:  119:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
>       146:  120:      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
128,129c128,129
<       109:  126:      _Vector_base()
<       109:  127:      : _M_impl() { }
---
>       204:  126:      _Vector_base()
>       204:  127:      : _M_impl() { }
163,165c163,165
<       108:  161:      ~_Vector_base() _GLIBCXX_NOEXCEPT
<       216:  162:      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
<       216:  163:		      - this->_M_impl._M_start); }
---
>       202:  161:      ~_Vector_base() _GLIBCXX_NOEXCEPT
>       404:  162:      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
>       404:  163:		      - this->_M_impl._M_start); }
171c171
<        52:  169:      _M_allocate(size_t __n)
---
>       100:  169:      _M_allocate(size_t __n)
174c174
<        52:  172:	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
---
>       100:  172:	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
178c178
<       160:  176:      _M_deallocate(pointer __p, size_t __n)
---
>       302:  176:      _M_deallocate(pointer __p, size_t __n)
181,183c181,183
<       160:  179:	if (__p)
<        53:  180:	  _Tr::deallocate(_M_impl, __p, __n);
<       160:  181:      }
---
>       302:  179:	if (__p)
>       101:  180:	  _Tr::deallocate(_M_impl, __p, __n);
>       302:  181:      }
261c261
<       109:  259:      vector()
---
>       204:  259:      vector()
265c265
<       109:  263:      : _Base() { }
---
>       204:  263:      : _Base() { }
435,437c435,437
<       108:  433:      ~vector() _GLIBCXX_NOEXCEPT
<       108:  434:      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
<       216:  435:		      _M_get_Tp_allocator()); }
---
>       202:  433:      ~vector() _GLIBCXX_NOEXCEPT
>       202:  434:      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
>       404:  435:		      _M_get_Tp_allocator()); }
565,566c565,566
<        54:  563:      begin() _GLIBCXX_NOEXCEPT
<        54:  564:      { return iterator(this->_M_impl._M_start); }
---
>       100:  563:      begin() _GLIBCXX_NOEXCEPT
>       100:  564:      { return iterator(this->_M_impl._M_start); }
574,575c574,575
<        75:  572:      begin() const _GLIBCXX_NOEXCEPT
<        75:  573:      { return const_iterator(this->_M_impl._M_start); }
---
>       180:  572:      begin() const _GLIBCXX_NOEXCEPT
>       180:  573:      { return const_iterator(this->_M_impl._M_start); }
583,584c583,584
<        55:  581:      end() _GLIBCXX_NOEXCEPT
<        55:  582:      { return iterator(this->_M_impl._M_finish); }
---
>       107:  581:      end() _GLIBCXX_NOEXCEPT
>       107:  582:      { return iterator(this->_M_impl._M_finish); }
592,593c592,593
<        75:  590:      end() const _GLIBCXX_NOEXCEPT
<        75:  591:      { return const_iterator(this->_M_impl._M_finish); }
---
>       180:  590:      end() const _GLIBCXX_NOEXCEPT
>       180:  591:      { return const_iterator(this->_M_impl._M_finish); }
638,639c638,639
<         5:  636:      cbegin() const noexcept
<         5:  637:      { return const_iterator(this->_M_impl._M_start); }
---
>        10:  636:      cbegin() const noexcept
>        10:  637:      { return const_iterator(this->_M_impl._M_start); }
672,673c672,673
<       262:  670:      size() const _GLIBCXX_NOEXCEPT
<       262:  671:      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
---
>       443:  670:      size() const _GLIBCXX_NOEXCEPT
>       443:  671:      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
677,678c677,678
<        82:  675:      max_size() const _GLIBCXX_NOEXCEPT
<        82:  676:      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
---
>       146:  675:      max_size() const _GLIBCXX_NOEXCEPT
>       146:  676:      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
752,754c752,754
<        22:  750:      capacity() const _GLIBCXX_NOEXCEPT
<        22:  751:      { return size_type(this->_M_impl._M_end_of_storage
<        22:  752:			 - this->_M_impl._M_start); }
---
>        54:  750:      capacity() const _GLIBCXX_NOEXCEPT
>        54:  751:      { return size_type(this->_M_impl._M_end_of_storage
>        54:  752:			 - this->_M_impl._M_start); }
761,762c761,762
<        75:  759:      empty() const _GLIBCXX_NOEXCEPT
<        75:  760:      { return begin() == end(); }
---
>       180:  759:      empty() const _GLIBCXX_NOEXCEPT
>       180:  760:      { return begin() == end(); }
797c797
<        57:  795:      operator[](size_type __n) _GLIBCXX_NOEXCEPT
---
>        81:  795:      operator[](size_type __n) _GLIBCXX_NOEXCEPT
800c800
<        57:  798:	return *(this->_M_impl._M_start + __n);
---
>        81:  798:	return *(this->_M_impl._M_start + __n);
824c824
<        12:  822:      _M_range_check(size_type __n) const
---
>        28:  822:      _M_range_check(size_type __n) const
826c826
<        12:  824:	if (__n >= this->size())
---
>        28:  824:	if (__n >= this->size())
831c831
<        12:  829:      }
---
>        28:  829:      }
846c846
<        12:  844:      at(size_type __n)
---
>        28:  844:      at(size_type __n)
848,849c848,849
<        12:  846:	_M_range_check(__n);
<        12:  847:	return (*this)[__n];
---
>        28:  846:	_M_range_check(__n);
>        28:  847:	return (*this)[__n];
897c897
<        13:  895:      back() _GLIBCXX_NOEXCEPT
---
>        30:  895:      back() _GLIBCXX_NOEXCEPT
900c900
<        13:  898:	return *(end() - 1);
---
>        30:  898:	return *(end() - 1);
941c941
<        33:  939:      push_back(const value_type& __x)
---
>        60:  939:      push_back(const value_type& __x)
943c943
<        33:  941:	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
---
>        60:  941:	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
945c945
<        10:  943:	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
---
>        26:  943:	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
947c947
<        10:  945:	    ++this->_M_impl._M_finish;
---
>        26:  945:	    ++this->_M_impl._M_finish;
950,951c950,951
<        23:  948:	  _M_realloc_insert(end(), __x);
<        33:  949:      }
---
>        34:  948:	  _M_realloc_insert(end(), __x);
>        60:  949:      }
955,956c955,956
<        13:  953:      push_back(value_type&& __x)
<        13:  954:      { emplace_back(std::move(__x)); }
---
>        14:  953:      push_back(value_type&& __x)
>        14:  954:      { emplace_back(std::move(__x)); }
977c977
<        11:  975:      pop_back() _GLIBCXX_NOEXCEPT
---
>        28:  975:      pop_back() _GLIBCXX_NOEXCEPT
980,982c980,982
<        11:  978:	--this->_M_impl._M_finish;
<        11:  979:	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
<        11:  980:      }
---
>        28:  978:	--this->_M_impl._M_finish;
>        28:  979:	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
>        28:  980:      }
1208c1208
<         1: 1206:      erase(const_iterator __first, const_iterator __last)
---
>         2: 1206:      erase(const_iterator __first, const_iterator __last)
1210,1212c1210,1212
<         1: 1208:	const auto __beg = begin();
<         1: 1209:	const auto __cbeg = cbegin();
<         1: 1210:	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
---
>         2: 1208:	const auto __beg = begin();
>         2: 1209:	const auto __cbeg = cbegin();
>         2: 1210:	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1249,1250c1249,1250
<        34: 1247:      clear() _GLIBCXX_NOEXCEPT
<        34: 1248:      { _M_erase_at_end(this->_M_impl._M_start); }
---
>        66: 1247:      clear() _GLIBCXX_NOEXCEPT
>        66: 1248:      { _M_erase_at_end(this->_M_impl._M_start); }
1259c1259
<        22: 1257:	_M_allocate_and_copy(size_type __n,
---
>        54: 1257:	_M_allocate_and_copy(size_type __n,
1262c1262
<        22: 1260:	  pointer __result = this->_M_allocate(__n);
---
>        54: 1260:	  pointer __result = this->_M_allocate(__n);
1265,1267c1265,1267
<        22: 1263:	      std::__uninitialized_copy_a(__first, __last, __result,
<        22: 1264:					  _M_get_Tp_allocator());
<        22: 1265:	      return __result;
---
>        54: 1263:	      std::__uninitialized_copy_a(__first, __last, __result,
>        54: 1264:					  _M_get_Tp_allocator());
>        54: 1265:	      return __result;
1504c1504
<        30: 1502:      _M_check_len(size_type __n, const char* __s) const
---
>        46: 1502:      _M_check_len(size_type __n, const char* __s) const
1506c1506
<        30: 1504:	if (max_size() - size() < __n)
---
>        46: 1504:	if (max_size() - size() < __n)
1509,1510c1509,1510
<        30: 1507:	const size_type __len = size() + std::max(size(), __n);
<        30: 1508:	return (__len < size() || __len > max_size()) ? max_size() : __len;
---
>        46: 1507:	const size_type __len = size() + std::max(size(), __n);
>        46: 1508:	return (__len < size() || __len > max_size()) ? max_size() : __len;
1518c1518
<        34: 1516:      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
---
>        66: 1516:      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
1520,1522c1520,1522
<        34: 1518:	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
<        34: 1519:	this->_M_impl._M_finish = __pos;
<        34: 1520:      }
---
>        66: 1518:	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
>        66: 1519:	this->_M_impl._M_finish = __pos;
>        66: 1520:      }
