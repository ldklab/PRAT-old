2c2
<         -:    0:Programs:51
---
>         -:    0:Programs:15
51,52c51,52
<         -:   49:  inline unbounded_value_sequence<CORBA::Octet>()
<         -:   50:    : maximum_ (allocation_traits::default_maximum())
---
>     #####:   49:  inline unbounded_value_sequence<CORBA::Octet>()
>     #####:   50:    : maximum_ (allocation_traits::default_maximum())
54,57c54,57
<         -:   52:    , buffer_ (allocation_traits::default_buffer_allocation())
<         -:   53:    , release_ (buffer_ != 0)
<         -:   54:    , mb_ (0)
<         -:   55:  {}
---
>     #####:   52:    , buffer_ (allocation_traits::default_buffer_allocation())
>     #####:   53:    , release_ (buffer_ != 0)
>     #####:   54:    , mb_ (0)
>     #####:   55:  {}
65,92d64
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhEC2Ej:
<     #####:   56:  inline explicit unbounded_value_sequence<CORBA::Octet>(CORBA::ULong maximum)
<     #####:   57:    : maximum_(maximum)
<         -:   58:    , length_(0)
<     #####:   59:    , buffer_(allocbuf(maximum_))
<         -:   60:    , release_(true)
<     #####:   61:    , mb_ (0)
<     #####:   62:  {}
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhEC2Ej:
<     #####:   56:  inline explicit unbounded_value_sequence<CORBA::Octet>(CORBA::ULong maximum)
<     #####:   57:    : maximum_(maximum)
<         -:   58:    , length_(0)
<     #####:   59:    , buffer_(allocbuf(maximum_))
<         -:   60:    , release_(true)
<     #####:   61:    , mb_ (0)
<     #####:   62:  {}
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhEC2Ej:
<     #####:   56:  inline explicit unbounded_value_sequence<CORBA::Octet>(CORBA::ULong maximum)
<     #####:   57:    : maximum_(maximum)
<         -:   58:    , length_(0)
<     #####:   59:    , buffer_(allocbuf(maximum_))
<         -:   60:    , release_(true)
<     #####:   61:    , mb_ (0)
<     #####:   62:  {}
< ------------------
110,134d81
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhED2Ev:
<     #####:   74:  inline ~unbounded_value_sequence<CORBA::Octet>() {
<     #####:   75:    if (mb_)
<     #####:   76:      ACE_Message_Block::release (mb_);
<     #####:   77:    if (release_)
<     #####:   78:      freebuf(buffer_);
<     #####:   79:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhED2Ev:
<     #####:   74:  inline ~unbounded_value_sequence<CORBA::Octet>() {
<     #####:   75:    if (mb_)
<     #####:   76:      ACE_Message_Block::release (mb_);
<     #####:   77:    if (release_)
<     #####:   78:      freebuf(buffer_);
<     #####:   79:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhED2Ev:
<     #####:   74:  inline ~unbounded_value_sequence<CORBA::Octet>() {
<     #####:   75:    if (mb_)
<     #####:   76:      ACE_Message_Block::release (mb_);
<     #####:   77:    if (release_)
<     #####:   78:      freebuf(buffer_);
<     #####:   79:  }
< ------------------
183,184c130,131
<         -:  128:  inline CORBA::ULong length() const {
<         -:  129:    return length_;
---
>     #####:  128:  inline CORBA::ULong length() const {
>     #####:  129:    return length_;
186,187c133,134
<         -:  131:  inline void length(CORBA::ULong length) {
<         -:  132:    if (length <= maximum_)
---
>     #####:  131:  inline void length(CORBA::ULong length) {
>     #####:  132:    if (length <= maximum_)
189c136
<         -:  134:        if (this->mb_ == 0)
---
>     #####:  134:        if (this->mb_ == 0)
191c138
<         -:  136:            length_ = length;
---
>     #####:  136:            length_ = length;
195,197c142,144
<         -:  140:            unbounded_value_sequence<CORBA::Octet> tmp(length);
<         -:  141:            tmp.length_ = length;
<         -:  142:            element_traits::copy_range(
---
>     #####:  140:            unbounded_value_sequence<CORBA::Octet> tmp(length);
>     #####:  141:            tmp.length_ = length;
>     #####:  142:            element_traits::copy_range(
199,201c146,148
<         -:  144:              buffer_ + length,
<         -:  145:              ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<         -:  146:            swap(tmp);
---
>     #####:  144:              buffer_ + length,
>     #####:  145:              ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
>     #####:  146:            swap(tmp);
203c150
<         -:  148:        return;
---
>     #####:  148:        return;
206,208c153,155
<         -:  151:    unbounded_value_sequence<CORBA::Octet> tmp(length);
<         -:  152:    tmp.length_ = length;
<         -:  153:    element_traits::copy_range(
---
>     #####:  151:    unbounded_value_sequence<CORBA::Octet> tmp(length);
>     #####:  152:    tmp.length_ = length;
>     #####:  153:    element_traits::copy_range(
210,212c157,159
<         -:  155:      buffer_ + length_,
<         -:  156:      ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
<         -:  157:    swap(tmp);
---
>     #####:  155:      buffer_ + length_,
>     #####:  156:      ACE_make_checked_array_iterator (tmp.buffer_, tmp.length_));
>     #####:  157:    swap(tmp);
230,231c177,178
<         -:  175:  inline value_type const * get_buffer() const {
<         -:  176:    if (buffer_ == 0)
---
>     #####:  175:  inline value_type const * get_buffer() const {
>     #####:  176:    if (buffer_ == 0)
233,234c180,181
<         -:  178:        buffer_ = allocbuf(maximum_);
<         -:  179:        release_ = true;
---
>     #####:  178:        buffer_ = allocbuf(maximum_);
>     #####:  179:        release_ = true;
236c183
<         -:  181:    return buffer_;
---
>     #####:  181:    return buffer_;
238,239c185,186
<         -:  183:  inline value_type * get_buffer(CORBA::Boolean orphan = false) {
<         -:  184:    if (orphan && !release_)
---
>     #####:  183:  inline value_type * get_buffer(CORBA::Boolean orphan = false) {
>     #####:  184:    if (orphan && !release_)
241c188
<         -:  186:      return 0;
---
>     #####:  186:      return 0;
243c190
<         -:  188:    if (buffer_ == 0)
---
>     #####:  188:    if (buffer_ == 0)
245,246c192,193
<         -:  190:      buffer_ = allocbuf(maximum_);
<         -:  191:      if (!orphan)
---
>     #####:  190:      buffer_ = allocbuf(maximum_);
>     #####:  191:      if (!orphan)
248c195
<         -:  193:          release_ = true;
---
>     #####:  193:          release_ = true;
251c198
<         -:  196:    if (!orphan)
---
>     #####:  196:    if (!orphan)
253c200
<         -:  198:      return buffer_;
---
>     #####:  198:      return buffer_;
256,258c203,205
<         -:  201:    unbounded_value_sequence<CORBA::Octet> tmp;
<         -:  202:    swap(tmp);
<         -:  203:    tmp.release_ = false;
---
>     #####:  201:    unbounded_value_sequence<CORBA::Octet> tmp;
>     #####:  202:    swap(tmp);
>     #####:  203:    tmp.release_ = false;
260c207
<         -:  205:    return tmp.buffer_;
---
>     #####:  205:    return tmp.buffer_;
290,322d236
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE4swapERS1_:
<     #####:  228:  inline void swap(unbounded_value_sequence & rhs) throw() {
<     #####:  229:    std::swap (mb_, rhs.mb_);
<     #####:  230:    std::swap (maximum_, rhs.maximum_);
<     #####:  231:    std::swap (length_, rhs.length_);
<     #####:  232:    std::swap (buffer_, rhs.buffer_);
<     #####:  233:    std::swap (release_, rhs.release_);
<     #####:  234:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE4swapERS1_:
<     #####:  228:  inline void swap(unbounded_value_sequence & rhs) throw() {
<     #####:  229:    std::swap (mb_, rhs.mb_);
<     #####:  230:    std::swap (maximum_, rhs.maximum_);
<     #####:  231:    std::swap (length_, rhs.length_);
<     #####:  232:    std::swap (buffer_, rhs.buffer_);
<     #####:  233:    std::swap (release_, rhs.release_);
<     #####:  234:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE4swapERS1_:
<     #####:  228:  inline void swap(unbounded_value_sequence & rhs) throw() {
<     #####:  229:    std::swap (mb_, rhs.mb_);
<     #####:  230:    std::swap (maximum_, rhs.maximum_);
<     #####:  231:    std::swap (length_, rhs.length_);
<     #####:  232:    std::swap (buffer_, rhs.buffer_);
<     #####:  233:    std::swap (release_, rhs.release_);
<     #####:  234:  }
< ------------------
<     #####:  235:  static value_type * allocbuf(CORBA::ULong maximum) {
<     #####:  236:    return allocation_traits::allocbuf(maximum);
<         -:  237:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE8allocbufEj:
326,351d239
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE8allocbufEj:
<     #####:  235:  static value_type * allocbuf(CORBA::ULong maximum) {
<     #####:  236:    return allocation_traits::allocbuf(maximum);
<         -:  237:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE8allocbufEj:
<     #####:  235:  static value_type * allocbuf(CORBA::ULong maximum) {
<     #####:  236:    return allocation_traits::allocbuf(maximum);
<         -:  237:  }
< ------------------
<     #####:  238:  static void freebuf(value_type * buffer) {
<     #####:  239:    allocation_traits::freebuf(buffer);
<     #####:  240:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE7freebufEPh:
<     #####:  238:  static void freebuf(value_type * buffer) {
<     #####:  239:    allocation_traits::freebuf(buffer);
<     #####:  240:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE7freebufEPh:
<     #####:  238:  static void freebuf(value_type * buffer) {
<     #####:  239:    allocation_traits::freebuf(buffer);
<     #####:  240:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhE7freebufEPh:
355d242
< ------------------
370,484c257
<     #####:  255:  unbounded_value_sequence<CORBA::Octet> (
<         -:  256:    const unbounded_value_sequence<CORBA::Octet> &rhs)
<     #####:  257:    : maximum_ (0)
<         -:  258:    , length_ (0)
<         -:  259:    , buffer_(0)
<         -:  260:    , release_(false)
<     #####:  261:    , mb_ (0)
<         -:  262:  {
<     #####:  263:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
<         -:  264:    {
<     #####:  265:      maximum_ = rhs.maximum_;
<     #####:  266:      length_ = rhs.length_;
<     #####:  267:      return;
<         -:  268:    }
<     #####:  269:    unbounded_value_sequence<CORBA::Octet> tmp(rhs.maximum_);
<     #####:  270:    tmp.length_ = rhs.length_;
<     #####:  271:    if (rhs.mb_ == 0)
<         -:  272:      {
<     #####:  273:        ACE_OS::memcpy (tmp.buffer_,
<     #####:  274:                        rhs.buffer_,
<     #####:  275:                        rhs.length_);
<         -:  276:      }
<         -:  277:    else
<         -:  278:      {
<     #####:  279:        size_t offset = 0;
<     #####:  280:        for (const ACE_Message_Block *i = rhs.mb_; i != 0; i = i->cont ())
<         -:  281:          {
<     #####:  282:            ACE_OS::memcpy (tmp.buffer_ + offset,
<     #####:  283:                            i->rd_ptr (),
<         -:  284:                            i->length ());
<         -:  285:
<     #####:  286:            offset += i->length ();
<         -:  287:          }
<         -:  288:      }
<     #####:  289:    swap(tmp);
<         -:  290:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhEC2ERKS1_:
<     #####:  255:  unbounded_value_sequence<CORBA::Octet> (
<         -:  256:    const unbounded_value_sequence<CORBA::Octet> &rhs)
<     #####:  257:    : maximum_ (0)
<         -:  258:    , length_ (0)
<         -:  259:    , buffer_(0)
<         -:  260:    , release_(false)
<     #####:  261:    , mb_ (0)
<         -:  262:  {
<     #####:  263:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
<         -:  264:    {
<     #####:  265:      maximum_ = rhs.maximum_;
<     #####:  266:      length_ = rhs.length_;
<     #####:  267:      return;
<         -:  268:    }
<     #####:  269:    unbounded_value_sequence<CORBA::Octet> tmp(rhs.maximum_);
<     #####:  270:    tmp.length_ = rhs.length_;
<     #####:  271:    if (rhs.mb_ == 0)
<         -:  272:      {
<     #####:  273:        ACE_OS::memcpy (tmp.buffer_,
<     #####:  274:                        rhs.buffer_,
<     #####:  275:                        rhs.length_);
<         -:  276:      }
<         -:  277:    else
<         -:  278:      {
<     #####:  279:        size_t offset = 0;
<     #####:  280:        for (const ACE_Message_Block *i = rhs.mb_; i != 0; i = i->cont ())
<         -:  281:          {
<     #####:  282:            ACE_OS::memcpy (tmp.buffer_ + offset,
<     #####:  283:                            i->rd_ptr (),
<         -:  284:                            i->length ());
<         -:  285:
<     #####:  286:            offset += i->length ();
<         -:  287:          }
<         -:  288:      }
<     #####:  289:    swap(tmp);
<         -:  290:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhEC2ERKS1_:
<     #####:  255:  unbounded_value_sequence<CORBA::Octet> (
<         -:  256:    const unbounded_value_sequence<CORBA::Octet> &rhs)
<     #####:  257:    : maximum_ (0)
<         -:  258:    , length_ (0)
<         -:  259:    , buffer_(0)
<         -:  260:    , release_(false)
<     #####:  261:    , mb_ (0)
<         -:  262:  {
<     #####:  263:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
<         -:  264:    {
<     #####:  265:      maximum_ = rhs.maximum_;
<     #####:  266:      length_ = rhs.length_;
<     #####:  267:      return;
<         -:  268:    }
<     #####:  269:    unbounded_value_sequence<CORBA::Octet> tmp(rhs.maximum_);
<     #####:  270:    tmp.length_ = rhs.length_;
<     #####:  271:    if (rhs.mb_ == 0)
<         -:  272:      {
<     #####:  273:        ACE_OS::memcpy (tmp.buffer_,
<     #####:  274:                        rhs.buffer_,
<     #####:  275:                        rhs.length_);
<         -:  276:      }
<         -:  277:    else
<         -:  278:      {
<     #####:  279:        size_t offset = 0;
<     #####:  280:        for (const ACE_Message_Block *i = rhs.mb_; i != 0; i = i->cont ())
<         -:  281:          {
<     #####:  282:            ACE_OS::memcpy (tmp.buffer_ + offset,
<     #####:  283:                            i->rd_ptr (),
<         -:  284:                            i->length ());
<         -:  285:
<     #####:  286:            offset += i->length ();
<         -:  287:          }
<         -:  288:      }
<     #####:  289:    swap(tmp);
<         -:  290:  }
< ------------------
< _ZN3TAO24unbounded_value_sequenceIhEC2ERKS1_:
<     #####:  255:  unbounded_value_sequence<CORBA::Octet> (
---
>         -:  255:  unbounded_value_sequence<CORBA::Octet> (
486c259
<     #####:  257:    : maximum_ (0)
---
>         -:  257:    : maximum_ (0)
490c263
<     #####:  261:    , mb_ (0)
---
>         -:  261:    , mb_ (0)
492c265
<     #####:  263:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
---
>         -:  263:    if (rhs.maximum_ == 0 || rhs.buffer_ == 0)
494,496c267,269
<     #####:  265:      maximum_ = rhs.maximum_;
<     #####:  266:      length_ = rhs.length_;
<     #####:  267:      return;
---
>         -:  265:      maximum_ = rhs.maximum_;
>         -:  266:      length_ = rhs.length_;
>         -:  267:      return;
498,500c271,273
<     #####:  269:    unbounded_value_sequence<CORBA::Octet> tmp(rhs.maximum_);
<     #####:  270:    tmp.length_ = rhs.length_;
<     #####:  271:    if (rhs.mb_ == 0)
---
>         -:  269:    unbounded_value_sequence<CORBA::Octet> tmp(rhs.maximum_);
>         -:  270:    tmp.length_ = rhs.length_;
>         -:  271:    if (rhs.mb_ == 0)
502,504c275,277
<     #####:  273:        ACE_OS::memcpy (tmp.buffer_,
<     #####:  274:                        rhs.buffer_,
<     #####:  275:                        rhs.length_);
---
>         -:  273:        ACE_OS::memcpy (tmp.buffer_,
>         -:  274:                        rhs.buffer_,
>         -:  275:                        rhs.length_);
508,509c281,282
<     #####:  279:        size_t offset = 0;
<     #####:  280:        for (const ACE_Message_Block *i = rhs.mb_; i != 0; i = i->cont ())
---
>         -:  279:        size_t offset = 0;
>         -:  280:        for (const ACE_Message_Block *i = rhs.mb_; i != 0; i = i->cont ())
511,512c284,285
<     #####:  282:            ACE_OS::memcpy (tmp.buffer_ + offset,
<     #####:  283:                            i->rd_ptr (),
---
>         -:  282:            ACE_OS::memcpy (tmp.buffer_ + offset,
>         -:  283:                            i->rd_ptr (),
515c288
<     #####:  286:            offset += i->length ();
---
>         -:  286:            offset += i->length ();
518c291
<     #####:  289:    swap(tmp);
---
>         -:  289:    swap(tmp);
520d292
< ------------------
523c295
<     #####:  293:  operator= (const unbounded_value_sequence<CORBA::Octet> & rhs)
---
>         -:  293:  operator= (const unbounded_value_sequence<CORBA::Octet> & rhs)
525,527c297,299
<     #####:  295:    unbounded_value_sequence<CORBA::Octet> tmp(rhs);
<     #####:  296:    swap(tmp);
<     #####:  297:    return * this;
---
>         -:  295:    unbounded_value_sequence<CORBA::Octet> tmp(rhs);
>         -:  296:    swap(tmp);
>         -:  297:    return * this;
