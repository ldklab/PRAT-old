162,163c162,163
<      344*:  129:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
<      344*:  130:      { return __deque_buf_size(sizeof(_Tp)); }
---
>     #####:  129:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
>     #####:  130:      { return __deque_buf_size(sizeof(_Tp)); }
190,191c190,191
<       344:  129:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
<       344:  130:      { return __deque_buf_size(sizeof(_Tp)); }
---
>     #####:  129:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
>     #####:  130:      { return __deque_buf_size(sizeof(_Tp)); }
219,220c219,220
<       72*:  149:      _Deque_iterator() _GLIBCXX_NOEXCEPT
<       72*:  150:      : _M_cur(), _M_first(), _M_last(), _M_node() { }
---
>     #####:  149:      _Deque_iterator() _GLIBCXX_NOEXCEPT
>     #####:  150:      : _M_cur(), _M_first(), _M_last(), _M_node() { }
227,228c227,228
<        72:  149:      _Deque_iterator() _GLIBCXX_NOEXCEPT
<        72:  150:      : _M_cur(), _M_first(), _M_last(), _M_node() { }
---
>     #####:  149:      _Deque_iterator() _GLIBCXX_NOEXCEPT
>     #####:  150:      : _M_cur(), _M_first(), _M_last(), _M_node() { }
235,237c235,237
<      416*:  152:      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
<      832*:  153:      : _M_cur(__x._M_cur), _M_first(__x._M_first),
<      832*:  154:	_M_last(__x._M_last), _M_node(__x._M_node) { }
---
>     #####:  152:      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
>     #####:  153:      : _M_cur(__x._M_cur), _M_first(__x._M_first),
>     #####:  154:	_M_last(__x._M_last), _M_node(__x._M_node) { }
250,252c250,252
<       134:  152:      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
<       268:  153:      : _M_cur(__x._M_cur), _M_first(__x._M_first),
<       268:  154:	_M_last(__x._M_last), _M_node(__x._M_node) { }
---
>     #####:  152:      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
>     #####:  153:      : _M_cur(__x._M_cur), _M_first(__x._M_first),
>     #####:  154:	_M_last(__x._M_last), _M_node(__x._M_node) { }
255,257c255,257
<       282:  152:      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
<       564:  153:      : _M_cur(__x._M_cur), _M_first(__x._M_first),
<       564:  154:	_M_last(__x._M_last), _M_node(__x._M_node) { }
---
>     #####:  152:      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
>     #####:  153:      : _M_cur(__x._M_cur), _M_first(__x._M_first),
>     #####:  154:	_M_last(__x._M_last), _M_node(__x._M_node) { }
275,276c275,276
<      138*:  161:      operator*() const _GLIBCXX_NOEXCEPT
<      138*:  162:      { return *_M_cur; }
---
>     #####:  161:      operator*() const _GLIBCXX_NOEXCEPT
>     #####:  162:      { return *_M_cur; }
287,288c287,288
<        46:  161:      operator*() const _GLIBCXX_NOEXCEPT
<        46:  162:      { return *_M_cur; }
---
>     #####:  161:      operator*() const _GLIBCXX_NOEXCEPT
>     #####:  162:      { return *_M_cur; }
291,292c291,292
<        92:  161:      operator*() const _GLIBCXX_NOEXCEPT
<        92:  162:      { return *_M_cur; }
---
>     #####:  161:      operator*() const _GLIBCXX_NOEXCEPT
>     #####:  162:      { return *_M_cur; }
308c308
<       46*:  169:      operator++() _GLIBCXX_NOEXCEPT
---
>     #####:  169:      operator++() _GLIBCXX_NOEXCEPT
310,311c310,311
<       46*:  171:	++_M_cur;
<       46*:  172:	if (_M_cur == _M_last)
---
>     #####:  171:	++_M_cur;
>     #####:  172:	if (_M_cur == _M_last)
316c316
<       46*:  177:	return *this;
---
>     #####:  177:	return *this;
332c332
<        46:  169:      operator++() _GLIBCXX_NOEXCEPT
---
>     #####:  169:      operator++() _GLIBCXX_NOEXCEPT
334,335c334,335
<        46:  171:	++_M_cur;
<        46:  172:	if (_M_cur == _M_last)
---
>     #####:  171:	++_M_cur;
>     #####:  172:	if (_M_cur == _M_last)
340c340
<        46:  177:	return *this;
---
>     #####:  177:	return *this;
409c409
<       46*:  209:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
---
>     #####:  209:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
411,413c411,413
<       46*:  211:	const difference_type __offset = __n + (_M_cur - _M_first);
<       46*:  212:	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
<       46*:  213:	  _M_cur += __n;
---
>     #####:  211:	const difference_type __offset = __n + (_M_cur - _M_first);
>     #####:  212:	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
>     #####:  213:	  _M_cur += __n;
424c424
<       46*:  224:	return *this;
---
>     #####:  224:	return *this;
428c428
<        46:  209:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
---
>     #####:  209:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
430,432c430,432
<        46:  211:	const difference_type __offset = __n + (_M_cur - _M_first);
<       46*:  212:	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
<        46:  213:	  _M_cur += __n;
---
>     #####:  211:	const difference_type __offset = __n + (_M_cur - _M_first);
>     #####:  212:	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
>     #####:  213:	  _M_cur += __n;
443c443
<        46:  224:	return *this;
---
>     #####:  224:	return *this;
467c467
<       46*:  228:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
---
>     #####:  228:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
469,470c469,470
<       46*:  230:	_Self __tmp = *this;
<       46*:  231:	return __tmp += __n;
---
>     #####:  230:	_Self __tmp = *this;
>     #####:  231:	return __tmp += __n;
474c474
<        46:  228:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
---
>     #####:  228:      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
476,477c476,477
<        46:  230:	_Self __tmp = *this;
<        46:  231:	return __tmp += __n;
---
>     #####:  230:	_Self __tmp = *this;
>     #####:  231:	return __tmp += __n;
500,501c500,501
<       46*:  246:      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
<       46*:  247:      { return *(*this + __n); }
---
>     #####:  246:      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
>     #####:  247:      { return *(*this + __n); }
504,505c504,505
<        46:  246:      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
<        46:  247:      { return *(*this + __n); }
---
>     #####:  246:      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
>     #####:  247:      { return *(*this + __n); }
518c518
<       72*:  255:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
---
>     #####:  255:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
520,523c520,523
<       72*:  257:	_M_node = __new_node;
<       72*:  258:	_M_first = *__new_node;
<       72*:  259:	_M_last = _M_first + difference_type(_S_buffer_size());
<       72*:  260:      }
---
>     #####:  257:	_M_node = __new_node;
>     #####:  258:	_M_first = *__new_node;
>     #####:  259:	_M_last = _M_first + difference_type(_S_buffer_size());
>     #####:  260:      }
566c566
<        72:  255:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
---
>     #####:  255:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
568,571c568,571
<        72:  257:	_M_node = __new_node;
<        72:  258:	_M_first = *__new_node;
<        72:  259:	_M_last = _M_first + difference_type(_S_buffer_size());
<        72:  260:      }
---
>     #####:  257:	_M_node = __new_node;
>     #####:  258:	_M_first = *__new_node;
>     #####:  259:	_M_last = _M_first + difference_type(_S_buffer_size());
>     #####:  260:      }
596c596
<      102*:  268:    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
---
>     #####:  268:    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
598c598
<      102*:  270:    { return __x._M_cur == __y._M_cur; }
---
>     #####:  270:    { return __x._M_cur == __y._M_cur; }
606c606
<        90:  268:    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
---
>     #####:  268:    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
608c608
<        90:  270:    { return __x._M_cur == __y._M_cur; }
---
>     #####:  270:    { return __x._M_cur == __y._M_cur; }
611c611
<        12:  268:    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
---
>     #####:  268:    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
613c613
<        12:  270:    { return __x._M_cur == __y._M_cur; }
---
>     #####:  270:    { return __x._M_cur == __y._M_cur; }
635c635
<      102*:  281:    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
---
>     #####:  281:    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
637c637
<      102*:  283:    { return !(__x == __y); }
---
>     #####:  283:    { return !(__x == __y); }
645c645
<        90:  281:    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
---
>     #####:  281:    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
647c647
<        90:  283:    { return !(__x == __y); }
---
>     #####:  283:    { return !(__x == __y); }
650c650
<        12:  281:    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
---
>     #####:  281:    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
652c652
<        12:  283:    { return !(__x == __y); }
---
>     #####:  283:    { return !(__x == __y); }
732c732
<      226*:  352:    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
---
>     #####:  352:    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
736,738c736,738
<      226*:  356:	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
<      226*:  357:	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
<      226*:  358:	+ (__y._M_last - __y._M_cur);
---
>     #####:  356:	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
>     #####:  357:	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
>     #####:  358:	+ (__y._M_last - __y._M_cur);
762c762
<       226:  352:    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
---
>     #####:  352:    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
766,768c766,768
<       226:  356:	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
<       226:  357:	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
<       226:  358:	+ (__y._M_last - __y._M_cur);
---
>     #####:  356:	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
>     #####:  357:	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
>     #####:  358:	+ (__y._M_last - __y._M_cur);
912,914c912,914
<       36*:  491:      _Deque_base()
<       36*:  492:      : _M_impl()
<       36*:  493:      { _M_initialize_map(0); }
---
>     #####:  491:      _Deque_base()
>     #####:  492:      : _M_impl()
>     #####:  493:      { _M_initialize_map(0); }
922,924c922,924
<        36:  491:      _Deque_base()
<        36:  492:      : _M_impl()
<        36:  493:      { _M_initialize_map(0); }
---
>     #####:  491:      _Deque_base()
>     #####:  492:      : _M_impl()
>     #####:  493:      { _M_initialize_map(0); }
995c995
<       36*:  558:	_Deque_impl()
---
>     #####:  558:	_Deque_impl()
997,998c997,998
<       36*:  560:	  _M_start(), _M_finish()
<       36*:  561:	{ }
---
>     #####:  560:	  _M_start(), _M_finish()
>     #####:  561:	{ }
1007c1007
<        36:  558:	_Deque_impl()
---
>     #####:  558:	_Deque_impl()
1009,1010c1009,1010
<        36:  560:	  _M_start(), _M_finish()
<        36:  561:	{ }
---
>     #####:  560:	  _M_start(), _M_finish()
>     #####:  561:	{ }
1033c1033
<       24*:  577:	void _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT
---
>     #####:  577:	void _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT
1036,1040c1036,1040
<       24*:  580:	  swap(this->_M_start, __x._M_start);
<       24*:  581:	  swap(this->_M_finish, __x._M_finish);
<       24*:  582:	  swap(this->_M_map, __x._M_map);
<       24*:  583:	  swap(this->_M_map_size, __x._M_map_size);
<       24*:  584:	}
---
>     #####:  580:	  swap(this->_M_start, __x._M_start);
>     #####:  581:	  swap(this->_M_finish, __x._M_finish);
>     #####:  582:	  swap(this->_M_map, __x._M_map);
>     #####:  583:	  swap(this->_M_map_size, __x._M_map_size);
>     #####:  584:	}
1043c1043
<        24:  577:	void _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT
---
>     #####:  577:	void _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT
1046,1050c1046,1050
<        24:  580:	  swap(this->_M_start, __x._M_start);
<        24:  581:	  swap(this->_M_finish, __x._M_finish);
<        24:  582:	  swap(this->_M_map, __x._M_map);
<        24:  583:	  swap(this->_M_map_size, __x._M_map_size);
<        24:  584:	}
---
>     #####:  580:	  swap(this->_M_start, __x._M_start);
>     #####:  581:	  swap(this->_M_finish, __x._M_finish);
>     #####:  582:	  swap(this->_M_map, __x._M_map);
>     #####:  583:	  swap(this->_M_map_size, __x._M_map_size);
>     #####:  584:	}
1065,1066c1065,1066
<       84*:  588:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
<       84*:  589:      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
---
>     #####:  588:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
>     #####:  589:      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
1073,1074c1073,1074
<        84:  588:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
<        84:  589:      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
---
>     #####:  588:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
>     #####:  589:      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
1082,1083c1082,1083
<       72*:  592:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
<       72*:  593:      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
---
>     #####:  592:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
>     #####:  593:      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
1098,1099c1098,1099
<        72:  592:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
<        72:  593:      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
---
>     #####:  592:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
>     #####:  593:      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
1107,1108c1107,1108
<       72*:  596:      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
<       72*:  597:      { return _Map_alloc_type(_M_get_Tp_allocator()); }
---
>     #####:  596:      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
>     #####:  597:      { return _Map_alloc_type(_M_get_Tp_allocator()); }
1123,1124c1123,1124
<        72:  596:      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
<        72:  597:      { return _Map_alloc_type(_M_get_Tp_allocator()); }
---
>     #####:  596:      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
>     #####:  597:      { return _Map_alloc_type(_M_get_Tp_allocator()); }
1132c1132
<       36*:  600:      _M_allocate_node()
---
>     #####:  600:      _M_allocate_node()
1135c1135
<       36*:  603:	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
---
>     #####:  603:	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
1160c1160
<        36:  600:      _M_allocate_node()
---
>     #####:  600:      _M_allocate_node()
1163c1163
<        36:  603:	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
---
>     #####:  603:	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
1175c1175
<       36*:  607:      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
---
>     #####:  607:      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
1178,1179c1178,1179
<       36*:  610:	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
<       36*:  611:      }
---
>     #####:  610:	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
>     #####:  611:      }
1203c1203
<        36:  607:      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
---
>     #####:  607:      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
1206,1207c1206,1207
<        36:  610:	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
<        36:  611:      }
---
>     #####:  610:	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
>     #####:  611:      }
1218c1218
<       36*:  614:      _M_allocate_map(size_t __n)
---
>     #####:  614:      _M_allocate_map(size_t __n)
1220,1221c1220,1221
<       72*:  616:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
<       72*:  617:	return _Map_alloc_traits::allocate(__map_alloc, __n);
---
>     #####:  616:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
>     #####:  617:	return _Map_alloc_traits::allocate(__map_alloc, __n);
1246c1246
<        36:  614:      _M_allocate_map(size_t __n)
---
>     #####:  614:      _M_allocate_map(size_t __n)
1248,1249c1248,1249
<        72:  616:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
<        72:  617:	return _Map_alloc_traits::allocate(__map_alloc, __n);
---
>     #####:  616:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
>     #####:  617:	return _Map_alloc_traits::allocate(__map_alloc, __n);
1261c1261
<       36*:  621:      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
---
>     #####:  621:      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
1263,1265c1263,1265
<       72*:  623:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
<       36*:  624:	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
<       36*:  625:      }
---
>     #####:  623:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
>     #####:  624:	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
>     #####:  625:      }
1289c1289
<        36:  621:      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
---
>     #####:  621:      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
1291,1293c1291,1293
<        72:  623:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
<        36:  624:	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
<        36:  625:      }
---
>     #####:  623:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
>     #####:  624:	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
>     #####:  625:      }
1337c1337
<       36*:  661:    _Deque_base<_Tp, _Alloc>::
---
>     #####:  661:    _Deque_base<_Tp, _Alloc>::
1340c1340
<       36*:  664:      if (this->_M_impl._M_map)
---
>     #####:  664:      if (this->_M_impl._M_map)
1342,1344c1342,1344
<       36*:  666:	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
<       36*:  667:			   this->_M_impl._M_finish._M_node + 1);
<       36*:  668:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
---
>     #####:  666:	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
>     #####:  667:			   this->_M_impl._M_finish._M_node + 1);
>     #####:  668:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
1346c1346
<       36*:  670:    }
---
>     #####:  670:    }
1361c1361
<        36:  661:    _Deque_base<_Tp, _Alloc>::
---
>     #####:  661:    _Deque_base<_Tp, _Alloc>::
1364c1364
<        36:  664:      if (this->_M_impl._M_map)
---
>     #####:  664:      if (this->_M_impl._M_map)
1366,1368c1366,1368
<        36:  666:	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
<        36:  667:			   this->_M_impl._M_finish._M_node + 1);
<        36:  668:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
---
>     #####:  666:	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
>     #####:  667:			   this->_M_impl._M_finish._M_node + 1);
>     #####:  668:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
1370c1370
<        36:  670:    }
---
>     #####:  670:    }
1395c1395
<       36*:  682:    _Deque_base<_Tp, _Alloc>::
---
>     #####:  682:    _Deque_base<_Tp, _Alloc>::
1398c1398
<       36*:  685:      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
---
>     #####:  685:      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
1401,1403c1401,1403
<       36*:  688:      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
<       36*:  689:					   size_t(__num_nodes + 2));
<       36*:  690:      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
---
>     #####:  688:      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
>     #####:  689:					   size_t(__num_nodes + 2));
>     #####:  690:      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
1410,1412c1410,1412
<       72*:  697:      _Map_pointer __nstart = (this->_M_impl._M_map
<       36*:  698:			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
<       36*:  699:      _Map_pointer __nfinish = __nstart + __num_nodes;
---
>     #####:  697:      _Map_pointer __nstart = (this->_M_impl._M_map
>     #####:  698:			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
>     #####:  699:      _Map_pointer __nfinish = __nstart + __num_nodes;
1415c1415
<       36*:  702:	{ _M_create_nodes(__nstart, __nfinish); }
---
>     #####:  702:	{ _M_create_nodes(__nstart, __nfinish); }
1424,1430c1424,1430
<       36*:  711:      this->_M_impl._M_start._M_set_node(__nstart);
<       36*:  712:      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
<       36*:  713:      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
<       72*:  714:      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
<       36*:  715:					+ __num_elements
<       36*:  716:					% __deque_buf_size(sizeof(_Tp)));
<       36*:  717:    }
---
>     #####:  711:      this->_M_impl._M_start._M_set_node(__nstart);
>     #####:  712:      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
>     #####:  713:      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
>     #####:  714:      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
>     #####:  715:					+ __num_elements
>     #####:  716:					% __deque_buf_size(sizeof(_Tp)));
>     #####:  717:    }
1471c1471
<        36:  682:    _Deque_base<_Tp, _Alloc>::
---
>     #####:  682:    _Deque_base<_Tp, _Alloc>::
1474c1474
<        36:  685:      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
---
>     #####:  685:      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
1477,1479c1477,1479
<        36:  688:      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
<        36:  689:					   size_t(__num_nodes + 2));
<        36:  690:      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
---
>     #####:  688:      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
>     #####:  689:					   size_t(__num_nodes + 2));
>     #####:  690:      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
1486,1488c1486,1488
<        72:  697:      _Map_pointer __nstart = (this->_M_impl._M_map
<        36:  698:			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
<        36:  699:      _Map_pointer __nfinish = __nstart + __num_nodes;
---
>     #####:  697:      _Map_pointer __nstart = (this->_M_impl._M_map
>     #####:  698:			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
>     #####:  699:      _Map_pointer __nfinish = __nstart + __num_nodes;
1491c1491
<        36:  702:	{ _M_create_nodes(__nstart, __nfinish); }
---
>     #####:  702:	{ _M_create_nodes(__nstart, __nfinish); }
1500,1506c1500,1506
<        36:  711:      this->_M_impl._M_start._M_set_node(__nstart);
<        36:  712:      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
<        36:  713:      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
<        72:  714:      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
<        36:  715:					+ __num_elements
<        36:  716:					% __deque_buf_size(sizeof(_Tp)));
<        36:  717:    }
---
>     #####:  711:      this->_M_impl._M_start._M_set_node(__nstart);
>     #####:  712:      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
>     #####:  713:      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
>     #####:  714:      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
>     #####:  715:					+ __num_elements
>     #####:  716:					% __deque_buf_size(sizeof(_Tp)));
>     #####:  717:    }
1549c1549
<       36*:  721:    _Deque_base<_Tp, _Alloc>::
---
>     #####:  721:    _Deque_base<_Tp, _Alloc>::
1555,1556c1555,1556
<       72*:  727:	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
<       36*:  728:	    *__cur = this->_M_allocate_node();
---
>     #####:  727:	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
>     #####:  728:	    *__cur = this->_M_allocate_node();
1563c1563
<       36*:  735:    }
---
>     #####:  735:    }
1583c1583
<        36:  721:    _Deque_base<_Tp, _Alloc>::
---
>     #####:  721:    _Deque_base<_Tp, _Alloc>::
1589,1590c1589,1590
<        72:  727:	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
<        36:  728:	    *__cur = this->_M_allocate_node();
---
>     #####:  727:	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
>     #####:  728:	    *__cur = this->_M_allocate_node();
1597c1597
<        36:  735:    }
---
>     #####:  735:    }
1619c1619
<       36*:  739:    _Deque_base<_Tp, _Alloc>::
---
>     #####:  739:    _Deque_base<_Tp, _Alloc>::
1623,1625c1623,1625
<       72*:  743:      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
<       36*:  744:	_M_deallocate_node(*__n);
<       36*:  745:    }
---
>     #####:  743:      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
>     #####:  744:	_M_deallocate_node(*__n);
>     #####:  745:    }
1637c1637
<        36:  739:    _Deque_base<_Tp, _Alloc>::
---
>     #####:  739:    _Deque_base<_Tp, _Alloc>::
1641,1643c1641,1643
<        72:  743:      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
<        36:  744:	_M_deallocate_node(*__n);
<        36:  745:    }
---
>     #####:  743:      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
>     #####:  744:	_M_deallocate_node(*__n);
>     #####:  745:    }
1806c1806
<       36*:  898:      deque() : _Base() { }
---
>     #####:  898:      deque() : _Base() { }
1812c1812
<        36:  898:      deque() : _Base() { }
---
>     #####:  898:      deque() : _Base() { }
1972,1973c1972,1973
<       36*: 1054:      ~deque()
<       36*: 1055:      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
---
>     #####: 1054:      ~deque()
>     #####: 1055:      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
1980,1981c1980,1981
<        36: 1054:      ~deque()
<        36: 1055:      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
---
>     #####: 1054:      ~deque()
>     #####: 1055:      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
2107,2108c2107,2108
<       94*: 1176:      begin() _GLIBCXX_NOEXCEPT
<       94*: 1177:      { return this->_M_impl._M_start; }
---
>     #####: 1176:      begin() _GLIBCXX_NOEXCEPT
>     #####: 1177:      { return this->_M_impl._M_start; }
2115,2116c2115,2116
<        94: 1176:      begin() _GLIBCXX_NOEXCEPT
<        94: 1177:      { return this->_M_impl._M_start; }
---
>     #####: 1176:      begin() _GLIBCXX_NOEXCEPT
>     #####: 1177:      { return this->_M_impl._M_start; }
2128,2129c2128,2129
<       44*: 1184:      begin() const _GLIBCXX_NOEXCEPT
<       44*: 1185:      { return this->_M_impl._M_start; }
---
>     #####: 1184:      begin() const _GLIBCXX_NOEXCEPT
>     #####: 1185:      { return this->_M_impl._M_start; }
2136,2137c2136,2137
<        44: 1184:      begin() const _GLIBCXX_NOEXCEPT
<        44: 1185:      { return this->_M_impl._M_start; }
---
>     #####: 1184:      begin() const _GLIBCXX_NOEXCEPT
>     #####: 1185:      { return this->_M_impl._M_start; }
2150,2151c2150,2151
<       48*: 1193:      end() _GLIBCXX_NOEXCEPT
<       48*: 1194:      { return this->_M_impl._M_finish; }
---
>     #####: 1193:      end() _GLIBCXX_NOEXCEPT
>     #####: 1194:      { return this->_M_impl._M_finish; }
2158,2159c2158,2159
<        48: 1193:      end() _GLIBCXX_NOEXCEPT
<        48: 1194:      { return this->_M_impl._M_finish; }
---
>     #####: 1193:      end() _GLIBCXX_NOEXCEPT
>     #####: 1194:      { return this->_M_impl._M_finish; }
2172,2173c2172,2173
<       90*: 1202:      end() const _GLIBCXX_NOEXCEPT
<       90*: 1203:      { return this->_M_impl._M_finish; }
---
>     #####: 1202:      end() const _GLIBCXX_NOEXCEPT
>     #####: 1203:      { return this->_M_impl._M_finish; }
2180,2181c2180,2181
<        90: 1202:      end() const _GLIBCXX_NOEXCEPT
<        90: 1203:      { return this->_M_impl._M_finish; }
---
>     #####: 1202:      end() const _GLIBCXX_NOEXCEPT
>     #####: 1203:      { return this->_M_impl._M_finish; }
2264,2265c2264,2265
<      226*: 1281:      size() const _GLIBCXX_NOEXCEPT
<      226*: 1282:      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
---
>     #####: 1281:      size() const _GLIBCXX_NOEXCEPT
>     #####: 1282:      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
2276,2277c2276,2277
<       226: 1281:      size() const _GLIBCXX_NOEXCEPT
<       226: 1282:      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
---
>     #####: 1281:      size() const _GLIBCXX_NOEXCEPT
>     #####: 1282:      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
2401c2401
<       46*: 1401:      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
---
>     #####: 1401:      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
2404c2404
<       46*: 1404:	return this->_M_impl._M_start[difference_type(__n)];
---
>     #####: 1404:	return this->_M_impl._M_start[difference_type(__n)];
2408c2408
<        46: 1401:      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
---
>     #####: 1401:      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
2411c2411
<        46: 1404:	return this->_M_impl._M_start[difference_type(__n)];
---
>     #####: 1404:	return this->_M_impl._M_start[difference_type(__n)];
2476c2476
<       46*: 1461:      front() _GLIBCXX_NOEXCEPT
---
>     #####: 1461:      front() _GLIBCXX_NOEXCEPT
2479c2479
<       46*: 1464:	return *begin();
---
>     #####: 1464:	return *begin();
2490c2490
<        46: 1461:      front() _GLIBCXX_NOEXCEPT
---
>     #####: 1461:      front() _GLIBCXX_NOEXCEPT
2493c2493
<        46: 1464:	return *begin();
---
>     #####: 1464:	return *begin();
2582c2582
<       46*: 1552:      push_back(const value_type& __x)
---
>     #####: 1552:      push_back(const value_type& __x)
2584,2585c2584,2585
<       92*: 1554:	if (this->_M_impl._M_finish._M_cur
<       46*: 1555:	    != this->_M_impl._M_finish._M_last - 1)
---
>     #####: 1554:	if (this->_M_impl._M_finish._M_cur
>     #####: 1555:	    != this->_M_impl._M_finish._M_last - 1)
2587c2587
<       46*: 1557:	    _Alloc_traits::construct(this->_M_impl,
---
>     #####: 1557:	    _Alloc_traits::construct(this->_M_impl,
2589c2589
<       46*: 1559:	    ++this->_M_impl._M_finish._M_cur;
---
>     #####: 1559:	    ++this->_M_impl._M_finish._M_cur;
2593c2593
<       46*: 1563:      }
---
>     #####: 1563:      }
2624c2624
<        46: 1552:      push_back(const value_type& __x)
---
>     #####: 1552:      push_back(const value_type& __x)
2626,2627c2626,2627
<        92: 1554:	if (this->_M_impl._M_finish._M_cur
<        46: 1555:	    != this->_M_impl._M_finish._M_last - 1)
---
>     #####: 1554:	if (this->_M_impl._M_finish._M_cur
>     #####: 1555:	    != this->_M_impl._M_finish._M_last - 1)
2629c2629
<        46: 1557:	    _Alloc_traits::construct(this->_M_impl,
---
>     #####: 1557:	    _Alloc_traits::construct(this->_M_impl,
2631c2631
<        46: 1559:	    ++this->_M_impl._M_finish._M_cur;
---
>     #####: 1559:	    ++this->_M_impl._M_finish._M_cur;
2635c2635
<        46: 1563:      }
---
>     #####: 1563:      }
2675c2675
<       46*: 1588:      pop_front() _GLIBCXX_NOEXCEPT
---
>     #####: 1588:      pop_front() _GLIBCXX_NOEXCEPT
2678,2679c2678,2679
<       92*: 1591:	if (this->_M_impl._M_start._M_cur
<       46*: 1592:	    != this->_M_impl._M_start._M_last - 1)
---
>     #####: 1591:	if (this->_M_impl._M_start._M_cur
>     #####: 1592:	    != this->_M_impl._M_start._M_last - 1)
2681c2681
<       46*: 1594:	    _Alloc_traits::destroy(this->_M_impl,
---
>     #####: 1594:	    _Alloc_traits::destroy(this->_M_impl,
2683c2683
<       46*: 1596:	    ++this->_M_impl._M_start._M_cur;
---
>     #####: 1596:	    ++this->_M_impl._M_start._M_cur;
2687c2687
<       46*: 1600:      }
---
>     #####: 1600:      }
2705c2705
<        46: 1588:      pop_front() _GLIBCXX_NOEXCEPT
---
>     #####: 1588:      pop_front() _GLIBCXX_NOEXCEPT
2708,2709c2708,2709
<        92: 1591:	if (this->_M_impl._M_start._M_cur
<        46: 1592:	    != this->_M_impl._M_start._M_last - 1)
---
>     #####: 1591:	if (this->_M_impl._M_start._M_cur
>     #####: 1592:	    != this->_M_impl._M_start._M_last - 1)
2711c2711
<        46: 1594:	    _Alloc_traits::destroy(this->_M_impl,
---
>     #####: 1594:	    _Alloc_traits::destroy(this->_M_impl,
2713c2713
<        46: 1596:	    ++this->_M_impl._M_start._M_cur;
---
>     #####: 1596:	    ++this->_M_impl._M_start._M_cur;
2717c2717
<        46: 1600:      }
---
>     #####: 1600:      }
2950c2950
<       24*: 1832:      swap(deque& __x) _GLIBCXX_NOEXCEPT
---
>     #####: 1832:      swap(deque& __x) _GLIBCXX_NOEXCEPT
2956,2957c2956,2957
<       24*: 1838:	_M_impl._M_swap_data(__x._M_impl);
<       24*: 1839:	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
---
>     #####: 1838:	_M_impl._M_swap_data(__x._M_impl);
>     #####: 1839:	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
2959c2959
<       24*: 1841:      }
---
>     #####: 1841:      }
2962c2962
<        24: 1832:      swap(deque& __x) _GLIBCXX_NOEXCEPT
---
>     #####: 1832:      swap(deque& __x) _GLIBCXX_NOEXCEPT
2968,2969c2968,2969
<        24: 1838:	_M_impl._M_swap_data(__x._M_impl);
<        24: 1839:	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
---
>     #####: 1838:	_M_impl._M_swap_data(__x._M_impl);
>     #####: 1839:	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
2971c2971
<        24: 1841:      }
---
>     #####: 1841:      }
3221c3221
<       36*: 2078:      _M_destroy_data(iterator __first, iterator __last,
---
>     #####: 2078:      _M_destroy_data(iterator __first, iterator __last,
3226c3226
<       36*: 2083:      }
---
>     #####: 2083:      }
3237c3237
<        36: 2078:      _M_destroy_data(iterator __first, iterator __last,
---
>     #####: 2078:      _M_destroy_data(iterator __first, iterator __last,
3242c3242
<        36: 2083:      }
---
>     #####: 2083:      }
