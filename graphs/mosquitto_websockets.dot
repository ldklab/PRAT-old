// Testing auto-constructing a simple digraph from the feature identification process.
digraph G {
	graph [fontsize=10 fontname="Helvetica" compound=true];

	subgraph cluster_components {
		label="Mosquitto Components";
		"Websocket Support";
		"Bridge Support";
		"TLS";
		"systemd";
		"Persistence";
		"Memory Tracking";
		"EPOLL";
		"UUID";
		"SYS_TREE";
	}

	subgraph cluster_ws {
		label="Websocket Support";

		// Implementation in database.c
		"database.c" -> "if(context->wsi && rc == 0){
		return db__message_write(db, context);
	}else{
		return rc;
	}
#else
	return rc;";

		// Implementation in websockets.c
		"websockets.c" -> "websockets.c";

		// Implementation in .h
		"mosquitto_broker_internal.h" -> "struct libwebsocket_context *ws_context;
	char *http_dir;
	struct libwebsocket_protocols *ws_protocol;";
		"mosquitto_broker_internal.h" -> "int websockets_log_level;
	bool have_websockets_listener;";
		"mosquitto_broker_internal.h" -> "struct libws_mqtt_hack {
	char *http_dir;
};

struct libws_mqtt_data {
	struct mosquitto *mosq;
};";
		"mosquitto_broker_internal.h" -> "if defined (LWS_LIBRARY_VERSION_NUMBER)
struct lws_context *mosq_websockets_init(struct mosquitto__listener *listener, int log_level);
#  else
struct libwebsocket_context *mosq_websockets_init(struct mosquitto__listener *listener, int log_level);";


	}

	"Websocket Support" -> "mosquitto_broker_internal.h" [lhead=cluster_ws];

}
