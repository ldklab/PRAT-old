// Testing manually-constructing a simple digraph from the Make/config files.
digraph G {
	graph [fontsize=10 fontname="Verdana" compound=true];

	subgraph cluster_components {
		label="MQTT Components";
		"WebSocket Support";
		"Bridge Support";
	}

	subgraph cluster_bridge {
		label="Bridge Support";
		"database.c" -> "db->bridges = NULL;
		db->bridge_count = 0;";
			"database.c" -> "if(context->bridge && context->bridge->start_type == bst_lazy
				&& context->sock == INVALID_SOCKET
				&& context->msg_count >= context->bridge->threshold){

			context->bridge->lazy_reconnect = true;
		}";

		"bridge.c" -> "bridge.c";

		"loop.c" -> "int rc;
	int err;
	socklen_t len;";
		"loop.c" -> "HASH_ITER(hh_sock, db->contexts_by_sock, context, ctxt_tmp){...}";
		"loop.c" ->"if(context->clean_session && !context->bridge){...}";

		"read_handle.c" -> "case CONNACK:
			return handle__connack(db, context);
		case SUBACK:
			return handle__suback(context);
		case UNSUBACK:
			return handle__unsuback(context);";

		"plugin.c" -> "if(context->bridge){
		return context->bridge->local_username;
	}";

		"mosquitto_broker_internal.h" -> "struct mosquitto__bridge *bridges;
	int bridge_count;";
		"mosquitto_broker_internal.h" -> "struct mosquitto **bridges;";
		"mosquitto_broker_internal.h" -> "int bridge_count;";
		"mosquitto_broker_internal.h" -> "int bridge__new(struct mosquitto_db *db, struct mosquitto__bridge *bridge);
int bridge__connect(struct mosquitto_db *db, struct mosquitto *context);
int bridge__connect_step1(struct mosquitto_db *db, struct mosquitto *context);
int bridge__connect_step2(struct mosquitto_db *db, struct mosquitto *context);
int bridge__connect_step3(struct mosquitto_db *db, struct mosquitto *context);
void bridge__packet_cleanup(struct mosquitto *context);";

		"conf.c" -> "...";
		// There are like 25 instances in conf.c... skipping all for brevity.

		"mosquitto.c" -> "for(i=0; i<config.bridge_count; i++){
		if(bridge__new(&int_db, &(config.bridges[i]))){
			log__printf(NULL, MOSQ_LOG_WARNING, \"Warning: Unable to connect to bridge %s.\", 
					config.bridges[i].name);
		}
	}";
		"mosquitto.c" -> "for(i=0; i<int_db.bridge_count; i++){
		if(int_db.bridges[i]){
			context__cleanup(&int_db, int_db.bridges[i], true);
		}
	}
	mosquitto__free(int_db.bridges);";

		"context.c" -> "int i;";
		"context.c" -> "if(context->bridge){...}";

		"handle_publish.c" -> "char *topic_temp;
	int i;
	struct mosquitto__bridge_topic *cur_topic;
	bool match;";
		"handle_publish.c" -> "if(context->bridge && context->bridge->topics && context->bridge->topic_remapping){...}";
	}

	"Bridge Support" -> "mosquitto_broker_internal.h" [lhead=cluster_bridge];
	"WebSocket Support" -> "Other graph";

}