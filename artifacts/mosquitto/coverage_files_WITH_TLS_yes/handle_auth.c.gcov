        -:    0:Source:handle_auth.c
        -:    0:Graph:handle_auth.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2018-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#include "mosquitto_broker_internal.h"
        -:   23:#include "mqtt_protocol.h"
        -:   24:#include "memory_mosq.h"
        -:   25:#include "packet_mosq.h"
        -:   26:#include "property_mosq.h"
        -:   27:#include "send_mosq.h"
        -:   28:#include "util_mosq.h"
        -:   29:#include "will_mosq.h"
        -:   30:
        -:   31:
    #####:   32:int handle__auth(struct mosquitto_db *db, struct mosquitto *context)
        -:   33:{
    #####:   34:	int rc = 0;
    #####:   35:	uint8_t reason_code = 0;
    #####:   36:	mosquitto_property *properties = NULL;
    #####:   37:	char *auth_method = NULL;
    #####:   38:	void *auth_data = NULL;
    #####:   39:	uint16_t auth_data_len = 0;
    #####:   40:	void *auth_data_out = NULL;
    #####:   41:	uint16_t auth_data_out_len = 0;
        -:   42:
    #####:   43:	if(!context) return MOSQ_ERR_INVAL;
        -:   44:
    #####:   45:	if(context->protocol != mosq_p_mqtt5 || context->auth_method == NULL){
    #####:   46:		return MOSQ_ERR_PROTOCOL;
        -:   47:	}
        -:   48:
    #####:   49:	if(context->in_packet.remaining_length > 0){
    #####:   50:		if(packet__read_byte(&context->in_packet, &reason_code)) return 1;
    #####:   51:		if(reason_code != MQTT_RC_CONTINUE_AUTHENTICATION
    #####:   52:				&& reason_code != MQTT_RC_REAUTHENTICATE){
        -:   53:
    #####:   54:			send__disconnect(context, MQTT_RC_PROTOCOL_ERROR, NULL);
    #####:   55:			return MOSQ_ERR_PROTOCOL;
        -:   56:		}
        -:   57:
    #####:   58:		if((reason_code == MQTT_RC_REAUTHENTICATE && context->state != mosq_cs_active)
    #####:   59:				|| (reason_code == MQTT_RC_CONTINUE_AUTHENTICATION
    #####:   60:					&& context->state != mosq_cs_authenticating && context->state != mosq_cs_reauthenticating)){
        -:   61:
    #####:   62:			send__disconnect(context, MQTT_RC_PROTOCOL_ERROR, NULL);
    #####:   63:			return MOSQ_ERR_PROTOCOL;
        -:   64:		}
        -:   65:
    #####:   66:		rc = property__read_all(CMD_AUTH, &context->in_packet, &properties);
    #####:   67:		if(rc){
    #####:   68:			send__disconnect(context, MQTT_RC_UNSPECIFIED, NULL);
    #####:   69:			return rc;
        -:   70:		}
        -:   71:
        -:   72:
    #####:   73:		if(mosquitto_property_read_string(properties, MQTT_PROP_AUTHENTICATION_METHOD, &auth_method, false) == NULL){
    #####:   74:			mosquitto_property_free_all(&properties);
    #####:   75:			send__disconnect(context, MQTT_RC_UNSPECIFIED, NULL);
    #####:   76:			return MOSQ_ERR_PROTOCOL;
        -:   77:		}
        -:   78:
    #####:   79:		if(!auth_method || strcmp(auth_method, context->auth_method)){
        -:   80:			/* No method, or non-matching method */
    #####:   81:			mosquitto__free(auth_method);
    #####:   82:			mosquitto_property_free_all(&properties);
    #####:   83:			send__disconnect(context, MQTT_RC_PROTOCOL_ERROR, NULL);
    #####:   84:			return MOSQ_ERR_PROTOCOL;
        -:   85:		}
    #####:   86:		mosquitto__free(auth_method);
        -:   87:
    #####:   88:		mosquitto_property_read_binary(properties, MQTT_PROP_AUTHENTICATION_DATA, &auth_data, &auth_data_len, false);
        -:   89:
    #####:   90:		mosquitto_property_free_all(&properties); /* FIXME - TEMPORARY UNTIL PROPERTIES PROCESSED */
    #####:   91:	}
        -:   92:
    #####:   93:	log__printf(NULL, MOSQ_LOG_DEBUG, "Received AUTH from %s (rc%d, %s)", context->id, reason_code, context->auth_method);
        -:   94:
        -:   95:
    #####:   96:	if(reason_code == MQTT_RC_REAUTHENTICATE){
        -:   97:		/* This is a re-authentication attempt */
    #####:   98:		mosquitto__set_state(context, mosq_cs_reauthenticating);
    #####:   99:		rc = mosquitto_security_auth_start(db, context, true, auth_data, auth_data_len, &auth_data_out, &auth_data_out_len);
    #####:  100:	}else{
    #####:  101:		if(context->state != mosq_cs_reauthenticating){
    #####:  102:			mosquitto__set_state(context, mosq_cs_authenticating);
    #####:  103:		}
    #####:  104:		rc = mosquitto_security_auth_continue(db, context, auth_data, auth_data_len, &auth_data_out, &auth_data_out_len);
        -:  105:	}
    #####:  106:	mosquitto__free(auth_data);
    #####:  107:	if(rc == MOSQ_ERR_SUCCESS){
    #####:  108:		if(context->state == mosq_cs_authenticating){
    #####:  109:			return connect__on_authorised(db, context, auth_data_out, auth_data_out_len);
        -:  110:		}else{
    #####:  111:			mosquitto__set_state(context, mosq_cs_active);
    #####:  112:			rc = send__auth(db, context, MQTT_RC_SUCCESS, auth_data_out, auth_data_out_len);
    #####:  113:			free(auth_data_out);
    #####:  114:			return rc;
        -:  115:		}
    #####:  116:	}else if(rc == MOSQ_ERR_AUTH_CONTINUE){
    #####:  117:		rc = send__auth(db, context, MQTT_RC_CONTINUE_AUTHENTICATION, auth_data_out, auth_data_out_len);
    #####:  118:		free(auth_data_out);
    #####:  119:		return rc;
        -:  120:	}else{
    #####:  121:		free(auth_data_out);
    #####:  122:		if(context->state == mosq_cs_authenticating && context->will){
        -:  123:			/* Free will without sending if this is our first authentication attempt */
    #####:  124:			will__clear(context);
    #####:  125:		}
    #####:  126:		if(rc == MOSQ_ERR_AUTH){
    #####:  127:			send__connack(db, context, 0, MQTT_RC_NOT_AUTHORIZED, NULL);
    #####:  128:			if(context->state == mosq_cs_authenticating){
    #####:  129:				mosquitto__free(context->id);
    #####:  130:				context->id = NULL;
    #####:  131:			}
    #####:  132:			return MOSQ_ERR_PROTOCOL;
    #####:  133:		}else if(rc == MOSQ_ERR_NOT_SUPPORTED){
        -:  134:			/* Client has requested extended authentication, but we don't support it. */
    #####:  135:			send__connack(db, context, 0, MQTT_RC_BAD_AUTHENTICATION_METHOD, NULL);
    #####:  136:			if(context->state == mosq_cs_authenticating){
    #####:  137:				mosquitto__free(context->id);
    #####:  138:				context->id = NULL;
    #####:  139:			}
    #####:  140:			return MOSQ_ERR_PROTOCOL;
        -:  141:		}else{
    #####:  142:			if(context->state == mosq_cs_authenticating){
    #####:  143:				mosquitto__free(context->id);
    #####:  144:				context->id = NULL;
    #####:  145:			}
    #####:  146:			return rc;
        -:  147:		}
        -:  148:	}
    #####:  149:}
