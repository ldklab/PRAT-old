        -:    0:Source:../lib/util_topic.c
        -:    0:Graph:util_topic.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:#ifdef WIN32
        -:   23:#  include <winsock2.h>
        -:   24:#  include <aclapi.h>
        -:   25:#  include <io.h>
        -:   26:#  include <lmcons.h>
        -:   27:#else
        -:   28:#  include <sys/stat.h>
        -:   29:#endif
        -:   30:
        -:   31:
        -:   32:#ifdef WITH_BROKER
        -:   33:#include "mosquitto_broker_internal.h"
        -:   34:#endif
        -:   35:
        -:   36:#include "mosquitto.h"
        -:   37:#include "memory_mosq.h"
        -:   38:#include "net_mosq.h"
        -:   39:#include "send_mosq.h"
        -:   40:#include "time_mosq.h"
        -:   41:#include "tls_mosq.h"
        -:   42:#include "util_mosq.h"
        -:   43:
        -:   44:/* Check that a topic used for publishing is valid.
        -:   45: * Search for + or # in a topic. Return MOSQ_ERR_INVAL if found.
        -:   46: * Also returns MOSQ_ERR_INVAL if the topic string is too long.
        -:   47: * Returns MOSQ_ERR_SUCCESS if everything is fine.
        -:   48: */
    #####:   49:int mosquitto_pub_topic_check(const char *str)
        -:   50:{
    #####:   51:	int len = 0;
        -:   52:#ifdef WITH_BROKER
    #####:   53:	int hier_count = 0;
        -:   54:#endif
    #####:   55:	while(str && str[0]){
    #####:   56:		if(str[0] == '+' || str[0] == '#'){
    #####:   57:			return MOSQ_ERR_INVAL;
        -:   58:		}
        -:   59:#ifdef WITH_BROKER
    #####:   60:		else if(str[0] == '/'){
    #####:   61:			hier_count++;
    #####:   62:		}
        -:   63:#endif
    #####:   64:		len++;
    #####:   65:		str = &str[1];
        -:   66:	}
    #####:   67:	if(len > 65535) return MOSQ_ERR_INVAL;
        -:   68:#ifdef WITH_BROKER
    #####:   69:	if(hier_count > TOPIC_HIERARCHY_LIMIT) return MOSQ_ERR_INVAL;
        -:   70:#endif
        -:   71:
    #####:   72:	return MOSQ_ERR_SUCCESS;
    #####:   73:}
        -:   74:
    #####:   75:int mosquitto_pub_topic_check2(const char *str, size_t len)
        -:   76:{
        -:   77:	size_t i;
        -:   78:#ifdef WITH_BROKER
    #####:   79:	int hier_count = 0;
        -:   80:#endif
        -:   81:
    #####:   82:	if(len > 65535) return MOSQ_ERR_INVAL;
        -:   83:
    #####:   84:	for(i=0; i<len; i++){
    #####:   85:		if(str[i] == '+' || str[i] == '#'){
    #####:   86:			return MOSQ_ERR_INVAL;
        -:   87:		}
        -:   88:#ifdef WITH_BROKER
    #####:   89:		else if(str[i] == '/'){
    #####:   90:			hier_count++;
    #####:   91:		}
        -:   92:#endif
    #####:   93:	}
        -:   94:#ifdef WITH_BROKER
    #####:   95:	if(hier_count > TOPIC_HIERARCHY_LIMIT) return MOSQ_ERR_INVAL;
        -:   96:#endif
        -:   97:
    #####:   98:	return MOSQ_ERR_SUCCESS;
    #####:   99:}
        -:  100:
        -:  101:/* Check that a topic used for subscriptions is valid.
        -:  102: * Search for + or # in a topic, check they aren't in invalid positions such as
        -:  103: * foo/#/bar, foo/+bar or foo/bar#.
        -:  104: * Return MOSQ_ERR_INVAL if invalid position found.
        -:  105: * Also returns MOSQ_ERR_INVAL if the topic string is too long.
        -:  106: * Returns MOSQ_ERR_SUCCESS if everything is fine.
        -:  107: */
    #####:  108:int mosquitto_sub_topic_check(const char *str)
        -:  109:{
    #####:  110:	char c = '\0';
    #####:  111:	int len = 0;
        -:  112:#ifdef WITH_BROKER
    #####:  113:	int hier_count = 0;
        -:  114:#endif
        -:  115:
    #####:  116:	while(str && str[0]){
    #####:  117:		if(str[0] == '+'){
    #####:  118:			if((c != '\0' && c != '/') || (str[1] != '\0' && str[1] != '/')){
    #####:  119:				return MOSQ_ERR_INVAL;
        -:  120:			}
    #####:  121:		}else if(str[0] == '#'){
    #####:  122:			if((c != '\0' && c != '/')  || str[1] != '\0'){
    #####:  123:				return MOSQ_ERR_INVAL;
        -:  124:			}
    #####:  125:		}
        -:  126:#ifdef WITH_BROKER
    #####:  127:		else if(str[0] == '/'){
    #####:  128:			hier_count++;
    #####:  129:		}
        -:  130:#endif
    #####:  131:		len++;
    #####:  132:		c = str[0];
    #####:  133:		str = &str[1];
        -:  134:	}
    #####:  135:	if(len > 65535) return MOSQ_ERR_INVAL;
        -:  136:#ifdef WITH_BROKER
    #####:  137:	if(hier_count > TOPIC_HIERARCHY_LIMIT) return MOSQ_ERR_INVAL;
        -:  138:#endif
        -:  139:
    #####:  140:	return MOSQ_ERR_SUCCESS;
    #####:  141:}
        -:  142:
    #####:  143:int mosquitto_sub_topic_check2(const char *str, size_t len)
        -:  144:{
    #####:  145:	char c = '\0';
        -:  146:	size_t i;
        -:  147:#ifdef WITH_BROKER
    #####:  148:	int hier_count = 0;
        -:  149:#endif
        -:  150:
    #####:  151:	if(len > 65535) return MOSQ_ERR_INVAL;
        -:  152:
    #####:  153:	for(i=0; i<len; i++){
    #####:  154:		if(str[i] == '+'){
    #####:  155:			if((c != '\0' && c != '/') || (i<len-1 && str[i+1] != '/')){
    #####:  156:				return MOSQ_ERR_INVAL;
        -:  157:			}
    #####:  158:		}else if(str[i] == '#'){
    #####:  159:			if((c != '\0' && c != '/')  || i<len-1){
    #####:  160:				return MOSQ_ERR_INVAL;
        -:  161:			}
    #####:  162:		}
        -:  163:#ifdef WITH_BROKER
    #####:  164:		else if(str[i] == '/'){
    #####:  165:			hier_count++;
    #####:  166:		}
        -:  167:#endif
    #####:  168:		c = str[i];
    #####:  169:	}
        -:  170:#ifdef WITH_BROKER
    #####:  171:	if(hier_count > TOPIC_HIERARCHY_LIMIT) return MOSQ_ERR_INVAL;
        -:  172:#endif
        -:  173:
    #####:  174:	return MOSQ_ERR_SUCCESS;
    #####:  175:}
        -:  176:
    #####:  177:int mosquitto_topic_matches_sub(const char *sub, const char *topic, bool *result)
        -:  178:{
    #####:  179:	return mosquitto_topic_matches_sub2(sub, 0, topic, 0, result);
        -:  180:}
        -:  181:
        -:  182:/* Does a topic match a subscription? */
    #####:  183:int mosquitto_topic_matches_sub2(const char *sub, size_t sublen, const char *topic, size_t topiclen, bool *result)
        -:  184:{
        -:  185:	size_t spos;
        -:  186:
    #####:  187:	UNUSED(sublen);
    #####:  188:	UNUSED(topiclen);
        -:  189:
    #####:  190:	if(!result) return MOSQ_ERR_INVAL;
    #####:  191:	*result = false;
        -:  192:
    #####:  193:	if(!sub || !topic || sub[0] == 0 || topic[0] == 0){
    #####:  194:		return MOSQ_ERR_INVAL;
        -:  195:	}
        -:  196:
    #####:  197:	if((sub[0] == '$' && topic[0] != '$')
    #####:  198:			|| (topic[0] == '$' && sub[0] != '$')){
        -:  199:
    #####:  200:		return MOSQ_ERR_SUCCESS;
        -:  201:	}
        -:  202:
    #####:  203:	spos = 0;
        -:  204:
    #####:  205:	while(sub[0] != 0){
    #####:  206:		if(topic[0] == '+' || topic[0] == '#'){
    #####:  207:			return MOSQ_ERR_INVAL;
        -:  208:		}
    #####:  209:		if(sub[0] != topic[0] || topic[0] == 0){ /* Check for wildcard matches */
    #####:  210:			if(sub[0] == '+'){
        -:  211:				/* Check for bad "+foo" or "a/+foo" subscription */
    #####:  212:				if(spos > 0 && sub[-1] != '/'){
    #####:  213:					return MOSQ_ERR_INVAL;
        -:  214:				}
        -:  215:				/* Check for bad "foo+" or "foo+/a" subscription */
    #####:  216:				if(sub[1] != 0 && sub[1] != '/'){
    #####:  217:					return MOSQ_ERR_INVAL;
        -:  218:				}
    #####:  219:				spos++;
    #####:  220:				sub++;
    #####:  221:				while(topic[0] != 0 && topic[0] != '/'){
    #####:  222:					if(topic[0] == '+' || topic[0] == '#'){
    #####:  223:						return MOSQ_ERR_INVAL;
        -:  224:					}
    #####:  225:					topic++;
        -:  226:				}
    #####:  227:				if(topic[0] == 0 && sub[0] == 0){
    #####:  228:					*result = true;
    #####:  229:					return MOSQ_ERR_SUCCESS;
        -:  230:				}
    #####:  231:			}else if(sub[0] == '#'){
        -:  232:				/* Check for bad "foo#" subscription */
    #####:  233:				if(spos > 0 && sub[-1] != '/'){
    #####:  234:					return MOSQ_ERR_INVAL;
        -:  235:				}
        -:  236:				/* Check for # not the final character of the sub, e.g. "#foo" */
    #####:  237:				if(sub[1] != 0){
    #####:  238:					return MOSQ_ERR_INVAL;
        -:  239:				}else{
    #####:  240:					while(topic[0] != 0){
    #####:  241:						if(topic[0] == '+' || topic[0] == '#'){
    #####:  242:							return MOSQ_ERR_INVAL;
        -:  243:						}
    #####:  244:						topic++;
        -:  245:					}
    #####:  246:					*result = true;
    #####:  247:					return MOSQ_ERR_SUCCESS;
        -:  248:				}
        -:  249:			}else{
        -:  250:				/* Check for e.g. foo/bar matching foo/+/# */
    #####:  251:				if(topic[0] == 0
    #####:  252:						&& spos > 0
    #####:  253:						&& sub[-1] == '+'
    #####:  254:						&& sub[0] == '/'
    #####:  255:						&& sub[1] == '#')
        -:  256:				{
    #####:  257:					*result = true;
    #####:  258:					return MOSQ_ERR_SUCCESS;
        -:  259:				}
        -:  260:
        -:  261:				/* There is no match at this point, but is the sub invalid? */
    #####:  262:				while(sub[0] != 0){
    #####:  263:					if(sub[0] == '#' && sub[1] != 0){
    #####:  264:						return MOSQ_ERR_INVAL;
        -:  265:					}
    #####:  266:					spos++;
    #####:  267:					sub++;
        -:  268:				}
        -:  269:
        -:  270:				/* Valid input, but no match */
    #####:  271:				return MOSQ_ERR_SUCCESS;
        -:  272:			}
    #####:  273:		}else{
        -:  274:			/* sub[spos] == topic[tpos] */
    #####:  275:			if(topic[1] == 0){
        -:  276:				/* Check for e.g. foo matching foo/# */
    #####:  277:				if(sub[1] == '/'
    #####:  278:						&& sub[2] == '#'
    #####:  279:						&& sub[3] == 0){
    #####:  280:					*result = true;
    #####:  281:					return MOSQ_ERR_SUCCESS;
        -:  282:				}
    #####:  283:			}
    #####:  284:			spos++;
    #####:  285:			sub++;
    #####:  286:			topic++;
    #####:  287:			if(sub[0] == 0 && topic[0] == 0){
    #####:  288:				*result = true;
    #####:  289:				return MOSQ_ERR_SUCCESS;
    #####:  290:			}else if(topic[0] == 0 && sub[0] == '+' && sub[1] == 0){
    #####:  291:				if(spos > 0 && sub[-1] != '/'){
    #####:  292:					return MOSQ_ERR_INVAL;
        -:  293:				}
    #####:  294:				spos++;
    #####:  295:				sub++;
    #####:  296:				*result = true;
    #####:  297:				return MOSQ_ERR_SUCCESS;
        -:  298:			}
        -:  299:		}
        -:  300:	}
    #####:  301:	if((topic[0] != 0 || sub[0] != 0)){
    #####:  302:		*result = false;
    #####:  303:	}
    #####:  304:	while(topic[0] != 0){
    #####:  305:		if(topic[0] == '+' || topic[0] == '#'){
    #####:  306:			return MOSQ_ERR_INVAL;
        -:  307:		}
    #####:  308:		topic++;
        -:  309:	}
        -:  310:
    #####:  311:	return MOSQ_ERR_SUCCESS;
    #####:  312:}
