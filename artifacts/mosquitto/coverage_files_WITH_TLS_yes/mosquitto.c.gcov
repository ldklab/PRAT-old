        -:    0:Source:mosquitto.c
        -:    0:Graph:mosquitto.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#ifndef WIN32
        -:   20:/* For initgroups() */
        -:   21:#  include <unistd.h>
        -:   22:#  include <grp.h>
        -:   23:#  include <assert.h>
        -:   24:#endif
        -:   25:
        -:   26:#ifndef WIN32
        -:   27:#include <pwd.h>
        -:   28:#else
        -:   29:#include <process.h>
        -:   30:#include <winsock2.h>
        -:   31:#include <ws2tcpip.h>
        -:   32:#endif
        -:   33:
        -:   34:#ifndef WIN32
        -:   35:#  include <sys/time.h>
        -:   36:#endif
        -:   37:
        -:   38:#include <errno.h>
        -:   39:#include <signal.h>
        -:   40:#include <stdio.h>
        -:   41:#include <string.h>
        -:   42:#ifdef WITH_SYSTEMD
        -:   43:#  include <systemd/sd-daemon.h>
        -:   44:#endif
        -:   45:#ifdef WITH_WRAP
        -:   46:#include <tcpd.h>
        -:   47:#endif
        -:   48:#ifdef WITH_WEBSOCKETS
        -:   49:#  include <libwebsockets.h>
        -:   50:#endif
        -:   51:
        -:   52:#include "mosquitto_broker_internal.h"
        -:   53:#include "memory_mosq.h"
        -:   54:#include "misc_mosq.h"
        -:   55:#include "util_mosq.h"
        -:   56:
        -:   57:struct mosquitto_db int_db;
        -:   58:
        -:   59:bool flag_reload = false;
        -:   60:#ifdef WITH_PERSISTENCE
        -:   61:bool flag_db_backup = false;
        -:   62:#endif
        -:   63:bool flag_tree_print = false;
        -:   64:int run;
        -:   65:#ifdef WITH_WRAP
        -:   66:#include <syslog.h>
        -:   67:int allow_severity = LOG_INFO;
        -:   68:int deny_severity = LOG_INFO;
        -:   69:#endif
        -:   70:
        -:   71:void handle_sigint(int signal);
        -:   72:void handle_sigusr1(int signal);
        -:   73:void handle_sigusr2(int signal);
        -:   74:#ifdef SIGHUP
        -:   75:void handle_sighup(int signal);
        -:   76:#endif
        -:   77:
    #####:   78:struct mosquitto_db *mosquitto__get_db(void)
        -:   79:{
    #####:   80:	return &int_db;
        -:   81:}
        -:   82:
        -:   83:/* mosquitto shouldn't run as root.
        -:   84: * This function will attempt to change to an unprivileged user and group if
        -:   85: * running as root. The user is given in config->user.
        -:   86: * Returns 1 on failure (unknown user, setuid/setgid failure)
        -:   87: * Returns 0 on success.
        -:   88: * Note that setting config->user to "root" does not produce an error, but it
        -:   89: * strongly discouraged.
        -:   90: */
    #####:   91:int drop_privileges(struct mosquitto__config *config, bool temporary)
        -:   92:{
        -:   93:#if !defined(__CYGWIN__) && !defined(WIN32)
        -:   94:	struct passwd *pwd;
        -:   95:	char *err;
        -:   96:	int rc;
        -:   97:
    #####:   98:	const char *snap = getenv("SNAP_NAME");
    #####:   99:	if(snap && !strcmp(snap, "mosquitto")){
        -:  100:		/* Don't attempt to drop privileges if running as a snap */
    #####:  101:		return MOSQ_ERR_SUCCESS;
        -:  102:	}
        -:  103:
    #####:  104:	if(geteuid() == 0){
    #####:  105:		if(config->user && strcmp(config->user, "root")){
    #####:  106:			pwd = getpwnam(config->user);
    #####:  107:			if(!pwd){
    #####:  108:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Invalid user '%s'.", config->user);
    #####:  109:				return 1;
        -:  110:			}
    #####:  111:			if(initgroups(config->user, pwd->pw_gid) == -1){
    #####:  112:				err = strerror(errno);
    #####:  113:				log__printf(NULL, MOSQ_LOG_ERR, "Error setting groups whilst dropping privileges: %s.", err);
    #####:  114:				return 1;
        -:  115:			}
    #####:  116:			if(temporary){
    #####:  117:				rc = setegid(pwd->pw_gid);
    #####:  118:			}else{
    #####:  119:				rc = setgid(pwd->pw_gid);
        -:  120:			}
    #####:  121:			if(rc == -1){
    #####:  122:				err = strerror(errno);
    #####:  123:				log__printf(NULL, MOSQ_LOG_ERR, "Error setting gid whilst dropping privileges: %s.", err);
    #####:  124:				return 1;
        -:  125:			}
    #####:  126:			if(temporary){
    #####:  127:				rc = seteuid(pwd->pw_uid);
    #####:  128:			}else{
    #####:  129:				rc = setuid(pwd->pw_uid);
        -:  130:			}
    #####:  131:			if(rc == -1){
    #####:  132:				err = strerror(errno);
    #####:  133:				log__printf(NULL, MOSQ_LOG_ERR, "Error setting uid whilst dropping privileges: %s.", err);
    #####:  134:				return 1;
        -:  135:			}
    #####:  136:		}
    #####:  137:		if(geteuid() == 0 || getegid() == 0){
    #####:  138:			log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Mosquitto should not be run as root/administrator.");
    #####:  139:		}
    #####:  140:	}
        -:  141:#endif
    #####:  142:	return MOSQ_ERR_SUCCESS;
    #####:  143:}
        -:  144:
    #####:  145:int restore_privileges(void)
        -:  146:{
        -:  147:#if !defined(__CYGWIN__) && !defined(WIN32)
        -:  148:	char *err;
        -:  149:	int rc;
        -:  150:
    #####:  151:	if(getuid() == 0){
    #####:  152:		rc = setegid(0);
    #####:  153:		if(rc == -1){
    #####:  154:			err = strerror(errno);
    #####:  155:			log__printf(NULL, MOSQ_LOG_ERR, "Error setting gid whilst restoring privileges: %s.", err);
    #####:  156:			return 1;
        -:  157:		}
    #####:  158:		rc = seteuid(0);
    #####:  159:		if(rc == -1){
    #####:  160:			err = strerror(errno);
    #####:  161:			log__printf(NULL, MOSQ_LOG_ERR, "Error setting uid whilst restoring privileges: %s.", err);
    #####:  162:			return 1;
        -:  163:		}
    #####:  164:	}
        -:  165:#endif
    #####:  166:	return MOSQ_ERR_SUCCESS;
    #####:  167:}
        -:  168:
        -:  169:
    #####:  170:void mosquitto__daemonise(void)
        -:  171:{
        -:  172:#ifndef WIN32
        -:  173:	char *err;
        -:  174:	pid_t pid;
        -:  175:
    #####:  176:	pid = fork();
    #####:  177:	if(pid < 0){
    #####:  178:		err = strerror(errno);
    #####:  179:		log__printf(NULL, MOSQ_LOG_ERR, "Error in fork: %s", err);
    #####:  180:		exit(1);
        -:  181:	}
    #####:  182:	if(pid > 0){
    #####:  183:		exit(0);
        -:  184:	}
    #####:  185:	if(setsid() < 0){
    #####:  186:		err = strerror(errno);
    #####:  187:		log__printf(NULL, MOSQ_LOG_ERR, "Error in setsid: %s", err);
    #####:  188:		exit(1);
        -:  189:	}
        -:  190:
    #####:  191:	assert(freopen("/dev/null", "r", stdin));
    #####:  192:	assert(freopen("/dev/null", "w", stdout));
    #####:  193:	assert(freopen("/dev/null", "w", stderr));
        -:  194:#else
        -:  195:	log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Can't start in daemon mode in Windows.");
        -:  196:#endif
    #####:  197:}
        -:  198:
        -:  199:
    #####:  200:int main(int argc, char *argv[])
        -:  201:{
    #####:  202:	mosq_sock_t *listensock = NULL;
    #####:  203:	int listensock_count = 0;
    #####:  204:	int listensock_index = 0;
        -:  205:	struct mosquitto__config config;
        -:  206:	int i, j;
        -:  207:	FILE *pid;
        -:  208:	int rc;
        -:  209:#ifdef WIN32
        -:  210:	SYSTEMTIME st;
        -:  211:#else
        -:  212:	struct timeval tv;
        -:  213:#endif
        -:  214:	struct mosquitto *ctxt, *ctxt_tmp;
        -:  215:
        -:  216:#if defined(WIN32) || defined(__CYGWIN__)
        -:  217:	if(argc == 2){
        -:  218:		if(!strcmp(argv[1], "run")){
        -:  219:			service_run();
        -:  220:			return 0;
        -:  221:		}else if(!strcmp(argv[1], "install")){
        -:  222:			service_install();
        -:  223:			return 0;
        -:  224:		}else if(!strcmp(argv[1], "uninstall")){
        -:  225:			service_uninstall();
        -:  226:			return 0;
        -:  227:		}
        -:  228:	}
        -:  229:#endif
        -:  230:
        -:  231:
        -:  232:#ifdef WIN32
        -:  233:	GetSystemTime(&st);
        -:  234:	srand(st.wSecond + st.wMilliseconds);
        -:  235:#else
    #####:  236:	gettimeofday(&tv, NULL);
    #####:  237:	srand(tv.tv_sec + tv.tv_usec);
        -:  238:#endif
        -:  239:
        -:  240:#ifdef WIN32
        -:  241:	_setmaxstdio(2048);
        -:  242:#endif
        -:  243:
    #####:  244:	memset(&int_db, 0, sizeof(struct mosquitto_db));
        -:  245:
    #####:  246:	net__broker_init();
        -:  247:
    #####:  248:	config__init(&int_db, &config);
    #####:  249:	rc = config__parse_args(&int_db, &config, argc, argv);
    #####:  250:	if(rc != MOSQ_ERR_SUCCESS) return rc;
    #####:  251:	int_db.config = &config;
        -:  252:
    #####:  253:	if(config.daemon){
    #####:  254:		mosquitto__daemonise();
    #####:  255:	}
        -:  256:
    #####:  257:	if(config.daemon && config.pid_file){
    #####:  258:		pid = mosquitto__fopen(config.pid_file, "wt", false);
    #####:  259:		if(pid){
    #####:  260:			fprintf(pid, "%d", getpid());
    #####:  261:			fclose(pid);
    #####:  262:		}else{
    #####:  263:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to write pid file.");
    #####:  264:			return 1;
        -:  265:		}
    #####:  266:	}
        -:  267:
    #####:  268:	rc = db__open(&config, &int_db);
    #####:  269:	if(rc != MOSQ_ERR_SUCCESS){
    #####:  270:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Couldn't open database.");
    #####:  271:		return rc;
        -:  272:	}
        -:  273:
        -:  274:	/* Initialise logging only after initialising the database in case we're
        -:  275:	 * logging to topics */
    #####:  276:	if(log__init(&config)){
    #####:  277:		rc = 1;
    #####:  278:		return rc;
        -:  279:	}
    #####:  280:	log__printf(NULL, MOSQ_LOG_INFO, "mosquitto version %s starting", VERSION);
    #####:  281:	if(int_db.config_file){
    #####:  282:		log__printf(NULL, MOSQ_LOG_INFO, "Config loaded from %s.", int_db.config_file);
    #####:  283:	}else{
    #####:  284:		log__printf(NULL, MOSQ_LOG_INFO, "Using default config.");
        -:  285:	}
        -:  286:
    #####:  287:	rc = mosquitto_security_module_init(&int_db);
    #####:  288:	if(rc) return rc;
    #####:  289:	rc = mosquitto_security_init(&int_db, false);
    #####:  290:	if(rc) return rc;
        -:  291:
        -:  292:#ifdef WITH_SYS_TREE
        -:  293:	sys_tree__init(&int_db);
        -:  294:#endif
        -:  295:
    #####:  296:	listensock_index = 0;
    #####:  297:	for(i=0; i<config.listener_count; i++){
    #####:  298:		if(config.listeners[i].protocol == mp_mqtt){
    #####:  299:			if(net__socket_listen(&config.listeners[i])){
    #####:  300:				db__close(&int_db);
    #####:  301:				if(config.pid_file){
    #####:  302:					remove(config.pid_file);
    #####:  303:				}
    #####:  304:				return 1;
        -:  305:			}
    #####:  306:			listensock_count += config.listeners[i].sock_count;
    #####:  307:			listensock = mosquitto__realloc(listensock, sizeof(mosq_sock_t)*listensock_count);
    #####:  308:			if(!listensock){
    #####:  309:				db__close(&int_db);
    #####:  310:				if(config.pid_file){
    #####:  311:					remove(config.pid_file);
    #####:  312:				}
    #####:  313:				return 1;
        -:  314:			}
    #####:  315:			for(j=0; j<config.listeners[i].sock_count; j++){
    #####:  316:				if(config.listeners[i].socks[j] == INVALID_SOCKET){
    #####:  317:					db__close(&int_db);
    #####:  318:					if(config.pid_file){
    #####:  319:						remove(config.pid_file);
    #####:  320:					}
    #####:  321:					return 1;
        -:  322:				}
    #####:  323:				listensock[listensock_index] = config.listeners[i].socks[j];
    #####:  324:				listensock_index++;
    #####:  325:			}
    #####:  326:		}else if(config.listeners[i].protocol == mp_websockets){
        -:  327:#ifdef WITH_WEBSOCKETS
        -:  328:			config.listeners[i].ws_context = mosq_websockets_init(&config.listeners[i], &config);
        -:  329:			if(!config.listeners[i].ws_context){
        -:  330:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to create websockets listener on port %d.", config.listeners[i].port);
        -:  331:				return 1;
        -:  332:			}
        -:  333:#endif
    #####:  334:		}
    #####:  335:	}
    #####:  336:	if(listensock == NULL){
    #####:  337:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to start any listening sockets, exiting.");
    #####:  338:		return 1;
        -:  339:	}
        -:  340:
    #####:  341:	rc = drop_privileges(&config, false);
    #####:  342:	if(rc != MOSQ_ERR_SUCCESS) return rc;
        -:  343:
    #####:  344:	signal(SIGINT, handle_sigint);
    #####:  345:	signal(SIGTERM, handle_sigint);
        -:  346:#ifdef SIGHUP
    #####:  347:	signal(SIGHUP, handle_sighup);
        -:  348:#endif
        -:  349:#ifndef WIN32
    #####:  350:	signal(SIGUSR1, handle_sigusr1);
    #####:  351:	signal(SIGUSR2, handle_sigusr2);
    #####:  352:	signal(SIGPIPE, SIG_IGN);
        -:  353:#endif
        -:  354:#ifdef WIN32
        -:  355:	CreateThread(NULL, 0, SigThreadProc, NULL, 0, NULL);
        -:  356:#endif
        -:  357:
        -:  358:#ifdef WITH_BRIDGE
        -:  359:	for(i=0; i<config.bridge_count; i++){
        -:  360:		if(bridge__new(&int_db, &(config.bridges[i]))){
        -:  361:			log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Unable to connect to bridge %s.", 
        -:  362:					config.bridges[i].name);
        -:  363:		}
        -:  364:	}
        -:  365:#endif
        -:  366:
        -:  367:#ifdef WITH_SYSTEMD
        -:  368:	sd_notify(0, "READY=1");
        -:  369:#endif
        -:  370:
    #####:  371:	run = 1;
    #####:  372:	rc = mosquitto_main_loop(&int_db, listensock, listensock_count);
        -:  373:
    #####:  374:	log__printf(NULL, MOSQ_LOG_INFO, "mosquitto version %s terminating", VERSION);
        -:  375:
        -:  376:#ifdef WITH_WEBSOCKETS
        -:  377:	for(i=0; i<int_db.config->listener_count; i++){
        -:  378:		if(int_db.config->listeners[i].ws_context){
        -:  379:			libwebsocket_context_destroy(int_db.config->listeners[i].ws_context);
        -:  380:		}
        -:  381:		mosquitto__free(int_db.config->listeners[i].ws_protocol);
        -:  382:	}
        -:  383:#endif
        -:  384:
        -:  385:	/* FIXME - this isn't quite right, all wills with will delay zero should be
        -:  386:	 * sent now, but those with positive will delay should be persisted and
        -:  387:	 * restored, pending the client reconnecting in time. */
    #####:  388:	HASH_ITER(hh_id, int_db.contexts_by_id, ctxt, ctxt_tmp){
    #####:  389:		context__send_will(&int_db, ctxt);
    #####:  390:	}
    #####:  391:	will_delay__send_all(&int_db);
        -:  392:
        -:  393:#ifdef WITH_PERSISTENCE
        -:  394:	if(config.persistence){
        -:  395:		persist__backup(&int_db, true);
        -:  396:	}
        -:  397:#endif
    #####:  398:	session_expiry__remove_all(&int_db);
        -:  399:
    #####:  400:	HASH_ITER(hh_id, int_db.contexts_by_id, ctxt, ctxt_tmp){
        -:  401:#ifdef WITH_WEBSOCKETS
        -:  402:		if(!ctxt->wsi){
        -:  403:			context__cleanup(&int_db, ctxt, true);
        -:  404:		}
        -:  405:#else
    #####:  406:		context__cleanup(&int_db, ctxt, true);
        -:  407:#endif
    #####:  408:	}
    #####:  409:	HASH_ITER(hh_sock, int_db.contexts_by_sock, ctxt, ctxt_tmp){
    #####:  410:		context__cleanup(&int_db, ctxt, true);
    #####:  411:	}
        -:  412:#ifdef WITH_BRIDGE
        -:  413:	for(i=0; i<int_db.bridge_count; i++){
        -:  414:		if(int_db.bridges[i]){
        -:  415:			context__cleanup(&int_db, int_db.bridges[i], true);
        -:  416:		}
        -:  417:	}
        -:  418:	mosquitto__free(int_db.bridges);
        -:  419:#endif
    #####:  420:	context__free_disused(&int_db);
        -:  421:
    #####:  422:	db__close(&int_db);
        -:  423:
    #####:  424:	for(i=0; i<listensock_count; i++){
    #####:  425:		if(listensock[i] != INVALID_SOCKET){
        -:  426:#ifndef WIN32
    #####:  427:			close(listensock[i]);
        -:  428:#else
        -:  429:			closesocket(listensock[i]);
        -:  430:#endif
    #####:  431:		}
    #####:  432:	}
    #####:  433:	mosquitto__free(listensock);
        -:  434:
    #####:  435:	mosquitto_security_module_cleanup(&int_db);
        -:  436:
    #####:  437:	if(config.pid_file){
    #####:  438:		remove(config.pid_file);
    #####:  439:	}
        -:  440:
    #####:  441:	log__close(&config);
    #####:  442:	config__cleanup(int_db.config);
    #####:  443:	net__broker_cleanup();
        -:  444:
    #####:  445:	return rc;
    #####:  446:}
        -:  447:
        -:  448:#ifdef WIN32
        -:  449:int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
        -:  450:{
        -:  451:	char **argv;
        -:  452:	int argc = 1;
        -:  453:	char *token;
        -:  454:	char *saveptr = NULL;
        -:  455:	int rc;
        -:  456:
        -:  457:	argv = mosquitto__malloc(sizeof(char *)*1);
        -:  458:	argv[0] = "mosquitto";
        -:  459:	token = strtok_r(lpCmdLine, " ", &saveptr);
        -:  460:	while(token){
        -:  461:		argc++;
        -:  462:		argv = mosquitto__realloc(argv, sizeof(char *)*argc);
        -:  463:		if(!argv){
        -:  464:			fprintf(stderr, "Error: Out of memory.\n");
        -:  465:			return MOSQ_ERR_NOMEM;
        -:  466:		}
        -:  467:		argv[argc-1] = token;
        -:  468:		token = strtok_r(NULL, " ", &saveptr);
        -:  469:	}
        -:  470:	rc = main(argc, argv);
        -:  471:	mosquitto__free(argv);
        -:  472:	return rc;
        -:  473:}
        -:  474:#endif
