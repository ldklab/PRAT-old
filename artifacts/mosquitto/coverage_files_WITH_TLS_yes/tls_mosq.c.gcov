        -:    0:Source:../lib/tls_mosq.c
        -:    0:Graph:tls_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2013-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#ifdef WITH_TLS
        -:   18:
        -:   19:#include "config.h"
        -:   20:
        -:   21:#ifdef WIN32
        -:   22:#  include <winsock2.h>
        -:   23:#  include <ws2tcpip.h>
        -:   24:#else
        -:   25:#  include <arpa/inet.h>
        -:   26:#  include <sys/socket.h>
        -:   27:#  include <strings.h>
        -:   28:#endif
        -:   29:
        -:   30:#include <string.h>
        -:   31:#include <openssl/conf.h>
        -:   32:#include <openssl/x509v3.h>
        -:   33:#include <openssl/ssl.h>
        -:   34:
        -:   35:#ifdef WITH_BROKER
        -:   36:#  include "mosquitto_broker_internal.h"
        -:   37:#endif
        -:   38:#include "mosquitto_internal.h"
        -:   39:#include "logging_mosq.h"
        -:   40:#include "tls_mosq.h"
        -:   41:
        -:   42:extern int tls_ex_index_mosq;
        -:   43:
    #####:   44:int mosquitto__server_certificate_verify(int preverify_ok, X509_STORE_CTX *ctx)
        -:   45:{
        -:   46:	/* Preverify should have already checked expiry, revocation.
        -:   47:	 * We need to verify the hostname. */
        -:   48:	struct mosquitto *mosq;
        -:   49:	SSL *ssl;
        -:   50:	X509 *cert;
        -:   51:
        -:   52:	/* Always reject if preverify_ok has failed. */
    #####:   53:	if(!preverify_ok) return 0;
        -:   54:
    #####:   55:	ssl = X509_STORE_CTX_get_ex_data(ctx, SSL_get_ex_data_X509_STORE_CTX_idx());
    #####:   56:	mosq = SSL_get_ex_data(ssl, tls_ex_index_mosq);
    #####:   57:	if(!mosq) return 0;
        -:   58:
    #####:   59:	if(mosq->tls_insecure == false){
    #####:   60:		if(X509_STORE_CTX_get_error_depth(ctx) == 0){
        -:   61:			/* FIXME - use X509_check_host() etc. for sufficiently new openssl (>=1.1.x) */
    #####:   62:			cert = X509_STORE_CTX_get_current_cert(ctx);
        -:   63:			/* This is the peer certificate, all others are upwards in the chain. */
        -:   64:#if defined(WITH_BROKER)
    #####:   65:			preverify_ok = mosquitto__verify_certificate_hostname(cert, mosq->bridge->addresses[mosq->bridge->cur_address].address);
        -:   66:#else
        -:   67:			preverify_ok = mosquitto__verify_certificate_hostname(cert, mosq->host);
        -:   68:#endif
    #####:   69:			if (preverify_ok != 1) {
    #####:   70:				log__printf(mosq, MOSQ_LOG_ERR, "Error: host name verification failed.");
    #####:   71:			}
    #####:   72:			return preverify_ok;
        -:   73:		}else{
    #####:   74:			return preverify_ok;
        -:   75:		}
        -:   76:	}else{
    #####:   77:		return preverify_ok;
        -:   78:	}
    #####:   79:}
        -:   80:
    #####:   81:int mosquitto__cmp_hostname_wildcard(char *certname, const char *hostname)
        -:   82:{
        -:   83:	int i;
        -:   84:	int len;
        -:   85:
    #####:   86:	if(!certname || !hostname){
    #####:   87:		return 1;
        -:   88:	}
        -:   89:
    #####:   90:	if(certname[0] == '*'){
    #####:   91:		if(certname[1] != '.'){
    #####:   92:			return 1;
        -:   93:		}
    #####:   94:		certname += 2;
    #####:   95:		len = strlen(hostname);
    #####:   96:		for(i=0; i<len-1; i++){
    #####:   97:			if(hostname[i] == '.'){
    #####:   98:				hostname += i+1;
    #####:   99:				break;
        -:  100:			}
    #####:  101:		}
    #####:  102:		return strcasecmp(certname, hostname);
        -:  103:	}else{
    #####:  104:		return strcasecmp(certname, hostname);
        -:  105:	}
    #####:  106:}
        -:  107:
        -:  108:/* This code is based heavily on the example provided in "Secure Programming
        -:  109: * Cookbook for C and C++".
        -:  110: */
    #####:  111:int mosquitto__verify_certificate_hostname(X509 *cert, const char *hostname)
        -:  112:{
        -:  113:	int i;
        -:  114:	char name[256];
        -:  115:	X509_NAME *subj;
    #####:  116:	bool have_san_dns = false;
        -:  117:	STACK_OF(GENERAL_NAME) *san;
        -:  118:	const GENERAL_NAME *nval;
        -:  119:	const unsigned char *data;
        -:  120:	unsigned char ipv6_addr[16];
        -:  121:	unsigned char ipv4_addr[4];
        -:  122:	int ipv6_ok;
        -:  123:	int ipv4_ok;
        -:  124:
        -:  125:#ifdef WIN32
        -:  126:	ipv6_ok = InetPton(AF_INET6, hostname, &ipv6_addr);
        -:  127:	ipv4_ok = InetPton(AF_INET, hostname, &ipv4_addr);
        -:  128:#else
    #####:  129:	ipv6_ok = inet_pton(AF_INET6, hostname, &ipv6_addr);
    #####:  130:	ipv4_ok = inet_pton(AF_INET, hostname, &ipv4_addr);
        -:  131:#endif
        -:  132:
    #####:  133:	san = X509_get_ext_d2i(cert, NID_subject_alt_name, NULL, NULL);
    #####:  134:	if(san){
    #####:  135:		for(i=0; i<sk_GENERAL_NAME_num(san); i++){
    #####:  136:			nval = sk_GENERAL_NAME_value(san, i);
    #####:  137:			if(nval->type == GEN_DNS){
        -:  138:#if OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  139:				data = ASN1_STRING_data(nval->d.dNSName);
        -:  140:#else
    #####:  141:				data = ASN1_STRING_get0_data(nval->d.dNSName);
        -:  142:#endif
    #####:  143:				if(data && !mosquitto__cmp_hostname_wildcard((char *)data, hostname)){
    #####:  144:					sk_GENERAL_NAME_pop_free(san, GENERAL_NAME_free);
    #####:  145:					return 1;
        -:  146:				}
    #####:  147:				have_san_dns = true;
    #####:  148:			}else if(nval->type == GEN_IPADD){
        -:  149:#if OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  150:				data = ASN1_STRING_data(nval->d.iPAddress);
        -:  151:#else
    #####:  152:				data = ASN1_STRING_get0_data(nval->d.iPAddress);
        -:  153:#endif
    #####:  154:				if(nval->d.iPAddress->length == 4 && ipv4_ok){
    #####:  155:					if(!memcmp(ipv4_addr, data, 4)){
    #####:  156:						sk_GENERAL_NAME_pop_free(san, GENERAL_NAME_free);
    #####:  157:						return 1;
        -:  158:					}
    #####:  159:				}else if(nval->d.iPAddress->length == 16 && ipv6_ok){
    #####:  160:					if(!memcmp(ipv6_addr, data, 16)){
    #####:  161:						sk_GENERAL_NAME_pop_free(san, GENERAL_NAME_free);
    #####:  162:						return 1;
        -:  163:					}
    #####:  164:				}
    #####:  165:			}
    #####:  166:		}
    #####:  167:		sk_GENERAL_NAME_pop_free(san, GENERAL_NAME_free);
    #####:  168:		if(have_san_dns){
        -:  169:			/* Only check CN if subjectAltName DNS entry does not exist. */
    #####:  170:			return 0;
        -:  171:		}
    #####:  172:	}
        -:  173:
    #####:  174:	subj = X509_get_subject_name(cert);
    #####:  175:	if(X509_NAME_get_text_by_NID(subj, NID_commonName, name, sizeof(name)) > 0){
    #####:  176:		name[sizeof(name) - 1] = '\0';
    #####:  177:		if (!mosquitto__cmp_hostname_wildcard(name, hostname)) return 1;
    #####:  178:	}
    #####:  179:	return 0;
    #####:  180:}
        -:  181:
        -:  182:#endif
        -:  183:
