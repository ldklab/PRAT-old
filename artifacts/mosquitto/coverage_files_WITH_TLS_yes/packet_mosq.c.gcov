        -:    0:Source:../lib/packet_mosq.c
        -:    0:Graph:packet_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:#include <errno.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#ifdef WITH_BROKER
        -:   24:#  include "mosquitto_broker_internal.h"
        -:   25:#  ifdef WITH_WEBSOCKETS
        -:   26:#    include <libwebsockets.h>
        -:   27:#  endif
        -:   28:#else
        -:   29:#  include "read_handle.h"
        -:   30:#endif
        -:   31:
        -:   32:#include "memory_mosq.h"
        -:   33:#include "mqtt_protocol.h"
        -:   34:#include "net_mosq.h"
        -:   35:#include "packet_mosq.h"
        -:   36:#include "read_handle.h"
        -:   37:#include "util_mosq.h"
        -:   38:#ifdef WITH_BROKER
        -:   39:#  include "sys_tree.h"
        -:   40:#  include "send_mosq.h"
        -:   41:#else
        -:   42:#  define G_BYTES_RECEIVED_INC(A)
        -:   43:#  define G_BYTES_SENT_INC(A)
        -:   44:#  define G_MSGS_SENT_INC(A)
        -:   45:#  define G_PUB_MSGS_SENT_INC(A)
        -:   46:#endif
        -:   47:
    #####:   48:int packet__alloc(struct mosquitto__packet *packet)
        -:   49:{
        -:   50:	uint8_t remaining_bytes[5], byte;
        -:   51:	uint32_t remaining_length;
        -:   52:	int i;
        -:   53:
    #####:   54:	assert(packet);
        -:   55:
    #####:   56:	remaining_length = packet->remaining_length;
    #####:   57:	packet->payload = NULL;
    #####:   58:	packet->remaining_count = 0;
    #####:   59:	do{
    #####:   60:		byte = remaining_length % 128;
    #####:   61:		remaining_length = remaining_length / 128;
        -:   62:		/* If there are more digits to encode, set the top bit of this digit */
    #####:   63:		if(remaining_length > 0){
    #####:   64:			byte = byte | 0x80;
    #####:   65:		}
    #####:   66:		remaining_bytes[packet->remaining_count] = byte;
    #####:   67:		packet->remaining_count++;
    #####:   68:	}while(remaining_length > 0 && packet->remaining_count < 5);
    #####:   69:	if(packet->remaining_count == 5) return MOSQ_ERR_PAYLOAD_SIZE;
    #####:   70:	packet->packet_length = packet->remaining_length + 1 + packet->remaining_count;
        -:   71:#ifdef WITH_WEBSOCKETS
        -:   72:	packet->payload = mosquitto__malloc(sizeof(uint8_t)*packet->packet_length + LWS_SEND_BUFFER_PRE_PADDING + LWS_SEND_BUFFER_POST_PADDING);
        -:   73:#else
    #####:   74:	packet->payload = mosquitto__malloc(sizeof(uint8_t)*packet->packet_length);
        -:   75:#endif
    #####:   76:	if(!packet->payload) return MOSQ_ERR_NOMEM;
        -:   77:
    #####:   78:	packet->payload[0] = packet->command;
    #####:   79:	for(i=0; i<packet->remaining_count; i++){
    #####:   80:		packet->payload[i+1] = remaining_bytes[i];
    #####:   81:	}
    #####:   82:	packet->pos = 1 + packet->remaining_count;
        -:   83:
    #####:   84:	return MOSQ_ERR_SUCCESS;
    #####:   85:}
        -:   86:
    #####:   87:void packet__cleanup(struct mosquitto__packet *packet)
        -:   88:{
    #####:   89:	if(!packet) return;
        -:   90:
        -:   91:	/* Free data and reset values */
    #####:   92:	packet->command = 0;
    #####:   93:	packet->remaining_count = 0;
    #####:   94:	packet->remaining_mult = 1;
    #####:   95:	packet->remaining_length = 0;
    #####:   96:	mosquitto__free(packet->payload);
    #####:   97:	packet->payload = NULL;
    #####:   98:	packet->to_process = 0;
    #####:   99:	packet->pos = 0;
    #####:  100:}
        -:  101:
        -:  102:
    #####:  103:void packet__cleanup_all(struct mosquitto *mosq)
        -:  104:{
        -:  105:	struct mosquitto__packet *packet;
        -:  106:
        -:  107:	pthread_mutex_lock(&mosq->current_out_packet_mutex);
        -:  108:	pthread_mutex_lock(&mosq->out_packet_mutex);
        -:  109:
        -:  110:	/* Out packet cleanup */
    #####:  111:	if(mosq->out_packet && !mosq->current_out_packet){
    #####:  112:		mosq->current_out_packet = mosq->out_packet;
    #####:  113:		mosq->out_packet = mosq->out_packet->next;
    #####:  114:	}
    #####:  115:	while(mosq->current_out_packet){
    #####:  116:		packet = mosq->current_out_packet;
        -:  117:		/* Free data and reset values */
    #####:  118:		mosq->current_out_packet = mosq->out_packet;
    #####:  119:		if(mosq->out_packet){
    #####:  120:			mosq->out_packet = mosq->out_packet->next;
    #####:  121:		}
        -:  122:
    #####:  123:		packet__cleanup(packet);
    #####:  124:		mosquitto__free(packet);
        -:  125:	}
        -:  126:
    #####:  127:	packet__cleanup(&mosq->in_packet);
        -:  128:
        -:  129:	pthread_mutex_unlock(&mosq->out_packet_mutex);
        -:  130:	pthread_mutex_unlock(&mosq->current_out_packet_mutex);
    #####:  131:}
        -:  132:
        -:  133:
    #####:  134:int packet__queue(struct mosquitto *mosq, struct mosquitto__packet *packet)
        -:  135:{
        -:  136:#ifndef WITH_BROKER
        -:  137:	char sockpair_data = 0;
        -:  138:#endif
    #####:  139:	assert(mosq);
    #####:  140:	assert(packet);
        -:  141:
    #####:  142:	packet->pos = 0;
    #####:  143:	packet->to_process = packet->packet_length;
        -:  144:
    #####:  145:	packet->next = NULL;
        -:  146:	pthread_mutex_lock(&mosq->out_packet_mutex);
    #####:  147:	if(mosq->out_packet){
    #####:  148:		mosq->out_packet_last->next = packet;
    #####:  149:	}else{
    #####:  150:		mosq->out_packet = packet;
        -:  151:	}
    #####:  152:	mosq->out_packet_last = packet;
        -:  153:	pthread_mutex_unlock(&mosq->out_packet_mutex);
        -:  154:#ifdef WITH_BROKER
        -:  155:#  ifdef WITH_WEBSOCKETS
        -:  156:	if(mosq->wsi){
        -:  157:		libwebsocket_callback_on_writable(mosq->ws_context, mosq->wsi);
        -:  158:		return MOSQ_ERR_SUCCESS;
        -:  159:	}else{
        -:  160:		return packet__write(mosq);
        -:  161:	}
        -:  162:#  else
    #####:  163:	return packet__write(mosq);
        -:  164:#  endif
        -:  165:#else
        -:  166:
        -:  167:	/* Write a single byte to sockpairW (connected to sockpairR) to break out
        -:  168:	 * of select() if in threaded mode. */
        -:  169:	if(mosq->sockpairW != INVALID_SOCKET){
        -:  170:#ifndef WIN32
        -:  171:		if(write(mosq->sockpairW, &sockpair_data, 1)){
        -:  172:		}
        -:  173:#else
        -:  174:		send(mosq->sockpairW, &sockpair_data, 1, 0);
        -:  175:#endif
        -:  176:	}
        -:  177:
        -:  178:	if(mosq->in_callback == false && mosq->threaded == mosq_ts_none){
        -:  179:		return packet__write(mosq);
        -:  180:	}else{
        -:  181:		return MOSQ_ERR_SUCCESS;
        -:  182:	}
        -:  183:#endif
        -:  184:}
        -:  185:
        -:  186:
    #####:  187:int packet__check_oversize(struct mosquitto *mosq, uint32_t remaining_length)
        -:  188:{
        -:  189:	uint32_t len;
        -:  190:
    #####:  191:	if(mosq->maximum_packet_size == 0) return MOSQ_ERR_SUCCESS;
        -:  192:
    #####:  193:	len = remaining_length + packet__varint_bytes(remaining_length);
    #####:  194:	if(len > mosq->maximum_packet_size){
    #####:  195:		return MOSQ_ERR_OVERSIZE_PACKET;
        -:  196:	}else{
    #####:  197:		return MOSQ_ERR_SUCCESS;
        -:  198:	}
    #####:  199:}
        -:  200:
        -:  201:
    #####:  202:int packet__write(struct mosquitto *mosq)
        -:  203:{
        -:  204:	ssize_t write_length;
        -:  205:	struct mosquitto__packet *packet;
        -:  206:	int state;
        -:  207:
    #####:  208:	if(!mosq) return MOSQ_ERR_INVAL;
    #####:  209:	if(mosq->sock == INVALID_SOCKET) return MOSQ_ERR_NO_CONN;
        -:  210:
        -:  211:	pthread_mutex_lock(&mosq->current_out_packet_mutex);
        -:  212:	pthread_mutex_lock(&mosq->out_packet_mutex);
    #####:  213:	if(mosq->out_packet && !mosq->current_out_packet){
    #####:  214:		mosq->current_out_packet = mosq->out_packet;
    #####:  215:		mosq->out_packet = mosq->out_packet->next;
    #####:  216:		if(!mosq->out_packet){
    #####:  217:			mosq->out_packet_last = NULL;
    #####:  218:		}
    #####:  219:	}
        -:  220:	pthread_mutex_unlock(&mosq->out_packet_mutex);
        -:  221:
    #####:  222:	state = mosquitto__get_state(mosq);
        -:  223:#if defined(WITH_TLS) && !defined(WITH_BROKER)
        -:  224:	if((state == mosq_cs_connect_pending) || mosq->want_connect){
        -:  225:#else
    #####:  226:	if(state == mosq_cs_connect_pending){
        -:  227:#endif
        -:  228:		pthread_mutex_unlock(&mosq->current_out_packet_mutex);
    #####:  229:		return MOSQ_ERR_SUCCESS;
        -:  230:	}
        -:  231:
    #####:  232:	while(mosq->current_out_packet){
    #####:  233:		packet = mosq->current_out_packet;
        -:  234:
    #####:  235:		while(packet->to_process > 0){
    #####:  236:			write_length = net__write(mosq, &(packet->payload[packet->pos]), packet->to_process);
    #####:  237:			if(write_length > 0){
        -:  238:				G_BYTES_SENT_INC(write_length);
    #####:  239:				packet->to_process -= write_length;
    #####:  240:				packet->pos += write_length;
    #####:  241:			}else{
        -:  242:#ifdef WIN32
        -:  243:				errno = WSAGetLastError();
        -:  244:#endif
    #####:  245:				if(errno == EAGAIN || errno == COMPAT_EWOULDBLOCK
        -:  246:#ifdef WIN32
        -:  247:						|| errno == WSAENOTCONN
        -:  248:#endif
        -:  249:						){
        -:  250:					pthread_mutex_unlock(&mosq->current_out_packet_mutex);
    #####:  251:					return MOSQ_ERR_SUCCESS;
        -:  252:				}else{
        -:  253:					pthread_mutex_unlock(&mosq->current_out_packet_mutex);
    #####:  254:					switch(errno){
        -:  255:						case COMPAT_ECONNRESET:
    #####:  256:							return MOSQ_ERR_CONN_LOST;
        -:  257:						default:
    #####:  258:							return MOSQ_ERR_ERRNO;
        -:  259:					}
        -:  260:				}
        -:  261:			}
        -:  262:		}
        -:  263:
        -:  264:		G_MSGS_SENT_INC(1);
    #####:  265:		if(((packet->command)&0xF6) == CMD_PUBLISH){
        -:  266:			G_PUB_MSGS_SENT_INC(1);
        -:  267:#ifndef WITH_BROKER
        -:  268:			pthread_mutex_lock(&mosq->callback_mutex);
        -:  269:			if(mosq->on_publish){
        -:  270:				/* This is a QoS=0 message */
        -:  271:				mosq->in_callback = true;
        -:  272:				mosq->on_publish(mosq, mosq->userdata, packet->mid);
        -:  273:				mosq->in_callback = false;
        -:  274:			}
        -:  275:			if(mosq->on_publish_v5){
        -:  276:				/* This is a QoS=0 message */
        -:  277:				mosq->in_callback = true;
        -:  278:				mosq->on_publish_v5(mosq, mosq->userdata, packet->mid, 0, NULL);
        -:  279:				mosq->in_callback = false;
        -:  280:			}
        -:  281:			pthread_mutex_unlock(&mosq->callback_mutex);
        -:  282:		}else if(((packet->command)&0xF0) == CMD_DISCONNECT){
        -:  283:			do_client_disconnect(mosq, MOSQ_ERR_SUCCESS, NULL);
        -:  284:			packet__cleanup(packet);
        -:  285:			mosquitto__free(packet);
        -:  286:			return MOSQ_ERR_SUCCESS;
        -:  287:#endif
    #####:  288:		}
        -:  289:
        -:  290:		/* Free data and reset values */
        -:  291:		pthread_mutex_lock(&mosq->out_packet_mutex);
    #####:  292:		mosq->current_out_packet = mosq->out_packet;
    #####:  293:		if(mosq->out_packet){
    #####:  294:			mosq->out_packet = mosq->out_packet->next;
    #####:  295:			if(!mosq->out_packet){
    #####:  296:				mosq->out_packet_last = NULL;
    #####:  297:			}
    #####:  298:		}
        -:  299:		pthread_mutex_unlock(&mosq->out_packet_mutex);
        -:  300:
    #####:  301:		packet__cleanup(packet);
    #####:  302:		mosquitto__free(packet);
        -:  303:
        -:  304:		pthread_mutex_lock(&mosq->msgtime_mutex);
    #####:  305:		mosq->next_msg_out = mosquitto_time() + mosq->keepalive;
        -:  306:		pthread_mutex_unlock(&mosq->msgtime_mutex);
        -:  307:	}
        -:  308:	pthread_mutex_unlock(&mosq->current_out_packet_mutex);
    #####:  309:	return MOSQ_ERR_SUCCESS;
    #####:  310:}
        -:  311:
        -:  312:
        -:  313:#ifdef WITH_BROKER
    #####:  314:int packet__read(struct mosquitto_db *db, struct mosquitto *mosq)
        -:  315:#else
        -:  316:int packet__read(struct mosquitto *mosq)
        -:  317:#endif
        -:  318:{
        -:  319:	uint8_t byte;
        -:  320:	ssize_t read_length;
    #####:  321:	int rc = 0;
        -:  322:	int state;
        -:  323:
    #####:  324:	if(!mosq){
    #####:  325:		return MOSQ_ERR_INVAL;
        -:  326:	}
    #####:  327:	if(mosq->sock == INVALID_SOCKET){
    #####:  328:		return MOSQ_ERR_NO_CONN;
        -:  329:	}
        -:  330:
    #####:  331:	state = mosquitto__get_state(mosq);
    #####:  332:	if(state == mosq_cs_connect_pending){
    #####:  333:		return MOSQ_ERR_SUCCESS;
        -:  334:	}
        -:  335:
        -:  336:	/* This gets called if pselect() indicates that there is network data
        -:  337:	 * available - ie. at least one byte.  What we do depends on what data we
        -:  338:	 * already have.
        -:  339:	 * If we've not got a command, attempt to read one and save it. This should
        -:  340:	 * always work because it's only a single byte.
        -:  341:	 * Then try to read the remaining length. This may fail because it is may
        -:  342:	 * be more than one byte - will need to save data pending next read if it
        -:  343:	 * does fail.
        -:  344:	 * Then try to read the remaining payload, where 'payload' here means the
        -:  345:	 * combined variable header and actual payload. This is the most likely to
        -:  346:	 * fail due to longer length, so save current data and current position.
        -:  347:	 * After all data is read, send to mosquitto__handle_packet() to deal with.
        -:  348:	 * Finally, free the memory and reset everything to starting conditions.
        -:  349:	 */
    #####:  350:	if(!mosq->in_packet.command){
    #####:  351:		read_length = net__read(mosq, &byte, 1);
    #####:  352:		if(read_length == 1){
    #####:  353:			mosq->in_packet.command = byte;
        -:  354:#ifdef WITH_BROKER
        -:  355:			G_BYTES_RECEIVED_INC(1);
        -:  356:			/* Clients must send CONNECT as their first command. */
    #####:  357:			if(!(mosq->bridge) && mosq->state == mosq_cs_connected && (byte&0xF0) != CMD_CONNECT){
    #####:  358:				return MOSQ_ERR_PROTOCOL;
        -:  359:			}
        -:  360:#endif
    #####:  361:		}else{
    #####:  362:			if(read_length == 0){
    #####:  363:				return MOSQ_ERR_CONN_LOST; /* EOF */
        -:  364:			}
        -:  365:#ifdef WIN32
        -:  366:			errno = WSAGetLastError();
        -:  367:#endif
    #####:  368:			if(errno == EAGAIN || errno == COMPAT_EWOULDBLOCK){
    #####:  369:				return MOSQ_ERR_SUCCESS;
        -:  370:			}else{
    #####:  371:				switch(errno){
        -:  372:					case COMPAT_ECONNRESET:
    #####:  373:						return MOSQ_ERR_CONN_LOST;
        -:  374:					default:
    #####:  375:						return MOSQ_ERR_ERRNO;
        -:  376:				}
        -:  377:			}
        -:  378:		}
    #####:  379:	}
        -:  380:	/* remaining_count is the number of bytes that the remaining_length
        -:  381:	 * parameter occupied in this incoming packet. We don't use it here as such
        -:  382:	 * (it is used when allocating an outgoing packet), but we must be able to
        -:  383:	 * determine whether all of the remaining_length parameter has been read.
        -:  384:	 * remaining_count has three states here:
        -:  385:	 *   0 means that we haven't read any remaining_length bytes
        -:  386:	 *   <0 means we have read some remaining_length bytes but haven't finished
        -:  387:	 *   >0 means we have finished reading the remaining_length bytes.
        -:  388:	 */
    #####:  389:	if(mosq->in_packet.remaining_count <= 0){
    #####:  390:		do{
    #####:  391:			read_length = net__read(mosq, &byte, 1);
    #####:  392:			if(read_length == 1){
    #####:  393:				mosq->in_packet.remaining_count--;
        -:  394:				/* Max 4 bytes length for remaining length as defined by protocol.
        -:  395:				 * Anything more likely means a broken/malicious client.
        -:  396:				 */
    #####:  397:				if(mosq->in_packet.remaining_count < -4){
    #####:  398:					return MOSQ_ERR_PROTOCOL;
        -:  399:				}
        -:  400:
        -:  401:				G_BYTES_RECEIVED_INC(1);
    #####:  402:				mosq->in_packet.remaining_length += (byte & 127) * mosq->in_packet.remaining_mult;
    #####:  403:				mosq->in_packet.remaining_mult *= 128;
    #####:  404:			}else{
    #####:  405:				if(read_length == 0){
    #####:  406:					return MOSQ_ERR_CONN_LOST; /* EOF */
        -:  407:				}
        -:  408:#ifdef WIN32
        -:  409:				errno = WSAGetLastError();
        -:  410:#endif
    #####:  411:				if(errno == EAGAIN || errno == COMPAT_EWOULDBLOCK){
    #####:  412:					return MOSQ_ERR_SUCCESS;
        -:  413:				}else{
    #####:  414:					switch(errno){
        -:  415:						case COMPAT_ECONNRESET:
    #####:  416:							return MOSQ_ERR_CONN_LOST;
        -:  417:						default:
    #####:  418:							return MOSQ_ERR_ERRNO;
        -:  419:					}
        -:  420:				}
        -:  421:			}
    #####:  422:		}while((byte & 128) != 0);
        -:  423:		/* We have finished reading remaining_length, so make remaining_count
        -:  424:		 * positive. */
    #####:  425:		mosq->in_packet.remaining_count *= -1;
        -:  426:
        -:  427:#ifdef WITH_BROKER
    #####:  428:		if(db->config->max_packet_size > 0 && mosq->in_packet.remaining_length+1 > db->config->max_packet_size){
    #####:  429:			log__printf(NULL, MOSQ_LOG_INFO, "Client %s sent too large packet %d, disconnecting.", mosq->id, mosq->in_packet.remaining_length+1);
    #####:  430:			if(mosq->protocol == mosq_p_mqtt5){
    #####:  431:				send__disconnect(mosq, MQTT_RC_PACKET_TOO_LARGE, NULL);
    #####:  432:			}
    #####:  433:			return MOSQ_ERR_OVERSIZE_PACKET;
        -:  434:		}
        -:  435:#else
        -:  436:		// FIXME - client case for incoming message received from broker too large
        -:  437:#endif
    #####:  438:		if(mosq->in_packet.remaining_length > 0){
    #####:  439:			mosq->in_packet.payload = mosquitto__malloc(mosq->in_packet.remaining_length*sizeof(uint8_t));
    #####:  440:			if(!mosq->in_packet.payload){
    #####:  441:				return MOSQ_ERR_NOMEM;
        -:  442:			}
    #####:  443:			mosq->in_packet.to_process = mosq->in_packet.remaining_length;
    #####:  444:		}
    #####:  445:	}
    #####:  446:	while(mosq->in_packet.to_process>0){
    #####:  447:		read_length = net__read(mosq, &(mosq->in_packet.payload[mosq->in_packet.pos]), mosq->in_packet.to_process);
    #####:  448:		if(read_length > 0){
        -:  449:			G_BYTES_RECEIVED_INC(read_length);
    #####:  450:			mosq->in_packet.to_process -= read_length;
    #####:  451:			mosq->in_packet.pos += read_length;
    #####:  452:		}else{
        -:  453:#ifdef WIN32
        -:  454:			errno = WSAGetLastError();
        -:  455:#endif
    #####:  456:			if(errno == EAGAIN || errno == COMPAT_EWOULDBLOCK){
    #####:  457:				if(mosq->in_packet.to_process > 1000){
        -:  458:					/* Update last_msg_in time if more than 1000 bytes left to
        -:  459:					 * receive. Helps when receiving large messages.
        -:  460:					 * This is an arbitrary limit, but with some consideration.
        -:  461:					 * If a client can't send 1000 bytes in a second it
        -:  462:					 * probably shouldn't be using a 1 second keep alive. */
        -:  463:					pthread_mutex_lock(&mosq->msgtime_mutex);
    #####:  464:					mosq->last_msg_in = mosquitto_time();
        -:  465:					pthread_mutex_unlock(&mosq->msgtime_mutex);
    #####:  466:				}
    #####:  467:				return MOSQ_ERR_SUCCESS;
        -:  468:			}else{
    #####:  469:				switch(errno){
        -:  470:					case COMPAT_ECONNRESET:
    #####:  471:						return MOSQ_ERR_CONN_LOST;
        -:  472:					default:
    #####:  473:						return MOSQ_ERR_ERRNO;
        -:  474:				}
        -:  475:			}
        -:  476:		}
        -:  477:	}
        -:  478:
        -:  479:	/* All data for this packet is read. */
    #####:  480:	mosq->in_packet.pos = 0;
        -:  481:#ifdef WITH_BROKER
        -:  482:	G_MSGS_RECEIVED_INC(1);
    #####:  483:	if(((mosq->in_packet.command)&0xF5) == CMD_PUBLISH){
        -:  484:		G_PUB_MSGS_RECEIVED_INC(1);
    #####:  485:	}
    #####:  486:	rc = handle__packet(db, mosq);
        -:  487:#else
        -:  488:	rc = handle__packet(mosq);
        -:  489:#endif
        -:  490:
        -:  491:	/* Free data and reset values */
    #####:  492:	packet__cleanup(&mosq->in_packet);
        -:  493:
        -:  494:	pthread_mutex_lock(&mosq->msgtime_mutex);
    #####:  495:	mosq->last_msg_in = mosquitto_time();
        -:  496:	pthread_mutex_unlock(&mosq->msgtime_mutex);
    #####:  497:	return rc;
    #####:  498:}
