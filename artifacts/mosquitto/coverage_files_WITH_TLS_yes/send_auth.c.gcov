        -:    0:Source:send_auth.c
        -:    0:Graph:send_auth.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2019-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include "mosquitto_broker_internal.h"
        -:   20:#include "mqtt_protocol.h"
        -:   21:#include "memory_mosq.h"
        -:   22:#include "packet_mosq.h"
        -:   23:#include "property_mosq.h"
        -:   24:#include "util_mosq.h"
        -:   25:
    #####:   26:int send__auth(struct mosquitto_db *db, struct mosquitto *context, int reason_code, const void *auth_data, uint16_t auth_data_len)
        -:   27:{
    #####:   28:	struct mosquitto__packet *packet = NULL;
        -:   29:	int rc;
    #####:   30:	mosquitto_property *properties = NULL;
        -:   31:	int proplen, varbytes;
        -:   32:	uint32_t remaining_length;
        -:   33:
    #####:   34:	if(context->auth_method == NULL) return MOSQ_ERR_INVAL;
    #####:   35:	if(context->protocol != mosq_p_mqtt5) return MOSQ_ERR_PROTOCOL;
        -:   36:
    #####:   37:	log__printf(NULL, MOSQ_LOG_DEBUG, "Sending AUTH to %s (rc%d, %s)", context->id, reason_code, context->auth_method);
        -:   38:
    #####:   39:	remaining_length = 1;
        -:   40:
    #####:   41:	rc = mosquitto_property_add_string(&properties, MQTT_PROP_AUTHENTICATION_METHOD, context->auth_method);
    #####:   42:	if(rc){
    #####:   43:		mosquitto_property_free_all(&properties);
    #####:   44:		return rc;
        -:   45:	}
        -:   46:
    #####:   47:	if(auth_data != NULL && auth_data_len > 0){
    #####:   48:		rc = mosquitto_property_add_binary(&properties, MQTT_PROP_AUTHENTICATION_DATA, auth_data, auth_data_len);
    #####:   49:		if(rc){
    #####:   50:			mosquitto_property_free_all(&properties);
    #####:   51:			return rc;
        -:   52:		}
    #####:   53:	}
        -:   54:
    #####:   55:	proplen = property__get_length_all(properties);
    #####:   56:	varbytes = packet__varint_bytes(proplen);
    #####:   57:	remaining_length += proplen + varbytes;
        -:   58:
    #####:   59:	if(packet__check_oversize(context, remaining_length)){
    #####:   60:		mosquitto_property_free_all(&properties);
    #####:   61:		mosquitto__free(packet);
    #####:   62:		return MOSQ_ERR_OVERSIZE_PACKET;
        -:   63:	}
        -:   64:
    #####:   65:	packet = mosquitto__calloc(1, sizeof(struct mosquitto__packet));
    #####:   66:	if(!packet) return MOSQ_ERR_NOMEM;
        -:   67:
    #####:   68:	packet->command = CMD_AUTH;
    #####:   69:	packet->remaining_length = remaining_length;
        -:   70:
    #####:   71:	rc = packet__alloc(packet);
    #####:   72:	if(rc){
    #####:   73:		mosquitto_property_free_all(&properties);
    #####:   74:		mosquitto__free(packet);
    #####:   75:		return rc;
        -:   76:	}
    #####:   77:	packet__write_byte(packet, reason_code);
    #####:   78:	property__write_all(packet, properties, true);
    #####:   79:	mosquitto_property_free_all(&properties);
        -:   80:
    #####:   81:	return packet__queue(context, packet);
    #####:   82:}
        -:   83:
