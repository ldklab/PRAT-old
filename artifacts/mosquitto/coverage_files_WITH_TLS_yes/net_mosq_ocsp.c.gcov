        -:    0:Source:../lib/net_mosq_ocsp.c
        -:    0:Graph:net_mosq_ocsp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:Copyright (c) 2017 Bayerische Motoren Werke Aktiengesellschaft (BMW AG), Dr. Lars Voelker <lars.voelker@bmw.de>
        -:    4:
        -:    5:All rights reserved. This program and the accompanying materials
        -:    6:are made available under the terms of the Eclipse Public License v1.0
        -:    7:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    8:
        -:    9:The Eclipse Public License is available at
        -:   10:   http://www.eclipse.org/legal/epl-v10.html
        -:   11:and the Eclipse Distribution License is available at
        -:   12:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   13:
        -:   14:Contributors:
        -:   15:   Dr. Lars Voelker, BMW AG
        -:   16:*/
        -:   17:
        -:   18:/*
        -:   19:COPYRIGHT AND PERMISSION NOTICE of curl on which the ocsp code is based:
        -:   20:
        -:   21:Copyright (c) 1996 - 2016, Daniel Stenberg, <daniel@haxx.se>, and many
        -:   22:contributors, see the THANKS file.
        -:   23:
        -:   24:All rights reserved.
        -:   25:
        -:   26:Permission to use, copy, modify, and distribute this software for any purpose
        -:   27:with or without fee is hereby granted, provided that the above copyright
        -:   28:notice and this permission notice appear in all copies.
        -:   29:
        -:   30:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   31:IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   32:FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN
        -:   33:NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        -:   34:DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        -:   35:OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
        -:   36:OR OTHER DEALINGS IN THE SOFTWARE.
        -:   37:
        -:   38:Except as contained in this notice, the name of a copyright holder shall not
        -:   39:be used in advertising or otherwise to promote the sale, use or other dealings
        -:   40:in this Software without prior written authorization of the copyright holder.
        -:   41:*/
        -:   42:
        -:   43:#ifdef WITH_TLS
        -:   44:#include <logging_mosq.h>
        -:   45:#include <mosquitto_internal.h>
        -:   46:#include <net_mosq.h>
        -:   47:
        -:   48:#include <openssl/safestack.h>
        -:   49:#include <openssl/tls1.h>
        -:   50:#include <openssl/ssl.h>
        -:   51:#include <openssl/ocsp.h>
        -:   52:
    #####:   53:int mosquitto__verify_ocsp_status_cb(SSL * ssl, void *arg)
        -:   54:{
    #####:   55:	struct mosquitto *mosq = (struct mosquitto *)arg;
        -:   56:	int ocsp_status, result2, i;
        -:   57:	unsigned char *p;
        -:   58:	const unsigned char *cp;
    #####:   59:	OCSP_RESPONSE *rsp = NULL;
    #####:   60:	OCSP_BASICRESP *br = NULL;
    #####:   61:	X509_STORE     *st = NULL;
    #####:   62:	STACK_OF(X509) *ch = NULL;
        -:   63:
    #####:   64:	long len = SSL_get_tlsext_status_ocsp_resp(mosq->ssl, &p);
    #####:   65:	log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: SSL_get_tlsext_status_ocsp_resp returned %ld bytes", len);
        -:   66:
        -:   67:	// the following functions expect a const pointer
    #####:   68:	cp = (const unsigned char *)p;
        -:   69:
    #####:   70:	if (!cp || len <= 0) {
    #####:   71:		log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: no response");
    #####:   72:		goto end;
        -:   73:	}
        -:   74:
        -:   75:
    #####:   76:	rsp = d2i_OCSP_RESPONSE(NULL, &cp, len);
    #####:   77:	if (rsp==NULL) {
    #####:   78:		log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: invalid response");
    #####:   79:		goto end;
        -:   80:	}
        -:   81:
    #####:   82:	ocsp_status = OCSP_response_status(rsp);
    #####:   83:	if(ocsp_status != OCSP_RESPONSE_STATUS_SUCCESSFUL) {
    #####:   84:		log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: invalid status: %s (%d)",
    #####:   85:			       OCSP_response_status_str(ocsp_status), ocsp_status);
    #####:   86:		goto end;
        -:   87:	}
        -:   88:
    #####:   89:	br = OCSP_response_get1_basic(rsp);
    #####:   90:	if (!br) {
    #####:   91:		log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: invalid response");
    #####:   92:		goto end;
        -:   93:	}
        -:   94:
    #####:   95:	ch = SSL_get_peer_cert_chain(mosq->ssl);
    #####:   96:	if (sk_X509_num(ch) <= 0) {
    #####:   97:		log__printf(mosq, MOSQ_LOG_ERR, "OCSP: we did not receive certificates of the server (num: %d)", sk_X509_num(ch));
    #####:   98:		goto end;
        -:   99:	}
        -:  100:
    #####:  101:	st = SSL_CTX_get_cert_store(mosq->ssl_ctx);
        -:  102:
        -:  103:	// Note:
        -:  104:	//    Other checkers often fix problems in OpenSSL before 1.0.2a (e.g. libcurl).
        -:  105:	//    For all currently supported versions of the OpenSSL project, this is not needed anymore.
        -:  106:
    #####:  107:	if ((result2=OCSP_basic_verify(br, ch, st, 0)) <= 0) {
    #####:  108:		log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: response verification failed (error: %d)", result2);
    #####:  109:		goto end;
        -:  110:	}
        -:  111:
    #####:  112:	for(i = 0; i < OCSP_resp_count(br); i++) {
        -:  113:		int cert_status, crl_reason;
    #####:  114:		OCSP_SINGLERESP *single = NULL;
        -:  115:
        -:  116:		ASN1_GENERALIZEDTIME *rev, *thisupd, *nextupd;
        -:  117:
    #####:  118:		single = OCSP_resp_get0(br, i);
    #####:  119:		if(!single)
    #####:  120:			continue;
        -:  121:
    #####:  122:		cert_status = OCSP_single_get0_status(single, &crl_reason, &rev, &thisupd, &nextupd);
        -:  123:
    #####:  124:		log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: SSL certificate status: %s (%d)",
    #####:  125:				OCSP_cert_status_str(cert_status), cert_status);
        -:  126:
    #####:  127:		switch(cert_status) {
        -:  128:			case V_OCSP_CERTSTATUS_GOOD:
        -:  129:				// Note: A OCSP stapling result will be accepted up to 5 minutes after it expired!
    #####:  130:				if(!OCSP_check_validity(thisupd, nextupd, 300L, -1L)) {
    #####:  131:					log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: OCSP response has expired");
    #####:  132:					goto end;
        -:  133:				}
    #####:  134:				break;
        -:  135:
        -:  136:			case V_OCSP_CERTSTATUS_REVOKED:
    #####:  137:				log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: SSL certificate revocation reason: %s (%d)",
    #####:  138:					OCSP_crl_reason_str(crl_reason), crl_reason);
    #####:  139:				goto end;
        -:  140:
        -:  141:			case V_OCSP_CERTSTATUS_UNKNOWN:
    #####:  142:				goto end;
        -:  143:
        -:  144:			default:
    #####:  145:				log__printf(mosq, MOSQ_LOG_DEBUG, "OCSP: SSL certificate revocation status unknown");
    #####:  146:				goto end;
        -:  147:		}
    #####:  148:	}
        -:  149:
    #####:  150:	if (br!=NULL)  OCSP_BASICRESP_free(br);
    #####:  151:	if (rsp!=NULL) OCSP_RESPONSE_free(rsp);
    #####:  152:	return 1; // OK
        -:  153:
        -:  154:end:
    #####:  155:	if (br!=NULL)  OCSP_BASICRESP_free(br);
    #####:  156:	if (rsp!=NULL) OCSP_RESPONSE_free(rsp);
    #####:  157:	return 0; // Not OK
    #####:  158:}
        -:  159:#endif
