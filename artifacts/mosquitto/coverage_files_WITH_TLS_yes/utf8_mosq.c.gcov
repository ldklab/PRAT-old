        -:    0:Source:../lib/utf8_mosq.c
        -:    0:Graph:utf8_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2016-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:#include "mosquitto.h"
        -:   21:
    #####:   22:int mosquitto_validate_utf8(const char *str, int len)
        -:   23:{
        -:   24:	int i;
        -:   25:	int j;
        -:   26:	int codelen;
        -:   27:	int codepoint;
    #####:   28:	const unsigned char *ustr = (const unsigned char *)str;
        -:   29:
    #####:   30:	if(!str) return MOSQ_ERR_INVAL;
    #####:   31:	if(len < 0 || len > 65536) return MOSQ_ERR_INVAL;
        -:   32:
    #####:   33:	for(i=0; i<len; i++){
    #####:   34:		if(ustr[i] == 0){
    #####:   35:			return MOSQ_ERR_MALFORMED_UTF8;
    #####:   36:		}else if(ustr[i] <= 0x7f){
    #####:   37:			codelen = 1;
    #####:   38:			codepoint = ustr[i];
    #####:   39:		}else if((ustr[i] & 0xE0) == 0xC0){
        -:   40:			/* 110xxxxx - 2 byte sequence */
    #####:   41:			if(ustr[i] == 0xC0 || ustr[i] == 0xC1){
        -:   42:				/* Invalid bytes */
    #####:   43:				return MOSQ_ERR_MALFORMED_UTF8;
        -:   44:			}
    #####:   45:			codelen = 2;
    #####:   46:			codepoint = (ustr[i] & 0x1F);
    #####:   47:		}else if((ustr[i] & 0xF0) == 0xE0){
        -:   48:			// 1110xxxx - 3 byte sequence
    #####:   49:			codelen = 3;
    #####:   50:			codepoint = (ustr[i] & 0x0F);
    #####:   51:		}else if((ustr[i] & 0xF8) == 0xF0){
        -:   52:			// 11110xxx - 4 byte sequence
    #####:   53:			if(ustr[i] > 0xF4){
        -:   54:				/* Invalid, this would produce values > 0x10FFFF. */
    #####:   55:				return MOSQ_ERR_MALFORMED_UTF8;
        -:   56:			}
    #####:   57:			codelen = 4;
    #####:   58:			codepoint = (ustr[i] & 0x07);
    #####:   59:		}else{
        -:   60:			/* Unexpected continuation byte. */
    #####:   61:			return MOSQ_ERR_MALFORMED_UTF8;
        -:   62:		}
        -:   63:
        -:   64:		/* Reconstruct full code point */
    #####:   65:		if(i == len-codelen+1){
        -:   66:			/* Not enough data */
    #####:   67:			return MOSQ_ERR_MALFORMED_UTF8;
        -:   68:		}
    #####:   69:		for(j=0; j<codelen-1; j++){
    #####:   70:			if((ustr[++i] & 0xC0) != 0x80){
        -:   71:				/* Not a continuation byte */
    #####:   72:				return MOSQ_ERR_MALFORMED_UTF8;
        -:   73:			}
    #####:   74:			codepoint = (codepoint<<6) | (ustr[i] & 0x3F);
    #####:   75:		}
        -:   76:		
        -:   77:		/* Check for UTF-16 high/low surrogates */
    #####:   78:		if(codepoint >= 0xD800 && codepoint <= 0xDFFF){
    #####:   79:			return MOSQ_ERR_MALFORMED_UTF8;
        -:   80:		}
        -:   81:
        -:   82:		/* Check for overlong or out of range encodings */
        -:   83:		/* Checking codelen == 2 isn't necessary here, because it is already
        -:   84:		 * covered above in the C0 and C1 checks.
        -:   85:		 * if(codelen == 2 && codepoint < 0x0080){
        -:   86:		 *	 return MOSQ_ERR_MALFORMED_UTF8;
        -:   87:		 * }else
        -:   88:		*/
    #####:   89:		if(codelen == 3 && codepoint < 0x0800){
    #####:   90:			return MOSQ_ERR_MALFORMED_UTF8;
    #####:   91:		}else if(codelen == 4 && (codepoint < 0x10000 || codepoint > 0x10FFFF)){
    #####:   92:			return MOSQ_ERR_MALFORMED_UTF8;
        -:   93:		}
        -:   94:
        -:   95:		/* Check for non-characters */
    #####:   96:		if(codepoint >= 0xFDD0 && codepoint <= 0xFDEF){
    #####:   97:			return MOSQ_ERR_MALFORMED_UTF8;
        -:   98:		}
    #####:   99:		if((codepoint & 0xFFFF) == 0xFFFE || (codepoint & 0xFFFF) == 0xFFFF){
    #####:  100:			return MOSQ_ERR_MALFORMED_UTF8;
        -:  101:		}
        -:  102:		/* Check for control characters */
    #####:  103:		if(codepoint <= 0x001F || (codepoint >= 0x007F && codepoint <= 0x009F)){
    #####:  104:			return MOSQ_ERR_MALFORMED_UTF8;
        -:  105:		}
    #####:  106:	}
    #####:  107:	return MOSQ_ERR_SUCCESS;
    #####:  108:}
        -:  109:
