        -:    0:Source:../lib/send_disconnect.c
        -:    0:Graph:send_disconnect.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <assert.h>
        -:   20:
        -:   21:#ifdef WITH_BROKER
        -:   22:#  include "mosquitto_broker_internal.h"
        -:   23:#endif
        -:   24:
        -:   25:#include "mosquitto.h"
        -:   26:#include "mosquitto_internal.h"
        -:   27:#include "logging_mosq.h"
        -:   28:#include "memory_mosq.h"
        -:   29:#include "mqtt_protocol.h"
        -:   30:#include "packet_mosq.h"
        -:   31:#include "property_mosq.h"
        -:   32:#include "send_mosq.h"
        -:   33:
        -:   34:
    #####:   35:int send__disconnect(struct mosquitto *mosq, uint8_t reason_code, const mosquitto_property *properties)
        -:   36:{
    #####:   37:	struct mosquitto__packet *packet = NULL;
        -:   38:	int rc;
        -:   39:	int proplen, varbytes;
        -:   40:
    #####:   41:	assert(mosq);
        -:   42:#ifdef WITH_BROKER
        -:   43:#  ifdef WITH_BRIDGE
        -:   44:	if(mosq->bridge){
        -:   45:		log__printf(mosq, MOSQ_LOG_DEBUG, "Bridge %s sending DISCONNECT", mosq->id);
        -:   46:	}else
        -:   47:#  else
        -:   48:	{
    #####:   49:		log__printf(mosq, MOSQ_LOG_DEBUG, "Sending DISCONNECT to %s (rc%d)", mosq->id, reason_code);
        -:   50:	}
        -:   51:#  endif
        -:   52:#else
        -:   53:	log__printf(mosq, MOSQ_LOG_DEBUG, "Client %s sending DISCONNECT", mosq->id);
        -:   54:#endif
    #####:   55:	assert(mosq);
    #####:   56:	packet = mosquitto__calloc(1, sizeof(struct mosquitto__packet));
    #####:   57:	if(!packet) return MOSQ_ERR_NOMEM;
        -:   58:
    #####:   59:	packet->command = CMD_DISCONNECT;
    #####:   60:	if(mosq->protocol == mosq_p_mqtt5 && (reason_code != 0 || properties)){
    #####:   61:		packet->remaining_length = 1;
    #####:   62:		if(properties){
    #####:   63:			proplen = property__get_length_all(properties);
    #####:   64:			varbytes = packet__varint_bytes(proplen);
    #####:   65:			packet->remaining_length += proplen + varbytes;
    #####:   66:		}
    #####:   67:	}else{
    #####:   68:		packet->remaining_length = 0;
        -:   69:	}
        -:   70:
    #####:   71:	rc = packet__alloc(packet);
    #####:   72:	if(rc){
    #####:   73:		mosquitto__free(packet);
    #####:   74:		return rc;
        -:   75:	}
    #####:   76:	if(mosq->protocol == mosq_p_mqtt5 && (reason_code != 0 || properties)){
    #####:   77:		packet__write_byte(packet, reason_code);
    #####:   78:		if(properties){
    #####:   79:			property__write_all(packet, properties, true);
    #####:   80:		}
    #####:   81:	}
        -:   82:
    #####:   83:	return packet__queue(mosq, packet);
    #####:   84:}
        -:   85:
