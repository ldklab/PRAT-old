        -:    0:Source:../lib/time_mosq.c
        -:    0:Graph:time_mosq.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2013-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#ifdef __APPLE__
        -:   20:#include <mach/mach.h>
        -:   21:#include <mach/mach_time.h>
        -:   22:#endif
        -:   23:
        -:   24:#ifdef WIN32
        -:   25:#  define _WIN32_WINNT _WIN32_WINNT_VISTA
        -:   26:#  include <windows.h>
        -:   27:#else
        -:   28:#  include <unistd.h>
        -:   29:#endif
        -:   30:#include <time.h>
        -:   31:
        -:   32:#include "mosquitto.h"
        -:   33:#include "time_mosq.h"
        -:   34:
    #####:   35:time_t mosquitto_time(void)
        -:   36:{
        -:   37:#ifdef WIN32
        -:   38:	return GetTickCount64()/1000;
        -:   39:#elif _POSIX_TIMERS>0 && defined(_POSIX_MONOTONIC_CLOCK)
        -:   40:	struct timespec tp;
        -:   41:
    #####:   42:	clock_gettime(CLOCK_MONOTONIC, &tp);
    #####:   43:	return tp.tv_sec;
        -:   44:#elif defined(__APPLE__)
        -:   45:	static mach_timebase_info_data_t tb;
        -:   46:    uint64_t ticks;
        -:   47:	uint64_t sec;
        -:   48:
        -:   49:	ticks = mach_absolute_time();
        -:   50:
        -:   51:	if(tb.denom == 0){
        -:   52:		mach_timebase_info(&tb);
        -:   53:	}
        -:   54:	sec = ticks*tb.numer/tb.denom/1000000000;
        -:   55:
        -:   56:	return (time_t)sec;
        -:   57:#else
        -:   58:	return time(NULL);
        -:   59:#endif
        -:   60:}
        -:   61:
