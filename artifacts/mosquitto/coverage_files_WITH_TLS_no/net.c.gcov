        -:    0:Source:net.c
        -:    0:Graph:net.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2009-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#ifndef WIN32
        -:   20:#include <netdb.h>
        -:   21:#include <unistd.h>
        -:   22:#include <arpa/inet.h>
        -:   23:#include <sys/socket.h>
        -:   24:#include <netinet/tcp.h>
        -:   25:#include <net/if.h>
        -:   26:#else
        -:   27:#include <winsock2.h>
        -:   28:#include <ws2tcpip.h>
        -:   29:#endif
        -:   30:
        -:   31:#include <assert.h>
        -:   32:#include <errno.h>
        -:   33:#include <fcntl.h>
        -:   34:#include <stdio.h>
        -:   35:#include <string.h>
        -:   36:#ifdef WITH_WRAP
        -:   37:#include <tcpd.h>
        -:   38:#endif
        -:   39:
        -:   40:#ifdef HAVE_NETINET_IN_H
        -:   41:#  include <netinet/in.h>
        -:   42:#endif
        -:   43:
        -:   44:#ifdef __QNX__
        -:   45:#include <net/netbyte.h>
        -:   46:#endif
        -:   47:
        -:   48:#include "mosquitto_broker_internal.h"
        -:   49:#include "mqtt_protocol.h"
        -:   50:#include "memory_mosq.h"
        -:   51:#include "net_mosq.h"
        -:   52:#include "util_mosq.h"
        -:   53:
        -:   54:#ifdef WITH_TLS
        -:   55:#include "tls_mosq.h"
        -:   56:#include <openssl/err.h>
        -:   57:static int tls_ex_index_context = -1;
        -:   58:static int tls_ex_index_listener = -1;
        -:   59:#endif
        -:   60:
        -:   61:#include "sys_tree.h"
        -:   62:
        -:   63:/* For EMFILE handling */
        -:   64:static mosq_sock_t spare_sock = INVALID_SOCKET;
        -:   65:
    #####:   66:void net__broker_init(void)
        -:   67:{
    #####:   68:	spare_sock = socket(AF_INET, SOCK_STREAM, 0);
    #####:   69:	net__init();
    #####:   70:}
        -:   71:
        -:   72:
    #####:   73:void net__broker_cleanup(void)
        -:   74:{
    #####:   75:	if(spare_sock != INVALID_SOCKET){
    #####:   76:		COMPAT_CLOSE(spare_sock);
    #####:   77:		spare_sock = INVALID_SOCKET;
    #####:   78:	}
    #####:   79:	net__cleanup();
    #####:   80:}
        -:   81:
        -:   82:
    #####:   83:static void net__print_error(int log, const char *format_str)
        -:   84:{
        -:   85:	char *buf;
        -:   86:
        -:   87:#ifdef WIN32
        -:   88:	FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
        -:   89:			NULL, WSAGetLastError(), LANG_NEUTRAL, &buf, 0, NULL);
        -:   90:
        -:   91:	log__printf(NULL, log, format_str, buf);
        -:   92:	LocalFree(buf);
        -:   93:#else
    #####:   94:	buf = strerror(errno);
    #####:   95:	log__printf(NULL, log, format_str, buf);
        -:   96:#endif
    #####:   97:}
        -:   98:
        -:   99:
    #####:  100:int net__socket_accept(struct mosquitto_db *db, mosq_sock_t listensock)
        -:  101:{
        -:  102:	int i;
        -:  103:	int j;
    #####:  104:	mosq_sock_t new_sock = INVALID_SOCKET;
        -:  105:	struct mosquitto *new_context;
        -:  106:#ifdef WITH_TLS
        -:  107:	BIO *bio;
        -:  108:	int rc;
        -:  109:	char ebuf[256];
        -:  110:	unsigned long e;
        -:  111:#endif
        -:  112:#ifdef WITH_WRAP
        -:  113:	struct request_info wrap_req;
        -:  114:	char address[1024];
        -:  115:#endif
        -:  116:
    #####:  117:	new_sock = accept(listensock, NULL, 0);
    #####:  118:	if(new_sock == INVALID_SOCKET){
        -:  119:#ifdef WIN32
        -:  120:		errno = WSAGetLastError();
        -:  121:		if(errno == WSAEMFILE){
        -:  122:#else
    #####:  123:		if(errno == EMFILE || errno == ENFILE){
        -:  124:#endif
        -:  125:			/* Close the spare socket, which means we should be able to accept
        -:  126:			 * this connection. Accept it, then close it immediately and create
        -:  127:			 * a new spare_sock. This prevents the situation of ever properly
        -:  128:			 * running out of sockets.
        -:  129:			 * It would be nice to send a "server not available" connack here,
        -:  130:			 * but there are lots of reasons why this would be tricky (TLS
        -:  131:			 * being the big one). */
    #####:  132:			COMPAT_CLOSE(spare_sock);
    #####:  133:			new_sock = accept(listensock, NULL, 0);
    #####:  134:			if(new_sock != INVALID_SOCKET){
    #####:  135:				COMPAT_CLOSE(new_sock);
    #####:  136:			}
    #####:  137:			spare_sock = socket(AF_INET, SOCK_STREAM, 0);
    #####:  138:			log__printf(NULL, MOSQ_LOG_WARNING,
        -:  139:					"Unable to accept new connection, system socket count has been exceeded. Try increasing \"ulimit -n\" or equivalent.");
    #####:  140:		}
    #####:  141:		return -1;
        -:  142:	}
        -:  143:
        -:  144:	G_SOCKET_CONNECTIONS_INC();
        -:  145:
    #####:  146:	if(net__socket_nonblock(&new_sock)){
    #####:  147:		return INVALID_SOCKET;
        -:  148:	}
        -:  149:
        -:  150:#ifdef WITH_WRAP
        -:  151:	/* Use tcpd / libwrap to determine whether a connection is allowed. */
        -:  152:	request_init(&wrap_req, RQ_FILE, new_sock, RQ_DAEMON, "mosquitto", 0);
        -:  153:	fromhost(&wrap_req);
        -:  154:	if(!hosts_access(&wrap_req)){
        -:  155:		/* Access is denied */
        -:  156:		if(db->config->connection_messages == true){
        -:  157:			if(!net__socket_get_address(new_sock, address, 1024)){
        -:  158:				log__printf(NULL, MOSQ_LOG_NOTICE, "Client connection from %s denied access by tcpd.", address);
        -:  159:			}
        -:  160:		}
        -:  161:		COMPAT_CLOSE(new_sock);
        -:  162:		return -1;
        -:  163:	}
        -:  164:#endif
        -:  165:
    #####:  166:	if(db->config->set_tcp_nodelay){
    #####:  167:		int flag = 1;
    #####:  168:		if(setsockopt(new_sock, IPPROTO_TCP, TCP_NODELAY, &flag, sizeof(int)) != 0){
    #####:  169:			log__printf(NULL, MOSQ_LOG_WARNING, "Warning: Unable to set TCP_NODELAY.");
    #####:  170:		}
    #####:  171:	}
        -:  172:
    #####:  173:	new_context = context__init(db, new_sock);
    #####:  174:	if(!new_context){
    #####:  175:		COMPAT_CLOSE(new_sock);
    #####:  176:		return -1;
        -:  177:	}
    #####:  178:	for(i=0; i<db->config->listener_count; i++){
    #####:  179:		for(j=0; j<db->config->listeners[i].sock_count; j++){
    #####:  180:			if(db->config->listeners[i].socks[j] == listensock){
    #####:  181:				new_context->listener = &db->config->listeners[i];
    #####:  182:				new_context->listener->client_count++;
    #####:  183:				break;
        -:  184:			}
    #####:  185:		}
    #####:  186:	}
    #####:  187:	if(!new_context->listener){
    #####:  188:		context__cleanup(db, new_context, true);
    #####:  189:		return -1;
        -:  190:	}
        -:  191:
    #####:  192:	if(new_context->listener->max_connections > 0 && new_context->listener->client_count > new_context->listener->max_connections){
    #####:  193:		if(db->config->connection_messages == true){
    #####:  194:			log__printf(NULL, MOSQ_LOG_NOTICE, "Client connection from %s denied: max_connections exceeded.", new_context->address);
    #####:  195:		}
    #####:  196:		context__cleanup(db, new_context, true);
    #####:  197:		return -1;
        -:  198:	}
        -:  199:
        -:  200:#ifdef WITH_TLS
        -:  201:	/* TLS init */
        -:  202:	for(i=0; i<db->config->listener_count; i++){
        -:  203:		for(j=0; j<db->config->listeners[i].sock_count; j++){
        -:  204:			if(db->config->listeners[i].socks[j] == listensock){
        -:  205:				if(db->config->listeners[i].ssl_ctx){
        -:  206:					new_context->ssl = SSL_new(db->config->listeners[i].ssl_ctx);
        -:  207:					if(!new_context->ssl){
        -:  208:						context__cleanup(db, new_context, true);
        -:  209:						return -1;
        -:  210:					}
        -:  211:					SSL_set_ex_data(new_context->ssl, tls_ex_index_context, new_context);
        -:  212:					SSL_set_ex_data(new_context->ssl, tls_ex_index_listener, &db->config->listeners[i]);
        -:  213:					new_context->want_write = true;
        -:  214:					bio = BIO_new_socket(new_sock, BIO_NOCLOSE);
        -:  215:					SSL_set_bio(new_context->ssl, bio, bio);
        -:  216:					ERR_clear_error();
        -:  217:					rc = SSL_accept(new_context->ssl);
        -:  218:					if(rc != 1){
        -:  219:						rc = SSL_get_error(new_context->ssl, rc);
        -:  220:						if(rc == SSL_ERROR_WANT_READ){
        -:  221:							/* We always want to read. */
        -:  222:						}else if(rc == SSL_ERROR_WANT_WRITE){
        -:  223:							new_context->want_write = true;
        -:  224:						}else{
        -:  225:							if(db->config->connection_messages == true){
        -:  226:								e = ERR_get_error();
        -:  227:								while(e){
        -:  228:									log__printf(NULL, MOSQ_LOG_NOTICE,
        -:  229:											"Client connection from %s failed: %s.",
        -:  230:											new_context->address, ERR_error_string(e, ebuf));
        -:  231:									e = ERR_get_error();
        -:  232:								}
        -:  233:							}
        -:  234:							context__cleanup(db, new_context, true);
        -:  235:							return -1;
        -:  236:						}
        -:  237:					}
        -:  238:				}
        -:  239:			}
        -:  240:		}
        -:  241:	}
        -:  242:#endif
        -:  243:
    #####:  244:	if(db->config->connection_messages == true){
    #####:  245:		log__printf(NULL, MOSQ_LOG_NOTICE, "New connection from %s on port %d.", new_context->address, new_context->listener->port);
    #####:  246:	}
        -:  247:
    #####:  248:	return new_sock;
    #####:  249:}
        -:  250:
        -:  251:#ifdef WITH_TLS
        -:  252:static int client_certificate_verify(int preverify_ok, X509_STORE_CTX *ctx)
        -:  253:{
        -:  254:	UNUSED(ctx);
        -:  255:
        -:  256:	/* Preverify should check expiry, revocation. */
        -:  257:	return preverify_ok;
        -:  258:}
        -:  259:#endif
        -:  260:
        -:  261:#ifdef FINAL_WITH_TLS_PSK
        -:  262:static unsigned int psk_server_callback(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len)
        -:  263:{
        -:  264:	struct mosquitto_db *db;
        -:  265:	struct mosquitto *context;
        -:  266:	struct mosquitto__listener *listener;
        -:  267:	char *psk_key = NULL;
        -:  268:	int len;
        -:  269:	const char *psk_hint;
        -:  270:
        -:  271:	if(!identity) return 0;
        -:  272:
        -:  273:	db = mosquitto__get_db();
        -:  274:
        -:  275:	context = SSL_get_ex_data(ssl, tls_ex_index_context);
        -:  276:	if(!context) return 0;
        -:  277:
        -:  278:	listener = SSL_get_ex_data(ssl, tls_ex_index_listener);
        -:  279:	if(!listener) return 0;
        -:  280:
        -:  281:	psk_hint = listener->psk_hint;
        -:  282:
        -:  283:	/* The hex to BN conversion results in the length halving, so we can pass
        -:  284:	 * max_psk_len*2 as the max hex key here. */
        -:  285:	psk_key = mosquitto__calloc(1, max_psk_len*2 + 1);
        -:  286:	if(!psk_key) return 0;
        -:  287:
        -:  288:	if(mosquitto_psk_key_get(db, context, psk_hint, identity, psk_key, max_psk_len*2) != MOSQ_ERR_SUCCESS){
        -:  289:		mosquitto__free(psk_key);
        -:  290:		return 0;
        -:  291:	}
        -:  292:
        -:  293:	len = mosquitto__hex2bin(psk_key, psk, max_psk_len);
        -:  294:	if (len < 0){
        -:  295:		mosquitto__free(psk_key);
        -:  296:		return 0;
        -:  297:	}
        -:  298:
        -:  299:	if(listener->use_identity_as_username){
        -:  300:		context->username = mosquitto__strdup(identity);
        -:  301:		if(!context->username){
        -:  302:			mosquitto__free(psk_key);
        -:  303:			return 0;
        -:  304:		}
        -:  305:	}
        -:  306:
        -:  307:	mosquitto__free(psk_key);
        -:  308:	return len;
        -:  309:}
        -:  310:#endif
        -:  311:
        -:  312:#ifdef WITH_TLS
        -:  313:int net__tls_server_ctx(struct mosquitto__listener *listener)
        -:  314:{
        -:  315:	char buf[256];
        -:  316:	int rc;
        -:  317:	FILE *dhparamfile;
        -:  318:	DH *dhparam = NULL;
        -:  319:
        -:  320:	if(listener->ssl_ctx){
        -:  321:		SSL_CTX_free(listener->ssl_ctx);
        -:  322:	}
        -:  323:
        -:  324:#if OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  325:	listener->ssl_ctx = SSL_CTX_new(SSLv23_server_method());
        -:  326:#else
        -:  327:	listener->ssl_ctx = SSL_CTX_new(TLS_server_method());
        -:  328:#endif
        -:  329:
        -:  330:	if(!listener->ssl_ctx){
        -:  331:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to create TLS context.");
        -:  332:		return 1;
        -:  333:	}
        -:  334:
        -:  335:	if(listener->tls_version == NULL){
        -:  336:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1);
        -:  337:#ifdef SSL_OP_NO_TLSv1_3
        -:  338:	}else if(!strcmp(listener->tls_version, "tlsv1.3")){
        -:  339:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1_2);
        -:  340:	}else if(!strcmp(listener->tls_version, "tlsv1.2")){
        -:  341:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1_3);
        -:  342:	}else if(!strcmp(listener->tls_version, "tlsv1.1")){
        -:  343:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_3);
        -:  344:#else
        -:  345:	}else if(!strcmp(listener->tls_version, "tlsv1.2")){
        -:  346:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_1);
        -:  347:	}else if(!strcmp(listener->tls_version, "tlsv1.1")){
        -:  348:		SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_2);
        -:  349:#endif
        -:  350:	}else{
        -:  351:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Unsupported tls_version \"%s\".", listener->tls_version);
        -:  352:		return 1;
        -:  353:	}
        -:  354:
        -:  355:#ifdef SSL_OP_NO_COMPRESSION
        -:  356:	/* Disable compression */
        -:  357:	SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_COMPRESSION);
        -:  358:#endif
        -:  359:#ifdef SSL_OP_CIPHER_SERVER_PREFERENCE
        -:  360:	/* Server chooses cipher */
        -:  361:	SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
        -:  362:#endif
        -:  363:
        -:  364:#ifdef SSL_MODE_RELEASE_BUFFERS
        -:  365:	/* Use even less memory per SSL connection. */
        -:  366:	SSL_CTX_set_mode(listener->ssl_ctx, SSL_MODE_RELEASE_BUFFERS);
        -:  367:#endif
        -:  368:
        -:  369:#ifdef WITH_EC
        -:  370:#if OPENSSL_VERSION_NUMBER >= 0x10002000L && OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  371:	SSL_CTX_set_ecdh_auto(listener->ssl_ctx, 1);
        -:  372:#endif
        -:  373:#endif
        -:  374:
        -:  375:#ifdef SSL_OP_NO_RENEGOTIATION
        -:  376:	SSL_CTX_set_options(listener->ssl_ctx, SSL_OP_NO_RENEGOTIATION);
        -:  377:#endif
        -:  378:
        -:  379:	snprintf(buf, 256, "mosquitto-%d", listener->port);
        -:  380:	SSL_CTX_set_session_id_context(listener->ssl_ctx, (unsigned char *)buf, strlen(buf));
        -:  381:
        -:  382:	if(listener->ciphers){
        -:  383:		rc = SSL_CTX_set_cipher_list(listener->ssl_ctx, listener->ciphers);
        -:  384:		if(rc == 0){
        -:  385:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS ciphers. Check cipher list \"%s\".", listener->ciphers);
        -:  386:			return 1;
        -:  387:		}
        -:  388:	}else{
        -:  389:		rc = SSL_CTX_set_cipher_list(listener->ssl_ctx, "DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:@STRENGTH");
        -:  390:		if(rc == 0){
        -:  391:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS ciphers. Check cipher list \"%s\".", listener->ciphers);
        -:  392:			return 1;
        -:  393:		}
        -:  394:	}
        -:  395:	if(listener->dhparamfile){
        -:  396:		dhparamfile = fopen(listener->dhparamfile, "r");
        -:  397:		if(!dhparamfile){
        -:  398:			log__printf(NULL, MOSQ_LOG_ERR, "Error loading dhparamfile \"%s\".", listener->dhparamfile);
        -:  399:			return 1;
        -:  400:		}
        -:  401:		dhparam = PEM_read_DHparams(dhparamfile, NULL, NULL, NULL);
        -:  402:		fclose(dhparamfile);
        -:  403:
        -:  404:		if(dhparam == NULL || SSL_CTX_set_tmp_dh(listener->ssl_ctx, dhparam) != 1){
        -:  405:			log__printf(NULL, MOSQ_LOG_ERR, "Error loading dhparamfile \"%s\".", listener->dhparamfile);
        -:  406:			net__print_ssl_error(NULL);
        -:  407:			return 1;
        -:  408:		}
        -:  409:	}
        -:  410:	return MOSQ_ERR_SUCCESS;
        -:  411:}
        -:  412:#endif
        -:  413:
        -:  414:
    #####:  415:int net__load_crl_file(struct mosquitto__listener *listener)
        -:  416:{
        -:  417:#ifdef WITH_TLS
        -:  418:	X509_STORE *store;
        -:  419:	X509_LOOKUP *lookup;
        -:  420:	int rc;
        -:  421:
        -:  422:	store = SSL_CTX_get_cert_store(listener->ssl_ctx);
        -:  423:	if(!store){
        -:  424:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to obtain TLS store.");
        -:  425:		net__print_error(MOSQ_LOG_ERR, "Error: %s");
        -:  426:		return 1;
        -:  427:	}
        -:  428:	lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());
        -:  429:	rc = X509_load_crl_file(lookup, listener->crlfile, X509_FILETYPE_PEM);
        -:  430:	if(rc < 1){
        -:  431:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load certificate revocation file \"%s\". Check crlfile.", listener->crlfile);
        -:  432:		net__print_error(MOSQ_LOG_ERR, "Error: %s");
        -:  433:		net__print_ssl_error(NULL);
        -:  434:		return 1;
        -:  435:	}
        -:  436:	X509_STORE_set_flags(store, X509_V_FLAG_CRL_CHECK);
        -:  437:#endif
        -:  438:
    #####:  439:	return MOSQ_ERR_SUCCESS;
        -:  440:}
        -:  441:
        -:  442:
    #####:  443:int net__tls_load_verify(struct mosquitto__listener *listener)
        -:  444:{
        -:  445:#ifdef WITH_TLS
        -:  446:	ENGINE *engine = NULL;
        -:  447:	int rc;
        -:  448:
        -:  449:	rc = SSL_CTX_load_verify_locations(listener->ssl_ctx, listener->cafile, listener->capath);
        -:  450:	if(rc == 0){
        -:  451:		if(listener->cafile && listener->capath){
        -:  452:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check cafile \"%s\" and capath \"%s\".", listener->cafile, listener->capath);
        -:  453:		}else if(listener->cafile){
        -:  454:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check cafile \"%s\".", listener->cafile);
        -:  455:		}else{
        -:  456:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load CA certificates. Check capath \"%s\".", listener->capath);
        -:  457:		}
        -:  458:		net__print_ssl_error(NULL);
        -:  459:		return 1;
        -:  460:	}
        -:  461:	if(listener->tls_engine){
        -:  462:#if !defined(OPENSSL_NO_ENGINE)
        -:  463:		engine = ENGINE_by_id(listener->tls_engine);
        -:  464:		if(!engine){
        -:  465:			log__printf(NULL, MOSQ_LOG_ERR, "Error loading %s engine\n", listener->tls_engine);
        -:  466:			net__print_ssl_error(NULL);
        -:  467:			return 1;
        -:  468:		}
        -:  469:		if(!ENGINE_init(engine)){
        -:  470:			log__printf(NULL, MOSQ_LOG_ERR, "Failed engine initialisation\n");
        -:  471:			net__print_ssl_error(NULL);
        -:  472:			ENGINE_free(engine);
        -:  473:			return 1;
        -:  474:		}
        -:  475:		ENGINE_set_default(engine, ENGINE_METHOD_ALL);
        -:  476:		ENGINE_free(engine); /* release the structural reference from ENGINE_by_id() */
        -:  477:#endif
        -:  478:	}
        -:  479:	/* FIXME user data? */
        -:  480:	if(listener->require_certificate){
        -:  481:		SSL_CTX_set_verify(listener->ssl_ctx, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT, client_certificate_verify);
        -:  482:	}else{
        -:  483:		SSL_CTX_set_verify(listener->ssl_ctx, SSL_VERIFY_NONE, client_certificate_verify);
        -:  484:	}
        -:  485:	rc = SSL_CTX_use_certificate_chain_file(listener->ssl_ctx, listener->certfile);
        -:  486:	if(rc != 1){
        -:  487:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load server certificate \"%s\". Check certfile.", listener->certfile);
        -:  488:		net__print_ssl_error(NULL);
        -:  489:#if !defined(OPENSSL_NO_ENGINE)
        -:  490:		ENGINE_FINISH(engine);
        -:  491:#endif
        -:  492:		return 1;
        -:  493:	}
        -:  494:	if(listener->tls_engine && listener->tls_keyform == mosq_k_engine){
        -:  495:#if !defined(OPENSSL_NO_ENGINE)
        -:  496:		UI_METHOD *ui_method = net__get_ui_method();
        -:  497:		if(listener->tls_engine_kpass_sha1){
        -:  498:			if(!ENGINE_ctrl_cmd(engine, ENGINE_SECRET_MODE, ENGINE_SECRET_MODE_SHA, NULL, NULL, 0)){
        -:  499:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set engine secret mode sha");
        -:  500:				net__print_ssl_error(NULL);
        -:  501:				ENGINE_FINISH(engine);
        -:  502:				return 1;
        -:  503:			}
        -:  504:			if(!ENGINE_ctrl_cmd(engine, ENGINE_PIN, 0, listener->tls_engine_kpass_sha1, NULL, 0)){
        -:  505:				log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set engine pin");
        -:  506:				net__print_ssl_error(NULL);
        -:  507:				ENGINE_FINISH(engine);
        -:  508:				return 1;
        -:  509:			}
        -:  510:			ui_method = NULL;
        -:  511:		}
        -:  512:		EVP_PKEY *pkey = ENGINE_load_private_key(engine, listener->keyfile, ui_method, NULL);
        -:  513:		if(!pkey){
        -:  514:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load engine private key file \"%s\".", listener->keyfile);
        -:  515:			net__print_ssl_error(NULL);
        -:  516:			ENGINE_FINISH(engine);
        -:  517:			return 1;
        -:  518:		}
        -:  519:		if(SSL_CTX_use_PrivateKey(listener->ssl_ctx, pkey) <= 0){
        -:  520:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to use engine private key file \"%s\".", listener->keyfile);
        -:  521:			net__print_ssl_error(NULL);
        -:  522:			ENGINE_FINISH(engine);
        -:  523:			return 1;
        -:  524:		}
        -:  525:#endif
        -:  526:	}else{
        -:  527:		rc = SSL_CTX_use_PrivateKey_file(listener->ssl_ctx, listener->keyfile, SSL_FILETYPE_PEM);
        -:  528:		if(rc != 1){
        -:  529:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to load server key file \"%s\". Check keyfile.", listener->keyfile);
        -:  530:#if !defined(OPENSSL_NO_ENGINE)
        -:  531:			ENGINE_FINISH(engine);
        -:  532:#endif
        -:  533:			return 1;
        -:  534:		}
        -:  535:	}
        -:  536:	rc = SSL_CTX_check_private_key(listener->ssl_ctx);
        -:  537:	if(rc != 1){
        -:  538:		log__printf(NULL, MOSQ_LOG_ERR, "Error: Server certificate/key are inconsistent.");
        -:  539:		net__print_ssl_error(NULL);
        -:  540:#if !defined(OPENSSL_NO_ENGINE)
        -:  541:		ENGINE_FINISH(engine);
        -:  542:#endif
        -:  543:		return 1;
        -:  544:	}
        -:  545:	/* Load CRLs if they exist. */
        -:  546:	if(listener->crlfile){
        -:  547:		rc = net__load_crl_file(listener);
        -:  548:		if(rc){
        -:  549:#if !defined(OPENSSL_NO_ENGINE)
        -:  550:			ENGINE_FINISH(engine);
        -:  551:#endif
        -:  552:			return rc;
        -:  553:		}
        -:  554:	}
        -:  555:#endif
        -:  556:
    #####:  557:	return MOSQ_ERR_SUCCESS;
        -:  558:}
        -:  559:
        -:  560:
        -:  561:/* Creates a socket and listens on port 'port'.
        -:  562: * Returns 1 on failure
        -:  563: * Returns 0 on success.
        -:  564: */
    #####:  565:int net__socket_listen(struct mosquitto__listener *listener)
        -:  566:{
    #####:  567:	mosq_sock_t sock = INVALID_SOCKET;
        -:  568:	struct addrinfo hints;
        -:  569:	struct addrinfo *ainfo, *rp;
        -:  570:	char service[10];
        -:  571:	int rc;
        -:  572:#ifndef WIN32
    #####:  573:	int ss_opt = 1;
        -:  574:#else
        -:  575:	char ss_opt = 1;
        -:  576:#endif
        -:  577:#ifdef SO_BINDTODEVICE
        -:  578:	struct ifreq ifr;
        -:  579:#endif
        -:  580:
    #####:  581:	if(!listener) return MOSQ_ERR_INVAL;
        -:  582:
    #####:  583:	snprintf(service, 10, "%d", listener->port);
    #####:  584:	memset(&hints, 0, sizeof(struct addrinfo));
    #####:  585:	if(listener->socket_domain){
    #####:  586:		hints.ai_family = listener->socket_domain;
    #####:  587:	}else{
    #####:  588:		hints.ai_family = AF_UNSPEC;
        -:  589:	}
    #####:  590:	hints.ai_flags = AI_PASSIVE;
    #####:  591:	hints.ai_socktype = SOCK_STREAM;
        -:  592:
    #####:  593:	rc = getaddrinfo(listener->host, service, &hints, &ainfo);
    #####:  594:	if (rc){
    #####:  595:		log__printf(NULL, MOSQ_LOG_ERR, "Error creating listener: %s.", gai_strerror(rc));
    #####:  596:		return INVALID_SOCKET;
        -:  597:	}
        -:  598:
    #####:  599:	listener->sock_count = 0;
    #####:  600:	listener->socks = NULL;
        -:  601:
    #####:  602:	for(rp = ainfo; rp; rp = rp->ai_next){
    #####:  603:		if(rp->ai_family == AF_INET){
    #####:  604:			log__printf(NULL, MOSQ_LOG_INFO, "Opening ipv4 listen socket on port %d.", ntohs(((struct sockaddr_in *)rp->ai_addr)->sin_port));
    #####:  605:		}else if(rp->ai_family == AF_INET6){
    #####:  606:			log__printf(NULL, MOSQ_LOG_INFO, "Opening ipv6 listen socket on port %d.", ntohs(((struct sockaddr_in6 *)rp->ai_addr)->sin6_port));
    #####:  607:		}else{
    #####:  608:			continue;
        -:  609:		}
        -:  610:
    #####:  611:		sock = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
    #####:  612:		if(sock == INVALID_SOCKET){
    #####:  613:			net__print_error(MOSQ_LOG_WARNING, "Warning: %s");
    #####:  614:			continue;
        -:  615:		}
    #####:  616:		listener->sock_count++;
    #####:  617:		listener->socks = mosquitto__realloc(listener->socks, sizeof(mosq_sock_t)*listener->sock_count);
    #####:  618:		if(!listener->socks){
    #####:  619:			log__printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
    #####:  620:			freeaddrinfo(ainfo);
    #####:  621:			return MOSQ_ERR_NOMEM;
        -:  622:		}
    #####:  623:		listener->socks[listener->sock_count-1] = sock;
        -:  624:
        -:  625:#ifndef WIN32
    #####:  626:		ss_opt = 1;
    #####:  627:		setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &ss_opt, sizeof(ss_opt));
        -:  628:#endif
        -:  629:#ifdef IPV6_V6ONLY
    #####:  630:		ss_opt = 1;
    #####:  631:		setsockopt(sock, IPPROTO_IPV6, IPV6_V6ONLY, &ss_opt, sizeof(ss_opt));
        -:  632:#endif
        -:  633:
    #####:  634:		if(net__socket_nonblock(&sock)){
    #####:  635:			freeaddrinfo(ainfo);
    #####:  636:			return 1;
        -:  637:		}
        -:  638:
        -:  639:#ifdef SO_BINDTODEVICE
    #####:  640:		if(listener->bind_interface){
    #####:  641:			memset(&ifr, 0, sizeof(ifr));
    #####:  642:			strncpy(ifr.ifr_name, listener->bind_interface, sizeof(ifr.ifr_name)-1);
    #####:  643:			ifr.ifr_name[sizeof(ifr.ifr_name)-1] = '\0';
    #####:  644:			log__printf(NULL, MOSQ_LOG_INFO, "Binding listener to interface \"%s\".", ifr.ifr_name);
    #####:  645:			if(setsockopt(sock, SOL_SOCKET, SO_BINDTODEVICE, (void *)&ifr, sizeof(ifr)) < 0) {
    #####:  646:				net__print_error(MOSQ_LOG_ERR, "Error: %s");
    #####:  647:				COMPAT_CLOSE(sock);
    #####:  648:				freeaddrinfo(ainfo);
    #####:  649:				return 1;
        -:  650:			}
    #####:  651:		}
        -:  652:#endif
        -:  653:
    #####:  654:		if(bind(sock, rp->ai_addr, rp->ai_addrlen) == -1){
    #####:  655:			net__print_error(MOSQ_LOG_ERR, "Error: %s");
    #####:  656:			COMPAT_CLOSE(sock);
    #####:  657:			freeaddrinfo(ainfo);
    #####:  658:			return 1;
        -:  659:		}
        -:  660:
    #####:  661:		if(listen(sock, 100) == -1){
    #####:  662:			net__print_error(MOSQ_LOG_ERR, "Error: %s");
    #####:  663:			freeaddrinfo(ainfo);
    #####:  664:			COMPAT_CLOSE(sock);
    #####:  665:			return 1;
        -:  666:		}
    #####:  667:	}
    #####:  668:	freeaddrinfo(ainfo);
        -:  669:
        -:  670:	/* We need to have at least one working socket. */
    #####:  671:	if(listener->sock_count > 0){
        -:  672:#ifdef WITH_TLS
        -:  673:		if((listener->cafile || listener->capath) && listener->certfile && listener->keyfile){
        -:  674:			if(net__tls_server_ctx(listener)){
        -:  675:				COMPAT_CLOSE(sock);
        -:  676:				return 1;
        -:  677:			}
        -:  678:
        -:  679:			if(net__tls_load_verify(listener)){
        -:  680:				COMPAT_CLOSE(sock);
        -:  681:				return 1;
        -:  682:			}
        -:  683:#  ifdef FINAL_WITH_TLS_PSK
        -:  684:		}else if(listener->psk_hint){
        -:  685:			if(tls_ex_index_context == -1){
        -:  686:				tls_ex_index_context = SSL_get_ex_new_index(0, "client context", NULL, NULL, NULL);
        -:  687:			}
        -:  688:			if(tls_ex_index_listener == -1){
        -:  689:				tls_ex_index_listener = SSL_get_ex_new_index(0, "listener", NULL, NULL, NULL);
        -:  690:			}
        -:  691:
        -:  692:			if(net__tls_server_ctx(listener)){
        -:  693:				COMPAT_CLOSE(sock);
        -:  694:				return 1;
        -:  695:			}
        -:  696:			SSL_CTX_set_psk_server_callback(listener->ssl_ctx, psk_server_callback);
        -:  697:			if(listener->psk_hint){
        -:  698:				rc = SSL_CTX_use_psk_identity_hint(listener->ssl_ctx, listener->psk_hint);
        -:  699:				if(rc == 0){
        -:  700:					log__printf(NULL, MOSQ_LOG_ERR, "Error: Unable to set TLS PSK hint.");
        -:  701:					net__print_ssl_error(NULL);
        -:  702:					COMPAT_CLOSE(sock);
        -:  703:					return 1;
        -:  704:				}
        -:  705:			}
        -:  706:#  endif /* FINAL_WITH_TLS_PSK */
        -:  707:		}
        -:  708:#endif /* WITH_TLS */
    #####:  709:		return 0;
        -:  710:	}else{
    #####:  711:		return 1;
        -:  712:	}
    #####:  713:}
        -:  714:
    #####:  715:int net__socket_get_address(mosq_sock_t sock, char *buf, int len)
        -:  716:{
        -:  717:	struct sockaddr_storage addr;
        -:  718:	socklen_t addrlen;
        -:  719:
    #####:  720:	memset(&addr, 0, sizeof(struct sockaddr_storage));
    #####:  721:	addrlen = sizeof(addr);
    #####:  722:	if(!getpeername(sock, (struct sockaddr *)&addr, &addrlen)){
    #####:  723:		if(addr.ss_family == AF_INET){
    #####:  724:			if(inet_ntop(AF_INET, &((struct sockaddr_in *)&addr)->sin_addr.s_addr, buf, len)){
    #####:  725:				return 0;
        -:  726:			}
    #####:  727:		}else if(addr.ss_family == AF_INET6){
    #####:  728:			if(inet_ntop(AF_INET6, &((struct sockaddr_in6 *)&addr)->sin6_addr.s6_addr, buf, len)){
    #####:  729:				return 0;
        -:  730:			}
    #####:  731:		}
    #####:  732:	}
    #####:  733:	return 1;
    #####:  734:}
