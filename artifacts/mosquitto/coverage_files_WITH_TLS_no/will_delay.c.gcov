        -:    0:Source:will_delay.c
        -:    0:Graph:will_delay.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Copyright (c) 2019-2020 Roger Light <roger@atchoo.org>
        -:    3:
        -:    4:All rights reserved. This program and the accompanying materials
        -:    5:are made available under the terms of the Eclipse Public License v1.0
        -:    6:and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7: 
        -:    8:The Eclipse Public License is available at
        -:    9:   http://www.eclipse.org/legal/epl-v10.html
        -:   10:and the Eclipse Distribution License is available at
        -:   11:  http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12: 
        -:   13:Contributors:
        -:   14:   Roger Light - initial implementation and documentation.
        -:   15:*/
        -:   16:
        -:   17:#include "config.h"
        -:   18:
        -:   19:#include <math.h>
        -:   20:#include <stdio.h>
        -:   21:#include <utlist.h>
        -:   22:
        -:   23:#include "mosquitto_broker_internal.h"
        -:   24:#include "memory_mosq.h"
        -:   25:#include "time_mosq.h"
        -:   26:
        -:   27:static struct will_delay_list *delay_list = NULL;
        -:   28:static time_t last_check = 0;
        -:   29:
        -:   30:
    #####:   31:static int will_delay__cmp(struct will_delay_list *i1, struct will_delay_list *i2)
        -:   32:{
    #####:   33:	return i1->context->will_delay_interval - i2->context->will_delay_interval;
        -:   34:}
        -:   35:
        -:   36:
    #####:   37:int will_delay__add(struct mosquitto *context)
        -:   38:{
        -:   39:	struct will_delay_list *item;
        -:   40:
    #####:   41:	item = mosquitto__calloc(1, sizeof(struct will_delay_list));
    #####:   42:	if(!item) return MOSQ_ERR_NOMEM;
        -:   43:
    #####:   44:	item->context = context;
    #####:   45:	context->will_delay_entry = item;
    #####:   46:	item->context->will_delay_time = time(NULL) + item->context->will_delay_interval;
        -:   47:
    #####:   48:	DL_INSERT_INORDER(delay_list, item, will_delay__cmp);
        -:   49:
    #####:   50:	return MOSQ_ERR_SUCCESS;
    #####:   51:}
        -:   52:
        -:   53:
        -:   54:/* Call on broker shutdown only */
    #####:   55:void will_delay__send_all(struct mosquitto_db *db)
        -:   56:{
        -:   57:	struct will_delay_list *item, *tmp;
        -:   58:
    #####:   59:	DL_FOREACH_SAFE(delay_list, item, tmp){
    #####:   60:		DL_DELETE(delay_list, item);
    #####:   61:		item->context->will_delay_interval = 0;
    #####:   62:		item->context->will_delay_entry = NULL;
    #####:   63:		context__send_will(db, item->context);
    #####:   64:		mosquitto__free(item);
    #####:   65:	}
        -:   66:	
    #####:   67:}
        -:   68:
    #####:   69:void will_delay__check(struct mosquitto_db *db, time_t now)
        -:   70:{
        -:   71:	struct will_delay_list *item, *tmp;
        -:   72:
    #####:   73:	if(now <= last_check) return;
        -:   74:
    #####:   75:	last_check = now;
        -:   76:
    #####:   77:	DL_FOREACH_SAFE(delay_list, item, tmp){
    #####:   78:		if(item->context->will_delay_time < now){
    #####:   79:			DL_DELETE(delay_list, item);
    #####:   80:			item->context->will_delay_interval = 0;
    #####:   81:			item->context->will_delay_entry = NULL;
    #####:   82:			context__send_will(db, item->context);
    #####:   83:			if(item->context->session_expiry_interval == 0){
    #####:   84:				context__add_to_disused(db, item->context);
    #####:   85:			}
    #####:   86:			mosquitto__free(item);
    #####:   87:		}else{
    #####:   88:			return;
        -:   89:		}
    #####:   90:	}
        -:   91:	
    #####:   92:}
        -:   93:
        -:   94:
    #####:   95:void will_delay__remove(struct mosquitto *mosq)
        -:   96:{
    #####:   97:	if(mosq->will_delay_entry != NULL){
    #####:   98:		DL_DELETE(delay_list, mosq->will_delay_entry);
    #####:   99:		mosquitto__free(mosq->will_delay_entry);
    #####:  100:		mosq->will_delay_entry = NULL;
    #####:  101:	}
    #####:  102:}
        -:  103:
